     1                                  [map all scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  %include "driverStruc.inc"
     5                              <1> 
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     8                              <1> ; device driver related structures.                     ;
     9                              <1> ;-------------------------------------------------------;
    10                              <1> 
    11                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    12                              <1> 
    13 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    14 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    15 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    16 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    17 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Unit number byte (Block)
    18                              <1>     
    19                              <1> endstruc
    20                              <1> 
    21                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    22                              <1> 
    23                              <1>     .hdrlen resb 1  ;Length of the request header
    24                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    25                              <1>     .cmdcde resb 1  ;Command code
    26                              <1>     .status resw 1  ;Status word
    27                              <1>     .devptr resq 1  ;Device queue pointer field
    28                              <1> 
    29                              <1> %endmacro
    30                              <1> 
    31                              <1> struc drvReqHdr
    32                              <1>     drvReqHdrM
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    33                              <1> endstruc
    34                              <1> 
    35                              <1> struc initReqPkt  ;Init Request Packet
    36                              <1> 
    37                              <1>     drvReqHdrM   ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    38 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    39 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    40 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    41 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    46                              <1> 
    47                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    48 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    49 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    50 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    51                              <1> 
    52                              <1> endstruc
    53                              <1> 
    54                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    55                              <1> 
    56                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    57 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    58 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    59 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    60                              <1> 
    61                              <1> endstruc
    62                              <1> 
    63                              <1> struc ioReqPkt   ;IO Request Packet
    64                              <1> 
    65                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    66 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    67 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    68 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
    69 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
    70 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
    71                              <1> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
    75                              <1>     
    76                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    77 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
    78                              <1> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc statusReqPkt   ;Status Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    84                              <1> 
    85                              <1> endstruc
    86                              <1> 
    87                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
    88                              <1> 
    89                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    90                              <1>      
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc openReqPkt ;Open Device Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
    96                              <1>      
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc closeReqPkt ;Close Device Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   102                              <1>      
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   106                              <1> 
   107                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   108                              <1>      
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   114 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   115 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   116 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   117 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   118 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   123                              <1>     
   124                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   125                              <1> 
   126                              <1> endstruc
   127                              <1> 
   128                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   129                              <1>     
   130                              <1>     drvReqHdrM    ;Common Driver Header Macro
    22                              <2> 
    23 00000000 ??                  <2>  .hdrlen resb 1
    24 00000001 ??                  <2>  .unitnm resb 1
    25 00000002 ??                  <2>  .cmdcde resb 1
    26 00000003 ????                <2>  .status resw 1
    27 00000005 ????????????????    <2>  .devptr resq 1
    28                              <2> 
   131                              <1> 
   132                              <1> endstruc
     5                                  %include "fatStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous FAT driver   ;
     9                              <1> ; structures. exFAT will have it's own files at a later ;
    10                              <1> ; stage.                                                ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    14                              <1> 
    15 00000000 ??????              <1>     .jmpBoot    resb 3 
    16 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    17 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    18 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    19 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    20 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    21 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    22 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    23 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    24 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    25 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    26 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    27 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    28 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    29                              <1> 
    30 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    31 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    32 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    33 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    34 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    35 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    40                              <1> 
    41 00000000 ??????              <1>     .jmpBoot    resb 3
    42 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    43 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    44 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    45 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    46 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    47 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    48 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    49 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    50 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    51 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    52 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    53 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    54 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    55                              <1> 
    56 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    57 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    58 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    59 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    60 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    61 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    62 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    63                              <1> 
    64 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    65 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    66 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    67 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    68 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    69 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    70                              <1> 
    71                              <1> endstruc
    72                              <1> 
    73                              <1> struc fatDirEntry
    74                              <1> 
    75 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
    76 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
    77 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
    78 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
    79 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
    80 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
    81 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
    82 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
    83 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
    84 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
    85 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
    86 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
    87                              <1> 
    88                              <1> endstruc
    89                              <1> ;Directory attribute equates
    90                              <1>     dirReadOnly     equ 01h
    91                              <1>     dirHidden       equ 02h
    92                              <1>     dirSystem       equ 04h
    93                              <1>     dirVolumeID     equ 08h
    94                              <1>     dirDirectory    equ 10h
    95                              <1>     dirArchive      equ 20h
    96                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
    97                              <1> 
    98                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
    99                              <1> 
   100 00000000 ??????              <1>     .jmpBoot                resb 3 
   101 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   102 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   103 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   104 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   105 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   106 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   107 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   108 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   109 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   110 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   111 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   112 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   113 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   114 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   115 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   116 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   117 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   118 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc FSInfo
   123                              <1> 
   124 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   125 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   126 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   127 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   128 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   129 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   130 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   131                              <1> 
   132                              <1> endstruc
     6                                  %include "dosStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous internal     ;
    10                              <1> ; SCP/DOS structures.                                   ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> ;------------------------------------------------------------------------;
    14                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    15                              <1> ; its file system structure. This is used to locate files and structures
    16                              <1> ; on the device itself and to translate file requests to cluster chains
    17                              <1> ; to LBAs to pass to the disk driver..
    18                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    19                              <1> ; drivers Initialise routine has been called.
    20                              <1> ;------------------------------------------------------------------------;
    21                              <1> struc dpb        ;Drive Parameter Block
    22                              <1> 
    23 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...)
    24 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device
    25 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
    26 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1
    27                              <1> ;                                       i.e. (2^bSectorsPerClusterShift) - 1
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent
    29 00000005 ????????            <1>     .dFAToffset              resd 1  ;Vol rel offset of first FAT, in sectors
    30 00000009 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs
    31 0000000A ????                <1>     .wNumberRootDirEntries   resw 1  ;In sectors
    32 0000000C ????????            <1>     .dClusterHeapOffset      resd 1  ;Start of data area, in sectors
    33 00000010 ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters (volume size)
    34 00000014 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors
    35 00000018 ????????            <1>     .dFirstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
    36 0000001C ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header
    37 00000024 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor
    38 00000025 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1)
    39 00000026 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    40 0000002E ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search
    41 00000032 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown
    42                              <1> 
    43                              <1> endstruc
    44                              <1> 
    45                              <1> ;------------------------------------------------------------------------;
    46                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    47                              <1> ; All disk pathing requests go via the CDS for that drive.
    48                              <1> ; The default drive is the last accessed drive, this number is stored
    49                              <1> ; in the DOS data area.
    50                              <1> ; The CDS is stored as an array with the offset into the array being 
    51                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    52                              <1> ;
    53                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    54                              <1> ;------------------------------------------------------------------------;
    55                              <1> struc cds       ;Current Directory structure
    56 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    57 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    58 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    59 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    60 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    61 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    62                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    63                              <1> ; another, we save the number of chars to skip to that deep level).
    64                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    65                              <1> ; Flags: Bit 15 set = Network drive
    66                              <1> ;        Bit 14 set = Physical drive
    67                              <1> ;        Bit 13 set = JOIN'ed drive
    68                              <1> ;        Bit 12 set = SUBST'ed drive
    69                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    70                              <1> endstruc
    71                              <1> ;CDS equates
    72                              <1>     cdsNetDrive     equ 8000h
    73                              <1>     cdsPhysDrive    equ 4000h
    74                              <1>     cdsJoinDrive    equ 2000h
    75                              <1>     cdsSubstDrive   equ 1000h
    76                              <1>     cdsRedirDrive   equ 0080h
    77                              <1> ;------------------------------------------------------------------------;
    78                              <1> ; The SFT is a way to allow applications to open file handles to files 
    79                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    80                              <1> ; under the first header, and then a second header will be linked to the 
    81                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    82                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    83                              <1> ; using the FCBS= command. Default FCBS=5.
    84                              <1> ;
    85                              <1> ; A file handle describes the file, and the location within the file that
    86                              <1> ; we are reading. The file handle can be manipulated without the file
    87                              <1> ; being in memory, thus allowing the user to access data without needing 
    88                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    89                              <1> ; accessing devices, by treating them as files with their drivers 
    90                              <1> ; responding and translating the manipulations of the file handle itself.
    91                              <1> ; Neither the driver nor the application should see or use the SFT for
    92                              <1> ; the handle, as it is subject to change (and will change when file 
    93                              <1> ; sharing provisions are included). The DOS will make requests to the 
    94                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    95                              <1> ; track of the information in the SFT entry for that handle. 
    96                              <1> ;
    97                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    98                              <1> ; can point to the same file. It all depends on what the applications 
    99                              <1> ; want to do with the File.
   100                              <1> ;
   101                              <1> ; !!!!IMPORTANT!!!!
   102                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   103                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   104                              <1> ;
   105                              <1> ;Each SFT may look like this:
   106                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   107                              <1> ;            |                |
   108                              <1> ;       wNumFiles*sft    wNumFiles*sft
   109                              <1> ;
   110                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   111                              <1> ; System FCBs.
   112                              <1> ;
   113                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   114                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   115                              <1> ;
   116                              <1> ; DEFAULT FILES=15, MINIMUM FILES=5
   117                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   118                              <1> ;------------------------------------------------------------------------;
   119                              <1> struc sfth   ;System file table header
   120                              <1> ; This is the SFT header.
   121                              <1> ; This structure comes before the start of the first file in the array/table.
   122 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   123 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc sft
   127                              <1> ;This is the file struc itself
   128 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   129 00000002 ????                <1>     .wOpenMode   resw 1    ;Bit 15 set if opened via FCB
   130 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   131 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   132 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   133 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   134 00000013 ????                <1>     .wTime       resw 1    ;File Time
   135 00000015 ????                <1>     .wDate       resw 1    ;File Date
   136 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   137 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   138 0000001F ????                <1>     .wRelClust   resw 1    ;Relative cluster in file of the last cluster accessed
   139 00000021 ????????            <1>     .dDirSect    resd 1    ;Relative number of sector containing directory entry 
   140 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Number of dir entry within sector (byte offset/32)
   141 00000026 <res Bh>            <1>     .sFCBName    resb 11   ;8.3 Filename
   142 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Address of PSP of program which first opened this file
   143 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   144                              <1> endstruc
   145                              <1> 
   146                              <1> ;------------------------------------------------------------------------;
   147                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   148                              <1> ; to an internal buffer, and then copying it to the specified location
   149                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   150                              <1> ; another request for the same sector from the same device is made, so 
   151                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   152                              <1> ; size, selected according to the largest detected sector size during 
   153                              <1> ; the initial loadup.
   154                              <1> ;
   155                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   156                              <1> ;
   157                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   158                              <1> ;------------------------------------------------------------------------;
   159                              <1> 
   160                              <1> struc bufferHdr
   161 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   162 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for
   163 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   164 0000000A ????????            <1>     .bufferLBA   resd  1   ;LBA the buffer contains
   165 0000000E ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   166 0000000F ??                  <1>     .bufFAToff   resb  1   ;Sector offset of the backup copy of the FAT on disk
   167 00000010 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   168                              <1> endstruc
     7                                  
     8                                  Segment dSeg nobits align=1 
     9 00000000 ????????????????            dosSegPtr   resq 1    ;Pointer to the data Segment itself
    10 00000008 ??                          bootDrive   resb 1    ;The Int 33h device we booted from
    11 00000009 <res 2Ah>                   requestHdr  resb ioReqPkt_size   
    12                                      ;The device driver header with space for the largest possible packet
    13 00000033 ????????????????            sysVarsPtr  resq 1    ;Pointer to dpbHeadPtr, head of Sys Vars struc below
    14 0000003B ????????????????            mcbChainPtr resq 1    ;Pointer to the MCB chain
    15 00000043 ????????????????            dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain
    16 0000004B ????????????????            sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    17 00000053 ????????????????            clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header
    18                                      ;                    The last driver loaded with the CLOCK$ bit[3] set 
    19 0000005B ????????????????            conPtr      resq 1    ;Pointer to the current active CON device header 
    20                                      ;                    The last driver loaded with the STDIN bit[0] set
    21 00000063 ????                        maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)
    22 00000065 ????????????????            bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain
    23 0000006D ????????????????            cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array
    24 00000075 ????????????????            sfcbHeadPTr resq 1    ;Pointer to the head of the System FCB chain
    25 0000007D ????                        numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    26 0000007F ??                          numMSDdrv   resb 1    ;Number of mass storage devices detected in system
    27 00000080 ??                          lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]
    28 00000081 ??                          numJoinDrv  resb 1    ;Number of Joined Drives
    29 00000082 <res 22h>                   nulDevHdr   resb drvHdr_size
    30                                  
    31                                  ;Swappable, process related data here
    32 000000A4 ??                          inDOS       resb 1    ;Inc on each DOS call, dec when leaving
    33 000000A5 ??                          breakFlag   resb 1    ;If set, check for CTRL+C on all DOS calls
    34 000000A6 ??                          defaultDrv  resb 1    ;Default, last accessed drive
    35 000000A7 ????????????????            currentPSP  resq 1    ;Address of current PSP
    36 000000AF ????????????????            oldRSP      resq 1    ;RSP value before stack switch
    37                                  
    38 000000B7 <res 148h>                  critStack   resq 41
    39 000001FF ????????????????            critStakTop resq 1
    40 00000207 <res 638h>                  IOStack     resq 199
    41 0000083F ????????????????            IOStakTop   resq 1
    42 00000847 <res 638h>                  DiskStack   resq 199
    43 00000E7F ????????????????            DiskStakTop resq 1
    44                                      dSegLen     equ     $
    45                                  
    46                                  Segment .text align=1
    47                                  ; We arrive here with the following values in the registers.
    48                                  ; rbx =  LBA of first Logical Block after SCP/BIOS
    49                                  ; dx  = Int 33h boot device number
    50                                  ; fs  = userbase pointer (pointer to first usable block of RAM)
    51 00000000 55AA                        dw 0AA55h           ;Initial signature
    52 00000002 64881425[08000000]          mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    53                                  
    54 0000000A B9000100C0                  mov ecx, 0C0000100h ;Read FS MSR
    55 0000000F 0F32                        rdmsr
    56 00000011 89D7                        mov edi, edx        ;Get the hi dword, and clear the upper bytes
    57 00000013 48C1E720                    shl rdi, 20h        ;Shift high
    58 00000017 89C7                        mov edi, eax        ;Get the low dword in
    59                                  
    60 00000019 6448893C25-                 mov qword fs:[dosSegPtr], rdi 
    60 0000001E [00000000]         
    61 00000022 4889FD                      mov rbp, rdi    ;Save the start of dosSeg in rdx 
    62 00000025 4881C7[870E0000]            add rdi, dSegLen ;Move destination past end of data area
    63 0000002C 488D35(00000000)            lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    64 00000033 B900100000                  mov ecx, 1000h
    65 00000038 F348A5                      rep movsq
    66                                  
    67                                  ;Modify the pointers in nData before putting them in the data area
    68 0000003B 48012DC6000000              add qword [nData + drvHdr.nxtPtr], rbp
    69 00000042 48012DC9000000              add qword [nData + drvHdr.strPtr], rbp
    70 00000049 48012DCA000000              add qword [nData + drvHdr.intPtr], rbp
    71                                  ;Copy the Null driver to its location in Sysvars
    72 00000050 B922000000                  mov ecx, drvHdr_size
    73 00000055 488D35AC000000              lea rsi, qword [nData]
    74 0000005C 488DBD[82000000]            lea rdi, qword [rbp + nulDevHdr]
    75 00000063 F3A4                        rep movsb   
    76                                  
    77                                  ;Adjust the addresses in the other driver headers 
    78 00000065 48BE-                       mov rsi, conHdr ;Point to the first non-NUL dev in chain
    78 00000067 [8601000000000000] 
    79 0000006F B90C000000                  mov ecx, 12      ;12 drivers in data area
    80 00000074 488D342E                    lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
    81                                  adjDrivers:
    82 00000078 E862000000                  call adjustDrvHdr
    83 0000007D E2F9                        loop adjDrivers
    84                                  
    85 0000007F 6687DB                      xchg bx, bx
    86                                      ;Open NUL
    87 00000082 488D9D[8C000000]            lea rbx, qword [rbp + nulDevHdr + drvHdr.strPtr]    ;Get ptr to strat ptr
    88 00000089 488B1B                      mov rbx, qword [rbx]    ;Get strat ptr
    89 0000008C 30C0                        xor al, al
    90 0000008E FFD3                        call rbx
    91                                  
    92                                      ;Open CON
    93 00000090 48BB-                       mov rbx, conDriver
    93 00000092 [3503000000000000] 
    94 0000009A 488D5C1D00                  lea rbx, qword [rbp+rbx]
    95 0000009F 30C0                        xor al, al
    96 000000A1 FFD3                        call rbx
    97                                  
    98                                      ;Open Mass Storage
    99 000000A3 48BB-                       mov rbx, msdDriver
    99 000000A5 [9B04000000000000] 
   100 000000AD 488D5C1D00                  lea rbx, qword [rbp+rbx]
   101 000000B2 30C0                        xor al, al
   102 000000B4 FFD3                        call rbx
   103                                  
   104 000000B6 488D2D35000000              lea rbp, qword [startmsg]   ;Get the absolute address of message
   105 000000BD B804130000                  mov eax, 1304h
   106 000000C2 CD30                        int 30h
   107                                  
   108 000000C4 64488B3425-                 mov rsi, fs:[nulDevHdr]
   108 000000C9 [82000000]         
   109 000000CD B801C50000                  mov eax, 0C501h ;Connect debugger
   110 000000D2 CD35                        int 35h
   111                                  l1:
   112 000000D4 6631C0                      xor ax, ax
   113 000000D7 CD36                        int 36h
   114 000000D9 B40E                        mov ah, 0Eh
   115 000000DB CD30                        int 30h
   116 000000DD EBF5                        jmp short l1
   117                                  adjustDrvHdr:
   118                                  ;Input: rsi = Effective address of driver in DOS segment
   119                                  ;       rbp = Ptr to the start of the DOS segment
   120                                  ;Output: rsi = EA of next header in DOS segment
   121 000000DF 48012E                      add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   122 000000E2 48016E0A                    add qword [rsi + drvHdr.strPtr], rbp
   123 000000E6 48016E12                    add qword [rsi + drvHdr.intPtr], rbp
   124 000000EA 4881C622000000              add rsi, drvHdr_size
   125 000000F1 C3                          ret
   126                                  
   127 000000F2 5374617274696E6720-     startmsg db "Starting SCP/DOS...",0Ah,0Dh,0
   127 000000FB 5343502F444F532E2E-
   127 00000104 2E0A0D00           
   128                                  nData:
   129 00000108 [8601000000000000]          dq conHdr
   130 00000110 0480                        dw 08004h
   131 00000112 [2E03000000000000]          dq nulStrat
   132 0000011A [3403000000000000]          dq nulIntr
   133 00000122 4E554C2020202020            db "NUL     " ;Default NUL data
   134                                  
   135                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 
   136                                  ;-----------------------------------:
   137                                  ;       Misc System routines        :
   138                                  ;-----------------------------------:
   139                                  findLRUBuffer: 
   140                                  ;Finds least recently used buffer, links it and returns ptr to it in rbx
   141                                  ;Input: Nothing
   142                                  ;Output: rbx = Pointer to the buffer to use
   143 00000000 52                          push rdx
   144 00000001 488B1D(65000000)            mov rbx, qword [bufHeadPtr]
   145 00000008 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   146 0000000F 7502                        jne .flb1
   147 00000011 5A                          pop rdx
   148 00000012 C3                          ret
   149                                  .flb1:
   150 00000013 4889DA                      mov rdx, rbx    ;Save a ptr to the previous buffer header
   151 00000016 488B1A                      mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   152 00000019 48813BFFFFFFFF              cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   153 00000020 75F1                        jne .flb1   ;If not LRU, keep walking, else process
   154 00000022 48C702FFFFFFFF              mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   155 00000029 488B15(65000000)            mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   156 00000030 48891D(65000000)            mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   157 00000037 488913                      mov qword [rbx + bufferHdr.nextBufPtr], rdx
   158 0000003A 5A                          pop rdx
   159 0000003B C3                          ret
   160                                  
   161                                  findDPB:
   162                                  ;Finds the DPB for a given drive
   163                                  ;Input:   dl = Drive number (0=A, 1=B etc...)
   164                                  ;Output: al = 00, rbx = Pointer to the DPB
   165                                  ;        al = -1, Failed, no DPB for device, rbx destroyed
   166 0000003C 488B1D(43000000)            mov rbx, qword [dpbHeadPtr]
   167                                  .fd1:
   168 00000043 30C0                        xor al, al
   169 00000045 3813                        cmp byte [rbx + dpb.bDriveNumber], dl
   170 00000047 740F                        je .fd2
   171 00000049 488B5B26                    mov rbx, qword [rbx + dpb.qNextDPBPtr]
   172 0000004D B0FF                        mov al, -1
   173 0000004F 4881FBFFFFFFFF              cmp rbx, -1 ;If rbx followed last item in list, no DPB exists for dl
   174 00000056 75EB                        jne .fd1
   175                                  .fd2:
   176 00000058 C3                          ret
   177                                  ;-----------------------------------:
   178                                  ;       File System routines        :
   179                                  ;-----------------------------------:
   180                                  fatProc:
   181                                  ;-----------------------------------:
   182                                  ;        Interrupt routines         :
   183                                  ;-----------------------------------:
   184                                  terminateProcess:   ;Int 40h
   185                                  functionDispatch:   ;Int 41h Main function dispatcher
   186                                  terminateHandler:   ;Int 42h
   187                                  ctrlCHandler:       ;Int 43h
   188                                  critErrorHandler:   ;Int 44h
   189                                  ;User Stack in usage here, must be swapped to before this is called
   190                                  ;Entered with AH = Critical Error Bitfield
   191                                  
   192                                  
   193                                  .errorMsgTable:
   194 00000059 57726974652050726F-                 db "Write Protect $"           ;Error 0
   194 00000062 746563742024       
   195 00000068 556E6B6E6F776E2055-                 db "Unknown Unit $"           ;Error 1
   195 00000071 6E69742024         
   196 00000076 4E6F74205265616479-                 db "Not Ready $"             ;Error 2
   196 0000007F 2024               
   197 00000081 556E6B6E6F776E2043-                 db "Unknown Command $"        ;Error 3
   197 0000008A 6F6D6D616E642024   
   198 00000092 44617461204572726F-                 db "Data Error $"             ;Error 4
   198 0000009B 722024             
   199 0000009E 426164205265717565-                 db "Bad Request $"            ;Error 5
   199 000000A7 73742024           
   200 000000AB 5365656B2024                        db "Seek $"                   ;Error 6
   201 000000B1 556E6B6E6F776E204D-                 db "Unknown Media $"          ;Error 7
   201 000000BA 656469612024       
   202 000000C0 536563746F72204E6F-                 db "Sector Not Found $"       ;Error 8
   202 000000C9 7420466F756E642024 
   203 000000D2 4F7574204F66205061-                 db "Out Of Paper $"           ;Error 9
   203 000000DB 7065722024         
   204 000000E0 577269746520466175-                 db "Write Fault $"            ;Error A
   204 000000E9 6C742024           
   205 000000ED 52656164204661756C-                 db "Read Fault $"             ;Error B
   205 000000F6 742024             
   206 000000F9 47656E6572616C2046-                 db "General Failure $"        ;Error C
   206 00000102 61696C7572652024   
   207                                  
   208 0000010A 64726976652024          .drive      db "drive $"
   209 00000111 6572726F7220726561-     .readmsg    db "error reading $"
   209 0000011A 64696E672024       
   210 00000120 6572726F7220777269-     .writemsg   db "error writing $"
   210 00000129 74696E672024       
   211 0000012F 0A0D24                  .crlf       db 0Ah, 0Dh, "$""
   211          ******************       warning: unterminated string [-w+other]
   212 00000132 41626F72742C2024        .abortmsg   db "Abort, $" ;Comma gets changed to ? if only abort permitted
   213 0000013A 49676E6F72652C2024      .ignoremsg  db "Ignore, $"
   214 00000143 52657472792C2024        .retrymsg   db "Retry, $"
   215 0000014B 4661696C3F2024          .failmsg    db "Fail? $"
   216                                  absDiskRead:        ;Int 45h
   217                                  ;al = Drive number
   218                                  ;rbx = Memory Buffer address
   219                                  ;ecx = Number of sectors to read (max 255 for now)
   220                                  ;rdx = Start LBA to read from
   221 00000152 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   222 00000156 8A80[10070000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   223 0000015C 4891                        xchg rax, rcx
   224 0000015E 4887CA                      xchg rcx, rdx
   225 00000161 B482                        mov ah, 82h
   226 00000163 CD33                        int 33h
   227 00000165 48CF                        iretq
   228                                  absDiskWrite:       ;Int 46h
   229 00000167 480FB6C0                    movzx rax, al   ;Zero extend DOS drive number 
   230 0000016B 8A80[10070000]              mov al, byte [msdDriver.msdBIOSmap + rax] ;Get translated BIOS num into al
   231 00000171 4891                        xchg rax, rcx
   232 00000173 4887CA                      xchg rcx, rdx
   233 00000176 B483                        mov ah, 83h
   234 00000178 CD33                        int 33h
   235 0000017A 48CF                        iretq
   236                                  terminateResident:  ;Int 47h
   237                                  inDosHandler:       ;Int 48h
   238                                  ;Called when DOS idle
   239 0000017C 48CF                        iretq
   240                                  fastOutput:         ;Int 49h
   241                                  ;Called with char to transfer in al
   242 0000017E 50                          push rax
   243 0000017F B40E                        mov ah, 0Eh
   244 00000181 CD30                        int 30h
   245 00000183 58                          pop rax
   246 00000184 48CF                        iretq
   247                                  passCommand:        ;Int 4Eh
   248                                  multiplex:          ;Int 4Fh
   249                                  ;-----------------------------------:
   250                                  ;          Driver routines          :
   251                                  ;-----------------------------------:
   252                                  drivers:
   253                                  conHdr:
   254 00000186 [A801000000000000]          dq auxHdr
   255 0000018E 1308                        dw 0813h
   256 00000190 [1E03000000000000]          dq commonStrat
   257 00000198 [3503000000000000]          dq conDriver
   258 000001A0 434F4E2020202020            db "CON     "
   259                                  auxHdr:
   260 000001A8 [CA01000000000000]          dq prnHdr
   261 000001B0 0080                        dw 08000h
   262 000001B2 [1E03000000000000]          dq commonStrat
   263 000001BA [F003000000000000]          dq com1Intr
   264 000001C2 4155582020202020            db "AUX     "
   265                                  prnHdr:
   266 000001CA [EC01000000000000]          dq clkHdr
   267 000001D2 40A0                        dw 0A040h
   268 000001D4 [1E03000000000000]          dq commonStrat
   269 000001DC [B802000000000000]          dq lpt1Hdr
   270 000001E4 50524E2020202020            db "PRN     "
   271                                  clkHdr:
   272 000001EC [0E02000000000000]          dq msdHdr
   273 000001F4 0880                        dw 08008h
   274 000001F6 [1E03000000000000]          dq commonStrat
   275 000001FE [F003000000000000]          dq clkDriver
   276 00000206 434C4F434B242020            db "CLOCK$  "
   277                                  msdHdr:
   278 0000020E [3002000000000000]          dq com1Hdr
   279 00000216 0008                        dw 00800h   ;Once Generic IO implemented, change to 00840h
   280 00000218 [1E03000000000000]          dq commonStrat
   281 00000220 [9B04000000000000]          dq msdDriver
   282 00000228 0000000000000000            db 0,0,0,0,0,0,0,0
   283                                  com1Hdr:
   284 00000230 [5202000000000000]          dq com2Hdr
   285 00000238 0080                        dw 08000h
   286 0000023A [1E03000000000000]          dq commonStrat
   287 00000242 [F003000000000000]          dq com1Intr
   288 0000024A 434F4D3120202020            db "COM1    "
   289                                  com2Hdr:
   290 00000252 [7402000000000000]          dq com3Hdr
   291 0000025A 0080                        dw 08000h
   292 0000025C [1E03000000000000]          dq commonStrat
   293 00000264 [F903000000000000]          dq com2Intr
   294 0000026C 434F4D3220202020            db "COM2    "
   295                                  com3Hdr:
   296 00000274 [9602000000000000]          dq com4Hdr
   297 0000027C 0080                        dw 08000h
   298 0000027E [1E03000000000000]          dq commonStrat
   299 00000286 [0204000000000000]          dq com3Intr
   300 0000028E 434F4D3320202020            db "COM3    "
   301                                  com4Hdr:
   302 00000296 [B802000000000000]          dq lpt1Hdr
   303 0000029E 0080                        dw 08000h
   304 000002A0 [1E03000000000000]          dq commonStrat
   305 000002A8 [0B04000000000000]          dq com4Intr
   306 000002B0 434F4D3420202020            db "COM4    "
   307                                  lpt1Hdr:
   308 000002B8 [DA02000000000000]          dq lpt2Hdr
   309 000002C0 40A0                        dw 0A040h
   310 000002C2 [1E03000000000000]          dq commonStrat
   311 000002CA [8B04000000000000]          dq lptDriver
   312 000002D2 4C50543120202020            db "LPT1    "
   313                                  lpt2Hdr:
   314 000002DA [FC02000000000000]          dq lpt3Hdr
   315 000002E2 40A0                        dw 0A040h
   316 000002E4 [1E03000000000000]          dq commonStrat
   317 000002EC [8B04000000000000]          dq lptDriver
   318 000002F4 4C50543220202020            db "LPT2    "
   319                                  lpt3Hdr:
   320 000002FC FFFFFFFFFFFFFFFF            dq -1
   321 00000304 40A0                        dw 0A040h
   322 00000306 [1E03000000000000]          dq commonStrat
   323 0000030E [8B04000000000000]          dq lptDriver
   324 00000316 4C50543320202020            dq "LPT3    "
   325                                  
   326                                  commonStrat:
   327                                  ;DOS calls this function with rbx=Ptr to request header
   328 0000031E 48891D01000000              mov qword [reqHdrPtr], rbx
   329 00000325 C3                          ret
   330 00000326 0000000000000000        reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
   331                                  
   332                                  nulStrat:
   333 0000032E 66C743030001                mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
   334                                  nulIntr:
   335 00000334 C3                          ret
   336                                  
   337                                  conDriver:
   338 00000335 50                          push rax
   339 00000336 53                          push rbx
   340 00000337 488B1DE8FFFFFF              mov rbx, qword [reqHdrPtr]
   341 0000033E 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   342 00000341 84C0                        test al, al
   343 00000343 7421                        jz conInit
   344 00000345 3C04                        cmp al, 4
   345 00000347 744D                        jz conRead
   346 00000349 3C05                        cmp al, 5
   347 0000034B 7466                        jz conNondestructiveRead
   348 0000034D 3C06                        cmp al, 6
   349 0000034F 740C                        jz conExit
   350 00000351 3C07                        cmp al, 7
   351 00000353 7471                        jz conFlushInputBuffers
   352 00000355 3C08                        cmp al, 8
   353 00000357 7479                        jz conWrite
   354 00000359 3C09                        cmp al, 9
   355 0000035B 7475                        jz conWrite
   356                                  ;All other cases fall through here
   357                                  conExit:
   358 0000035D 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   359 00000363 5B                          pop rbx
   360 00000364 58                          pop rax
   361 00000365 C3                          ret
   362                                  conInit:    ;Function 0
   363 00000366 52                          push rdx
   364                                      ;Flush keyboard buffer
   365                                  .ci0:
   366 00000367 B401                        mov ah, 01      ;Get buffer status
   367 00000369 CD36                        int 36h
   368 0000036B 7406                        jz .ci1      ;If zero clear => no more keys to read
   369 0000036D 30E4                        xor ah, ah
   370 0000036F CD36                        int 36h ;Read key to flush from buffer
   371 00000371 EBF4                        jmp short .ci0
   372                                  .ci1:
   373 00000373 B800050000                  mov eax, 0500h  ;Set page zero as the default page
   374 00000378 CD30                        int 30h
   375 0000037A B402                        mov ah, 02h
   376 0000037C 31D2                        xor edx, edx    ;Set screen cursor to top right corner
   377 0000037E 88D7                        mov bh, dl      ;Set cursor for page 0
   378 00000380 CD30                        int 30h
   379 00000382 B707                        mov bh, 07h     ;Grey/Black attribs
   380 00000384 B800060000                  mov eax, 0600h  ;Clear whole screen
   381 00000389 CD30                        int 30h
   382 0000038B 5A                          pop rdx
   383 0000038C EBCF                        jmp short conExit
   384                                  conIORead:
   385 0000038E 66C743030380                mov word [rbx + drvReqHdr.status], 8003h    ;Error, unknown command!
   386 00000394 EBC7                        jmp short conExit
   387                                  conRead:    ;Function 4
   388 00000396 57                          push rdi
   389 00000397 51                          push rcx
   390 00000398 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   391 0000039C 31C9                        xor ecx, ecx    ;Zero the char counter
   392                                  .cr1:
   393 0000039E 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   394 000003A1 7409                        je .cre2
   395 000003A3 31C0                        xor eax, eax
   396 000003A5 CD36                        int 36h
   397 000003A7 AA                          stosb   ;Store char in al into buffer and inc rdi
   398 000003A8 FFC1                        inc ecx
   399 000003AA EBF2                        jmp short .cr1
   400                                  .cre2:
   401 000003AC 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   402 000003AF 59                          pop rcx
   403 000003B0 5F                          pop rdi
   404 000003B1 EBAA                        jmp short conExit
   405                                  conNondestructiveRead:  ;Function 5
   406 000003B3 B401                        mov ah, 01h     ;Get key if exists
   407 000003B5 CD36                        int 36h
   408 000003B7 7405                        jz .cnr           ;If zero clear => no key, go forwards
   409                                      ;Keystroke available
   410 000003B9 88430D                      mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   411 000003BC EB9F                        jmp short conExit
   412                                  .cnr: ;No keystroke available
   413 000003BE 66C743030003                mov word [rbx + nonDestInNoWaitReqPkt.status], 0300h   ;Set busy bit
   414 000003C4 EB97                        jmp short conExit
   415                                  conFlushInputBuffers:   ;Function 7
   416 000003C6 B401                        mov ah, 01      ;Get buffer status
   417 000003C8 CD36                        int 36h
   418 000003CA 7491                        jz conExit      ;If zero clear => no more keys to read
   419 000003CC 30E4                        xor ah, ah
   420 000003CE CD36                        int 36h ;Read key to flush from buffer
   421 000003D0 EBF4                        jmp short conFlushInputBuffers
   422                                  conWrite:   ;Function 8 and 9
   423 000003D2 56                          push rsi
   424 000003D3 51                          push rcx
   425 000003D4 488B730E                    mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   426 000003D8 31C9                        xor ecx, ecx    ;Zero the char counter
   427                                  .cw1: 
   428 000003DA 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   429 000003DD 7407                        je .cw2
   430 000003DF AC                          lodsb   ;Get char into al, and inc rsi
   431 000003E0 CD49                        int 49h ;Fast print char
   432 000003E2 FFC1                        inc ecx
   433 000003E4 EBF4                        jmp short .cw1 ;keep printing until all chars printed
   434                                  .cw2:
   435 000003E6 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   436 000003E9 59                          pop rcx
   437 000003EA 5E                          pop rsi
   438 000003EB E96DFFFFFF                  jmp conExit
   439                                  
   440                                  clkDriver:
   441                                  
   442                                  comDriver:
   443                                  com1Intr:
   444 000003F0 C6059300000000              mov byte [comDevice], 0
   445 000003F7 EB19                        jmp short comIntr
   446                                  com2Intr:
   447 000003F9 C6058A00000001              mov byte [comDevice], 1
   448 00000400 EB10                        jmp short comIntr
   449                                  com3Intr:
   450 00000402 C6058100000002              mov byte [comDevice], 2
   451 00000409 EB07                        jmp short comIntr
   452                                  com4Intr:
   453 0000040B C6057800000003              mov byte [comDevice], 3
   454                                  comIntr:
   455 00000412 50                          push rax
   456 00000413 53                          push rbx
   457 00000414 51                          push rcx
   458 00000415 52                          push rdx
   459 00000416 56                          push rsi
   460 00000417 488B1D08FFFFFF              mov rbx, qword [reqHdrPtr]
   461 0000041E 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]
   462 00000421 3C04                        cmp al, 4
   463 00000423 7418                        jz comRead
   464 00000425 3C05                        cmp al, 5
   465 00000427 7439                        jz comNondestructiveRead
   466 00000429 3C08                        cmp al, 8
   467 0000042B 743D                        jz comWrite
   468 0000042D 3C09                        cmp al, 9
   469 0000042F 7439                        jz comWrite
   470                                  ;All other cases fall through here
   471                                  comExit:
   472 00000431 66814B030001                or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   473 00000437 5E                          pop rsi
   474 00000438 5A                          pop rdx
   475 00000439 59                          pop rcx
   476 0000043A 5B                          pop rbx
   477 0000043B 58                          pop rax
   478 0000043C C3                          ret
   479                                  comRead:
   480 0000043D 57                          push rdi
   481 0000043E 488B7B0E                    mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   482 00000442 31C9                        xor ecx, ecx    ;Zero the char counter
   483                                  .cr1:
   484 00000444 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   485 00000447 7413                        je .cre2
   486 00000449 B802000000                  mov eax, 02h    ;Recieve 
   487 0000044E 668B1535000000              mov dx, word [comDevice]    ;Get transacting com device
   488 00000455 CD34                        int 34h ;Recieve Char
   489 00000457 AA                          stosb   ;Store char in al into buffer and inc rdi
   490 00000458 FFC1                        inc ecx
   491 0000045A EBE8                        jmp short .cr1
   492                                  .cre2:
   493 0000045C 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   494 0000045F 5F                          pop rdi
   495 00000460 EBCF                        jmp short comExit
   496                                  comNondestructiveRead:
   497 00000462 66C743030002                mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h    ;Set busy bit 
   498 00000468 EBC7                        jmp short comExit
   499                                  comWrite:
   500 0000046A 488B730E                 mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   501 0000046E 31C9                        xor ecx, ecx    ;Zero the char counter
   502                                  .cw1: 
   503 00000470 3B4B16                      cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   504 00000473 7410                        je .cw2
   505 00000475 AC                          lodsb   ;Get char into al, and inc rsi
   506 00000476 B401                        mov ah, 01h ;Move function number into ah
   507 00000478 668B150B000000              mov dx, word [comDevice]
   508 0000047F CD34                        int 34h ;Transmit char
   509 00000481 FFC1                        inc ecx
   510 00000483 EBEB                        jmp short .cw1 ;keep printing until all chars printed
   511                                  .cw2:
   512 00000485 894B16                      mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   513 00000488 EBA7                        jmp short comExit
   514 0000048A 00                      comDevice   db 0
   515                                  
   516                                  lptDriver:    ;Drivers for LPT 1, 2, 3
   517 0000048B 57                          push rdi
   518 0000048C 488B3D93FEFFFF              mov rdi, qword [reqHdrPtr]
   519 00000493 66C747030001                mov word [rdi + drvReqHdr.status], 0100h    ;Done bit set
   520 00000499 5F                          pop rdi
   521 0000049A C3                          ret
   522                                  
   523                                  msdDriver:
   524 0000049B 50                          push rax
   525 0000049C 53                          push rbx
   526 0000049D 51                          push rcx
   527 0000049E 52                          push rdx
   528 0000049F 56                          push rsi
   529 000004A0 57                          push rdi
   530 000004A1 55                          push rbp
   531 000004A2 488B1D7DFEFFFF              mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
   532 000004A9 8A4302                      mov al, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
   533 000004AC 3C18                        cmp al, 24  ;Check cmd num is valid
   534 000004AE 776C                        ja .msdError
   535 000004B0 84C0                        test al, al
   536 000004B2 7476                        jz .msdInit
   537 000004B4 3C01                        cmp al, 01
   538 000004B6 0F8409010000                jz .msdMedChk
   539 000004BC 3C02                        cmp al, 02
   540 000004BE 0F8442010000                jz .msdBuildBPB
   541 000004C4 3C03                        cmp al, 03
   542 000004C6 0F847B010000                jz .msdIOCTLRead
   543 000004CC 3C04                        cmp al, 04
   544 000004CE 0F8478010000                jz .msdRead
   545 000004D4 3C08                        cmp al, 08
   546 000004D6 0F8482010000                jz .msdWrite
   547 000004DC 3C09                        cmp al, 09
   548 000004DE 0F848C010000                jz .msdWriteVerify
   549 000004E4 3C0C                        cmp al, 12
   550 000004E6 0F849D010000                jz .msdIOCTLWrite
   551 000004EC 3C0D                        cmp al, 13
   552 000004EE 0F849A010000                jz .msdDevOpen
   553 000004F4 3C0E                        cmp al, 14
   554 000004F6 0F84A2010000                jz .msdDevClose
   555 000004FC 3C0F                        cmp al, 15
   556 000004FE 0F84AA010000                jz .msdRemovableMedia
   557 00000504 3C13                        cmp al, 19
   558 00000506 0F84C0010000                jz .msdGenericIOCTL
   559 0000050C 3C17                        cmp al, 23
   560 0000050E 0F84BD010000                jz .msdGetLogicalDev
   561 00000514 3C18                        cmp al, 24
   562 00000516 0F84C3010000                jz .msdSetLogicalDev
   563                                  .msdError:
   564                                  .msdDriverExit:
   565 0000051C 66814B030001                or word [rbx + drvReqHdr.status], 0100h ;Set done bit
   566 00000522 5D                          pop rbp
   567 00000523 5F                          pop rdi
   568 00000524 5E                          pop rsi
   569 00000525 5A                          pop rdx
   570 00000526 59                          pop rcx
   571 00000527 5B                          pop rbx
   572 00000528 58                          pop rax
   573 00000529 C3                          ret
   574                                  .msdInit:            ;Function 0
   575 0000052A CD31                        int 31h ;Get number of Int 33h devices in r8b
   576 0000052C 4D0FB6C0                    movzx r8, r8b   ;Keeps real count
   577 00000530 4489C0                      mov eax, r8d
   578 00000533 3C01                        cmp al, 1
   579 00000535 7702                        ja .mi1
   580 00000537 FEC0                        inc al ;Make it two
   581                                  .mi1:
   582 00000539 BA05000000                  mov edx, 5
   583 0000053E 39D0                        cmp eax, edx
   584 00000540 0F47C2                      cmova eax, edx  ;If num of drives is greater than 5, consider only first 5
   585 00000543 8805DFFCFFFF                mov byte [msdHdr + drvHdr.drvNam], al ;Save num of drvs in drvr hdr
   586 00000549 88430D                      mov byte [rbx + initReqPkt.numunt], al ;And in req packet
   587 0000054C 440005(7F000000)            add byte [numMSDdrv], r8b ;Add the true number of devices to total
   588 00000553 31ED                        xor ebp, ebp    ;Use bpl as device counter, cmp to r8b
   589 00000555 488D3DE6010000              lea rdi, qword [.msdBPBblks]
   590 0000055C 53                          push rbx
   591                                  .mi2:
   592 0000055D 89EA                        mov edx, ebp
   593 0000055F 488D1D34040000              lea rbx, qword [driverDataPtr]  ;Get effective address of scratch space
   594 00000566 31C9                        xor ecx, ecx    ;Sector 0
   595 00000568 B801820000                  mov eax, 8201h       ;Read 1 sector
   596 0000056D CD33                        int 33h
   597 0000056F 724E                        jc .msdInitError
   598                                  
   599 00000571 488D3522040000              lea rsi, qword [driverDataPtr]  ;Point to start of data
   600 00000578 B90F000000                  mov ecx, bpbEx_size/8
   601 0000057D F348A5                      rep movsq   ;Move the BPB data into the right block
   602                                  
   603 00000580 FFC5                        inc ebp
   604 00000582 4C39C5                      cmp rbp, r8 ;Have we written the BPB for all physical drives?
   605 00000585 75D6                        jne .mi2  ;No? Go again
   606                                  
   607 00000587 488D3D8C010000              lea rdi, qword [.msdBPBTbl]  ;Point to start of table
   608 0000058E 488D15AD010000              lea rdx, qword [.msdBPBblks]
   609                                  .mi3:
   610 00000595 488917                      mov qword [rdi], rdx   ;Move the block entry ptr to rdi
   611 00000598 4881C278000000              add rdx, bpbEx_size      ;Make rdx point to the next block entry
   612 0000059F FFCD                        dec ebp
   613 000005A1 75F2                        jnz .mi3  ;If not zero yet, go again
   614                                  
   615 000005A3 5B                          pop rbx
   616 000005A4 488D156F010000              lea rdx, qword [.msdBPBTbl]  ;Get far pointer 
   617 000005AB 48895316                    mov qword [rbx + initReqPkt.optptr], rdx  ;Save ptr to array
   618 000005AF 488D15E4030000              lea rdx, qword [driverDataPtr]
   619 000005B6 4889530E                    mov qword [rbx + initReqPkt.endptr], rdx    ;Save free space ptr
   620 000005BA E95DFFFFFF                  jmp .msdDriverExit
   621                                  .msdInitError:
   622 000005BF 5B                          pop rbx
   623 000005C0 E957FFFFFF                  jmp .msdDriverExit
   624                                  .msdMedChk:          ;Function 1
   625                                  ;Once the BIOS function is implmented that reads the changeline, use that!
   626                                  ;For BIOSes that dont support the changeline, the following procedure will 
   627                                  ; suffice.
   628 000005C5 480FB64301                  movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   629 000005CA 8A90[10070000]              mov dl, byte [.msdBIOSmap + rax]    ;Translate unitnum to BIOS num
   630 000005D0 F6C280                      test dl, 80h    ;If it is a fixed disk, no change!
   631 000005D3 7528                        jnz .mmcNoChange
   632                                  ;Now we test Media Descriptor
   633 000005D5 8A530D                      mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   634 000005D8 488B3CC5[1A070000]          mov rdi, qword [.msdBPBTbl + 8*rax]
   635 000005E0 488B3F                      mov rdi, qword [rdi]    ;Dereference rdi
   636 000005E3 385715                      cmp byte [rdi + bpb32.media], dl    ;Compare media descriptor bytes
   637 000005E6 740C                        je .mmcUnsure
   638                                  .mmcChange: ;Fail safe, always assume the device has changed
   639 000005E8 C6430EFF                    mov byte [rbx + mediaCheckReqPkt.medret], -1
   640 000005EC 48C7430F[06070000]          mov qword [rbx + mediaCheckReqPkt.desptr], .msdDefLabel ;Temp, ret def label
   641                                  .mmcUnsure:
   642 000005F4 C6430E00                    mov byte [rbx + mediaCheckReqPkt.medret], 0
   643 000005F8 E91FFFFFFF                  jmp .msdDriverExit
   644                                  .mmcNoChange:
   645 000005FD C6430E01                    mov byte [rbx + mediaCheckReqPkt.medret], 1
   646 00000601 E916FFFFFF                  jmp .msdDriverExit
   647                                  
   648                                  .msdBuildBPB:        ;Function 2
   649 00000606 4889DE                      mov rsi, rbx
   650 00000609 480FB64601                  movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   651 0000060E 8A90[10070000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
   652 00000614 488B5E0E                    mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   653 00000618 31C9                        xor ecx, ecx    ;Read Sector 0
   654 0000061A B801820000                  mov eax, 8201h  ;LBA Read 1 sector
   655 0000061F CD33                        int 33h
   656 00000621 7224                        jc .mbbpbError
   657 00000623 4887DE                      xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   658 00000626 480FB64301                  movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   659 0000062B 488B3CC5[1A070000]          mov rdi, qword [.msdBPBTbl + 8*rax] ;Get pointer to pointer to buffer
   660 00000633 488B3F                      mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   661 00000636 48897B16                    mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   662 0000063A B90F000000                  mov ecx, bpbEx_size/8
   663 0000063F F348A5                      rep movsq   ;Move the BPB data into the right space
   664 00000642 E9D5FEFFFF                  jmp .msdDriverExit
   665                                  .mbbpbError:
   666                                  .msdIOCTLRead:       ;Function 3, returns done
   667 00000647 E9D0FEFFFF                  jmp .msdDriverExit
   668                                  .msdRead:            ;Function 4
   669 0000064C 4889DD                      mov rbp, rbx
   670 0000064F B482                        mov ah, 82h ;LBA Read Sectors
   671 00000651 E897000000                  call .msdBlkIOCommon
   672 00000656 4889EB                      mov rbx, rbp
   673 00000659 E9BEFEFFFF                  jmp .msdDriverExit
   674                                  .msdWrite:           ;Function 8
   675 0000065E 4889DD                      mov rbp, rbx
   676 00000661 B483                        mov ah, 83h ;LBA Write Sectors
   677 00000663 E885000000                  call .msdBlkIOCommon
   678 00000668 4889EB                      mov rbx, rbp
   679 0000066B E9ACFEFFFF                  jmp .msdDriverExit
   680                                  .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   681 00000670 4889DD                      mov rbp, rbx
   682 00000673 B483                        mov ah, 83h ;LBA Write Sectors
   683 00000675 E873000000                  call .msdBlkIOCommon
   684 0000067A B484                        mov ah, 84h ;LBA Verify Sectors
   685 0000067C E86C000000                  call .msdBlkIOCommon
   686 00000681 4889EB                      mov rbx, rbp
   687 00000684 E993FEFFFF                  jmp .msdDriverExit
   688                                  .msdIOCTLWrite:      ;Function 12, returns done
   689 00000689 E98EFEFFFF                  jmp .msdDriverExit
   690                                  .msdDevOpen:         ;Function 13
   691 0000068E 480FB64301                  movzx rax, byte [rbx + openReqPkt.unitnm]
   692 00000693 FE80[15070000]              inc byte [.msdHdlCnt + rax]  ;Inc handle cnt for given unit
   693 00000699 E97EFEFFFF                  jmp .msdDriverExit
   694                                  .msdDevClose:        ;Function 14
   695 0000069E 480FB64301                  movzx rax, byte [rbx + closeReqPkt.unitnm]
   696 000006A3 FE88[15070000]              dec byte [.msdHdlCnt + rax]  ;Dec handle cnt for given unit
   697 000006A9 E96EFEFFFF                  jmp .msdDriverExit
   698                                  .msdRemovableMedia:  ;Function 15
   699 000006AE 480FB64301                  movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   700 000006B3 8A80[10070000]              mov al, byte [.msdBIOSmap + rax]    ;Get BIOS number
   701 000006B9 A880                        test al, 80h
   702 000006BB 0F845BFEFFFF                jz .msdDriverExit   ;If removable, busy bit is clear
   703 000006C1 66C743032000                mov word [rbx + remMediaReqPkt.status], 20h ;Set Busy bit
   704 000006C7 E950FEFFFF                  jmp .msdDriverExit
   705                                  .msdGenericIOCTL:    ;Function 19
   706 000006CC E94BFEFFFF                  jmp .msdDriverExit
   707                                  .msdGetLogicalDev:   ;Function 23
   708 000006D1 8A0538000000                mov al, byte [.msdCurDev]
   709 000006D7 884301                      mov byte [rbx + getDevReqPkt.unitnm], al
   710 000006DA E93DFEFFFF                  jmp .msdDriverExit
   711                                  .msdSetLogicalDev:   ;Function 24
   712 000006DF 8A4301                      mov al, byte [rbx + getDevReqPkt.unitnm]
   713 000006E2 880527000000                mov byte [.msdCurDev], al
   714 000006E8 E92FFEFFFF                  jmp .msdDriverExit
   715                                  
   716                                  .msdBlkIOCommon:  ;Does block IO
   717                                  ;Called with rbp containing old rbx value and ah with function number
   718                                  ;Error handled by caller
   719 000006ED 480FB64501                  movzx rax, byte [rbp + ioReqPkt.unitnm]
   720 000006F2 8A90[10070000]              mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req
   721 000006F8 488B4D1A                    mov rcx, qword [rbp + ioReqPkt.strtsc]  ;Get start sector
   722 000006FC 8A4516                      mov al, byte [rbp + ioReqPkt.tfrlen]    ;Get number of sectors, max 255
   723 000006FF 488B5D0E                    mov rbx, qword [rbp + ioReqPkt.bufptr]  ;Get Memory Buffer
   724 00000703 CD33                        int 33h
   725 00000705 C3                          ret
   726                                  
   727 00000706 4E4F204E414D452000      .msdDefLabel db "NO NAME ",0 ;Default volume label
   728                                  ;LASTDRIVE default is 5
   729 0000070F 00                      .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   730                                  ; Except when single drive in use, in which case Drive A and B refer to device 0
   731 00000710 0000000000              .msdBIOSmap  db 5 dup (0)    ;Translates DOS drive number to BIOS number
   732 00000715 0000000000              .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   733 0000071A 000000000000000000-     .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   733 00000723 000000000000000000-
   733 0000072C 000000000000000000-
   733 00000735 000000000000000000-
   733 0000073E 00000000           
   734 00000742 000000000000000000-     .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   734 0000074B 000000000000000000-
   734 00000754 000000000000000000-
   734 0000075D 000000000000000000-
   734 00000766 000000000000000000-
   734 0000076F 000000000000000000-
   734 00000778 000000000000000000-
   734 00000781 000000000000000000-
   734 0000078A 000000000000000000-
   734 00000793 000000000000000000-
   734 0000079C 000000000000000000-
   734 000007A5 000000000000000000-
   734 000007AE 000000000000000000-
   734 000007B7 000000000000000000-
   734 000007C0 000000000000000000-
   734 000007C9 000000000000000000-
   734 000007D2 000000000000000000-
   734 000007DB 000000000000000000-
   734 000007E4 000000000000000000-
   734 000007ED 000000000000000000-
   734 000007F6 000000000000000000-
   734 000007FF 000000000000000000-
   734 00000808 000000000000000000-
   734 00000811 000000000000000000-
   734 0000081A 000000000000000000-
   734 00000823 000000000000000000-
   734 0000082C 000000000000000000-
   734 00000835 000000000000000000-
   734 0000083E 000000000000000000-
   734 00000847 000000000000000000-
   734 00000850 000000000000000000-
   734 00000859 000000000000000000-
   734 00000862 000000000000000000-
   734 0000086B 000000000000000000-
   734 00000874 000000000000000000-
   734 0000087D 000000000000000000-
   734 00000886 000000000000000000-
   734 0000088F 000000000000000000-
   734 00000898 000000000000000000-
   734 000008A1 000000000000000000-
   734 000008AA 000000000000000000-
   734 000008B3 000000000000000000-
   734 000008BC 000000000000000000-
   734 000008C5 000000000000000000-
   734 000008CE 000000000000000000-
   734 000008D7 000000000000000000-
   734 000008E0 000000000000000000-
   734 000008E9 000000000000000000-
   734 000008F2 000000000000000000-
   734 000008FB 000000000000000000-
   734 00000904 000000000000000000-
   734 0000090D 000000000000000000-
   734 00000916 000000000000000000-
   734 0000091F 000000000000000000-
   734 00000928 000000000000000000-
   734 00000931 000000000000000000-
   734 0000093A 000000000000000000-
   734 00000943 000000000000000000-
   734 0000094C 000000000000000000-
   734 00000955 000000000000000000-
   734 0000095E 000000000000000000-
   734 00000967 000000000000000000-
   734 00000970 000000000000000000-
   734 00000979 000000000000000000-
   734 00000982 000000000000000000-
   734 0000098B 000000000000000000-
   734 00000994 000000000000       
   735                                  
   736                                  driverDataPtr:
