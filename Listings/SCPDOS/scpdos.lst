     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> ;The following three macros, named similarly to the below in use macros
    14                              <1> ; are experimental. Once, I figure out how to make them work, I will
    15                              <1> ; use the below macros as they will make my code much smaller by always
    16                              <1> ; trying to find the nearest returns and valid conditional returns.
    17                              <1> ;The below is an attempt at modifying the macro files found in the 
    18                              <1> ; DOS 2.0 source code
    19                              <1> ;-------------------------------------------------------------------------------
    20                              <1> %macro rreturn 0
    21                              <1> %%a:
    22                              <1>     ret
    23                              <1> ret_l = %%a
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro labelMaker 2 ;Label letter, Condition code
    27                              <1>     j%-2 %%a ; j<NCC> a:
    28                              <1>     return  ;; return
    29                              <1> %%a:
    30                              <1>     ret_%2 = ret_%1 ;; define ret_<CC> to be ret_l
    31                              <1> %endmacro
    32                              <1> 
    33                              <1> %macro ccret 1; Condition code
    34                              <1> %ifdef ret_l    ;; if ret_l is defined
    35                              <1> %if (($ - ret_l) <= 126) and ($ > ret_l) ;; if ret_l is near enough then
    36                              <1> %%a: 
    37                              <1>     j%+1 ret_l      ;; a: j<CC> to ret_l
    38                              <1>     ret_%+1 = %%a     ;; define ret_<CC> to be a:
    39                              <1> %else
    40                              <1> labelMaker a, %1
    41                              <1> %endif
    42                              <1> %else
    43                              <1> %ifdef ret_%+1 ;; if ret_<CC> defined
    44                              <1> %if (($ - ret_&cc) le 126) and ($ gt ret_&cc)
    45                              <1>  ;; if ret_<CC> is near enough
    46                              <1> %%a: 
    47                              <1>     j%+1 ret_%+1     ;; a: j<CC> to ret_<CC>
    48                              <1>     ret_%+1 = %%a ;; define ret_<CC> to be a:
    49                              <1> %else
    50                              <1> labelMaker a, %1
    51                              <1> %endif
    52                              <1> %else
    53                              <1> labelMaker a, %1
    54                              <1> %endif
    55                              <1> %endif
    56                              <1> %endmacro
    57                              <1> ;-------------------------------------------------------------------------------
    58                              <1> ;-------------------------------------------------------------------------------
    59                              <1> ;-------------------------------------------------------------------------------
    60                              <1> ;These macros are live and must not be touched
    61                              <1> ;-------------------------------------------------------------------------------
    62                              <1> %macro return 0
    63                              <1>     ret
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> %macro cret 1
    67                              <1>     j%-1 %%a
    68                              <1>     return
    69                              <1> %%a:
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro retz 0
    73                              <1> cret z
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retnz 0
    77                              <1> cret nz
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro rete 0
    81                              <1> cret e
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retne 0
    85                              <1> cret ne
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro retc 0
    89                              <1> cret c
    90                              <1> %endmacro
    91                              <1> 
    92                              <1> %macro retnc 0
    93                              <1> cret nc
    94                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> ;Driver structures
    66                              <1> 
    67                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    68                              <1> 
    69                              <1>     .hdrlen resb 1  ;Length of the request header
    70                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    71                              <1>     .cmdcde resb 1  ;Command code
    72                              <1>     .status resw 1  ;Status word
    73                              <1>     .devptr resq 1  ;Device queue pointer field
    74                              <1> 
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> struc drvReqHdr
    78                              <1>     drvReqHdrM
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
    79                              <1> endstruc
    80                              <1> 
    81                              <1> struc initReqPkt  ;Init Request Packet
    82                              <1> 
    83                              <1>     drvReqHdrM   ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
    84 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    85 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    86 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    87 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    88                              <1> 
    89                              <1> endstruc
    90                              <1> 
    91                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    92                              <1> 
    93                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
    94 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    95 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    96 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    97                              <1> 
    98                              <1> endstruc
    99                              <1> 
   100                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   101                              <1> 
   102                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   103 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   104 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   105 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   106                              <1> 
   107                              <1> endstruc
   108                              <1> 
   109                              <1> struc ioReqPkt   ;IO Request Packet
   110                              <1> 
   111                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   112 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   113 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   114 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   115 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   116 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   121                              <1>     
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   123 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   124                              <1> 
   125                              <1> endstruc
   126                              <1> 
   127                              <1> struc statusReqPkt   ;Status Request Packet
   128                              <1> 
   129                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   130                              <1> 
   131                              <1> endstruc
   132                              <1> 
   133                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   134                              <1> 
   135                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   136                              <1>      
   137                              <1> endstruc
   138                              <1> 
   139                              <1> struc openReqPkt ;Open Device Request Packet
   140                              <1> 
   141                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   142                              <1>      
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc closeReqPkt ;Close Device Request Packet
   146                              <1> 
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   148                              <1>      
   149                              <1> endstruc
   150                              <1> 
   151                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   152                              <1> 
   153                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   154                              <1>      
   155                              <1> endstruc
   156                              <1> 
   157                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   158                              <1> 
   159                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   160 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   161 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   162 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   163 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   164 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   169                              <1>     
   170                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   171                              <1> 
   172                              <1> endstruc
   173                              <1> 
   174                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   175                              <1>     
   176                              <1>     drvReqHdrM    ;Common Driver Header Macro
    68                              <2> 
    69 00000000 ??                  <2>  .hdrlen resb 1
    70 00000001 ??                  <2>  .unitnm resb 1
    71 00000002 ??                  <2>  .cmdcde resb 1
    72 00000003 ????                <2>  .status resw 1
    73 00000005 ????????????????    <2>  .devptr resq 1
    74                              <2> 
   177                              <1> 
   178                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   138                              <1> 
   139                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   140                              <1> 
   141 00000000 ??????              <1>     .jmpBoot                resb 3 
   142 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   143 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   144 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   145 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   146 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   147 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   148 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   149 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   150 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   151 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   152 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   153 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   154 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   155 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   156 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   157 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   158 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   159 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   160                              <1> 
   161                              <1> endstruc
   162                              <1> 
   163                              <1> struc FSInfo
   164                              <1> 
   165 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   166 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   167 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   168 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   169 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   170 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   171 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   172                              <1> 
   173                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsPhysDrive    equ 4000h   ;CDS initialised 
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> ;Critical Error handling
   169                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> ;------------------------------------------------------------------------;
   198                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   199                              <1> ; to an internal buffer, and then copying it to the specified location
   200                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   201                              <1> ; another request for the same sector from the same device is made, so 
   202                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   203                              <1> ; size, selected according to the largest detected sector size during 
   204                              <1> ; the initial loadup.
   205                              <1> ;
   206                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   207                              <1> ;
   208                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   209                              <1> ;------------------------------------------------------------------------;
   210                              <1> 
   211                              <1> struc bufferHdr
   212 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   213 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> ;Note! A buffer is marked as referenced IF it has been accessed via 
   230                              <1> ; a Read or Write call. 
   231                              <1> ; When a buffer is used temporarily for internal purposes (as when DOS
   232                              <1> ; gives a driver a buffer) and then DOS reads data from that buffer (such as
   233                              <1> ; a BUILD BPB situation), the data is left as unreferenced as the use for that 
   234                              <1> ; buffer goes away before the end of the DOS call, and there is no danger of.
   235                              <1> ; of misbehaviour.
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc fcb
   283                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   284 00000000 ??                  <1>     .driveNum   resb 1
   285 00000001 ????????????????    <1>     .filename   resb 8
   286 00000009 ??????              <1>     .fileext    resb 3
   287 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   288                              <1> ;One block consists of 128 records, of size denoted in the below
   289 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   290 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   291 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   292 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   293 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   294 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   295 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   296 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   297 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   298                              <1>     ;If record size > 64, high byte is ignored.
   299                              <1>     ;Used for random read and write operations to find the right record
   300                              <1> endstruc
   301                              <1> 
   302                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   303 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   304 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   305 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   306 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   307 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   308 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   309 00000016 ????                <1>     .fileTime   resw 1  ;File time
   310 00000018 ????                <1>     .fileDate   resw 1  ;File date
   311 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   312 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc psp
   316 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   317 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   318 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   319 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   320 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   321 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   322 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   323 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   324 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   325 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   326 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   327 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   328 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   329                              <1> ;Extra handle arrays are grouped into a linked list
   330                              <1> ;The below are in the same place as in DOS
   331 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   332 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   333                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   334 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   335 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc clkStruc
   339 00000000 ????                <1>     .dateWord   resw 1
   340 00000002 ??                  <1>     .minutes    resb 1
   341 00000003 ??                  <1>     .hours      resb 1
   342 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   343 00000005 ??                  <1>     .seconds    resb 1
   344                              <1> endstruc
   345                              <1> 
   346                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   347                              <1> ;for a space of 64Gb
   348                              <1> dosAPTsize  equ 60*4096
   349                              <1> 
   350                              <1> ;Critical Error AH bitfield equates
   351                              <1> critRead    equ 0h
   352                              <1> critWrite   equ 1h
   353                              <1> critDOS     equ 0h
   354                              <1> critFAT     equ 2h
   355                              <1> critDir     equ 4h
   356                              <1> critData    equ 6h
   357                              <1> critFailOK  equ 8h
   358                              <1> critRetryOK equ 10h
   359                              <1> critIgnorOK equ 20h
   360                              <1> critCharDev equ 80h
   361                              <1> 
   362                              <1> critIgnore  equ 0
   363                              <1> critRetry   equ 1
   364                              <1> critAbort   equ 2
   365                              <1> critFail    equ 3
   366                              <1> 
   367                              <1> ;MISC ASCII control chars
   368                              <1> NUL equ 00h ;^@         | ASCII Null
   369                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text)
   370                              <1> BEL equ 07h ;^G         | ASCII Bell
   371                              <1> BSP equ 08h ;^H         | ASCII Backspace
   372                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   373                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   374                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   375                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   376                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   377                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   378                              <1> SPC equ 20h ;Printable  | ASCII Space
   379                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS true
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST true
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;Number 32-33 reserved
    48                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    49                              <1> errNoFCB    equ 35  ;FCB unavailable
    50                              <1> ;Numbers 36-82 reserved
    51                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    52                              <1> errFI44     equ 83  ;Fail on INT 44h
    53                              <1> ;Numbers 84-88 reserved
    54                              <1> ;-----------------------------------------------------------------------------
    55                              <1> ;Error Loci
    56                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    57                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    58                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    59                              <1> eLocChr     equ 4   ;Serial/Character Device error
    60                              <1> eLocMem     equ 5   ;Related to RAM
    61                              <1> ;-----------------------------------------------------------------------------
    62                              <1> ;Error Actions
    63                              <1> eActRet     equ 1   ;Retry
    64                              <1> eActDRet    equ 2   ;Delay then retry
    65                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    66                              <1> eActAbt     equ 4   ;Abort with cleanup
    67                              <1> eActKil     equ 5   ;Abort without cleanup
    68                              <1> eActIgn     equ 6   ;Ignore error
    69                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    70                              <1> ;-----------------------------------------------------------------------------
    71                              <1> ;Error classes
    72                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    73                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    74                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    75                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    76                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    77                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    78                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    79                              <1> eClsNotFnd  equ 8   ;Resource not found
    80                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    81                              <1> eClsLocked  equ 10  ;Resource Locked
    82                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    83                              <1> eClsClash   equ 12  ;Resource already exists!
    84                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %include "./Source/Sysinit/sysInit.asm"
    13                              <1> ; We arrive here with the following values in the registers.
    14                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    15                              <1> ; dx  = Int 33h boot device number
    16                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    17                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    18 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    19 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    19 0000000B 909090909090909090- <1>
    19 00000014 909090909090909090- <1>
    19 0000001D 909090909090909090- <1>
    19 00000026 909090909090909090- <1>
    19 0000002F 909090909090909090- <1>
    19 00000038 909090909090909090- <1>
    19 00000041 909090909090909090- <1>
    19 0000004A 909090909090909090- <1>
    19 00000053 909090909090909090- <1>
    19 0000005C 909090909090909090- <1>
    19 00000065 909090909090909090- <1>
    19 0000006E 909090909090909090- <1>
    19 00000077 909090909090909090- <1>
    19 00000080 909090909090909090- <1>
    19 00000089 909090909090909090- <1>
    19 00000092 909090909090909090- <1>
    19 0000009B 909090909090909090- <1>
    19 000000A4 909090909090909090- <1>
    19 000000AD 909090909090909090- <1>
    19 000000B6 909090909090909090- <1>
    19 000000BF 909090909090909090- <1>
    19 000000C8 909090909090909090- <1>
    19 000000D1 909090909090909090- <1>
    19 000000DA 909090909090909090- <1>
    19 000000E3 909090909090909090- <1>
    19 000000EC 909090909090909090- <1>
    19 000000F5 909090909090909090- <1>
    19 000000FE 9090                <1>
    20                              <1> ;First move the alignment of the DOSSEG to 4Kb
    21 00000100 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    22 00000101 52                  <1>     push rdx    ;Save dl on stack briefly
    23 00000102 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    24 00000107 0F32                <1>     rdmsr
    25 00000109 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    26 0000010B 48C1E720            <1>     shl rdi, 20h        ;Shift high
    27 0000010F 89C7                <1>     mov edi, eax        ;Get the low dword in
    28 00000111 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    29 00000114 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    30 0000011B 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    31 00000122 89F8                <1>     mov eax, edi
    32 00000124 4889FA              <1>     mov rdx, rdi
    33 00000127 48C1EA20            <1>     shr rdx, 20h
    34 0000012B 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    35 0000012D 5A                  <1>     pop rdx
    36                              <1> ;------------------------------------------------;
    37                              <1> ;              Connect Debugger                  ;
    38                              <1> ;------------------------------------------------;
    39                              <1> %if DEBUG
    40                              <1> ;Only connect if in debug mode
    41                              <1>     mov eax, 0C501h ;Connect debugger
    42                              <1>     int 35h
    43                              <1> %endif
    44                              <1> ;------------------------------------------------;
    45                              <1> ;           Sanitise the data area               ;
    46                              <1> ;------------------------------------------------;
    47                              <1> ; This call initialises ALL fields in the DOS    ;
    48                              <1> ; data area with 0's. Thus any fields, which     ;
    49                              <1> ; need to be initialised with a 0 value, are     ;
    50                              <1> ; initialised for free.                          ;
    51                              <1> ;------------------------------------------------;
    52 0000012E B9[2AD80300]        <1>     mov ecx, dSegLen
    53 00000133 30C0                <1>     xor al, al
    54 00000135 57                  <1>     push rdi    ;Temp save rdi on the stack
    55 00000136 F3AA                <1>     rep stosb
    56 00000138 5F                  <1>     pop rdi
    57                              <1> ;------------------------------------------------;
    58                              <1> ;          Start saving Basic DOS data           ;
    59                              <1> ;------------------------------------------------;
    60 00000139 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    61                              <1> ;Copy DOS to its final resting place
    62 00000141 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    62 00000146 [00C00300]          <1>
    63 0000014A 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    63 0000014F [08C00300]          <1>
    64 00000153 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    65 00000156 4881C7[2AD80300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    66 0000015D 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    67 00000164 B900100000          <1>     mov ecx, 1000h
    68 00000169 F348A5              <1>     rep movsq
    69                              <1> 
    70 0000016C CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    71 0000016E 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    72 00000172 664489C0            <1>     mov ax, r8w
    73 00000176 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    74 0000017E 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    75 00000186 64C60425[69C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    75 0000018E 05                  <1>
    76                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
    77 0000018F 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    77 00000194 [8FC00300]0500      <1>
    78 0000019A 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    78 0000019F [91C00300]1400      <1>
    79 000001A5 64C60425[6AC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    79 000001AD 01                  <1>
    80                              <1>     ;If no detected Int 33h devices, halt 
    81 000001AE 49C1E810            <1>     shr r8, 2*8
    82 000001B2 4584C0              <1>     test r8b, r8b
    83 000001B5 0F84320A0000        <1>     jz errorInit
    84                              <1> ;------------------------------------------------;
    85                              <1> ;          Add additional page tables            ;
    86                              <1> ;------------------------------------------------;
    87                              <1> ;This will allow for up to 64Gb of addressible space
    88 000001BB 4889EF              <1>     mov rdi, rbp
    89                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    90 000001BE B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    91 000001C3 57                  <1>     push rdi
    92 000001C4 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    92 000001CD 00                  <1>
    93                              <1> pdtLoop:
    94 000001CE 48AB                <1>     stosq
    95 000001D0 480500002000        <1>     add rax, 200000h
    96 000001D6 FFC9                <1>     dec ecx
    97 000001D8 75F4                <1>     jnz pdtLoop
    98 000001DA 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    99                              <1> ;Now we add every 4kb page to the page directory pointer table
   100                              <1> ;15 4kb pages to consider
   101 000001DB 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   102 000001DE 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   103 000001E1 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   104 000001E8 4883C720            <1>     add rdi, 4*8    ;Go to 4th entry
   105 000001EC B93C000000          <1>     mov ecx, 60
   106 000001F1 4883C803            <1>     or rax, 3h      ;present and r/w
   107                              <1> pdptLoop:
   108 000001F5 48AB                <1>     stosq
   109 000001F7 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   110 000001FD FFC9                <1>     dec ecx
   111 000001FF 75F4                <1>     jnz pdptLoop
   112 00000201 0F20DF              <1>     mov rdi, cr3
   113 00000204 0F22DF              <1>     mov cr3, rdi
   114                              <1> 
   115                              <1> ;------------------------------------------------;
   116                              <1> ;                   MCB inits                    ;
   117                              <1> ;------------------------------------------------;
   118                              <1> mcbInit:
   119 00000207 B820E80000          <1>     mov eax, 0E820h
   120 0000020C CD35                <1>     int 35h
   121                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   122 0000020E E8FC000000          <1>     call .mcbFindAddress
   123 00000213 7349                <1>     jnc .mcbi1  ;If found, proceed
   124                              <1>     ;Here, we try use E801h
   125 00000215 B801E80000          <1>     mov eax, 0E801h
   126 0000021A CD35                <1>     int 35h
   127 0000021C 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   128 0000021F 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   129 00000222 85C0                <1>     test eax, eax
   130 00000224 741B                <1>     jz .worst
   131 00000226 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   132 00000229 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   133 0000022C 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   134 00000234 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   135 0000023C E9FE000000          <1>     jmp mcbBuild
   136                              <1> .worst:
   137                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   138 00000241 B800002000          <1>     mov eax, 200000h
   139 00000246 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   139 0000024B [08C00300]          <1>
   140 0000024F 29D8                <1>     sub eax, ebx
   141 00000251 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   142 00000259 E9E1000000          <1>     jmp mcbBuild 
   143                              <1> .mcbi1:
   144 0000025E 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   145 00000261 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   145 0000026A 00                  <1>
   146 0000026B 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   147 0000026F 0F85B7000000        <1>     jne .mcbFail
   148 00000275 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   149                              <1>     ;PCI hole always exists so this value will always be a dword
   150 00000279 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   151 00000281 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   152 00000284 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   153 00000287 4881FB00000001      <1>     cmp rbx, 1000000h  
   154 0000028E 7737                <1>     ja .skipISA
   155                              <1> ;Here we deal with ISA hole issues
   156 00000290 B820E80000          <1>     mov eax, 0E820h
   157 00000295 CD35                <1>     int 35h
   158 00000297 B800000001          <1>     mov rax, 1000000h
   159 0000029C E86E000000          <1>     call .mcbFindAddress
   160 000002A1 0F8298000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   161 000002A7 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   161 000002B0 00                  <1>
   162 000002B1 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   163 000002B5 0F8584000000        <1>     jne mcbBuild  
   164 000002BB 488B5808            <1>     mov rbx, qword [rax + 8]
   165 000002BF 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   166                              <1> .skipISA:
   167 000002C7 B820E80000          <1>     mov eax, 0E820h
   168 000002CC CD35                <1>     int 35h
   169 000002CE 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   169 000002D7 00                  <1>
   170 000002D8 E832000000          <1>     call .mcbFindAddress
   171 000002DD 7260                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   172 000002DF 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   172 000002E8 00                  <1>
   173 000002E9 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   174 000002ED 7550                <1>     jne mcbBuild   
   175 000002EF 488B5808            <1>     mov rbx, qword [rax + 8]
   176                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   177 000002F3 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   177 000002FC 00                  <1>
   178 000002FD 4839CB              <1>     cmp rbx, rcx
   179 00000300 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   180 00000304 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   180 00000309 [1BC00300]          <1>
   181 0000030D EB30                <1>     jmp mcbBuild
   182                              <1> .mcbFindAddress:
   183                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   184                              <1> ;Entry: rax = Address of arena to search for
   185                              <1> ;       rsi = Pointer to memory map
   186                              <1> ;       ecx = Number of 24 byte entries
   187                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   188                              <1> ;       CF=CY : value in rax not found
   189 0000030F 56                  <1>     push rsi
   190 00000310 51                  <1>     push rcx
   191 00000311 50                  <1>     push rax
   192                              <1> .mfa0:
   193 00000312 483B06              <1>     cmp rax, qword [rsi]
   194 00000315 740D                <1>     je .mcbAddressFound
   195 00000317 4883C618            <1>     add rsi, 24 ;Goto next entry
   196 0000031B FFC9                <1>     dec ecx
   197 0000031D 79F3                <1>     jns .mfa0
   198                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   199 0000031F 58                  <1>     pop rax
   200 00000320 59                  <1>     pop rcx
   201 00000321 5E                  <1>     pop rsi
   202 00000322 F9                  <1>     stc
   203 00000323 C3                  <1>     ret
   204                              <1> .mcbAddressFound:
   205 00000324 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   206 00000327 59                  <1>     pop rcx ;Pop old rax value off
   207 00000328 59                  <1>     pop rcx
   208 00000329 5E                  <1>     pop rsi
   209 0000032A F8                  <1>     clc
   210 0000032B C3                  <1>     ret
   211                              <1> .mcbFail:
   212 0000032C 488D2DE1080000      <1>     lea rbp, mcbFailmsg
   213 00000333 B804130000          <1>     mov eax, 1304h
   214 00000338 CD30                <1>     int 30h
   215 0000033A E9AE080000          <1>     jmp errorInit
   216                              <1> 
   217                              <1> mcbBuild:
   218                              <1> ;Actually build the MCB chain here
   219                              <1> ;Start by computing the difference between userbase and DOS area
   220                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   221 0000033F 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   221 00000344 [08C00300]          <1>
   222 00000348 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   223 0000034F 56                  <1>     push rsi    ;Save ptr
   224 00000350 4883C610            <1>     add rsi, mcb.program    ;Point to free space
   225 00000354 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   226 00000357 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   227 0000035F 5B                  <1>     pop rbx
   228 00000360 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   229 00000363 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   230 0000036B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   231 00000373 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   232 00000376 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   233 00000379 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   233 0000037E [24C00300]          <1>
   234                              <1> 
   235                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   236 00000382 64833C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   236 0000038A 00                  <1>
   237 0000038B 745B                <1>     jz .skipISA
   238                              <1>     ;Here if an ISA hole exists, place a MCB around it
   239 0000038D 836B0901            <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   240                              <1>     ;Remove one MCB worth of space from alloc
   241 00000391 31C9                <1>     xor ecx, ecx
   242 00000393 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   243 00000396 83C101              <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   244 00000399 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   245 0000039C C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   246 0000039F 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   247 000003A2 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   248 000003A5 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   249 000003AD B900000001          <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   250 000003B2 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   251 000003B5 4883C010            <1>     add rax, mcb_size
   252 000003B9 4829C1              <1>     sub rcx, rax    ;Take their difference
   253 000003BC C1E904              <1>     shr ecx, 4
   254 000003BF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   255 000003C2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   256 000003C5 4883C310            <1>     add rbx, mcb_size
   257 000003C9 4801CB              <1>     add rbx, rcx
   258                              <1>     ;RBX should now be at 16Mb
   259 000003CC C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   260 000003CF 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   261 000003D7 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   262 000003DF C1E904              <1>     shr ecx, 4  ;Get paragraphs
   263 000003E2 83E901              <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   264 000003E5 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   265                              <1> .skipISA:
   266                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   267                              <1>     ;rbx points to a block with "Z" marker
   268 000003E8 64833C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   268 000003F0 00                  <1>
   269 000003F1 7462                <1>     jz .exit
   270                              <1>     ;Add PCI hole MCB
   271 000003F3 836B0901            <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   272                              <1>     ;Remove one MCB worth of space from alloc
   273 000003F7 31C9                <1>     xor ecx, ecx
   274 000003F9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   275 000003FC 83C101              <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   276 000003FF C1E104              <1>     shl ecx, 4  ;Get bytes
   277 00000402 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   278 00000405 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   279 00000408 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   280 0000040B 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   281 00000413 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   281 0000041C 00                  <1>
   282 0000041D 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   283 00000420 4883C010            <1>     add rax, mcb_size
   284 00000424 4829C1              <1>     sub rcx, rax    ;Take their difference
   285 00000427 C1E904              <1>     shr ecx, 4
   286 0000042A 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   287 0000042D C1E104              <1>     shl ecx, 4  ;Get bytes again
   288 00000430 4883C310            <1>     add rbx, mcb_size
   289 00000434 4801CB              <1>     add rbx, rcx
   290                              <1>     ;RBX should now be at 4Gb
   291 00000437 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   292 0000043A 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   293 00000442 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   293 00000447 [1BC00300]          <1>
   294 0000044B 48C1E904            <1>     shr rcx, 4
   295 0000044F 83E901              <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   296 00000452 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   297                              <1> .exit:
   298                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   299 00000455 83430901            <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   300                              <1> ;------------------------------------------------;
   301                              <1> ;          Kernel inits and adjustments          ;
   302                              <1> ;------------------------------------------------;
   303                              <1> ;Adjust Interrupt Entries Int 40h-49h
   304                              <1> adjInts:
   305 00000459 B340                <1>     mov bl, 40h
   306 0000045B B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   307 00000460 CD35                <1>     int 35h
   308 00000462 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   309 00000467 488D3D1B080000      <1>     lea rdi, intData
   310 0000046E 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   311                              <1> .ai0:
   312 00000470 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   313 00000475 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   314 00000478 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   315                              <1> .ai1:
   316 0000047B CD35                <1>     int 35h
   317 0000047D 4883C708            <1>     add rdi, 8
   318 00000481 FFC1                <1>     inc ecx
   319 00000483 83F950              <1>     cmp ecx, 50h
   320 00000486 75E8                <1>     jne .ai0
   321                              <1> 
   322                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   323                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   324                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   325                              <1>     %if DEBUG
   326                              <1> debugPopUpMsg:
   327                              <1>     push rbx
   328                              <1>     push rbp
   329                              <1>     push rcx
   330                              <1>     push rdx
   331                              <1>     mov ecx, 53 ;A large number of lines
   332                              <1>     xor edx, edx    ;COM 1
   333                              <1> .cls:
   334                              <1>     mov eax, 010Ah ;Transmit Line feed
   335                              <1>     int 34h
   336                              <1>     dec ecx
   337                              <1>     jnz .cls
   338                              <1>     lea rbx, qword [debPrintNullString + rbp]
   339                              <1>     lea rbp, .msg
   340                              <1>     call rbx
   341                              <1>     jmp short .exit
   342                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   343                              <1> .exit:
   344                              <1>     pop rdx
   345                              <1>     pop rcx
   346                              <1>     pop rbp
   347                              <1>     pop rbx
   348                              <1>     %endif
   349                              <1> 
   350                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   351 00000488 488D155E070000      <1>     lea rdx, errorInit ;Get segment start address
   352 0000048F B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   353 00000494 CD41                <1>     int 41h
   354 00000496 488D1550070000      <1>     lea rdx, errorInit ;Get segment start address
   355 0000049D B844250000          <1>     mov eax, 2544h
   356 000004A2 CD41                <1>     int 41h
   357                              <1> ;------------------------------------------------;
   358                              <1> ;          Driver Adjustments and inits          ;
   359                              <1> ;------------------------------------------------;
   360                              <1> ;Modify the pointers in nData before putting them in the data area
   361 000004A4 48012D5E080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   362 000004AB 48012D61080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   363 000004B2 48012D62080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   364                              <1> ;Copy the Null driver to its location in Sysvars
   365 000004B9 B922000000          <1>     mov ecx, drvHdr_size
   366 000004BE 488D3544080000      <1>     lea rsi, qword [nData]
   367 000004C5 488DBD[6CC00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   368 000004CC F3A4                <1>     rep movsb   
   369                              <1> 
   370                              <1> ;Adjust the addresses in the other driver headers 
   371 000004CE 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   371 000004D0 [0D23000000000000]  <1>
   372 000004D8 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   373 000004DD 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   374                              <1> adjDrivers:
   375 000004E1 E8F7060000          <1>     call adjustDrvHdr
   376 000004E6 E2F9                <1>     loop adjDrivers
   377                              <1> 
   378                              <1> ;Open NUL
   379                              <1> ;NUL opened
   380                              <1> ;Open CON
   381                              <1> conInit:    ;Rather than keeping this resident... do it here
   382                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   383 000004E8 488D95[EE250000]    <1>     lea rdx, qword [rbp + fastOutput]
   384 000004EF B849250000          <1>     mov eax, 2549h
   385 000004F4 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   386 000004F6 488D95[F6250000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   387 000004FD B83B250000          <1>     mov eax, 253Bh
   388 00000502 CD41                <1>     int 41h ;Hook int 3Bh
   389                              <1> .ci0:
   390 00000504 B401                <1>     mov ah, 01      ;Get buffer status
   391 00000506 CD36                <1>     int 36h
   392 00000508 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   393 0000050A 30E4                <1>     xor ah, ah
   394 0000050C CD36                <1>     int 36h ;Read key to flush from buffer
   395 0000050E EBF4                <1>     jmp short .ci0
   396                              <1> .ci1:
   397 00000510 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   398 00000515 CD30                <1>     int 30h
   399 00000517 B402                <1>     mov ah, 02h
   400 00000519 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   401 0000051B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   402 0000051D CD30                <1>     int 30h
   403 0000051F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   404 00000521 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   405 00000526 CD30                <1>     int 30h
   406                              <1> 
   407                              <1>     ;Save ptr to ConHdr in Sysvars
   408 00000528 488D85[0D230000]    <1>     lea rax, qword [rbp + conHdr]
   409 0000052F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   409 00000534 [44C00300]          <1>
   410                              <1> 
   411                              <1>     ;Save ptr to ClkHdr in Sysvars
   412 00000538 488D85[73230000]    <1>     lea rax, qword [rbp + clkHdr]
   413 0000053F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   413 00000544 [3CC00300]          <1>
   414                              <1> 
   415                              <1> ;------------------------------------------------;
   416                              <1> ;         Link DOS to temporary Buffer           ;
   417                              <1> ;------------------------------------------------;
   418                              <1> tempBufferInit:
   419 00000548 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   420 0000054F 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   420 00000554 [4EC00300]          <1>
   421 00000558 31C0                <1>     xor eax, eax
   422 0000055A 48FFC8              <1>     dec rax
   423 0000055D 48AB                <1>     stosq   ;.nextBufPtr, end of list
   424 0000055F AA                  <1>     stosb   ;.driveNumber, Free entry
   425 00000560 48FFC0              <1>     inc rax
   426 00000563 AA                  <1>     stosb   ;.bufferFlags, No flags
   427                              <1> ;------------------------------------------------;
   428                              <1> ;         Init msd driver, create DPB            ;
   429                              <1> ;------------------------------------------------;
   430                              <1> storageInits:
   431                              <1> ;First save dpb pointer in sysvars
   432 00000564 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   433 0000056B 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   433 00000570 [2CC00300]          <1>
   434                              <1> ;Open Mass Storage
   435                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   436                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   437                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   438                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   439                              <1>     ;mov al, byte fs:[numPhysVol]
   440                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   441                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   442                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   443                              <1>     ;Check if it returned OK first!
   444                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   445                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   446                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   447                              <1>     ;mov byte fs:[numPhysVol], al
   448                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   449                              <1> 
   450                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   451 00000574 E8B2070000          <1>     call diskInit
   452 00000579 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   453 0000057C 648A0425[68C00300]  <1>     mov al, byte fs:[numPhysVol]
   454 00000584 488D95[9C2C0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   455 0000058B 30C9                <1>     xor cl, cl  ;Clear counter
   456 0000058D 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   456 00000592 [2CC00300]          <1>
   457                              <1> .si0:   
   458 00000596 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   459 00000599 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   460 0000059B CD41                <1>     int 41h
   461                              <1> ;Add other data to DPB
   462 0000059D 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   463 000005A0 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   464 000005A3 50                  <1>     push rax
   465 000005A4 488D87[95230000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   466 000005AB 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   467 000005AF 58                  <1>     pop rax
   468 000005B0 FEC1                <1>     inc cl
   469 000005B2 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   470 000005B4 7413                <1>     je .si1
   471 000005B6 50                  <1>     push rax
   472 000005B7 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   473 000005BB 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   474 000005BF 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   475 000005C2 58                  <1>     pop rax
   476 000005C3 4883C208            <1>     add rdx, 8  ;Goto next pointer in table
   477 000005C7 EBCD                <1>     jmp short .si0
   478                              <1> .si1:
   479                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   480 000005C9 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   481 000005D1 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   482                              <1> ;------------------------------------------------;
   483                              <1> ;          Find largest sector size              ;
   484                              <1> ;------------------------------------------------;
   485                              <1> sectorSizeSearch:
   486                              <1> ;Done by reading BPB's for each drive
   487 000005D4 488D9D[9C2C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   488                              <1>     
   489                              <1>     ;Go thru each block individually
   490 000005DB 31C0                <1>     xor eax, eax
   491 000005DD 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   492                              <1> .findLargest:
   493 000005E0 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   494 000005E4 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   495 000005E9 4883C308            <1>     add rbx, 8 ;Goto next entry
   496 000005ED 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   497 000005F0 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   498 000005F3 75EB                <1>     jnz .findLargest    ;Nope, keep checking!
   499 000005F5 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   499 000005FA [4CC00300]          <1>
   500                              <1>     
   501                              <1> ;------------------------------------------------;
   502                              <1> ;                 Temp CDS inits                 ;
   503                              <1> ;------------------------------------------------;
   504                              <1> tempCDS:
   505                              <1> ;Build a temporary CDS for Drive A to use it for booting
   506 000005FE 488DBD[68C50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   507 00000605 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   507 0000060A [56C00300]          <1>
   508                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   509 0000060E C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   510 00000614 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   511 0000061A 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   511 0000061F [2CC00300]          <1>
   512 00000623 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   513 00000627 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   514                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   515                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   516                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   517                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   518                              <1> ;------------------------------------------------;
   519                              <1> ;     Set up general PSP areas and DOS vars      ;
   520                              <1> ;------------------------------------------------;
   521                              <1> ;Additional DOS Vars init
   522                              <1>     ;xor eax, eax
   523                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   524                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   525                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   526                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   527                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   528                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   529 0000062D 64C60425[65C30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   529 00000635 FF                  <1>
   530                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   531                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   532 00000636 64C60425[2DC30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   532 0000063E 2F                  <1>
   533                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   534                              <1> 
   535                              <1> ;Set network machine name to... nothing!
   536 0000063F 488DBD[32C30300]    <1>     lea rdi, qword [rbp + machineName]
   537 00000646 B910000000          <1>     mov ecx, 10h    ;16 chars long
   538 0000064B B020                <1>     mov al, SPC ;Space char
   539 0000064D F3AA                <1>     rep stosb   ;Fill with space chars
   540                              <1>     ;xor al, al
   541                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   542                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   543                              <1> 
   544                              <1> ;Patch Data Table init
   545 0000064F 488DBD[42C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   546 00000656 488D85[F51C0000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   547 0000065D 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   548 0000065F 488D85[FF1C0000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   549 00000666 48AB                <1>     stosq
   550 00000668 488D85[091D0000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   551 0000066F 48AB                <1>     stosq
   552 00000671 488D85[131D0000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   553 00000678 48AB                <1>     stosq
   554                              <1> 
   555                              <1> ;Initial PSP Init
   556 0000067A 488D1D7FF9FFFF      <1>     lea rbx, qword [tempPSP]
   557 00000681 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   557 00000686 [7BC30300]          <1>
   558 0000068A 53                  <1>     push rbx
   559 0000068B 4881C380000000      <1>     add rbx, psp.dta
   560 00000692 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   560 00000697 [73C30300]          <1>
   561 0000069B 5B                  <1>     pop rbx
   562 0000069C 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   563 000006A1 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   564 000006A8 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   565 000006AC 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   566 000006B0 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   567 000006B4 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   568 000006B8 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   568 000006C1 FF                  <1>
   569 000006C2 48AB                <1>     stosq   ;8 bytes
   570 000006C4 31C0                <1>     xor eax, eax
   571 000006C6 50                  <1>     push rax    ;Save 0 on the stack
   572 000006C7 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   573 000006CA 48AB                <1>     stosq   ;16 bytes
   574 000006CC AB                  <1>     stosd   ;20 bytes
   575 000006CD 58                  <1>     pop rax ;Get 0 back
   576 000006CE 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   577 000006D6 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   578 000006DA C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   579 000006DE 4889DA              <1>     mov rdx, rbx
   580 000006E1 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   581 000006E6 CD41                <1>     int 41h
   582 000006E8 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   583 000006EC B843350000          <1>     mov eax, 3543h
   584 000006F1 CD41                <1>     int 41h
   585 000006F3 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   586 000006F7 B844350000          <1>     mov eax, 3544h
   587 000006FC CD41                <1>     int 41h
   588 000006FE 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   589                              <1> 
   590 00000702 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   591 00000707 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   592 0000070B F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   593                              <1> ;------------------------------------------------;
   594                              <1> ;          Default File Handle Creation          ;
   595                              <1> ;                                                ;
   596                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   597                              <1> ;------------------------------------------------;
   598                              <1> defaultFileHandles:
   599                              <1> ;Fill in the default file table entries
   600 0000070D 488D9D[93C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   601 00000714 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   602 0000071B 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   603 00000721 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   603 00000726 [34C00300]          <1>
   604 0000072A 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   604 00000733 20                  <1>
   605                              <1> ;GOTO FIRST FILE 
   606 00000734 4883C30A            <1>     add rbx, sfth_size  ;Goto first driver
   607                              <1> ;Write AUX
   608 00000738 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   609 0000073D 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   610 00000743 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   611 00000747 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   612                              <1>     ;No EOF when reading from the device
   613 0000074B 488B85[2F230000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   614 00000752 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   615                              <1>     ;Ignore disk related fields and Date/Time of open
   616 00000756 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   617                              <1>     ;11 chars in 8.3 name
   618 0000075A 488D3502050000      <1>     lea rsi, auxName
   619 00000761 B903000000          <1>     mov ecx, 3
   620 00000766 F3A4                <1>     rep movsb   ;Move the three bytes
   621 00000768 4889D0              <1>     mov rax, rdx
   622 0000076B 48AB                <1>     stosq   ;Eight spaces left to print
   623 0000076D 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   623 00000772 [7BC30300]          <1>
   624 00000776 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   625                              <1> ;GOTO NEXT ENTRY
   626 0000077A 4883C34F            <1>     add rbx, sft_size   ;Goto next SFT
   627                              <1>     ;Write CON
   628 0000077E 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   629 00000783 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   630 00000789 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   631 0000078D C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   632                              <1>     ;No EOF when reading from the device
   633 00000791 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   633 00000796 [44C00300]          <1>
   634 0000079A 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   635                              <1>     ;Ignore disk related fields and Date/Time of open
   636 0000079E 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   637                              <1>     ;11 chars in 8.3 name
   638 000007A2 488D35B6040000      <1>     lea rsi, conName
   639 000007A9 B903000000          <1>     mov ecx, 3
   640 000007AE F3A4                <1>     rep movsb   ;Move the three bytes
   641 000007B0 4889D0              <1>     mov rax, rdx
   642 000007B3 48AB                <1>     stosq   ;Eight spaces left to print
   643 000007B5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   643 000007BA [7BC30300]          <1>
   644 000007BE 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   645                              <1> ;GOTO NEXT ENTRY
   646 000007C2 4883C34F            <1>     add rbx, sft_size   ;Goto next SFT
   647                              <1> ;Write PRN
   648 000007C6 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   649 000007CB 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   650 000007D1 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   651 000007D5 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   652                              <1>     ;Want EOF when reading from to the device
   653 000007D9 488B85[51230000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   654 000007E0 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   655                              <1>     ;Ignore disk related fields and Date/Time of open
   656 000007E4 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   657                              <1>     ;11 chars in 8.3 name
   658 000007E8 488D3578040000      <1>     lea rsi, prnName
   659 000007EF B903000000          <1>     mov ecx, 3
   660 000007F4 F3A4                <1>     rep movsb   ;Move the three bytes
   661 000007F6 4889D0              <1>     mov rax, rdx
   662 000007F9 48AB                <1>     stosq   ;Eight spaces left to print
   663 000007FB 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   663 00000800 [7BC30300]          <1>
   664 00000804 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   665                              <1> ;Zero word 0 of entry 4 and 5
   666 00000808 4883C34F            <1>     add rbx, sft_size   ;Goto SFT 4
   667 0000080C 31C0                <1>     xor eax, eax
   668                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   669                              <1>     ; which is ok as these are empty entries, ready to be used)
   670 0000080E 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   671 00000810 4883C34F            <1>     add rbx, sft_size   ;Goto SFT 5
   672 00000814 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   673                              <1> ;------------------------------------------------;
   674                              <1> ;               Load CONFIG.SYS                  ;
   675                              <1> ;------------------------------------------------;
   676                              <1> ;------------------------------------------------;
   677                              <1> ;              Process CONFIG.SYS                ;
   678                              <1> ;------------------------------------------------;
   679                              <1> ;------------------------------------------------;
   680                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   681                              <1> ;------------------------------------------------;
   682                              <1> ;------------------------------------------------;
   683                              <1> ;   Setup Final Data Areas With Overrides from   ;
   684                              <1> ;                  CONFIG.SYS                    ;
   685                              <1> ;------------------------------------------------;
   686                              <1> ;------------------------------------------------;
   687                              <1> ;           Load Command interpreter             ;
   688                              <1> ;------------------------------------------------;
   689 00000816 488D15E1030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   690 0000081D B409                <1>     mov ah, 09h
   691 0000081F CD41                <1>     int 41h
   692                              <1> ;Resize DOS allocation before loading COMMAND.COM
   693 00000821 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   693 00000826 [24C00300]          <1>
   694 0000082A 4983C010            <1>     add r8, mcb.program
   695 0000082E BB39110000          <1>     mov ebx, dynamicDataAreaLength
   696 00000833 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   697 00000836 FFC3                <1>     inc ebx
   698 00000838 B44A                <1>     mov ah, 4Ah
   699 0000083A CD41                <1>     int 41h
   700                              <1>     
   701                              <1>     %if DEBUG && ALLOCTEST
   702                              <1> ;Test Allocation, Growth and Deallocation
   703                              <1>     mov r15, qword fs:[currentPSP]
   704                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   705                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   706                              <1>     mov ah, 48h ;Allocate
   707                              <1>     int 41h
   708                              <1> 
   709                              <1>     mov r8, rax ;Move the pointer to r8
   710                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   711                              <1>     mov ah, 4Ah
   712                              <1>     int 41h
   713                              <1> 
   714                              <1>     mov ah, 49h ;Free r8
   715                              <1>     int 41h
   716                              <1>     mov qword fs:[currentPSP], r15
   717                              <1>     %endif
   718                              <1> 
   719                              <1>     %if ENDSTATUS
   720                              <1> debugFinal:
   721                              <1>     ;Print system state
   722 0000083C 55                  <1>     push rbp    ;Only rbp really matters here
   723 0000083D 4989E8              <1>     mov r8, rbp
   724                              <1> 
   725 00000840 488D2DA9020000      <1>     lea rbp, .msg2
   726 00000847 4D8D88[C2010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   727 0000084E 41FFD1              <1>     call r9
   728                              <1> 
   729 00000851 488D1D21010000      <1>     lea rbx, qword [.msg + 15]
   730 00000858 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   730 0000085D [08C00300]          <1>
   731                              <1> 
   732 00000861 4D8D88[D7040000]    <1>     lea r9, qword [r8 + overlayQword]
   733 00000868 41FFD1              <1>     call r9
   734                              <1> 
   735 0000086B 4883C31B            <1>     add rbx, 19+8
   736 0000086F 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   736 00000874 [00C00300]          <1>
   737 00000878 41FFD1              <1>     call r9
   738                              <1> 
   739 0000087B 4883C31B            <1>     add rbx, 19+8
   740 0000087F 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   740 00000884 [24C00300]          <1>
   741 00000888 41FFD1              <1>     call r9
   742                              <1> 
   743 0000088B 4883C31C            <1>     add rbx, 20+8
   744 0000088F 4D8D88[97040000]    <1>     lea r9, qword [r8 + overlayDword]
   745 00000896 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   746 0000089E 41FFD1              <1>     call r9
   747                              <1> 
   748 000008A1 4883C312            <1>     add rbx, 10+8
   749 000008A5 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   750 000008AD 41FFD1              <1>     call r9
   751                              <1> 
   752 000008B0 4883C312            <1>     add rbx, 10+8
   753 000008B4 64488B0425-         <1>     mov rax, qword fs:[longMem]
   753 000008B9 [1BC00300]          <1>
   754 000008BD 4D8D88[D7040000]    <1>     lea r9, qword [r8 + overlayQword]
   755 000008C4 41FFD1              <1>     call r9
   756                              <1> 
   757 000008C7 4883C31B            <1>     add rbx, 19+8
   758 000008CB 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   758 000008D0 [2CC00300]          <1>
   759 000008D4 41FFD1              <1>     call r9
   760                              <1> 
   761 000008D7 4883C31B            <1>     add rbx, 19+8
   762 000008DB 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   762 000008E0 [34C00300]          <1>
   763 000008E4 41FFD1              <1>     call r9
   764                              <1> 
   765 000008E7 4883C31B            <1>     add rbx, 19+8
   766 000008EB 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   766 000008F0 [4EC00300]          <1>
   767 000008F4 41FFD1              <1>     call r9
   768                              <1> 
   769 000008F7 4883C31B            <1>     add rbx, 19+8
   770 000008FB 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   770 00000900 [56C00300]          <1>
   771 00000904 41FFD1              <1>     call r9
   772                              <1> 
   773 00000907 4D8D88[28040000]    <1>     lea r9, qword [r8 + overlayByte]
   774                              <1> 
   775 0000090E 4883C32C            <1>     add rbx, 25+19
   776 00000912 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   776 00000918 [68C00300]          <1>
   777 0000091C 41FFD1              <1>     call r9
   778                              <1> 
   779 0000091F 4883C31E            <1>     add rbx, 30
   780 00000923 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   780 00000929 [12C00300]          <1>
   781 0000092D 41FFD1              <1>     call r9
   782                              <1> 
   783 00000930 4883C31E            <1>     add rbx, 30
   784 00000934 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   784 0000093A [11C00300]          <1>
   785 0000093E 41FFD1              <1>     call r9
   786                              <1> 
   787 00000941 4883C310            <1>     add rbx, 16
   788 00000945 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   788 0000094B [10C00300]          <1>
   789 0000094F 0441                <1>     add al, "A"
   790 00000951 8803                <1>     mov byte [rbx], al
   791                              <1> 
   792 00000953 488D2D10000000      <1>     lea rbp, .msg
   793 0000095A 4D8D88[C2010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   794 00000961 41FFD1              <1>     call r9
   795 00000964 5D                  <1>     pop rbp
   796 00000965 E99E010000          <1>     jmp l1
   797 0000096A 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   797 00000973 206261736520464646- <1>
   797 0000097C 464646464646464646- <1>
   797 00000985 46464646680A0D      <1>
   798 0000098C 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   798 00000995 464646464646464646- <1>
   798 0000099E 464646464646680A0D  <1>
   799 000009A7 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   799 000009B0 464646464646464646- <1>
   799 000009B9 46464646464668200A- <1>
   799 000009C2 0D                  <1>
   800 000009C3 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   800 000009CC 464646464646466820  <1>
   801 000009D5 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   801 000009DE 464646464646466820  <1>
   802 000009E7 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   802 000009F0 464646464646464646- <1>
   802 000009F9 464646464646680A0D  <1>
   803 00000A02 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   803 00000A0B 464646464646464646- <1>
   803 00000A14 464646464646680A0D  <1>
   804 00000A1D 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   804 00000A26 464646464646464646- <1>
   804 00000A2F 464646464646680A0D  <1>
   805 00000A38 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   805 00000A41 464646464646464646- <1>
   805 00000A4A 464646464646680A0D  <1>
   806 00000A53 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   806 00000A5C 464646464646464646- <1>
   806 00000A65 464646464646680A0D  <1>
   807 00000A6E 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   807 00000A77 204C6F676963616C20- <1>
   807 00000A80 447269766573204646- <1>
   807 00000A89 680A0D              <1>
   808 00000A8C 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   808 00000A95 204669786564204472- <1>
   808 00000A9E 697665732020204646- <1>
   808 00000AA7 680A0D              <1>
   809 00000AAA 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   809 00000AB3 2052656D6F7661626C- <1>
   809 00000ABC 652044727673204646- <1>
   809 00000AC5 680A0D              <1>
   810 00000AC8 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   810 00000AD1 65205A3A0A0D        <1>
   811 00000AD7 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   811 00000AE0 4F4D4D414E442E434F- <1>
   811 00000AE9 4D2E2E2E0A0D00      <1>
   812 00000AF0 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   812 00000AF9 626F6F742073756D6D- <1>
   812 00000B02 6172790A0D00        <1>
   813                              <1>     %endif
   814                              <1> l1:
   815 00000B08 B401                <1>     mov ah, 01h  ;Write with echo
   816 00000B0A CD41                <1>     int 41h
   817 00000B0C 3C00                <1>     cmp al, 0
   818 00000B0E 7402                <1>     je l2
   819 00000B10 EBF6                <1>     jmp short l1
   820                              <1> l2:
   821 00000B12 B407                <1>     mov ah, 07h
   822 00000B14 CD41                <1>     int 41h
   823 00000B16 3C42                <1>     cmp al, 42h
   824 00000B18 75EE                <1>     jne l1
   825                              <1> l3:
   826 00000B1A 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   826 00000B1F [42C50300]0000      <1>
   827 00000B25 488D9D[EEC30300]    <1>     lea rbx, qword [rbp + secdReqHdr] ;Get the address of this request block
   828 00000B2C 488D85[42C50300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   829 00000B33 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   830 00000B36 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   831 00000B3A 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   832 00000B40 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   833 00000B44 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   834 00000B4B FF95[7D230000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   835 00000B51 FF95[85230000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   836                              <1> 
   837 00000B57 B403                <1>     mov ah, 03h
   838 00000B59 30FF                <1>     xor bh, bh
   839 00000B5B CD30                <1>     int 30h
   840 00000B5D 30D2                <1>     xor dl, dl  ;0 column
   841 00000B5F B402                <1>     mov ah, 02h
   842 00000B61 CD30                <1>     int 30h
   843                              <1> 
   844 00000B63 488D9D[42C50300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   845 00000B6A 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   846 00000B6E E832000000          <1>     call .clkHexToBCD
   847 00000B73 B40E                <1>     mov ah, 0Eh
   848 00000B75 B03A                <1>     mov al, ":"
   849 00000B77 CD30                <1>     int 30h
   850 00000B79 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   851 00000B7D E823000000          <1>     call .clkHexToBCD
   852 00000B82 B40E                <1>     mov ah, 0Eh
   853 00000B84 B03A                <1>     mov al, ":"
   854 00000B86 CD30                <1>     int 30h
   855 00000B88 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   856 00000B8C E814000000          <1>     call .clkHexToBCD
   857 00000B91 B40E                <1>     mov ah, 0Eh
   858 00000B93 B02E                <1>     mov al, "."
   859 00000B95 CD30                <1>     int 30h
   860 00000B97 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   861 00000B9B E805000000          <1>     call .clkHexToBCD
   862 00000BA0 E963FFFFFF          <1>     jmp l1
   863                              <1> .clkHexToBCD:
   864                              <1> ;Converts a Hex byte into two BCD digits
   865                              <1> ;Takes input in each nybble of al
   866 00000BA5 53                  <1>     push rbx
   867 00000BA6 BB0A000000          <1>     mov rbx, 0Ah  ;Divide by 10
   868 00000BAB 31D2                <1>     xor edx, edx
   869 00000BAD 48F7F3              <1>     div rbx
   870 00000BB0 80C230              <1>     add dl, '0'
   871 00000BB3 80FA39              <1>     cmp dl, '9'
   872 00000BB6 7603                <1>     jbe .chtb0
   873 00000BB8 80C207              <1>     add dl, 'A'-'0'-10
   874                              <1> .chtb0:
   875 00000BBB 88D1                <1>     mov cl, dl    ;Save remainder byte
   876 00000BBD 31D2                <1>     xor edx, edx
   877 00000BBF 48F7F3              <1>     div rbx
   878 00000BC2 80C230              <1>     add dl, '0'
   879 00000BC5 80FA39              <1>     cmp dl, '9'
   880 00000BC8 7603                <1>     jbe .chtb1
   881 00000BCA 80C207              <1>     add dl, 'A'-'0'-10
   882                              <1> .chtb1:
   883 00000BCD 88D5                <1>     mov ch, dl    ;Save remainder byte
   884                              <1> 
   885 00000BCF 88E8                <1>     mov al, ch    ;Get most sig digit into al
   886 00000BD1 B40E                <1>     mov ah, 0Eh
   887 00000BD3 CD30                <1>     int 30h
   888 00000BD5 88C8                <1>     mov al, cl    ;Get least sig digit into al
   889 00000BD7 B40E                <1>     mov ah, 0Eh
   890 00000BD9 CD30                <1>     int 30h
   891 00000BDB 5B                  <1>     pop rbx
   892 00000BDC C3                  <1>     ret
   893                              <1> ;--------------------------------
   894                              <1> ;       PROCS FOR SYSINIT       :
   895                              <1> ;--------------------------------
   896                              <1> adjustDrvHdr:
   897                              <1> ;Input: rsi = Effective address of driver in DOS segment
   898                              <1> ;       rbp = Ptr to the start of the DOS segment
   899                              <1> ;Output: rsi = EA of next header in DOS segment
   900 00000BDD 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   901 00000BE0 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   902 00000BE4 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   903 00000BE8 4883C622            <1>     add rsi, drvHdr_size
   904 00000BEC C3                  <1>     ret
   905                              <1> errorInit:
   906                              <1> ;If a critical error occurs during sysinit, fail through here
   907                              <1> ;Int 42h, 43h and 44h point here during sysinit
   908 00000BED 488D2D3A000000      <1>     lea rbp, hltmsg
   909 00000BF4 B804130000          <1>     mov eax, 1304h
   910 00000BF9 CD30                <1>     int 30h
   911                              <1>     ;cli ;Clear interrupts
   912                              <1>     ;mov al, -1
   913                              <1>     ;mov dx, 0A1h    ;PIC2 data
   914                              <1>     ;out dx, al      ;Mask all lines
   915                              <1>     ;mov dx, 21h     ;PIC1 data
   916                              <1>     ;out dx, al      ;Mask all lines
   917                              <1> .ei0:
   918 00000BFB F4                  <1>     hlt
   919 00000BFC EBFD                <1>     jmp short .ei0
   920                              <1> ;--------------------------------
   921                              <1> ;       DATA FOR SYSINIT        :
   922                              <1> ;--------------------------------
   923 00000BFE 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   923 00000C07 5343502F444F532E2E- <1>
   923 00000C10 2E0A0D24            <1>
   924 00000C14 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   924 00000C1D 6C6F636174696F6E20- <1>
   924 00000C26 4572726F720A0D00    <1>
   925 00000C2E 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   925 00000C37 7469616C6973696E67- <1>
   925 00000C40 20534350444F532E53- <1>
   925 00000C49 59532E205379737465- <1>
   925 00000C52 6D2068616C74696E67- <1>
   925 00000C5B 2E2E2E00            <1>
   926 00000C5F 434F4E00            <1> conName db "CON",0
   927 00000C63 41555800            <1> auxName db "AUX",0
   928 00000C67 50524E00            <1> prnName db "PRN",0
   929                              <1> 
   930 00000C6B 003A5C4155544F4558- <1> aexec   db 0,":\AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC (with space for drvletter)
   930 00000C74 45432E42415400      <1>
   931 00000C7B 003A5C434F4E464947- <1> cfgspec db 0,":\CONFIG.SYS",0 ;ASCIIZ for CONFIG (with space for drive letter)
   931 00000C84 2E53595300          <1>
   932                              <1> 
   933                              <1> intData:
   934 00000C89 [D015000000000000]  <1>     dq terminateProcess ;Int 40h
   935 00000C91 [6D1B000000000000]  <1>     dq functionDispatch ;Int 41h
   936 00000C99 [ED0B000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   937 00000CA1 [C51C000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   938 00000CA9 [C216000000000000]  <1>     dq dosDefCritErrHdlr 
   939 00000CB1 [8E17000000000000]  <1>     dq absDiskRead      ;Int 45h
   940 00000CB9 [6F17000000000000]  <1>     dq absDiskWrite     ;Int 46h
   941 00000CC1 [D215000000000000]  <1>     dq terminateRes     ;Int 47h
   942 00000CC9 [C51C000000000000]  <1>     dq defaultIretq     ;Int 48h
   943 00000CD1 [C51C000000000000]  <1>     dq defaultIretq     ;Int 49h
   944 00000CD9 [C51C000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   945 00000CE1 [C51C000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   946 00000CE9 [C51C000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   947 00000CF1 [C51C000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   948 00000CF9 [C51C000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   949 00000D01 [5C20000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   950                              <1> nData:
   951 00000D09 [0D23000000000000]  <1>     dq conHdr
   952 00000D11 0480                <1>     dw 08004h
   953 00000D13 [B524000000000000]  <1>     dq nulStrat
   954 00000D1B [BB24000000000000]  <1>     dq nulIntr
   955 00000D23 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   956                              <1> 
   957                              <1> diskInit:
   958                              <1>     ;We create a function to deal with BPB parsing etc
   959                              <1>     ;Start with the first primary partition on each hard disk (until max)
   960                              <1>     ;   They dont have to be bootable
   961                              <1>     ;Then go back and look for other partitions partitions. 
   962                              <1>     ;   Add each other primary or logical ptn (until max)
   963                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   964                              <1>     ;Use r8 as device counter
   965 00000D2B 488DBD[C42C0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   966 00000D32 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   966 00000D3A 00                  <1>
   967 00000D3B 0F84BF000000        <1>     jz .remInit ;No? Go to removables
   968 00000D41 41B802000000        <1>     mov r8, 2   ;Device number 2 = C:
   969 00000D47 B280                <1>     mov dl, 80h ;Start with HDD 0
   970                              <1> .primary:
   971 00000D49 64803C25[68C00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
   971 00000D51 03                  <1>
   972 00000D52 0F84A8000000        <1>     je .remInit
   973 00000D58 31C9                <1>     xor ecx, ecx    ;Sector 0
   974 00000D5A E838010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   975 00000D5F 0F8286000000        <1>     jc .primaryEpilog
   976                              <1>     ;Here, check MBR or BPB
   977 00000D65 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   978 00000D6E 757B                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   979                              <1>     ;Now check if BPB or MBR
   980 00000D70 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   981 00000D72 8A6302              <1>     mov ah, byte [rbx + 2]
   982 00000D75 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   983 00000D79 7470                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   984                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   985                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   986 00000D7B 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   987 00000D82 B104                <1>     mov cl, 4
   988                              <1> .checkPrimary:
   989 00000D84 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   990 00000D87 3C01                <1>     cmp al, 01
   991 00000D89 741E                <1>     je .primaryFound
   992 00000D8B 3C04                <1>     cmp al, 04
   993 00000D8D 741A                <1>     je .primaryFound
   994 00000D8F 3C06                <1>     cmp al, 06
   995 00000D91 7416                <1>     je .primaryFound
   996 00000D93 3C0B                <1>     cmp al, 0Bh
   997 00000D95 7412                <1>     je .primaryFound
   998 00000D97 3C0C                <1>     cmp al, 0Ch
   999 00000D99 740E                <1>     je .primaryFound
  1000 00000D9B 3C0E                <1>     cmp al, 0Eh
  1001 00000D9D 740A                <1>     je .primaryFound
  1002 00000D9F 4883C310            <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1003 00000DA3 FEC9                <1>     dec cl
  1004 00000DA5 7444                <1>     jz .primaryEpilog
  1005 00000DA7 EBDB                <1>     jmp short .checkPrimary
  1006                              <1> .primaryFound:
  1007                              <1>     ;Copy the first sector of this partition into memory
  1008 00000DA9 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1009 00000DAC E8E6000000          <1>     call .initReadSector
  1010 00000DB1 7238                <1>     jc .primaryEpilog
  1011                              <1>     ;Now verify this is a BPB
  1012 00000DB3 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1013 00000DB5 8A6302              <1>     mov ah, byte [rbx + 2]
  1014 00000DB8 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1015 00000DBC 752D                <1>     jne .primaryEpilog   ;If not, skip
  1016                              <1>     ;Now copy data to internal tables
  1017 00000DBE 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1018 00000DC1 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1019 00000DC6 57                  <1>     push rdi
  1020 00000DC7 F348A5              <1>     rep movsq   ;Copy the BPB
  1021 00000DCA 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1022                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1023 00000DCB 4A8D9C05[922C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1024                              <1>     ;Add device count to rbx to point to correct entry
  1025 00000DD3 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1026 00000DD5 4A8D9CC5[9C2C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1027 00000DDD 488933              <1>     mov qword [rbx], rsi
  1028 00000DE0 49FFC0              <1>     inc r8  ;Goto next logical drive
  1029 00000DE3 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1030                              <1> .primaryEpilog:
  1031 00000DEB FEC2                <1>     inc dl  ;Goto next BIOS drive
  1032 00000DED 88D6                <1>     mov dh, dl
  1033 00000DEF 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1034 00000DF2 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1035 00000DFA 0F8549FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1036                              <1> .extended:
  1037                              <1> ;We have gone through all the devices once
  1038                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1039                              <1>     ;je .remInit ;If yes, get removable devices
  1040                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1041                              <1>     ;xor ecx, ecx    ;Get MBR back
  1042                              <1>     ;call .initReadSector
  1043                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1044                              <1> .remInit:
  1045                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1046 00000E00 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1047 00000E03 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1048 00000E05 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1049                              <1>     ;rdi points to the space for the subsequent bpb's
  1050                              <1> .removables:
  1051 00000E08 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1052 00000E0A E888000000          <1>     call .initReadSector
  1053 00000E0F 7238                <1>     jc .removableEpilogue   ;Goto next device
  1054                              <1>     ;Now verify this is a BPB
  1055 00000E11 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1056 00000E13 8A6302              <1>     mov ah, byte [rbx + 2]
  1057 00000E16 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1058 00000E1A 752D                <1>     jne .removableEpilogue   ;If not, skip
  1059                              <1>     ;Now copy data to internal tables
  1060 00000E1C 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1061 00000E1F B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1062 00000E24 57                  <1>     push rdi
  1063 00000E25 F348A5              <1>     rep movsq   ;Copy the BPB
  1064 00000E28 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1065                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1066 00000E29 4A8D9C05[922C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1067                              <1>     ;Add device count to rbx to point to correct entry
  1068 00000E31 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1069 00000E33 4A8D9CC5[9C2C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1070 00000E3B 488933              <1>     mov qword [rbx], rsi
  1071 00000E3E 49FFC0              <1>     inc r8  ;Goto next logical drive
  1072 00000E41 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1073                              <1> .removableEpilogue:
  1074 00000E49 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1075 00000E4B 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1076 00000E53 740F                <1>     je .end
  1077 00000E55 4983F802            <1>     cmp r8, 2 ;Are we back at drive C: ?
  1078 00000E59 7403                <1>     je .re0
  1079 00000E5B 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1080                              <1> .re0:
  1081 00000E5E 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1082 00000E62 72A4                <1>     jb .removables
  1083                              <1> .end:
  1084 00000E64 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1084 00000E6C 01                  <1>
  1085 00000E6D 7401                <1>     je .singleRemDev
  1086 00000E6F C3                  <1>     ret
  1087                              <1> .singleRemDev:
  1088                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1089 00000E70 488D9D[922C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1090 00000E77 8A95[922C0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1091 00000E7D 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1092 00000E80 488D9D[9C2C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1093 00000E87 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1094 00000E8A 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1095 00000E8E 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1096 00000E96 C3                  <1>     ret
  1097                              <1> .initReadSector:
  1098                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1099 00000E97 B482                <1>     mov ah, 82h ;Read
  1100 00000E99 B001                <1>     mov al, 1   ;One sector
  1101 00000E9B 488D9D[39010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1102 00000EA2 CD33                <1>     int 33h
  1103 00000EA4 C3                  <1>     ret
    13                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    14                                  %include "./Source/BSS/dosSeg.asm"
    15                              <1> ;This file contains the main DOS data segment
    16                              <1> dosAPT: ;Additional Page tables
    17 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    18                              <1> dosDataArea:
    19 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    20 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    21 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    22 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    23 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    24 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    25 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    26 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    27                              <1> ;Above is the system stats
    28                              <1> ;Below is the DOS vars
    29 0003C023 ??                  <1>     vConOutOff  resb 1    ;Offset in output buffer to the next char to output
    30                              <1>     ;   A value of 0 means no chars buffered.
    31 0003C024 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    32                              <1> sysVarsPtr:
    33 0003C02C ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    34 0003C034 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    35 0003C03C ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    36                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    37 0003C044 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    38                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    39 0003C04C ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    40 0003C04E ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    41 0003C056 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    42 0003C05E ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    43 0003C066 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    44                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    45 0003C068 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    46 0003C069 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    47 0003C06A ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    48 0003C06B ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    49 0003C06C <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    50                              <1> ;Additional internal variables
    51                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    52 0003C08E ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    53 0003C08F ????                <1>     numFiles    resw 1    ;FILES=5 default
    54 0003C091 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    55                              <1> ;Create SFT header and corresponding array of five default sft entries
    56 0003C093 <res Ah>            <1>     firstSftHeader  resb sfth_size
    57 0003C09D <res 4Fh>           <1>     firstSft    resb sft_size
    58 0003C0EC <res 4Fh>           <1>     secondSft   resb sft_size
    59 0003C13B <res 4Fh>           <1>     thirdSft    resb sft_size
    60 0003C18A <res 4Fh>           <1>     fourthSft   resb sft_size
    61 0003C1D9 <res 4Fh>           <1>     fifthSft    resb sft_size
    62                              <1> 
    63                              <1> ;Virtual CONsole Buffers
    64 0003C228 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    65                              <1>     ;Only incremented when CON device runs vCon
    66                              <1> vConBuf:    ;Proper buffer symbol
    67 0003C229 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    68 0003C22A <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    69                              <1>     ;Only 128 if also taking input and outputting simultaneously
    70 0003C2AA <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    71 0003C32A ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    72                              <1> 
    73 0003C32B ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    74 0003C32C ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    75 0003C32D ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    76 0003C32E ??                  <1>     vConCursor  resb 1     ;Inc on each char output, regardless of redirection
    77                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    78                              <1> 
    79 0003C32F ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    80                              <1> ;Server stuff. Default to all zeros (blank)
    81 0003C330 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    82 0003C331 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    83 0003C332 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    84                              <1> ;Swappable Data Area
    85 0003C342 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    86 0003C362 ??                  <1>                 resb 1  ;Alignment byte
    87                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    88 0003C363 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    89 0003C364 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    90 0003C365 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    91 0003C366 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    92 0003C367 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    93 0003C369 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    94 0003C36A ??                  <1>     errorClass  resb 1  ;Error Class
    95 0003C36B ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    96 0003C373 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    97 0003C37B ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    98                              <1> 
    99 0003C383 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   100 0003C38B ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   101 0003C38D ??                  <1>     currentDrv  resb 1  ;Default drive x
   102 0003C38E ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   103                              <1> ;SDA, needs to be replaced between processes
   104 0003C38F ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   105 0003C397 ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
   106 0003C39F ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   107 0003C3A1 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   108 0003C3A9 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   109 0003C3B1 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   110                              <1> 
   111 0003C3B9 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   112 0003C3C1 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   113 0003C3C2 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   114                              <1> 
   115 0003C3C3 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   116 0003C3CB ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   117 0003C3D3 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   118 0003C3DB ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   119 0003C3E3 ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   120                              <1> ;The below flag tells DOS to print ^C in the termination function
   121 0003C3E4 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   122                              <1> 
   123                              <1> ;Time stuff
   124 0003C3E5 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   125 0003C3E6 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   126 0003C3E7 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
   127 0003C3E8 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   128 0003C3EA ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   129                              <1> 
   130 0003C3EB ??                  <1>     vConDrvFlg  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   131 0003C3EC ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   132 0003C3ED ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   133                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   134                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   135                              <1> ; without forcing to re-build the whole primary request block.
   136                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   137                              <1> ; with secondary char output going through the secondary header
   138                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   139                              <1> ; for output)
   140                              <1> ;ioReqPkt is the largest possible packet
   141 0003C3EE <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   142 0003C418 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   143                              <1> 
   144                              <1> ;Swappable Buffers
   145 0003C442 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   146 0003C4C2 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   147 0003C542 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   148 0003C548 ??                  <1>     singleIObyt resb 1  ;For single IO byte buffers
   149                              <1> ;Misc bookkeeping flags and vars
   150                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   151 0003C549 ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   152 0003C54A ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   153 0003C54B ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   154 0003C54C ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   155 0003C54D ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   156 0003C54E ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   157                              <1> 
   158 0003C54F ??                  <1>     workingDrv  resb 1  ;Working drive number
   159                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   160                              <1> workingDD:  ;Create a symbol for the working device driver too
   161 0003C550 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   162 0003C558 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   163                              <1> vConOldSFT: ;Alternate symbol for saving the oldSFTptr during a char func
   164 0003C560 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr
   165 0003C568 <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   166 0003C5C3 ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   167                              <1> vConCurSFT: ;Alternate symbol for the SFT to be used for char function
   168 0003C5CB ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   169 0003C5D3 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   170 0003C5D5 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   171                              <1> ;Temp vars, used when walking FAT or changing sectors
   172 0003C5DD ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   173 0003C5E5 ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   174                              <1> ;***************************************************|
   175                              <1> ; Needs to be set up before any file access         |
   176                              <1> ; These vars keep track of file access properties   |
   177                              <1> ;   and must be used only for such purposes.        |
   178                              <1> ;***************************************************|
   179 0003C5E7 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   180 0003C5EB ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   181                              <1> 
   182 0003C5EF ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   183                              <1> 
   184 0003C5F0 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   185 0003C5F4 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   186 0003C5F5 ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   187                              <1> 
   188 0003C5FD ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   189 0003C5FF ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   190                              <1> ;***************************************************|
   191 0003C603 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   192 0003C607 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   193 0003C60B ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   194 0003C60F ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   195 0003C613 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   196                              <1> ;Directory stuff
   197 0003C617 ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   198 0003C61B ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   199 0003C61F ??                  <1>     dirSect     resb 1  ;Sector of current directory
   200 0003C620 ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   201                              <1> ;Error DPB 
   202 0003C621 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   203                              <1>     
   204                              <1> ;Stacks and scratch SFT
   205 0003C629 <res 528h>          <1>     critStack   resq 165
   206 0003CB51 ????????????????    <1>     critStakTop resq 1
   207                              <1> 
   208 0003CB59 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   209                              <1> 
   210 0003CBA8 <res 638h>          <1>     AuxStack    resq 199
   211 0003D1E0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   212 0003D1E8 <res 638h>          <1>     DiskStack   resq 199
   213 0003D820 ????????????????    <1>     DiskStakTop resq 1
   214                              <1> 
   215 0003D828 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   216 0003D829 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   217                              <1>     dSegLen     equ     $
    15                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    16                                  %include "./Source/Data/staticData.asm"
    17                              <1> 
    18                              <1> ;-----------------------------------:
    19                              <1> ;           Static Data             :
    20                              <1> ;-----------------------------------:
    21 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    22 00000001 01                  <1> dosMinor    db 01h      ;.01
    23 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    23 0000000B 535953              <1>
    24 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    24 00000017 535953              <1>
    17                                  %include "./Source/Data/dispTbl.asm"
    18                              <1> ;Kernel Dispatch Function Table
    19                              <1> 
    20                              <1> kDispTbl:
    21 0000001A BA15                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    22 0000001C 480B                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    23 0000001E 570B                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    24 00000020 730B                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    25 00000022 730B                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    26 00000024 730B                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    27 00000026 730B                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    28 00000028 730B                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    29 0000002A 730B                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    30 0000002C 8B0B                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    31 0000002E 9B0B                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    32 00000030 9B0B                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    33 00000032 9B0B                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    34 00000034 4E1D                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    35 00000036 6C1D                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    36 00000038 720C                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    37 0000003A 720C                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    38 0000003C 720C                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    39 0000003E 720C                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    40 00000040 720C                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    41 00000042 720C                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    42 00000044 720C                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    43 00000046 720C                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    44 00000048 720C                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    45 0000004A 4120                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    46 0000004C 851D                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    47 0000004E 730C                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    48 00000050 8C1D                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    49 00000052 8E1D                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    50 00000054 4120                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    51 00000056 4120                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    52 00000058 461E                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    53 0000005A 4120                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    54 0000005C 860C                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    55 0000005E 860C                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    56 00000060 860C                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    57 00000062 860C                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    58 00000064 F51D                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    59 00000066 221E                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    60 00000068 860C                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    61 0000006A 860C                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    62 0000006C 860C                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    63 0000006E 710C                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    64 00000070 710C                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    65 00000072 710C                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    66 00000074 710C                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    67 00000076 231E                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    68 00000078 870C                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    69 0000007A 311E                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    70 0000007C BB15                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    71 0000007E 481E                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    72 00000080 031D                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    73 00000082 8E1E                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    74 00000084 9F1E                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    75 00000086 B41E                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    76 00000088 BE15                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    77 0000008A BE15                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    78 0000008C 5008                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    79 0000008E 5008                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    80 00000090 5008                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    81 00000092 9A0C                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    82 00000094 9B0C                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    83 00000096 9C0C                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    84 00000098 9D0C                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    85 0000009A D60C                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    86 0000009C DF0C                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    87 0000009E E00C                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    88 000000A0 330D                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    89 000000A2 330D                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    90 000000A4 330D                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    91 000000A6 330D                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    92 000000A8 5008                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    93 000000AA 2D10                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    94 000000AC 1C12                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    95 000000AE 2613                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    96 000000B0 BC15                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    97 000000B2 BD15                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    98 000000B4 1A1F                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    99 000000B6 330D                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   100 000000B8 330D                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   101 000000BA 311D                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   102 000000BC 3A1D                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   103 000000BE 2C1F                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   104 000000C0 3D1F                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   105 000000C2 0F20                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   106 000000C4 1620                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   107 000000C6 330D                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   108 000000C8 5008                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   109 000000CA A914                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   110 000000CC 1720                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   111 000000CE 330D                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   112 000000D0 330D                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   113 000000D2 330D                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   114 000000D4 4020                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   115 000000D6 4020                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   116 000000D8 4020                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   117 000000DA 5008                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   118 000000DC 4120                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   119 000000DE 431D                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   120 000000E0 4120                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   121 000000E2 4C1D                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   122 000000E4 BE15                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   123 000000E6 BE15                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   124 000000E8 330D                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   125 000000EA 330D                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   126 000000EC 4120                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   127                              <1> kDispTblL  equ $ - kDispTbl 
   128                              <1> 
   129                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   130 000000EE 8F1F                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   131                              <1> mDispTblL   equ     $ - mDispTbl
    18                                  %include "./Source/Debug/debug.asm"
    19                              <1> ;This file contains debugging macros, procs and strings
    20                              <1> ; that we can use to output to COM1 bypassing the operating system.
    21                              <1> ;A serial terminal must be connected for this to work.
    22                              <1> 
    23                              <1> ;Variables and equates
    24                              <1> 
    25 000000F0 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    26                              <1> 
    27 000000F8 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    27 00000101 39414243444546      <1>
    28                              <1> ;Common procedures
    29                              <1> debMakeDebuggerRespond:
    30 00000108 488D2D26000000      <1>     lea rbp, .msg
    31 0000010F E8AE000000          <1>     call debPrintNullString
    32 00000114 B900001000          <1>     mov ecx, 100000h
    33                              <1> .waiting:
    34 00000119 FFC9                <1>     dec ecx
    35 0000011B 740C                <1>     jz .timeout
    36 0000011D B402                <1>     mov ah, 02h ;Blocking recieve!
    37 0000011F 31D2                <1>     xor edx, edx
    38 00000121 CD34                <1>     int 34h
    39 00000123 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    40 00000126 75F1                <1>     jnz .waiting
    41 00000128 C3                  <1>     ret
    42                              <1> .timeout:
    43 00000129 488D2D47000000      <1>     lea rbp, .msg2
    44 00000130 E98D000000          <1>     jmp debPrintNullString
    45 00000135 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    45 0000013E 6B6579206174207468- <1>
    45 00000147 65207465726D696E61- <1>
    45 00000150 6C20746F20636F6E74- <1>
    45 00000159 696E7565206F722077- <1>
    45 00000162 61697420666F722074- <1>
    45 0000016B 696D656F75742E2E2E- <1>
    45 00000174 0A0D00              <1>
    46 00000177 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    46 00000180 436F6E74696E75696E- <1>
    46 00000189 672E2E2E0A0D00      <1>
    47                              <1> debPrintHexByte:
    48                              <1> ;Print the hex byte in al as a hex value
    49 00000190 52                  <1>     push rdx
    50 00000191 53                  <1>     push rbx
    51 00000192 50                  <1>     push rax
    52                              <1> 
    53 00000193 88C2                <1>     mov dl, al           ;save byte in dl
    54 00000195 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    55 00000199 6683E20F            <1>     and dx, 000Fh        ;Lo nybble
    56 0000019D 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    57 000001A1 E80C000000          <1>     call .wrchar
    58 000001A6 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    59 000001A9 E804000000          <1>     call .wrchar
    60                              <1> 
    61 000001AE 58                  <1>     pop rax
    62 000001AF 5B                  <1>     pop rbx
    63 000001B0 5A                  <1>     pop rdx
    64 000001B1 C3                  <1>     ret
    65                              <1> .wrchar:
    66 000001B2 6687DB              <1>     xchg bx, bx
    67 000001B5 488D1D3CFFFFFF      <1>     lea rbx, debascii
    68 000001BC D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    69 000001BD B401                <1>     mov ah, 01h
    70 000001BF CD34                <1>     int 34h  ;print char
    71 000001C1 C3                  <1>     ret
    72                              <1> 
    73                              <1> debPrintNullString:
    74                              <1> ;Print a null terminated string pointed to by rbp
    75 000001C2 56                  <1>     push rsi
    76 000001C3 50                  <1>     push rax
    77 000001C4 52                  <1>     push rdx
    78 000001C5 31D2                <1>     xor edx, edx    ;Select COM1
    79 000001C7 4889EE              <1>     mov rsi, rbp
    80                              <1> .getChar:
    81 000001CA AC                  <1>     lodsb
    82 000001CB 84C0                <1>     test al, al
    83 000001CD 7406                <1>     jz .exit
    84 000001CF B401                <1>     mov ah, 01h
    85 000001D1 CD34                <1>     int 34h
    86 000001D3 EBF5                <1>     jmp short .getChar
    87                              <1> .exit:
    88 000001D5 5A                  <1>     pop rdx
    89 000001D6 58                  <1>     pop rax
    90 000001D7 5E                  <1>     pop rsi
    91 000001D8 C3                  <1>     ret
    92                              <1> 
    93                              <1> debPrintDOSStack:
    94                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    95                              <1> ;Shows me which function, and parameters passed and returned
    96 000001D9 488D2D88010000      <1>     lea rbp, .a1
    97 000001E0 E8DDFFFFFF          <1>     call debPrintNullString
    98 000001E5 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    99 000001EC 488D1D95000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   100 000001F3 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   101 000001F6 E8DC020000          <1>     call overlayQword
   102 000001FB 4883C316            <1>     add rbx, 22
   103 000001FF 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   104 00000203 E8CF020000          <1>     call overlayQword
   105 00000208 4883C316            <1>     add rbx, 22
   106 0000020C 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   107 00000210 E8C2020000          <1>     call overlayQword
   108 00000215 4883C318            <1>     add rbx, 22 + 2  ;Skip crlf
   109 00000219 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   110 0000021D E8B5020000          <1>     call overlayQword
   111 00000222 4883C316            <1>     add rbx, 22 
   112 00000226 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   113 0000022A E8A8020000          <1>     call overlayQword
   114 0000022F 4883C316            <1>     add rbx, 22
   115 00000233 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   116 00000237 E89B020000          <1>     call overlayQword
   117 0000023C 4883C318            <1>     add rbx, 22 + 2 ;Skip crlf
   118 00000240 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   119 00000244 E88E020000          <1>     call overlayQword
   120 00000249 4883C316            <1>     add rbx, 22
   121 0000024D 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
   122 00000254 4883C060            <1>     add rax, callerFrame_size
   123 00000258 E87A020000          <1>     call overlayQword
   124 0000025D 4883C316            <1>     add rbx, 22
   125 00000261 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   126 00000265 E86D020000          <1>     call overlayQword
   127 0000026A 4883C318            <1>     add rbx, 22 + 2 ;Skip crlf
   128 0000026E 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   129 00000272 E860020000          <1>     call overlayQword
   130 00000277 488D2D06000000      <1>     lea rbp, .a0
   131 0000027E E83FFFFFFF          <1>     call debPrintNullString
   132 00000283 C3                  <1>     ret
   133                              <1> 
   134 00000284 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   134 0000028D 303030303030303030- <1>
   134 00000296 30306820            <1>
   135 0000029A 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   135 000002A3 303030303030303030- <1>
   135 000002AC 30306820            <1>
   136 000002B0 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   136 000002B9 303030303030303030- <1>
   136 000002C2 30306820            <1>
   137 000002C6 0A0D                <1>     db  0Ah,0Dh
   138 000002C8 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   138 000002D1 303030303030303030- <1>
   138 000002DA 30306820            <1>
   139 000002DE 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   139 000002E7 303030303030303030- <1>
   139 000002F0 30306820            <1>
   140 000002F4 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   140 000002FD 303030303030303030- <1>
   140 00000306 30306820            <1>
   141 0000030A 0A0D                <1>     db 0Ah, 0Dh
   142 0000030C 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   142 00000315 303030303030303030- <1>
   142 0000031E 30306820            <1>
   143 00000322 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   143 0000032B 303030303030303030- <1>
   143 00000334 30306820            <1>
   144 00000338 7269703D3030303030- <1>     db "rip=0000000000000000h"
   144 00000341 303030303030303030- <1>
   144 0000034A 303068              <1>
   145 0000034D 0A0D                <1>     db 0Ah, 0Dh
   146 0000034F 666C673D3030303030- <1>     db "flg=0000000000000000h "
   146 00000358 303030303030303030- <1>
   146 00000361 30306820            <1>
   147 00000365 0A0D00              <1>     db 0Ah,0Dh,0
   148 00000368 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   148 00000371 206F6E20496E742034- <1>
   148 0000037A 316820737461636B0A- <1>
   148 00000383 0D00                <1>
   149                              <1> 
   150                              <1> debDPBptr:
   151                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   152 00000385 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   153 0000038C 4889E8              <1>     mov rax, rbp
   154 0000038F E843010000          <1>     call overlayQword
   155 00000394 488D2D06000000      <1>     lea rbp, .dpb
   156 0000039B E822FEFFFF          <1>     call debPrintNullString
   157 000003A0 C3                  <1>     ret
   158                              <1> .dpb: 
   159 000003A1 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   159 000003AA 203030303030303030- <1>
   159 000003B3 303030303030303068- <1>
   159 000003BC 200A0D00            <1>
   160                              <1> 
   161                              <1> debDPBBPBptr:
   162                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   163                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   164 000003C0 488D1D2B000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   165 000003C7 4889E8              <1>     mov rax, rbp
   166 000003CA E808010000          <1>     call overlayQword
   167 000003CF 4883C321            <1>     add rbx, 33
   168 000003D3 4889F0              <1>     mov rax, rsi
   169 000003D6 E8FC000000          <1>     call overlayQword
   170 000003DB 488D2D06000000      <1>     lea rbp, .dpb
   171 000003E2 E8DBFDFFFF          <1>     call debPrintNullString
   172 000003E7 C3                  <1>     ret
   173                              <1> .dpb: 
   174 000003E8 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   174 000003F1 203030303030303030- <1>
   174 000003FA 303030303030303068- <1>
   174 00000403 2066726F6D20        <1>
   175 00000409 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   175 00000412 203030303030303030- <1>
   175 0000041B 303030303030303068- <1>
   175 00000424 200A0D00            <1>
   176                              <1> overlayByte:
   177                              <1>     ;Called with number in rax
   178                              <1>     ;pointer to START of 16 byte space for number in rbx
   179 00000428 53                  <1>     push rbx
   180 00000429 51                  <1>     push rcx
   181 0000042A 52                  <1>     push rdx
   182 0000042B 55                  <1>     push rbp
   183 0000042C 4889DD              <1>     mov rbp, rbx
   184 0000042F 4889C2              <1>     mov rdx, rax
   185 00000432 48FFC5              <1>     inc rbp ;Go to end of number
   186                              <1> 
   187 00000435 488D1DBCFCFFFF      <1>     lea rbx, debascii
   188 0000043C 88D0                <1>     mov al, dl  ;Go low nybble first
   189 0000043E 240F                <1>     and al, 0Fh
   190 00000440 D7                  <1>     xlatb
   191 00000441 884500              <1>     mov byte [rbp], al
   192 00000444 48FFCD              <1>     dec rbp ;Go down one char pos
   193 00000447 88D0                <1>     mov al, dl
   194 00000449 24F0                <1>     and al, 0F0h    ;Hi nybble next
   195 0000044B C0E804              <1>     shr al, 4   ;Shift hi nybble low
   196 0000044E D7                  <1>     xlatb
   197 0000044F 884500              <1>     mov byte [rbp], al  ;Store char
   198                              <1> 
   199 00000452 5D                  <1>     pop rbp
   200 00000453 5A                  <1>     pop rdx
   201 00000454 59                  <1>     pop rcx
   202 00000455 5B                  <1>     pop rbx
   203 00000456 C3                  <1>     ret
   204                              <1> 
   205                              <1> overlayWord:
   206                              <1>     ;Called with number in rax
   207                              <1>     ;pointer to START of 16 byte space for number in rbx
   208 00000457 53                  <1>     push rbx
   209 00000458 51                  <1>     push rcx
   210 00000459 52                  <1>     push rdx
   211 0000045A 55                  <1>     push rbp
   212 0000045B 4889DD              <1>     mov rbp, rbx
   213 0000045E 4889C2              <1>     mov rdx, rax
   214 00000461 4883C503            <1>     add rbp, 3 ;Go to end of number
   215 00000465 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   216 0000046A 488D1D87FCFFFF      <1>     lea rbx, debascii
   217                              <1> .ow0:
   218 00000471 88D0                <1>     mov al, dl  ;Go low nybble first
   219 00000473 240F                <1>     and al, 0Fh
   220 00000475 D7                  <1>     xlatb
   221 00000476 884500              <1>     mov byte [rbp], al
   222 00000479 48FFCD              <1>     dec rbp ;Go down one char pos
   223 0000047C 88D0                <1>     mov al, dl
   224 0000047E 24F0                <1>     and al, 0F0h    ;Hi nybble next
   225 00000480 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   226 00000483 D7                  <1>     xlatb
   227 00000484 884500              <1>     mov byte [rbp], al  ;Store char
   228 00000487 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   229 0000048B 48FFCD              <1>     dec rbp
   230 0000048E FFC9                <1>     dec ecx
   231 00000490 75DF                <1>     jnz .ow0
   232 00000492 5D                  <1>     pop rbp
   233 00000493 5A                  <1>     pop rdx
   234 00000494 59                  <1>     pop rcx
   235 00000495 5B                  <1>     pop rbx
   236 00000496 C3                  <1>     ret
   237                              <1> 
   238                              <1> overlayDword:
   239                              <1>     ;Called with number in rax
   240                              <1>     ;pointer to START of 16 byte space for number in rbx
   241 00000497 53                  <1>     push rbx
   242 00000498 51                  <1>     push rcx
   243 00000499 52                  <1>     push rdx
   244 0000049A 55                  <1>     push rbp
   245 0000049B 4889DD              <1>     mov rbp, rbx
   246 0000049E 4889C2              <1>     mov rdx, rax
   247 000004A1 4883C507            <1>     add rbp, 7 ;Go to end of number
   248 000004A5 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   249 000004AA 488D1D47FCFFFF      <1>     lea rbx, debascii
   250                              <1> .od0:
   251 000004B1 88D0                <1>     mov al, dl  ;Go low nybble first
   252 000004B3 240F                <1>     and al, 0Fh
   253 000004B5 D7                  <1>     xlatb
   254 000004B6 884500              <1>     mov byte [rbp], al
   255 000004B9 48FFCD              <1>     dec rbp ;Go down one char pos
   256 000004BC 88D0                <1>     mov al, dl
   257 000004BE 24F0                <1>     and al, 0F0h    ;Hi nybble next
   258 000004C0 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   259 000004C3 D7                  <1>     xlatb
   260 000004C4 884500              <1>     mov byte [rbp], al  ;Store char
   261 000004C7 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   262 000004CB 48FFCD              <1>     dec rbp
   263 000004CE FFC9                <1>     dec ecx
   264 000004D0 75DF                <1>     jnz .od0
   265 000004D2 5D                  <1>     pop rbp
   266 000004D3 5A                  <1>     pop rdx
   267 000004D4 59                  <1>     pop rcx
   268 000004D5 5B                  <1>     pop rbx
   269 000004D6 C3                  <1>     ret
   270                              <1> 
   271                              <1> overlayQword:
   272                              <1>     ;Called with number in rax
   273                              <1>     ;pointer to START of 16 byte space for number in rbx
   274 000004D7 53                  <1>     push rbx
   275 000004D8 51                  <1>     push rcx
   276 000004D9 52                  <1>     push rdx
   277 000004DA 55                  <1>     push rbp
   278 000004DB 4889DD              <1>     mov rbp, rbx
   279 000004DE 4889C2              <1>     mov rdx, rax
   280 000004E1 4883C50F            <1>     add rbp, 15 ;Go to end of number
   281 000004E5 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   282 000004EA 488D1D07FCFFFF      <1>     lea rbx, debascii
   283                              <1> .oq0:
   284 000004F1 88D0                <1>     mov al, dl  ;Go low nybble first
   285 000004F3 240F                <1>     and al, 0Fh
   286 000004F5 D7                  <1>     xlatb
   287 000004F6 884500              <1>     mov byte [rbp], al
   288 000004F9 48FFCD              <1>     dec rbp ;Go down one char pos
   289 000004FC 88D0                <1>     mov al, dl
   290 000004FE 24F0                <1>     and al, 0F0h    ;Hi nybble next
   291 00000500 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   292 00000503 D7                  <1>     xlatb
   293 00000504 884500              <1>     mov byte [rbp], al  ;Store char
   294 00000507 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   295 0000050B 48FFCD              <1>     dec rbp
   296 0000050E FFC9                <1>     dec ecx
   297 00000510 75DF                <1>     jnz .oq0
   298 00000512 5D                  <1>     pop rbp
   299 00000513 5A                  <1>     pop rdx
   300 00000514 59                  <1>     pop rcx
   301 00000515 5B                  <1>     pop rbx
   302 00000516 C3                  <1>     ret
   303                              <1> 
   304                              <1> debPrintFunctionName:
   305                              <1> ;Prints the DOS function that has been entered
   306                              <1> ;Entered with ah = Function number
   307 00000517 88E0                <1>     mov al, ah  ;Get dos function number
   308 00000519 488D1DD8FBFFFF      <1>     lea rbx, debascii
   309 00000520 488D1535000000      <1>     lea rdx, .number
   310 00000527 24F0                <1>     and al, 0F0h    ;Get high nybble first
   311 00000529 C0E804              <1>     shr al, 4
   312 0000052C D7                  <1>     xlatb
   313 0000052D 8802                <1>     mov byte [rdx], al
   314 0000052F 88E0                <1>     mov al, ah
   315 00000531 240F                <1>     and al, 0Fh
   316 00000533 D7                  <1>     xlatb
   317 00000534 884201              <1>     mov byte [rdx + 1], al
   318 00000537 488D2D06000000      <1>     lea rbp, .dosString
   319 0000053E E87FFCFFFF          <1>     call debPrintNullString
   320 00000543 C3                  <1>     ret
   321 00000544 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   321 0000054D 696F6E20496E742034- <1>
   321 00000556 31682F41483D        <1>
   322 0000055C 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   323                              <1> 
   324                              <1> ;----------------:
   325                              <1> ;!!!! MACROS !!!!:
   326                              <1> ;----------------:
   327                              <1> ;Insert macro when entering a debug block
   328                              <1> %macro debugEnterM 0
   329                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   330                              <1>     mov rsp, debStackTop
   331                              <1> ;Push all registers except rsp on stack
   332                              <1>     push rax
   333                              <1>     push rbx
   334                              <1>     push rcx
   335                              <1>     push rdx
   336                              <1>     push rsi
   337                              <1>     push rdi
   338                              <1>     push rbp
   339                              <1>     push r8
   340                              <1>     push r9
   341                              <1>     push r10
   342                              <1>     push r11
   343                              <1>     push r12
   344                              <1>     push r13
   345                              <1>     push r14
   346                              <1>     push r15
   347                              <1>     pushfq
   348                              <1> %endmacro
   349                              <1> ;Insert macro when exiting a debug block
   350                              <1> %macro debugExitM 0
   351                              <1>     popfq
   352                              <1>     pop r15
   353                              <1>     pop r14
   354                              <1>     pop r13
   355                              <1>     pop r12
   356                              <1>     pop r11
   357                              <1>     pop r10
   358                              <1>     pop r9
   359                              <1>     pop r8
   360                              <1>     pop rbp
   361                              <1>     pop rdi
   362                              <1>     pop rsi
   363                              <1>     pop rdx
   364                              <1>     pop rcx
   365                              <1>     pop rbx
   366                              <1>     pop rax
   367                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   368                              <1> %endmacro
    19                                  %include "./Source/Kernel/FAT/bufferFunctions.asm"
    20                              <1> ;This file contains FAT disk buffer related functions that
    21                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    22                              <1> ;----------------------------------------------------
    23                              <1> ;           Externally referenced functions         :
    24                              <1> ;----------------------------------------------------
    25                              <1> 
    26                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    27                              <1> ;Sets the buffer in rdi to the head of the chain
    28                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    29                              <1> ;Output: Buffer header set to the head of the chain
    30 00000562 48393D(4EC00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    31 00000569 7428                <1>     je .exit
    32 0000056B 56                  <1>     push rsi
    33 0000056C 488B35(4EC00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    34                              <1> .mainlp:
    35 00000573 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    36 00000576 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    37 00000578 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    38 0000057B EBF6                <1>     jmp short .mainlp
    39                              <1> .fnd:
    40 0000057D 57                  <1>     push rdi
    41 0000057E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    42 00000581 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    43 00000584 5F                  <1>     pop rdi ;Get original buf back
    44 00000585 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    45 00000588 488735(4EC00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    46 0000058F 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    47 00000592 5E                  <1>     pop rsi
    48                              <1> .exit:
    49 00000593 C3                  <1>     ret
    50                              <1> 
    51                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h
    52 00000594 E840000000          <1>     call flushBuffer
    53 00000599 7306                <1>     jnc .exit
    54                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    55 0000059B 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    56                              <1> .exit:
    57 000005A1 C3                  <1>     ret
    58                              <1> 
    59                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    60                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    61                              <1> ;Output: rdi = First disk buffer
    62 000005A2 488B3D(4EC00300)    <1>     mov rdi, [bufHeadPtr]
    63 000005A9 57                  <1>     push rdi
    64                              <1> .lp:
    65 000005AA 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    66 000005AE 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    67 000005B1 4883FFFF            <1>     cmp rdi, -1 ;End of chain?
    68 000005B5 75F3                <1>     jne .lp
    69 000005B7 5F                  <1>     pop rdi
    70 000005B8 C3                  <1>     ret
    71                              <1> 
    72                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    73                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    74                              <1> ; second buffer in the chain in rdi
    75                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    76                              <1> ;Output: rdi = Second buffer in the chain
    77 000005B9 E8A4FFFFFF          <1>     call makeBufferMostRecentlyUsed
    78 000005BE 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
    79 000005C5 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    80 000005C8 C3                  <1>     ret
    81                              <1> 
    82                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    83                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    84                              <1> ;Input: rdi = Buffer header to start searching at
    85                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    86                              <1> ;        ZF=ZE => No unreferenced buffer found
    87 000005C9 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    88 000005CD 7509                <1>     jnz .exit
    89 000005CF 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    90 000005D2 4883FFFF            <1>     cmp rdi, -1
    91 000005D6 75F1                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    92                              <1> .exit:
    93 000005D8 C3                  <1>     ret
    94                              <1> 
    95                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    96                              <1> ;Flushes the data in a sector buffer to disk!
    97                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
    98                              <1> ;Exit:  CF=NC : Success
    99                              <1> ;       CF=CY : Fail, terminate the request
   100                              <1> ;First make request to device driver
   101 000005D9 50                  <1>     push rax
   102 000005DA 53                  <1>     push rbx
   103 000005DB 51                  <1>     push rcx
   104 000005DC 52                  <1>     push rdx
   105 000005DD 56                  <1>     push rsi
   106 000005DE 55                  <1>     push rbp
   107 000005DF F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   108 000005E3 7448                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   109                              <1> .fbRequest0:
   110 000005E5 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   111 000005EA F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   112 000005EE 7403                <1>     jz .fbRequest1
   113 000005F0 83C602              <1>     add esi, 2  ;FAT sectors have 5 attempts
   114                              <1> .fbRequest1:
   115 000005F3 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   116 000005F6 B901000000          <1>     mov ecx, 1  ;One sector to copy
   117 000005FB 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   118 000005FF 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   119 00000603 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   120 00000607 E85F130000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   121 0000060C E8DA110000          <1>     call absDiskDriverCall    ;Make Driver Request
   122 00000611 7522                <1>     jnz .fbFail
   123                              <1> ;Now check if the buffer was a FAT, to write additional copies
   124 00000613 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   125 00000617 7414                <1>     jz .fbFreeExit  ;If not, exit
   126 00000619 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   127 0000061C 7409                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   128 0000061E 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   129 00000621 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   130 00000625 EBBE                <1>     jmp .fbRequest0 ;Make another request
   131                              <1> .fbFreeExit1:
   132 00000627 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   133 0000062A 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   134                              <1> .fbFreeExit:
   135 0000062D F8                  <1>     clc
   136                              <1> .fbExitFail:
   137 0000062E 5D                  <1>     pop rbp
   138 0000062F 5E                  <1>     pop rsi
   139 00000630 5A                  <1>     pop rdx
   140 00000631 59                  <1>     pop rcx
   141 00000632 5B                  <1>     pop rbx
   142 00000633 58                  <1>     pop rax
   143 00000634 C3                  <1>     ret
   144                              <1> .fbFail:
   145                              <1> ;Enter here only if the request failed
   146 00000635 FFCE                <1>     dec esi
   147 00000637 75BA                <1>     jnz .fbRequest1 ;Try the request again!
   148                              <1> ;Request failed thrice, critical error call
   149 00000639 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   150 00000640 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   151 00000647 89C7                <1>     mov edi, eax    ;Save status word in di
   152 00000649 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   153 00000650 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   154 00000653 B419                <1>     mov ah, critWrite | critFailOK | critRetryOK ;Set bits
   155                              <1>     ;Test for correct buffer data type
   156 00000655 F6C401              <1>     test ah, dosBuffer
   157 00000658 7505                <1>     jnz .fbFail0
   158 0000065A 80CC00              <1>     or ah, critDOS
   159 0000065D EB14                <1>     jmp short .fbFailMain
   160                              <1> .fbFail0:
   161 0000065F F6C402              <1>     test ah, fatBuffer
   162 00000662 7504                <1>     jnz .fbFail1
   163 00000664 B402                <1>     mov ah, critFAT
   164 00000666 EB0B                <1>     jmp short .fbFailMain
   165                              <1> .fbFail1:
   166 00000668 F6C404              <1>     test ah, dirBuffer
   167 0000066B 7504                <1>     jnz .fbFail2
   168 0000066D B404                <1>     mov ah, critDir
   169 0000066F EB02                <1>     jmp short .fbFailMain
   170                              <1> .fbFail2:
   171                              <1> ;Here it must be a data buffer
   172 00000671 B406                <1>     mov ah, critData
   173                              <1> .fbFailMain:
   174 00000673 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   175 00000679 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   176 0000067D E8770F0000          <1>     call criticalDOSError   ;Return in al the return code
   177 00000682 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   178 00000689 488B2D(21C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   179 00000690 3C01                <1>     cmp al, critRetry
   180 00000692 0F844DFFFFFF        <1>     je .fbRequest0
   181                              <1>     ;Else we fail (Ignore=Fail here)
   182 00000698 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   182 000006A0 00                  <1>
   183 000006A1 F9                  <1>     stc ;Set error flag to indicate fail
   184 000006A2 EB8A                <1>     jmp .fbExitFail
   185                              <1> 
   186                              <1> 
   187                              <1> testDirtyBufferForDrive:    ;External linkage
   188                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   189                              <1> ;Input: al = Drive number (0 based)
   190                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   191                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   192 000006A4 53                  <1>     push rbx
   193 000006A5 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   194                              <1> .tdbfdCheckBuffer:
   195 000006AC 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   196 000006AF 7509                <1>     jne .tdbfdGotoNextBuffer
   197 000006B1 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   198 000006B5 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   199 000006B7 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   200                              <1> .tdbfdExit:
   201 000006B8 5B                  <1>     pop rbx
   202 000006B9 C3                  <1>     ret
   203                              <1> .tdbfdGotoNextBuffer:
   204 000006BA 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   205 000006BD 4883FBFF            <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   206 000006C1 74F5                <1>     je .tdbfdExit
   207 000006C3 EBE7                <1>     jmp short .tdbfdCheckBuffer
   208                              <1> 
   209                              <1> freeBuffersForDPB:
   210                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   211                              <1> ; to have a drive number of -1, thus freeing it
   212                              <1> ;Given DPB is in rbp
   213 000006C5 53                  <1>     push rbx
   214 000006C6 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   215                              <1> .i0:
   216 000006CD 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   217 000006D1 7506                <1>     jne .i1 ;If no, skip freeing
   218 000006D3 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   219                              <1> .i1:
   220 000006D9 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   221 000006DC 4883FBFF            <1>     cmp rbx, -1
   222 000006E0 75EB                <1>     jne .i0
   223                              <1> .exit:
   224 000006E2 5B                  <1>     pop rbx
   225 000006E3 C3                  <1>     ret
   226                              <1> 
   227                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
   228                              <1> ;
   229                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   230                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   231                              <1> ;Flushes if not in disk change mode. 
   232                              <1> ;If in disk change mode, will check to see if the selected buffer 
   233                              <1> ; has data referring a device using the same DPB as we are changing.
   234                              <1> ; If it is, skip flushing, if not, flush first!
   235                              <1> ;
   236                              <1> ;This function will return a pointer to the desired data sector OR 
   237                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   238                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   239                              <1> ;Entry: rax = Sector to read
   240                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   241                              <1> ;       qword [workingDPB] = DPB to use for transaction
   242                              <1> ;Exit:  CF=NC => 
   243                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   244                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   245 000006E4 51                  <1>     push rcx
   246 000006E5 52                  <1>     push rdx
   247 000006E6 56                  <1>     push rsi
   248 000006E7 57                  <1>     push rdi
   249 000006E8 488B35(50C50300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   250 000006EF 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   251 000006F1 E856010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   252 000006F6 4883FFFF            <1>     cmp rdi, -1
   253 000006FA 740D                <1>     je .rbReadNewSector
   254                              <1> .rbExit:
   255 000006FC F8                  <1>     clc
   256                              <1> .rbExitNoFlag:
   257 000006FD 5F                  <1>     pop rdi
   258 000006FE 5E                  <1>     pop rsi
   259 000006FF 5A                  <1>     pop rdx
   260 00000700 59                  <1>     pop rcx
   261 00000701 488B1D(D5C50300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   262 00000708 C3                  <1>     ret
   263                              <1> .rbReadNewSector:
   264 00000709 E8ED000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   265 0000070E 803D(28D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   266 00000715 7506                <1>     jne .flush  ;We are not, flush buffer
   267 00000717 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   268 0000071B 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   269                              <1> .flush:
   270 0000071D E872FEFFFF          <1>     call flushAndFreeBuffer
   271 00000722 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   272                              <1> .skipFlush:
   273                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   274 00000724 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   275 00000727 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   276 0000072A 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   277 0000072E 80F902              <1>     cmp cl, fatBuffer
   278 00000731 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   279 00000733 7503                <1>     jne .rbNonFATbuffer
   280 00000735 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   281                              <1> .rbNonFATbuffer:
   282 00000738 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   283 0000073B 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   284 0000073E 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   285 00000741 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   286 00000745 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   287 00000749 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   288 0000074E EBAD                <1>     jmp short .rbExitNoFlag
   289                              <1> 
   290                              <1> readSectorBuffer:   ;Internal Linkage
   291                              <1> ;Reads a sector into a built sector buffer
   292                              <1> ;Entry: rdi = Pointer to buffer header
   293                              <1> ;Exit:  CF=NC : Success
   294                              <1> ;       CF=CY : Fail, terminate the request
   295                              <1> ;       rbx pointing to buffer header
   296                              <1> ;First make request to device driver
   297 00000750 50                  <1>     push rax
   298 00000751 53                  <1>     push rbx
   299 00000752 51                  <1>     push rcx
   300 00000753 52                  <1>     push rdx
   301 00000754 56                  <1>     push rsi
   302 00000755 55                  <1>     push rbp
   303                              <1> .rsRequest0:
   304 00000756 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   305 0000075B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   306 0000075F 7403                <1>     jz .rsRequest1
   307 00000761 83C602              <1>     add esi, 2  ;FAT sectors have 5 attempts
   308                              <1> .rsRequest1:
   309 00000764 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   310 00000767 B901000000          <1>     mov ecx, 1  ;One sector to copy
   311 0000076C 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   312 00000770 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   313 00000774 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   314 00000778 E8F9110000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   315 0000077D E869100000          <1>     call absDiskDriverCall    ;Make Driver Request
   316 00000782 7508                <1>     jnz .rsFail
   317                              <1> .rsExit:
   318 00000784 F8                  <1>     clc
   319                              <1> .rsExitFail:
   320 00000785 5D                  <1>     pop rbp
   321 00000786 5E                  <1>     pop rsi
   322 00000787 5A                  <1>     pop rdx
   323 00000788 59                  <1>     pop rcx
   324 00000789 5B                  <1>     pop rbx
   325 0000078A 58                  <1>     pop rax
   326 0000078B C3                  <1>     ret
   327                              <1> .rsFail:
   328                              <1> ;Enter here only if the request failed
   329 0000078C FFCE                <1>     dec esi
   330 0000078E 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   331                              <1> ;Request failed thrice, critical error call
   332 00000790 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   333 00000797 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   334 0000079E 89C7                <1>     mov edi, eax    ;Save status word in di
   335 000007A0 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   336 000007A7 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   337 000007AA B418                <1>     mov ah, critRead | critFailOK | critRetryOK ;Set bits
   338                              <1>     ;Test for correct buffer data type
   339 000007AC F6C401              <1>     test ah, dosBuffer
   340 000007AF 7505                <1>     jnz .rsFail0
   341 000007B1 80CC00              <1>     or ah, critDOS
   342 000007B4 EB14                <1>     jmp short .rsFailMain
   343                              <1> .rsFail0:
   344 000007B6 F6C402              <1>     test ah, fatBuffer
   345 000007B9 7504                <1>     jnz .rsFail1
   346 000007BB B402                <1>     mov ah, critFAT
   347 000007BD EB0B                <1>     jmp short .rsFailMain
   348                              <1> .rsFail1:
   349 000007BF F6C404              <1>     test ah, dirBuffer
   350 000007C2 7504                <1>     jnz .rsFail2
   351 000007C4 B404                <1>     mov ah, critDir
   352 000007C6 EB02                <1>     jmp short .rsFailMain
   353                              <1> .rsFail2:
   354                              <1> ;Here it must be a data buffer
   355 000007C8 B406                <1>     mov ah, critData
   356                              <1> .rsFailMain:
   357 000007CA 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   358 000007D0 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   359 000007D4 E8200E0000          <1>     call criticalDOSError
   360 000007D9 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   361 000007E0 488B2D(21C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   362 000007E7 3C01                <1>     cmp al, critRetry
   363 000007E9 0F8467FFFFFF        <1>     je .rsRequest0
   364                              <1>     ;Else we fail (Ignore=Fail here)
   365 000007EF 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   365 000007F7 00                  <1>
   366 000007F8 F9                  <1>     stc ;Set error flag to indicate fail
   367 000007F9 EB8A                <1>     jmp .rsExitFail
   368                              <1>     
   369                              <1> findLRUBuffer: ;Internal Linkage
   370                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   371                              <1> ; in rbx and the currBuff variable
   372                              <1> ;Input: Nothing
   373                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   374                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   375 000007FB 52                  <1>     push rdx
   376 000007FC 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   377 00000803 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   378 00000807 7430                <1>     je .flbExit 
   379 00000809 48833FFF            <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   380 0000080D 742A                <1>     je .flbExit
   381                              <1> .flbWalk:
   382 0000080F 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   383 00000812 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   384 00000815 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   385 00000819 7427                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   386 0000081B 48833FFF            <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   387 0000081F 75EE                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   388 00000821 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   389                              <1> .flbHeadLink:
   390 00000828 488B15(4EC00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   391 0000082F 48893D(4EC00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   392 00000836 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   393                              <1> .flbExit:
   394 00000839 5A                  <1>     pop rdx
   395 0000083A 48893D(D5C50300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   396 00000841 C3                  <1>     ret
   397                              <1> .flbFreeLink:
   398 00000842 51                  <1>     push rcx
   399 00000843 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   400 00000846 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   401 00000849 59                  <1>     pop rcx
   402 0000084A EBDC                <1>     jmp short .flbHeadLink
   403                              <1> 
   404                              <1> findSectorInBuffer:     ;Internal linkage
   405                              <1> ;Finds the Buffer for a sector
   406                              <1> ;If the sector is not in a buffer, returns with a -1
   407                              <1> ;Input: rax = Sector number
   408                              <1> ;        dl = Drive number
   409                              <1> ;Output: rdi = Buffer hdr pointer or -1
   410 0000084C 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   411                              <1> .fsiCheckBuffer:
   412 00000853 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   413 00000856 7507                <1>     jne .fsiGotoNextBuffer
   414 00000858 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   415 0000085C 7501                <1>     jne .fsiGotoNextBuffer
   416                              <1> .fsiExit:
   417 0000085E C3                  <1>     ret
   418                              <1> .fsiGotoNextBuffer:
   419 0000085F 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   420 00000862 4883FFFF            <1>     cmp rdi, -1     ;If rdi points to -1, exit
   421 00000866 74F6                <1>     je .fsiExit
   422 00000868 EBE9                <1>     jmp short .fsiCheckBuffer
    20                                  %include "./Source/Kernel/FAT/fat.asm"
    21                              <1> ;---------------------------------------------------:
    22                              <1> ;                   KERNEL FUNCTIONS                :
    23                              <1> ;---------------------------------------------------:
    24                              <1> makeDIR:           ;ah = 39h
    25                              <1> removeDIR:         ;ah = 3Ah
    26                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    27                              <1> getCurrentDIR:     ;ah = 47h
    28                              <1> getSetFileDateTime:;ah = 57h
    29                              <1> trueName:          ;ah = 60h, get fully qualified name
    30 0000086A C3                  <1>     ret
    31                              <1> 
    32                              <1> 
    33                              <1> ;-----------------------------------:
    34                              <1> ;       File System routines        :
    35                              <1> ;-----------------------------------:
    36                              <1> getFATtype:
    37                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    38                              <1> ;Entry: rbp = DPB to ascertain FAT
    39                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    40 0000086B 53                  <1>     push rbx
    41 0000086C 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    42 0000086F B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    43 00000874 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    44 0000087A 730F                <1>     jae .exit
    45 0000087C FFC9                <1>     dec ecx     ;FAT 12 marker
    46 0000087E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    47 00000884 7205                <1>     jb .exit
    48 00000886 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    49                              <1> .exit:
    50 0000088B 5B                  <1>     pop rbx
    51 0000088C C3                  <1>     ret
    52                              <1> 
    53                              <1> clust2FATEntry:
    54                              <1> ;Converts a cluster number to a offset in the FAT
    55                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    56                              <1> ;        eax = Cluster number to look for
    57                              <1> ;Exit:   eax = Sector on disk of FAT 
    58                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    59                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    60 0000088D 53                  <1>     push rbx
    61 0000088E 55                  <1>     push rbp
    62 0000088F 488B2D(50C50300)    <1>     mov rbp, qword [workingDPB]
    63 00000896 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    64 00000899 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    65 0000089F 7318                <1>     jae .fat32
    66 000008A1 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    67 000008A7 7206                <1>     jb .fat12
    68                              <1> ;FAT16
    69 000008A9 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    70 000008AB 6A01                <1>     push qword 1
    71 000008AD EB0F                <1>     jmp short .common
    72                              <1> .fat12:
    73 000008AF 89C1                <1>     mov ecx, eax    ;ecx = eax
    74 000008B1 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    75 000008B3 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    76 000008B5 6A00                <1>     push qword 0
    77 000008B7 EB05                <1>     jmp short .common
    78                              <1> .fat32:
    79 000008B9 6A02                <1>     push qword 2
    80 000008BB C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    81                              <1> .common:
    82                              <1> ;eax has the FAToffset
    83 000008BE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    84 000008C2 31D2                <1>     xor edx, edx    ;edx = 0
    85 000008C4 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    86 000008C6 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    87 000008CA 01D8                <1>     add eax, ebx
    88 000008CC 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    89 000008CD 5D                  <1>     pop rbp
    90 000008CE 5B                  <1>     pop rbx
    91 000008CF C3                  <1>     ret
    92                              <1> 
    93                              <1> getStartSectorOfCluster:
    94                              <1> ;Input: eax = Cluster Number
    95                              <1> ;       rbp = dpb pointer
    96                              <1> ;Output: rax = Starting Sector number for cluster
    97                              <1> ;Gives the data sector we are at in the current cluster
    98                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    99 000008D0 51                  <1>     push rcx
   100 000008D1 09C0                <1>     or eax, eax ;Zero upper dword
   101 000008D3 4883E802            <1>     sub rax, 2
   102 000008D7 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   103 000008DA 48D3E0              <1>     shl rax, cl
   104 000008DD 31C9                <1>     xor ecx, ecx
   105 000008DF 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   106 000008E2 4801C8              <1>     add rax, rcx
   107                              <1>     ;rax now has the first sector of the current cluster
   108 000008E5 59                  <1>     pop rcx
   109 000008E6 C3                  <1>     ret
   110                              <1> 
   111                              <1> findFreeCluster:
   112                              <1> ;Walks the FAT to find a free cluster and returns the 
   113                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   114                              <1> ;Works on the workingDPB
   115                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   116 000008E7 53                  <1>     push rbx
   117 000008E8 51                  <1>     push rcx
   118 000008E9 52                  <1>     push rdx
   119 000008EA 57                  <1>     push rdi
   120 000008EB 55                  <1>     push rbp
   121 000008EC 488B2D(50C50300)    <1>     mov rbp, qword [workingDPB]
   122 000008F3 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   123 000008F7 488905(DDC50300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   124                              <1> ;Use ebp as sector counter
   125 000008FE 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   126                              <1> ;Get Sector Size in bytes in ebx
   127 00000901 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   128                              <1> ;Get FAT type
   129 00000905 E861FFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   130 0000090A 0F84B0000000        <1>     jz .fat12
   131 00000910 F6C101              <1>     test cl, 1
   132 00000913 756E                <1>     jnz .fat16
   133                              <1> ;FAT32 proceeds here
   134 00000915 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   135 00000918 66891D(E5C50300)    <1>     mov word [entries], bx
   136                              <1> .fat32Search:
   137 0000091F B102                <1>     mov cl, fatBuffer
   138 00000921 488B05(DDC50300)    <1>     mov rax, qword [tempSect]
   139 00000928 E8B7FDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   140 0000092D 7247                <1>     jc .exitFail
   141 0000092F 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   142 00000933 31C0                <1>     xor eax, eax
   143 00000935 0FB70D(E5C50300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   144 0000093C F2AF                <1>     repne scasd ;Look for the zero dword 
   145 0000093E 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   146 00000940 FFCA                <1>     dec edx ;Dec number of sectors left to search
   147 00000942 7438                <1>     jz .noFreeClusters
   148 00000944 48FF05(DDC50300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   149 0000094B EBD2                <1>     jmp short .fat32Search
   150                              <1> .fat32Found:
   151 0000094D 83EF04              <1>     sub edi, 4  ;edi is one dword past the entry
   152                              <1> .computeEntry:
   153 00000950 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   154 00000955 488B05(DDC50300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   155 0000095C 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   156 0000095F 0FB70D(E5C50300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   157 00000966 52                  <1>     push rdx
   158 00000967 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   159 0000096A 5A                  <1>     pop rdx
   160                              <1> ;rbx points to current buffer header
   161 0000096B 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   162 0000096F 4829D7              <1>     sub rdi, rdx
   163 00000972 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   164                              <1> .exit:
   165 00000975 F8                  <1>     clc
   166                              <1> .exitFail:      ;Keep carry flag
   167 00000976 5D                  <1>     pop rbp
   168 00000977 5F                  <1>     pop rdi
   169 00000978 5A                  <1>     pop rdx
   170 00000979 59                  <1>     pop rcx
   171 0000097A 5B                  <1>     pop rbx
   172 0000097B C3                  <1>     ret
   173                              <1> .noFreeClusters:
   174 0000097C B8FFFFFFFF          <1>     mov eax, -1 ;No free cluster marker
   175 00000981 EBF2                <1>     jmp short .exit
   176                              <1> .fat16:
   177 00000983 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   178 00000985 66891D(E5C50300)    <1>     mov word [entries], bx
   179                              <1> .fat16Search:
   180 0000098C B102                <1>     mov cl, fatBuffer
   181 0000098E 488B05(DDC50300)    <1>     mov rax, qword [tempSect]
   182 00000995 E84AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   183 0000099A 72DA                <1>     jc .exitFail
   184 0000099C 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   185 000009A0 31C0                <1>     xor eax, eax
   186 000009A2 0FB70D(E5C50300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   187 000009A9 F266AF              <1>     repne scasw ;Look for the zero word 
   188 000009AC 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   189 000009AE FFCA                <1>     dec edx ;Dec number of sectors left to search
   190 000009B0 74CA                <1>     jz .noFreeClusters
   191 000009B2 48FF05(DDC50300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   192 000009B9 EBD1                <1>     jmp short .fat16Search
   193                              <1> .fat16Found:
   194 000009BB 83EF02              <1>     sub edi, 2  ;edi is one word past the entry
   195 000009BE EB90                <1>     jmp short .computeEntry
   196                              <1> .fat12:
   197 000009C0 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   198 000009C2 D1E0                <1>     shl eax, 1  ;Multiply by 2
   199 000009C4 B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   200 000009C9 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   201 000009CA 31D2                <1>     xor edx, edx
   202 000009CC F7F1                <1>     div ecx
   203 000009CE 5A                  <1>     pop rdx
   204 000009CF 668905(E5C50300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   205                              <1>     ;The value is rounded down so we can read the next sector for the 
   206                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   207 000009D6 B102                <1>     mov cl, fatBuffer
   208 000009D8 488B05(DDC50300)    <1>     mov rax, qword [tempSect]
   209 000009DF E800FDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   210 000009E4 7290                <1>     jc .exitFail
   211 000009E6 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   212                              <1> .fat12SearchNewSector:
   213 000009EA 0FB70D(E5C50300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   214                              <1> .fat12Search:
   215 000009F1 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   216 000009F4 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   217 000009F9 744A                <1>     jz .fat12EntryFound
   218 000009FB 48FFC7              <1>     inc rdi ;Goto next byte
   219 000009FE FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   220 00000A00 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   221 00000A03 C1E804              <1>     shr eax, 4  ;Shift down by 4
   222 00000A06 743D                <1>     jz .fat12EntryFound
   223 00000A08 48FFC7              <1>     inc rdi ;Goto next entry
   224 00000A0B FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   225 00000A0D 75E2                <1>     jnz .fat12Search
   226                              <1> ;We arrive here when we are at the last entry in the sector
   227 00000A0F 48FF05(DDC50300)    <1>     inc qword [tempSect]    ;Get next Sector
   228 00000A16 488B05(DDC50300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   229 00000A1D B102                <1>     mov cl, fatBuffer
   230 00000A1F E8C0FCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   231 00000A24 0F824CFFFFFF        <1>     jc .exitFail
   232 00000A2A 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   233 00000A2D 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   234 00000A31 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   235 00000A33 C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   236 00000A36 740D                <1>     jz .fat12EntryFound ;Found a sector!
   237                              <1>     ;Empty cluster not found in sector
   238 00000A38 FFCA                <1>     dec edx ;Decrement sector count
   239 00000A3A 0F843CFFFFFF        <1>     jz .noFreeClusters
   240 00000A40 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   241 00000A43 EBA5                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   242                              <1> .fat12EntryFound:
   243 00000A45 E906FFFFFF          <1>     jmp .computeEntry   ;Unnecessary redirection
   244                              <1> 
   245                              <1> getDataSector:
   246                              <1> ;This function will request the sector of data in [currSectD].
   247                              <1> ;This call can only be used for DATA sectors.
   248                              <1> ;Preserves all registers
   249                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   250                              <1> ;        CF=CY => Critical error occurred and was FAILed
   251 00000A4A 50                  <1>     push rax
   252 00000A4B 53                  <1>     push rbx
   253 00000A4C 51                  <1>     push rcx
   254 00000A4D 488B05(F5C50300)    <1>     mov rax, qword [currSectD]  ;Get the disk sector number to read
   255 00000A54 BB01000000          <1>     mov ebx, dosBuffer
   256 00000A59 B908000000          <1>     mov ecx, dataBuffer 
   257 00000A5E 4885C0              <1>     test rax, rax
   258 00000A61 0F44CB              <1>     cmovz ecx, ebx  ;If sector 0, change to DOS buffer
   259                              <1> .getSectorRead:
   260 00000A64 E87BFCFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   261 00000A69 59                  <1>     pop rcx
   262 00000A6A 5B                  <1>     pop rbx
   263 00000A6B 58                  <1>     pop rax
   264 00000A6C C3                  <1>     ret
   265                              <1> 
   266                              <1> getNextSectorOfFile:
   267                              <1> ;This function will read the next sector for a file into a buffer.
   268                              <1> ;If the next sector to be read lives in the next cluster, it will update
   269                              <1> ; the file handle of the file being read/written to the new cluster
   270                              <1> ;
   271                              <1> ;Input: rbp = dpb pointer
   272                              <1> ;Output:
   273                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   274                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File
   275                              <1> ;       CF=CY => Critical error occurred and was FAILed
   276                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   277                              <1> ; next cluster and read first sector 
   278                              <1>     ;Check if we need to go to next cluster
   279 00000A6D 8A05(F4C50300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   280 00000A73 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   281 00000A76 7416                <1>     je .gotoNextCluster
   282                              <1>     ;Goto next sector in same cluster
   283 00000A78 FE05(F4C50300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   284 00000A7E 48FF05(F5C50300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   285 00000A85 488B05(F5C50300)    <1>     mov rax, qword [currSectD]
   286                              <1> .exitOK:
   287 00000A8C F8                  <1>     clc
   288                              <1> .exitFail:
   289 00000A8D C3                  <1>     ret
   290                              <1> .gotoNextCluster:
   291 00000A8E 8B05(EBC50300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   292 00000A94 E828000000          <1>     call walkFAT
   293 00000A99 72F2                <1>     jc .exitFail
   294                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   295 00000A9B 83F8FF              <1>     cmp eax, -1
   296 00000A9E 74EC                <1>     je .exitOK
   297                              <1> ;Update the new cluster and sector information
   298 00000AA0 8905(EBC50300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   299 00000AA6 FF05(E7C50300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   300 00000AAC E81FFEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   301 00000AB1 488905(F5C50300)    <1>     mov qword [currSectD], rax  ;Save it
   302 00000AB8 C605(F4C50300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   303 00000ABF EBCB                <1>     jmp short .exitOK
   304                              <1> 
   305                              <1> 
   306                              <1> walkFAT:
   307                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   308                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   309                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   310                              <1> ;       rbp = DPB number
   311                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   312                              <1> ;If carry set, getBuffer failed!
   313 00000AC1 53                  <1>     push rbx
   314 00000AC2 51                  <1>     push rcx
   315 00000AC3 52                  <1>     push rdx
   316 00000AC4 57                  <1>     push rdi
   317 00000AC5 55                  <1>     push rbp
   318 00000AC6 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   319 00000AC8 E8C0FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   320                              <1>     ;and FAT type in ecx
   321 00000ACD 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   322 00000AD1 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   323 00000AD3 51                  <1>     push rcx    ;Move FAT signature onto stack
   324 00000AD4 B102                <1>     mov cl, fatBuffer
   325 00000AD6 E809FCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   326 00000ADB 59                  <1>     pop rcx
   327 00000ADC 722B                <1>     jc .exitFail
   328                              <1>     ;Check if FAT 12, 16, 32
   329 00000ADE 85C9                <1>     test ecx, ecx
   330 00000AE0 742D                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   331 00000AE2 F7C101000000        <1>     test ecx, 1
   332 00000AE8 7410                <1>     jz .goToNextClusterFat32
   333                              <1>     ;Here we handle FAT16
   334 00000AEA 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   335 00000AEF 6683F8FF            <1>     cmp ax, -1
   336 00000AF3 7513                <1>     jne .exit
   337 00000AF5 0FBEC0              <1>     movsx eax, al
   338 00000AF8 EB0E                <1>     jmp short .exit
   339                              <1> .goToNextClusterFat32:
   340 00000AFA 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   341 00000AFE 83F8FF              <1>     cmp eax, -1
   342 00000B01 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   343 00000B03 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   344                              <1> .exit:
   345 00000B08 F8                  <1>     clc
   346                              <1> .exitFail:
   347 00000B09 5D                  <1>     pop rbp
   348 00000B0A 5F                  <1>     pop rdi
   349 00000B0B 5A                  <1>     pop rdx
   350 00000B0C 59                  <1>     pop rcx
   351 00000B0D 5B                  <1>     pop rbx
   352 00000B0E C3                  <1>     ret
   353                              <1> .gotoNextClusterFat12:
   354                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   355                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   356                              <1> 
   357 00000B0F 57                  <1>     push rdi    ;Save the cluster number on the stack
   358 00000B10 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   359 00000B13 FFC0                <1>     inc eax ;Get next sector
   360 00000B15 B102                <1>     mov cl, fatBuffer
   361 00000B17 E8C8FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   362 00000B1C 59                  <1>     pop rcx ;Return the cluster number in rcx
   363 00000B1D 72EA                <1>     jc .exitFail
   364                              <1>     ;rdi has first buffer header, rbx has second buffer header
   365                              <1>     ;rdx has offset into first header for entry
   366 00000B1F F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   367 00000B25 7422                <1>     jz .gotoNextClusterFat12Even
   368                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   369 00000B27 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   370 00000B2B 29D0                <1>     sub eax, edx
   371 00000B2D FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   372 00000B2F 750E                <1>     jnz .gotoNextClusterFat12NoCross
   373                              <1>     ;Boundary cross, build entry properly
   374 00000B31 31C0                <1>     xor eax, eax
   375 00000B33 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   376 00000B37 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   377 00000B3A C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   378 00000B3D EB14                <1>     jmp short .checkIfLastFAT12Cluster
   379                              <1> .gotoNextClusterFat12NoCross:
   380 00000B3F 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   381 00000B44 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   382 00000B47 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   383                              <1> .gotoNextClusterFat12Even:
   384                              <1>     ;Here the cluster is even and can't cross a sector boundary
   385 00000B49 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   386 00000B4E 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   387                              <1> .checkIfLastFAT12Cluster:
   388 00000B53 663DFF0F            <1>     cmp ax, 0FFFh
   389 00000B57 75AF                <1>     jne .exit
   390 00000B59 B8FFFFFFFF          <1>     mov eax, -1
   391 00000B5E EBA8                <1>     jmp .exit
    21                                  %include "./Source/Kernel/FAT/fileSearch.asm"
    22                              <1> ;Generic Find First and Find Next functions here
    23                              <1> 
    24                              <1> genericFindFirst:
    25 00000B60 C3                  <1>     ret
    26                              <1> genericFindNext:
    27 00000B61 C3                  <1>     ret
    22                                  %include "./Source/Kernel/CharDevs/charFunctions.asm"
    23                              <1> ;-----------------------------------------------------------------------:
    24                              <1> ;                  DOS default char functions live here                 :
    25                              <1> ;                                                                       :
    26                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    27                              <1> ;                                                                       :
    28                              <1> ;Rules for the naming of the DOS functions                              :
    29                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    30                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    31                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    32                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    33                              <1> ;                                                                       :
    34                              <1> ;-----------------------------------------------------------------------:
    35                              <1> 
    36                              <1> charIn_BE:     ;ah = 01h
    37                              <1> ;Return char that has been read and echoed in al
    38 00000B62 E826000000          <1>     call charIn_B
    39 00000B67 84C0                <1>     test al, al
    40 00000B69 7405                <1>     jz .stdireexit
    41 00000B6B E803000000          <1>     call charOut_B.skipEP    ;Output it to screen
    42                              <1> .stdireexit:
    43 00000B70 C3                  <1>     ret
    44                              <1> 
    45                              <1> charOut_B:       ;ah = 02h
    46                              <1> ;Bspace is regular cursor left, does not insert a blank
    47 00000B71 88D0                <1>     mov al, dl
    48                              <1> .skipEP:  ;Internal function Entry Point, with char in al
    49 00000B73 56                  <1>     push rsi
    50 00000B74 8805(48C50300)      <1>     mov byte [singleIObyt], al
    51 00000B7A 488B35(44C00300)    <1>     mov rsi, qword [vConPtr]   ;Get ptr to current con device header
    52 00000B81 E82F000000          <1>     call wByteSetup ;Puts in rbx the request block
    53 00000B86 E83B0B0000          <1>     call goDriver
    54 00000B8B 5E                  <1>     pop rsi
    55 00000B8C C3                  <1>     ret
    56                              <1> auxIn_B:        ;ah = 03h
    57                              <1> auxOut_B:       ;ah = 04h
    58                              <1> prnOut_B:       ;ah = 05h
    59                              <1> directConIO:    ;ah = 06h
    60                              <1> ;Only special thing about this function is that it doesn't wait for input.
    61                              <1> charIn:         ;ah = 07h
    62                              <1> ;Return char in al from STDIN
    63                              <1> charIn_B:       ;ah = 08h
    64                              <1> ;Return char in al from STDIN
    65 00000B8D E828000000          <1>     call rByteSetup
    66 00000B92 488B35(44C00300)    <1>     mov rsi, qword [vConPtr]   ;Get ptr to current con device header
    67 00000B99 E8280B0000          <1>     call goDriver
    68 00000B9E 8A05(48C50300)      <1>     mov al, byte [singleIObyt]  ;Get byte in al to return as return value
    69 00000BA4 C3                  <1>     ret
    70                              <1> printString_B:      ;ah = 09h
    71 00000BA5 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
    72                              <1> .ps0:
    73 00000BA8 AC                  <1>     lodsb   ;Get char in al and inc rsi
    74 00000BA9 3C24                <1>     cmp al, "$" ;End of string char?
    75 00000BAB 7407                <1>     je .ps1
    76 00000BAD E8C1FFFFFF          <1>     call charOut_B.skipEP
    77 00000BB2 EBF4                <1>     jmp short .ps0
    78                              <1> .ps1:
    79 00000BB4 C3                  <1>     ret
    80                              <1> buffCharInput_BE:  ;ah = 0Ah
    81                              <1> ;Works as the main input function for the vCon keyboard buffer
    82                              <1> checkStdinStatus:  ;ah = 0Bh
    83                              <1> ;Returns the status of the driver controlling vCon
    84                              <1> clearbuffDoFunc:   ;ah = 0Ch
    85                              <1> ;Clears any buffers and issues a console command
    86                              <1> ;------------------------
    87                              <1> ;  Primitive functions  :
    88                              <1> ;------------------------
    89                              <1> wByteSetup:
    90                              <1> ;Preserve all registers EXCEPT RBX= Request header pointer
    91 00000BB5 50                  <1>     push rax
    92 00000BB6 B408                <1>     mov ah, drvWRITE
    93 00000BB8 EB03                <1>     jmp short rByteSetup.ep
    94                              <1> rByteSetup:
    95                              <1> ;Preserve all registers EXCEPT RBX= Request header pointer
    96 00000BBA 50                  <1>     push rax
    97 00000BBB B404                <1>     mov ah, drvREAD
    98                              <1> .ep:
    99 00000BBD 51                  <1>     push rcx
   100 00000BBE 57                  <1>     push rdi
   101 00000BBF B901000000          <1>     mov ecx, 1
   102 00000BC4 488D3D(48C50300)    <1>     lea rdi, singleIObyt    ;Get address of symbol
   103 00000BCB E8520E0000          <1>     call secdReqCharIOReq   ;Make request, return rbx = Request header
   104 00000BD0 5F                  <1>     pop rdi
   105 00000BD1 59                  <1>     pop rcx
   106 00000BD2 58                  <1>     pop rax
   107 00000BD3 C3                  <1>     ret
   108                              <1> getCharFunHandle:
   109                              <1> ;Gets the handle pointer for a device. 
   110                              <1> ; If the handle is 0,1,2, if the handle is closed, then return vConPtr.
   111                              <1> ; If the handle is 3,4, if the handle is closed, then return nullDevPtr
   112                              <1> ; Else find SFT entry, check it is char device.
   113                              <1> ; If it is disk device, transfer control to readHandle function.
   114                              <1> ; Else, return device driver pointer for device.
   115                              <1> 
   116                              <1> ;Input: bx = File handle (zero extended to rbx)
   117                              <1> ;Output: CF=NC -> rdi = SFT entry 
   118                              <1> ;        CF=CY -> SFT closed, get default driver ptr
   119                              <1> 
   120 00000BD4 E8EC030000          <1>     call getSFTNdxFromHandle    ;Get a ptr to the SFT entry in rdi
   121 00000BD9 803FFF              <1>     cmp byte [rdi], -1  ;SFT entry closed?
   122 00000BDC 7502                <1>     jne .validDevice
   123 00000BDE F9                  <1>     stc ;Set carry flag
   124 00000BDF C3                  <1>     ret ;Return with al destroyed
   125                              <1> .validDevice:
   126 00000BE0 E82B040000          <1>     call derefSFTPtr.ok    ;bx has file handle, now get sft ptr in rdi
   127 00000BE5 C3                  <1>     ret
   128                              <1> testDeviceCharBlock:
   129                              <1> ;Input: rdi = SFT pointer
   130                              <1> ;Output: ZF=ZE => Block device, ZF=NZ => Char device
   131 00000BE6 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   132 00000BEC C3                  <1>     ret
   133                              <1> 
   134                              <1> ;------------------------
   135                              <1> ;   Utility functions   :
   136                              <1> ;------------------------
   137                              <1> checkBreakOnCon:
   138                              <1> ;Reads bytes from CON if there are any bytes to read and 
   139                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   140 00000BED 803D(64C30300)01    <1>     cmp byte [inDOS], 1
   141 00000BF4 7401                <1>     je checkBreak  ;Only check ^C on first entry to DOS
   142 00000BF6 C3                  <1>     ret
   143                              <1> checkBreak:
   144                              <1> ;Returns in al the keystroke that is available IF one is available
   145                              <1> ; or al=0 if no keystroke available
   146 00000BF7 53                  <1>     push rbx
   147 00000BF8 56                  <1>     push rsi
   148 00000BF9 488B35(44C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   149 00000C00 31C0                <1>     xor eax, eax
   150                              <1>     ;Place command code and a zero status word at the same time
   151 00000C02 B005                <1>     mov al, drvNONDESTREAD
   152 00000C04 8905(F0C30300)      <1>     mov dword [secdReqHdr + nonDestInNoWaitReqPkt.cmdcde], eax
   153                              <1>     ;Place the packet size in the hdrlen field
   154 00000C0A B00E                <1>     mov al, nonDestInNoWaitReqPkt_size
   155 00000C0C 8805(EEC30300)      <1>     mov byte [secdReqHdr + nonDestInNoWaitReqPkt.hdrlen], al
   156 00000C12 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   157 00000C19 E8A80A0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   158                              <1>     ;Check if the busy bit is set (No keystroke available)
   159 00000C1E 66F705(F1C30300)00- <1>     test word [secdReqHdr + nonDestInNoWaitReqPkt.status], drvBsyStatus
   159 00000C26 02                  <1>
   160 00000C27 7403                <1>     jz .charFound
   161                              <1> .exit:
   162 00000C29 5E                  <1>     pop rsi
   163 00000C2A 5B                  <1>     pop rbx
   164 00000C2B C3                  <1>     ret
   165                              <1> .charFound:
   166                              <1> ;Keystroke available, proceed
   167 00000C2C 8A05(FBC30300)      <1>     mov al, byte [secdReqHdr + nonDestInNoWaitReqPkt.retbyt]    ;Get char
   168 00000C32 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   169 00000C34 75F3                <1>     jne .exit   ;If not equal exit
   170                              <1> ;Now we pull the char out of the buffer
   171 00000C36 31C0                <1>     xor eax, eax
   172 00000C38 B004                <1>     mov al, drvREAD ;Read command
   173 00000C3A 8905(F0C30300)      <1>     mov dword [secdReqHdr + ioReqPkt.cmdcde], eax
   174                              <1>     ;Place packet size
   175 00000C40 C605(EEC30300)2A    <1>     mov byte [secdReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   176                              <1>     ;Place pointers and number of chars
   177 00000C47 C705(04C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   177 00000C4F 0000                <1>
   178 00000C51 488D05(48C50300)    <1>     lea rax, singleIObyt    ;IO Byte buffer
   179 00000C58 488905(FCC30300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rax
   180 00000C5F E8620A0000          <1>     call goDriver   ;RSI and RBX as before
   181 00000C64 C3                  <1>     ret ;Stopgap right now, do nothing
   182                              <1> 
   183                              <1> 
   184                              <1> swapVConDriver:
   185                              <1> ;Sets up the vCon to use the alternative device driver 
   186 00000C65 57                  <1>     push rdi
   187 00000C66 E810000000          <1>     call vConUseAlt
   188 00000C6B 488B3D(CBC50300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   189 00000C72 48893D(60C50300)    <1>     mov qword [vConOldSFT], rdi ;Save the SFT ptr in var
   190 00000C79 5F                  <1>     pop rdi
   191 00000C7A C3                  <1>     ret
   192                              <1> ;These functions set/clear whether vCon should use vConOldSFT or vConPtr
   193                              <1> ;If vConDrvFlg = 1 => Use vConOldSFT
   194                              <1> ;If vConDrvFlg = 0 => Use vConPtr
   195                              <1> vConUseAlt:
   196 00000C7B C605(EBC30300)01    <1>     mov byte [vConDrvFlg], 1    ;Set to use alternative driver
   197 00000C82 C3                  <1>     ret
   198                              <1> vConUseDef:
   199 00000C83 C605(EBC30300)00    <1>     mov byte [vConDrvFlg], 0    ;Clear to use default driver
   200 00000C8A C3                  <1>     ret
    23                                  %include "./Source/Kernel/CharDevs/dateTimeFunctions.asm"
    24                              <1> ;Major kernel date time functions and subroutines
    25                              <1> 
    26                              <1> getDate:           ;ah = 2Ah
    27                              <1> setDate:           ;ah = 2Bh
    28                              <1> getTime:           ;ah = 2Ch
    29                              <1> setTime:           ;ah = 2Dh
    30 00000C8B C3                  <1>     ret
    24                                  %include "./Source/Kernel/FileIO/fcbFunctions.asm"
    25                              <1> openFileFCB:       ;ah = 0Fh
    26                              <1> closeFileFCB:      ;ah = 10h
    27                              <1> findFirstFileFCB:  ;ah = 11h
    28                              <1> findNextFileFCB:   ;ah = 12h
    29                              <1> deleteFileFCB:     ;ah = 13h
    30                              <1> sequentialReadFCB: ;ah = 14h
    31                              <1> sequentialWriteFCB:;ah = 15h
    32                              <1> createFileFCB:     ;ah = 16h
    33                              <1> renameFileFCB:     ;ah = 17h
    34 00000C8C C3                  <1>     ret
    35                              <1> setDTA:            ;ah = 1Ah
    36                              <1> ;Called with:
    37                              <1> ;   rdx = Pointer to the new default DTA
    38 00000C8D 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
    39 00000C94 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    40 00000C98 488915(73C30300)    <1>     mov qword [currentDTA], rdx
    41 00000C9F C3                  <1>     ret
    42                              <1> randomReadFCB:     ;ah = 21h
    43                              <1> randomWriteFCB:    ;ah = 22h
    44                              <1> getFileSizeFCB:    ;ah = 23h
    45                              <1> setRelRecordFCB:   ;ah = 24h
    46                              <1> randBlockReadFCB:  ;ah = 27h
    47                              <1> randBlockWriteFCB: ;ah = 28h
    48                              <1> parseFilenameFCB:  ;ah = 29h
    49 00000CA0 C3                  <1>     ret
    50                              <1> getDTA:            ;ah = 2Fh
    51 00000CA1 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
    52 00000CA8 488B1D(73C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    53 00000CAF 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    54 00000CB3 C3                  <1>     ret
    25                                  %include "./Source/Kernel/FileIO/handleFunctions.asm"
    26                              <1> ;-----------------------------------:
    27                              <1> ;    File Handle Kernel routines    :
    28                              <1> ;-----------------------------------:
    29                              <1> 
    30                              <1> createFileHdl:     ;ah = 3Ch, handle function
    31 00000CB4 C3                  <1>     ret
    32                              <1> openFileHdl:       ;ah = 3Dh, handle function
    33 00000CB5 C3                  <1>     ret
    34                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    35 00000CB6 C3                  <1>     ret
    36                              <1> readFileHdl:       ;ah = 3Fh, handle function
    37 00000CB7 488D3590000000      <1>     lea rsi, readBytes
    38                              <1> .common:
    39 00000CBE E821030000          <1>     call getSFTPtr ;Get SFT ptr in rdi (if file is r/w-able from machine)
    40 00000CC3 7221                <1>     jb .error
    41 00000CC5 E812020000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    42 00000CCA FF35(73C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    43 00000CD0 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    44 00000CD2 8F05(73C30300)      <1>     pop qword [currentDTA]
    45 00000CD8 720C                <1>     jb .errorFromDataTransfer
    46 00000CDA E8660D0000          <1>     call getUserRegs
    47 00000CDF 890E                <1>     mov dword [rsi + callerFrame.rax], ecx  ;Put actual number of bytes tfrd
    48 00000CE1 806658FE            <1>     and byte [rsi + callerFrame.flags], 0FEh    ;Clear CF
    49 00000CE5 C3                  <1>     ret
    50                              <1> ;Temporary Error handler, simply return with CF set
    51                              <1> .error:
    52                              <1> .errorFromDataTransfer:
    53 00000CE6 E85A0D0000          <1>     call getUserRegs
    54 00000CEB 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    55 00000CEF C3                  <1>     ret
    56                              <1> writeFileHdl:      ;ah = 40h, handle function
    57 00000CF0 488D35AC010000      <1>     lea rsi, writeBytes
    58 00000CF7 EBC5                <1>     jmp readFileHdl.common
    59                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    60 00000CF9 C3                  <1>     ret
    61                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    62                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    63 00000CFA E8E5020000          <1>     call getSFTPtr
    64 00000CFF 7326                <1>     jnc .sftValid
    65                              <1>     ;Error code and exit
    66                              <1>     ;al (eax) has error code for bad file handle
    67 00000D01 668905(67C30300)    <1>     mov word [errorExCde], ax
    68                              <1> .exitBad:
    69 00000D08 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk  ;Unknown Locus
    70 00000D0F C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Reinput data
    71 00000D16 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd
    72 00000D1D E8230D0000          <1>     call getUserRegs    ;Get user regs in rsi
    73 00000D22 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    74 00000D26 C3                  <1>     ret
    75                              <1> .sftValid:
    76 00000D27 3C03                <1>     cmp al, 3
    77 00000D29 7206                <1>     jb .validFunction
    78                              <1>     ;Error code and exit
    79 00000D2B 66B80100            <1>     mov ax, errInvFnc
    80 00000D2F EBD7                <1>     jmp short .exitBad
    81                              <1> .validFunction:
    82 00000D31 3C01                <1>     cmp al, 1
    83 00000D33 7713                <1>     ja .seekend
    84 00000D35 7203                <1>     jb .seekset
    85                              <1> ;Here we are at seekcur, seek from current (signed)
    86 00000D37 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    87                              <1> .seekset:
    88                              <1> ;Seek from the start (unsigned)
    89 00000D3A 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    90 00000D3D E8030D0000          <1>     call getUserRegs    ;Get user regs in rsi
    91 00000D42 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
    92 00000D45 30C0                <1>     xor al, al  ;Return OK!
    93 00000D47 C3                  <1>     ret
    94                              <1> .seekend:
    95                              <1> ;Here we are at seekend, seek from end (signed)
    96 00000D48 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
    97 00000D4B EBED                <1>     jmp short .seekset
    98                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    99                              <1> ioctrl:            ;ah = 44h, handle function
   100                              <1> duplicateHandle:   ;ah = 45h, handle function
   101                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   102                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   103                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   104                              <1> renameFile:        ;ah = 56h
   105                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   106                              <1> createNewFile:     ;ah = 5Bh
   107                              <1> lockUnlockFile:    ;ah = 5Ch
   108                              <1> setHandleCount:    ;ah = 67h
   109                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   110 00000D4D C3                  <1>     ret
   111                              <1> ;-----------------------------------:
   112                              <1> ;       Main File IO Routines       :
   113                              <1> ;-----------------------------------:
   114                              <1> readBytes:
   115                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   116                              <1> ;Input: ecx = Number of bytes to read
   117                              <1> ;Output: ecx = Number of bytes read
   118                              <1> ;Number of bytes read 
   119 00000D4E E891010000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   120 00000D53 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   121 00000D57 240F                <1>     and al, 0Fh ;Eliminate except access mode
   122 00000D59 3C01                <1>     cmp al, WriteAccess
   123 00000D5B 750E                <1>     jne .readable
   124 00000D5D B805000000          <1>     mov eax, errAccDen
   125 00000D62 668905(67C30300)    <1>     mov word [errorExCde], ax
   126 00000D69 F9                  <1>     stc
   127 00000D6A C3                  <1>     ret ;Exit with error code 
   128                              <1> .readable:
   129 00000D6B E8B5010000          <1>     call setupVarsForTransfer
   130 00000D70 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   131 00000D73 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   132 00000D79 740A                <1>     jz .notRedir
   133 00000D7B B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   134 00000D80 CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   135 00000D82 C3                  <1>     ret
   136                              <1> .exitOk:
   137 00000D83 F8                  <1>     clc
   138 00000D84 C3                  <1>     ret
   139                              <1> .notRedir:
   140 00000D85 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   141 00000D8B 7510                <1>     jnz readCharDev
   142 00000D8D E8630F0000          <1>     call dosCrit1Enter
   143 00000D92 E805010000          <1>     call readDiskFile
   144 00000D97 E8630F0000          <1>     call dosCrit1Exit
   145 00000D9C C3                  <1>     ret
   146                              <1> readCharDev:
   147                              <1> ;rdi points to sft for char dev to read
   148                              <1> ;ecx has the number of bytes to transfer
   149                              <1> ;Vars have been set up and DTA has the transfer address
   150                              <1> ;Returns in ecx, the actual bytes transferred
   151 00000D9D C605(66C30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   152 00000DA4 488B3D(73C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   153 00000DAB 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   154 00000DAF F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   155 00000DB2 0F840D010000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   156 00000DB8 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   157 00000DBB 7507                <1>     jnz .notNul
   158                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   159                              <1>     ;NUL never transfers bytes 
   160 00000DBD 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   161 00000DBF E901010000          <1>     jmp rwExitOk    ;Goto exit
   162                              <1> .notNul:
   163 00000DC4 F6C320              <1>     test bl, charDevBinary
   164 00000DC7 750A                <1>     jnz .binary
   165                              <1>     ;Here if the device is in ASCII mode
   166 00000DC9 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   167 00000DCC 7457                <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   168                              <1> .consoleInput:
   169                              <1>     ;Console input here
   170 00000DCE E892FEFFFF          <1>     call swapVConDriver    ;Prepare CON Useage!
   171                              <1>     
   172                              <1> 
   173                              <1> .binary:
   174                              <1>     ;Setup registers for transfer
   175 00000DD3 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   176 00000DD6 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   177                              <1>     ;ecx has the number of bytes to transfer directly
   178 00000DD9 E8980B0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   179 00000DDE 488B35(50C50300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   180 00000DE5 E8DC080000          <1>     call goDriver   ;Make the request
   181 00000DEA 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   182 00000DED 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   183 00000DF4 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   184 00000DFA 7412                <1>     jz .binNoError
   185                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   186 00000DFC B486                <1>     mov ah, 86h ;Char device, data error signature
   187 00000DFE E8E0070000          <1>     call binaryCharDevErr   ;ah = has part of the error 
   188                              <1>     ;al now has the response
   189                              <1>     ;Cannot return Abort as Abort returns to command interpreter through DOS
   190 00000E03 3C00                <1>     cmp al, critIgnore
   191 00000E05 7407                <1>     je .binNoError ;Simply proceed as normal
   192 00000E07 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   193 00000E0A 3C03                <1>     cmp al, critFail
   194 00000E0C 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   195                              <1>     ;Fallthrough here for fail!
   196                              <1> .failExit:
   197                              <1>     
   198                              <1> .binNoError:
   199                              <1>     ;Get number of bytes transferred into 
   200 00000E0E 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   201 00000E14 F7D8                <1>     neg eax ;make it into -eax
   202 00000E16 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   203                              <1>     ;ecx now has bytes left to transfer
   204 00000E1A 50                  <1>     push rax    ;Save value on stack
   205 00000E1B 31C0                <1>     xor eax, eax ;Set ZF
   206 00000E1D FFC0                <1>     inc eax ;Clear ZF
   207 00000E1F 58                  <1>     pop rax ;Get back the original value
   208 00000E20 E9A0000000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   209                              <1> .generalASCII:
   210                              <1>     ;ecx has bytes to transfer here
   211                              <1>     ;Setup registers for transfer
   212 00000E25 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   213 00000E28 51                  <1>     push rcx
   214 00000E29 B901000000          <1>     mov ecx, 1  ;Get one char
   215 00000E2E 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   216 00000E31 E8400B0000          <1>     call primReqReadSetup   ;Setup request
   217 00000E36 59                  <1>     pop rcx
   218                              <1>     ;rbx now has request header ptr
   219 00000E37 488B35(50C50300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   220                              <1> .asciiReadChar:
   221 00000E3E 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   222 00000E41 E8A7FDFFFF          <1>     call checkBreakOnCon    ;Check we don't have a ^C pending on CON
   223 00000E46 E87B080000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   224 00000E4B 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   225 00000E52 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   226 00000E58 741E                <1>     jz .asciiNoError
   227 00000E5A E87F070000          <1>     call asciiCharDevErr    ;Call Int 44h
   228                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   229 00000E5F C705(2EC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   229 00000E67 0000                <1>
   230 00000E69 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   231 00000E6C 3C03                <1>     cmp al, critFail
   232 00000E6E 749E                <1>     je .failExit
   233 00000E70 3C01                <1>     cmp al, critRetry
   234 00000E72 74CA                <1>     je .asciiReadChar
   235                              <1>     ;Ignore here, pretend NULL CHAR was read
   236 00000E74 30C0                <1>     xor al, al
   237 00000E76 EB0E                <1>     jmp short .asciiIgnoreEP
   238                              <1> .asciiNoError:
   239                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   240                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   241                              <1> ;Preserve RBX, RSI
   242                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   243 00000E78 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   244 00000E7B 833D(2EC40300)01    <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   245 00000E82 7541                <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   246 00000E84 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   247                              <1> .asciiIgnoreEP:
   248 00000E86 48FF05(26C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   249 00000E8D 48FFC7              <1>     inc rdi ;Also advance register pointer
   250 00000E90 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   251 00000E92 7431                <1>     je rwExitOk
   252 00000E94 3C0D                <1>     cmp al, CR  ;Was this char CR?
   253 00000E96 E0A6                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   254                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   255 00000E98 FEC0                <1>     inc al  ;make ZF=NZ
   256 00000E9A EB29                <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   257                              <1>     
   258                              <1> readDiskFile:
   259 00000E9C C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   260                              <1> 
   261                              <1> writeBytes:
   262                              <1> ;Writes the bytes from the user buffer
   263 00000EA3 E83C000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   264 00000EA8 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   265 00000EAC 240F                <1>     and al, 0Fh ;Eliminate except access mode
   266 00000EAE 3C00                <1>     cmp al, ReadAccess
   267 00000EB0 750E                <1>     jne .writeable
   268 00000EB2 B805000000          <1>     mov eax, errAccDen
   269 00000EB7 668905(67C30300)    <1>     mov word [errorExCde], ax
   270 00000EBE F9                  <1>     stc
   271 00000EBF C3                  <1>     ret ;Exit with error code 
   272                              <1> .writeable:
   273 00000EC0 E860000000          <1>     call setupVarsForTransfer
   274                              <1> 
   275                              <1> rwExitOk:
   276                              <1> ;Input: ecx = Number of bytes left to transfer!
   277                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   278 00000EC5 890D(13C60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   279 00000ECB 7509                <1>     jnz .skipbitClear
   280 00000ECD E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   281                              <1>     ;The disk transfer must've flushed by now. 
   282 00000ED2 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokDevNotFlush|charDevNoEOF) ;OR
   283                              <1>     ;Next char dev read should give EOF.
   284                              <1> .skipbitClear:  ;Or skip that entirely
   285 00000ED6 E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   286 00000EDB C3                  <1>     ret
   287                              <1> rwExitBad:
   288                              <1> ;-----------------------------------:
   289                              <1> ;        File Handle routines       :
   290                              <1> ;-----------------------------------:
   291                              <1> 
   292                              <1> setCurrentSFT:
   293                              <1> ;Set the pointer in rdi as current SFT 
   294 00000EDC 48893D(CBC50300)    <1>     mov qword [currentSFT], rdi
   295 00000EE3 C3                  <1>     ret
   296                              <1> getCurrentSFT:
   297                              <1> ;Get the current SFT pointer in rdi
   298 00000EE4 488B3D(CBC50300)    <1>     mov rdi, qword [currentSFT]
   299 00000EEB C3                  <1>     ret
   300                              <1> updateCurrentSFT:
   301                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   302                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   303 00000EEC 57                  <1>     push rdi
   304 00000EED 488B3D(CBC50300)    <1>     mov rdi, qword [currentSFT]
   305 00000EF4 8B0D(0FC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   306 00000EFA 2B0D(13C60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   307                              <1>     ;ecx has bytes transferred
   308 00000F00 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   309 00000F06 751A                <1>     jnz .exit
   310 00000F08 50                  <1>     push rax
   311 00000F09 8B05(EBC50300)      <1>     mov eax, dword [currClustD]
   312 00000F0F 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   313 00000F12 8B05(E7C50300)      <1>     mov eax, dword [currClustF]
   314 00000F18 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   315 00000F1B 58                  <1>     pop rax
   316 00000F1C 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   317 00000F1F 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   318                              <1> .exit:
   319 00000F22 5F                  <1>     pop rdi
   320 00000F23 F8                  <1>     clc
   321 00000F24 C3                  <1>     ret
   322                              <1> setupVarsForTransfer:
   323                              <1> ;Computes the actual bytes to be transferred and 
   324                              <1> ; sets up internal variables for the transfer. 
   325                              <1> ;Works for both reading and writing
   326                              <1> ;Input: ecx = User desired Bytes to transfer
   327                              <1> ;       rdi = SFT pointer for the file
   328                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   329                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   330                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   331                              <1> ;
   332                              <1> ;Note: Does not account for a FULL disk. When writing,
   333                              <1> ; if the disk will get full as a result of the write,
   334                              <1> ; stop at the last byte before the transfer. If the 
   335                              <1> ; file pointer is past the last free byte, write 0
   336 00000F25 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   337 00000F29 488935(50C50300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   338 00000F30 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   339 00000F33 8905(FFC50300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   340 00000F39 890D(0FC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   341 00000F3F 890D(13C60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   342 00000F45 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   343 00000F4B 7402                <1>     jz setupVarsForDiskTransfer
   344 00000F4D F8                  <1>     clc
   345 00000F4E C3                  <1>     ret ;Else just exit here
   346                              <1> setupVarsForDiskTransfer:
   347                              <1> ;Extension of the above, but for Disk files only
   348                              <1> ;Input: ecx = User desired Bytes to transfer
   349                              <1> ;       rdi = SFT pointer for the file
   350                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   351 00000F4F 488B2D(50C50300)    <1>     mov rbp, qword [workingDPB] ;Get the workingDPB (the same as qPtr)
   352 00000F56 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   353 00000F59 881D(4FC50300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   354 00000F5F 8B05(FFC50300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   355 00000F65 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   356 00000F69 31D2                <1>     xor edx, edx    ;Zero rdx
   357 00000F6B F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   358                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   359                              <1>     ;edx has the offset into that sector
   360 00000F6D 8905(F0C50300)      <1>     mov dword [currSectF], eax
   361 00000F73 668915(FDC50300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   362 00000F7A 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   363 00000F7C 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   364 00000F7F 8805(F4C50300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   365 00000F85 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   366 00000F87 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   367 00000F8A D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   368 00000F8C 8915(E7C50300)      <1>     mov dword [currClustF], edx ;Save in var
   369 00000F92 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   370 00000F94 F8                  <1>     clc
   371 00000F95 C3                  <1>     ret
   372                              <1> 
   373                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   374                              <1> ;Return a pointer to the SFT entry in rdi
   375                              <1> ;Input: rbx = Valid SFT ndx number (word)
   376                              <1> ;Output: rdi = SFT pointer
   377 00000F96 488B3D(34C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   378                              <1> .walk:
   379 00000F9D 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   380 00000FA1 720F                <1>     jb .thisTable
   381 00000FA3 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   382 00000FA7 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   383 00000FAA 4883FFFF            <1>     cmp rdi, -1
   384 00000FAE 75ED                <1>     jne .walk
   385 00000FB0 F9                  <1>     stc
   386 00000FB1 C3                  <1>     ret
   387                              <1> .thisTable:
   388 00000FB2 50                  <1>     push rax
   389 00000FB3 52                  <1>     push rdx
   390 00000FB4 B84F000000          <1>     mov eax, sft_size
   391 00000FB9 F7E3                <1>     mul ebx
   392 00000FBB 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   393 00000FBE 5A                  <1>     pop rdx
   394 00000FBF 58                  <1>     pop rax
   395 00000FC0 4883C70A            <1>     add rdi, sfth_size  ;Go past the header
   396 00000FC4 C3                  <1>     ret
   397                              <1> 
   398                              <1> getSFTNdxFromHandle:    ;Int 4Fh AX=1220h
   399                              <1> ;Return a zero extended value in rdi for the SFT entry
   400                              <1> ;Input: bx = JFT handle
   401                              <1> ;Output: CF=NC => rdi = SFT ndx
   402                              <1> ;        CF=CY => al = Error code, Fail
   403                              <1> ;rbx destroyed
   404 00000FC5 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   405 00000FC8 663B1D(91C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   406 00000FCF 7204                <1>     jb .ok
   407 00000FD1 B006                <1>     mov al, errBadHdl
   408 00000FD3 F9                  <1>     stc
   409 00000FD4 C3                  <1>     ret
   410                              <1> .ok:
   411 00000FD5 488B3D(7BC30300)    <1>     mov rdi, qword [currentPSP]
   412 00000FDC 480FB67C1F2A        <1>     movzx rdi, byte [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   413 00000FE2 F8                  <1>     clc
   414 00000FE3 C3                  <1>     ret
   415                              <1> getSFTPtr:
   416                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   417                              <1> ;Input: bx = JFT handle
   418                              <1> ;Output: CF=NC: rdi = SFT pointer
   419                              <1> ;        CF=CY: Error, ax=Error code
   420                              <1> ;    call derefSFTPtr
   421                              <1> ;    jnc .ok
   422                              <1> ;    ret ;Error return with CF=CY
   423                              <1> ;.ok:
   424                              <1> ;    push rax
   425                              <1> ;    movzx eax, word [machineNum]    ;Get the machine number from SDA
   426                              <1> ;    cmp ax, word [rdi + sft.wMachNum]   ;Compare to SFT machine number
   427                              <1> ;    pop rax
   428                              <1> ;    je .exit    ;If the file belongs to this machine, proceed!
   429                              <1> ;    mov al, errBadHdl   ;Error code
   430                              <1> ;    stc ;Reset CF
   431                              <1> ;.exit:
   432                              <1> ;    ret
   433 00000FE4 E817000000          <1>     call derefSFTPtr
   434                              <1>     retc    ;Return if carry
    89                              <2> cret c
    67 00000FE9 7301                <3>  j%-1 %%a
    68                              <3>  return
    63 00000FEB C3                  <4>  ret
    69                              <3> %%a:
   435 00000FEC 50                  <1>     push rax
   436 00000FED 0FB705(9FC30300)    <1>     movzx eax, word [machineNum]
   437 00000FF4 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
   438 00000FF8 58                  <1>     pop rax
   439                              <1>     rete
    81                              <2> cret e
    67 00000FF9 7501                <3>  j%-1 %%a
    68                              <3>  return
    63 00000FFB C3                  <4>  ret
    69                              <3> %%a:
   440 00000FFC B006                <1>     mov al, errBadHdl   ;Error code
   441 00000FFE F9                  <1>     stc         ;Reset CF
   442                              <1>     return
    63 00000FFF C3                  <2>  ret
   443                              <1> 
   444                              <1> derefSFTPtr:
   445                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   446                              <1> ;Input: bx = File handle
   447                              <1> ;Output: CF=NC: rdi = SFT pointer
   448                              <1> ;        CF=CY: Error, ax=Error code
   449 00001000 E8C0FFFFFF          <1>     call getSFTNdxFromHandle    ;Get the ptr to the value in rdi
   450 00001005 7205                <1>     jb .fail
   451 00001007 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   452 0000100A 7504                <1>     jne .ok
   453                              <1> .fail:
   454 0000100C B006                <1>     mov al, errBadHdl
   455 0000100E F9                  <1>     stc
   456 0000100F C3                  <1>     ret
   457                              <1> .ok:
   458 00001010 53                  <1>     push rbx    ;Preserve the JFT handle
   459 00001011 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   460 00001014 E87DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   461 00001019 5B                  <1>     pop rbx 
   462 0000101A C3                  <1>     ret
   463                              <1> 
   464                              <1> getBytesTransferred:
   465 0000101B 8B0D(13C60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   466 00001021 F7D9                <1>     neg ecx ;Multiply by -1
   467 00001023 030D(0FC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   468 00001029 C3                  <1>     ret ;Return bytes transferred in ecx
   469                              <1> 
   470                              <1> readWriteBytesBinary:
   471                              <1> ;Input: ecx = number of bytes to read in Binary mode
   472                              <1> ;       rdi = Points to where in caller buffer to place bytes
   473                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   474                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   475                              <1> ;Preserve rcx so we know how many bytes transferred
   476                              <1> ;Update the currByteA variable
   477                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   478 0000102A 51                  <1>     push rcx
   479 0000102B F605(49C50300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   480 00001032 7403                <1>     jz .noSwap
   481 00001034 4887FE              <1>     xchg rdi, rsi
   482                              <1> .noSwap:
   483 00001037 F3A4                <1>     rep movsb
   484 00001039 59                  <1>     pop rcx
   485 0000103A 010D(FFC50300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   486 00001040 290D(13C60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   487 00001046 C3                  <1>     ret
    26                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    27                              <1> ;Memory related functions
    28                              <1> 
    29                              <1> ;-----------------------------------:
    30                              <1> ;  Memory related Kernel routines   :
    31                              <1> ;-----------------------------------:
    32                              <1> allocateMemory:    ;ah = 48h
    33                              <1> ;Input: ebx = Number of paragraphs requested
    34                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    35                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    36 00001047 31D2                <1>     xor edx, edx
    37                              <1>     ;Clear the pointers
    38 00001049 488915(A1C30300)    <1>     mov qword [firstMCB], rdx
    39 00001050 488915(A9C30300)    <1>     mov qword [bestMCB], rdx
    40 00001057 488915(B1C30300)    <1>     mov qword [lastMCB], rdx
    41 0000105E 31ED                <1>     xor ebp, ebp    
    42 00001060 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    43 00001062 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    44                              <1> .walk:
    45 00001069 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    46 0000106C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    47 0000106F 7409                <1>     je .walk1
    48 00001071 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    49 00001074 0F85E7040000        <1>     jne memSysHalt
    50                              <1> .walk1:
    51                              <1>     ;Here if valid but not the last block
    52 0000107A 48837E0100          <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 0000107F 7579                <1>     jne .walk2
    54                              <1>     ;Here we consolidate adjacent free blocks if there are any
    55                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    56                              <1>     ;End consolidation at first non free block or at last block in chain
    57 00001081 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    58 00001084 7441                <1>     je .det0    ;Determine if this block is useful
    59 00001086 31C9                <1>     xor ecx, ecx
    60 00001088 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    61 0000108B 4883C610            <1>     add rsi, mcb.program
    62                              <1> .cons0:
    63 0000108F 48C1E104            <1>     shl rcx, 4
    64 00001093 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    65 00001096 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    66 00001099 7409                <1>     je .cons1
    67 0000109B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    68 0000109E 0F85BD040000        <1>     jne memSysHalt 
    69                              <1> .cons1:
    70 000010A4 48837E0100          <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    71 000010A9 751C                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    72                              <1>     ;Here rsi, points to a free block, add it to rdi
    73 000010AB 31C9                <1>     xor ecx, ecx
    74 000010AD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    75 000010B0 83C101              <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    76 000010B3 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    77 000010B6 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    78 000010B8 31D2                <1>     xor edx, edx
    79 000010BA 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    80 000010BD 48895608            <1>     mov qword [rsi + 8], rdx
    81 000010C1 3C5A                <1>     cmp al, mcbMarkEnd
    82 000010C3 75CA                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    83                              <1>     ;Here we deal with if the block was the last one 
    84 000010C5 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    85                              <1> .det0:  ;Now determine if pointer in rdi is useful
    86 000010C7 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    87                              <1> ;ebx must be less than the arena size for the arena to be useful!
    88 000010CA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    89 000010CD 39D9                <1>     cmp ecx, ebx
    90 000010CF 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    91 000010D1 488935(B1C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    92 000010D8 488B05(A1C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    93 000010DF 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    94 000010E2 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    95 000010E4 488935(A1C30300)    <1>     mov qword [firstMCB], rsi
    96                              <1> .det1:
    97                              <1>     ;Now test for best fit.
    98 000010EB 29D9                <1>     sub ecx, ebx    ;Block - ebx
    99 000010ED 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   100 000010EF 7209                <1>     jb .walk2
   101 000010F1 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   102 000010F3 488935(A9C30300)    <1>     mov qword [bestMCB], rsi
   103                              <1> .walk2:
   104 000010FA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   105 000010FD 7415                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   106 000010FF 31C9                <1>     xor ecx, ecx
   107 00001101 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   108 00001104 48C1E104            <1>     shl rcx, 4
   109 00001108 4883C610            <1>     add rsi, mcb.program
   110 0000110C 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   111 0000110F E955FFFFFF          <1>     jmp .walk
   112                              <1> .allocate:
   113                              <1>     ;Allocation fails IF the pointer is the null pointer
   114 00001114 803D(2FC30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   115 0000111B 7258                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   116                              <1>     ;Fall thru if last fit
   117 0000111D 488B35(B1C30300)    <1>     mov rsi, qword [lastMCB]
   118 00001124 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   119 00001127 0F84B9000000        <1>     jz .allocFail
   120 0000112D 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   121 0000112F C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   122 00001132 31C9                <1>     xor ecx, ecx
   123 00001134 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   124 00001137 29D9                <1>     sub ecx, ebx
   125 00001139 83E901              <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   126 0000113C 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   127 0000113F 48C1E104            <1>     shl rcx, 4
   128 00001143 4883C610            <1>     add rsi, mcb.program
   129 00001147 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   130 0000114A 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   131 0000114C 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   132 0000114F 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   133 00001156 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   134 0000115A 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   135 00001161 4883C610            <1>     add rsi, mcb.program    ;Point to program area
   136 00001165 4889F0              <1>     mov rax, rsi
   137 00001168 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   138 0000116B 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   139 0000116F E8C5030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   140 00001174 C3                  <1>     ret
   141                              <1> .bfCommon:
   142 00001175 488B35(A1C30300)    <1>     mov rsi, qword [firstMCB]
   143 0000117C 803D(2FC30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   144 00001183 480F4435(A9C30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   145 0000118B 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   146 0000118E 7456                <1>     jz .allocFail
   147 00001190 8A06                <1>     mov al, byte [rsi + mcb.marker]
   148 00001192 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   149 00001195 31C9                <1>     xor ecx, ecx
   150 00001197 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   151 0000119A 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   152 0000119C 83E901              <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   153 0000119F 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   154 000011A2 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   155 000011A9 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   156 000011AD 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   157 000011B0 4883C610            <1>     add rsi, mcb.program
   158 000011B4 83E3FF              <1>     and ebx, -1 ;Zero upper dword
   159 000011B7 48C1E304            <1>     shl rbx, 4
   160 000011BB 4801DE              <1>     add rsi, rbx
   161 000011BE 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   162 000011C0 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   163 000011C8 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   164 000011CB 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   165 000011D2 4883C710            <1>     add rdi, mcb.program    ;Point to program area
   166 000011D6 4889F8              <1>     mov rax, rdi
   167 000011D9 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   168 000011DC 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   169 000011E0 E854030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   170 000011E5 C3                  <1>     ret
   171                              <1> .allocFail:
   172                              <1>     ;Walk the MCB chain to determine the biggest block size
   173 000011E6 488B35(24C00300)    <1>     mov rsi, [mcbChainPtr]
   174 000011ED 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   175                              <1> .af0:
   176 000011EF 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   177 000011F2 7409                <1>     je .af1
   178 000011F4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   179 000011F7 0F8564030000        <1>     jne memSysHalt
   180                              <1> .af1:
   181 000011FD 31C9                <1>     xor ecx, ecx
   182 000011FF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   183 00001202 48837E0100          <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   184 00001207 7505                <1>     jne .af2
   185 00001209 39D9                <1>     cmp ecx, ebx
   186 0000120B 0F47D9              <1>     cmova ebx, ecx
   187                              <1> .af2:
   188 0000120E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   189 00001211 740D                <1>     je .afExit
   190 00001213 48C1E104            <1>     shl rcx, 4
   191 00001217 4883C610            <1>     add rsi, mcb.program
   192 0000121B 4801CE              <1>     add rsi, rcx
   193 0000121E EBDD                <1>     jmp short .af1
   194                              <1> .afExit:
   195 00001220 B808000000          <1>     mov eax, errNoMem
   196 00001225 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   197 0000122C 8802                <1>     mov byte [rdx + callerFrame.rax], al
   198 0000122E 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   199 00001231 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   200 00001235 C3                  <1>     ret
   201                              <1> freeMemory:        ;ah = 49h
   202                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   203                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   204                              <1> ;Always skip the first block as this is the anchor for DOS
   205 00001236 4983E810            <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   206 0000123A 31C9                <1>     xor ecx, ecx
   207 0000123C 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   208 00001243 4889F7              <1>     mov rdi, rsi
   209 00001246 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   210 00001249 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   211 0000124D 4883C610            <1>     add rsi, mcb.program
   212 00001251 4801CE              <1>     add rsi, rcx    ;Go to next block
   213                              <1> .mainLoop:
   214 00001254 31C9                <1>     xor ecx, ecx
   215 00001256 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   216 00001259 7409                <1>     je .valid
   217 0000125B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   218 0000125E 0F85FD020000        <1>     jne memSysHalt
   219                              <1> .valid:
   220 00001264 4939F0              <1>     cmp r8, rsi
   221 00001267 7419                <1>     je .blockFound
   222                              <1>     ;Not valid, check if last block in chain
   223 00001269 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   224 0000126C 0F8487000000        <1>     je .blockNotFound
   225 00001272 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   226 00001275 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   227 00001279 4883C110            <1>     add rcx, mcb.program    ;Go past the arena mcb
   228 0000127D 4801CE              <1>     add rsi, rcx    ;Go to next block
   229 00001280 EBD2                <1>     jmp short .mainLoop
   230                              <1> .blockFound:
   231                              <1>     ;If hole, error.
   232                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   233 00001282 48837E0107          <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   234 00001287 7479                <1>     je .blockHole
   235 00001289 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   236 00001291 48837F0100          <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   237 00001296 751B                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   238                              <1>     ;It is, let it absorb this space
   239 00001298 31C9                <1>     xor ecx, ecx
   240 0000129A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   241 0000129D 83C101              <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   242 000012A0 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   243                              <1>     ;Replace block marker
   244 000012A3 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   245 000012A5 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   246 000012A7 31C9                <1>     xor ecx, ecx
   247 000012A9 48890E              <1>     mov qword [rsi], rcx
   248 000012AC 48894E08            <1>     mov qword [rsi + 8], rcx
   249 000012B0 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   250                              <1> .blockFoundCheckFollowing:
   251                              <1>     ;First check if we are the last block in chain
   252 000012B3 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   253 000012B6 7430                <1>     je .blockFoundExit  ;If yes, exit!
   254 000012B8 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   255 000012BB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   256 000012BE 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   257 000012C2 4883C110            <1>     add rcx, mcb.program
   258 000012C6 4801CE              <1>     add rsi, rcx    ;Go to next block
   259 000012C9 48837E0100          <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   260 000012CE 7518                <1>     jne .blockFoundExit ;If not free, exit
   261                              <1>     ;If free, absorb into block pointed to by rdi
   262 000012D0 31C9                <1>     xor ecx, ecx
   263 000012D2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   264 000012D5 83C101              <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   265 000012D8 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   266                              <1>     ;Replace block marker
   267 000012DB 8A06                <1>     mov al, byte [rsi + mcb.marker]
   268 000012DD 8807                <1>     mov byte [rdi + mcb.marker], al
   269 000012DF 31C9                <1>     xor ecx, ecx
   270 000012E1 48890E              <1>     mov qword [rsi], rcx
   271 000012E4 48894E08            <1>     mov qword [rsi + 8], rcx
   272                              <1> .blockFoundExit:
   273 000012E8 E84C020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   274 000012ED 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   275 000012F4 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   276 000012F8 C3                  <1>     ret
   277                              <1> .blockNotFound:
   278                              <1>     ;Set CF and error code
   279 000012F9 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   280 00001300 EB07                <1>     jmp short .blockError
   281                              <1> .blockHole:
   282                              <1> ;Cannot free a hole! Fail!
   283 00001302 C605(6AC30300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   284                              <1> .blockError:
   285 00001309 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   286 00001310 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   287 00001317 66C705(67C30300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   287 0000131F 00                  <1>
   288 00001320 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   289 00001327 B809000000          <1>     mov eax, errMemAddr
   290 0000132C 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   291 00001333 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   292 00001336 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   293 0000133A E8FA010000          <1>     call verifyIntegrityOfMCBChain
   294 0000133F C3                  <1>     ret
   295                              <1> reallocMemory:     ;ah = 4Ah
   296                              <1> ;Input: r8 = address of the block to be realloc'ed
   297                              <1> ;       ebx = How many paras this block should contain after realloc. 
   298                              <1> ;               If ebx = 0, jump to free memory
   299 00001340 85DB                <1>     test ebx, ebx
   300 00001342 0F84EEFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   301 00001348 4983E810            <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   302 0000134C 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   303 0000134F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   304 00001352 7409                <1>     je .ctn
   305 00001354 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   306 00001357 0F8531010000        <1>     jne .badAddrGiven
   307                              <1> .ctn:
   308                              <1>     ;Provided block is valid and not a hole
   309                              <1>     ;Check if Growth or Shrink
   310 0000135D 48837E0107          <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   311 00001362 749E                <1>     je freeMemory.blockHole
   312 00001364 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   313 00001367 31C9                <1>     xor ecx, ecx
   314 00001369 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   315 0000136C 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   316 0000136E 7774                <1>     ja .growth
   317 00001370 0F84F0000000        <1>     je .exit    ;If they are equal, do nothing!
   318                              <1> ;We can always shrink
   319 00001376 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   320 00001378 83E901              <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   321 0000137B 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   322 0000137E 83E3FF              <1>     and ebx, -1 ;Zero the upper bytes of qword
   323 00001381 48C1E304            <1>     shl rbx, 4
   324 00001385 4883C610            <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   325 00001389 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   326 0000138C 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   327 0000138E C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   328 00001391 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   329 00001393 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   330 0000139B 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   331 0000139E 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   332 000013A0 0F84C0000000        <1>     je .exit
   333                              <1> ;Else, now see if the block following is also free and absorb it
   334 000013A6 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   335 000013A9 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   336 000013AD 4883C610            <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   337 000013B1 4801CE              <1>     add rsi, rcx    ;Goto next arena
   338 000013B4 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   339 000013B7 7409                <1>     je .shrinkAbsorb
   340 000013B9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   341 000013BC 0F859F010000        <1>     jne memSysHalt
   342                              <1> .shrinkAbsorb:
   343 000013C2 48837E0100          <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   344 000013C7 0F8599000000        <1>     jne .exit
   345                              <1>     ;It is free, absorb it
   346 000013CD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   347 000013D0 83C101              <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   348 000013D3 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   349 000013D6 31C9                <1>     xor ecx, ecx
   350                              <1>     ;Clear absorbed MCB
   351 000013D8 48890E              <1>     mov qword [rsi], rcx
   352 000013DB 48894E08            <1>     mov qword [rsi + 8], rcx
   353 000013DF E982000000          <1>     jmp .exit
   354                              <1> .growth:
   355                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   356 000013E4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   357 000013E7 0F848E000000        <1>     je .notEnuffMem
   358                              <1> ;Now check the following space is free. If not, not enuff mem err
   359 000013ED 31C9                <1>     xor ecx, ecx
   360 000013EF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   361 000013F2 48C1E104            <1>     shl rcx, 4
   362 000013F6 4889F7              <1>     mov rdi, rsi    
   363 000013F9 4883C610            <1>     add rsi, mcb.program    ;Point to end of MCB
   364 000013FD 4801CE              <1>     add rsi, rcx
   365 00001400 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   366 00001403 7409                <1>     je .growthOK
   367 00001405 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   368 00001408 0F8553010000        <1>     jne memSysHalt
   369                              <1> .growthOK:
   370                              <1>     ;rdi points to block we are growing
   371 0000140E 48837E0100          <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   372 00001413 7566                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   373                              <1>     ;rsi must own all memory up to the next owned arena
   374 00001415 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   375 00001417 31C9                <1>     xor ecx, ecx
   376 00001419 31D2                <1>     xor edx, edx
   377 0000141B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   378 0000141E 83C101              <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   379 00001421 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   380 00001424 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   381 00001426 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   382 00001428 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   383 0000142B 7750                <1>     ja .notEnuffMem1
   384 0000142D 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   385 0000142F 83FA01              <1>     cmp edx, 1
   386 00001432 7443                <1>     je .notEnuffMem2
   387 00001434 31C9                <1>     xor ecx, ecx
   388 00001436 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   389 00001439 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   390 0000143D 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   391 00001440 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   392 00001443 4883C610            <1>     add rsi, mcb.program    ;Go to the program area
   393 00001447 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   394 0000144B 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   395 0000144E 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   396 00001452 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   397                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   398                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   399 00001454 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   400 00001456 740E                <1>     jz .exit
   401 00001458 83EA01              <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   402 0000145B 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   403 0000145E 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   404                              <1> .exit:
   405 00001466 E8CE000000          <1>     call verifyIntegrityOfMCBChain
   406 0000146B 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   407 00001472 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   408 00001476 C3                  <1>     ret
   409                              <1> .notEnuffMem2:
   410 00001477 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   411 00001479 EB02                <1>     jmp short .notEnuffMem1
   412                              <1> .notEnuffMem:
   413 0000147B 31DB                <1>     xor ebx, ebx    ;No space to grow
   414                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   415 0000147D B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   416 00001482 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   417 00001489 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   418 0000148C EB0C                <1>     jmp short .bad
   419                              <1> .badAddrGiven:
   420 0000148E 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   421 00001495 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   422                              <1> .bad:
   423 0000149A C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   424 000014A1 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   425 000014A8 668905(67C30300)    <1>     mov word [errorExCde], ax   ;Error code
   426 000014AF C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   427 000014B6 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   428 000014B9 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   429 000014BD E877000000          <1>     call verifyIntegrityOfMCBChain
   430 000014C2 C3                  <1>     ret
   431                              <1> getsetMallocStrat: ;ah = 58h
   432 000014C3 84C0                <1>     test al, al
   433 000014C5 741F                <1>     jz .get
   434 000014C7 3C02                <1>     cmp al, 2
   435 000014C9 7337                <1>     jae .bad
   436                              <1> ;Set here
   437 000014CB 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   438 000014D2 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   439 000014D6 8805(2FC30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   440 000014DC 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   441 000014E0 E854000000          <1>     call verifyIntegrityOfMCBChain
   442 000014E5 C3                  <1>     ret
   443                              <1> .get:
   444 000014E6 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   445 000014ED 31C0                <1>     xor eax, eax
   446 000014EF 8A05(2FC30300)      <1>     mov al, byte [allocStrat]
   447 000014F5 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   448 000014F8 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   449 000014FC E838000000          <1>     call verifyIntegrityOfMCBChain
   450 00001501 C3                  <1>     ret
   451                              <1> .bad:
   452 00001502 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   453 00001509 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   454 00001510 66C705(67C30300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   454 00001518 00                  <1>
   455 00001519 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   456 00001520 B801000000          <1>     mov eax, errInvFnc
   457 00001525 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   458 0000152C 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   459 0000152F 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   460 00001533 E801000000          <1>     call verifyIntegrityOfMCBChain
   461 00001538 C3                  <1>     ret
   462                              <1> ;-----------------------------------:
   463                              <1> ;      Memory related routines      :
   464                              <1> ;-----------------------------------:
   465                              <1> verifyIntegrityOfMCBChain:
   466 00001539 50                  <1>     push rax
   467 0000153A 53                  <1>     push rbx
   468 0000153B 488B1D(24C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   469                              <1> .ok:
   470 00001542 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   471 00001545 7408                <1>     je .ok1
   472 00001547 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   473 0000154A 7515                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   474                              <1> .exit:
   475 0000154C 5B                  <1>     pop rbx
   476 0000154D 58                  <1>     pop rax
   477 0000154E C3                  <1>     ret ;We have reached the end of the chain, return all good!
   478                              <1> .ok1:
   479 0000154F 31C0                <1>     xor eax, eax
   480 00001551 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   481 00001554 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   482 00001558 4883C310            <1>     add rbx, mcb.program    ;The block starts at the program
   483 0000155C 4801C3              <1>     add rbx, rax
   484 0000155F EBE1                <1>     jmp short .ok
   485                              <1> memSysHalt:
   486                              <1> ;Only arrive here if the integrity of the system is not verified
   487                              <1> ;Lock the system
   488 00001561 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   489 00001568 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   490 0000156F 66C705(67C30300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   490 00001577 00                  <1>
   491 00001578 C605(69C30300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   492 0000157F 488D150E000000      <1>     lea rdx, .sysHltString
   493 00001586 B409                <1>     mov ah, 09h
   494 00001588 CD41                <1>     int 41h
   495                              <1>     ;Only halt IRQ's in production!
   496                              <1>     %if !DEBUG
   497 0000158A FA                  <1>     cli ;Halt interrupts
   498 0000158B B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   499 0000158D E6A1                <1>     out 0A1h, al
   500 0000158F E621                <1>     out 021h, al
   501                              <1>     %endif
   502 00001591 F4                  <1>     hlt             ;Halt the system
   503 00001592 EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   504 00001594 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   504 0000159D 6C6F636174696F6E20- <1>
   504 000015A6 6572726F720D0A      <1>
   505 000015AD 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   505 000015B6 616420434F4D4D414E- <1>
   505 000015BF 442C2073797374656D- <1>
   505 000015C8 2068616C74656424    <1>
    27                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    28                              <1> ;EXEC and all default terminates are here
    29                              <1> 
    30                              <1> ;========================
    31                              <1> ;   Interrupt handlers
    32                              <1> ;========================
    33                              <1> terminateProcess:   ;Int 40h
    34 000015D0 48CF                <1>     iretq
    35                              <1> terminateRes:       ;Int 47h
    36 000015D2 48CF                <1>     iretq
    37                              <1> ;========================
    38                              <1> ;    Int 21h functions
    39                              <1> ;========================
    40                              <1> simpleTerminate:   ;ah = 00h
    41 000015D4 C3                  <1>     ret
    42                              <1> terminateStayRes:  ;ah = 31h
    43 000015D5 C3                  <1>     ret
    44                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    45 000015D6 C3                  <1>     ret
    46                              <1> terminateClean:    ;ah = 4Ch, EXIT
    47 000015D7 C3                  <1>     ret
    28                                  %include "./Source/Kernel/Local/Local.asm"
    29                              <1> ;Localisation based functions live here
    30                              <1> 
    31                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    32                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    33                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    34                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    35 000015D8 C3                  <1>     ret
    29                                  %include "./Source/Kernel/ctrlc.asm"
    30                              <1> diskErr:
    31 000015D9 80CC00              <1>     or ah, 00h
    32 000015DC EB08                <1>     jmp short criticalErrorSetup
    33                              <1> asciiCharDevErr:
    34 000015DE 80CC00              <1>     or ah, 00h
    35 000015E1 EB03                <1>     jmp short criticalErrorSetup
    36                              <1> binaryCharDevErr:
    37                              <1> ;Called with ah with additional bits
    38 000015E3 80CC38              <1>     or ah, 38h  ;Ignore,Retry,Fail OK
    39                              <1> criticalErrorSetup:
    40 000015E6 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    41 000015EC 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp should be NULLPTR
    42 000015F3 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    43                              <1>     ;For now, fall through, but change it later! 
    44                              <1> 
    45                              <1> 
    46                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    47                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    48                              <1> ; to the critical error handler.
    49                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    50                              <1> ; and with Int44Bitfield set
    51                              <1> ;               AH = Critical Error Bitfield
    52                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    53                              <1> ;               Bit 6 - Reserved
    54                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    55                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    56                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    57                              <1> ;               Bits [2-1] = Affected Disk Error
    58                              <1> ;                     0 0   DOS area
    59                              <1> ;                     0 1   FAT area
    60                              <1> ;                     1 0   Directory area
    61                              <1> ;                     1 1   Data area
    62                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    63                              <1> ;               AL  = Failing drive number if AH[7] = 0
    64                              <1> ;               DIL = Error code for errorMsg
    65                              <1> ;               RSI = EA of Device Header for which device the error occured
    66                              <1> ;Return:
    67                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    68                              <1> ;                  = 1 - Retry the Operation    (Retry)
    69                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    70                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    71                              <1> ; Return response from int 44h in al
    72                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    73                              <1> ; This function will terminate the program if an abort was requested!
    74                              <1> ; This function also destroys RBP
    75 000015F9 803D(63C30300)01    <1>     cmp byte [critErrFlag], 1
    76 00001600 7204                <1>     jb .noIntError  ;If not 0, enter
    77 00001602 B003                <1>     mov al, critFail    ;Else, return Fail always
    78 00001604 EB34                <1>     jmp short .checkResponse
    79                              <1> .noIntError:
    80 00001606 FA                  <1>     cli ;Disable Interrupts
    81 00001607 FE05(63C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
    82 0000160D FE0D(64C30300)      <1>     dec byte [inDOS]    ;Exiting DOS
    83 00001613 488925(B9C30300)    <1>     mov qword [xInt44hRSP], rsp
    84 0000161A 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    85 00001621 31ED                <1>     xor ebp, ebp
    86 00001623 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
    87 00001625 488B25(B9C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    88 0000162C C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    89 00001633 FE05(64C30300)      <1>     inc byte [inDOS]    ;Reenter DOS
    90 00001639 FB                  <1>     sti ;Reenable Interrupts
    91                              <1>     ;Now we check that the response given was allowed, and translate if needed
    92                              <1> .checkResponse:
    93 0000163A 3C01                <1>     cmp al, critRetry
    94 0000163C 7217                <1>     jb .checkIgnore
    95 0000163E 7420                <1>     je .checkRetry
    96 00001640 3C03                <1>     cmp al, critFail
    97 00001642 752F                <1>     jne .abort   ;Must be abort
    98                              <1> ;Here is for fail
    99 00001644 F605(C1C30300)08    <1>     test byte [Int44bitfld], critFailOK
   100 0000164B 7526                <1>     jnz .abort
   101                              <1> .exit:
   102 0000164D C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   103 00001654 C3                  <1>     ret
   104                              <1> .checkIgnore:
   105 00001655 F605(C1C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   106 0000165C 75EF                <1>     jnz .exit
   107 0000165E EB09                <1>     jmp short .setFail
   108                              <1> .checkRetry:
   109 00001660 F605(C1C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   110 00001667 75E4                <1>     jnz .exit
   111                              <1> .setFail:
   112 00001669 B003                <1>     mov al, critFail
   113 0000166B FE05(C2C30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   114 00001671 EBC7                <1>     jmp short .checkResponse    ;Double check if I can return Fail
   115                              <1> .abort:
   116                              <1> ;Prepare to abort. We abort from within!
   117                              <1> ;Currently fall into ^C
   118                              <1> ctrlBreakHdlr:
   119                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   120 00001673 FA                  <1> 	cli
   121 00001674 488B25(D3C30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   122 0000167B E847060000          <1> 	call dosPopRegs ;Get user state back
   123 00001680 488925(83C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   124 00001687 F8                  <1>     clc
   125 00001688 CD43                <1>     int 43h ;Call critical error handler
   126 0000168A FA                  <1>     cli ;Clear interrupts again
   127 0000168B 488905(8FC30300)    <1>     mov qword [oldRAX], rax ;Save rax
   128 00001692 9C                  <1>     pushfq  ;Get flags in rax
   129 00001693 58                  <1>     pop rax 
   130 00001694 483B25(83C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   131 0000169B 750C                <1>     jne .checkCF
   132                              <1> .returnToDOS:
   133 0000169D 488B05(8FC30300)    <1>     mov rax, qword [oldRAX]
   134 000016A4 E9C4040000          <1>     jmp functionDispatch    ;Goto int 41h
   135                              <1> .checkCF:
   136 000016A9 4883C408            <1>     add rsp, 8  ;Account for the flags left on the stack
   137 000016AD A801                <1>     test al, 1  ;CF set?
   138 000016AF 74EC                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   139 000016B1 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   140 000016B6 C605(E4C30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   141 000016BD E9AB040000          <1>     jmp functionDispatch
   142                              <1> 
    30                                  %include "./Source/Kernel/dosPrim.asm"
    31                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    32                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    33                              <1> 
    34                              <1> dosDefCritErrHdlr:
    35                              <1> ;The DOS default critical error handler always returns FAIL
    36 000016C2 B003                <1>     mov al, critFail
    37 000016C4 48CF                <1>     iretq
    38                              <1> 
    39                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    40                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    41                              <1> ;       rbx = Ptr to the request header for the driver call!
    42 000016C6 E83E060000          <1>     call dosCrit2Enter
    43 000016CB FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    44 000016CE FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    45 000016D1 E83D060000          <1>     call dosCrit2Exit
    46 000016D6 C3                  <1>     ret
    47                              <1> 
    48                              <1> setupPhysicalDiskRequest:
    49                              <1> ;Ensure that al has valid disk number
    50                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    51                              <1> ;If CF=NC, rbp = DPB ptr.
    52                              <1> ;If CF=CY, exit error
    53 000016D7 84C0                <1>     test al, al
    54 000016D9 723F                <1>     jc .diskError
    55 000016DB 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
    56 000016E1 7337                <1>     jae .diskError
    57 000016E3 50                  <1>     push rax
    58 000016E4 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    59 000016E6 E8E4030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    60 000016EB 58                  <1>     pop rax
    61 000016EC 7235                <1>     jc .error
    62 000016EE 8805(4FC50300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    63 000016F4 488B2D(58C50300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    64 000016FB 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    65 00001703 750A                <1>     jnz .netError
    66 00001705 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    67 00001709 E82F030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    68 0000170E C3                  <1>     ret
    69                              <1> .netError:
    70 0000170F 66C705(67C30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    70 00001717 00                  <1>
    71 00001718 EB09                <1>     jmp short .error
    72                              <1> .diskError:
    73 0000171A 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv
    73 00001722 00                  <1>
    74                              <1> .error:
    75 00001723 C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk
    76 0000172A C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr
    77 00001731 C605(6AC30300)09    <1>     mov byte [errorClass], eClsBadFmt
    78 00001738 F9                  <1>     stc
    79 00001739 C3                  <1>     ret
    80                              <1> 
    81                              <1> setupAbsDiskEntry:
    82                              <1> ;Prepares to sets up the CDS and DPB for the request
    83 0000173A FE05(64C30300)      <1>     inc byte [inDOS]
    84 00001740 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    85 00001741 FC                  <1>     cld ;Set string ops in the right direction
    86 00001742 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    87 00001747 7223                <1>     jc .exit    ;Error exit
    88 00001749 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    89 00001750 56                  <1>     push rsi
    90 00001751 50                  <1>     push rax
    91 00001752 488D35(42C40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    92 00001759 8806                <1>     mov byte [rsi], al  ;Construct a path
    93 0000175B 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    94 0000175E C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    95 00001762 F8                  <1>     clc
    96                              <1> ;++++++++++++++++++++++++++++
    97                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    98                              <1> ;Entered with path in rsi (ah=03h)
    99 00001763 B800030000          <1>     mov eax, 0300h  
   100 00001768 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   101                              <1> ;++++++++++++++++++++++++++++
   102 0000176A 58                  <1>     pop rax
   103 0000176B 5E                  <1>     pop rsi
   104                              <1> .exit:
   105 0000176C 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   106 0000176E C3                  <1>     ret
   107                              <1> 
   108                              <1> absDiskWrite:       ;Int 46h
   109                              <1> ;al = Drive number
   110                              <1> ;rbx = Memory Buffer address to read from
   111                              <1> ;ecx = Number of sectors to write
   112                              <1> ;rdx = Start LBA to write to
   113 0000176F FA                  <1>     cli
   114 00001770 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   115 00001777 488D25(20D80300)    <1>     lea rsp, DiskStakTop
   116 0000177E 55                  <1>     push rbp
   117 0000177F 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   118 00001780 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   119 00001785 7252                <1>     jc absDiskExit
   120 00001787 E8DF010000          <1>     call primReqWriteSetup
   121 0000178C EB1D                <1>     jmp short absDiskReadWriteCommon
   122                              <1> absDiskRead:        ;Int 45h
   123                              <1> ;al = Drive number
   124                              <1> ;rbx = Memory Buffer address to write to
   125                              <1> ;ecx = Number of sectors to read
   126                              <1> ;rdx = Start LBA to read from
   127 0000178E FA                  <1>     cli 
   128 0000178F 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   129 00001796 488D25(20D80300)    <1>     lea rsp, DiskStakTop
   130 0000179D 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   131 0000179E 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   132 0000179F E896FFFFFF          <1>     call setupAbsDiskEntry
   133 000017A4 7233                <1>     jc absDiskExit
   134 000017A6 E8CB010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   135                              <1> absDiskReadWriteCommon:
   136                              <1> ;Entered with the appropriate function number in ah
   137                              <1> ; and primary request header in rbx
   138 000017AB E83B000000          <1>     call absDiskDriverCall
   139 000017B0 7427                <1>     jz absDiskExit  ;Skip error code checking
   140 000017B2 8A05(1BC40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   141                              <1>     ;DOS uses the following pairs in a table
   142                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   143 000017B8 B480                <1>     mov ah, 80h ;Attachment failure
   144 000017BA 3C0C                <1>     cmp al, 0Ch ;Gen error
   145 000017BC 741A                <1>     je .absExit
   146 000017BE B440                <1>     mov ah, 40h ;Seek error
   147 000017C0 3C06                <1>     cmp al, 06h
   148 000017C2 7414                <1>     je .absExit
   149 000017C4 B408                <1>     mov ah, 08h ;Bad CRC
   150 000017C6 3C04                <1>     cmp al, 04h
   151 000017C8 740E                <1>     je .absExit
   152 000017CA B404                <1>     mov ah, 04h ;Sector not found
   153 000017CC 3C08                <1>     cmp al, 08h
   154 000017CE 7408                <1>     je .absExit
   155 000017D0 30E4                <1>     xor ah, ah  ;Write Protect Violation
   156 000017D2 84C0                <1>     test al, al
   157 000017D4 7402                <1>     je .absExit
   158 000017D6 B402                <1>     mov ah, 02h ;Other Error
   159                              <1> .absExit:
   160 000017D8 F9                  <1>     stc
   161                              <1> absDiskExit:
   162 000017D9 5B                  <1>     pop rbx
   163 000017DA 5D                  <1>     pop rbp
   164 000017DB FA                  <1>     cli
   165 000017DC FE0D(64C30300)      <1>     dec byte [inDOS]
   166 000017E2 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]
   167 000017E9 FB                  <1>     sti ;Reenable interrupts
   168 000017EA C3                  <1>     ret ;Return from interrupt without popping flags!
   169                              <1> absDiskDriverCall:
   170                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   171                              <1> ;       rbx = Request header address
   172                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   173                              <1> ;       eax = Status word from request
   174                              <1> ;       ecx = Number of sectors transferred
   175 000017EB 56                  <1>     push rsi
   176                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   177 000017EC 8B0D(2EC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   178                              <1>     ;Prepare for goDriver now
   179 000017F2 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   180 000017F6 E8CBFEFFFF          <1>     call goDriver   ;Make request
   181 000017FB 5E                  <1>     pop rsi
   182 000017FC 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   183 00001802 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   184 00001804 0FB705(1BC40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   185 0000180B 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   186 0000180F C3                  <1>     ret
   187                              <1> 
   188                              <1> getDiskDPB:
   189                              <1> ;Gets the disk DPB if the Disk is physical
   190                              <1> ;Otherwise will return a pointer to the drive DPB
   191                              <1> ;Called with rdi pointing to the CDS
   192                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   193 00001810 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   194 00001814 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   195 00001817 8805(4FC50300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   196 0000181D E81B020000          <1>     call setWorkingDPB
   197 00001822 57                  <1>     push rdi    ;Save the CDS ptr
   198 00001823 E835000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   199 00001828 5F                  <1>     pop rdi
   200 00001829 7231                <1>     jc .exitBad ;Preserve CF
   201 0000182B 752E                <1>     jnz .exit
   202                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   203 0000182D 8A0D(69C00300)      <1>     mov cl, byte [lastdrvNum]
   204 00001833 4831C0              <1>     xor rax, rax
   205 00001836 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   206 00001839 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   207 0000183D 488B3D(56C00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   208                              <1> .checkCDS:
   209 00001844 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   210 00001848 7509                <1>     jne .next
   211 0000184A 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   212 0000184E 7403                <1>     jz .next    ;IF yes, skip it
   213 00001850 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   214                              <1> .next:
   215 00001853 4883C75B            <1>     add rdi, cds_size
   216 00001857 FEC9                <1>     dec cl
   217 00001859 75E9                <1>     jnz .checkCDS
   218                              <1> .exit:
   219 0000185B F8                  <1>     clc
   220                              <1> .exitBad:
   221 0000185C C3                  <1>     ret
   222                              <1> 
   223                              <1> ensureDiskValid:
   224                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   225                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   226                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   227                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   228                              <1> .medChk:
   229 0000185D E85D010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   230                              <1> ;Return in rbx the req hdr address
   231 00001862 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   232 00001866 E85BFEFFFF          <1>     call goDriver   ;Request!
   233 0000186B 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   234 0000186F F7C700800000        <1>     test edi, drvErrStatus
   235 00001875 756C                <1>     jnz .diskDrvCritErrMedChk
   236                              <1> .medChkIgnore:
   237 00001877 8A05(4FC50300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   238 0000187D 30E4                <1>     xor ah, ah
   239 0000187F 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   240 00001882 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   241 00001885 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   242 00001887 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   243 00001889 E816EEFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   244 0000188E F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   245 0000188F 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   246                              <1>     ;ZF=NZ from test for dirty buffers
   247                              <1> .exit:
   248 00001891 C3                  <1>     ret
   249                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   250 00001892 C605(28D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   251 00001899 E827EEFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   252                              <1>     ;Get a buffer to read BPB into in rdi
   253 0000189E B101                <1>     mov cl, dosBuffer
   254 000018A0 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   255 000018A2 E83DEEFFFF          <1>     call getBuffer ;Get a disk buffer
   256 000018A7 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   257 000018A9 4889DF              <1>     mov rdi, rbx
   258                              <1> .repeatEP:
   259 000018AC E83A010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   260 000018B1 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   261 000018B5 E80CFEFFFF          <1>     call goDriver   ;Request!
   262 000018BA 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   263 000018BE A900800000          <1>     test eax, drvErrStatus
   264 000018C3 7565                <1>     jnz .diskDrvCritErrBPB
   265                              <1>     ;Now rebuild the dpb fields for this drive
   266 000018C5 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   267 000018C9 E889060000          <1>     call createDPB  
   268                              <1>     ;Adjust the buffer header information
   269 000018CE 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   270 000018D1 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   271 000018D4 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   272 000018D7 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   273 000018DA 30E4                <1>     xor ah, ah
   274 000018DC 8825(28D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   275 000018E2 C3                  <1>     ret
   276                              <1> .diskDrvCritErrMedChk:
   277                              <1> ;Critical Errors fall through here
   278                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   279 000018E3 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   280 000018EA 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   281 000018F1 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   282 000018F4 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   283 000018F6 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   284 000018FC E8F8FCFFFF          <1>     call criticalDOSError
   285 00001901 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   286 00001908 488B2D(21C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   287 0000190F 3C01                <1>     cmp al, critRetry
   288 00001911 0F8446FFFFFF        <1>     je .medChk
   289 00001917 3C00                <1>     cmp al, critIgnore
   290 00001919 0F8458FFFFFF        <1>     je .medChkIgnore
   291 0000191F 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   291 00001927 00                  <1>
   292 00001928 F9                  <1>     stc ;Set error flag to indicate fail
   293 00001929 C3                  <1>     ret ;And exit from function with CF set
   294                              <1> 
   295                              <1> .diskDrvCritErrBPB:
   296                              <1>     ;eax has status word, rbp has dpb ptr
   297                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   298 0000192A 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   299 00001931 48892D(21C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   300 00001938 89C7                <1>     mov edi, eax    ;Transfer the status word over
   301 0000193A 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   302 0000193D B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK ;Set bits
   303 0000193F 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   304 00001945 E8AFFCFFFF          <1>     call criticalDOSError
   305 0000194A 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   306 00001951 488B2D(21C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   307 00001958 3C01                <1>     cmp al, critRetry
   308 0000195A 0F844CFFFFFF        <1>     je .repeatEP
   309                              <1>     ;Else we fail (Ignore=Fail here)
   310 00001960 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   310 00001968 00                  <1>
   311 00001969 F9                  <1>     stc ;Set error flag to indicate fail
   312 0000196A C3                  <1>     ret ;And exit from function with CF set
   313                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   314                              <1> ;           Primitive Driver Requests
   315                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   316                              <1> ;First are Disk requests, then Char device requests
   317                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   318                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   319                              <1> 
   320                              <1> primReqWriteSetup:
   321 0000196B 50                  <1>     push rax
   322 0000196C B408                <1>     mov ah, drvWRITE    ;Command code
   323 0000196E 0225(2CC30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   324 00001974 EB03                <1>     jmp short primReqRWCommon
   325                              <1> primReqReadSetup:
   326 00001976 50                  <1>     push rax
   327 00001977 B404                <1>     mov ah, drvREAD
   328                              <1> primReqRWCommon:
   329                              <1> ;Sets up the IO request packet with:
   330                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   331                              <1> ; rbx = Data storage buffer ptr
   332                              <1> ; ecx = Number of sectors to transfer
   333                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   334                              <1> ; ~~~~ Set by entry function ~~~~ 
   335                              <1> ; ah = Command code
   336                              <1> ; All regs preserved EXCEPT rbx.
   337                              <1> ; Return: rbx = Transfer Address
   338 00001979 48891D(26C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   339 00001980 890D(2EC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   340 00001986 C605(18C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   341 0000198D 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   342 00001992 8905(19C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   343 00001998 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   344 0000199B 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   345                              <1>     ;Disk operations only here!
   346 0000199D 488915(32C40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   347 000019A4 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   348 000019A7 8805(25C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   349 000019AD 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   350 000019B0 8805(19C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   351                              <1> primReqCommonExit:
   352                              <1> ;Returns in rbx the primary request header as these functions
   353                              <1> ; setup the request in the primary request header space
   354 000019B6 58                  <1>     pop rax
   355 000019B7 488D1D(18C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   356 000019BE C3                  <1>     ret
   357                              <1> 
   358                              <1> primReqMedCheckSetup:
   359                              <1> ;Prepare the diskIO packet for mediacheck
   360                              <1> ;rbp has DPB pointer for device to check media on
   361 000019BF 50                  <1>     push rax
   362 000019C0 C605(18C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   363 000019C7 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   364 000019CA 8805(25C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   365 000019D0 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   366 000019D3 8805(19C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   367 000019D9 C605(1AC40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   368 000019E0 66C705(1BC40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   368 000019E8 00                  <1>
   369 000019E9 EBCB                <1>     jmp short primReqCommonExit
   370                              <1> 
   371                              <1> primReqGetBPBSetup:
   372                              <1> ;rbp has DPB pointer for device
   373                              <1> ;rdi has sector buffer header pointer for transfer
   374 000019EB 50                  <1>     push rax
   375 000019EC 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   376 000019F0 48893D(26C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   377 000019F7 C605(18C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   378 000019FE 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   379 00001A01 8805(25C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   380 00001A07 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   381 00001A0A 8805(19C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   382 00001A10 C605(1AC40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   383 00001A17 66C705(1BC40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   383 00001A1F 00                  <1>
   384 00001A20 EB94                <1>     jmp short primReqCommonExit
   385                              <1> 
   386                              <1> secdReqCharIOReq:
   387                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   388                              <1> ;Input:
   389                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   390                              <1> ; ecx = Length of buffer
   391                              <1> ; rdi = Buffer pointer
   392                              <1> ;Output: 
   393                              <1> ; rbx = Transfer Address 
   394 00001A22 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   395 00001A29 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   396 00001A2C 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   397 00001A2F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   398 00001A35 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   399 00001A39 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   400 00001A3C C3                  <1>     ret
   401                              <1> ;If the device which will process this request is a disk device
   402                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   403                              <1> ;Then we will read the appropriate byte from that buffer to the 
   404                              <1> ; singleIOByt buffer.
   405                              <1> ;Such a request will require additional setup with the following fields:
   406                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    31                                  %include "./Source/Kernel/dosUtils.asm"
    32                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    33                              <1> 
    34                              <1> ;Basic Drive related Utilities
    35                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    36                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    37                              <1> ; that gets set up)
    38                              <1> 
    39                              <1> setWorkingDPB:
    40                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    41 00001A3D 48892D(50C50300)    <1>     mov qword [workingDPB], rbp
    42 00001A44 C3                  <1>     ret
    43                              <1> 
    44                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    45                              <1> ;Returns ptr to user regs in rsi
    46 00001A45 488B35(D3C30300)    <1>     mov rsi, qword [oldRSP]
    47 00001A4C C3                  <1>     ret
    48                              <1> 
    49                              <1> walkDPBchain:
    50                              <1> ;Called with al = 0 based drive number
    51                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    52 00001A4D 488B35(34C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    53                              <1> .walk:
    54 00001A54 4883FEFF            <1>     cmp rsi, -1
    55 00001A58 740A                <1>     je .exitBad
    56 00001A5A 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    57 00001A5C 7407                <1>     je .exit    ;Drive found
    58 00001A5E 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    59 00001A62 EBF0                <1>     jmp short .walk
    60                              <1> .exitBad:
    61 00001A64 F9                  <1>     stc
    62                              <1> .exit:
    63 00001A65 C3                  <1>     ret
    64                              <1> setDrive:   
    65                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    66                              <1> ;Input: al = 1-based drive number
    67                              <1> ;Output: al = 0-based drive number
    68                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
    69                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
    70                              <1> ;            set.
    71 00001A66 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
    72 00001A6B 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
    73 00001A6D 56                  <1>     push rsi
    74 00001A6E 488B35(58C50300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
    75 00001A75 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
    76 00001A7B 5E                  <1>     pop rsi
    77 00001A7C 7401                <1>     jz .exit
    78 00001A7E F9                  <1>     stc
    79                              <1> .exit:
    80 00001A7F C3                  <1>     ret
    81                              <1> 
    82                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
    83                              <1> ;Allows a redirector or subst/join to build a CDS
    84                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
    85                              <1> ; volumes, that are made at system boot.
    86                              <1> ;Input: al = Drive Letter for drive
    87                              <1> ;       workingCDS = Set to the CDS array slot for the drive
    88                              <1> ;Output: rdi = newly filled in workingCDS
    89                              <1> ;CF=NC => CDS valid and has a DPB
    90                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
    91 00001A80 50                  <1>     push rax
    92 00001A81 2C40                <1>     sub al, "A"-1
    93 00001A83 3A05(68C00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
    94 00001A89 488B3D(58C50300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
    95 00001A90 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
    96 00001A96 58                  <1>     pop rax
    97 00001A97 7235                <1>     jb .exit    ;Exit with CF=CY
    98 00001A99 50                  <1>     push rax
    99 00001A9A 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   100 00001A9F 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   101 00001AA1 58                  <1>     pop rax
   102 00001AA2 66814F430040        <1>     or word [rdi + cds.wFlags], cdsPhysDrive    ;Config bit set
   103 00001AA8 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   104 00001AAF 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   105 00001AB7 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   106                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   107 00001ABD 50                  <1>     push rax
   108 00001ABE 56                  <1>     push rsi
   109 00001ABF 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   110 00001AC1 E887FFFFFF          <1>     call walkDPBchain
   111 00001AC6 7204                <1>     jb .skipSettingDPB
   112 00001AC8 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   113                              <1> .skipSettingDPB:
   114 00001ACC 5E                  <1>     pop rsi
   115 00001ACD 58                  <1>     pop rax
   116                              <1> .exit:
   117 00001ACE C3                  <1>     ret
   118                              <1> 
   119                              <1> getCDS:     ;Int 4Fh AX=1219h
   120                              <1> ;Gets the device DPB and saves it in the DOS variable
   121                              <1> ;This can be called to get CDS for network drives too!
   122                              <1> ;Input: al = 1 based drive number
   123                              <1> ;Sets workingCDS var with the CDS for the device. 
   124                              <1> ;   If device on a network, sets CF
   125                              <1> ;Returns al with 0-based drive number
   126 00001ACF 84C0                <1>     test al, al
   127 00001AD1 7508                <1>     jnz .skip
   128 00001AD3 8A05(8DC30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   129 00001AD9 FEC0                <1>     inc al
   130                              <1> .skip:
   131 00001ADB FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   132 00001ADD 56                  <1>     push rsi
   133 00001ADE C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   134 00001AE5 F605(4EC50300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   135 00001AEC 7423                <1>     jz .physDrive
   136                              <1>     ;Invokation via 21/5D00, not yet fully supported
   137                              <1>     ;If returned with CF=CY, consider it an error for now
   138 00001AEE 50                  <1>     push rax
   139 00001AEF 57                  <1>     push rdi
   140 00001AF0 488D3D(68C50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   141 00001AF7 48893D(58C50300)    <1>     mov qword [workingCDS], rdi ;Make it current
   142 00001AFE 0441                <1>     add al, "A" ;Convert to a drive letter
   143 00001B00 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   144 00001B05 66F747430040        <1>     test word [rdi + cds.wFlags], cdsPhysDrive  ;Is the CDS valid?
   145 00001B0B 5F                  <1>     pop rdi
   146 00001B0C 58                  <1>     pop rax
   147 00001B0D 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   148 00001B0F EB17                <1>     jmp short .exitOk   ;All oki
   149                              <1> .physDrive:
   150 00001B11 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   151 00001B16 7208                <1>     jc .exitBad
   152 00001B18 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   153 00001B1E 7508                <1>     jnz .exitOk ;Exit with flag cleared
   154                              <1>     ;Else Return to unknown error locus
   155                              <1> .exitBad:
   156 00001B20 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk
   157                              <1> .exitBad1:
   158 00001B27 F9                  <1>     stc
   159                              <1> .exitOk:
   160 00001B28 5E                  <1>     pop rsi
   161 00001B29 C3                  <1>     ret
   162                              <1> 
   163                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   164                              <1>     ;Gets the CDS for the current drive in al
   165                              <1>     ;Input: al = Drive number, 0 = A ...
   166                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   167                              <1>     ;        CF=CY => al not valid
   168 00001B2A 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
   169 00001B30 7202                <1>     jb .ctn
   170 00001B32 F9                  <1>     stc 
   171 00001B33 C3                  <1>     ret
   172                              <1> .ctn:
   173 00001B34 50                  <1>     push rax
   174 00001B35 52                  <1>     push rdx
   175 00001B36 0FB6C0              <1>     movzx eax, al
   176 00001B39 BE5B000000          <1>     mov rsi, cds_size
   177 00001B3E 31D2                <1>     xor edx, edx
   178 00001B40 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
   179 00001B42 488D05(56C00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
   180 00001B49 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   181 00001B4C 488935(58C50300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   182 00001B53 5A                  <1>     pop rdx
   183 00001B54 58                  <1>     pop rax
   184 00001B55 F8                  <1>     clc
   185 00001B56 C3                  <1>     ret
   186                              <1> 
   187                              <1> 
   188                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   189                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   190                              <1> ;Input: AL = Char to normalise.
   191                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   192                              <1> ;If path separator, set ZF=ZE
   193 00001B57 3C5C                <1>     cmp al, "\"
   194 00001B59 7406                <1>     je .exit
   195 00001B5B 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   196 00001B5D 7502                <1>     jne .exit
   197 00001B5F B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   198                              <1> .exit:
   199 00001B61 C3                  <1>     ret
   200                              <1> 
   201                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   202                              <1> ;Convert a lowercase char to uppercase
   203                              <1> ; Leave alone uppercase chars and invalid chars
   204                              <1> ;Input: al = Char to convert to uppercase
   205                              <1> ;Output: al = Processed char
   206 00001B62 3C7A                <1>     cmp al, "z"
   207 00001B64 7706                <1>     ja .exit
   208 00001B66 3C61                <1>     cmp al, "a"
   209 00001B68 7202                <1>     jb .exit
   210 00001B6A 2C20                <1>     sub al, "a" - "A"   ;Convert the char
   211                              <1> .exit:
   212 00001B6C C3                  <1>     ret
    32                                  %include "./Source/Kernel/dosMain.asm"
    33                              <1> ;-----------------------------------:
    34                              <1> ;        Main Kernel dispatch       :
    35                              <1> ;            and routines           :
    36                              <1> ;-----------------------------------:
    37                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    38                              <1> ;ah = Function number, all other registers have various meanings
    39                              <1>  %if DEBUG
    40                              <1>     ;Entry function
    41                              <1>     debugEnterM
    42                              <1>     lea rbp, .l0000
    43                              <1>     call debPrintNullString
    44                              <1>     call debPrintFunctionName
    45                              <1>     jmp short .l0001
    46                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    47                              <1> .l0001:    
    48                              <1>     debugExitM
    49                              <1>     %endif
    50 00001B6D FA                  <1>     cli ;Halt external interrupts
    51 00001B6E FC                  <1>     cld ;Ensure all string ops occur in the right direction
    52 00001B6F 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    53 00001B72 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    54                              <1>     ;Cherry pick functions
    55 00001B78 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    56 00001B7B 722C                <1>     jb .fsbegin   ;If below skip these checks
    57 00001B7D 0F849A010000        <1>     je ctrlBreakCheck
    58 00001B83 80FC64              <1>     cmp ah, 64h
    59 00001B86 0F84DA010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    60 00001B8C 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    61 00001B8E 80FC51              <1>     cmp ah, 51h
    62 00001B91 0F84BD010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    63 00001B97 80FC62              <1>     cmp ah, 62h
    64 00001B9A 0F84BD010000        <1>     je getPSPaddr          ;Calls the above function
    65 00001BA0 80FC50              <1>     cmp ah, 50h
    66 00001BA3 0F84A2010000        <1>     je setCurrProcessID
    67                              <1> .fsbegin:
    68 00001BA9 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    69 00001BAE 48891D(DBC30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    70 00001BB5 66C705(9FC30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    70 00001BBD 00                  <1>
    71 00001BBE 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
    72 00001BC5 488905(C3C30300)    <1>     mov qword [oldoldRSP], rax
    73 00001BCC FE05(64C30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    74 00001BD2 488925(D3C30300)    <1>     mov qword [oldRSP], rsp
    75                              <1> ;Network related variable resetting
    76 00001BD9 C605(4EC50300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    77                              <1> ;Here, we want to save oldRSP in the callers PSP
    78 00001BE0 803D(64C30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    79 00001BE7 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    80 00001BE9 488B05(7BC30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    81 00001BF0 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    82                              <1> .fsb1:
    83 00001BF4 58                  <1>     pop rax     ;Get old rax back
    84 00001BF5 50                  <1>     push rax    ;and push it back onto the stack
    85 00001BF6 488D25(51CB0300)    <1>     lea rsp, critStakTop
    86 00001BFD FB                  <1>     sti         ;Reenable interrupts
    87                              <1> 
    88 00001BFE 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    89 00001C00 881D(EBC30300)      <1>     mov byte [vConDrvFlg], bl   ;Clear the conDrvFlg (use default CON driver)
    90 00001C06 C605(ECC30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    91 00001C0D 881D(C2C30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    92 00001C13 881D(E3C30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    93                              <1> 
    94 00001C19 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    95 00001C1A 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    96 00001C1C D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    97 00001C1E 488D05F5E3FFFF      <1>     lea rax, kDispTbl
    98 00001C25 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    99 00001C28 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   100 00001C2C 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   101 00001C2F 58                  <1>     pop rax
   102                              <1> 
   103 00001C30 84E4                <1>     test ah, ah     ;Simple Terminate function?
   104 00001C32 741C                <1>     jz .fddiskOp
   105 00001C34 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   106 00001C37 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   107 00001C39 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   108 00001C3C 7712                <1>     ja .fddiskOp
   109                              <1> ;Char operations here
   110 00001C3E F605(63C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   111 00001C45 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   112 00001C47 488D25(E0D10300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   113 00001C4E EB40                <1>     jmp short .fdGoToFunction
   114                              <1> .fddiskOp:
   115                              <1>     ;Disk operations go here
   116                              <1>     ;Save rax on entry to a disk funciton
   117 00001C50 488905(8FC30300)    <1>     mov qword [oldRAX], rax
   118                              <1>     ;Clear up error info
   119 00001C57 C605(66C30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   120 00001C5E C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   121 00001C65 C605(65C30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   122                              <1> 
   123 00001C6C 50                  <1>     push rax
   124 00001C6D B482                <1>     mov ah, 82h ;Cancel all critical section!
   125 00001C6F CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   126 00001C71 58                  <1>     pop rax
   127                              <1> 
   128 00001C72 C605(ECC30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   129 00001C79 488D25(20D80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   130 00001C80 F605(8EC30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   131 00001C87 7407                <1>     jz .fdGoToFunction
   132                              <1> ; HANDLE CTRL+BREAK HERE!
   133 00001C89 50                  <1>     push rax
   134 00001C8A E85EEFFFFF          <1>     call checkBreakOnCon    ; Check for a ^C in the CON buffer
   135 00001C8F 58                  <1>     pop rax
   136                              <1> .fdGoToFunction:
   137 00001C90 48871D(DBC30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   138                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   139                              <1>     ;
   140                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   141                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   142                              <1>     ;
   143                              <1>     %if DEBUG && REGS
   144                              <1>     ;Print stack if necessary function
   145                              <1>     debugEnterM
   146                              <1>     call debPrintDOSStack
   147                              <1>     debugExitM
   148                              <1>     %endif
   149 00001C97 FF15(DBC30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   150                              <1>     %if DEBUG
   151                              <1>     ;Entry function
   152                              <1>     debugEnterM
   153                              <1>     lea rbp, .l0002
   154                              <1>     call debPrintNullString
   155                              <1>     jmp short .l0003
   156                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   157                              <1> .l0003:    
   158                              <1>     debugExitM
   159                              <1>     %endif
   160                              <1>     %if DEBUG && REGS
   161                              <1>     ;Exit function
   162                              <1>     debugEnterM
   163                              <1>     call debPrintDOSStack
   164                              <1>     debugExitM
   165                              <1>     %endif
   166                              <1> .fdExit:
   167 00001C9D FA                  <1>     cli     ;Redisable interrupts
   168 00001C9E FE0D(64C30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   169 00001CA4 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   170 00001CAB 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   171 00001CAE 488B05(C3C30300)    <1>     mov rax, qword [oldoldRSP]
   172 00001CB5 488905(D3C30300)    <1>     mov qword [oldRSP], rax
   173 00001CBC E806000000          <1>     call dosPopRegs  ;Pop the frame
   174 00001CC1 48CF                <1>     iretq
   175                              <1> .fdExitBad:
   176 00001CC3 30C0                <1>     xor al, al
   177                              <1> defaultIretq:
   178 00001CC5 48CF                <1>     iretq
   179                              <1> dosPopRegs:
   180 00001CC7 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   181 00001CCD 58                  <1>     pop rax
   182 00001CCE 5B                  <1>     pop rbx
   183 00001CCF 59                  <1>     pop rcx
   184 00001CD0 5A                  <1>     pop rdx
   185 00001CD1 5E                  <1>     pop rsi
   186 00001CD2 5F                  <1>     pop rdi
   187 00001CD3 5D                  <1>     pop rbp
   188 00001CD4 4158                <1>     pop r8
   189 00001CD6 4159                <1>     pop r9
   190 00001CD8 FF25(CBC30300)      <1>     jmp qword [dosReturn]
   191                              <1> dosPushRegs:
   192 00001CDE 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   193 00001CE4 4151                <1>     push r9
   194 00001CE6 4150                <1>     push r8
   195 00001CE8 55                  <1>     push rbp
   196 00001CE9 57                  <1>     push rdi
   197 00001CEA 56                  <1>     push rsi
   198 00001CEB 52                  <1>     push rdx
   199 00001CEC 51                  <1>     push rcx
   200 00001CED 53                  <1>     push rbx
   201 00001CEE 50                  <1>     push rax
   202 00001CEF FF25(CBC30300)      <1>     jmp qword [dosReturn]
   203                              <1> dosCrit1Enter:
   204 00001CF5 C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   205 00001CF6 B801800000          <1>     mov eax, 8001h
   206 00001CFB CD4A                <1>     int 4ah
   207 00001CFD 58                  <1>     pop rax
   208 00001CFE C3                  <1>     ret
   209                              <1> dosCrit1Exit:
   210 00001CFF C3                  <1>     ret
   211 00001D00 B801810000          <1>     mov eax, 8101h
   212 00001D05 CD4A                <1>     int 4ah
   213 00001D07 58                  <1>     pop rax
   214 00001D08 C3                  <1>     ret
   215                              <1> dosCrit2Enter:
   216 00001D09 C3                  <1>     ret
   217 00001D0A B802800000          <1>     mov eax, 8002h
   218 00001D0F CD4A                <1>     int 4ah
   219 00001D11 58                  <1>     pop rax
   220 00001D12 C3                  <1>     ret
   221                              <1> dosCrit2Exit:
   222 00001D13 C3                  <1>     ret
   223 00001D14 B802810000          <1>     mov eax, 8102h
   224 00001D19 CD4A                <1>     int 4ah
   225 00001D1B 58                  <1>     pop rax
   226 00001D1C C3                  <1>     ret
   227                              <1> ;========================================:
   228                              <1> ;      Reentrant Kernel Functions        :
   229                              <1> ;========================================:
   230                              <1> ctrlBreakCheck:    ;ah = 33h
   231 00001D1D 84C0                <1>     test al, al
   232 00001D1F 7508                <1>     jnz .cbcget  ;Get the state or other functions
   233 00001D21 8A15(8EC30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   234 00001D27 48CF                <1>     iretq
   235                              <1> .cbcget:
   236 00001D29 3C02                <1>     cmp al, 02h
   237 00001D2B 771A                <1>     ja .cbcBad
   238 00001D2D 740D                <1>     jz .cbcxchg ;Function 2
   239 00001D2F 52                  <1>     push rdx
   240 00001D30 80E201              <1>     and dl, 1   ;Get only the bottom bit
   241 00001D33 8815(8EC30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   242 00001D39 5A                  <1>     pop rdx
   243 00001D3A 48CF                <1>     iretq
   244                              <1> .cbcxchg:
   245 00001D3C 80E201              <1>     and dl, 1
   246 00001D3F 8615(8EC30300)      <1>     xchg byte [breakFlag], dl
   247 00001D45 48CF                <1>     iretq
   248                              <1> .cbcBad:
   249 00001D47 B0FF                <1>     mov al, -1
   250 00001D49 48CF                <1>     iretq
   251                              <1> 
   252                              <1> 
   253                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   254 00001D4B 48891D(7BC30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   255 00001D52 48CF                <1>     iretq
   256                              <1> 
   257                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   258 00001D54 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   259 00001D5B 48CF                <1>     iretq
   260                              <1> 
   261                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   262 00001D5D 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   263 00001D64 48CF                <1>     iretq
   264                              <1> 
   265                              <1> setDriverLookahead:;ah = 64h, reserved
   266 00001D66 48CF                <1>     iretq
   267                              <1> 
   268                              <1> ;========================================:
   269                              <1> ;            Kernel Functions            :
   270                              <1> ;========================================:
   271                              <1> diskReset:         ;ah = 0Dh
   272                              <1> ;Flush all dirty buffers to disk
   273 00001D68 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   274                              <1> .drCheckBuffer:
   275 00001D6F F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   276 00001D73 7407                <1>     jz .drGotoNextBuffer
   277                              <1> .drFlushBuffer:
   278 00001D75 E81AE8FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   279 00001D7A 7209                <1>     jc .drExit
   280                              <1> .drGotoNextBuffer:
   281 00001D7C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   282 00001D7F 4883FFFF            <1>     cmp rdi, -1     ;If rdi points to -1, exit
   283 00001D83 75EA                <1>     jne .drCheckBuffer
   284                              <1> .drExit:
   285 00001D85 C3                  <1>     ret
   286                              <1> 
   287                              <1> selectDisk:        ;ah = 0Eh
   288                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   289 00001D86 88D0                <1>     mov al, dl
   290 00001D88 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   291 00001D8A E8D7FCFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   292 00001D8F 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   293 00001D91 8805(8DC30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   294                              <1> .skipSettingCurrent:
   295 00001D97 0FB605(69C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   296 00001D9E C3                  <1>     ret
   297                              <1> 
   298                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   299 00001D9F 8A05(8DC30300)      <1>     mov al, byte [currentDrv]
   300 00001DA5 C3                  <1>     ret
   301                              <1> 
   302                              <1> FATinfoDefault:    ;ah = 1Bh
   303 00001DA6 30D2                <1>     xor dl, dl
   304                              <1> FATinfoDevice:     ;ah = 1Ch
   305                              <1> ;Return in:
   306                              <1> ;   al = Number of sectors per cluster
   307                              <1> ;   edx = Number of clusters
   308                              <1> ;   cx =  Size of a clsuter
   309 00001DA8 84D2                <1>     test dl, dl
   310 00001DAA 7508                <1>     jnz .fidSkipdefault
   311 00001DAC 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   312 00001DB2 FEC2                <1>     inc dl
   313                              <1> .fidSkipdefault:
   314 00001DB4 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   315                              <1> ;Walk the dpb chain manually
   316 00001DB6 88D0                <1>     mov al, dl  ;Move drive number into al
   317 00001DB8 E890FCFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   318 00001DBD 732E                <1>     jnc .fidDPBFound
   319                              <1> ;Else, we at an error.
   320                              <1> ;Simply return with CY set and error code in al with extended error info
   321 00001DBF E881FCFFFF          <1>     call getUserRegs
   322 00001DC4 48834E5801          <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   323 00001DC9 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   324 00001DCE 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv     
   324 00001DD6 00                  <1>
   325 00001DD7 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   326 00001DDE C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   327 00001DE5 C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   328 00001DEC C3                  <1>     ret
   329                              <1> .fidDPBFound:
   330 00001DED 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   331 00001DF0 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   332 00001DF2 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   333 00001DF5 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ; Save the value in ecx
   334 00001DF9 488D5E23            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   335 00001DFD E843FCFFFF          <1>     call getUserRegs
   336 00001E02 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   337 00001E06 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   338 00001E0A 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   339 00001E0E C3                  <1>     ret
   340                              <1> 
   341                              <1> setIntVector:      ;ah = 25h
   342                              <1> ;Called with:
   343                              <1> ;   rdx = Pointer to interrupt handler
   344                              <1> ;   al = Interrupt number
   345 00001E0F 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   346 00001E11 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   347                              <1> ;First call to get default BIOS segement selector and attribute word
   348 00001E17 88C3                <1>     mov bl, al  ;Set interrupt number 
   349 00001E19 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   350 00001E1E CD35                <1>     int 35h
   351 00001E20 E820FCFFFF          <1>     call getUserRegs
   352 00001E25 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   353 00001E29 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   354 00001E2B 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   355                              <1> ;dx preserves the attribute word
   356 00001E2D B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   357 00001E32 CD35                <1>     int 35h
   358 00001E34 E80CFCFFFF          <1>     call getUserRegs
   359 00001E39 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   360 00001E3B C3                  <1>     ret
   361                              <1> createNewPSP:      ;ah = 26h
   362 00001E3C C3                  <1>     ret
   363                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   364 00001E3D 8805(2CC30300)      <1>     mov byte [verifyFlag], al
   365 00001E43 8025(2CC30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   366 00001E4A C3                  <1>     ret
   367                              <1> getDOSversion:     ;ah = 30h
   368 00001E4B E8F5FBFFFF          <1>     call getUserRegs
   369 00001E50 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   370 00001E52 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   371 00001E55 668B05A4E1FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   372 00001E5C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   373 00001E5F C3                  <1>     ret
   374                              <1> 
   375                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   376                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   377 00001E60 30D2                <1>     xor dl, dl
   378                              <1> getDeviceDPBptr:   ;ah = 32h
   379                              <1> ;On entry: dl = Drive number
   380                              <1> ;On exit: rbx = DPB pointer
   381 00001E62 84D2                <1>     test dl, dl
   382 00001E64 7508                <1>     jnz .gddpskipdefault
   383 00001E66 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   384 00001E6C FEC2                <1>     inc dl
   385                              <1> .gddpskipdefault:
   386                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   387 00001E6E FECA                <1>     dec dl
   388 00001E70 88D0                <1>     mov al, dl
   389 00001E72 E858FCFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   390 00001E77 722C                <1>     jc .bad
   391 00001E79 488B3D(58C50300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   392 00001E80 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   393 00001E86 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   394                              <1>     ;Here ONLY if accessing critical Disk data structures
   395 00001E88 E868FEFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   396 00001E8D E87EF9FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   397 00001E92 E868FEFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   398 00001E97 720C                <1>     jc .bad
   399 00001E99 E8A7FBFFFF          <1>     call getUserRegs
   400 00001E9E 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   401 00001EA2 30C0                <1>     xor al, al
   402 00001EA4 C3                  <1>     ret
   403                              <1> .bad:
   404 00001EA5 B0FF                <1>     mov al, -1
   405 00001EA7 C3                  <1>     ret
   406                              <1> 
   407                              <1> getInDOSflagPtr:   ;ah = 34h
   408 00001EA8 488D15(64C30300)    <1>     lea rdx, inDOS
   409 00001EAF E891FBFFFF          <1>     call getUserRegs
   410 00001EB4 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   411 00001EB8 C3                  <1>     ret
   412                              <1> getIntVector:      ;ah = 35h
   413                              <1> ;Called with:
   414                              <1> ;   al = Interrupt Number
   415                              <1> ;Returns:
   416                              <1> ;   rbx = Pointer to interrupt handler
   417 00001EB9 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   418 00001EBB B807F00000          <1>     mov eax, 0F007h
   419 00001EC0 CD35                <1>     int 35h
   420 00001EC2 E87EFBFFFF          <1>     call getUserRegs
   421 00001EC7 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   422 00001ECB 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   423 00001ECD C3                  <1>     ret
   424                              <1> 
   425                              <1> getDiskFreeSpace:  ;ah = 36h
   426 00001ECE 84D2                <1>     test dl, dl
   427 00001ED0 7508                <1>     jnz .gdfsSkipdefault
   428 00001ED2 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   429 00001ED8 FEC2                <1>     inc dl
   430                              <1> .gdfsSkipdefault:
   431 00001EDA FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   432 00001EDC 88D0                <1>     mov al, dl
   433 00001EDE E86AFBFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   434 00001EE3 732E                <1>     jnc .gdfsDPBFound
   435                              <1> ;Else, we at an error.
   436                              <1> ;Simply return with CY set and error code in al with extended error info
   437 00001EE5 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   437 00001EED 00                  <1>
   438 00001EEE C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   439 00001EF5 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   440 00001EFC C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   441 00001F03 E83DFBFFFF          <1>     call getUserRegs
   442 00001F08 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   443 00001F0D 48834E5801          <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   444 00001F12 C3                  <1>     ret
   445                              <1> .gdfsDPBFound:
   446 00001F13 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   447 00001F16 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   448 00001F18 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   449 00001F1B 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ;Save the value in ecx
   450 00001F1F 8B5E31              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   451 00001F22 E81EFBFFFF          <1>     call getUserRegs
   452 00001F27 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   453 00001F2B 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   454 00001F2F 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   455 00001F33 C3                  <1>     ret
   456                              <1> 
   457                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   458 00001F34 31C0                <1>     xor eax, eax
   459 00001F36 668705(8BC30300)    <1>     xchg ax, word [errorLevel]
   460 00001F3D E803FBFFFF          <1>     call getUserRegs
   461 00001F42 668906              <1>     mov word [rsi + callerFrame.rax], ax
   462 00001F45 C3                  <1>     ret
   463                              <1> 
   464                              <1> getSysVarsPtr:     ;ah = 52h
   465 00001F46 488D15(2CC00300)    <1>     lea rdx, sysVarsPtr
   466 00001F4D E8F3FAFFFF          <1>     call getUserRegs
   467 00001F52 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   468 00001F56 C3                  <1>     ret
   469                              <1> 
   470                              <1> 
   471                              <1> ;AH = 53h - CREATE DPB
   472                              <1> createDPB:         ;generates a DPB from a given BPB
   473                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   474                              <1> ;This is done so that the other fields of the DPB can be recycled
   475                              <1> ;Input: rsi = ptr to the BPB
   476                              <1> ;       rbp = ptr to the DPB
   477                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   478                              <1> ;bMediaDescriptor
   479 00001F57 8A4615              <1>     mov al, byte [rsi + bpb.media]
   480 00001F5A 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   481                              <1> ;dFirstFreeCluster
   482 00001F5D C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   483                              <1> ;dNumberOfFreeClusters
   484 00001F64 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   485                              <1> ;wBytesPerSector
   486 00001F6B 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   487 00001F6F 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   488                              <1> ;bMaxSectorInCluster
   489 00001F73 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   490 00001F76 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   491 00001F78 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   492                              <1> ;bSectorsPerClusterShift
   493 00001F7B FEC0                <1>     inc al
   494 00001F7D 30C9                <1>     xor cl, cl
   495                              <1> .cd2:
   496 00001F7F D0E8                <1>     shr al, 1
   497 00001F81 7404                <1>     jz .cd3
   498 00001F83 FEC1                <1>     inc cl
   499 00001F85 EBF8                <1>     jmp short .cd2
   500                              <1> .cd3:
   501 00001F87 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   502                              <1> ;wFAToffset, number of reserved sectors in partition
   503 00001F8A 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   504 00001F8E 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   505                              <1> ;bNumberOfFATs
   506 00001F92 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   507 00001F95 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   508                              <1> ;wNumberRootDirSectors
   509 00001F98 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   510 00001F9C C1E005              <1>     shl eax, 5  ;Multiply by 32
   511 00001F9F 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   512 00001FA3 FFC9                <1>     dec ecx
   513 00001FA5 01C8                <1>     add eax, ecx
   514 00001FA7 31D2                <1>     xor edx, edx    ;Clear for divide
   515 00001FA9 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   516 00001FAB 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   517                              <1> ;dFATlength, get the FAT length
   518 00001FAF 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   519 00001FB3 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   520 00001FB6 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   521 00001FB8 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   522 00001FBB 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   523                              <1> ;Complex cases below...
   524                              <1> ;dClusterHeapOffset, start sector of the data area
   525 00001FBE 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   526 00001FC2 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   527 00001FC5 85C0                <1>     test eax, eax
   528 00001FC7 0F44C3              <1>     cmovz eax, ebx
   529                              <1> ;eax = FATsz
   530 00001FCA 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   531 00001FCE 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   532 00001FD1 85DB                <1>     test ebx, ebx
   533 00001FD3 0F44D9              <1>     cmovz ebx, ecx 
   534                              <1> ;ebx = TotSec
   535 00001FD6 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   536 00001FD9 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   537                              <1> .cd4:
   538 00001FDB 01C2                <1>     add edx, eax
   539 00001FDD FEC9                <1>     dec cl
   540 00001FDF 75FA                <1>     jnz .cd4
   541 00001FE1 89D0                <1>     mov eax, edx    ;Store product in eax
   542 00001FE3 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   543 00001FE7 01D0                <1>     add eax, edx
   544 00001FE9 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   545 00001FED 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   546                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   547                              <1>     ;aka eax = Start sector of the data area in volume
   548 00001FEF 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   549                              <1> ;dClusterCount
   550 00001FF2 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   551 00001FF4 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   552 00001FF6 31D2                <1>     xor edx, edx
   553 00001FF8 BB01000000          <1>     mov ebx, 1
   554 00001FFD 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   555 00002000 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   556 00002002 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   557 00002004 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   558 00002006 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   559                              <1> ;dFirstUnitOfRootDir
   560 00002009 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   561 0000200E 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   562 00002011 7709                <1>     ja .cd5
   563                              <1>     ;Else, we need to find the first sector of the root directory
   564                              <1>     ;Get the start sector of data area in volume 
   565                              <1>     ; and sub the number of sectors in the root directory
   566 00002013 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   567 00002016 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   568 0000201A 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   569                              <1> .cd5:
   570 0000201C 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   571                              <1> ;Exit epilogue
   572 0000201F 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   573 00002026 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   574                              <1>     %if DEBUG && DPBINFO
   575                              <1>     ;Print DPB 
   576                              <1>     debugEnterM
   577                              <1>     push rbp
   578                              <1>     lea rbp, .l0000
   579                              <1>     call debPrintNullString
   580                              <1>     pop rbp
   581                              <1>     call debDPBBPBptr
   582                              <1>     call debMakeDebuggerRespond
   583                              <1>     jmp short .l0001
   584                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   585                              <1> .l0001:
   586                              <1>     debugExitM
   587                              <1>     %endif
   588 00002028 C3                  <1>     ret
   589                              <1> 
   590                              <1> getVerifySetting:  ;ah = 54h
   591 00002029 8A05(2CC30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   592 0000202F C3                  <1>     ret
   593                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   594 00002030 C3                  <1>     ret
   595                              <1> getExtendedError:  ;ah = 59h
   596 00002031 E80FFAFFFF          <1>     call getUserRegs
   597 00002036 668B05(67C30300)    <1>     mov ax, word [errorExCde]
   598 0000203D 8A2D(66C30300)      <1>     mov ch, byte [errorLocus]
   599 00002043 8A3D(6AC30300)      <1>     mov bh, byte [errorClass]
   600 00002049 8A1D(69C30300)      <1>     mov bl, byte [errorAction]
   601 0000204F 668906              <1>     mov word [rsi + callerFrame.rax], ax
   602 00002052 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   603 00002056 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   604 00002059 C3                  <1>     ret
   605                              <1> getCritErrorInfo:  ;ah = 5Dh
   606                              <1> networkServices:   ;ah = 5Eh, do nothing
   607                              <1> networkRedirection:;ah = 5Fh, do nothing
   608 0000205A C3                  <1>     ret
   609                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   610                              <1> noOp:
   611 0000205B C3                  <1>     ret
    33                                  %include "./Source/Kernel/multiplx.asm"
    34                              <1> ;Default multiplexer. Current only installed function is ah=12h
    35                              <1> 
    36                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    37 0000205C 80FC12              <1>     cmp ah, 12h
    38 0000205F 751A                <1>     jne .exit       ;Exit if not for us
    39 00002061 3C01                <1>     cmp al, mDispTblL / 2
    40 00002063 7316                <1>     jae .exit   ;If above or equal, exit
    41 00002065 53                  <1>     push rbx
    42 00002066 51                  <1>     push rcx
    43 00002067 31C9                <1>     xor ecx, ecx
    44 00002069 488D1D7EE0FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    45 00002070 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    46 00002072 D1E1                <1>     shl ecx, 1   ;multiply by 2
    47 00002074 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    48 00002077 FFD3                <1>     call rbx
    49 00002079 59                  <1>     pop rcx
    50 0000207A 5B                  <1>     pop rbx
    51                              <1> .exit:
    52 0000207B 48CF                <1>     iretq
    53                              <1> multiplexTest:
    54 0000207D B0FF                <1>     mov al, -1
    55 0000207F C3                  <1>     ret
    34                                  %include "./Source/Misc/int44h.asm"
    35                              <1> critErrorHandler:   ;Int 44h
    36                              <1> ;User Stack in usage here, must be swapped to before this is called
    37                              <1> ;Entered with:  
    38                              <1> ;               AH = Critical Error Bitfield
    39                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    40                              <1> ;               Bit 6 - Reserved
    41                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    42                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    43                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    44                              <1> ;               Bits [2-1] = Affected Disk Error
    45                              <1> ;                     0 0   DOS area
    46                              <1> ;                     0 1   FAT area
    47                              <1> ;                     1 0   Directory area
    48                              <1> ;                     1 1   Data area
    49                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    50                              <1> ;               AL  = Failing drive number if AH[7] = 0
    51                              <1> ;               DIL = Error code for errorMsg
    52                              <1> ;               RSI = EA of Device Header for which device the error occured
    53                              <1> ;Return:
    54                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    55                              <1> ;                  = 1 - Retry the Operation    (Retry)
    56                              <1> ;                  = 2 - Terminate the Program  (Abort)
    57                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    58 00002080 53                  <1>     push rbx
    59 00002081 51                  <1>     push rcx
    60 00002082 52                  <1>     push rdx
    61 00002083 57                  <1>     push rdi
    62 00002084 56                  <1>     push rsi
    63 00002085 FC                  <1>     cld         ;Make String ops go forward
    64                              <1> 
    65 00002086 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    66 00002089 488D1558020000      <1>     lea rdx, qword [.crlf]
    67 00002090 B409                <1>     mov ah, 09h ;Print String
    68 00002092 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    69                              <1> 
    70 00002094 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    71 0000209A B90C000000          <1>     mov ecx, 0Ch
    72 0000209F 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    73 000020A1 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    74 000020A4 480FB7FF            <1>     movzx rdi, di
    75 000020A8 4889FA              <1>     mov rdx, rdi    ;Copy error code
    76 000020AB 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    77 000020AF 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    78 000020B2 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    79 000020B5 488D151D010000      <1>     lea rdx, qword [.errorMsgTable]
    80 000020BC 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    81 000020C0 B409                <1>     mov ah, 09h ;Print String
    82 000020C2 CD41                <1>     int 41h     ;Call DOS to print first part of message
    83                              <1> 
    84 000020C4 488D15FF010000      <1>     lea rdx, qword [.readmsg]
    85 000020CB 488D3D07020000      <1>     lea rdi, qword [.writemsg]
    86 000020D2 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    87 000020D5 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    88 000020D9 B409                <1>     mov ah, 09h ;Print String
    89 000020DB CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    90                              <1> 
    91 000020DD F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    92 000020E0 0F85DC000000        <1>     jnz .charError
    93                              <1> ;Disk error continues here
    94 000020E6 488D15D6010000      <1>     lea rdx, qword [.drive] ;Drive message
    95 000020ED B409                <1>     mov ah, 09h
    96 000020EF CD41                <1>     int 41h
    97 000020F1 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    98 000020F3 80C241              <1>     add dl, "A" ;Add ASCII code
    99 000020F6 B402                <1>     mov ah, 02h ;Print char in dl
   100 000020F8 CD41                <1>     int 41h
   101                              <1> .userInput:
   102 000020FA 488D15E7010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   103 00002101 B409                <1>     mov ah, 09h
   104 00002103 CD41                <1>     int 41h
   105                              <1> ;Abort, Retry, Ignore, Fail is word order
   106                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   107                              <1> .userAbort:
   108                              <1> ;Abort is always an option
   109 00002105 488D15DF010000      <1>     lea rdx, qword [.abortmsg]
   110 0000210C B409                <1>     mov ah, 09h
   111 0000210E CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   112                              <1> .userRetry:
   113 00002110 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   114 00002113 7416                <1>     jz .userIgnore    ;If clear, dont print message
   115 00002115 488D15E7010000      <1>     lea rdx, qword [.betweenMsg]
   116 0000211C B409                <1>     mov ah, 09h
   117 0000211E CD41                <1>     int 41h
   118 00002120 488D15D1010000      <1>     lea rdx, qword [.retrymsg]
   119 00002127 B409                <1>     mov ah, 09h
   120 00002129 CD41                <1>     int 41h
   121                              <1> .userIgnore:
   122 0000212B F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   123 0000212E 7416                <1>     jz .userFail
   124 00002130 488D15CC010000      <1>     lea rdx, qword [.betweenMsg]
   125 00002137 B409                <1>     mov ah, 09h
   126 00002139 CD41                <1>     int 41h
   127 0000213B 488D15AF010000      <1>     lea rdx, qword [.ignoremsg]
   128 00002142 B409                <1>     mov ah, 09h
   129 00002144 CD41                <1>     int 41h
   130                              <1> .userFail:
   131 00002146 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   132 00002149 7416                <1>     jz .userMsgEnd
   133 0000214B 488D15B1010000      <1>     lea rdx, qword [.betweenMsg]
   134 00002152 B409                <1>     mov ah, 09h
   135 00002154 CD41                <1>     int 41h
   136 00002156 488D15A1010000      <1>     lea rdx, qword [.failmsg]
   137 0000215D B409                <1>     mov ah, 09h
   138 0000215F CD41                <1>     int 41h
   139                              <1> .userMsgEnd:
   140 00002161 488D159E010000      <1>     lea rdx, qword [.endMsg]
   141 00002168 B409                <1>     mov ah, 09h
   142 0000216A CD41                <1>     int 41h
   143                              <1> ;Get user input now 
   144 0000216C 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   145 0000216E 488D3D94010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   146 00002175 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   147 00002177 CD41                <1>     int 41h ;Get char in al
   148 00002179 3C61                <1>     cmp al, "a" ;Chack if lowercase
   149 0000217B 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   150 0000217D 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   151                              <1> .uip1:
   152 0000217F AE                  <1>     scasb   ;Compare char to list, offset gives return code
   153 00002180 740C                <1>     je .validInput  ;If they are equal, ecx has return code
   154 00002182 FFC1                <1>     inc ecx
   155 00002184 83F904              <1>     cmp ecx, 4
   156 00002187 75F6                <1>     jne .uip1
   157 00002189 E96CFFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   158                              <1> .validInput:
   159 0000218E 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   160                              <1> ;Now check if the input is permitted
   161 00002190 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   162 00002192 7427                <1>     je .cehExit
   163 00002194 84C0                <1>     test al, al ;Check if 0 => Ignore
   164 00002196 740F                <1>     je .viIgnore
   165 00002198 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   166 0000219A 7416                <1>     je .viRetry
   167                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   168 0000219C F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   169 0000219F 0F8455FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   170 000021A5 EB14                <1>     jmp short .cehExit
   171                              <1> .viIgnore:
   172 000021A7 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   173 000021AA 0F844AFFFFFF        <1>     jz .userInput
   174 000021B0 EB09                <1>     jmp short .cehExit
   175                              <1> .viRetry:
   176 000021B2 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   177 000021B5 0F843FFFFFFF        <1>     jz .userInput
   178                              <1> .cehExit:
   179 000021BB 5E                  <1>     pop rsi
   180 000021BC 5F                  <1>     pop rdi
   181 000021BD 5A                  <1>     pop rdx
   182 000021BE 59                  <1>     pop rcx
   183 000021BF 5B                  <1>     pop rbx
   184 000021C0 48CF                <1>     iretq
   185                              <1> .charError:
   186 000021C2 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   187 000021C7 4883C61A            <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   188                              <1> .ce1:
   189 000021CB AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   190 000021CC 88C2                <1>     mov dl, al  ;Move char into dl
   191 000021CE B402                <1>     mov ah, 02h
   192 000021D0 CD41                <1>     int 41h ;Print char
   193 000021D2 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   194 000021D4 E921FFFFFF          <1>     jmp .userInput
   195                              <1> 
   196                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   197 000021D9 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   197 000021E2 746563742024202020  <1>
   198 000021EB 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   198 000021F4 6E6974202420202020  <1>
   199 000021FD 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   199 00002206 202420202020202020  <1>
   200 0000220F 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   200 00002218 6F6D6D616E64202420  <1>
   201 00002221 446174612024202020- <1>             db "Data $            "       ;Error 4
   201 0000222A 202020202020202020  <1>
   202 00002233 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   202 0000223C 737420242020202020  <1>
   203 00002245 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   203 0000224E 202020202020202020  <1>
   204 00002257 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   204 00002260 656469612024202020  <1>
   205 00002269 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   205 00002272 7420466F756E642024  <1>
   206 0000227B 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   206 00002284 706572202420202020  <1>
   207 0000228D 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   207 00002296 6C7420242020202020  <1>
   208 0000229F 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   208 000022A8 742024202020202020  <1>
   209 000022B1 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   209 000022BA 61696C757265202420  <1>
   210                              <1> 
   211 000022C3 64726976652024      <1> .drive      db "drive $"
   212 000022CA 6572726F7220726561- <1> .readmsg    db "error reading $"
   212 000022D3 64696E672024        <1>
   213 000022D9 6572726F7220777269- <1> .writemsg   db "error writing $"
   213 000022E2 74696E672024        <1>
   214 000022E8 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   215 000022EB 41626F727424        <1> .abortmsg   db "Abort$" 
   216 000022F1 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   217 000022F8 526574727924        <1> .retrymsg   db "Retry$"
   218 000022FE 4661696C24          <1> .failmsg    db "Fail$"
   219 00002303 2C2024              <1> .betweenMsg db ", $"
   220 00002306 3F2024              <1> .endMsg     db "? $"
   221 00002309 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    35                                  %include "./Source/Drivers/drvData.asm"
    36                              <1> ;-----------------------------------:
    37                              <1> ;          Driver routines          :
    38                              <1> ;-----------------------------------:
    39                              <1> drivers:
    40                              <1> conHdr:
    41 0000230D [2F23000000000000]  <1>     dq auxHdr
    42 00002315 1308                <1>     dw 0813h
    43 00002317 [AD24000000000000]  <1>     dq commonStrat
    44 0000231F [BC24000000000000]  <1>     dq conDriver
    45 00002327 434F4E2020202020    <1>     db "CON     "
    46                              <1> auxHdr:
    47 0000232F [5123000000000000]  <1>     dq prnHdr
    48 00002337 0080                <1>     dw 08000h
    49 00002339 [AD24000000000000]  <1>     dq commonStrat
    50 00002341 [7E27000000000000]  <1>     dq com1Intr
    51 00002349 4155582020202020    <1>     db "AUX     "
    52                              <1> prnHdr:
    53 00002351 [7323000000000000]  <1>     dq clkHdr
    54 00002359 40A0                <1>     dw 0A040h
    55 0000235B [B524000000000000]  <1>     dq nulStrat
    56 00002363 [BB24000000000000]  <1>     dq nulIntr
    57 0000236B 50524E2020202020    <1>     db "PRN     "
    58                              <1> clkHdr:
    59 00002373 [9523000000000000]  <1>     dq msdHdr
    60 0000237B 0880                <1>     dw 08008h
    61 0000237D [AD24000000000000]  <1>     dq commonStrat
    62 00002385 [FF25000000000000]  <1>     dq clkDriver
    63 0000238D 434C4F434B242020    <1>     db "CLOCK$  "
    64                              <1> msdHdr:
    65 00002395 [B723000000000000]  <1>     dq com1Hdr
    66 0000239D 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    67 0000239F [AD24000000000000]  <1>     dq commonStrat
    68 000023A7 [2129000000000000]  <1>     dq msdDriver
    69 000023AF 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    70                              <1> com1Hdr:
    71 000023B7 [D923000000000000]  <1>     dq com2Hdr
    72 000023BF 0080                <1>     dw 08000h
    73 000023C1 [AD24000000000000]  <1>     dq commonStrat
    74 000023C9 [7E27000000000000]  <1>     dq com1Intr
    75 000023D1 434F4D3120202020    <1>     db "COM1    "
    76                              <1> com2Hdr:
    77 000023D9 [FB23000000000000]  <1>     dq com3Hdr
    78 000023E1 0080                <1>     dw 08000h
    79 000023E3 [AD24000000000000]  <1>     dq commonStrat
    80 000023EB [8727000000000000]  <1>     dq com2Intr
    81 000023F3 434F4D3220202020    <1>     db "COM2    "
    82                              <1> com3Hdr:
    83 000023FB [1D24000000000000]  <1>     dq com4Hdr
    84 00002403 0080                <1>     dw 08000h
    85 00002405 [AD24000000000000]  <1>     dq commonStrat
    86 0000240D [9027000000000000]  <1>     dq com3Intr
    87 00002415 434F4D3320202020    <1>     db "COM3    "
    88                              <1> com4Hdr:
    89 0000241D [3F24000000000000]  <1>     dq lpt1Hdr
    90 00002425 0080                <1>     dw 08000h
    91 00002427 [AD24000000000000]  <1>     dq commonStrat
    92 0000242F [9927000000000000]  <1>     dq com4Intr
    93 00002437 434F4D3420202020    <1>     db "COM4    "
    94                              <1> lpt1Hdr:
    95 0000243F [6124000000000000]  <1>     dq lpt2Hdr
    96 00002447 40A0                <1>     dw 0A040h
    97 00002449 [B524000000000000]  <1>     dq nulStrat
    98 00002451 [BB24000000000000]  <1>     dq nulIntr
    99 00002459 4C50543120202020    <1>     db "LPT1    "
   100                              <1> lpt2Hdr:
   101 00002461 [8324000000000000]  <1>     dq lpt3Hdr
   102 00002469 40A0                <1>     dw 0A040h
   103 0000246B [B524000000000000]  <1>     dq nulStrat
   104 00002473 [BB24000000000000]  <1>     dq nulIntr
   105 0000247B 4C50543220202020    <1>     db "LPT2    "
   106                              <1> lpt3Hdr:
   107 00002483 FFFFFFFFFFFFFFFF    <1>     dq -1
   108 0000248B 40A0                <1>     dw 0A040h
   109 0000248D [B524000000000000]  <1>     dq nulStrat
   110 00002495 [BB24000000000000]  <1>     dq nulIntr
   111 0000249D 4C50543320202020    <1>     dq "LPT3    "
   112 000024A5 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    36                                  %include "./Source/Drivers/charDrv.asm"
    37                              <1> commonStrat:
    38                              <1> ;DOS calls this function with rbx=Ptr to request header
    39 000024AD 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    40 000024B4 C3                  <1>     ret
    41                              <1> nulStrat:
    42 000024B5 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    43                              <1> nulIntr:
    44 000024BB C3                  <1>     ret
    45                              <1> conDriver:
    46 000024BC 50                  <1>     push rax
    47 000024BD 53                  <1>     push rbx
    48 000024BE 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    49 000024C5 B003                <1>     mov al, 03h ;Unknown Command
    50 000024C7 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    51 000024CB 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    52                              <1> 
    53 000024CD 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    54 000024D0 3C04                <1>     cmp al, 4
    55 000024D2 743D                <1>     jz .conRead
    56 000024D4 3C05                <1>     cmp al, 5
    57 000024D6 747F                <1>     jz .conNondestructiveRead
    58 000024D8 3C06                <1>     cmp al, 6
    59 000024DA 0F84A2000000        <1>     jz .conInputStatus
    60 000024E0 3C07                <1>     cmp al, 7
    61 000024E2 0F84AA000000        <1>     jz .conFlushInputBuffers
    62 000024E8 3C08                <1>     cmp al, 8
    63 000024EA 0F84C4000000        <1>     jz .conWrite
    64 000024F0 3C09                <1>     cmp al, 9
    65 000024F2 0F84BC000000        <1>     jz .conWrite
    66 000024F8 3C0A                <1>     cmp al, 0Ah
    67 000024FA 0F84DD000000        <1>     jz .conOutputStatus
    68 00002500 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    69                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    70 00002502 B480                <1>     mov ah, 80h ;Set error bit
    71 00002504 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    72                              <1> .conExit:
    73 00002508 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    74 0000250E 5B                  <1>     pop rbx
    75 0000250F 58                  <1>     pop rax
    76 00002510 C3                  <1>     ret
    77                              <1> .conRead:    ;Function 4
    78 00002511 B005                <1>     mov al, 05h ;Bad request structure length?
    79 00002513 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    80 00002516 75EA                <1>     jne .conWriteErrorCode
    81                              <1> 
    82 00002518 57                  <1>     push rdi
    83 00002519 51                  <1>     push rcx
    84 0000251A 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    85 0000251E 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    86                              <1> .cre1:
    87 00002520 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    88 00002523 741C                <1>     je .cre2
    89 00002525 803DC100000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    90 0000252C 751A                <1>     jnz .cre3   ;No, get the buffer value
    91 0000252E 31C0                <1>     xor eax, eax
    92 00002530 CD36                <1>     int 36h
    93                              <1> .cre11:
    94 00002532 AA                  <1>     stosb
    95 00002533 84C0                <1>     test al, al ;Was the ascii code stored 0?
    96 00002535 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    97 00002537 8825B0000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    98                              <1> .cre12:
    99 0000253D FFC1                <1>     inc ecx ;Inc chars stored in buffer
   100 0000253F EBDF                <1>     jmp short .cre1
   101                              <1> .cre2:
   102 00002541 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   103 00002544 59                  <1>     pop rcx
   104 00002545 5F                  <1>     pop rdi
   105 00002546 EBC0                <1>     jmp short .conExit
   106                              <1> .cre3:
   107 00002548 8A059F000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   108 0000254E C6059800000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   109 00002555 EBDB                <1>     jmp short .cre11
   110                              <1> 
   111                              <1> .conNondestructiveRead:  ;Function 5
   112 00002557 B005                <1>     mov al, 05h ;Bad request structure length?
   113 00002559 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   114 0000255C 75A4                <1>     jne .conWriteErrorCode
   115 0000255E 803D8800000000      <1>     cmp byte [.conBuf], 0
   116 00002565 7513                <1>     jnz .cnr2
   117 00002567 B401                <1>     mov ah, 01h     ;Get key if exists
   118 00002569 CD36                <1>     int 36h
   119 0000256B 7405                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   120                              <1>     ;Keystroke available
   121                              <1> .cnr0:
   122 0000256D 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   123 00002570 EB96                <1>     jmp .conExit
   124                              <1> .cnr1: ;No keystroke available
   125 00002572 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   126 00002578 EB8E                <1>     jmp .conExit
   127                              <1> .cnr2:
   128 0000257A 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   129 00002580 EBEB                <1>     jmp short .cnr0   ;Keystroke is available clearly
   130                              <1> 
   131                              <1> .conInputStatus:         ;Function 6
   132 00002582 B005                <1>     mov al, 05h ;Bad request structure length?
   133 00002584 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   134 00002587 0F8575FFFFFF        <1>     jne .conWriteErrorCode
   135 0000258D E976FFFFFF          <1>     jmp .conExit ;Exit, device ready
   136                              <1> 
   137                              <1> .conFlushInputBuffers:   ;Function 7
   138 00002592 B005                <1>     mov al, 05h ;Bad request structure length?
   139 00002594 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   140 00002597 0F8565FFFFFF        <1>     jne .conWriteErrorCode
   141 0000259D C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   142                              <1> .cfib0:
   143 000025A4 B401                <1>     mov ah, 01      ;Get buffer status
   144 000025A6 CD36                <1>     int 36h
   145 000025A8 0F845AFFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   146 000025AE 30E4                <1>     xor ah, ah
   147 000025B0 CD36                <1>     int 36h ;Read key to flush from buffer
   148 000025B2 EBF0                <1>     jmp short .cfib0
   149                              <1> 
   150                              <1> .conWrite:   ;Function 8 and 9
   151 000025B4 B005                <1>     mov al, 05h ;Bad request structure length?
   152 000025B6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   153 000025B9 0F8543FFFFFF        <1>     jne .conWriteErrorCode
   154                              <1> 
   155 000025BF 56                  <1>     push rsi
   156 000025C0 51                  <1>     push rcx
   157 000025C1 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   158 000025C5 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   159                              <1> .cw1: 
   160 000025C7 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   161 000025CA 7407                <1>     je .cw2
   162 000025CC AC                  <1>     lodsb   ;Get char into al, and inc rsi
   163 000025CD CD49                <1>     int 49h ;Fast print char
   164 000025CF FFC1                <1>     inc ecx
   165 000025D1 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   166                              <1> .cw2:
   167 000025D3 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   168 000025D6 59                  <1>     pop rcx
   169 000025D7 5E                  <1>     pop rsi
   170 000025D8 E92BFFFFFF          <1>     jmp .conExit
   171                              <1> .conOutputStatus:   ;Function 0Ah
   172 000025DD B005                <1>     mov al, 05h ;Bad request structure length?
   173 000025DF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   174 000025E2 0F851AFFFFFF        <1>     jne .conWriteErrorCode
   175 000025E8 E91BFFFFFF          <1>     jmp .conExit
   176                              <1> 
   177 000025ED 00                  <1> .conBuf db 0    ;Single byte buffer
   178                              <1> fastOutput:         ;This CON driver supports Int 49h
   179                              <1> ;Called with char to transfer in al
   180 000025EE 50                  <1>     push rax
   181 000025EF B40E                <1>     mov ah, 0Eh
   182 000025F1 CD30                <1>     int 30h
   183 000025F3 58                  <1>     pop rax
   184 000025F4 48CF                <1>     iretq
   185                              <1> ctrlBreak:
   186                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   187 000025F6 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   188 000025FD 48CF                <1>     iretq
   189                              <1> 
   190                              <1> clkDriver:
   191 000025FF 50                  <1>     push rax
   192 00002600 53                  <1>     push rbx
   193 00002601 51                  <1>     push rcx
   194 00002602 52                  <1>     push rdx
   195 00002603 56                  <1>     push rsi
   196 00002604 55                  <1>     push rbp
   197 00002605 488B1D99FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   198 0000260C B003                <1>     mov al, 03h ;Unknown Command
   199 0000260E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   200 00002612 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   201                              <1> 
   202 00002614 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   203 00002617 3C04                <1>     cmp al, 04h
   204 00002619 7437                <1>     jz .clkRead
   205 0000261B 3C06                <1>     cmp al, 06h
   206 0000261D 0F8491000000        <1>     jz .clkInputStatus
   207 00002623 3C07                <1>     cmp al, 07h
   208 00002625 0F8492000000        <1>     jz .clkFlushInputBuffers
   209 0000262B 3C08                <1>     cmp al, 08h
   210 0000262D 0F849A000000        <1>     jz .clkWrite
   211 00002633 3C09                <1>     cmp al, 09h
   212 00002635 0F8492000000        <1>     jz .clkWrite
   213 0000263B EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   214                              <1> .clkNotFunctioning:
   215 0000263D B002                <1>     mov al, 02h ;Device not ready error
   216                              <1> .clkWriteErrorCode:
   217 0000263F B480                <1>     mov ah, 80h ;Set error bit
   218 00002641 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   219                              <1> .clkExit:
   220 00002645 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   221 0000264B 5D                  <1>     pop rbp
   222 0000264C 5E                  <1>     pop rsi
   223 0000264D 5A                  <1>     pop rdx
   224 0000264E 59                  <1>     pop rcx
   225 0000264F 5B                  <1>     pop rbx
   226 00002650 58                  <1>     pop rax
   227 00002651 C3                  <1>     ret
   228                              <1> 
   229                              <1> .clkRead:           ;Function 4
   230 00002652 B005                <1>     mov al, 05h ;Bad request structure length?
   231 00002654 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   232 00002657 75E6                <1>     jne .clkWriteErrorCode
   233                              <1> 
   234 00002659 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   235 0000265C 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   236 00002660 668B05F0000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   237 00002667 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   238 0000266B 30E4                <1>     xor ah, ah
   239 0000266D CD3A                <1>     int 3Ah         ;Read the system timer
   240 0000266F 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   241 00002671 740D                <1>     jz .clkr1       ;Nope, now just time 
   242 00002673 30E4                <1>     xor ah, ah
   243                              <1>     ;This works as al should keep count of the # of days passed since last read
   244 00002675 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   245 00002679 660105D7000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   246                              <1> .clkr1:
   247 00002680 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   248 00002683 0FB7D2              <1>     movzx edx, dx
   249 00002686 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   250 00002688 89D0                <1>     mov eax, edx
   251 0000268A 31D2                <1>     xor edx, edx
   252 0000268C 89D8                <1>     mov eax, ebx
   253 0000268E B944040000          <1>     mov ecx, 1092   
   254 00002693 F7F1                <1>     div ecx
   255 00002695 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   256 00002698 89D0                <1>     mov eax, edx    ;Get remainder in eax
   257 0000269A 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   258 0000269E 31D2                <1>     xor edx, edx
   259 000026A0 B95B000000          <1>     mov ecx, 91 ;5*18.2
   260 000026A5 F7F1                <1>     div ecx
   261 000026A7 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   262 000026AA 89D0                <1>     mov eax, edx    ;Get remainder in eax
   263                              <1>     ;lea eax, dword [eax + 4*eax]
   264                              <1>     ;add eax, edx    ;Essentially multiply by 6
   265 000026AC 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   266 000026AF 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   267 000026B2 EB91                <1>     jmp .clkExit
   268                              <1> 
   269                              <1> .clkInputStatus:    ;Function 6
   270                              <1> ;Always return ready
   271 000026B4 B005                <1>     mov al, 05h ;Bad request structure length?
   272 000026B6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   273 000026B9 7584                <1>     jne .clkWriteErrorCode
   274 000026BB EB88                <1>     jmp .clkExit
   275                              <1> .clkFlushInputBuffers:  ;Function 7
   276                              <1> ;Always return done immediately
   277 000026BD B005                <1>     mov al, 05h ;Bad request structure length?
   278 000026BF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   279 000026C2 0F8577FFFFFF        <1>     jne .clkWriteErrorCode
   280 000026C8 E978FFFFFF          <1>     jmp .clkExit
   281                              <1> 
   282                              <1> .clkWrite:          ;Functions 8 and 9
   283 000026CD B005                <1>     mov al, 05h ;Bad request structure length?
   284 000026CF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   285 000026D2 0F8567FFFFFF        <1>     jne .clkWriteErrorCode
   286                              <1> 
   287 000026D8 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   288 000026DB 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   289 000026DF 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   290 000026E3 6689056D000000      <1>     mov word [.clkDate], ax ;Save date internally
   291                              <1> 
   292 000026EA 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   293 000026EC 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   294 000026F0 B105                <1>     mov cl, 5
   295 000026F2 F6F1                <1>     div cl          ;Divide al by 5
   296 000026F4 30E4                <1>     xor ah, ah      ;Remove the remainder
   297 000026F6 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   298                              <1> ;Using the decimal part of this formula for the low count
   299                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   300 000026F8 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   301 000026FB B912000000          <1>     mov ecx, 18
   302 00002700 F7E1                <1>     mul ecx  
   303 00002702 01C3                <1>     add ebx, eax
   304                              <1> 
   305 00002704 31D2                <1>     xor edx, edx
   306 00002706 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   307 0000270A B944040000          <1>     mov ecx, 1092
   308 0000270F F7E1                <1>     mul ecx
   309 00002711 01C3                <1>     add ebx, eax
   310 00002713 89DA                <1>     mov edx, ebx    ;edx now has low count
   311 00002715 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   312 00002719 B401                <1>     mov ah, 01h     ;Set the system time
   313 0000271B CD3A                <1>     int 3Ah
   314                              <1> 
   315 0000271D 4889F3              <1>     mov rbx, rsi
   316 00002720 E920FFFFFF          <1>     jmp .clkExit
   317                              <1> 
   318                              <1> .clkBCDtoHex:
   319                              <1> ;Converts a BCD value to a Hex byte
   320                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   321 00002725 51                  <1>     push rcx
   322 00002726 0FB6C0              <1>     movzx eax, al   ;Zero extend
   323 00002729 89C1                <1>     mov ecx, eax    ;Save al in ecx
   324 0000272B 83E00F              <1>     and eax, 0Fh    ;Get lower nybble
   325 0000272E 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   326 00002734 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   327                              <1> .cbth0:
   328 00002737 83C00A              <1>     add eax, 10
   329 0000273A E2FB                <1>     loop .cbth0
   330 0000273C 59                  <1>     pop rcx
   331 0000273D C3                  <1>     ret
   332                              <1> 
   333                              <1> .clkHexToBCD:
   334                              <1> ;Converts a Hex byte into two BCD digits
   335                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   336 0000273E 51                  <1>     push rcx
   337 0000273F 0FB6C0              <1>     movzx eax, al   ;Zero extend
   338 00002742 31C9                <1>     xor ecx, ecx
   339                              <1> .chtb0:
   340 00002744 83F80A              <1>     cmp eax, 10
   341 00002747 7207                <1>     jb .chtb1
   342 00002749 83E80A              <1>     sub eax, 10
   343 0000274C FFC1                <1>     inc ecx
   344 0000274E EBF4                <1>     jmp short .chtb0
   345                              <1> .chtb1:
   346 00002750 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   347 00002753 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   348 00002755 59                  <1>     pop rcx
   349 00002756 C3                  <1>     ret
   350 00002757 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   351                              <1> ;When counting the number of days, first compute the number of years since
   352                              <1> ; 1980 and your year. 
   353                              <1> ;Then, using the table below, find the number of leap years between 1980
   354                              <1> ; and (YourYear - 1). 
   355                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   356                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   357                              <1> ;Use the months table to get the number of days in a normal month as leap 
   358                              <1> ; years are added using the previous comment.
   359                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   360                              <1> ; a leap year using the table. If it is, add an extra day.
   361                              <1> .clkLeapYears:
   362 00002759 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   362 00002762 24282C30            <1>
   363 00002766 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   363 0000276F 585C60              <1>
   364                              <1> .clkMonths:
   365 00002772 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   365 0000277B 1F1E1F              <1>
   366                              <1> ;COM Driver headers and main interrupt strat
   367                              <1> com1Intr:
   368 0000277E C6059B01000000      <1>     mov byte [comIntr.comDevice], 0
   369 00002785 EB19                <1>     jmp short comIntr
   370                              <1> com2Intr:
   371 00002787 C6059201000001      <1>     mov byte [comIntr.comDevice], 1
   372 0000278E EB10                <1>     jmp short comIntr
   373                              <1> com3Intr:
   374 00002790 C6058901000002      <1>     mov byte [comIntr.comDevice], 2
   375 00002797 EB07                <1>     jmp short comIntr
   376                              <1> com4Intr:
   377 00002799 C6058001000003      <1>     mov byte [comIntr.comDevice], 3
   378                              <1> comIntr:
   379 000027A0 50                  <1>     push rax
   380 000027A1 53                  <1>     push rbx
   381 000027A2 51                  <1>     push rcx
   382 000027A3 52                  <1>     push rdx
   383 000027A4 56                  <1>     push rsi
   384 000027A5 57                  <1>     push rdi
   385 000027A6 488B1DF8FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   386 000027AD B003                <1>     mov al, 03h ;Unknown Command
   387 000027AF 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   388 000027B3 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   389                              <1> 
   390 000027B5 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   391 000027B8 3C04                <1>     cmp al, 4   ;Read Character(s)
   392 000027BA 7462                <1>     jz .comRead
   393 000027BC 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   394 000027BE 0F849B000000        <1>     jz .comNondestructiveRead   
   395 000027C4 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   396 000027C6 0F8484000000        <1>     jz .comReadInputStatus
   397 000027CC 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   398 000027CE 0F84B9000000        <1>     jz .comFlushInputBuffers
   399 000027D4 3C08                <1>     cmp al, 8
   400 000027D6 0F84DB000000        <1>     jz .comWrite
   401 000027DC 3C09                <1>     cmp al, 9
   402 000027DE 0F84D3000000        <1>     jz .comWrite
   403 000027E4 3C0A                <1>     cmp al, 0Ah
   404 000027E6 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   405 000027EC EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   406                              <1> .comErrorNoCount:
   407 000027EE B002                <1>     mov al, 02h ;Unknown device
   408 000027F0 EB19                <1>     jmp short .comWriteErrorCode
   409                              <1> .comReadError:
   410 000027F2 BA0B000000          <1>     mov edx, 0Bh
   411                              <1> .comWriteError:
   412 000027F7 BA0A000000          <1>     mov edx, 0Ah
   413                              <1> .comError:
   414 000027FC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   415 000027FF B902000000          <1>     mov ecx, 02h    ;Unknown device
   416 00002804 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   417 00002806 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   418 00002809 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   419                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   420 0000280B B480                <1>     mov ah, 80h ;Set error bit
   421 0000280D 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   422                              <1> .comExit:
   423 00002811 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   424 00002817 5F                  <1>     pop rdi
   425 00002818 5E                  <1>     pop rsi
   426 00002819 5A                  <1>     pop rdx
   427 0000281A 59                  <1>     pop rcx
   428 0000281B 5B                  <1>     pop rbx
   429 0000281C 58                  <1>     pop rax
   430 0000281D C3                  <1>     ret
   431                              <1> 
   432                              <1> .comRead:
   433 0000281E B005                <1>     mov al, 05h ;Bad request structure length?
   434 00002820 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   435 00002823 75E6                <1>     jne .comWriteErrorCode
   436                              <1> 
   437 00002825 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   438 00002829 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   439                              <1> .cr1:
   440 0000282B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   441 0000282E 741B                <1>     je .cre2
   442                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   443 00002830 B802000000          <1>     mov eax, 02h    ;Recieve 
   444 00002835 8A15E5000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   445 0000283B 6698                <1>     cbw     ;Zero extend to upper byte
   446 0000283D CD34                <1>     int 34h ;Recieve Char
   447 0000283F 72BB                <1>     jc .comError
   448 00002841 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   449 00002844 74EA                <1>     je .cr11
   450 00002846 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   451 00002847 FFC1                <1>     inc ecx
   452 00002849 EBE0                <1>     jmp short .cr1
   453                              <1> .cre2:
   454 0000284B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   455 0000284E EBC1                <1>     jmp short .comExit
   456                              <1> 
   457                              <1> .comReadInputStatus:
   458 00002850 B005                <1>     mov al, 05h ;Bad request structure length?
   459 00002852 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   460 00002855 75B4                <1>     jne .comWriteErrorCode
   461 00002857 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   462 0000285D EBB2                <1>     jmp short .comExit
   463                              <1> 
   464                              <1> .comNondestructiveRead:
   465                              <1> ;Acts like a "read one character if there is one" function
   466 0000285F B005                <1>     mov al, 05h ;Bad request structure length?
   467 00002861 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   468 00002864 75A5                <1>     jne .comWriteErrorCode
   469                              <1> .cndr1:
   470 00002866 B802000000          <1>     mov eax, 02h    ;Recieve 
   471 0000286B 8A15AF000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   472 00002871 6698                <1>     cbw     ;Zero extend to upper byte
   473 00002873 CD34                <1>     int 34h ;Recieve Char
   474 00002875 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   475 0000287B 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   476 0000287E 7405                <1>     je .cndr2
   477 00002880 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   478 00002883 EB8C                <1>     jmp short .comExit
   479                              <1> .cndr2:
   480 00002885 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   481 0000288B EB84                <1>     jmp short .comExit
   482                              <1> 
   483                              <1> .comFlushInputBuffers:
   484 0000288D B005                <1>     mov al, 05h ;Bad request structure length?
   485 0000288F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   486 00002892 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   487                              <1> .cfib0:
   488 00002898 8A1582000000        <1>     mov dl, byte [.comDevice]
   489 0000289E 6698                <1>     cbw
   490 000028A0 B802000000          <1>     mov eax, 02h    ;Recieve
   491 000028A5 CD34                <1>     int 34h
   492 000028A7 0F8241FFFFFF        <1>     jc .comErrorNoCount
   493 000028AD 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   494 000028B0 75E6                <1>     jne .cfib0
   495 000028B2 E95AFFFFFF          <1>     jmp .comExit
   496                              <1> 
   497                              <1> .comWrite:
   498 000028B7 B005                <1>     mov al, 05h ;Bad request structure length?
   499 000028B9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   500 000028BC 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   501                              <1> 
   502 000028C2 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   503 000028C6 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   504                              <1> .cw1: 
   505 000028C8 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   506 000028CB 7417                <1>     je .cw2
   507 000028CD AC                  <1>     lodsb   ;Get char into al, and inc rsi
   508 000028CE B401                <1>     mov ah, 01h ;Move function number into ah
   509 000028D0 8A154A000000        <1>     mov dl, byte [.comDevice]
   510 000028D6 6698                <1>     cbw     ;Zero extend to upper byte
   511 000028D8 CD34                <1>     int 34h ;Transmit char
   512 000028DA 0F821CFFFFFF        <1>     jc .comError
   513 000028E0 FFC1                <1>     inc ecx
   514 000028E2 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   515                              <1> .cw2:
   516 000028E4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   517 000028E7 E925FFFFFF          <1>     jmp .comExit
   518                              <1> 
   519                              <1> .comOutputStatus:
   520                              <1> ;Read MODEM status
   521 000028EC B005                <1>     mov al, 05h ;Bad request structure length?
   522 000028EE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   523 000028F1 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   524                              <1> 
   525 000028F7 8A1523000000        <1>     mov dl, byte [.comDevice]
   526 000028FD 6698                <1>     cbw     ;Zero extend to upper byte
   527 000028FF B403                <1>     mov ah, 03h     ;Get status
   528 00002901 CD34                <1>     int 34h
   529 00002903 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   530 00002909 83E010              <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   531 0000290C C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   532 0000290F F7D0                <1>     not eax      ;Bitwise inversion
   533 00002911 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   534 00002916 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   535 0000291B E9F1FEFFFF          <1>     jmp .comExit
   536 00002920 00                  <1> .comDevice   db 0
    37                                  %include "./Source/Drivers/diskDrv.asm"
    38                              <1> msdDriver:
    39 00002921 50                  <1>     push rax
    40 00002922 53                  <1>     push rbx
    41 00002923 51                  <1>     push rcx
    42 00002924 52                  <1>     push rdx
    43 00002925 56                  <1>     push rsi
    44 00002926 57                  <1>     push rdi
    45 00002927 55                  <1>     push rbp
    46 00002928 4150                <1>     push r8
    47 0000292A 488B1D74FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    48 00002931 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    49 00002935 B003                <1>     mov al, drvBadCmd
    50 00002937 0F87BC000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    51 0000293D B001                <1>     mov al, drvBadUnit 
    52 0000293F 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    53 00002943 0F87B0000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    54 00002949 488D354C030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    55 00002950 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    56 00002954 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    57 00002957 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    58 0000295B 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    59 0000295F D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    60 00002961 488D0D98000000      <1>     lea rcx, .msdTable
    61 00002968 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    62 0000296C 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    63 0000296E 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    64 00002970 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    65 00002973 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    66                              <1> .msdDriverExit:
    67 00002975 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    68 0000297B 4158                <1>     pop r8
    69 0000297D 5D                  <1>     pop rbp
    70 0000297E 5F                  <1>     pop rdi
    71 0000297F 5E                  <1>     pop rsi
    72 00002980 5A                  <1>     pop rdx
    73 00002981 59                  <1>     pop rcx
    74 00002982 5B                  <1>     pop rbx
    75 00002983 58                  <1>     pop rax
    76 00002984 C3                  <1>     ret
    77                              <1> 
    78                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    79 00002985 4889FB              <1>     mov rbx, rdi
    80 00002988 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    81 0000298B 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    82 0000298D 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    83                              <1> ;Now fall through to general error
    84                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    85 00002990 B401                <1>     mov ah, 01h
    86 00002992 CD33                <1>     int 33h ;Read status of last operation
    87 00002994 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    88 00002997 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    89 00002999 745E                <1>     je .msdWriteErrorCode 
    90 0000299B B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    91 0000299D 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    92 000029A0 7457                <1>     je .msdWriteErrorCode 
    93 000029A2 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    94 000029A5 7452                <1>     je .msdWriteErrorCode
    95                              <1> ;Device Not Ready
    96 000029A7 B002                <1>     mov al, 02h  ;Device not ready code
    97 000029A9 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    98 000029AC 744B                <1>     je .msdWriteErrorCode
    99 000029AE 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   100 000029B2 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   101                              <1> ;Write Protected
   102 000029B6 30C0                <1>     xor al, al
   103 000029B8 6683F927            <1>     cmp cx, 0027h   ;Write protected error
   104 000029BC 743B                <1>     je .msdWriteErrorCode
   105                              <1> ;CRC Error
   106 000029BE B004                <1>     mov al, 04h     ;CRC error code
   107 000029C0 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   108 000029C5 7432                <1>     je .msdWriteErrorCode
   109 000029C7 6683F910            <1>     cmp cx, 0010h   ;ID CRC or ECC error
   110 000029CB 742C                <1>     je .msdWriteErrorCode
   111 000029CD 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   112 000029D2 7425                <1>     je .msdWriteErrorCode
   113                              <1> ;Seek Error
   114 000029D4 B006                <1>     mov al, 06h     ;Seek error code
   115 000029D6 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   116 000029D9 741E                <1>     je .msdWriteErrorCode
   117                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   118                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   119 000029DB B007                <1>     mov al, 07h
   120 000029DD 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   121 000029E0 7417                <1>     je .msdWriteErrorCode
   122                              <1> ;Sector Not Found
   123 000029E2 B008                <1>     mov al, 08h     ;Sector not found code
   124 000029E4 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   125 000029E7 7410                <1>     je .msdWriteErrorCode
   126                              <1> ;Write faults
   127 000029E9 B00A                <1>     mov al, 0Ah     ;Write fault
   128 000029EB 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   129 000029EE 7409                <1>     je .msdWriteErrorCode
   130                              <1> ;Read faults
   131 000029F0 B00B                <1>     mov al, 0Bh     ;Read fault
   132 000029F2 80F911              <1>     cmp cl, 11h     ;Read error
   133 000029F5 7402                <1>     je .msdWriteErrorCode
   134                              <1> ;General Errors
   135 000029F7 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   136                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   137 000029F9 B480                <1>     mov ah, 80h ;Set error bit
   138 000029FB 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   139 000029FF C3                  <1>     ret ;Return to set done bit
   140                              <1> .msdTable:
   141 00002A00 0000                <1>     dw 0                            ;Function 0
   142 00002A02 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   143 00002A04 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   144 00002A06 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   145 00002A08 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   146 00002A0A 0000                <1>     dw 0                            ;Function 5
   147 00002A0C 0000                <1>     dw 0                            ;Function 6
   148 00002A0E 0000                <1>     dw 0                            ;Function 7
   149 00002A10 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   150 00002A12 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   151 00002A14 0000                <1>     dw 0                            ;Function 10
   152 00002A16 0000                <1>     dw 0                            ;Function 11
   153 00002A18 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   154 00002A1A D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   155 00002A1C ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   156 00002A1E 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   157 00002A20 0000                <1>     dw 0                            ;Function 16
   158 00002A22 0000                <1>     dw 0                            ;Function 17
   159 00002A24 0000                <1>     dw 0                            ;Function 18
   160 00002A26 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   161 00002A28 0000                <1>     dw 0                            ;Function 20
   162 00002A2A 0000                <1>     dw 0                            ;Function 21
   163 00002A2C 0000                <1>     dw 0                            ;Function 22
   164 00002A2E 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   165 00002A30 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   166                              <1> 
   167                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   168                              <1> .msdMedChk:          ;Function 1
   169 00002A32 B005                <1>     mov al, 05h ;Bad request structure length
   170 00002A34 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   171 00002A37 75C0                <1>     jne .msdWriteErrorCode
   172                              <1> 
   173 00002A39 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   174 00002A3E 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   175 00002A45 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   176 00002A48 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   177 00002A4B 753F                <1>     jnz .mmcNoChange
   178                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   179 00002A4D B416                <1>     mov ah, 16h 
   180 00002A4F CD33                <1>     int 33h
   181 00002A51 0F8239FFFFFF        <1>     jc .msdGenDiskError
   182 00002A57 80FC80              <1>     cmp ah, 80h
   183 00002A5A 740E                <1>     je .mmcNoChangeLine
   184 00002A5C 80FC86              <1>     cmp ah, 86h
   185 00002A5F 7409                <1>     je .mmcNoChangeLine
   186 00002A61 84E4                <1>     test ah, ah ;No change?
   187 00002A63 7427                <1>     jz .mmcNoChange
   188 00002A65 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   189 00002A68 750D                <1>     jnz .mmcChange
   190                              <1> ;If nothing, fall through and test manually, should never happen though
   191                              <1> .mmcNoChangeLine:
   192                              <1> ;Now we test Media Descriptor
   193 00002A6A 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   194 00002A6F 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   195 00002A72 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   196 00002A75 7410                <1>     je .mmcUnsure
   197                              <1> .mmcChange:
   198 00002A77 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   199 00002A7B 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   200 00002A82 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   201                              <1>     ;Check here if there were any open handles on the device when it was changed
   202 00002A86 C3                  <1>     ret
   203                              <1> .mmcUnsure:
   204 00002A87 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   205 00002A8B C3                  <1>     ret
   206                              <1> .mmcNoChange:
   207 00002A8C C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   208 00002A90 C3                  <1>     ret
   209                              <1> 
   210                              <1> 
   211                              <1> .msdBuildBPB:        ;Function 2
   212 00002A91 B005                <1>     mov al, 05h ;Bad request structure length
   213 00002A93 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   214 00002A96 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   215                              <1> 
   216 00002A9C 4889DE              <1>     mov rsi, rbx
   217 00002A9F 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   218 00002AA4 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   219 00002AAB 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   220 00002AAE 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   221 00002AB2 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   222 00002AB4 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   223 00002AB7 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   224 00002ABC CD33                <1>     int 33h
   225 00002ABE 0F82CCFEFFFF        <1>     jc .msdGenDiskError
   226                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   227 00002AC4 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   228 00002AC8 7418                <1>     je .mbbpb0
   229 00002ACA 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   230 00002ACE 7412                <1>     je .mbbpb0
   231 00002AD0 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   232 00002AD4 740C                <1>     je .mbbpb0
   233 00002AD6 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   234 00002ADA B007                <1>     mov al, 07h ;Unknown media error code
   235 00002ADC 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   236                              <1> .mbbpb0:
   237 00002AE2 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   238 00002AE5 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   239 00002AEA 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   240 00002AF1 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   241 00002AF5 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   242 00002AF8 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   243 00002AFC B90F000000          <1>     mov ecx, bpbEx_size/8
   244 00002B01 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   245 00002B04 C3                  <1>     ret
   246                              <1> .msdIOCTLRead:       ;Function 3, returns done
   247 00002B05 B005                <1>     mov al, drvBadDrvReq
   248 00002B07 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   249 00002B0A 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   250 00002B10 C3                  <1>     ret
   251                              <1> .msdRead:            ;Function 4
   252                              <1> ;Will read one sector at a time.
   253 00002B11 B005                <1>     mov al, 05h ;Bad request structure length
   254 00002B13 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   255 00002B16 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   256                              <1> 
   257 00002B1C 4889DF              <1>     mov rdi, rbx
   258 00002B1F 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   259                              <1> .msdr0:
   260 00002B21 B682                <1>     mov dh, 82h ;LBA Read Sectors
   261 00002B23 E841010000          <1>     call .msdBlkIOCommon
   262 00002B28 0F8257FEFFFF        <1>     jc .msdIOError
   263 00002B2E 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   264 00002B36 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   265 00002B3E FFC6                <1>     inc esi
   266 00002B40 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   267 00002B43 75DC                <1>     jne .msdr0
   268 00002B45 4889FB              <1>     mov rbx, rdi
   269 00002B48 C3                  <1>     ret
   270                              <1> .msdWrite:           ;Function 8
   271                              <1> ;Will write one sector at a time.
   272 00002B49 B005                <1>     mov al, 05h ;Bad request structure length
   273 00002B4B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   274 00002B4E 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   275                              <1> 
   276 00002B54 4889DF              <1>     mov rdi, rbx
   277 00002B57 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   278                              <1> .msdw0:
   279 00002B59 B683                <1>     mov dh, 83h ;LBA Write Sectors
   280 00002B5B E809010000          <1>     call .msdBlkIOCommon
   281 00002B60 0F821FFEFFFF        <1>     jc .msdIOError
   282 00002B66 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   283 00002B6E 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   284 00002B76 FFC6                <1>     inc esi
   285 00002B78 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   286 00002B7B 75DC                <1>     jne .msdw0
   287 00002B7D 4889FB              <1>     mov rbx, rdi
   288 00002B80 C3                  <1>     ret
   289                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   290                              <1> ;Will write one sector at a time and then verify it.
   291 00002B81 B005                <1>     mov al, 05h ;Bad request structure length
   292 00002B83 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   293 00002B86 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   294                              <1> 
   295 00002B8C 4889DF              <1>     mov rdi, rbx
   296 00002B8F 31F6                <1>     xor esi, esi  ;Set counter to zero
   297                              <1> .msdwv0:
   298 00002B91 B683                <1>     mov dh, 83h ;LBA Write Sectors
   299 00002B93 E8D1000000          <1>     call .msdBlkIOCommon
   300 00002B98 0F82E7FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   301 00002B9E B684                <1>     mov dh, 84h ;LBA Verify Sectors
   302 00002BA0 E8C4000000          <1>     call .msdBlkIOCommon
   303 00002BA5 0F82DAFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   304 00002BAB 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   305 00002BB3 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   306 00002BBB FFC6                <1>     inc esi
   307 00002BBD 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   308 00002BC0 75CF                <1>     jne .msdwv0
   309 00002BC2 4889FB              <1>     mov rbx, rdi
   310 00002BC5 C3                  <1>     ret
   311                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   312 00002BC6 B005                <1>     mov al, drvBadDrvReq
   313 00002BC8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   314 00002BCB 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   315                              <1> 
   316 00002BD1 C3                  <1>     ret
   317                              <1> .msdDevOpen:         ;Function 13
   318 00002BD2 B005                <1>     mov al, drvBadDrvReq
   319 00002BD4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   320 00002BD7 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   321                              <1> 
   322 00002BDD 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   323 00002BE2 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   324 00002BE9 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   325 00002BEC C3                  <1>     ret
   326                              <1> .msdDevClose:        ;Function 14
   327 00002BED B005                <1>     mov al, drvBadDrvReq
   328 00002BEF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   329 00002BF2 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   330                              <1> 
   331 00002BF8 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   332 00002BFD 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   333 00002C04 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   334 00002C07 C3                  <1>     ret
   335                              <1> .msdRemovableMedia:  ;Function 15
   336 00002C08 B005                <1>     mov al, drvBadDrvReq
   337 00002C0A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   338 00002C0D 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   339                              <1> 
   340 00002C13 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   341 00002C18 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   342 00002C1F 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   343 00002C22 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   344 00002C27 31D2                <1>     xor edx, edx    ;Busy bit clear
   345 00002C29 A880                <1>     test al, 80h
   346 00002C2B 0F44CA              <1>     cmovz ecx, edx
   347 00002C2E 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   348 00002C32 C3                  <1>     ret
   349                              <1> .msdGenericIOCTL:    ;Function 19
   350 00002C33 B005                <1>     mov al, drvBadDrvReq
   351 00002C35 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   352 00002C38 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   353                              <1> 
   354 00002C3E C3                  <1>     ret
   355                              <1> .msdGetLogicalDev:   ;Function 23
   356 00002C3F B005                <1>     mov al, drvBadDrvReq
   357 00002C41 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   358 00002C44 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   359                              <1> 
   360 00002C4A 8A0541000000        <1>     mov al, byte [.msdCurDev]
   361 00002C50 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   362 00002C53 C3                  <1>     ret
   363                              <1> .msdSetLogicalDev:   ;Function 24
   364 00002C54 B005                <1>     mov al, drvBadDrvReq
   365 00002C56 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   366 00002C59 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   367                              <1> 
   368 00002C5F 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   369 00002C62 880529000000        <1>     mov byte [.msdCurDev], al
   370 00002C68 C3                  <1>     ret
   371                              <1> 
   372                              <1> .msdBlkIOCommon:  ;Does block IO
   373                              <1> ;Called with rdi containing old rbx value and ah with function number
   374                              <1> ;rbp points to bpb
   375                              <1> ;Error handled by caller
   376                              <1> ;Sector count handled by caller
   377                              <1> ;Called with dh = BIOS function number
   378 00002C69 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   379 00002C6E 8A90[922C0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   380 00002C74 31C9                <1>     xor ecx, ecx
   381 00002C76 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   382 00002C79 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   383 00002C7D 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   384 00002C81 88F4                <1>     mov ah, dh
   385 00002C83 B001                <1>     mov al, 01h ;Do one sector at a time 
   386 00002C85 CD33                <1>     int 33h
   387 00002C87 C3                  <1>     ret
   388                              <1> 
   389 00002C88 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   390                              <1> ;LASTDRIVE default is 5
   391                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   392                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   393 00002C91 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   394                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   395 00002C92 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   396 00002C97 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   397 00002C9C 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   397 00002CA5 000000000000000000- <1>
   397 00002CAE 000000000000000000- <1>
   397 00002CB7 000000000000000000- <1>
   397 00002CC0 00000000            <1>
   398 00002CC4 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   398 00002CCD 000000000000000000- <1>
   398 00002CD6 000000000000000000- <1>
   398 00002CDF 000000000000000000- <1>
   398 00002CE8 000000000000000000- <1>
   398 00002CF1 000000000000000000- <1>
   398 00002CFA 000000000000000000- <1>
   398 00002D03 000000000000000000- <1>
   398 00002D0C 000000000000000000- <1>
   398 00002D15 000000000000000000- <1>
   398 00002D1E 000000000000000000- <1>
   398 00002D27 000000000000000000- <1>
   398 00002D30 000000000000000000- <1>
   398 00002D39 000000000000000000- <1>
   398 00002D42 000000000000000000- <1>
   398 00002D4B 000000000000000000- <1>
   398 00002D54 000000000000000000- <1>
   398 00002D5D 000000000000000000- <1>
   398 00002D66 000000000000000000- <1>
   398 00002D6F 000000000000000000- <1>
   398 00002D78 000000000000000000- <1>
   398 00002D81 000000000000000000- <1>
   398 00002D8A 000000000000000000- <1>
   398 00002D93 000000000000000000- <1>
   398 00002D9C 000000000000000000- <1>
   398 00002DA5 000000000000000000- <1>
   398 00002DAE 000000000000000000- <1>
   398 00002DB7 000000000000000000- <1>
   398 00002DC0 000000000000000000- <1>
   398 00002DC9 000000000000000000- <1>
   398 00002DD2 000000000000000000- <1>
   398 00002DDB 000000000000000000- <1>
   398 00002DE4 000000000000000000- <1>
   398 00002DED 000000000000000000- <1>
   398 00002DF6 000000000000000000- <1>
   398 00002DFF 000000000000000000- <1>
   398 00002E08 000000000000000000- <1>
   398 00002E11 000000000000000000- <1>
   398 00002E1A 000000000000000000- <1>
   398 00002E23 000000000000000000- <1>
   398 00002E2C 000000000000000000- <1>
   398 00002E35 000000000000000000- <1>
   398 00002E3E 000000000000000000- <1>
   398 00002E47 000000000000000000- <1>
   398 00002E50 000000000000000000- <1>
   398 00002E59 000000000000000000- <1>
   398 00002E62 000000000000000000- <1>
   398 00002E6B 000000000000000000- <1>
   398 00002E74 000000000000000000- <1>
   398 00002E7D 000000000000000000- <1>
   398 00002E86 000000000000000000- <1>
   398 00002E8F 000000000000000000- <1>
   398 00002E98 000000000000000000- <1>
   398 00002EA1 000000000000000000- <1>
   398 00002EAA 000000000000000000- <1>
   398 00002EB3 000000000000000000- <1>
   398 00002EBC 000000000000000000- <1>
   398 00002EC5 000000000000000000- <1>
   398 00002ECE 000000000000000000- <1>
   398 00002ED7 000000000000000000- <1>
   398 00002EE0 000000000000000000- <1>
   398 00002EE9 000000000000000000- <1>
   398 00002EF2 000000000000000000- <1>
   398 00002EFB 000000000000000000- <1>
   398 00002F04 000000000000000000- <1>
   398 00002F0D 000000000000000000- <1>
   398 00002F16 000000000000        <1>
   399                              <1> 
   400                              <1> endptr equ $
    38                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    39                                  ;Paragraph alignment
    40                                  %include "./Source/BSS/dosDynaDataArea.asm"
    41                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    42                              <1> ; the MCB chain!
    43                              <1> ddaStart:
    44 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    45                              <1> 
    46                              <1> ;Create DPB chain of first 5 available DPB slots
    47                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    48 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    49 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    50                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    51                              <1> ;Always jettison this space
    52 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    53 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    54 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    55                              <1> 
    56 00000119 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    57 00000139 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    58                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    59                              <1> dynamicDataAreaLength equ $ - ddaStart
    59          ------------------  <1>  info: assembly required 1+5+2 passes

