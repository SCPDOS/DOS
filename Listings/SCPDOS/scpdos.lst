     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro breakpoint 0
    78                              <1> xchg bx, bx
    79                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
   179                              <1> 
   180                              <1> %macro defaultBPB 0
   181                              <1>     db 0E9h
   182                              <1>     db 00h
   183                              <1>     db 90h
   184                              <1>     db 'SCPDOSv1'
   185                              <1>     dw 0200h                       
   186                              <1>     db 01h                         
   187                              <1>     dw 0001h                           
   188                              <1>     db 02h                              
   189                              <1>     dw 00E0h            
   190                              <1>     dw 0B40h   
   191                              <1>     db 0F0h                   
   192                              <1>     dw 0009h                   
   193                              <1>     dw 0012h                     
   194                              <1>     dw 0002h                  
   195                              <1>     dd 0                 
   196                              <1>     dd 0 
   197                              <1>     db 00h
   198                              <1>     db 00h
   199                              <1>     db 29h
   200                              <1>     dd 0
   201                              <1>     db 'NO NAME    '
   202                              <1>     db 'FAT12   '
   203                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   204                              <1> %endmacro
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosStruc.inc"
    10                              <1> 
    11                              <1> ;-------------------------------------------------------;
    12                              <1> ; This include file contains miscellaneous internal     ;
    13                              <1> ; SCP/DOS structures.                                   ;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> 
    16                              <1> ;------------------------------------------------------------------------;
    17                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    18                              <1> ; its file system structure. This is used to locate files and structures
    19                              <1> ; on the device itself and to translate file requests to cluster chains
    20                              <1> ; to LBAs to pass to the disk driver..
    21                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    22                              <1> ; drivers Initialise routine has been called.
    23                              <1> ;------------------------------------------------------------------------;
    24                              <1> struc dpb        ;Drive Parameter Block
    25                              <1> 
    26 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    27 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    28 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    29 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    30 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    31 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    32 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    33 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    34 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    35 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    36 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    37 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    38                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    39 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    40 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    41 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    42 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    43 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    44 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    45                              <1> 
    46                              <1> endstruc
    47                              <1> 
    48                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    49                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    52                              <1> ; All disk pathing requests go via the CDS for that drive.
    53                              <1> ; The default drive is the last accessed drive, this number is stored
    54                              <1> ; in the DOS data area.
    55                              <1> ; The CDS is stored as an array with the offset into the array being 
    56                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    57                              <1> ;
    58                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    59                              <1> ;------------------------------------------------------------------------;
    60                              <1> struc cds       ;Current Directory structure
    61 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    62 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    63 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    64 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    65 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    66 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    67                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    68                              <1> ; another, we save the number of chars to skip to that deep level).
    69                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    70                              <1> ; Only affects for SUBST drives, not JOIN
    71                              <1> ; Flags: Bit 15 set = Network drive
    72                              <1> ;        Bit 14 set = Physical drive
    73                              <1> ;        Bit 13 set = JOIN'ed drive
    74                              <1> ;        Bit 12 set = SUBST'ed drive
    75                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    76                              <1> endstruc
    77                              <1> ;CDS equates
    78                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    79                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    80                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    81                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    82                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    83                              <1> ;------------------------------------------------------------------------;
    84                              <1> ; The SFT is a way to allow applications to open file handles to files 
    85                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    86                              <1> ; under the first header, and then a second header will be linked to the 
    87                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    88                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    89                              <1> ; using the FCBS= command. Default FCBS=5.
    90                              <1> ;
    91                              <1> ; A file handle describes the file, and the location within the file that
    92                              <1> ; we are reading. The file handle can be manipulated without the file
    93                              <1> ; being in memory, thus allowing the user to access data without needing 
    94                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    95                              <1> ; accessing devices, by treating them as files with their drivers 
    96                              <1> ; responding and translating the manipulations of the file handle itself.
    97                              <1> ; Neither the driver nor the application should see or use the SFT for
    98                              <1> ; the handle, as it is subject to change (and will change when file 
    99                              <1> ; sharing provisions are included). The DOS will make requests to the 
   100                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   101                              <1> ; track of the information in the SFT entry for that handle. 
   102                              <1> ;
   103                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   104                              <1> ; can point to the same file. It all depends on what the applications 
   105                              <1> ; want to do with the File.
   106                              <1> ;
   107                              <1> ; !!!!IMPORTANT!!!!
   108                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   109                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   110                              <1> ;
   111                              <1> ;Each SFT may look like this:
   112                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   113                              <1> ;            |                |
   114                              <1> ;       wNumFiles*sft    wNumFiles*sft
   115                              <1> ;
   116                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   117                              <1> ; System FCBs.
   118                              <1> ;
   119                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   120                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   121                              <1> ;
   122                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   123                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   124                              <1> ;------------------------------------------------------------------------;
   125                              <1> struc sfth   ;System file table header
   126                              <1> ; This is the SFT header.
   127                              <1> ; This structure comes before the start of the first file in the array/table.
   128 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   129 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc sft
   133                              <1> ;This is the file struc itself
   134 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   135 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   136 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   137 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   138 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   139 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   140 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   141 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   142 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   143 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   144 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   145 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   146 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   147 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   148 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   149 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   150 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   151 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   152 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   153                              <1> ;                           0 means no record
   154                              <1> endstruc
   155                              <1> ;Open Mode equates
   156                              <1> ;Access modes   Bits[2:0]
   157                              <1> ReadAccess      equ 0h
   158                              <1> WriteAccess     equ 1h
   159                              <1> RWAccess        equ 2h
   160                              <1> ;Bit 3 reserved 0
   161                              <1> ;Sharing modes  Bits[6:4]
   162                              <1> CompatShare     equ 0h
   163                              <1> denyRWShare     equ 10h
   164                              <1> denyWriteShare  equ 20h
   165                              <1> denyReadShare   equ 30h
   166                              <1> denyNoneShare   equ 40h
   167                              <1> netFCBShare     equ 70h
   168                              <1> ;Bit 7 reserved 0
   169                              <1> ;Bits 8-12 reserved 0
   170                              <1> 
   171                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   172                              <1> ;Buffering on writes
   173                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   174                              <1> ;FCB opened file?
   175                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   176                              <1> ;Attribute Byte
   177                              <1> readOnlyFile    equ 1h
   178                              <1> hiddenFile      equ 2h
   179                              <1> systemFile      equ 4h
   180                              <1> volumeLabel     equ 8h
   181                              <1> directoryFile   equ 10h ;Directory entry
   182                              <1> archiveFile     equ 20h
   183                              <1> ;Device Info equates
   184                              <1> ;For a block device, bits [5:0] contain the drive number
   185                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   186                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   187                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   188                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   189                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   190                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   191                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   192                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   193                              <1> devCharDev      equ 80h ;If set, it is a char device!
   194                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   195                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   196                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   197                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   198                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   199                              <1>  
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc filename
   312                              <1> ;8.3 File name struct
   313 00000000 ????????????????    <1>     .fName  resb 8
   314 00000008 ??????              <1>     .fExt   resb 3
   315                              <1> endstruc
   316                              <1> 
   317                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   318 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   319 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   320 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   321 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   322 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   323 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   324 00000016 ????                <1>     .fileTime   resw 1  ;File time
   325 00000018 ????                <1>     .fileDate   resw 1  ;File date
   326 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   327 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc psp
   331 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   332 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   333 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   334 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   335 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   336 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   337 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   338 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   339 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   340 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   341 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   342 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   343 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   344 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   345                              <1> ;Extra handle arrays are grouped into a linked list
   346                              <1> ;The below are in the same place as in DOS
   347 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   348 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   349                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   350 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   351 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   352                              <1> endstruc
   353                              <1> 
   354                              <1> struc clkStruc
   355 00000000 ????                <1>     .dateWord   resw 1
   356 00000002 ??                  <1>     .minutes    resb 1
   357 00000003 ??                  <1>     .hours      resb 1
   358 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   359 00000005 ??                  <1>     .seconds    resb 1
   360                              <1> endstruc
   361                              <1> 
   362                              <1> struc countryStruc
   363 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   364                              <1>                         ;0 = month day year hh:mm:ss
   365                              <1>                         ;1 = day month year hh:mm:ss
   366                              <1>                         ;2 = year month day hh:mm:ss
   367 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   368 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   369 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   370 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   371 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   372 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   373                              <1>                         ;0 = Symbol leads, without space
   374                              <1>                         ;1 = Symbol follows, without space
   375                              <1>                         ;2 = Symbol leads, one space
   376                              <1>                         ;3 = Symbol follows, one space
   377                              <1>                         ;4 = Symbol replace decimal separator
   378 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   379 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   380 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   381 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   382 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   383                              <1> endstruc
   384                              <1> 
   385                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   386                              <1> ;for a space of 64Gb
   387                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   388                              <1> dosLowBase  equ 600h    ;Low load address
   389                              <1> 
   390                              <1> ;Critical Error AH bitfield equates
   391                              <1> critRead    equ 0h
   392                              <1> critWrite   equ 1h
   393                              <1> critDOS     equ 0h
   394                              <1> critFAT     equ 2h
   395                              <1> critDir     equ 4h
   396                              <1> critData    equ 6h
   397                              <1> critFailOK  equ 8h
   398                              <1> critRetryOK equ 10h
   399                              <1> critIgnorOK equ 20h
   400                              <1> critCharDev equ 80h
   401                              <1> 
   402                              <1> critIgnore  equ 0
   403                              <1> critRetry   equ 1
   404                              <1> critAbort   equ 2
   405                              <1> critFail    equ 3
   406                              <1> 
   407                              <1> ;MISC ASCII control chars
   408                              <1> NUL equ 00h ;^@         | ASCII Null
   409                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   410                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   411                              <1> BEL equ 07h ;^G         | ASCII Bell
   412                              <1> BSP equ 08h ;^H         | ASCII Backspace
   413                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   414                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   415                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   416                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   417                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   418                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   419                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   420                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   421                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   422                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   423                              <1> SPC equ 20h ;Printable  | ASCII Space
   424                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   425                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   426                              <1> 
   427                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   428                              <1> ;Extended Ascii Codes
   429                              <1> eF1     equ 3Bh ;F1 second byte
   430                              <1> eF2     equ 3Ch ;F2 second byte
   431                              <1> eF3     equ 3Dh ;F3 second byte
   432                              <1> eF4     equ 3Eh ;F4 second byte
   433                              <1> eF5     equ 3Fh ;F5 second byte
   434                              <1> eF6     equ 40h ;F6 second byte
   435                              <1> eF7     equ 41h ;F7 second byte
   436                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   437                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   438                              <1> eIns    equ 52h ;Insert second byte
   439                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   440                              <1> 
   441                              <1> ;Default Configuration for the system
   442                              <1> 
   443                              <1> buffersDefault  equ 30
   444                              <1> filesDefault    equ 20
   445                              <1> fcbsDefault     equ 4
   446                              <1> safeFcbsDeflt   equ 0
   447                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Debug/debSym.inc"
    11                              <1> ;This file will include the debuging symbols
    12                              <1> 
    13                              <1> %define true 1
    14                              <1> %define false 0
    15                              <1> 
    16                              <1> ;Switch the DEBUG to false in production!
    17                              <1> %define DEBUG false
    18                              <1> %define DPBINFO false
    19                              <1> %define REGS false
    20                              <1> %define ENDSTATUS true
    21                              <1> %define ALLOCTEST false
    22                              <1> 
    23                              <1> 
    24                              <1> ;Use this space as the debug stack
    25                              <1> %define debStackTop 80000h
    11                                  %include "./Source/Include/dosError.inc"
    12                              <1> ;DOS Error codes
    13                              <1> 
    14                              <1> ;Extended Error Codes
    15                              <1> errInvFnc   equ 1   ;Invalid function number
    16                              <1> errFnf      equ 2   ;File not found
    17                              <1> errPnf      equ 3   ;Path not found
    18                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    19                              <1> errAccDen   equ 5   ;Access denied (to resource)
    20                              <1> errBadHdl   equ 6   ;Invalid handle
    21                              <1> errMCBbad   equ 7   ;MCB's destroyed
    22                              <1> errNoMem    equ 8   ;Insufficient memory
    23                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    24                              <1> errBadEnv   equ 10  ;Invalid environment
    25                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    26                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    27                              <1> errInvDat   equ 13  ;Invalid data
    28                              <1> ;           equ 14  ;Reserved
    29                              <1> errBadDrv   equ 15  ;Invalid drive specified
    30                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    31                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    32                              <1> errNoFil    equ 18  ;No more files, no match found
    33                              <1> ;The following are Driver error codes + 19
    34                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    35                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    36                              <1> errUnkUnt   equ 20  ;Unknown Unit
    37                              <1> errDrvNR    equ 21  ;Drive not ready
    38                              <1> errUnkCmd   equ 22  ;Unknown Command
    39                              <1> errCRCerr   equ 23  ;Data (CRC) error
    40                              <1> errBadRLn   equ 24  ;Bad request structure length
    41                              <1> errSekErr   equ 25  ;Seek error
    42                              <1> errUnkMed   equ 26  ;Unknown media type
    43                              <1> errSecNF    equ 27  ;Sector not Found
    44                              <1> errNoPap    equ 28  ;Printer out of paper
    45                              <1> errWF       equ 29  ;Write fault
    46                              <1> errRF       equ 30  ;Read fault
    47                              <1> errGF       equ 31  ;General fault
    48                              <1> ;----------------------------------------------
    49                              <1> ;The following two go inbetween the Disk errors
    50                              <1> errShrVio   equ 32  ;Sharing violations
    51                              <1> errLokVio   equ 33  ;File Lock violation
    52                              <1> ;----------------------------------------------
    53                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    54                              <1> errNoFCB    equ 35  ;FCB unavailable
    55                              <1> errShrFul   equ 36  ;Sharing buffer full
    56                              <1> 
    57                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    58                              <1> 
    59                              <1> errFilExist equ 80  ;File already exists
    60                              <1> errDirExist equ 82  ;Directory already exists
    61                              <1> errFI44     equ 83  ;Fail on INT 44h
    62                              <1> errRedir    equ 84  ;Too many levels of redirection
    63                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    64                              <1> errBadPass  equ 86  ;Bad password
    65                              <1> errBadParam equ 87  ;Bad parameter passed to request
    66                              <1> errNetWrite equ 88  ;Network Write Fault
    67                              <1> ;-----------------------------------------------------------------------------
    68                              <1> ;Error Loci
    69                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    70                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    71                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    72                              <1> eLocChr     equ 4   ;Serial/Character Device error
    73                              <1> eLocMem     equ 5   ;Related to RAM
    74                              <1> ;-----------------------------------------------------------------------------
    75                              <1> ;Error Actions
    76                              <1> eActRet     equ 1   ;Retry
    77                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    78                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    79                              <1> eActAbt     equ 4   ;Abort with cleanup
    80                              <1> eActKil     equ 5   ;Abort without cleanup
    81                              <1> eActIgn     equ 6   ;Ignore error
    82                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    83                              <1> ;-----------------------------------------------------------------------------
    84                              <1> ;Error classes
    85                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    86                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    87                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    88                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    89                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    90                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    91                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    92                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    93                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    94                              <1> eClsLocked  equ 10  ;Resource Locked
    95                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    96                              <1> eClsClash   equ 12  ;Resource already exists!
    97                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./Source/Include/dosExec.inc"
    13                              <1> ;This include file contains structures related to the EXE format
    14                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    15                              <1> 
    16                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    17                              <1> ; file.
    18                              <1> execLoadGo  equ 0
    19                              <1> execLoad    equ 1
    20                              <1> execInvld   equ 2
    21                              <1> execOverlay equ 3
    22                              <1> 
    23                              <1> struc execFrame
    24 00000000 ????????????????    <1>     .oldRBP     resq 1  
    25 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    26 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    27 00000018 ????????????????    <1>     .wEnvSize   resq 1  ;Size of the environment block
    28 00000020 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    29 00000028 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    30 00000030 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    31                              <1> 
    32 00000038 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    33 00000040 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    34 00000048 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to new Program Base address (consider removing)
    35 00000050 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    36                              <1> .pProgEP:   ;Program EP, recycle this qword
    37 00000058 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    38 00000060 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    39                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    40 00000068 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Possible blocks to be pointed to by rbx
    44                              <1> 
    45                              <1> struc execProg 
    46 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    47 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    48 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    49 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    50                              <1> endstruc
    51                              <1> 
    52                              <1> struc loadProg
    53 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    54 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    55 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    56 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    57 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    58 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc loadOvly
    62 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    63 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    64                              <1> endstruc
    65                              <1> 
    66                              <1> ;----------------------------
    67                              <1> ;   EXE header structures   :
    68                              <1> ;----------------------------
    69                              <1> 
    70                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    71                              <1> dosMagicSignature   equ "MZ"
    72                              <1> dosMagicSignature2  equ "ZM"
    73                              <1> struc imageDosHdr
    74 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    75 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    76 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    77 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    78 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    79 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    80 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    81 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    82 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    83 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    84 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    85 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    86 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    87 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    88 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    89 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    90 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    91 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    92 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Pssobile signatures pointed to by e_lfanew
    96                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    97                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    98                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    99                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
   100                              <1> 
   101                              <1> ;COFF File header, immadiately follows the signature so @ [e_lfanew + 4]
   102                              <1> 
   103                              <1> struc imageFileHeader
   104 00000000 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   105 00000002 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   106 00000004 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   107 00000008 ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   108 0000000C ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   109 00000010 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   110 00000012 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   111                              <1> endstruc
   112                              <1> 
   113                              <1> ;The only valid values in the .machineType field
   114                              <1> 
   115                              <1> imageFileMachineUnknown equ 0
   116                              <1> imageFileMachineAMD64   equ 08664h 
   117                              <1> 
   118                              <1> ;Optional header, immediately follows COFF header
   119                              <1> 
   120                              <1> struc imageFileOptionalHeader
   121 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   122 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   123 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   124 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   125 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   126 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   127 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   128 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   129 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   130 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   131 00000024 ????????            <1> 	.dFileAlignment             resd 1
   132 00000028 ????                <1> 	.wMajOSVer                  resw 1
   133 0000002A ????                <1> 	.wMinOSVer                  resw 1
   134 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   135 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   136 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   137 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   138 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   139 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   140 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   141 00000040 ????????            <1> 	.dCheckSum                  resd 1
   142 00000044 ????                <1> 	.wSubsystem                 resw 1
   143 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   144 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   145 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   146 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   147 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   148 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   149 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   150                              <1> endstruc
   151                              <1> 
   152                              <1> romMagicNum     equ 0107h
   153                              <1> pe32MagicNum    equ 010Bh
   154                              <1> pe64MagicNum    equ 020Bh
   155                              <1> 
   156                              <1> ;Data directory header structure
   157                              <1> 
   158                              <1> struc imageDataDirectory
   159 00000000 ????????            <1>     .virtualAddress  resd 1
   160 00000004 ????????            <1>     .size    resd 1
   161                              <1> endstruc
   162                              <1> 
   163                              <1> struc baseRelocBlock
   164 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   165 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   166                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   167                              <1> endstruc
   168                              <1> ;Section headers that form the Section Table.
   169                              <1> ;There are wNumberOfSections many entries in this table.
   170                              <1> ;Each entry is one imageSectionHdr
   171                              <1> 
   172                              <1> struc imageSectionHdr       ;size 40 bytes
   173 00000000 ????????????????    <1>     .name                   resb 8
   174 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   175 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   176 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   177 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   178 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   179 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   180 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   181 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   182 00000024 ????????            <1> 	.dCharacteristics       resd 1
   183                              <1> endstruc
   184                              <1> 
   185                              <1> ;Section Hdr characteristics flags 
   186                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   187                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   188                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./Source/Sysinit/sysInit.asm"
    16                              <1> ; We arrive here with the following values in the registers.
    17                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    18                              <1> ; dx  = Int 33h boot device number
    19                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    20                              <1> 
    21 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    22 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    23 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    24 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    25 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    26 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    27 0000001A F348A5              <1>     rep movsq   ;Copy over
    28 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    29 00000022 50                  <1>     push rax
    30 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    31                              <1> sysInitldr:
    32                              <1> ;Now the tough part, load DOS to 800
    33 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    34                              <1> .read:
    35 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    36 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    36 00000035 00                  <1>
    37 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    38 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    39 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    40 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    41 0000003F CD33                <1>     int 33h
    42 00000041 7206                <1>     jc .readFail
    43 00000043 6800080000          <1>     push qword 800h
    44 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    45                              <1> .readFail:
    46 00000049 FFCE                <1>     dec esi
    47 0000004B 75DC                <1>     jnz .read
    48 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    49 00000054 B804130000          <1>     mov eax, 1304h
    50 00000059 CD30                <1>     int 30h
    51 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    52 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    52 00000066 6F6164204572726F72- <1>
    52 0000006F 0A0D00              <1>
    53 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    53 0000007B 000000000000000000- <1>
    53 00000084 000000000000000000- <1>
    53 0000008D 000000000000000000- <1>
    53 00000096 000000000000000000- <1>
    53 0000009F 000000000000000000- <1>
    53 000000A8 000000000000000000- <1>
    53 000000B1 000000000000000000- <1>
    53 000000BA 000000000000000000- <1>
    53 000000C3 000000000000000000- <1>
    53 000000CC 000000000000000000- <1>
    53 000000D5 000000000000000000- <1>
    53 000000DE 000000000000000000- <1>
    53 000000E7 000000000000000000- <1>
    53 000000F0 000000000000000000- <1>
    53 000000F9 00000000000000      <1>
    54                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    55                              <1>     ;Store space for a static PSP
    56 00000100 000000000000000000- <1>     db 100h dup 00h
    56 00000109 000000000000000000- <1>
    56 00000112 000000000000000000- <1>
    56 0000011B 000000000000000000- <1>
    56 00000124 000000000000000000- <1>
    56 0000012D 000000000000000000- <1>
    56 00000136 000000000000000000- <1>
    56 0000013F 000000000000000000- <1>
    56 00000148 000000000000000000- <1>
    56 00000151 000000000000000000- <1>
    56 0000015A 000000000000000000- <1>
    56 00000163 000000000000000000- <1>
    56 0000016C 000000000000000000- <1>
    56 00000175 000000000000000000- <1>
    56 0000017E 000000000000000000- <1>
    56 00000187 000000000000000000- <1>
    56 00000190 000000000000000000- <1>
    56 00000199 000000000000000000- <1>
    56 000001A2 000000000000000000- <1>
    56 000001AB 000000000000000000- <1>
    56 000001B4 000000000000000000- <1>
    56 000001BD 000000000000000000- <1>
    56 000001C6 000000000000000000- <1>
    56 000001CF 000000000000000000- <1>
    56 000001D8 000000000000000000- <1>
    56 000001E1 000000000000000000- <1>
    56 000001EA 000000000000000000- <1>
    56 000001F3 000000000000000000- <1>
    56 000001FC 00000000            <1>
    57                              <1> ;END OF FIRST SECTOR!!
    58                              <1> ;DOS SYSINIT BEGINS HERE
    59                              <1> ;First move the alignment of the DOSSEG to 4Kb
    60                              <1> initBegin:
    61 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    62 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    63 00000206 0F32                <1>     rdmsr
    64 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    65 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    66 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    67 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    68 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    69 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    70 00000221 89F8                <1>     mov eax, edi
    71 00000223 4889FA              <1>     mov rdx, rdi
    72 00000226 48C1EA20            <1>     shr rdx, 20h
    73 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    74                              <1> ;------------------------------------------------;
    75                              <1> ;              Connect Debugger                  ;
    76                              <1> ;------------------------------------------------;
    77                              <1> %if DEBUG
    78                              <1> ;Only connect if in debug mode
    79                              <1>     mov eax, 0C501h ;Connect debugger
    80                              <1>     int 35h
    81                              <1> %endif
    82                              <1> ;------------------------------------------------;
    83                              <1> ;           Sanitise the data area               ;
    84                              <1> ;------------------------------------------------;
    85                              <1> ; This call initialises ALL fields in the DOS    ;
    86                              <1> ; data area with 0's. Thus any fields, which     ;
    87                              <1> ; need to be initialised with a 0 value, are     ;
    88                              <1> ; initialised for free.                          ;
    89                              <1> ;------------------------------------------------;
    90 0000022C B9[80DA0300]        <1>     mov ecx, dSegLen
    91 00000231 30C0                <1>     xor al, al
    92 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    93 00000234 F3AA                <1>     rep stosb
    94 00000236 5F                  <1>     pop rdi
    95                              <1> ;------------------------------------------------;
    96                              <1> ;          Start saving Basic DOS data           ;
    97                              <1> ;------------------------------------------------;
    98 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    98 0000023C [10C00300]          <1>
    99                              <1> ;Copy DOS to its final resting place
   100 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
   100 00000245 [00C00300]          <1>
   101 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
   101 0000024E [08C00300]          <1>
   102 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
   103 00000255 4881C7[80DA0300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   104 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   105 00000263 B900100000          <1>     mov ecx, 1000h
   106 00000268 F348A5              <1>     rep movsq
   107                              <1> 
   108 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   109 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   110 00000271 664489C0            <1>     mov ax, r8w
   111 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   112 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   113 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   113 0000028D 05                  <1>
   114 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
   114 00000296 05                  <1>
   115 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   115 0000029C [97C00300]1400      <1>
   116 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   116 000002AA 01                  <1>
   117                              <1>     ;If no detected Int 33h devices, halt 
   118 000002AB 49C1E810            <1>     shr r8, 2*8
   119 000002AF 4584C0              <1>     test r8b, r8b
   120 000002B2 0F84DB0C0000        <1>     jz errorInit
   121                              <1> ;------------------------------------------------;
   122                              <1> ;          Add additional page tables            ;
   123                              <1> ;------------------------------------------------;
   124                              <1> ;This will allow for up to 64Gb of addressible space
   125 000002B8 4889EF              <1>     mov rdi, rbp
   126                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   127 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   128 000002C0 57                  <1>     push rdi
   129 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   129 000002CA 00                  <1>
   130                              <1> pdtLoop:
   131 000002CB 48AB                <1>     stosq
   132 000002CD 480500002000        <1>     add rax, 200000h
   133 000002D3 FFC9                <1>     dec ecx
   134 000002D5 75F4                <1>     jnz pdtLoop
   135 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   136                              <1> ;Now we add every 4kb page to the page directory pointer table
   137                              <1> ;15 4kb pages to consider
   138 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   139 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   140 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   141 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   142 000002EC B93C000000          <1>     mov ecx, 60
   143 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   144                              <1> pdptLoop:
   145 000002F7 48AB                <1>     stosq
   146 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   147 000002FF FFC9                <1>     dec ecx
   148 00000301 75F4                <1>     jnz pdptLoop
   149 00000303 0F20DF              <1>     mov rdi, cr3
   150 00000306 0F22DF              <1>     mov cr3, rdi
   151                              <1> ;------------------------------------------------;
   152                              <1> ;                   MCB inits                    ;
   153                              <1> ;------------------------------------------------;
   154                              <1> mcbInit:
   155 00000309 B820E80000          <1>     mov eax, 0E820h
   156 0000030E CD35                <1>     int 35h
   157                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   158 00000310 E804010000          <1>     call .mcbFindAddress
   159 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   160                              <1>     ;Here, we try use E801h
   161 00000317 B801E80000          <1>     mov eax, 0E801h
   162 0000031C CD35                <1>     int 35h
   163 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   164 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   165 00000324 85C0                <1>     test eax, eax
   166 00000326 741B                <1>     jz .worst
   167 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   168 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   169 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   170 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   171 0000033E E909010000          <1>     jmp mcbBuild
   172                              <1> .worst:
   173                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   174 00000343 B800002000          <1>     mov eax, 200000h
   175 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   175 0000034D [08C00300]          <1>
   176 00000351 29D8                <1>     sub eax, ebx
   177 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   178 0000035B E9EC000000          <1>     jmp mcbBuild 
   179                              <1> .mcbi1:
   180 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   181 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   181 0000036C 00                  <1>
   182 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   183 00000371 0F85C2000000        <1>     jne .mcbFail
   184 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   185                              <1>     ;PCI hole always exists so this value will always be a dword
   186 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   187 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   188 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   189 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   190 00000390 773C                <1>     ja .skipISA
   191                              <1> ;Here we deal with ISA hole issues
   192 00000392 B820E80000          <1>     mov eax, 0E820h
   193 00000397 CD35                <1>     int 35h
   194 00000399 48B800000001000000- <1>     mov rax, 1000000h
   194 000003A2 00                  <1>
   195 000003A3 E871000000          <1>     call .mcbFindAddress
   196 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   197 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   197 000003B7 00                  <1>
   198 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   199 000003BC 0F858A000000        <1>     jne mcbBuild  
   200 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   201 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   202                              <1> .skipISA:
   203 000003CE B820E80000          <1>     mov eax, 0E820h
   204 000003D3 CD35                <1>     int 35h
   205 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   205 000003DE 00                  <1>
   206 000003DF E835000000          <1>     call .mcbFindAddress
   207 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   208 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   208 000003EF 00                  <1>
   209 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   210 000003F4 7556                <1>     jne mcbBuild   
   211 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   212                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   213 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   213 00000403 00                  <1>
   214 00000404 4839CB              <1>     cmp rbx, rcx
   215 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   216 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   216 00000410 [1BC00300]          <1>
   217 00000414 E933000000          <1>     jmp mcbBuild
   218                              <1> .mcbFindAddress:
   219                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   220                              <1> ;Entry: rax = Address of arena to search for
   221                              <1> ;       rsi = Pointer to memory map
   222                              <1> ;       ecx = Number of 24 byte entries
   223                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   224                              <1> ;       CF=CY : value in rax not found
   225 00000419 56                  <1>     push rsi
   226 0000041A 51                  <1>     push rcx
   227 0000041B 50                  <1>     push rax
   228                              <1> .mfa0:
   229 0000041C 483B06              <1>     cmp rax, qword [rsi]
   230 0000041F 7410                <1>     je .mcbAddressFound
   231 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   232 00000428 FFC9                <1>     dec ecx
   233 0000042A 79F0                <1>     jns .mfa0
   234                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   235 0000042C 58                  <1>     pop rax
   236 0000042D 59                  <1>     pop rcx
   237 0000042E 5E                  <1>     pop rsi
   238 0000042F F9                  <1>     stc
   239 00000430 C3                  <1>     ret
   240                              <1> .mcbAddressFound:
   241 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   242 00000434 59                  <1>     pop rcx ;Pop old rax value off
   243 00000435 59                  <1>     pop rcx
   244 00000436 5E                  <1>     pop rsi
   245 00000437 F8                  <1>     clc
   246 00000438 C3                  <1>     ret
   247                              <1> .mcbFail:
   248 00000439 488D2D890B0000      <1>     lea rbp, mcbFailmsg
   249 00000440 B804130000          <1>     mov eax, 1304h
   250 00000445 CD30                <1>     int 30h
   251 00000447 E9470B0000          <1>     jmp errorInit
   252                              <1> 
   253                              <1> mcbBuild:
   254                              <1> ;Actually build the MCB chain here
   255                              <1> ;Start by computing the difference between userbase and DOS area
   256                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   257 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   257 00000451 [08C00300]          <1>
   258 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   259 0000045C 56                  <1>     push rsi    ;Save ptr
   260 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   261 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   262 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   263 0000046F 5B                  <1>     pop rbx
   264 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   265 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   266 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   267 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   268 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   269 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   269 0000048E [2BC00300]          <1>
   270                              <1> 
   271                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   272 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   272 0000049A 00000000            <1>
   273 0000049E 746E                <1>     jz .skipISA
   274                              <1>     ;Here if an ISA hole exists, place a MCB around it
   275 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   276                              <1>     ;Remove one MCB worth of space from alloc
   277 000004A7 31C9                <1>     xor ecx, ecx
   278 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   279 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   280 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   281 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   282 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   283 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   284 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   285 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   285 000004CF 00                  <1>
   286 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   287 000004D3 480510000000        <1>     add rax, mcb_size
   288 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   289 000004DC C1E904              <1>     shr ecx, 4
   290 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   291 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   292 000004E5 4881C310000000      <1>     add rbx, mcb_size
   293 000004EC 4801CB              <1>     add rbx, rcx
   294                              <1>     ;RBX should now be at 16Mb
   295 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   296 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   297 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   298 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   299 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   300 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   301                              <1> .skipISA:
   302                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   303                              <1>     ;rbx points to a block with "Z" marker
   304 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   304 00000516 00000000            <1>
   305 0000051A 7470                <1>     jz .exit
   306                              <1>     ;Add PCI hole MCB
   307 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   308                              <1>     ;Remove one MCB worth of space from alloc
   309 00000523 31C9                <1>     xor ecx, ecx
   310 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   311 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   312 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   313 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   314 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   315 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   316 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   317 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   317 0000054B 00                  <1>
   318 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   319 0000054F 480510000000        <1>     add rax, mcb_size
   320 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   321 00000558 C1E904              <1>     shr ecx, 4
   322 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   323 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   324 00000561 4881C310000000      <1>     add rbx, mcb_size
   325 00000568 4801CB              <1>     add rbx, rcx
   326                              <1>     ;RBX should now be at 4Gb
   327 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   328 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   329 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   329 0000057B [1BC00300]          <1>
   330 0000057F 48C1E904            <1>     shr rcx, 4
   331 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   332 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   333                              <1> .exit:
   334                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   335 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   336                              <1> ;------------------------------------------------;
   337                              <1> ;          Kernel inits and adjustments          ;
   338                              <1> ;------------------------------------------------;
   339                              <1> ;Adjust Interrupt Entries Int 40h-49h
   340                              <1> adjInts:
   341 00000593 B340                <1>     mov bl, 40h
   342 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   343 0000059A CD35                <1>     int 35h
   344 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   345 000005A1 488D3DD70A0000      <1>     lea rdi, intData
   346 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   347                              <1> .ai0:
   348 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   349 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   350 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   351                              <1> .ai1:
   352 000005B5 CD35                <1>     int 35h
   353 000005B7 4881C708000000      <1>     add rdi, 8
   354 000005BE FFC1                <1>     inc ecx
   355 000005C0 81F950000000        <1>     cmp ecx, 50h
   356 000005C6 75E2                <1>     jne .ai0
   357                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   358                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   359                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   360                              <1>     %if DEBUG
   361                              <1> debugPopUpMsg:
   362                              <1>     push rbx
   363                              <1>     push rbp
   364                              <1>     push rcx
   365                              <1>     push rdx
   366                              <1>     mov ecx, 53 ;A large number of lines
   367                              <1>     xor edx, edx    ;COM 1
   368                              <1> .cls:
   369                              <1>     mov eax, 010Ah ;Transmit Line feed
   370                              <1>     int 34h
   371                              <1>     dec ecx
   372                              <1>     jnz .cls
   373                              <1>     lea rbx, qword [debPrintNullString + rbp]
   374                              <1>     lea rbp, .msg
   375                              <1>     call rbx
   376                              <1>     jmp short .exit
   377                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   378                              <1> .exit:
   379                              <1>     pop rdx
   380                              <1>     pop rcx
   381                              <1>     pop rbp
   382                              <1>     pop rbx
   383                              <1>     %endif
   384                              <1> 
   385                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   386 000005C8 488D15C4090000      <1>     lea rdx, errorInit ;Get segment start address
   387 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   388 000005D4 CD41                <1>     int 41h
   389 000005D6 488D15B6090000      <1>     lea rdx, errorInit ;Get segment start address
   390 000005DD B844250000          <1>     mov eax, 2544h
   391 000005E2 CD41                <1>     int 41h
   392                              <1> ;------------------------------------------------;
   393                              <1> ;          Driver Adjustments and inits          ;
   394                              <1> ;------------------------------------------------;
   395                              <1> ;Modify the pointers in nData before putting them in the data area
   396 000005E4 48012D140B0000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   397 000005EB 48012D170B0000      <1>     add qword [nData + drvHdr.strPtr], rbp
   398 000005F2 48012D180B0000      <1>     add qword [nData + drvHdr.intPtr], rbp
   399                              <1> ;Copy the Null driver to its location in Sysvars
   400 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   401 000005FE 488D35FA0A0000      <1>     lea rsi, qword [nData]
   402 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   403 0000060C F3A4                <1>     rep movsb   
   404                              <1> 
   405                              <1> ;Adjust the addresses in the other driver headers 
   406 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   406 00000610 [0164000000000000]  <1>
   407 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   408 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   409                              <1> adjDrivers:
   410 00000621 E851090000          <1>     call adjustDrvHdr
   411 00000626 E2F9                <1>     loop adjDrivers
   412                              <1> ;Open NUL
   413                              <1> ;NUL opened
   414                              <1> ;Open CON
   415                              <1> conInit:    ;Rather than keeping this resident... do it here
   416                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   417 00000628 488D95[EC660000]    <1>     lea rdx, qword [rbp + fastOutput]
   418 0000062F B849250000          <1>     mov eax, 2549h
   419 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   420 00000636 488D95[F4660000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   421 0000063D B83B250000          <1>     mov eax, 253Bh
   422 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   423                              <1> .ci0:
   424 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   425 00000646 CD36                <1>     int 36h
   426 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   427 0000064A 30E4                <1>     xor ah, ah
   428 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   429 0000064E EBF4                <1>     jmp short .ci0
   430                              <1> .ci1:
   431 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   432 00000655 CD30                <1>     int 30h
   433 00000657 B402                <1>     mov ah, 02h
   434 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   435 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   436 0000065D CD30                <1>     int 30h
   437 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   438 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   439 00000666 CD30                <1>     int 30h
   440                              <1> 
   441                              <1>     ;Save ptr to ConHdr in Sysvars
   442 00000668 488D85[01640000]    <1>     lea rax, qword [rbp + conHdr]
   443 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   443 00000674 [4BC00300]          <1>
   444                              <1> 
   445                              <1>     ;Fix the ext ESC function handler address
   446 00000678 488D85[DF270000]    <1>     lea rax, qword [rbp + editKeys]
   447 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   447 00000684 [58000000]          <1>
   448                              <1> 
   449                              <1> ;CLOCK init prock
   450                              <1> ;Set the time and date using the RTC (if present)
   451                              <1> clkInit:
   452                              <1>    ;Save ptr to ClkHdr in Sysvars first
   453 00000688 488D85[67640000]    <1>     lea rax, qword [rbp + clkHdr]
   454 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   454 00000694 [43C00300]          <1>
   455                              <1> ;CH - Hours, in BCD
   456                              <1> ;CL - Minutes, in BCD
   457                              <1> ;DH - Seconds, in BCD
   458 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   459 0000069A CD3A                <1>     int 3Ah
   460 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   461                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   462 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   463 000006A1 E84D000000          <1>     call .bcd2Bin
   464 000006A6 88C5                <1>     mov ch, al
   465 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   466 000006AB E843000000          <1>     call .bcd2Bin
   467 000006B0 88C1                <1>     mov cl, al
   468 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   469 000006B5 E839000000          <1>     call .bcd2Bin
   470 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   471 000006BC 89C2                <1>     mov edx, eax
   472 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   473 000006C0 CD41                <1>     int 41h
   474                              <1> ;Now get the date from RTC
   475                              <1> ;CL - Year, in BCD
   476                              <1> ;DH - Month, in BCD
   477                              <1> ;DL - Day, in BCD
   478 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   479 000006C4 CD3A                <1>     int 3Ah
   480 000006C6 7247                <1>     jc .clkEnd
   481                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   482 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   483 000006CB E823000000          <1>     call .bcd2Bin
   484 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   485 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   486 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   487 000006DC E812000000          <1>     call .bcd2Bin
   488 000006E1 88C6                <1>     mov dh, al  
   489 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   490 000006E6 E808000000          <1>     call .bcd2Bin
   491 000006EB 88C2                <1>     mov dl, al
   492 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   493 000006EF CD41                <1>     int 41h
   494 000006F1 EB1C                <1>     jmp short .clkEnd
   495                              <1> .bcd2Bin:
   496                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   497 000006F3 51                  <1>     push rcx
   498 000006F4 89C1                <1>     mov ecx, eax
   499 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   500 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   501 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   502 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   503                              <1> .b2blp:
   504 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   505 00000709 FFC9                <1>     dec ecx
   506 0000070B 75FA                <1>     jnz .b2blp
   507                              <1> .b2bexit:
   508 0000070D 59                  <1>     pop rcx
   509 0000070E C3                  <1>     ret
   510                              <1> .clkEnd:
   511                              <1> ;------------------------------------------------;
   512                              <1> ;         Link DOS to temporary Buffer           ;
   513                              <1> ;------------------------------------------------;
   514                              <1> tempBufferInit:
   515 0000070F 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   516 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   516 0000071B [55C00300]          <1>
   517 0000071F 31C0                <1>     xor eax, eax
   518 00000721 48FFC8              <1>     dec rax
   519 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   520 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   521 00000727 48FFC0              <1>     inc rax
   522 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   523                              <1> ;------------------------------------------------;
   524                              <1> ;         Init msd driver, create DPB            ;
   525                              <1> ;------------------------------------------------;
   526                              <1> storageInits:
   527                              <1> ;First save dpb pointer in sysvars
   528 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   529 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   529 00000737 [33C00300]          <1>
   530                              <1> ;Open Mass Storage
   531 0000073B E8E1090000          <1>     call diskInit
   532 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   533 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   534 0000074B 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   535 0000074D 0F8440080000        <1>     jz errorInit
   536 00000753 488D95[526D0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   537 0000075A 30C9                <1>     xor cl, cl  ;Clear counter
   538 0000075C 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   538 00000761 [33C00300]          <1>
   539                              <1> .si0:   
   540 00000765 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   541 00000768 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   542 0000076A CD41                <1>     int 41h
   543                              <1> ;Add other data to DPB
   544 0000076C 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   545 0000076F 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   546 00000772 50                  <1>     push rax
   547 00000773 488D87[89640000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   548 0000077A 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   549 0000077E 58                  <1>     pop rax
   550 0000077F FEC1                <1>     inc cl
   551 00000781 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   552 00000783 7416                <1>     je .si1
   553 00000785 50                  <1>     push rax
   554 00000786 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   555 0000078A 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   556 0000078E 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   557 00000791 58                  <1>     pop rax
   558 00000792 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   559 00000799 EBCA                <1>     jmp short .si0
   560                              <1> .si1:
   561                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   562 0000079B 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   563 000007A3 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   564                              <1> ;------------------------------------------------;
   565                              <1> ;          Find largest sector size              ;
   566                              <1> ;------------------------------------------------;
   567                              <1> sectorSizeSearch:
   568                              <1> ;Done by reading BPB's for each drive
   569 000007A6 488D9D[526D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   570                              <1>     
   571                              <1>     ;Go thru each block individually
   572 000007AD 31C0                <1>     xor eax, eax
   573 000007AF 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   574                              <1> .findLargest:
   575 000007B2 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   576 000007B6 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   577 000007BB 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   578 000007C2 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   579 000007C5 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   580 000007C8 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   581 000007CA 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   581 000007CF [53C00300]          <1>
   582                              <1> ;------------------------------------------------;
   583                              <1> ;                CDS array inits                 ;
   584                              <1> ;------------------------------------------------;
   585 000007D3 B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   586 000007D8 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   587 000007DF E802000000          <1>     call makeCDSArray
   588 000007E4 EB50                <1>     jmp short initialCDSWritten ;Go past the function
   589                              <1> makeCDSArray:
   590                              <1> ;Input: ecx = Size of array
   591                              <1> ;       rdi = Pointer to the start of the CDS array
   592                              <1> ;Ouput: rdi = first byte past the end of the table
   593 000007E6 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   593 000007EB [5DC00300]          <1>
   594 000007EF 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   594 000007F4 [33C00300]          <1>
   595 000007F8 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   596                              <1> .tempCDS:
   597 000007FD 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   598 000007FF 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   599 00000803 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   600 0000080A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   601 00000810 31D2                <1>     xor edx, edx    ;Use edx for flags
   602 00000812 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   603 00000819 7409                <1>     je .skipValidCDS
   604 0000081B BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   605 00000820 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   606                              <1> .skipValidCDS:
   607 00000824 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   608 00000828 FFC0                <1>     inc eax ;Increment the drive letter
   609 0000082A 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   610 00000831 FFC9                <1>     dec ecx
   611 00000833 75C8                <1>     jnz .tempCDS
   612 00000835 C3                  <1>     ret
   613                              <1> initialCDSWritten:
   614                              <1> ;------------------------------------------------;
   615                              <1> ;     Set up general PSP areas and DOS vars      ;
   616                              <1> ;------------------------------------------------;
   617                              <1> ;Additional DOS Vars init and fixups
   618 00000836 64C60425[E3C30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   618 0000083E FF                  <1>
   619 0000083F 64C60425[ABC30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   619 00000847 2F                  <1>
   620 00000848 488DBD[CF010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   621 0000084F 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapaddr], rdi ;Store in country table
   621 00000854 [2C000000]          <1>
   622                              <1> 
   623                              <1> ;Set network machine name to... nothing!
   624 00000858 488DBD[B0C30300]    <1>     lea rdi, qword [rbp + machineName]
   625 0000085F B910000000          <1>     mov ecx, 10h    ;16 chars long
   626 00000864 B020                <1>     mov al, SPC ;Space char
   627 00000866 F3AA                <1>     rep stosb   ;Fill with space chars
   628                              <1> 
   629                              <1> 
   630                              <1> ;Patch Data Table init
   631 00000868 488DBD[C0C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   632 0000086F 488D85[2D5F0000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   633 00000876 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   634 00000878 488D85[375F0000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   635 0000087F 48AB                <1>     stosq
   636 00000881 488D85[415F0000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   637 00000888 48AB                <1>     stosq
   638 0000088A 488D85[4B5F0000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   639 00000891 48AB                <1>     stosq
   640                              <1> 
   641                              <1> ;Initial PSP Init
   642 00000893 488D1D66F8FFFF      <1>     lea rbx, qword [tempPSP]
   643 0000089A 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   643 0000089F [F9C30300]          <1>
   644 000008A3 53                  <1>     push rbx
   645 000008A4 4881C380000000      <1>     add rbx, psp.dta
   646 000008AB 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   646 000008B0 [F1C30300]          <1>
   647 000008B4 5B                  <1>     pop rbx
   648 000008B5 66C703CD40          <1>     mov word [rbx + psp.return], 040CDh ;DOS return function
   649 000008BA 66C74350CD41        <1>     mov word [rbx + psp.unixEntry], 041CDh  ;Int 41h!
   650 000008C0 C64352CB            <1>     mov byte [rbx + psp.unixEntry + 2], 0CBh    ;Return!
   651 000008C4 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   652 000008CC 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   653 000008D0 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   654 000008D4 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   655 000008D8 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   655 000008E1 FF                  <1>
   656 000008E2 48AB                <1>     stosq   ;8 bytes
   657 000008E4 31C0                <1>     xor eax, eax
   658 000008E6 50                  <1>     push rax    ;Save 0 on the stack
   659 000008E7 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   660 000008EA 48AB                <1>     stosq   ;16 bytes
   661 000008EC AB                  <1>     stosd   ;20 bytes
   662 000008ED 58                  <1>     pop rax ;Get 0 back
   663 000008EE 4889433E            <1>     mov qword [rbx + psp.envPtr], rax    ;No environment
   664 000008F2 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   665 000008F6 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   666 000008FA 4889DA              <1>     mov rdx, rbx
   667 000008FD B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   668 00000902 CD41                <1>     int 41h
   669 00000904 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   670 00000908 B843350000          <1>     mov eax, 3543h
   671 0000090D CD41                <1>     int 41h
   672 0000090F 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   673 00000913 B844350000          <1>     mov eax, 3544h
   674 00000918 CD41                <1>     int 41h
   675 0000091A 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   676                              <1> 
   677 0000091E B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   678 00000923 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   679 00000927 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   680                              <1> ;------------------------------------------------;
   681                              <1> ;          Default File Handle Creation          ;
   682                              <1> ;                                                ;
   683                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   684                              <1> ;------------------------------------------------;
   685                              <1> defaultFileHandles:
   686                              <1> ;Fill in the default file table entries
   687 00000929 488D9D[11C10300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   688 00000930 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   689 00000937 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   690 0000093D 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   690 00000942 [3BC00300]          <1>
   691 00000946 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   691 0000094F 20                  <1>
   692                              <1> ;GOTO FIRST FILE 
   693 00000950 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   694                              <1> ;Write AUX
   695 00000957 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   696 0000095C 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   697 00000962 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   698 00000966 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   699                              <1>     ;No EOF when reading from the device
   700 0000096A 488B85[23640000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   701 00000971 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   702                              <1>     ;Ignore disk related fields and Date/Time of open
   703 00000975 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   704                              <1>     ;11 chars in 8.3 name
   705 00000979 488D35BD060000      <1>     lea rsi, auxName
   706 00000980 B903000000          <1>     mov ecx, 3
   707 00000985 F3A4                <1>     rep movsb   ;Move the three bytes
   708 00000987 4889D0              <1>     mov rax, rdx
   709 0000098A 48AB                <1>     stosq   ;Eight spaces left to print
   710 0000098C 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   710 00000991 [F9C30300]          <1>
   711 00000995 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   712                              <1> ;GOTO NEXT ENTRY
   713 00000999 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   714                              <1>     ;Write CON
   715 000009A0 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   716 000009A5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   717 000009AB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   718 000009AF C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   719                              <1>     ;No EOF when reading from the device
   720 000009B3 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   720 000009B8 [4BC00300]          <1>
   721 000009BC 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   722                              <1>     ;Ignore disk related fields and Date/Time of open
   723 000009C0 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   724                              <1>     ;11 chars in 8.3 name
   725 000009C4 488D356E060000      <1>     lea rsi, conName
   726 000009CB B903000000          <1>     mov ecx, 3
   727 000009D0 F3A4                <1>     rep movsb   ;Move the three bytes
   728 000009D2 4889D0              <1>     mov rax, rdx
   729 000009D5 48AB                <1>     stosq   ;Eight spaces left to print
   730 000009D7 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   730 000009DC [F9C30300]          <1>
   731 000009E0 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   732                              <1> ;GOTO NEXT ENTRY
   733 000009E4 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   734                              <1> ;Write PRN
   735 000009EB 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   736 000009F0 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   737 000009F6 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   738 000009FA C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   739                              <1>     ;Want EOF when reading from to the device
   740 000009FE 488B85[45640000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   741 00000A05 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   742                              <1>     ;Ignore disk related fields and Date/Time of open
   743 00000A09 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   744                              <1>     ;11 chars in 8.3 name
   745 00000A0D 488D352D060000      <1>     lea rsi, prnName
   746 00000A14 B903000000          <1>     mov ecx, 3
   747 00000A19 F3A4                <1>     rep movsb   ;Move the three bytes
   748 00000A1B 4889D0              <1>     mov rax, rdx
   749 00000A1E 48AB                <1>     stosq   ;Eight spaces left to print
   750 00000A20 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   750 00000A25 [F9C30300]          <1>
   751 00000A29 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   752                              <1> ;Zero word 0 of entry 4 and 5
   753 00000A2D 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   754 00000A34 31C0                <1>     xor eax, eax
   755                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   756                              <1>     ; which is ok as these are empty entries, ready to be used)
   757 00000A36 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   758 00000A38 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   759 00000A3F 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   760                              <1> ;------------------------------------------------;
   761                              <1> ;               Setup Share Hooks                ;
   762                              <1> ;------------------------------------------------;
   763 00000A41 488DBD[99C00300]    <1>     lea rdi, qword [rbp + shareHooks]
   764 00000A48 488D9D[695F0000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   765 00000A4F 488D85[635F0000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   766 00000A56 48AB                <1>     stosq   ;Store bad for marker
   767 00000A58 4893                <1>     xchg rax, rbx
   768 00000A5A 48AB                <1>     stosq   ;Store good for open
   769 00000A5C 48AB                <1>     stosq   ;Store good for close
   770 00000A5E 4893                <1>     xchg rax, rbx
   771                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   772 00000A60 B905000000          <1>     mov ecx, 5
   773 00000A65 F348AB              <1>     rep stosq
   774 00000A68 4893                <1>     xchg rax, rbx
   775 00000A6A 48AB                <1>     stosq   ;Store good for check file lock exists
   776 00000A6C 4893                <1>     xchg rax, rbx
   777                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   778 00000A6E B903000000          <1>     mov ecx, 3
   779 00000A73 F348AB              <1>     rep stosq
   780 00000A76 4893                <1>     xchg rax, rbx
   781 00000A78 48AB                <1>     stosq   ;Store good for close dup file share
   782 00000A7A 4893                <1>     xchg rax, rbx
   783 00000A7C 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   784 00000A7E 48AB                <1>     stosq   ;Store bad for update dir information
   785                              <1> ;------------------------------------------------;
   786                              <1> ;             Print Welcome Message              ;
   787                              <1> ;------------------------------------------------;
   788 00000A80 488D152C050000      <1>     lea rdx, strtmsg
   789 00000A87 B409                <1>     mov ah, 09h
   790 00000A89 CD41                <1>     int 41h    
   791                              <1> ;------------------------------------------------;
   792                              <1> ;               Load CONFIG.SYS                  ;
   793                              <1> ;------------------------------------------------;
   794                              <1> ;Setup stackframe, workout base 
   795 00000A8B 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   796                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   797 00000A92 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   798 00000A96 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   799 00000A9C 7421                <1>     je setupFrame   ;If so, jump
   800 00000A9E 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   801 00000AA1 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   802 00000AA5 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   803 00000AAB 7412                <1>     je setupFrame   ;If so, jump
   804 00000AAD 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   805 00000AB0 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   806 00000AB4 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   807 00000ABA 7403                <1>     je setupFrame   ;If so, jump
   808 00000ABC 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   809                              <1> setupFrame:
   810 00000ABF 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   811 00000AC6 55                  <1>     push rbp
   812 00000AC7 4889E5              <1>     mov rbp, rsp
   813 00000ACA 4881EC20000000      <1>     sub rsp, cfgFrame_size
   814 00000AD1 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   815 00000AD5 C645F81E            <1>     mov byte [rbp - cfgFrame.newBuffers], buffersDefault
   816 00000AD9 C645F714            <1>     mov byte [rbp - cfgFrame.newSFTVal], filesDefault
   817 00000ADD C645F604            <1>     mov byte [rbp - cfgFrame.newFCBSVal], fcbsDefault
   818 00000AE1 C645F500            <1>     mov byte [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   819 00000AE5 C645F405            <1>     mov byte [rbp - cfgFrame.newLastdrive], lastDriveDeflt
   820                              <1> 
   821 00000AE9 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   822 00000AF1 A880                <1>     test al, 80h    ;Was boot drive hard disk?
   823 00000AF3 7406                <1>     jz notHDD
   824                              <1> ;Set Current Drive to C:
   825 00000AF5 B202                <1>     mov dl, 2
   826 00000AF7 B40E                <1>     mov ah, 0Eh ;Select C: Drive
   827 00000AF9 CD41                <1>     int 41h
   828                              <1> notHDD:
   829 00000AFB 488D1543050000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   830 00000B02 B43D                <1>     mov ah, 3Dh ;Open file for reading
   831 00000B04 B000                <1>     mov al, ReadAccess
   832 00000B06 CD41                <1>     int 41h
   833 00000B08 7200                <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   834                              <1> 
   835                              <1> ;------------------------------------------------;
   836                              <1> ;              Process CONFIG.SYS                ;
   837                              <1> ;------------------------------------------------;
   838                              <1> ;Create a stack frame with the following order.
   839                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   840                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   841                              <1> ; New SFT value.            Default = 20, Min = 5, Max = 254
   842                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   843                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   844                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   845                              <1> ;------------------------------------------------;
   846                              <1> ;   Setup Final Data Areas With Overrides from   ;
   847                              <1> ;                  CONFIG.SYS                    ;
   848                              <1> ;------------------------------------------------;
   849                              <1> ;Add additional buffers. Start from tmpBufHdr
   850                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
   851                              <1> ;Add additional FCBS.
   852                              <1> ;Create a larger CDS if needed.
   853                              <1> noCfg:
   854                              <1> ;Start with buffers:
   855 00000B0A 0FB64DF8            <1>     movzx ecx, byte [rbp - cfgFrame.newBuffers]    ;Get new buffers size
   856 00000B0E 64880C25[71C00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
   857                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
   858 00000B16 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
   858 00000B1B [53C00300]          <1>
   859 00000B1F 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
   860                              <1>     ;Each buffer has no flags, drive number must be -1
   861 00000B25 488B7DE8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
   862 00000B29 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
   862 00000B2E [55C00300]          <1>
   863 00000B32 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
   864 00000B35 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
   865 00000B37 67E325              <1>     jecxz .lastBuffer
   866                              <1> .bufferLoop:
   867 00000B3A 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
   868 00000B3D 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
   869 00000B40 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   870 00000B46 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   871 00000B4A 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   872 00000B4D 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   873 00000B50 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   874 00000B54 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   875 00000B58 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
   876 00000B5B FFC9                <1>     dec ecx
   877 00000B5D 75DB                <1>     jnz .bufferLoop
   878                              <1> .lastBuffer:
   879 00000B5F 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
   880 00000B62 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   881 00000B69 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   882 00000B6F 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   883 00000B73 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   884 00000B76 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   885 00000B79 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   886 00000B7D 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   887 00000B81 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   888                              <1> 
   889                              <1> ;Now build a new SFT header for the number of files specified by user
   890 00000B85 0FB64DF7            <1>     movzx ecx, byte [rbp - cfgFrame.newSFTVal]
   891 00000B89 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
   892 00000B8F 7430                <1>     je .skipSFT
   893 00000B91 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
   893 00000B96 [3BC00300]          <1>
   894 00000B9A 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
   895 00000B9D 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
   896 00000BA1 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
   897 00000BA5 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
   898 00000BAC 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
   899 00000BB3 B84F000000          <1>     mov eax, sft_size
   900 00000BB8 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   901 00000BBA 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   902 00000BBD 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   903                              <1> .skipSFT:
   904                              <1> ;FCBS at rdi
   905 00000BC1 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
   905 00000BC6 [65C00300]          <1>
   906 00000BCA 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
   907 00000BD1 0FB64DF6            <1>     movzx ecx, byte [rbp - cfgFrame.newFCBSVal]
   908 00000BD5 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
   909 00000BD9 B84F000000          <1>     mov eax, sft_size
   910 00000BDE F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   911 00000BE0 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   912 00000BE3 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   913 00000BE7 0FB64DF5            <1>     movzx ecx, byte [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
   914 00000BEB 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
   914 00000BF0 [6DC00300]          <1>
   915                              <1> ;And CDS now
   916 00000BF4 0FB64DF4            <1>     movzx ecx, byte [rbp - cfgFrame.newLastdrive]
   917 00000BF8 64880C25[70C00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
   918 00000C00 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
   918 00000C05 [5DC00300]          <1>
   919 00000C09 E8D8FBFFFF          <1>     call makeCDSArray
   920 00000C0E 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   921                              <1> 
   922                              <1> ;Computation of new space is complete, now work out how many bytes this is
   923 00000C12 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
   924 00000C15 5D                  <1>     pop rbp
   925 00000C16 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
   926 00000C1D 4829DF              <1>     sub rdi, rbx    ;Gives difference now
   927 00000C20 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
   928 00000C24 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   929                              <1> ;Resize DOS allocation before loading COMMAND.COM
   930 00000C27 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   930 00000C2C [2BC00300]          <1>
   931 00000C30 4981C010000000      <1>     add r8, mcb.program
   932 00000C37 B44A                <1>     mov ah, 4Ah
   933 00000C39 CD41                <1>     int 41h
   934                              <1>     
   935                              <1>     %if DEBUG && ALLOCTEST
   936                              <1> ;Test Allocation, Growth and Deallocation
   937                              <1>     mov r15, qword fs:[currentPSP]
   938                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   939                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   940                              <1>     mov ah, 48h ;Allocate
   941                              <1>     int 41h
   942                              <1> 
   943                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   944                              <1>     mov r8, rax ;Move the pointer to r8
   945                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   946                              <1>     mov ah, 4Ah
   947                              <1>     int 41h
   948                              <1> 
   949                              <1>     mov ah, 49h ;Free r8
   950                              <1>     int 41h
   951                              <1>     mov qword fs:[currentPSP], r15
   952                              <1>     %endif
   953                              <1> 
   954                              <1>     %if ENDSTATUS
   955                              <1> debugFinal:
   956                              <1>     ;Print system state
   957 00000C3B 55                  <1>     push rbp    ;Only rbp really matters here
   958 00000C3C 4989E8              <1>     mov r8, rbp
   959                              <1> 
   960 00000C3F 488D2DD0020000      <1>     lea rbp, .msg2
   961 00000C46 4D8D88[AF040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   962 00000C4D 41FFD1              <1>     call r9
   963                              <1> 
   964 00000C50 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   965 00000C57 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   965 00000C5C [08C00300]          <1>
   966                              <1> 
   967 00000C60 4D8D88[EA070000]    <1>     lea r9, qword [r8 + overlayQword]
   968 00000C67 41FFD1              <1>     call r9
   969                              <1> 
   970 00000C6A 4881C31B000000      <1>     add rbx, 19+8
   971 00000C71 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   971 00000C76 [00C00300]          <1>
   972 00000C7A 41FFD1              <1>     call r9
   973                              <1> 
   974 00000C7D 4881C31B000000      <1>     add rbx, 19+8
   975 00000C84 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   975 00000C89 [2BC00300]          <1>
   976 00000C8D 41FFD1              <1>     call r9
   977                              <1> 
   978 00000C90 4881C31C000000      <1>     add rbx, 20+8
   979 00000C97 4D8D88[A7070000]    <1>     lea r9, qword [r8 + overlayDword]
   980 00000C9E 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   981 00000CA6 41FFD1              <1>     call r9
   982                              <1> 
   983 00000CA9 4881C312000000      <1>     add rbx, 10+8
   984 00000CB0 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   985 00000CB8 41FFD1              <1>     call r9
   986                              <1> 
   987 00000CBB 4881C312000000      <1>     add rbx, 10+8
   988 00000CC2 64488B0425-         <1>     mov rax, qword fs:[longMem]
   988 00000CC7 [1BC00300]          <1>
   989 00000CCB 4D8D88[EA070000]    <1>     lea r9, qword [r8 + overlayQword]
   990 00000CD2 41FFD1              <1>     call r9
   991                              <1> 
   992 00000CD5 4881C31B000000      <1>     add rbx, 19+8
   993 00000CDC 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   993 00000CE1 [33C00300]          <1>
   994 00000CE5 41FFD1              <1>     call r9
   995                              <1> 
   996 00000CE8 4881C31B000000      <1>     add rbx, 19+8
   997 00000CEF 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   997 00000CF4 [3BC00300]          <1>
   998 00000CF8 41FFD1              <1>     call r9
   999                              <1> 
  1000 00000CFB 4881C31B000000      <1>     add rbx, 19+8
  1001 00000D02 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
  1001 00000D07 [55C00300]          <1>
  1002 00000D0B 41FFD1              <1>     call r9
  1003                              <1> 
  1004 00000D0E 4881C31B000000      <1>     add rbx, 19+8
  1005 00000D15 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
  1005 00000D1A [5DC00300]          <1>
  1006 00000D1E 41FFD1              <1>     call r9
  1007                              <1> 
  1008 00000D21 4D8D88[35070000]    <1>     lea r9, qword [r8 + overlayByte]
  1009                              <1> 
  1010 00000D28 4881C32C000000      <1>     add rbx, 25+19
  1011 00000D2F 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
  1011 00000D35 [6FC00300]          <1>
  1012 00000D39 41FFD1              <1>     call r9
  1013                              <1> 
  1014 00000D3C 4881C31E000000      <1>     add rbx, 30
  1015 00000D43 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
  1015 00000D49 [12C00300]          <1>
  1016 00000D4D 41FFD1              <1>     call r9
  1017                              <1> 
  1018 00000D50 4881C31E000000      <1>     add rbx, 30
  1019 00000D57 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
  1019 00000D5D [11C00300]          <1>
  1020 00000D61 41FFD1              <1>     call r9
  1021                              <1> 
  1022 00000D64 4881C310000000      <1>     add rbx, 16
  1023 00000D6B 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
  1023 00000D71 [10C00300]          <1>
  1024 00000D75 0441                <1>     add al, "A"
  1025 00000D77 8803                <1>     mov byte [rbx], al
  1026                              <1> 
  1027 00000D79 488D2D10000000      <1>     lea rbp, .msg
  1028 00000D80 4D8D88[AF040000]    <1>     lea r9, qword [r8 + debPrintNullString]
  1029 00000D87 41FFD1              <1>     call r9
  1030 00000D8A 5D                  <1>     pop rbp
  1031 00000D8B E99E010000          <1>     jmp l1
  1032 00000D90 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1032 00000D99 206261736520464646- <1>
  1032 00000DA2 464646464646464646- <1>
  1032 00000DAB 46464646680A0D      <1>
  1033 00000DB2 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1033 00000DBB 464646464646464646- <1>
  1033 00000DC4 464646464646680A0D  <1>
  1034 00000DCD 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1034 00000DD6 464646464646464646- <1>
  1034 00000DDF 46464646464668200A- <1>
  1034 00000DE8 0D                  <1>
  1035 00000DE9 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
  1035 00000DF2 464646464646466820  <1>
  1036 00000DFB 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
  1036 00000E04 464646464646466820  <1>
  1037 00000E0D 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1037 00000E16 464646464646464646- <1>
  1037 00000E1F 464646464646680A0D  <1>
  1038 00000E28 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1038 00000E31 464646464646464646- <1>
  1038 00000E3A 464646464646680A0D  <1>
  1039 00000E43 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1039 00000E4C 464646464646464646- <1>
  1039 00000E55 464646464646680A0D  <1>
  1040 00000E5E 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1040 00000E67 464646464646464646- <1>
  1040 00000E70 464646464646680A0D  <1>
  1041 00000E79 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1041 00000E82 464646464646464646- <1>
  1041 00000E8B 464646464646680A0D  <1>
  1042 00000E94 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1042 00000E9D 204C6F676963616C20- <1>
  1042 00000EA6 447269766573204646- <1>
  1042 00000EAF 680A0D              <1>
  1043 00000EB2 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1043 00000EBB 204669786564204472- <1>
  1043 00000EC4 697665732020204646- <1>
  1043 00000ECD 680A0D              <1>
  1044 00000ED0 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1044 00000ED9 2052656D6F7661626C- <1>
  1044 00000EE2 652044727673204646- <1>
  1044 00000EEB 680A0D              <1>
  1045 00000EEE 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
  1045 00000EF7 65205A3A0A0D        <1>
  1046 00000EFD 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1046 00000F06 4F4D4D414E442E434F- <1>
  1046 00000F0F 4D2E2E2E0A0D00      <1>
  1047 00000F16 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1047 00000F1F 626F6F742073756D6D- <1>
  1047 00000F28 6172790A0D00        <1>
  1048                              <1>     %endif
  1049                              <1> l1:
  1050                              <1>     ;Load COMMAND.COM
  1051                              <1>     ;Get currentPSP ptr
  1052 00000F2E B462                <1>     mov ah, 62h ;Get current PSP ptr in rdx
  1053 00000F30 CD41                <1>     int 41h
  1054 00000F32 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1055 00000F34 CD41                <1>     int 41h
  1056 00000F36 0441                <1>     add al, "A"
  1057 00000F38 880512010000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1058 00000F3E 488D1D1A010000      <1>     lea rbx, cmdBlock
  1059 00000F45 488D425C            <1>     lea rax, qword [rdx + psp.fcb1]
  1060 00000F49 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1061 00000F4D 488D426C            <1>     lea rax, qword [rdx + psp.fcb2]
  1062 00000F51 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1063 00000F55 488D15F4000000      <1>     lea rdx, cmdLine
  1064 00000F5C 48895308            <1>     mov qword [rbx + execProg.pCmdLine], rdx    ;Store command line here
  1065 00000F60 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1066 00000F65 CD41                <1>     int 41h
  1067 00000F67 488D15A6000000      <1>     lea rdx, badCom
  1068 00000F6E B409                <1>     mov ah, 09h ;Print message
  1069 00000F70 CD41                <1>     int 41h
  1070 00000F72 E92A000000          <1>     jmp errorInit.ei0
  1071                              <1>     
  1072                              <1> ;--------------------------------
  1073                              <1> ;       PROCS FOR SYSINIT       :
  1074                              <1> ;--------------------------------
  1075                              <1> adjustDrvHdr:
  1076                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1077                              <1> ;       rbp = Ptr to the start of the DOS segment
  1078                              <1> ;Output: rsi = EA of next header in DOS segment
  1079 00000F77 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1080 00000F7B 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1081 00000F7F 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1082 00000F86 740A                <1>     je .exit
  1083 00000F88 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1084 00000F8B 4881C622000000      <1>     add rsi, drvHdr_size
  1085                              <1> .exit:
  1086 00000F92 C3                  <1>     ret
  1087                              <1> errorInit:
  1088                              <1> ;If a critical error occurs during sysinit, fail through here
  1089                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1090 00000F93 488D2D49000000      <1>     lea rbp, hltmsg
  1091 00000F9A B804130000          <1>     mov eax, 1304h
  1092 00000F9F CD30                <1>     int 30h
  1093                              <1>     ;cli ;Clear interrupts
  1094                              <1>     ;mov al, -1
  1095                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1096                              <1>     ;out dx, al      ;Mask all lines
  1097                              <1>     ;mov dx, 21h     ;PIC1 data
  1098                              <1>     ;out dx, al      ;Mask all lines
  1099                              <1> .ei0:
  1100 00000FA1 F4                  <1>     hlt
  1101 00000FA2 F390                <1>     pause
  1102 00000FA4 EBFB                <1>     jmp short .ei0
  1103                              <1> noCmdCom:
  1104 00000FA6 488D1567000000      <1>     lea rdx, badCom
  1105 00000FAD B409                <1>     mov ah, 09h
  1106 00000FAF CD41                <1>     int 41h
  1107 00000FB1 EBEE                <1>     jmp short errorInit.ei0
  1108                              <1> ;--------------------------------
  1109                              <1> ;       DATA FOR SYSINIT        :
  1110                              <1> ;--------------------------------
  1111 00000FB3 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1111 00000FBC 5343502F444F532E2E- <1>
  1111 00000FC5 2E0A0D24            <1>
  1112 00000FC9 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1112 00000FD2 6C6F636174696F6E20- <1>
  1112 00000FDB 4572726F720A0D00    <1>
  1113 00000FE3 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1113 00000FEC 7469616C6973696E67- <1>
  1113 00000FF5 20534350444F532E53- <1>
  1113 00000FFE 59532E205379737465- <1>
  1113 00001007 6D2068616C74696E67- <1>
  1113 00001010 2E2E2E00            <1>
  1114 00001014 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1114 0000101D 7373696E6720436F6D- <1>
  1114 00001026 6D616E6420696E7465- <1>
  1114 0000102F 727072657465720A0D- <1>
  1114 00001038 24                  <1>
  1115 00001039 434F4E00            <1> conName db "CON",0
  1116 0000103D 41555800            <1> auxName db "AUX",0
  1117 00001041 50524E00            <1> prnName db "PRN",0
  1118                              <1> 
  1119 00001045 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1119 0000104E 5300                <1>
  1120 00001050 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0
  1120 00001059 442E434F4D00        <1>
  1121                              <1> cmdBlock:
  1122                              <1>     istruc execProg
  1123 0000105F 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Keep at 0 to "copy" DOS's environment ptr
  1124 00001067 0000000000000000    <1>     at execProg.pCmdLine,   dq 0
  1125 0000106F 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1126 00001077 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1127                              <1>     iend
  1128                              <1> 
  1129                              <1> intData:
  1130 0000107F [8C4C000000000000]  <1>     dq terminateProcess ;Int 40h
  1131 00001087 [A55D000000000000]  <1>     dq functionDispatch ;Int 41h
  1132 0000108F [930F000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1133 00001097 [FD5E000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1134 0000109F [B456000000000000]  <1>     dq dosDefCritErrHdlr 
  1135 000010A7 [8457000000000000]  <1>     dq absDiskRead      ;Int 45h
  1136 000010AF [6557000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1137 000010B7 [934C000000000000]  <1>     dq terminateRes     ;Int 47h
  1138 000010BF [FD5E000000000000]  <1>     dq defaultIretq     ;Int 48h
  1139 000010C7 [FD5E000000000000]  <1>     dq defaultIretq     ;Int 49h
  1140 000010CF [FD5E000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1141 000010D7 [FD5E000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1142 000010DF [FD5E000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1143 000010E7 [FD5E000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1144 000010EF [FD5E000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1145 000010F7 [CE63000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1146                              <1> nData:
  1147 000010FF [0164000000000000]  <1>     dq conHdr
  1148 00001107 0480                <1>     dw 08004h
  1149 00001109 [A965000000000000]  <1>     dq nulStrat
  1150 00001111 [AF65000000000000]  <1>     dq nulIntr
  1151 00001119 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1152                              <1> 
  1153                              <1> diskInit:
  1154                              <1>     ;We create a function to deal with BPB parsing etc
  1155                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1156                              <1>     ;   They dont have to be bootable
  1157                              <1>     ;Then go back and look for other partitions partitions. 
  1158                              <1>     ;   Add each other primary or logical ptn (until max)
  1159                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1160                              <1>     ;Use r8 as device counter
  1161 00001121 488DBD[7A6D0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1162 00001128 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1162 00001130 00                  <1>
  1163 00001131 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1164 00001137 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1164 00001140 00                  <1>
  1165 00001141 B280                <1>     mov dl, 80h ;Start with HDD 0
  1166                              <1> .primary:
  1167 00001143 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1167 0000114B 03                  <1>
  1168 0000114C 0F84AB000000        <1>     je .remInit
  1169 00001152 31C9                <1>     xor ecx, ecx    ;Sector 0
  1170 00001154 E871010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1171 00001159 0F8289000000        <1>     jc .primaryEpilog
  1172                              <1>     ;Here, check MBR or BPB
  1173 0000115F 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1174 00001168 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1175                              <1>     ;Now check if BPB or MBR
  1176 0000116A 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1177 0000116C 8A6302              <1>     mov ah, byte [rbx + 2]
  1178 0000116F 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1179 00001173 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1180                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1181                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1182 00001175 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1183 0000117C B104                <1>     mov cl, 4
  1184                              <1> .checkPrimary:
  1185 0000117E 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1186 00001181 3C01                <1>     cmp al, 01
  1187 00001183 7421                <1>     je .primaryFound
  1188 00001185 3C04                <1>     cmp al, 04
  1189 00001187 741D                <1>     je .primaryFound
  1190 00001189 3C06                <1>     cmp al, 06
  1191 0000118B 7419                <1>     je .primaryFound
  1192 0000118D 3C0B                <1>     cmp al, 0Bh
  1193 0000118F 7415                <1>     je .primaryFound
  1194 00001191 3C0C                <1>     cmp al, 0Ch
  1195 00001193 7411                <1>     je .primaryFound
  1196 00001195 3C0E                <1>     cmp al, 0Eh
  1197 00001197 740D                <1>     je .primaryFound
  1198 00001199 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1199 000011A0 FEC9                <1>     dec cl
  1200 000011A2 7444                <1>     jz .primaryEpilog
  1201 000011A4 EBD8                <1>     jmp short .checkPrimary
  1202                              <1> .primaryFound:
  1203                              <1>     ;Copy the first sector of this partition into memory
  1204 000011A6 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1205 000011A9 E81C010000          <1>     call .initReadSector
  1206 000011AE 7238                <1>     jc .primaryEpilog
  1207                              <1>     ;Now verify this is a BPB
  1208 000011B0 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1209 000011B2 8A6302              <1>     mov ah, byte [rbx + 2]
  1210 000011B5 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1211 000011B9 752D                <1>     jne .primaryEpilog   ;If not, skip
  1212                              <1>     ;Now copy data to internal tables
  1213 000011BB 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1214 000011BE B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1215 000011C3 57                  <1>     push rdi
  1216 000011C4 F348A5              <1>     rep movsq   ;Copy the BPB
  1217 000011C7 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1218                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1219 000011C8 4A8D9C05[486D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1220                              <1>     ;Add device count to rbx to point to correct entry
  1221 000011D0 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1222 000011D2 4A8D9CC5[526D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1223 000011DA 488933              <1>     mov qword [rbx], rsi
  1224 000011DD 49FFC0              <1>     inc r8  ;Goto next logical drive
  1225 000011E0 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1226                              <1> .primaryEpilog:
  1227 000011E8 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1228 000011EA 88D6                <1>     mov dh, dl
  1229 000011EC 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1230 000011EF 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1231 000011F7 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1232                              <1> .extended:
  1233                              <1> ;We have gone through all the devices once
  1234                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1235                              <1>     ;je .remInit ;If yes, get removable devices
  1236                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1237                              <1>     ;xor ecx, ecx    ;Get MBR back
  1238                              <1>     ;call .initReadSector
  1239                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1240                              <1> .remInit:
  1241                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1242                              <1> ; for some reason the removable drives stop working or dont exist.
  1243                              <1> ;This forces the hard drives to start at C:
  1244 000011FD 53                  <1>     push rbx
  1245 000011FE 488D9D[7A6D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBblks] ;Get default drive A block ptr
  1246 00001205 48899D[526D0000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl], rbx  ;Store in ptrs table
  1247 0000120C 4881C378000000      <1>     add rbx, bpbEx_size ;Goto next ptr
  1248 00001213 48899D[5A6D0000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl + 8], rbx  ;Store next pointer
  1249 0000121A 5B                  <1>     pop rbx
  1250                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1251 0000121B 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1252 0000121E 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1253 00001220 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1254                              <1>     ;rdi points to the space for the subsequent bpb's
  1255 00001223 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1255 0000122B 00                  <1>
  1256 0000122C 750A                <1>     jnz .removables
  1257 0000122E 64800425[6FC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1257 00001236 02                  <1>
  1258 00001237 C3                  <1>     ret ;and return!
  1259                              <1> .removables:
  1260 00001238 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1261 0000123A E88B000000          <1>     call .initReadSector
  1262 0000123F 7238                <1>     jc .removableEpilogue   ;Goto next device
  1263                              <1>     ;Now verify this is a BPB
  1264 00001241 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1265 00001243 8A6302              <1>     mov ah, byte [rbx + 2]
  1266 00001246 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1267 0000124A 752D                <1>     jne .removableEpilogue   ;If not, skip
  1268                              <1>     ;Now copy data to internal tables
  1269 0000124C 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1270 0000124F B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1271 00001254 57                  <1>     push rdi
  1272 00001255 F348A5              <1>     rep movsq   ;Copy the BPB
  1273 00001258 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1274                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1275 00001259 4A8D9C05[486D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1276                              <1>     ;Add device count to rbx to point to correct entry
  1277 00001261 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1278 00001263 4A8D9CC5[526D0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1279 0000126B 488933              <1>     mov qword [rbx], rsi
  1280 0000126E 49FFC0              <1>     inc r8  ;Goto next logical drive
  1281 00001271 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1282                              <1> .removableEpilogue:
  1283 00001279 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1284 0000127B 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1285 00001283 7412                <1>     je .end
  1286 00001285 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1287 0000128C 7403                <1>     je .re0
  1288 0000128E 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1289                              <1> .re0:
  1290 00001291 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1291 00001295 72A1                <1>     jb .removables
  1292                              <1> .end:
  1293 00001297 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1293 0000129F 01                  <1>
  1294 000012A0 7401                <1>     je .singleRemDev
  1295 000012A2 C3                  <1>     ret
  1296                              <1> .singleRemDev:
  1297                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1298 000012A3 488D9D[486D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1299 000012AA 8A95[486D0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1300 000012B0 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1301 000012B3 488D9D[526D0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1302 000012BA 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1303 000012BD 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1304 000012C1 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1305 000012C9 C3                  <1>     ret
  1306                              <1> .initReadSector:
  1307                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1308 000012CA B482                <1>     mov ah, 82h ;Read
  1309 000012CC B001                <1>     mov al, 1   ;One sector
  1310 000012CE 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1311 000012D5 CD33                <1>     int 33h
  1312 000012D7 C3                  <1>     ret
    16                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    17                                  %include "./Source/BSS/dosSeg.asm"
    18                              <1> ;This file contains the main DOS data segment
    19                              <1> dosAPT: ;Additional Page tables
    20 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    21                              <1> dosDataArea:
    22 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    23 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    24 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    25 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    26 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    27 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    28 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    29 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    30                              <1> ;Above is the system stats
    31                              <1> ;Below is the DOS vars
    32 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    33                              <1>     ;   A value of 0 means no chars buffered.
    34 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    35                              <1> sysVarsPtr:
    36 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    37 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    38 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    39                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    40 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    41                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    42 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    43 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    44 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    45 0003C065 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    46 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    47                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    48 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    49 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    50 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    51 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    52 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    53                              <1> ;Additional internal variables
    54                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    55 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    56 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    57 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    58                              <1>     ;PLEASE DO NOT TOUCH MAXHNDLS!!!
    59                              <1>     ;Share hook functions here
    60                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
    61                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
    62                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
    63                              <1> 
    64                              <1>     ;Note to programmer - Please adjust as necessary:
    65                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
    66                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
    67                              <1> shareHooks:
    68 0003C099 ????????????????    <1>     markerShare resq 1  ;Marker Share hook, unused
    69 0003C0A1 ????????????????    <1>     openShare   resq 1  ;Share called on open. UNUSED 
    70 0003C0A9 ????????????????    <1>     closeShare  resq 1  ;Share called on close. UNUSED
    71 0003C0B1 ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine. UNUSED.
    72 0003C0B9 ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task. UNUSED.
    73 0003C0C1 ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name. UNUSED.
    74 0003C0C9 ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.
    75 0003C0D1 ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.
    76 0003C0D9 ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked. UNUSED.
    77 0003C0E1 ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry. UNUSED.
    78 0003C0E9 ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.  UNUSED.
    79 0003C0F1 ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB. UNUSED.
    80 0003C0F9 ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc. UNUSED.
    81 0003C101 ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. UNUSED
    82 0003C109 ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT. UNUSED. 
    83                              <1> ;Create SFT header and corresponding array of five default sft entries
    84 0003C111 <res Ah>            <1>     firstSftHeader  resb sfth_size
    85 0003C11B <res 4Fh>           <1>     firstSft    resb sft_size
    86 0003C16A <res 4Fh>           <1>     secondSft   resb sft_size
    87 0003C1B9 <res 4Fh>           <1>     thirdSft    resb sft_size
    88 0003C208 <res 4Fh>           <1>     fourthSft   resb sft_size
    89 0003C257 <res 4Fh>           <1>     fifthSft    resb sft_size
    90                              <1> 
    91                              <1> ;Virtual CONsole Buffers
    92 0003C2A6 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    93                              <1>     ;Only incremented when CON device runs vCon
    94                              <1> vConBuf:    ;Proper buffer symbol
    95 0003C2A7 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    96 0003C2A8 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    97                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    98 0003C328 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    99 0003C3A8 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   100                              <1> 
   101 0003C3A9 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   102 0003C3AA ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   103 0003C3AB ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   104 0003C3AC ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   105                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   106                              <1> 
   107 0003C3AD ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   108                              <1> ;Server stuff. Default to all zeros (blank)
   109 0003C3AE ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   110                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   111 0003C3AF ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
   112 0003C3B0 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
   113                              <1> ;Swappable Data Area
   114 0003C3C0 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   115 0003C3E0 ??                  <1>                 resb 1  ;Alignment byte
   116                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   117 0003C3E1 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   118 0003C3E2 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   119 0003C3E3 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   120 0003C3E4 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   121 0003C3E5 ????                <1>     errorExCde  resw 1  ;Extended Error Code
   122 0003C3E7 ??                  <1>     errorAction resb 1  ;Suggested action for error  
   123 0003C3E8 ??                  <1>     errorClass  resb 1  ;Error Class
   124 0003C3E9 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   125 0003C3F1 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   126 0003C3F9 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   127                              <1> 
   128 0003C401 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   129 0003C409 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   130                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   131                              <1>     ;Lower byte: User Specified
   132 0003C40B ??                  <1>     currentDrv  resb 1  ;Default drive x
   133 0003C40C ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   134                              <1> ;SDA, needs to be replaced between processes
   135                              <1> sdaMainSwap:
   136 0003C40D ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   137 0003C415 ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   138 0003C41D ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   139 0003C41F ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   140 0003C427 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   141 0003C42F ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   142 0003C437 ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   143 0003C439 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   144 0003C441 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   145 0003C442 ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   146 0003C443 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   147                              <1> 
   148 0003C444 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   149 0003C44C ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   150 0003C454 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   151 0003C45C ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   152 0003C464 ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   153                              <1> ;The below flag tells DOS to print ^C in the termination function
   154 0003C465 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   155 0003C466 ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   156                              <1> ;Time stuff
   157                              <1> ;Read the below two as a word
   158 0003C467 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   159 0003C468 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   160 0003C469 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   161 0003C46A ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   162 0003C46C ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   163                              <1> 
   164 0003C46D ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   165 0003C46E ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   166 0003C46F ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   167                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   168                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   169                              <1> ; without forcing to re-build the whole primary request block.
   170                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   171                              <1> ; with secondary char output going through the secondary header
   172                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   173                              <1> ; for output)
   174                              <1> ;ioReqPkt is the largest possible packet
   175 0003C470 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   176 0003C49A <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   177 0003C4C4 <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   178 0003C4EE ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   179                              <1> ;Swappable Buffers
   180 0003C4EF ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   181                              <1>     ;We add an additional byte to save ah too
   182 0003C4F5 ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   183 0003C4F7 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   184 0003C577 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   185 0003C5F7 ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   186 0003C5FF ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   187 0003C607 ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   188                              <1> ;Misc bookkeeping flags and vars
   189 0003C608 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   190 0003C633 <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   191 0003C653 <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   192 0003C6AE <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   193 0003C6BA <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   194 0003C6C6 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   195                              <1> 
   196 0003C6CE ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   197 0003C6CF ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   198 0003C6D0 ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   199 0003C6D1 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   200 0003C6D2 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   201 0003C6D3 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   202 0003C6D4 ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   203 0003C6D5 ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write
   204 0003C6D6 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   205 0003C6D7 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   206                              <1> 
   207 0003C6D8 ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   208 0003C6D9 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   209 0003C6DA ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   210 0003C6DB ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   211 0003C6DC ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   212 0003C6DD ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   213 0003C6DE ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   214                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   215                              <1> workingDD:  ;Create a symbol for the working device driver too
   216 0003C6DF ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   217 0003C6E7 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   218 0003C6EF ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   219                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   220                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   221 0003C6F7 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   222 0003C6FF ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   223 0003C707 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   224 0003C70F ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   225 0003C711 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   226 0003C713 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   227                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   228                              <1> ; and 32 byte offset into the sector for directory
   229 0003C71B ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   230                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   231                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   232 0003C723 ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   233                              <1> ;***************************************************|
   234                              <1> ; Needs to be set up before any file access         |
   235                              <1> ; These vars keep track of file access properties   |
   236                              <1> ;   and must be used only for such purposes.        |
   237                              <1> ;***************************************************|
   238 0003C725 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   239 0003C729 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   240                              <1> 
   241 0003C72D ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   242 0003C731 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   243 0003C732 ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   244                              <1> 
   245 0003C73A ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   246 0003C73C ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   247                              <1> ;***************************************************|
   248 0003C740 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   249 0003C744 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   250 0003C748 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   251 0003C749 ????????            <1>     bytesAppend resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   252 0003C74D ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   253 0003C751 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   254                              <1> ;Directory stuff
   255 0003C755 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   256 0003C759 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   257 0003C75D ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   258 0003C75F ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   259                              <1> ;Error DPB 
   260 0003C763 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   261 0003C76B ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   262                              <1>     
   263 0003C76C <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   264 0003C797 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   265                              <1> ;Stacks and scratch SFT
   266 0003C7B7 <res 528h>          <1>     critStack   resq 165
   267 0003CCDF ????????????????    <1>     critStakTop resq 1
   268                              <1> 
   269 0003CCE7 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   270                              <1> 
   271 0003CD36 <res 638h>          <1>     AuxStack    resq 199
   272 0003D36E ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   273 0003D376 <res 638h>          <1>     DiskStack   resq 199
   274 0003D9AE ????????????????    <1>     DiskStakTop resq 1
   275                              <1> 
   276 0003D9B6 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   277 0003D9B7 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   278                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   279 0003D9B8 <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   280 0003DA28 <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   281                              <1>     sdaLen      equ     $ - sda 
   282                              <1>     sdaMSLen    equ     $ - sda
   283                              <1> 
   284                              <1> ;Additional variables NOT in the SDA
   285 0003DA50 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   286                              <1>     ;for saving the current header when quickly doing a second request
   287                              <1> 
   288 0003DA7A ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   289 0003DA7B ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   290                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   291                              <1> inExtASCII:
   292 0003DA7D ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   293 0003DA7E ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   294                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   295                              <1>     ; copy of the date/time record
   296                              <1> 
   297                              <1>     dSegLen     equ     $
    18                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    19                                  %define currSegVBase section.resSeg.vstart
    20                                  %include "./Source/Data/staticData.asm"
    21                              <1> 
    22                              <1> ;-----------------------------------:
    23                              <1> ;       Static Data Variables       :
    24                              <1> ;-----------------------------------:
    25 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    26 00000001 01                  <1> dosMinor    db 01h      ;.01
    27 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    27 0000000B 535953              <1>
    28 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    28 00000017 535953              <1>
    29                              <1> 
    30                              <1> ;-----------------------------------:
    31                              <1> ;        Static Data Tables         :
    32                              <1> ;-----------------------------------:
    33                              <1> ctryTbl:
    34                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
    35 0000001A 0100                <1>     dw 1            
    36 0000001C 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
    37 00000021 2C00                <1>     db ",",0
    38 00000023 2E00                <1>     db ".",0
    39 00000025 2D00                <1>     db "-",0
    40 00000027 3A00                <1>     db ":",0
    41 00000029 00                  <1>     db 0
    42 0000002A 02                  <1>     db 2 
    43 0000002B 00                  <1>     db 0 
    44 0000002C 0000000000000000    <1>     dq 0 
    45 00000034 2C00                <1>     db ",",0    
    46 00000036 000000000000000000- <1>     db 0,0,0,0,0,0,0,0,0,0
    46 0000003F 00                  <1>
    47                              <1> 
    48                              <1> ;IO Char table
    49                              <1> ;This table has Request header length, command code and error flags
    50                              <1> ; as a packed DWORD entry
    51                              <1> ioRqCmdErrTbl:
    52                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    53                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    54 00000040 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    55 00000044 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    56 00000048 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    57 0000004C 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    58 00000050 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    59 00000054 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    60                              <1> 
    61                              <1> 
    62                              <1> 
    63                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    64                              <1> ; wish to install their own custom logic.
    65 00000058 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    66 00000060 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    67 00000061 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    68                              <1> ;Extended ASCII keys with special meanings
    69 00000062 3B                  <1> extKeyTbl   db eF1
    70 00000063 C926                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    71 00000065 3C                  <1>             db eF2
    72 00000066 BB26                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    73 00000068 3D                  <1>             db eF3
    74 00000069 C226                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    75 0000006B 3E                  <1>             db eF4
    76 0000006C F726                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    77 0000006E 3F                  <1>             db eF5
    78 0000006F 3C27                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    79 00000071 40                  <1>             db eF6
    80 00000072 5227                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    81 00000074 41                  <1>             db eF7
    82 00000075 5927                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    83 00000077 4B                  <1>             db eCursL
    84 00000078 2026                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    85 0000007A 4D                  <1>             db eCursR
    86 0000007B C926                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    87 0000007D 52                  <1>             db eIns
    88 0000007E 6427                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    89 00000080 53                  <1>             db eDel
    90 00000081 6B27                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    91                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    92                              <1> 
    93                              <1> ;When counting the number of days, first compute the number of years since
    94                              <1> ; 1980 and your year. 
    95                              <1> ;Then, using the table below, find the number of leap years between 1980
    96                              <1> ; and (YourYear - 1). 
    97                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    98                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    99                              <1> ;
   100                              <1> ;Use the months table to get the number of days in a normal month as leap 
   101                              <1> ; years are added using the previous comment.
   102                              <1> 
   103                              <1> ;This table is the number of days in the month
   104                              <1> ;The function which updates the days in Feb writes the number to this table
   105                              <1> monthsTbl:  
   106 00000083 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   106 0000008C 1F1E1F              <1>
   107                              <1> 
   108                              <1> ;Error tables
   109                              <1> errXlatTbl:
   110                              <1> ;Each entry is n bytes long, defined as
   111                              <1> ; Byte 0      : DOS function number for which translation will occur
   112                              <1> ; Byte 1      : Length of the table entry - 2
   113                              <1> ; Bytes n - 3 : Acceptable Error codes
   114                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   115                              <1> ;The table is terminated with a single -1 byte
   116                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   117                              <1> ; only on entry to a disk function
   118 0000008F 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   119 00000093 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   120 00000098 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   121 0000009E 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   122 000000A2 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   123 000000A8 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   124 000000AF 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   125 000000B2 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   126 000000B6 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   127 000000BA 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   128 000000BF 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   129 000000C3 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   130 000000C9 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   131 000000D0 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   132 000000D4 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   133 000000D8 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   134 000000DB 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   135 000000DF 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   136 000000E3 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   137 000000E8 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   138 000000F0 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   139 000000F2 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   140 000000F7 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   141 000000FA 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   142 00000100 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   143 00000104 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   144 00000107 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   145 0000010D 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   146 00000114 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   147 0000011A 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   148 0000011E 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   149 00000122 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   150 00000125 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   151 0000012A FF                  <1>     db -1   ;End Of Table marker
   152                              <1> 
   153                              <1> 
   154                              <1> extErrTbl:
   155                              <1> ;This table contains the default values for how to respond
   156                              <1> ; to particular errors. Fields with -1 need to be filled in before
   157                              <1> ; setting variables using this table.
   158                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   159                              <1> ; Byte 0: Extended Error Code as a byte
   160                              <1> ; Byte 1: Error Class
   161                              <1> ; Byte 2: Error Suggested Action
   162                              <1> ; Byte 3: Error Locus
   163                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   164                              <1> ;
   165                              <1> ;Error 01: Invalid function number
   166 0000012B 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   167                              <1> ;Error 02: File not found
   168 0000012F 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   169                              <1> ;Error 03: Path not found
   170 00000133 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   171                              <1> ;Error 04: Too many open handles, and no handles are left
   172 00000137 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   173                              <1> ;Error 05: Access being denied
   174 0000013B 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   175                              <1> ;Error 06: Invalid File handle being provided
   176 0000013F 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   177                              <1> ;Error 07: MCB chain destroyed
   178 00000143 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   179                              <1> ;Error 08: No Memory remaining
   180 00000147 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   181                              <1> ;Error 09: Invalid MCB block Address
   182 0000014B 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   183                              <1> ;Error 0A: Bad Environment block
   184 0000014F 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   185                              <1> ;Error 0B: Data provided in a bad format
   186 00000153 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   187                              <1> ;Error 0C: Access Code Invalid
   188 00000157 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   189                              <1> ;Error 0D: Error due to Invalid Data provided
   190 0000015B 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   191                              <1> ;Error 0F: Error due to a bad drive letter being provided
   192 0000015F 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   193                              <1> ;Error 10: Error due to attempting to delete the CWD
   194 00000163 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   195                              <1> ;Error 11: Error due to a unknown device being used
   196 00000167 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   197                              <1> ;Error 12: No more file handles available
   198 0000016B 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   199                              <1> ;Error 50: Network request not supported
   200 0000016F 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   201                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   202 00000173 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   203                              <1> ;Error 21: File Locking Violation
   204 00000177 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   205                              <1> ;Error 54: Too many levels of redirection error
   206 0000017B 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   207                              <1> ;Error 56: Bad resource password provided
   208 0000017F 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   209                              <1> ;Error 52: Directory already exists
   210 00000183 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   211                              <1> ;Error 32: Network request not supported by DOS
   212 00000187 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   213                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   214 0000018B 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   215                              <1> ;Error 57: Bad parameter in request
   216 0000018F 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   217                              <1> ;Error 53: Fail was returned from Int 44h
   218 00000193 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   219                              <1> ;Error 24: Sharing Buffer Full
   220 00000197 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   221 0000019B FFFFFFFF            <1>     dd -1   ;End of table signature
   222                              <1> 
   223                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   224 0000019F 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   224 000001A8 090A0B0C0D0E0F      <1>
   225 000001AF 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   225 000001B8 191A1B1C1D1E1F      <1>
   226 000001BF 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   226 000001C8 3D3E3F5B5C5D7C      <1>
   227                              <1> badDirNameCharL equ $ - badDirNameChar
   228                              <1> ;The chars * ? . \ / need to always be handled separately
   229                              <1> 
   230                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   231 000001CF 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   231 000001D8 4545494949          <1>
   232 000001DD 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   232 000001E6 5559999A9B          <1>
   233 000001EB 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   233 000001F4 A5A6A7A8            <1>
   234 000001F8 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   234 00000201 B2B3B4              <1>
   235 00000204 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   235 0000020D BEBFC0              <1>
   236 00000210 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   236 00000219 CACBCC              <1>
   237 0000021C CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   237 00000225 D6D7D8              <1>
   238 00000228 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   238 00000231 E2E3E4              <1>
   239 00000234 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   239 0000023D EEEFF0              <1>
   240 00000240 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   240 00000249 FAFBFC              <1>
   241 0000024C FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   242                              <1> 
   243                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   244 0000024F F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   244 00000258 F0F6F6              <1>
   245 0000025B F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   245 00000264 F6F6F6              <1>
   246 00000267 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   246 00000270 FFF6FF              <1>
   247 00000273 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   247 0000027C FFFEF6              <1>
   248 0000027F FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   248 00000288 FFF4F4              <1>
   249 0000028B F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   249 00000294 FFFFFF              <1>
   250 00000297 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   250 000002A0 FFFFFF              <1>
   251 000002A3 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   251 000002AC F6FFFF              <1>
   252 000002AF FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   252 000002B8 FFFFFF              <1>
   253 000002BB FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   253 000002C4 FFFFFF              <1>
   254 000002C7 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    21                                  %include "./Source/Data/dispTbl.asm"
    22                              <1> ;Kernel Dispatch Function Table
    23                              <1> 
    24                              <1> kDispTbl:
    25 000002CF DE4A                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    26 000002D1 4F1E                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    27 000002D3 5C1E                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    28 000002D5 191F                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    29 000002D7 421F                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    30 000002D9 4A1F                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    31 000002DB 621F                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    32 000002DD 951F                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    33 000002DF BA1F                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    34 000002E1 1920                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    35 000002E3 CC22                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    36 000002E5 2820                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    37 000002E7 3420                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    38 000002E9 CF5D                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    39 000002EB 015E                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    40 000002ED 6A2A                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    41 000002EF 742A                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    42 000002F1 0828                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    43 000002F3 C128                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    44 000002F5 4829                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    45 000002F7 7E2A                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    46 000002F9 882A                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    47 000002FB 922A                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    48 000002FD 7729                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    49 000002FF 8A60                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    50 00000301 1A5E                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    51 00000303 352A                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    52 00000305 215E                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    53 00000307 235E                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    54 00000309 8A60                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    55 0000030B 8A60                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    56 0000030D C15E                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    57 0000030F 8A60                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    58 00000311 9C2A                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    59 00000313 A62A                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    60 00000315 E229                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    61 00000317 B02A                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    62 00000319 6C5E                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    63 0000031B EA49                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    64 0000031D BA2A                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    65 0000031F C42A                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    66 00000321 5B2A                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    67 00000323 4225                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    68 00000325 6925                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    69 00000327 6F25                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    70 00000329 9025                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    71 0000032B 9E5E                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    72 0000032D 482A                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    73 0000032F AC5E                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    74 00000331 B04A                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    75 00000333 C35E                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    76 00000335 7E5D                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    77 00000337 FB5E                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    78 00000339 0C5F                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    79 0000033B 1D5F                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    80 0000033D 1B52                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    81 0000033F 4452                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    82 00000341 4516                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    83 00000343 6918                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    84 00000345 2F1A                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    85 00000347 B92C                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    86 00000349 CA2C                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    87 0000034B EE2D                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    88 0000034D 2D2E                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    89 0000034F 682E                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    90 00000351 742E                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    91 00000353 D92E                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    92 00000355 482F                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    93 00000357 3344                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    94 00000359 3030                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    95 0000035B 6E30                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    96 0000035D F71A                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    97 0000035F 6644                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    98 00000361 9046                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    99 00000363 9847                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
   100 00000365 394C                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   101 00000367 E04A                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   102 00000369 615F                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   103 0000036B 8E30                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   104 0000036D F930                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   105 0000036F AC5D                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   106 00000371 B55D                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   107 00000373 6F5F                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   108 00000375 805F                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   109 00000377 5A60                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   110 00000379 D749                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   111 0000037B 2931                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   112 0000037D B231                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   113 0000037F 3649                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   114 00000381 6160                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   115 00000383 FA31                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   116 00000385 C232                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   117 00000387 4A33                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   118 00000389 8B60                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   119 0000038B FE60                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   120 0000038D FE60                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   121 0000038F 301B                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   122 00000391 8A60                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   123 00000393 BE5D                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   124 00000395 8A60                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   125 00000397 C75D                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   126 00000399 7352                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   127 0000039B 7352                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   128 0000039D B633                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   129 0000039F D632                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   130 000003A1 8A60                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   131                              <1> kDispTblL  equ $ - kDispTbl 
   132                              <1> 
   133                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   134 000003A3 5360                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   135 000003A5 9B39                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   136 000003A7 2A57                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   137 000003A9 5660                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   138 000003AB 5258                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   139 000003AD 8A1D                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   140 000003AF 0952                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   141 000003B1 D504                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   142 000003B3 5043                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   143 000003B5 0705                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   144 000003B7 B65F                <1>     dw noOp - mDispTbl  ;AX=120Ah, Perform Critical error Interrupt...
   145 000003B9 B65F                <1>     dw noOp - mDispTbl  ;AX=120Bh, Signal Sharing Violation to User
   146 000003BB B65F                <1>     dw noOp - mDispTbl  ;AX=120Ch, Open devce and set SFT owner
   147 000003BD 2127                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   148 000003BF 1505                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   149 000003C1 2F05                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   150 000003C3 3D05                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   151 000003C5 A358                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   152 000003C7 8558                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   153 000003C9 5E58                <1>     dw uppercaseChar - mDispTbl ;AX=1213h
   154 000003CB D159                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   155 000003CD 5005                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   156 000003CF 4142                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   157 000003D1 2058                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   158 000003D3 3857                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   159 000003D5 C557                <1>     dw getCDS - mDispTbl    ;AX=1219h
   160 000003D7 AF0F                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   161                              <1> mDispTblL   equ     $ - mDispTbl
   162                              <1> 
   163                              <1> serverDispTbl:  ;Server Dispatch functions
   164 000003D9 01                  <1>     db 01h  ;Number of entries needs to be 0Bh, but for now, 01h
   165 000003DA A25F                <1>     dw serverDispatch - serverDispTbl
    22                                  %include "./Source/Debug/debug.asm"
    23                              <1> ;This file contains debugging macros, procs and strings
    24                              <1> ; that we can use to output to COM1 bypassing the operating system.
    25                              <1> ;A serial terminal must be connected for this to work.
    26                              <1> 
    27                              <1> ;Variables and equates
    28                              <1> 
    29 000003DC 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    30                              <1> 
    31 000003E4 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    31 000003ED 39414243444546      <1>
    32                              <1> ;Common procedures
    33                              <1> debMakeDebuggerRespond:
    34 000003F4 488D2D26000000      <1>     lea rbp, .msg
    35 000003FB E8AF000000          <1>     call debPrintNullString
    36 00000400 B900001000          <1>     mov ecx, 100000h
    37                              <1> .waiting:
    38 00000405 FFC9                <1>     dec ecx
    39 00000407 740C                <1>     jz .timeout
    40 00000409 B402                <1>     mov ah, 02h ;Blocking recieve!
    41 0000040B 31D2                <1>     xor edx, edx
    42 0000040D CD34                <1>     int 34h
    43 0000040F F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    44 00000412 75F1                <1>     jnz .waiting
    45 00000414 C3                  <1>     ret
    46                              <1> .timeout:
    47 00000415 488D2D47000000      <1>     lea rbp, .msg2
    48 0000041C E98E000000          <1>     jmp debPrintNullString
    49 00000421 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    49 0000042A 6B6579206174207468- <1>
    49 00000433 65207465726D696E61- <1>
    49 0000043C 6C20746F20636F6E74- <1>
    49 00000445 696E7565206F722077- <1>
    49 0000044E 61697420666F722074- <1>
    49 00000457 696D656F75742E2E2E- <1>
    49 00000460 0A0D00              <1>
    50 00000463 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    50 0000046C 436F6E74696E75696E- <1>
    50 00000475 672E2E2E0A0D00      <1>
    51                              <1> debPrintHexByte:
    52                              <1> ;Print the hex byte in al as a hex value
    53 0000047C 52                  <1>     push rdx
    54 0000047D 53                  <1>     push rbx
    55 0000047E 50                  <1>     push rax
    56                              <1> 
    57 0000047F 88C2                <1>     mov dl, al           ;save byte in dl
    58 00000481 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    59 00000485 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    60 0000048A 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    61 0000048E E80C000000          <1>     call .wrchar
    62 00000493 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    63 00000496 E804000000          <1>     call .wrchar
    64                              <1> 
    65 0000049B 58                  <1>     pop rax
    66 0000049C 5B                  <1>     pop rbx
    67 0000049D 5A                  <1>     pop rdx
    68 0000049E C3                  <1>     ret
    69                              <1> .wrchar:
    70 0000049F 6687DB              <1>     xchg bx, bx
    71 000004A2 488D1D3BFFFFFF      <1>     lea rbx, debascii
    72 000004A9 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    73 000004AA B401                <1>     mov ah, 01h
    74 000004AC CD34                <1>     int 34h  ;print char
    75 000004AE C3                  <1>     ret
    76                              <1> 
    77                              <1> debPrintNullString:
    78                              <1> ;Print a null terminated string pointed to by rbp
    79 000004AF 56                  <1>     push rsi
    80 000004B0 50                  <1>     push rax
    81 000004B1 52                  <1>     push rdx
    82 000004B2 31D2                <1>     xor edx, edx    ;Select COM1
    83 000004B4 4889EE              <1>     mov rsi, rbp
    84                              <1> .getChar:
    85 000004B7 AC                  <1>     lodsb
    86 000004B8 84C0                <1>     test al, al
    87 000004BA 7406                <1>     jz .exit
    88 000004BC B401                <1>     mov ah, 01h
    89 000004BE CD34                <1>     int 34h
    90 000004C0 EBF5                <1>     jmp short .getChar
    91                              <1> .exit:
    92 000004C2 5A                  <1>     pop rdx
    93 000004C3 58                  <1>     pop rax
    94 000004C4 5E                  <1>     pop rsi
    95 000004C5 C3                  <1>     ret
    96                              <1> 
    97                              <1> debPrintDOSStack:
    98                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    99                              <1> ;Shows me which function, and parameters passed and returned
   100 000004C6 488D2DA5010000      <1>     lea rbp, .a1
   101 000004CD E8DDFFFFFF          <1>     call debPrintNullString
   102 000004D2 488B15(54C40300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   103 000004D9 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   104 000004E0 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   105 000004E3 E802030000          <1>     call overlayQword
   106 000004E8 4881C316000000      <1>     add rbx, 22
   107 000004EF 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   108 000004F3 E8F2020000          <1>     call overlayQword
   109 000004F8 4881C316000000      <1>     add rbx, 22
   110 000004FF 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   111 00000503 E8E2020000          <1>     call overlayQword
   112 00000508 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   113 0000050F 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   114 00000513 E8D2020000          <1>     call overlayQword
   115 00000518 4881C316000000      <1>     add rbx, 22 
   116 0000051F 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   117 00000523 E8C2020000          <1>     call overlayQword
   118 00000528 4881C316000000      <1>     add rbx, 22
   119 0000052F 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   120 00000533 E8B2020000          <1>     call overlayQword
   121 00000538 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   122 0000053F 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   123 00000543 E8A2020000          <1>     call overlayQword
   124 00000548 4881C316000000      <1>     add rbx, 22
   125 0000054F 488B05(54C40300)    <1>     mov rax, qword [oldRSP]
   126 00000556 480560000000        <1>     add rax, callerFrame_size
   127 0000055C E889020000          <1>     call overlayQword
   128 00000561 4881C316000000      <1>     add rbx, 22
   129 00000568 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   130 0000056C E879020000          <1>     call overlayQword
   131 00000571 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   132 00000578 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   133 0000057C E869020000          <1>     call overlayQword
   134 00000581 488D2D06000000      <1>     lea rbp, .a0
   135 00000588 E822FFFFFF          <1>     call debPrintNullString
   136 0000058D C3                  <1>     ret
   137                              <1> 
   138 0000058E 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   138 00000597 303030303030303030- <1>
   138 000005A0 30306820            <1>
   139 000005A4 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   139 000005AD 303030303030303030- <1>
   139 000005B6 30306820            <1>
   140 000005BA 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   140 000005C3 303030303030303030- <1>
   140 000005CC 30306820            <1>
   141 000005D0 0A0D                <1>     db  0Ah,0Dh
   142 000005D2 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   142 000005DB 303030303030303030- <1>
   142 000005E4 30306820            <1>
   143 000005E8 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   143 000005F1 303030303030303030- <1>
   143 000005FA 30306820            <1>
   144 000005FE 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   144 00000607 303030303030303030- <1>
   144 00000610 30306820            <1>
   145 00000614 0A0D                <1>     db 0Ah, 0Dh
   146 00000616 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   146 0000061F 303030303030303030- <1>
   146 00000628 30306820            <1>
   147 0000062C 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   147 00000635 303030303030303030- <1>
   147 0000063E 30306820            <1>
   148 00000642 7269703D3030303030- <1>     db "rip=0000000000000000h"
   148 0000064B 303030303030303030- <1>
   148 00000654 303068              <1>
   149 00000657 0A0D                <1>     db 0Ah, 0Dh
   150 00000659 666C673D3030303030- <1>     db "flg=0000000000000000h "
   150 00000662 303030303030303030- <1>
   150 0000066B 30306820            <1>
   151 0000066F 0A0D00              <1>     db 0Ah,0Dh,0
   152 00000672 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   152 0000067B 206F6E20496E742034- <1>
   152 00000684 316820737461636B0A- <1>
   152 0000068D 0D00                <1>
   153                              <1> 
   154                              <1> debDPBptr:
   155                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   156 0000068F 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   157 00000696 4889E8              <1>     mov rax, rbp
   158 00000699 E84C010000          <1>     call overlayQword
   159 0000069E 488D2D06000000      <1>     lea rbp, .dpb
   160 000006A5 E805FEFFFF          <1>     call debPrintNullString
   161 000006AA C3                  <1>     ret
   162                              <1> .dpb: 
   163 000006AB 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   163 000006B4 203030303030303030- <1>
   163 000006BD 303030303030303068- <1>
   163 000006C6 200A0D00            <1>
   164                              <1> 
   165                              <1> debDPBBPBptr:
   166                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   167                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   168 000006CA 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   169 000006D1 4889E8              <1>     mov rax, rbp
   170 000006D4 E811010000          <1>     call overlayQword
   171 000006D9 4881C321000000      <1>     add rbx, 33
   172 000006E0 4889F0              <1>     mov rax, rsi
   173 000006E3 E802010000          <1>     call overlayQword
   174 000006E8 488D2D06000000      <1>     lea rbp, .dpb
   175 000006EF E8BBFDFFFF          <1>     call debPrintNullString
   176 000006F4 C3                  <1>     ret
   177                              <1> .dpb: 
   178 000006F5 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   178 000006FE 203030303030303030- <1>
   178 00000707 303030303030303068- <1>
   178 00000710 2066726F6D20        <1>
   179 00000716 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   179 0000071F 203030303030303030- <1>
   179 00000728 303030303030303068- <1>
   179 00000731 200A0D00            <1>
   180                              <1> overlayByte:
   181                              <1>     ;Called with number in rax
   182                              <1>     ;pointer to START of 16 byte space for number in rbx
   183 00000735 53                  <1>     push rbx
   184 00000736 51                  <1>     push rcx
   185 00000737 52                  <1>     push rdx
   186 00000738 55                  <1>     push rbp
   187 00000739 4889DD              <1>     mov rbp, rbx
   188 0000073C 4889C2              <1>     mov rdx, rax
   189 0000073F 48FFC5              <1>     inc rbp ;Go to end of number
   190                              <1> 
   191 00000742 488D1D9BFCFFFF      <1>     lea rbx, debascii
   192 00000749 88D0                <1>     mov al, dl  ;Go low nybble first
   193 0000074B 240F                <1>     and al, 0Fh
   194 0000074D D7                  <1>     xlatb
   195 0000074E 884500              <1>     mov byte [rbp], al
   196 00000751 48FFCD              <1>     dec rbp ;Go down one char pos
   197 00000754 88D0                <1>     mov al, dl
   198 00000756 24F0                <1>     and al, 0F0h    ;Hi nybble next
   199 00000758 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   200 0000075B D7                  <1>     xlatb
   201 0000075C 884500              <1>     mov byte [rbp], al  ;Store char
   202                              <1> 
   203 0000075F 5D                  <1>     pop rbp
   204 00000760 5A                  <1>     pop rdx
   205 00000761 59                  <1>     pop rcx
   206 00000762 5B                  <1>     pop rbx
   207 00000763 C3                  <1>     ret
   208                              <1> 
   209                              <1> overlayWord:
   210                              <1>     ;Called with number in rax
   211                              <1>     ;pointer to START of 16 byte space for number in rbx
   212 00000764 53                  <1>     push rbx
   213 00000765 51                  <1>     push rcx
   214 00000766 52                  <1>     push rdx
   215 00000767 55                  <1>     push rbp
   216 00000768 4889DD              <1>     mov rbp, rbx
   217 0000076B 4889C2              <1>     mov rdx, rax
   218 0000076E 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   219 00000775 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   220 0000077A 488D1D63FCFFFF      <1>     lea rbx, debascii
   221                              <1> .ow0:
   222 00000781 88D0                <1>     mov al, dl  ;Go low nybble first
   223 00000783 240F                <1>     and al, 0Fh
   224 00000785 D7                  <1>     xlatb
   225 00000786 884500              <1>     mov byte [rbp], al
   226 00000789 48FFCD              <1>     dec rbp ;Go down one char pos
   227 0000078C 88D0                <1>     mov al, dl
   228 0000078E 24F0                <1>     and al, 0F0h    ;Hi nybble next
   229 00000790 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   230 00000793 D7                  <1>     xlatb
   231 00000794 884500              <1>     mov byte [rbp], al  ;Store char
   232 00000797 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   233 0000079B 48FFCD              <1>     dec rbp
   234 0000079E FFC9                <1>     dec ecx
   235 000007A0 75DF                <1>     jnz .ow0
   236 000007A2 5D                  <1>     pop rbp
   237 000007A3 5A                  <1>     pop rdx
   238 000007A4 59                  <1>     pop rcx
   239 000007A5 5B                  <1>     pop rbx
   240 000007A6 C3                  <1>     ret
   241                              <1> 
   242                              <1> overlayDword:
   243                              <1>     ;Called with number in rax
   244                              <1>     ;pointer to START of 16 byte space for number in rbx
   245 000007A7 53                  <1>     push rbx
   246 000007A8 51                  <1>     push rcx
   247 000007A9 52                  <1>     push rdx
   248 000007AA 55                  <1>     push rbp
   249 000007AB 4889DD              <1>     mov rbp, rbx
   250 000007AE 4889C2              <1>     mov rdx, rax
   251 000007B1 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   252 000007B8 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   253 000007BD 488D1D20FCFFFF      <1>     lea rbx, debascii
   254                              <1> .od0:
   255 000007C4 88D0                <1>     mov al, dl  ;Go low nybble first
   256 000007C6 240F                <1>     and al, 0Fh
   257 000007C8 D7                  <1>     xlatb
   258 000007C9 884500              <1>     mov byte [rbp], al
   259 000007CC 48FFCD              <1>     dec rbp ;Go down one char pos
   260 000007CF 88D0                <1>     mov al, dl
   261 000007D1 24F0                <1>     and al, 0F0h    ;Hi nybble next
   262 000007D3 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   263 000007D6 D7                  <1>     xlatb
   264 000007D7 884500              <1>     mov byte [rbp], al  ;Store char
   265 000007DA 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   266 000007DE 48FFCD              <1>     dec rbp
   267 000007E1 FFC9                <1>     dec ecx
   268 000007E3 75DF                <1>     jnz .od0
   269 000007E5 5D                  <1>     pop rbp
   270 000007E6 5A                  <1>     pop rdx
   271 000007E7 59                  <1>     pop rcx
   272 000007E8 5B                  <1>     pop rbx
   273 000007E9 C3                  <1>     ret
   274                              <1> 
   275                              <1> overlayQword:
   276                              <1>     ;Called with number in rax
   277                              <1>     ;pointer to START of 16 byte space for number in rbx
   278 000007EA 53                  <1>     push rbx
   279 000007EB 51                  <1>     push rcx
   280 000007EC 52                  <1>     push rdx
   281 000007ED 55                  <1>     push rbp
   282 000007EE 4889DD              <1>     mov rbp, rbx
   283 000007F1 4889C2              <1>     mov rdx, rax
   284 000007F4 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   285 000007FB B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   286 00000800 488D1DDDFBFFFF      <1>     lea rbx, debascii
   287                              <1> .oq0:
   288 00000807 88D0                <1>     mov al, dl  ;Go low nybble first
   289 00000809 240F                <1>     and al, 0Fh
   290 0000080B D7                  <1>     xlatb
   291 0000080C 884500              <1>     mov byte [rbp], al
   292 0000080F 48FFCD              <1>     dec rbp ;Go down one char pos
   293 00000812 88D0                <1>     mov al, dl
   294 00000814 24F0                <1>     and al, 0F0h    ;Hi nybble next
   295 00000816 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   296 00000819 D7                  <1>     xlatb
   297 0000081A 884500              <1>     mov byte [rbp], al  ;Store char
   298 0000081D 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   299 00000821 48FFCD              <1>     dec rbp
   300 00000824 FFC9                <1>     dec ecx
   301 00000826 75DF                <1>     jnz .oq0
   302 00000828 5D                  <1>     pop rbp
   303 00000829 5A                  <1>     pop rdx
   304 0000082A 59                  <1>     pop rcx
   305 0000082B 5B                  <1>     pop rbx
   306 0000082C C3                  <1>     ret
   307                              <1> 
   308                              <1> debPrintFunctionName:
   309                              <1> ;Prints the DOS function that has been entered
   310                              <1> ;Entered with ah = Function number
   311 0000082D 88E0                <1>     mov al, ah  ;Get dos function number
   312 0000082F 488D1DAEFBFFFF      <1>     lea rbx, debascii
   313 00000836 488D1535000000      <1>     lea rdx, .number
   314 0000083D 24F0                <1>     and al, 0F0h    ;Get high nybble first
   315 0000083F C0E804              <1>     shr al, 4
   316 00000842 D7                  <1>     xlatb
   317 00000843 8802                <1>     mov byte [rdx], al
   318 00000845 88E0                <1>     mov al, ah
   319 00000847 240F                <1>     and al, 0Fh
   320 00000849 D7                  <1>     xlatb
   321 0000084A 884201              <1>     mov byte [rdx + 1], al
   322 0000084D 488D2D06000000      <1>     lea rbp, .dosString
   323 00000854 E856FCFFFF          <1>     call debPrintNullString
   324 00000859 C3                  <1>     ret
   325 0000085A 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   325 00000863 696F6E20496E742034- <1>
   325 0000086C 31682F41483D        <1>
   326 00000872 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   327                              <1> 
   328                              <1> ;----------------:
   329                              <1> ;!!!! MACROS !!!!:
   330                              <1> ;----------------:
   331                              <1> ;Insert macro when entering a debug block
   332                              <1> %macro debugEnterM 0
   333                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   334                              <1>     mov rsp, debStackTop
   335                              <1> ;Push all registers except rsp on stack
   336                              <1>     push rax
   337                              <1>     push rbx
   338                              <1>     push rcx
   339                              <1>     push rdx
   340                              <1>     push rsi
   341                              <1>     push rdi
   342                              <1>     push rbp
   343                              <1>     push r8
   344                              <1>     push r9
   345                              <1>     push r10
   346                              <1>     push r11
   347                              <1>     push r12
   348                              <1>     push r13
   349                              <1>     push r14
   350                              <1>     push r15
   351                              <1>     pushfq
   352                              <1> %endmacro
   353                              <1> ;Insert macro when exiting a debug block
   354                              <1> %macro debugExitM 0
   355                              <1>     popfq
   356                              <1>     pop r15
   357                              <1>     pop r14
   358                              <1>     pop r13
   359                              <1>     pop r12
   360                              <1>     pop r11
   361                              <1>     pop r10
   362                              <1>     pop r9
   363                              <1>     pop r8
   364                              <1>     pop rbp
   365                              <1>     pop rdi
   366                              <1>     pop rsi
   367                              <1>     pop rdx
   368                              <1>     pop rcx
   369                              <1>     pop rbx
   370                              <1>     pop rax
   371                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   372                              <1> %endmacro
    23                                  %include "./Source/Kernel/FAT/buffun.asm"
    24                              <1> ;This file contains FAT disk buffer related functions that
    25                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    26                              <1> ;----------------------------------------------------
    27                              <1> ;           Externally referenced functions         :
    28                              <1> ;----------------------------------------------------
    29                              <1> 
    30                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    31                              <1> ;Sets the buffer in rdi to the head of the chain
    32                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    33                              <1> ;Output: Buffer header set to the head of the chain
    34 00000878 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    35 0000087F 7428                <1>     je .exit
    36 00000881 56                  <1>     push rsi
    37 00000882 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    38                              <1> .mainlp:
    39 00000889 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    40 0000088C 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    41 0000088E 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    42 00000891 EBF6                <1>     jmp short .mainlp
    43                              <1> .fnd:
    44 00000893 57                  <1>     push rdi
    45 00000894 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    46 00000897 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    47 0000089A 5F                  <1>     pop rdi ;Get original buf back
    48 0000089B 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    49 0000089E 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    50 000008A5 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    51 000008A8 5E                  <1>     pop rsi
    52                              <1> .exit:
    53                              <1>     return
    18                              <2> %%_ret:
    19 000008A9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    56                              <1> ;1 External reference
    57                              <1> ;Input: rdi = Buffer header to flush and free
    58 000008AA E844000000          <1>     call flushBuffer
    59 000008AF 7206                <1>     jc .exit
    60                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    61 000008B1 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    62                              <1> .exit:
    63                              <1>     return
    18                              <2> %%_ret:
    19 000008B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    66                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    67                              <1> ;Output: rdi = First disk buffer
    68 000008B8 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    69 000008BF 57                  <1>     push rdi
    70                              <1> .lp:
    71 000008C0 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    72 000008C4 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    73 000008C7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    74 000008CE 75F0                <1>     jne .lp
    75 000008D0 5F                  <1>     pop rdi
    76                              <1>     return
    18                              <2> %%_ret:
    19 000008D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    77                              <1> 
    78                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    79                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    80                              <1> ; second buffer in the chain in rdi
    81                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    82                              <1> ;Output: rdi = Second buffer in the chain
    83 000008D2 52                  <1>     push rdx
    84 000008D3 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    85 000008D6 E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    86 000008DB 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    87 000008DE 5A                  <1>     pop rdx
    88                              <1>     return
    18                              <2> %%_ret:
    19 000008DF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    91                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    92                              <1> ;Input: rdi = Buffer header to start searching at
    93                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    94                              <1> ;        ZF=ZE => No unreferenced buffer found
    95 000008E0 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    96 000008E4 750C                <1>     jnz .exit
    97 000008E6 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    98 000008E9 4881FFFFFFFFFF      <1>     cmp rdi, -1
    99 000008F0 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
   100                              <1> .exit:
   101                              <1>     return
    18                              <2> %%_ret:
    19 000008F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   102                              <1> 
   103                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   104                              <1> ;Flushes the data in a sector buffer to disk!
   105                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   106                              <1> ;Exit:  CF=NC : Success
   107                              <1> ;       CF=CY : Fail, terminate the request
   108                              <1> ;First make request to device driver
   109 000008F3 50                  <1>     push rax
   110 000008F4 53                  <1>     push rbx
   111 000008F5 51                  <1>     push rcx
   112 000008F6 52                  <1>     push rdx
   113 000008F7 56                  <1>     push rsi
   114 000008F8 55                  <1>     push rbp
   115                              <1> ;If the buffer is freed, skip flushing to avoid issues
   116 000008F9 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   117 000008FD 7454                <1>     je .fbFreeExit  ;If it is free exit
   118 000008FF F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   119 00000903 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   120                              <1> .fbRequest0:
   121 00000905 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   122 0000090A F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   123 0000090E 7406                <1>     jz .fbRequest1
   124 00000910 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   125                              <1> .fbRequest1:
   126 00000916 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   127 00000919 B901000000          <1>     mov ecx, 1  ;One sector to copy
   128 0000091E 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   129 00000922 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   130 00000926 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   131 0000092A E822500000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   132 0000092F E8AD4E0000          <1>     call absDiskDriverCall    ;Make Driver Request
   133 00000934 7525                <1>     jnz .fbFail
   134                              <1> ;Now check if the buffer was a FAT, to write additional copies
   135 00000936 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   136 0000093A 7417                <1>     jz .fbFreeExit  ;If not, exit
   137 0000093C FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   138 0000093F 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   139 00000941 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   140 00000944 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   141 00000948 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   142                              <1> .fbFreeExit1:
   143 0000094D 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   144 00000950 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   145                              <1> .fbFreeExit:
   146 00000953 F8                  <1>     clc
   147                              <1> .fbExitFail:
   148 00000954 5D                  <1>     pop rbp
   149 00000955 5E                  <1>     pop rsi
   150 00000956 5A                  <1>     pop rdx
   151 00000957 59                  <1>     pop rcx
   152 00000958 5B                  <1>     pop rbx
   153 00000959 58                  <1>     pop rax
   154                              <1>     return
    18                              <2> %%_ret:
    19 0000095A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> .fbFail:
   156                              <1> ;Enter here only if the request failed
   157 0000095B FFCE                <1>     dec esi
   158 0000095D 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   159                              <1> ;Request failed thrice, critical error call
   160 0000095F C605(41C40300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   161 00000966 E8D84B0000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   162 0000096B 3C01                <1>     cmp al, critRetry
   163 0000096D 7496                <1>     je .fbRequest0
   164                              <1>     ;Else we fail (Ignore=Fail here)
   165 0000096F F9                  <1>     stc ;Set error flag to indicate fail
   166 00000970 E9DFFFFFFF          <1>     jmp .fbExitFail
   167                              <1> 
   168                              <1> testDirtyBufferForDrive:    ;External linkage
   169                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   170                              <1> ;Input: al = Drive number (0 based)
   171                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   172                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   173 00000975 53                  <1>     push rbx
   174 00000976 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   175                              <1> .tdbfdCheckBuffer:
   176 0000097D 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   177 00000980 7509                <1>     jne .tdbfdGotoNextBuffer
   178 00000982 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   179 00000986 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   180 00000988 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   181                              <1> .tdbfdExit:
   182 00000989 5B                  <1>     pop rbx
   183                              <1>     return
    18                              <2> %%_ret:
    19 0000098A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   184                              <1> .tdbfdGotoNextBuffer:
   185 0000098B 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   186 0000098E 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   187 00000995 74F2                <1>     je .tdbfdExit
   188 00000997 EBE4                <1>     jmp short .tdbfdCheckBuffer
   189                              <1> 
   190                              <1> freeBuffersForDPB:
   191                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   192                              <1> ; to have a drive number of -1, thus freeing it
   193                              <1> ;Given DPB is in rbp
   194 00000999 53                  <1>     push rbx
   195 0000099A 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   196                              <1> .i0:
   197 000009A1 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   198 000009A5 7506                <1>     jne .i1 ;If no, skip freeing
   199 000009A7 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   200                              <1> .i1:
   201 000009AD 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   202 000009B0 4881FBFFFFFFFF      <1>     cmp rbx, -1
   203 000009B7 75E8                <1>     jne .i0
   204                              <1> .exit:
   205 000009B9 5B                  <1>     pop rbx
   206                              <1>     return
    18                              <2> %%_ret:
    19 000009BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> setBufferDirty:
   209 000009BB 55                  <1>     push rbp
   210 000009BC 9C                  <1>     pushfq
   211 000009BD 488B2D(13C70300)    <1>     mov rbp, qword [currBuff]
   212 000009C4 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   213 000009C8 9D                  <1>     popfq
   214 000009C9 5D                  <1>     pop rbp
   215                              <1>     return
    18                              <2> %%_ret:
    19 000009CA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216                              <1> 
   217                              <1> 
   218                              <1> getBuffer: ;Internal Linkage ONLY
   219                              <1> ;
   220                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   221                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   222                              <1> ;Flushes if not in disk change mode. 
   223                              <1> ;If in disk change mode, will check to see if the selected buffer 
   224                              <1> ; has data referring a device using the same DPB as we are changing.
   225                              <1> ; If it is, skip flushing, if not, flush first!
   226                              <1> ;
   227                              <1> ;This function will return a pointer to the desired data sector OR 
   228                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   229                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   230                              <1> ;Entry: rax = Sector to read
   231                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   232                              <1> ;       rsi = DPB to use for transaction
   233                              <1> ;Exit:  CF=NC => 
   234                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   235                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   236 000009CB 51                  <1>     push rcx
   237 000009CC 52                  <1>     push rdx
   238 000009CD 56                  <1>     push rsi
   239 000009CE 57                  <1>     push rdi
   240 000009CF 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   241 000009D1 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   242 000009D6 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   243 000009DD 7418                <1>     je .rbReadNewSector
   244 000009DF 48893D(13C70300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   245                              <1> .rbExit:
   246 000009E6 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer
   247 000009EA F8                  <1>     clc
   248                              <1> .rbExitNoFlag:
   249 000009EB 5F                  <1>     pop rdi
   250 000009EC 5E                  <1>     pop rsi
   251 000009ED 5A                  <1>     pop rdx
   252 000009EE 59                  <1>     pop rcx
   253 000009EF 488B1D(13C70300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   254                              <1>     return
    18                              <2> %%_ret:
    19 000009F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   255                              <1> .rbReadNewSector:
   256 000009F7 E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   257 000009FC 803D(B6D90300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   258 00000A03 7506                <1>     jne .flush  ;We are not, flush buffer
   259 00000A05 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   260 00000A09 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   261                              <1> .flush:
   262 00000A0B E89AFEFFFF          <1>     call flushAndFreeBuffer
   263 00000A10 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   264                              <1> .skipFlush:
   265                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   266                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   267                              <1>     ; is no longer owned by that File so we mark the owner as none
   268 00000A12 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   269 00000A1A 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   270 00000A1D 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   271 00000A20 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   272 00000A24 80F902              <1>     cmp cl, fatBuffer
   273 00000A27 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   274 00000A29 7503                <1>     jne .rbNonFATbuffer
   275 00000A2B 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   276                              <1> .rbNonFATbuffer:
   277 00000A2E 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   278 00000A31 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   279 00000A34 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   280 00000A37 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   281 00000A3B C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   282 00000A3F E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   283 00000A44 72A5                <1>     jc .rbExitNoFlag
   284 00000A46 EB9E                <1>     jmp short .rbExit
   285                              <1> 
   286                              <1> readSectorBuffer:   ;Internal Linkage
   287                              <1> ;Reads a sector into a built sector buffer
   288                              <1> ;Entry: rdi = Pointer to buffer header
   289                              <1> ;Exit:  CF=NC : Success
   290                              <1> ;       CF=CY : Fail, terminate the request
   291                              <1> ;       rbx pointing to buffer header
   292                              <1> ;First make request to device driver
   293 00000A48 50                  <1>     push rax
   294 00000A49 53                  <1>     push rbx
   295 00000A4A 51                  <1>     push rcx
   296 00000A4B 52                  <1>     push rdx
   297 00000A4C 56                  <1>     push rsi
   298 00000A4D 55                  <1>     push rbp
   299                              <1> .rsRequest0:
   300 00000A4E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   301 00000A53 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   302 00000A57 7406                <1>     jz .rsRequest1
   303 00000A59 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   304                              <1> .rsRequest1:
   305 00000A5F 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   306 00000A62 B901000000          <1>     mov ecx, 1  ;One sector to copy
   307 00000A67 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   308 00000A6B 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   309 00000A6F 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   310 00000A73 E8E44E0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   311 00000A78 E8644D0000          <1>     call absDiskDriverCall    ;Make Driver Request
   312 00000A7D 7508                <1>     jnz .rsFail
   313                              <1> .rsExit:
   314 00000A7F F8                  <1>     clc
   315                              <1> .rsExitFail:
   316 00000A80 5D                  <1>     pop rbp
   317 00000A81 5E                  <1>     pop rsi
   318 00000A82 5A                  <1>     pop rdx
   319 00000A83 59                  <1>     pop rcx
   320 00000A84 5B                  <1>     pop rbx
   321 00000A85 58                  <1>     pop rax
   322                              <1>     return
    18                              <2> %%_ret:
    19 00000A86 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> .rsFail:
   324                              <1> ;Enter here only if the request failed
   325 00000A87 FFCE                <1>     dec esi
   326 00000A89 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   327                              <1> ;Request failed thrice, critical error call
   328                              <1> ;First free the buffer if we failed to read data into it 
   329 00000A8B 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   330 00000A8F 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   331 00000A95 C605(41C40300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   332 00000A9C E8A24A0000          <1>     call diskDevErr
   333 00000AA1 3C01                <1>     cmp al, critRetry
   334 00000AA3 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   335 00000AA5 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   336 00000AA9 EBA3                <1>     jmp short .rsRequest0
   337                              <1> .fail:
   338 00000AAB F9                  <1>     stc ;Set error flag to indicate fail
   339 00000AAC E9CFFFFFFF          <1>     jmp .rsExitFail
   340                              <1>     
   341                              <1> findLRUBuffer: ;Internal Linkage
   342                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   343                              <1> ; in rbx and the currBuff variable
   344                              <1> ;Input: Nothing
   345                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   346                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   347 00000AB1 52                  <1>     push rdx
   348 00000AB2 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   349 00000AB9 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   350 00000ABD 7436                <1>     je .flbExit 
   351 00000ABF 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   352 00000AC6 742D                <1>     je .flbExit
   353                              <1> .flbWalk:
   354 00000AC8 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   355 00000ACB 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   356 00000ACE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   357 00000AD2 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   358 00000AD4 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   359 00000ADB 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   360 00000ADD 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   361                              <1> .flbHeadLink:
   362 00000AE4 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   363 00000AEB 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   364 00000AF2 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   365                              <1> .flbExit:
   366 00000AF5 5A                  <1>     pop rdx
   367 00000AF6 48893D(13C70300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   368                              <1>     return
    18                              <2> %%_ret:
    19 00000AFD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   369                              <1> .flbFreeLink:
   370 00000AFE 51                  <1>     push rcx
   371 00000AFF 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   372 00000B02 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   373 00000B05 59                  <1>     pop rcx
   374 00000B06 EBDC                <1>     jmp short .flbHeadLink
   375                              <1> 
   376                              <1> findSectorInBuffer:     ;Internal linkage
   377                              <1> ;Finds the Buffer for a sector
   378                              <1> ;If the sector is not in a buffer, returns with a -1
   379                              <1> ;Input: rax = Sector number
   380                              <1> ;        dl = Drive number
   381                              <1> ;Output: rdi = Buffer hdr pointer or -1
   382 00000B08 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   383                              <1> .fsiCheckBuffer:
   384 00000B0F 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   385 00000B12 7507                <1>     jne .fsiGotoNextBuffer
   386 00000B14 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   387 00000B18 7501                <1>     jne .fsiGotoNextBuffer
   388                              <1> .fsiExit:
   389                              <1>     return
    18                              <2> %%_ret:
    19 00000B1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   390                              <1> .fsiGotoNextBuffer:
   391 00000B1B 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   392 00000B1E 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   393 00000B25 74F3                <1>     je .fsiExit
   394 00000B27 EBE6                <1>     jmp short .fsiCheckBuffer
   395                              <1> ;-----------------------------------------------------------------------------
   396                              <1> ;SPECIAL BUFFER FUNCTIONS
   397                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   398                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   399                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   400                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   401                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   402                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   403                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   404                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   405                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   406                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   407                              <1> ;-----------------------------------------------------------------------------
   408                              <1> getBufForDataNoFile:
   409                              <1> ;Returns a buffer to use for disk data in rbx
   410                              <1> ;Requires a File Handle.
   411                              <1> ;Input: [workingDPB] = DPB to transact on
   412                              <1> ;       rax = Sector to transfer
   413                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   414 00000B29 51                  <1>     push rcx
   415 00000B2A B108                <1>     mov cl, dataBuffer
   416 00000B2C 56                  <1>     push rsi
   417 00000B2D 57                  <1>     push rdi
   418 00000B2E 488B35(DFC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   419 00000B35 E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   420 00000B3A 725F                <1>     jc getBufCommon.exit
   421 00000B3C 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   422 00000B44 EB55                <1>     jmp short getBufCommon.exit
   423                              <1> getBufForDirNoFile:
   424                              <1> ;Returns a buffer to use for disk dir data in rbx
   425                              <1> ;Requires a File Handle.
   426                              <1> ;Input: [workingDPB] = DPB to transact on
   427                              <1> ;       rax = Sector to transfer
   428                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   429 00000B46 51                  <1>     push rcx
   430 00000B47 B104                <1>     mov cl, dirBuffer
   431 00000B49 56                  <1>     push rsi
   432 00000B4A 57                  <1>     push rdi
   433 00000B4B 488B35(DFC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   434 00000B52 E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   435 00000B57 7242                <1>     jc getBufCommon.exit
   436 00000B59 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   437 00000B61 EB38                <1>     jmp short getBufCommon.exit
   438                              <1> getBufForFat:
   439                              <1> ;Returns a buffer to use for fat data in rbx
   440                              <1> ;Input: [workingDPB] = DPB to transact on
   441                              <1> ;       rax = Sector to transfer
   442                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   443 00000B63 51                  <1>     push rcx
   444 00000B64 B102                <1>     mov cl, fatBuffer
   445 00000B66 EB03                <1>     jmp short getBufCommon2
   446                              <1> getBufForDOS:
   447                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   448                              <1> ;Input: [workingDPB] = DPB to transact on
   449                              <1> ;       rax = Sector to transfer
   450                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   451 00000B68 51                  <1>     push rcx
   452 00000B69 B101                <1>     mov cl, dosBuffer
   453                              <1> getBufCommon2:
   454 00000B6B 56                  <1>     push rsi
   455 00000B6C 57                  <1>     push rdi    ;Push rdi to preserve it
   456 00000B6D 488B35(DFC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   457 00000B74 EB15                <1>     jmp short getBufCommon.makeReq
   458                              <1> getBufForDir:
   459                              <1> ;Returns a buffer to use for disk directory data in rbx
   460                              <1> ;Input: [currentSFT] = File to manipulate
   461                              <1> ;       rax = Sector to transfer
   462                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   463 00000B76 51                  <1>     push rcx
   464 00000B77 B104                <1>     mov cl, dirBuffer
   465 00000B79 EB03                <1>     jmp short getBufCommon
   466                              <1> getBufForData:
   467                              <1> ;Returns a buffer to use for disk data in rbx
   468                              <1> ;Requires a File Handle.
   469                              <1> ;Input: [currentSFT] = File to manipulate
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 00000B7B 51                  <1>     push rcx
   473 00000B7C B108                <1>     mov cl, dataBuffer
   474                              <1> getBufCommon:
   475 00000B7E 56                  <1>     push rsi
   476 00000B7F 57                  <1>     push rdi
   477 00000B80 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
   478 00000B87 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   479                              <1> .makeReq:
   480 00000B8B E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   481 00000B90 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   482                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   483                              <1>     ; flushed to the file!
   484                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   485                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   486                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   487 00000B92 F6C103              <1>     test cl, dosBuffer | fatBuffer
   488 00000B95 7504                <1>     jnz .exit
   489 00000B97 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   490                              <1> .exit:
   491 00000B9B 5F                  <1>     pop rdi
   492 00000B9C 5E                  <1>     pop rsi
   493 00000B9D 59                  <1>     pop rcx
   494                              <1>     return
    18                              <2> %%_ret:
    19 00000B9E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> flushFile:
   497                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   498                              <1> ; FAT/DOS buffers to flush
   499                              <1> ; We flush and free, and set to head of chain before continuing to search
   500                              <1> ;Input: rdi = is the file (sft) we wish to flush
   501                              <1> ;Output: CF=NC => All ok
   502                              <1> ;        CF=CY => A sector failed, exit. 
   503 00000B9F 57                  <1>     push rdi
   504 00000BA0 56                  <1>     push rsi
   505                              <1>     ;First check if the file has been written to?
   506 00000BA1 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   507 00000BA7 7434                <1>     jz .exitNoFlush ;Exit without flushing
   508 00000BA9 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   509 00000BAC 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   510                              <1> .ffLoop:
   511 00000BB3 4881FFFFFFFFFF      <1>     cmp rdi, -1
   512 00000BBA 741B                <1>     je .exit
   513 00000BBC F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   514 00000BC0 751E                <1>     jnz .found  ;Flush if either bit is set
   515 00000BC2 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   516 00000BCA 7414                <1>     je .found
   517 00000BCC 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   518 00000BD0 740E                <1>     je .found
   519 00000BD2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   520 00000BD5 EBDC                <1>     jmp short .ffLoop
   521                              <1> .exit:
   522                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   523 00000BD7 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   524                              <1> .exitNoFlush:
   525 00000BDD 5E                  <1>     pop rsi
   526 00000BDE 5F                  <1>     pop rdi
   527                              <1>     return
    18                              <2> %%_ret:
    19 00000BDF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   528                              <1> .found:
   529                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   530                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   531 00000BE0 E8C5FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   532 00000BE5 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   533                              <1>     ;If the sector has been successfully flushed, then it
   534                              <1>     ; is no longer owned by that File so we mark the owner as none
   535 00000BE7 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   536 00000BEF E8DEFCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   537 00000BF4 EBBD                <1>     jmp short .ffLoop
    24                                  %include "./Source/Kernel/FAT/fat.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;       File System routines        :
    27                              <1> ;-----------------------------------:
    28                              <1> getFATtype:
    29                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    30                              <1> ;Entry: rbp = DPB to ascertain FAT
    31                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    32 00000BF6 53                  <1>     push rbx
    33 00000BF7 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    34 00000BFA B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    35 00000BFF 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    36 00000C05 730F                <1>     jae .exit
    37 00000C07 FFC9                <1>     dec ecx     ;FAT 12 marker
    38 00000C09 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    39 00000C0F 7205                <1>     jb .exit
    40 00000C11 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    41                              <1> .exit:
    42 00000C16 5B                  <1>     pop rbx
    43                              <1>     return
    18                              <2> %%_ret:
    19 00000C17 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    44                              <1> 
    45                              <1> clust2FATEntry:
    46                              <1> ;Converts a cluster number to a offset in the FAT
    47                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    48                              <1> ;        eax = Cluster number to look for
    49                              <1> ;Exit:   eax = Sector on disk of FAT 
    50                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    51                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    52 00000C18 53                  <1>     push rbx
    53 00000C19 55                  <1>     push rbp
    54 00000C1A 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
    55 00000C21 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    56 00000C24 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    57 00000C2A 731E                <1>     jae .fat32
    58 00000C2C 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    59 00000C32 7209                <1>     jb .fat12
    60                              <1> ;FAT16
    61 00000C34 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    62 00000C36 6801000000          <1>     push qword 1
    63 00000C3B EB15                <1>     jmp short .common
    64                              <1> .fat12:
    65 00000C3D 89C1                <1>     mov ecx, eax    ;ecx = eax
    66 00000C3F D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    67 00000C41 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    68 00000C43 6800000000          <1>     push qword 0
    69 00000C48 EB08                <1>     jmp short .common
    70                              <1> .fat32:
    71 00000C4A 6802000000          <1>     push qword 2
    72 00000C4F C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    73                              <1> .common:
    74                              <1> ;eax has the FAToffset
    75 00000C52 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    76 00000C56 31D2                <1>     xor edx, edx    ;edx = 0
    77 00000C58 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    78 00000C5A 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    79 00000C5E 01D8                <1>     add eax, ebx
    80 00000C60 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    81 00000C61 5D                  <1>     pop rbp
    82 00000C62 5B                  <1>     pop rbx
    83                              <1>     return
    18                              <2> %%_ret:
    19 00000C63 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> 
    85                              <1> getStartSectorOfCluster:
    86                              <1> ;Input: eax = Cluster Number
    87                              <1> ;       rbp = dpb pointer
    88                              <1> ;Output: rax = Starting Sector number for cluster
    89                              <1> ;Gives the data sector we are at in the current cluster
    90                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    91 00000C64 51                  <1>     push rcx
    92 00000C65 09C0                <1>     or eax, eax ;Zero upper dword
    93 00000C67 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    94                              <1> .fat32Root:
    95 00000C69 482D02000000        <1>     sub rax, 2
    96 00000C6F 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    97 00000C72 48D3E0              <1>     shl rax, cl
    98 00000C75 31C9                <1>     xor ecx, ecx
    99 00000C77 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   100 00000C7A 4801C8              <1>     add rax, rcx
   101                              <1>     ;rax now has the first sector of the current cluster
   102 00000C7D 59                  <1>     pop rcx
   103                              <1>     return
    18                              <2> %%_ret:
    19 00000C7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> .rootDir:
   105 00000C7F 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   106 00000C82 E86FFFFFFF          <1>     call getFATtype
   107 00000C87 81F902000000        <1>     cmp ecx, 2
   108 00000C8D 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   109                              <1>     ;Else rax has the first sector of the Root Dir
   110 00000C8F 59                  <1>     pop rcx
   111                              <1>     return
    18                              <2> %%_ret:
    19 00000C90 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   112                              <1> 
   113                              <1> 
   114                              <1> getLastClusterInChain:
   115                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   116                              <1> ;Input: eax = Cluster to start searching at
   117                              <1> ;Output: eax = Last cluster in chain
   118                              <1> ;If input eax = 0, output eax = 0
   119 00000C91 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   120                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C93 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   121 00000C95 53                  <1>     push rbx
   122                              <1> .lp:
   123 00000C96 89C3                <1>     mov ebx, eax
   124 00000C98 E8A1010000          <1>     call readFAT
   125 00000C9D 7209                <1>     jc .exit
   126 00000C9F 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   127 00000CA4 75F0                <1>     jne .lp
   128 00000CA6 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   129                              <1> .exit: 
   130 00000CA8 5B                  <1>     pop rbx
   131                              <1>     return
    18                              <2> %%_ret:
    19 00000CA9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   132                              <1> 
   133                              <1> getNumberOfClustersInChain:
   134                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   135                              <1> ;Input: eax = Cluster to start searching at
   136                              <1> ;Output: eax = Number of clusters in the chain
   137                              <1> ;If input eax = 0, output eax = 0
   138 00000CAA 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   139                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CAC 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   140 00000CAE 51                  <1>     push rcx
   141 00000CAF 31C9                <1>     xor ecx, ecx
   142                              <1> .lp:
   143 00000CB1 FFC1                <1>     inc ecx
   144 00000CB3 E886010000          <1>     call readFAT
   145 00000CB8 7209                <1>     jc .exit
   146 00000CBA 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   147 00000CBF 75F0                <1>     jne .lp
   148 00000CC1 89C8                <1>     mov eax, ecx    ;Get the count
   149                              <1> .exit: 
   150 00000CC3 59                  <1>     pop rcx
   151                              <1>     return
    18                              <2> %%_ret:
    19 00000CC4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> 
   153                              <1> getClusterInChain:
   154                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   155                              <1> ;If an EOC is encountered, then ecx will not be 
   156                              <1> ;Input: eax = Start Cluster to start searching from
   157                              <1> ;       ecx = Number of clusters to go forwards by;
   158                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   159                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   160                              <1> ;Also usual CF babble.
   161 00000CC5 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   162                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CC7 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   163 00000CC9 53                  <1>     push rbx
   164 00000CCA 67E30F              <1>     jecxz .exit
   165                              <1> .lp:
   166 00000CCD 89C3                <1>     mov ebx, eax
   167 00000CCF E86A010000          <1>     call readFAT
   168 00000CD4 7206                <1>     jc .exit
   169 00000CD6 FFC9                <1>     dec ecx
   170 00000CD8 75F3                <1>     jnz .lp
   171 00000CDA 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   172                              <1> .exit:
   173 00000CDC 5B                  <1>     pop rbx
   174                              <1>     return
    18                              <2> %%_ret:
    19 00000CDD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> 
   176                              <1> startNewChain:
   177                              <1> ;Working dpb must be set
   178                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   179                              <1> ;If CF=CY, hard error
   180 00000CDE 53                  <1>     push rbx
   181 00000CDF 56                  <1>     push rsi
   182 00000CE0 E853000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   183 00000CE5 7215                <1>     jc .exit    ;Disk read error?
   184 00000CE7 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   185 00000CEC 740E                <1>     je .exit
   186 00000CEE BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   187 00000CF3 89C3                <1>     mov ebx, eax
   188 00000CF5 E8E3010000          <1>     call writeFAT   ;Propagate the CF 
   189 00000CFA 89D8                <1>     mov eax, ebx
   190                              <1> .exit:
   191 00000CFC 5E                  <1>     pop rsi
   192 00000CFD 5B                  <1>     pop rbx
   193                              <1>     return
    18                              <2> %%_ret:
    19 00000CFE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> allocateClusters:
   196                              <1> ;Working dpb must be set. 
   197                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   198                              <1> ;       ebx = Cluster to link to the new cluster
   199                              <1> ;Output:    
   200                              <1> ;   CF=NC => Complete.
   201                              <1> ;   If eax = -1, then no more free clusters. 
   202                              <1> ;   CF=CY => Hard error, exit
   203                              <1> ; ecx always has number of allocated clusters
   204 00000CFF 53                  <1>     push rbx
   205 00000D00 56                  <1>     push rsi
   206 00000D01 51                  <1>     push rcx    ;Save tfr count on stack
   207 00000D02 67E32B              <1>     jecxz .exit ;Allocating nothing? Exit
   208                              <1> .allocateLoop:
   209 00000D05 E82E000000          <1>     call findFreeCluster
   210 00000D0A 7224                <1>     jc .exit
   211 00000D0C 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   212 00000D11 741D                <1>     je .exit    ;If the cluster number is -1, return immediately
   213                              <1>     ;eax has first free cluster value to use
   214                              <1>     ;First we link the previous cluster to this cluster
   215 00000D13 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   216 00000D18 E8C0010000          <1>     call writeFAT   ;Allocate this cluster first
   217 00000D1D 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   218                              <1>     ;eax points to this allocated cluster
   219                              <1>     ;ebx points to the previous last cluster
   220 00000D1F 89C6                <1>     mov esi, eax    ;New cluster as "value"
   221 00000D21 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   222 00000D23 E8B5010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   223 00000D28 7206                <1>     jc .exit
   224 00000D2A 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   225 00000D2C FFC9                <1>     dec ecx ;One less cluster allocated
   226 00000D2E 75D5                <1>     jnz .allocateLoop
   227                              <1> .exit:
   228 00000D30 5E                  <1>     pop rsi ;Pop the tfr count into esi
   229 00000D31 F7D9                <1>     neg ecx
   230 00000D33 01F1                <1>     add ecx, esi
   231 00000D35 5E                  <1>     pop rsi
   232 00000D36 5B                  <1>     pop rbx
   233                              <1>     return
    18                              <2> %%_ret:
    19 00000D37 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234                              <1> 
   235                              <1> findFreeCluster:
   236                              <1> ;Walks the FAT to find a free cluster and returns the 
   237                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   238                              <1> ;Works on the workingDPB
   239                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   240 00000D38 53                  <1>     push rbx
   241 00000D39 52                  <1>     push rdx
   242 00000D3A 55                  <1>     push rbp
   243 00000D3B 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
   244                              <1>     ;Use readFAT
   245                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   246                              <1>     ;If readFAT returns 0 then its a free cluster
   247 00000D42 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   248                              <1> .fatLoop:
   249 00000D47 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   250 00000D49 E8F0000000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   251 00000D4E 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   252 00000D50 85C0                <1>     test eax, eax   ;Is this cluster free?
   253 00000D52 7409                <1>     jz .exit    ;If yes, exit
   254 00000D54 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   255 00000D58 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   256 00000D5B 76EA                <1>     jbe .fatLoop
   257                              <1> .exit:
   258 00000D5D 89D8                <1>     mov eax, ebx
   259 00000D5F F8                  <1>     clc
   260                              <1> .exitFail:      ;Keep carry flag
   261 00000D60 5D                  <1>     pop rbp
   262 00000D61 5A                  <1>     pop rdx
   263 00000D62 5B                  <1>     pop rbx
   264                              <1>     return
    18                              <2> %%_ret:
    19 00000D63 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> 
   266                              <1> findFreeClusterData:
   267                              <1> ;Walks the FAT to find a free cluster and returns the 
   268                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   269                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   270                              <1> ;Works on the workingDPB
   271                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   272 00000D64 53                  <1>     push rbx
   273 00000D65 52                  <1>     push rdx
   274 00000D66 55                  <1>     push rbp
   275 00000D67 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
   276 00000D6E 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   277                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   278 00000D72 31D2                <1>     xor edx, edx
   279 00000D74 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   280 00000D77 FFCA                <1>     dec edx
   281 00000D79 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   282                              <1>     ;Use readFAT
   283                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   284                              <1>     ;If readFAT returns 0 then its a free cluster
   285 00000D7C B802000000          <1>     mov eax, 2  ;Start with cluster 2
   286 00000D81 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   287                              <1> .fatLoop:
   288 00000D84 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   289 00000D86 E8B3000000          <1>     call readFAT
   290 00000D8B 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   291 00000D8D 85C0                <1>     test eax, eax   ;Is this cluster free?
   292 00000D8F 750C                <1>     jne .fatProceed
   293 00000D91 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   294 00000D94 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   295 00000D9B 7410                <1>     je .fatFirst
   296                              <1> .fatProceed:
   297 00000D9D 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   298 00000DA1 39D0                <1>     cmp eax, edx
   299 00000DA3 76DF                <1>     jbe .fatLoop
   300                              <1> .exit:
   301 00000DA5 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   302 00000DA8 F8                  <1>     clc
   303                              <1> .exitFail:      ;Keep carry flag
   304 00000DA9 5D                  <1>     pop rbp
   305 00000DAA 5A                  <1>     pop rdx
   306 00000DAB 5B                  <1>     pop rbx
   307                              <1>     return
    18                              <2> %%_ret:
    19 00000DAC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   308                              <1> .fatFirst:
   309 00000DAD 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   310 00000DB0 EBEB                <1>     jmp short .fatProceed
   311                              <1> 
   312                              <1> getNextSectorOfFile:
   313                              <1> ;This function will read the next sector for a file into a buffer.
   314                              <1> ;If the next sector to be read lives in the next cluster, it will update
   315                              <1> ; the vars appropriately
   316                              <1> ;
   317                              <1> ;Input: rbp = dpb pointer
   318                              <1> ;Output:
   319                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   320                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   321                              <1> ;       CF=CY => Critical error occurred and was FAILed
   322                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   323                              <1> ; next cluster and read first sector 
   324                              <1>     ;Check if we need to go to next cluster
   325 00000DB2 8A05(31C70300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   326 00000DB8 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   327 00000DBB 7416                <1>     je .gotoNextCluster
   328                              <1>     ;Goto next sector in same cluster
   329 00000DBD FE05(31C70300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   330 00000DC3 48FF05(32C70300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   331 00000DCA 488B05(32C70300)    <1>     mov rax, qword [currSectD]
   332                              <1> .exitOK:
   333 00000DD1 F8                  <1>     clc
   334                              <1> .exitFail:
   335                              <1>     return
    18                              <2> %%_ret:
    19 00000DD2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   336                              <1> .gotoNextCluster:
   337 00000DD3 8B05(29C70300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   338 00000DD9 E860000000          <1>     call readFAT
   339 00000DDE 72F2                <1>     jc .exitFail
   340                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   341 00000DE0 3DFFFFFFFF          <1>     cmp eax, -1
   342 00000DE5 74EA                <1>     je .exitOK
   343                              <1> ;Update the new cluster and sector information
   344 00000DE7 8905(29C70300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   345 00000DED FF05(25C70300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   346 00000DF3 E86CFEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   347 00000DF8 488905(32C70300)    <1>     mov qword [currSectD], rax  ;Save it
   348 00000DFF C605(31C70300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   349 00000E06 EBC9                <1>     jmp short .exitOK
   350                              <1> 
   351                              <1> unlinkFAT:
   352                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   353                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   354                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   355                              <1> ; cluster must be set to EOC before this proc is called.
   356                              <1> ;Stops at first invalid cluster number.
   357                              <1> ;
   358                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   359                              <1> ;       rbp = Current DPB to use for disk
   360                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   361                              <1> 
   362 00000E08 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   363 00000E09 56                  <1>     push rsi
   364 00000E0A E80A000000          <1>     call truncateFAT    ;Preserved eax
   365 00000E0F 31F6                <1>     xor esi, esi  ;Free first cluster too
   366 00000E11 E8C7000000          <1>     call writeFAT
   367 00000E16 5E                  <1>     pop rsi
   368 00000E17 58                  <1>     pop rax
   369                              <1>     return
    18                              <2> %%_ret:
    19 00000E18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   370                              <1> 
   371                              <1> truncateFAT:
   372                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   373                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   374                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   375                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   376                              <1> ;Stops at first invalid cluster number.
   377                              <1> ;
   378                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   379                              <1> ;       rbp = Current DPB to use for disk
   380                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   381 00000E19 50                  <1>     push rax
   382 00000E1A 53                  <1>     push rbx
   383 00000E1B 56                  <1>     push rsi
   384 00000E1C 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   385                              <1> .lp:
   386 00000E1E E81B000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   387 00000E23 7215                <1>     jc .exit    ;Error exit
   388 00000E25 3DFFFFFFFF          <1>     cmp eax, -1 ;End of chain?
   389 00000E2A 740E                <1>     je .exit
   390 00000E2C 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   391 00000E2D 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   392 00000E2F E8A9000000          <1>     call writeFAT
   393 00000E34 7204                <1>     jc .exit    ;Error exit
   394 00000E36 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   395 00000E38 EBE4                <1>     jmp short .lp
   396                              <1> .exit:
   397 00000E3A 5E                  <1>     pop rsi
   398 00000E3B 5B                  <1>     pop rbx
   399 00000E3C 58                  <1>     pop rax
   400                              <1>     return
    18                              <2> %%_ret:
    19 00000E3D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   401                              <1> readFAT:
   402                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   403                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   404                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   405                              <1> ;       rbp = DPB
   406                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   407                              <1> ;If carry set, getBuffer failed!
   408 00000E3E 53                  <1>     push rbx
   409 00000E3F 51                  <1>     push rcx
   410 00000E40 52                  <1>     push rdx
   411 00000E41 57                  <1>     push rdi
   412 00000E42 55                  <1>     push rbp
   413 00000E43 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   414 00000E45 E8CEFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   415                              <1>     ;and FAT type in ecx
   416 00000E4A E814FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   417 00000E4F 7237                <1>     jc .exitFail
   418                              <1>     ;Check if FAT 12, 16, 32
   419 00000E51 85C9                <1>     test ecx, ecx
   420 00000E53 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   421 00000E55 F7C101000000        <1>     test ecx, 1
   422 00000E5B 7413                <1>     jz .goToNextClusterFat32
   423                              <1>     ;Here we handle FAT16
   424 00000E5D 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   425 00000E62 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   426 00000E67 721E                <1>     jb .exit
   427 00000E69 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   428 00000E6E EB17                <1>     jmp short .exit
   429                              <1> .goToNextClusterFat32:
   430 00000E70 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   431 00000E74 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   432 00000E79 7207                <1>     jb .validCluster32   
   433 00000E7B B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   434 00000E80 EB05                <1>     jmp short .exit
   435                              <1> .validCluster32:
   436 00000E82 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   437                              <1> .exit:
   438 00000E87 F8                  <1>     clc
   439                              <1> .exitFail:
   440 00000E88 5D                  <1>     pop rbp
   441 00000E89 5F                  <1>     pop rdi
   442 00000E8A 5A                  <1>     pop rdx
   443 00000E8B 59                  <1>     pop rcx
   444 00000E8C 5B                  <1>     pop rbx
   445                              <1>     return
    18                              <2> %%_ret:
    19 00000E8D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   446                              <1> .gotoNextClusterFat12:
   447                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   448                              <1> ;eax has the sector number of the FAT
   449                              <1> ;edx has byte offset into the sector
   450                              <1> ;edi has current cluster number
   451                              <1> ;rbx has ptr to buffer header
   452 00000E8E F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   453 00000E94 742C                <1>     jz .gotoNextClusterFat12Even
   454                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   455 00000E96 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   456 00000E9A 29D1                <1>     sub ecx, edx
   457 00000E9C FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   458 00000E9E 7518                <1>     jnz .gotoNextClusterFat12NoCross
   459                              <1>     ;Boundary cross, build entry properly
   460 00000EA0 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   461 00000EA5 FFC0                <1>     inc eax ;Get next FAT sector
   462 00000EA7 53                  <1>     push rbx
   463 00000EA8 E8B6FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   464 00000EAD 72D9                <1>     jc .exitFail
   465 00000EAF 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   466 00000EB0 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   467 00000EB3 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   468 00000EB6 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   469                              <1> .gotoNextClusterFat12NoCross:
   470 00000EB8 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   471 00000EBD C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   472 00000EC0 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   473                              <1> .gotoNextClusterFat12Even:
   474                              <1>     ;Here the cluster is even and can't cross a sector boundary
   475 00000EC2 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   476 00000EC7 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   477                              <1> .checkIfLastFAT12Cluster:
   478 00000ECC 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   479 00000ED1 72B4                <1>     jb .exit         ;If so, exit with it in eax
   480 00000ED3 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   481 00000ED8 E9AAFFFFFF          <1>     jmp .exit
   482                              <1> 
   483                              <1> writeFAT:
   484                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   485                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   486                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   487                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   488                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   489 00000EDD 53                  <1>     push rbx
   490 00000EDE 51                  <1>     push rcx
   491 00000EDF 52                  <1>     push rdx
   492 00000EE0 56                  <1>     push rsi
   493 00000EE1 57                  <1>     push rdi
   494 00000EE2 55                  <1>     push rbp
   495 00000EE3 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   496 00000EE5 E82EFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   497                              <1>     ;and FAT type in ecx
   498 00000EEA E874FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   499 00000EEF 7223                <1>     jc .exitFail
   500                              <1>     ;Check if FAT 12, 16, 32
   501 00000EF1 85C9                <1>     test ecx, ecx
   502 00000EF3 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   503 00000EF5 F7C101000000        <1>     test ecx, 1
   504 00000EFB 7407                <1>     jz .goToNextClusterFat32
   505                              <1>     ;Here we handle FAT16
   506 00000EFD 66897C1330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], di ;Store the value
   507 00000F02 EB0A                <1>     jmp short .exit
   508                              <1> .goToNextClusterFat32:
   509 00000F04 81E7FFFFFF0F        <1>     and edi, 0FFFFFFFh  ;Zero upper nybble
   510 00000F0A 897C1330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], edi
   511                              <1> .exit:
   512 00000F0E E8A8FAFFFF          <1>     call setBufferDirty
   513 00000F13 F8                  <1>     clc
   514                              <1> .exitFail:
   515 00000F14 5D                  <1>     pop rbp
   516 00000F15 5F                  <1>     pop rdi
   517 00000F16 5E                  <1>     pop rsi
   518 00000F17 5A                  <1>     pop rdx
   519 00000F18 59                  <1>     pop rcx
   520 00000F19 5B                  <1>     pop rbx
   521                              <1>     return
    18                              <2> %%_ret:
    19 00000F1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   522                              <1> .gotoNextClusterFat12:
   523                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   524                              <1> ;eax has the sector number of the FAT
   525                              <1> ;edx has byte offset into the sector
   526                              <1> ;edi has current cluster number
   527                              <1> ;rbx has ptr to buffer header
   528 00000F1B 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   529 00000F21 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   530 00000F27 7445                <1>     jz .gotoNextClusterFat12Even
   531                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   532 00000F29 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   533 00000F2D 29D1                <1>     sub ecx, edx
   534 00000F2F FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   535 00000F31 752C                <1>     jnz .gotoNextClusterFat12NoCross
   536                              <1>     ;Boundary cross, build entry properly
   537                              <1>     ;Replace the high nybble of the low byte 
   538 00000F33 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   539 00000F38 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   540 00000F3E C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   541 00000F41 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   542 00000F43 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   543 00000F46 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   544 00000F4A E86CFAFFFF          <1>     call setBufferDirty
   545 00000F4F FFC0                <1>     inc eax ;Get next FAT sector
   546 00000F51 E80DFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   547 00000F56 72BC                <1>     jc .exitFail
   548 00000F58 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   549 00000F5A 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   550 00000F5D EBAF                <1>     jmp short .exit
   551                              <1> .gotoNextClusterFat12NoCross:
   552 00000F5F 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   553 00000F64 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   554 00000F69 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   555 00000F6C EB0A                <1>     jmp short .fat12common
   556                              <1> .gotoNextClusterFat12Even:
   557                              <1>     ;Here the cluster is even and can't cross a sector boundary
   558 00000F6E 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   559 00000F73 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   560                              <1> .fat12common:
   561 00000F78 09F0                <1>     or eax, esi     ;Add the new entry bits
   562 00000F7A 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   563 00000F7F E98AFFFFFF          <1>     jmp .exit
    25                                  %include "./Source/Kernel/FAT/findfile.asm"
    26                              <1> ;Generic Find First and Find Next functions here
    27                              <1> findNextMain:
    28 00000F84 488B3D(F1C30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    29 00000F8B F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    30 00000F8E 7408                <1>     jz .notNet
    31 00000F90 B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    32 00000F95 CD4F                <1>     int 4Fh
    33                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000F97 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    34                              <1> .notNet:
    35 00000F98 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    36 00000F9A FEC0                <1>     inc al  ;Convert into 1 based number
    37 00000F9C E88C4F0000          <1>     call dosCrit1Enter
    38 00000FA1 E8594B0000          <1>     call setDrive   ;Set CDS and current drive vars
    39 00000FA6 720C                <1>     jc .critError   ;Return error if this fails
    40 00000FA8 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS] 
    41 00000FAF E852480000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    42                              <1> .critError:
    43 00000FB4 E87E4F0000          <1>     call dosCrit1Exit
    44                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FB9 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    45 00000FBB E801000000          <1>     call searchMoreDir
    46                              <1>     return
    18                              <2> %%_ret:
    19 00000FC0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> searchMoreDir:
    48                              <1> ;The three directory variables are set up from the ffblock. 
    49                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    50                              <1> ;Current DTA is also used to contain the ff block address
    51                              <1> ;All registers can be trashed
    52 00000FC1 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
    53                              <1>     ;First setup dirClustA and dirSect vars
    54 00000FC8 488B3D(F1C30300)    <1>     mov rdi, qword [currentDTA]
    55 00000FCF 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    56 00000FD2 8805(D1C60300)      <1>     mov byte [searchAttr], al   ;And save it
    57 00000FD8 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    58 00000FDB 8905(59C70300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    59 00000FE1 8905(55C70300)      <1>     mov dword [dirClustPar], eax
    60                              <1>     ;Get number of 32 byte entries in a sector
    61 00000FE7 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    62                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    63 00000FEA C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    64                              <1>     ;Now get bytes per cluster
    65 00000FED 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    66 00000FEF 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 00000FF3 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    68 00000FF7 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 00000FF9 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 00000FFB 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 00000FFD 31D2                <1>     xor edx, edx
    72 00000FFF F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 00001001 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 00001003 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 00001007 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 00001009 31D2                <1>     xor edx, edx
    80 0000100B F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster (or root dir)
    82                              <1>     ;edx has byte offset into sector 
    83 0000100D 668905(5DC70300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 00001014 C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    85 00001017 8915(5FC70300)      <1>     mov dword [dirEntry], edx
    86 0000101D 8B05(59C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    87 00001023 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    88 00001025 7461                <1>     jz .oldFat
    89                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    90 00001027 89D9                <1>     mov ecx, ebx
    91 00001029 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    92                              <1> .fatlp:
    93 0000102C E80DFEFFFF          <1>     call readFAT
    94 00001031 3DFFFFFFFF          <1>     cmp eax, -1
    95 00001036 7464                <1>     je .errorExit
    96 00001038 FFC9                <1>     dec ecx
    97 0000103A 75F0                <1>     jnz .fatlp
    98 0000103C 8905(59C70300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    99                              <1> .skipFatWalk:
   100 00001042 488D0597000000      <1>     lea rax, searchDir.nextEp
   101 00001049 50                  <1>     push rax    ;Push the return address onto stack
   102 0000104A 8B05(59C70300)      <1>     mov eax, dword [dirClustA]
   103 00001050 E80FFCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   104 00001055 0FB71D(5DC70300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   105 0000105C 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   106                              <1> .common:
   107 0000105F E804FBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   108 00001064 0F8211010000        <1>     jc searchDir.hardError
   109 0000106A E80F010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   110 0000106F 8B05(5FC70300)      <1>     mov eax, dword [dirEntry]
   111 00001075 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   112 00001077 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   113 0000107A 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   114                              <1>     ;We continue AS IF this entry was bad
   115                              <1>     ;Now setup al as upon normal entry 
   116 0000107D 8A05(D1C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   117 00001083 E95F010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   118                              <1>     ;The return address on the stack will return to the ep's pushed
   119                              <1> .oldFat:
   120                              <1> ;Old FAT 12/16 root dirs fall thru here only
   121 00001088 488D05D0000000      <1>     lea rax, searchDir.oldNextEP
   122 0000108F 50                  <1>     push rax    ;Push return address onto the stack
   123 00001090 0FB705(5DC70300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   124 00001097 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   125 0000109A EBC3                <1>     jmp short .common
   126                              <1> .errorExit:
   127 0000109C F9                  <1>     stc
   128                              <1>     return
    18                              <2> %%_ret:
    19 0000109D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   129                              <1> searchDir:
   130                              <1> ;Called in a level 1 critical section. 
   131                              <1> ;The directory variables are set and fcbName has the pattern to match
   132                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   133                              <1> ;All registers can be trashed
   134                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   135                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   136                              <1> 
   137                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   138                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   139 0000109E 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   140 000010A5 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   141 000010AB 7408                <1>     jz .notNet
   142 000010AD B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   143 000010B2 CD4F                <1>     int 4fh
   144                              <1>     return
    18                              <2> %%_ret:
    19 000010B4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> .notNet:
   146 000010B5 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   147 000010BC 8B05(59C70300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   148 000010C2 85C0                <1>     test eax, eax
   149 000010C4 747E                <1>     jz .oldRoot
   150 000010C6 E899FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   151                              <1> .sectorLoop:
   152 000010CB E898FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   153 000010D0 0F82A5000000        <1>     jc .hardError
   154 000010D6 E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   155                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   156 000010DB E8B2000000          <1>     call findInBuffer
   157                              <1> .nextEp:
   158                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000010E0 73D2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   159 000010E2 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   160                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   161                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   162                              <1>     ;IF however, the next cluster is -1, then we return fail
   163 000010E8 8B05(59C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   164 000010EE 8905(29C70300)      <1>     mov dword [currClustD], eax
   165 000010F4 668B05(5DC70300)    <1>     mov ax, word [dirSect]
   166 000010FB 8805(31C70300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   167 00001101 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   168 00001105 488905(32C70300)    <1>     mov qword [currSectD], rax  
   169 0000110C C705(25C70300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   169 00001114 0000                <1>
   170 00001116 E897FCFFFF          <1>     call getNextSectorOfFile
   171 0000111B 725E                <1>     jc .hardError
   172 0000111D 3DFFFFFFFF          <1>     cmp eax, -1
   173 00001122 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   174 00001124 66FF05(5DC70300)    <1>     inc word [dirSect]  ;Goto next sector
   175 0000112B 8B05(59C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 00001131 3B05(29C70300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   177 00001137 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   178 00001139 66C705(5DC70300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   178 00001141 00                  <1>
   179 00001142 EB87                <1>     jmp short .sectorLoop 
   180                              <1> 
   181                              <1> .oldRoot:
   182                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   183                              <1> ; one large contiguous cluster.
   184                              <1> ;   ecx = Number of entries per sector
   185                              <1> .oldSectorLp:
   186 00001144 0FB705(5DC70300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   187 0000114B 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   188 0000114E E815FAFFFF          <1>     call getBufForDOS
   189 00001153 7226                <1>     jc .hardError
   190 00001155 E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   191 0000115A E833000000          <1>     call findInBuffer
   192                              <1> .oldNextEP:
   193                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 0000115F 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001161 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   194 00001162 7413                <1>     jz .fnfError
   195 00001164 66FF05(5DC70300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   196 0000116B 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   197 0000116E 663905(5FC70300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   198 00001175 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   199                              <1> .fnfError:
   200 00001177 B012                <1>     mov al, errNoFil
   201 00001179 F9                  <1>     stc
   202                              <1>     return
    18                              <2> %%_ret:
    19 0000117A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   203                              <1> .hardError:
   204 0000117B B0FF                <1>     mov al, -1
   205                              <1>     return
    18                              <2> %%_ret:
    19 0000117D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   206                              <1> adjustDosDirBuffer:
   207 0000117E 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   208 00001182 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   209 00001186 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   210 0000118A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   211 0000118E C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   212                              <1>     return
    18                              <2> %%_ret:
    19 00001191 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> findInBuffer:
   215                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   216                              <1> ;       rsi = Sector buffer data area
   217                              <1> ;Output: CF=CY => No entries found
   218                              <1> ;        ZF=NE => Keep searching in subsequent directories
   219                              <1> ;        ZF=ZE => End of directory reached early, stop
   220                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   221                              <1> ;        rsi = Points to start of the disk buffer directory entry
   222 00001192 8A05(D1C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   223 00001198 E89D000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   224                              <1> .searchMainLp:
   225                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   226 0000119D 8A25(DDC60300)      <1>     mov ah, byte [delChar]
   227 000011A3 803E00              <1>     cmp byte [rsi], 00h
   228 000011A6 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   229 000011A8 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   230 000011AA 750F                <1>     jne .notLookingForEmpty
   231                              <1> .emptySlot:
   232                              <1> ;Here we check if we are looking for an empty directory entry or
   233                              <1> ; we have reached the end of the file (if the first byte is 00h)
   234                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   235 000011AC 3A25(AEC60300)      <1>     cmp ah, byte [fcbName] 
   236                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011B2 74DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   237                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   238 000011B4 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   239 000011B7 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   240 000011B9 F9                  <1>     stc
   241                              <1>     return
    18                              <2> %%_ret:
    19 000011BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> .notLookingForEmpty:
   243 000011BB 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   244 000011BE 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   245 000011C1 803D(42C40300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   246 000011C8 7434                <1>     je .exclusiveDir
   247 000011CA 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   248 000011CC 7437                <1>     je .volFile ;If so, go here
   249 000011CE 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   250 000011D1 7414                <1>     je .nextEntry
   251 000011D3 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   252 000011D5 7710                <1>     ja .nextEntry
   253                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   254                              <1> .scanName:
   255 000011D7 56                  <1>     push rsi
   256 000011D8 488D3D(AEC60300)    <1>     lea rdi, fcbName ;Goto name template to search for
   257 000011DF E83E000000          <1>     call .nameCompare
   258 000011E4 5E                  <1>     pop rsi
   259 000011E5 7424                <1>     je .searchEntryFound
   260                              <1> .nextEntry:
   261                              <1> ;Go to next entry
   262 000011E7 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   263 000011EE FF05(5FC70300)      <1>     inc dword [dirEntry] ;And denote that in variable
   264 000011F4 FFC9                <1>     dec ecx
   265 000011F6 75A5                <1>     jnz .searchMainLp
   266                              <1> .badExit:
   267 000011F8 31C0                <1>     xor eax, eax
   268 000011FA FFC0                <1>     inc eax ;Clear ZF
   269 000011FC F9                  <1>     stc
   270                              <1>     return
    18                              <2> %%_ret:
    19 000011FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> .exclusiveDir:
   272                              <1> ;Used when going down a path, dir bit simply need be set
   273 000011FE F6C410              <1>     test ah, dirDirectory
   274 00001201 75D4                <1>     jnz .scanName
   275 00001203 EBE2                <1>     jmp short .nextEntry
   276                              <1> 
   277                              <1> .volFile:
   278 00001205 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   279 00001207 74CE                <1>     je .scanName       ;If so, scan the name agrees
   280 00001209 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   281                              <1> 
   282                              <1> .searchEntryFound:
   283                              <1> ;Here a good entry was found!
   284 0000120B 56                  <1>     push rsi
   285 0000120C 57                  <1>     push rdi
   286 0000120D 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   287 0000120F 488D3D(33C60300)    <1>     lea rdi, curDirCopy
   288 00001216 B904000000          <1>     mov ecx, 32/8
   289 0000121B F348A5              <1>     rep movsq   ;Copy the directory to SDA
   290 0000121E 5F                  <1>     pop rdi
   291 0000121F 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   292 00001220 F8                  <1>     clc
   293                              <1>     return
    18                              <2> %%_ret:
    19 00001221 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> .nameCompare:
   296                              <1> ;Input: rsi = source string
   297                              <1> ;       rdi = string template to compare against
   298                              <1> ;Output: ZF=ZE => Strings are ok
   299                              <1> ;        ZF=NZ => Strings not ok
   300                              <1> ;Accepts wildcards. Trashes al
   301 00001222 51                  <1>     push rcx
   302 00001223 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   303                              <1> .ncLp:
   304 00001225 81F90B000000        <1>     cmp ecx, 11
   305 0000122B 740B                <1>     je .ncExit
   306 0000122D FFC1                <1>     inc ecx
   307 0000122F A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   308 00001230 74F3                <1>     je .ncLp    ;If equal, keep going
   309 00001232 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   310 00001236 74ED                <1>     je .ncLp
   311                              <1> .ncExit:
   312 00001238 59                  <1>     pop rcx
   313                              <1>     return
    18                              <2> %%_ret:
    19 00001239 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   314                              <1> 
   315                              <1> adjustSearchAttr:
   316                              <1> ;Converts the byte to a system only if the bit is set
   317                              <1> ;Input: eax = User selected search mask
   318                              <1> ;Output: eax = Modified search mask
   319 0000123A 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   320 0000123F A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   321                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001244 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   322 00001246 B808000000          <1>     mov eax, dirVolumeID
   323                              <1>     return
    18                              <2> %%_ret:
    19 0000124B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> asciiToFCB:
   326                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   327                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   328                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   329                              <1> ;Name is space padded.
   330                              <1> ;Input: rsi = ASCII string buffer
   331                              <1> ;       rdi = FCB name buffer
   332                              <1> ;Output: al = Char that terminated the source string 
   333 0000124C 53                  <1>     push rbx    
   334 0000124D 57                  <1>     push rdi
   335 0000124E B90B000000          <1>     mov ecx, 11
   336 00001253 B020                <1>     mov al, " "
   337 00001255 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   338 00001257 5F                  <1>     pop rdi
   339 00001258 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   340                              <1> .processName:
   341 0000125B AC                  <1>     lodsb   ;Get the char in al
   342 0000125C E8A0490000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   343 00001261 84C0                <1>     test al, al
   344 00001263 742D                <1>     jz .exit
   345                              <1>     ;Test if the char is valid
   346 00001265 E8CD4A0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   347 0000126A 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   348 0000126C 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   349 0000126E 7407                <1>     je .extSpace
   350 00001270 3C2E                <1>     cmp al, "."
   351 00001272 740C                <1>     je .ext
   352 00001274 AA                  <1>     stosb   ;Store the char
   353 00001275 EBE4                <1>     jmp short .processName
   354                              <1> .extSpace:
   355                              <1> ;Now we scan for a period in the name
   356 00001277 AC                  <1>     lodsb   ;Get a char and increase rsi
   357 00001278 84C0                <1>     test al, al
   358 0000127A 7416                <1>     jz .exit
   359 0000127C 3C2E                <1>     cmp al, "."     ;If al is not a period...
   360 0000127E 75F7                <1>     jne .extSpace   ; keep searching
   361                              <1> .ext:
   362 00001280 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   363                              <1> .processExt:
   364 00001284 AC                  <1>     lodsb
   365 00001285 84C0                <1>     test al, al
   366 00001287 7409                <1>     jz .exit
   367 00001289 3C20                <1>     cmp al, " "
   368 0000128B 7405                <1>     je .exit
   369 0000128D AA                  <1>     stosb
   370 0000128E EBF4                <1>     jmp short .processExt
   371                              <1> .exitBadChar:
   372 00001290 30C0                <1>     xor al, al  ;Return a null terminator
   373                              <1> .exit:
   374 00001292 5B                  <1>     pop rbx
   375                              <1>     return
    18                              <2> %%_ret:
    19 00001293 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   376                              <1> 
   377                              <1> FCBToAsciiz:
   378                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   379                              <1> ;Name is space padded too
   380                              <1> ;Input: rsi = FCB name buffer
   381                              <1> ;       rdi = ASCIIZ string buffer
   382 00001294 B908000000          <1>     mov ecx, 8
   383 00001299 F3A4                <1>     rep movsb   ;Move the name over
   384                              <1> .scanNameSpace:
   385 0000129B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   386 0000129F 750D                <1>     jne .ext
   387 000012A1 48FFCF              <1>     dec rdi
   388 000012A4 FFC1                <1>     inc ecx
   389 000012A6 81F908000000        <1>     cmp ecx, 8
   390 000012AC 72ED                <1>     jb .scanNameSpace
   391                              <1> .ext:
   392 000012AE 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   393 000012B3 7506                <1>     jne .validExt
   394 000012B5 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   395 000012B9 7415                <1>     je .exit
   396                              <1> .validExt:
   397 000012BB B02E                <1>     mov al, "." ;We have a valid extension, store a period
   398 000012BD AA                  <1>     stosb
   399 000012BE B903000000          <1>     mov ecx, 3
   400 000012C3 F3A4                <1>     rep movsb   ;Move the three extension chars over
   401                              <1> .scanExtSpace:
   402 000012C5 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   403 000012C9 7505                <1>     jne .exit
   404 000012CB 48FFCF              <1>     dec rdi
   405 000012CE EBF5                <1>     jmp short .scanExtSpace
   406                              <1> .exit:
   407 000012D0 31C0                <1>     xor eax, eax
   408 000012D2 AA                  <1>     stosb   ;Store a null at the end
   409                              <1>     return
    18                              <2> %%_ret:
    19 000012D3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   410                              <1> 
   411                              <1> setupFFBlock:
   412                              <1> ;Sets up the find first block for the search
   413                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   414 000012D4 50                  <1>     push rax
   415 000012D5 53                  <1>     push rbx
   416 000012D6 56                  <1>     push rsi
   417 000012D7 57                  <1>     push rdi
   418 000012D8 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   419 000012DB 8A05(D1C60300)      <1>     mov al, byte [searchAttr]
   420 000012E1 243F                <1>     and al, 3Fh ;Clear upper two bits
   421 000012E3 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   422 000012E6 0FB605(DEC60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   423 000012ED 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   424                              <1>     ;xchg bx, bx
   425 000012EF 488D35(AEC60300)    <1>     lea rsi, fcbName
   426 000012F6 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   427 000012FA 57                  <1>     push rdi
   428 000012FB 48B820202020202020- <1>     mov rax, "        "
   428 00001304 20                  <1>
   429 00001305 48AB                <1>     stosq
   430 00001307 66AB                <1>     stosw
   431 00001309 AA                  <1>     stosb
   432 0000130A 5F                  <1>     pop rdi
   433 0000130B 48A5                <1>     movsq   ;Move 8 chars
   434 0000130D 66A5                <1>     movsw   ;Move 2 chars
   435 0000130F A4                  <1>     movsb   ;Move the final char
   436                              <1> 
   437 00001310 8B05(5FC70300)      <1>     mov eax, dword [dirEntry]
   438 00001316 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   439 00001319 8B05(55C70300)      <1>     mov eax, dword [dirClustPar]
   440 0000131F 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   441 00001322 8A05(3EC60300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   442 00001328 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   443 0000132B 8B05(49C60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   444 00001331 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   445 00001334 8B05(4FC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   446 0000133A 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   447 0000133D 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   448 00001341 488D35(33C60300)    <1>     lea rsi, curDirCopy
   449 00001348 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   450                              <1> 
   451 0000134D 5F                  <1>     pop rdi
   452 0000134E 5E                  <1>     pop rsi
   453 0000134F 5B                  <1>     pop rbx
   454 00001350 58                  <1>     pop rax
   455                              <1>     return
    18                              <2> %%_ret:
    19 00001351 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   458                              <1> ;Gets the drive letter for the path in al
   459                              <1> ;Input: rsi = Buffer to process
   460                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   461                              <1> ;       ZF=ZE and al = 0 => Null path
   462                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   463                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   464                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   465 00001352 30C0                <1>     xor al, al
   466 00001354 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   467                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001357 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   468 00001359 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   469                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000135D 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   470 0000135F 66AD                <1>     lodsw   ;Get first word, rsi += 2
   471                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   472 00001361 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   473 00001363 2C60                <1>     sub al, 60h
   474                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001365 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   475 00001367 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   476                              <1>     return
    18                              <2> %%_ret:
    19 00001369 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   477                              <1> canonicaliseFileName:
   478                              <1> ;Always trying to build and qualify a full pathname
   479                              <1> ;Does getPath without hitting the disk
   480 0000136A B0FF                <1>     mov al, -1
   481 0000136C 8805(42C40300)      <1>     mov byte [fileDirFlag], al  
   482 00001372 8805(D6C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   483 00001378 48893D(F7C50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   484 0000137F FEC0                <1>     inc al  ;make al = 0
   485 00001381 8805(07C60300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   486 00001387 E84D000000          <1>     call getPath.epAlt
   487                              <1>     retc    ;Return if an error
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000138C 72DB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   488 0000138E 48FFCF              <1>     dec rdi ;Point to what should be the null char
   489 00001391 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Was the prev char a drive sep?
   490 00001395 7503                <1>     jne .storeNull
   491 00001397 B05C                <1>     mov al, "\"
   492 00001399 AA                  <1>     stosb   ;Store the pathsep and increment rdi
   493                              <1> .storeNull:
   494 0000139A 803F00              <1>     cmp byte [rdi], 0   ;Ensure path is null terminated (and clear CF)
   495                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000139D 74CA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   496 0000139F C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   497                              <1>     return
    18                              <2> %%_ret:
    19 000013A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   498                              <1> 
   499                              <1> getFilePathNoCanon:
   500                              <1> ;Used when the path is constructed internally (as for FCB functions)
   501                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   502 000013A3 B0FF                <1>     mov al, -1
   503 000013A5 4889FE              <1>     mov rsi, rdi
   504 000013A8 EB14                <1>     jmp short getPath.noCanon
   505                              <1> getDirPath:
   506 000013AA 30C0                <1>     xor al, al   ;Set to Directory
   507 000013AC EB02                <1>     jmp short getPath
   508                              <1> getFilePath:
   509 000013AE B0FF                <1>     mov al, -1  ;Set to File
   510                              <1> getPath:
   511                              <1> ;Determines whether the path is spliced or not and transfers the chars
   512                              <1> ; from the user buffer into an internal buffer, normalising them.
   513                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   514                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   515                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   516                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   517                              <1> ; we let it do its thing and return.
   518                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   519                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   520                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   521                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   522                              <1> ; (converted from using machine name by the net client program).
   523                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   524                              <1> ; was good.
   525                              <1> ;Called with:
   526                              <1> ; rdi = SDA Buffer for filename
   527                              <1> ; rsi = Potentially unqualified filename
   528                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   529 000013B0 50                  <1>     push rax
   530 000013B1 57                  <1>     push rdi
   531 000013B2 E8B3FFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   532 000013B7 5F                  <1>     pop rdi
   533 000013B8 58                  <1>     pop rax
   534 000013B9 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   535                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013BC 72E4                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   536                              <1> .noCanon:
   537 000013BE 8805(42C40300)      <1>     mov byte [fileDirFlag], al  
   538 000013C4 B0FF                <1>     mov al, -1
   539 000013C6 8805(D6C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   540 000013CC 48893D(F7C50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   541 000013D3 8805(07C60300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   542                              <1> .epAlt:
   543 000013D9 C605(DAC60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   544 000013E0 C605(D9C60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   545 000013E7 F605(D7C60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   546 000013EE 7428                <1>     jz .notServer
   547                              <1>     ;In this case, the client network program will have correctly
   548                              <1>     ; substituted the drive letter for the path before making the request.
   549                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   550 000013F0 E85DFFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   552                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   553                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   554                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   555                              <1>     ; these requirements.
   556                              <1>     ;When a server request is made, the request can ONLY be for a file on
   557                              <1>     ; a CDS drive.
   558 000013F5 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   559 000013F7 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS]
   560 000013FE 50                  <1>     push rax
   561 000013FF E8294B0000          <1>     call dosCrit1Enter
   562 00001404 E8FD430000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   563 00001409 E8294B0000          <1>     call dosCrit1Exit
   564 0000140E 58                  <1>     pop rax
   565 0000140F 0F8382000000        <1>     jnc .driveOk
   566                              <1> .serverExit:
   567 00001415 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   568                              <1>     return
    18                              <2> %%_ret:
    19 00001417 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   569                              <1> .notServer:
   570                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   571 00001418 48C705(E7C60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   571 00001420 FFFFFF              <1>
   572 00001423 B823110000          <1>     mov eax, 1123h
   573 00001428 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   574                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000142A 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   575 0000142C E821FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   576 00001431 9C                  <1>     pushfq  ;Save the flag state on stack
   577 00001432 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   578 00001433 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   579 00001436 E8BA470000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   580 0000143B 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   581 0000143D E8B3470000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   582 00001442 7543                <1>     jnz .notNet
   583 00001444 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   584 00001446 753F                <1>     jne .notNet
   585 00001448 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   586 00001449 9D                  <1>     popfq
   587 0000144A 66AD                <1>     lodsw
   588 0000144C 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   589 00001450 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   590                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   591                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   592                              <1> ; redirector Find First Without CDS
   593                              <1> 
   594 00001452 8A1D(07C60300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   595 00001458 C605(07C60300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   596 0000145F 53                  <1>     push rbx
   597                              <1> .moveNetChars:
   598 00001460 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   599 00001461 E89B470000          <1>     call uppercaseChar  ;Make char in al uppercase
   600 00001466 84C0                <1>     test al, al
   601 00001468 740F                <1>     jz .netEnd
   602 0000146A E886470000          <1>     call swapPathSeparator  ;If path sep, swap it
   603 0000146F AA                  <1>     stosb
   604 00001470 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   605 00001472 E85C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   606 00001477 EBE7                <1>     jmp short .moveNetChars
   607                              <1> .netEnd:
   608 00001479 5B                  <1>     pop rbx
   609 0000147A AA                  <1>     stosb
   610 0000147B 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   611                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000147D 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   612 0000147F B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   613 00001484 CD4F                <1>     int 4Fh
   614                              <1>     return
    18                              <2> %%_ret:
    19 00001486 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   615                              <1> .notNet:
   616                              <1> ;This is the normal case; paths can be relative, or absolute.
   617 00001487 58                  <1>     pop rax ;Get the drive letter back
   618 00001488 9D                  <1>     popfq   ;Get the flag state back
   619 00001489 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   620                              <1> .pnfErr:
   621 0000148B B003                <1>     mov al, errPnf  ;Null path error
   622 0000148D F9                  <1>     stc
   623                              <1>     return
    18                              <2> %%_ret:
    19 0000148E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   624                              <1> .notNull:
   625 0000148F 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   626 00001491 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   627 00001493 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   628 00001495 F9                  <1>     stc
   629                              <1>     return
    18                              <2> %%_ret:
    19 00001496 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   630                              <1> .driveOk:
   631 00001497 84C0                <1>     test al, al
   632 00001499 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   633                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   634 0000149B 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   635 0000149E 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   636 000014A0 50                  <1>     push rax    ;Save the drive letter
   637 000014A1 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   638 000014A2 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   639 000014A5 E84B470000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   640                              <1>     ;If al is a path separator, then this path is absolute.
   641 000014AA 58                  <1>     pop rax ;Get back the drive letter
   642 000014AB 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   643                              <1> .absoPath:
   644                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   645 000014AD 48FFC6              <1>     inc rsi
   646 000014B0 EB1A                <1>     jmp short .commonDir
   647                              <1> .curPath:
   648                              <1> ;This is only jumped to if we are relative the current drive
   649                              <1> ;rsi points to first char in path
   650                              <1> ;If this char is \ or /, then it is an absolute path.
   651 000014B2 8A05(0BC40300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   652 000014B8 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   653 000014BA 50                  <1>     push rax    ;Save the current drive number
   654 000014BB 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   655 000014BD E833470000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   656 000014C2 58                  <1>     pop rax ;Get back the current drive number
   657 000014C3 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   658                              <1> .relMain:
   659 000014C5 C605(D6C60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   660                              <1> .commonDir:
   661                              <1> ;rsi points to the start of the string we will be appending
   662                              <1> ;Fall through now
   663                              <1> pathWalk:
   664                              <1> ;Input: rsi must point to source buffer for path to expand
   665                              <1> ;       rdi must point to a destination buffer
   666                              <1> ;       al must contain the drive 1 based number
   667 000014CC E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   668 000014D1 727C                <1>     jc .badDriveExit
   669                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   670                              <1>     ; resolution
   671                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   672 000014D3 4889FB              <1>     mov rbx, rdi
   673                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   674 000014D6 803E00              <1>     cmp byte [rsi], 0
   675 000014D9 7512                <1>     jnz .mainlp
   676                              <1>     ;Setup dummy dir data
   677 000014DB 31C0                <1>     xor eax, eax
   678 000014DD 668905(47C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   679 000014E4 668905(4DC60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   680 000014EB EB68                <1>     jmp short .exitGood
   681                              <1> .mainlp:
   682 000014ED E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   683 000014F2 84C0                <1>     test al, al
   684 000014F4 7507                <1>     jnz .notFile
   685 000014F6 C605(DAC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   686                              <1> .notFile:
   687 000014FD 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   688 000014FE E856030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   689 00001503 58                  <1>     pop rax
   690 00001504 736B                <1>     jnc .deviceFound
   691 00001506 E816020000          <1>     call searchForPathspec  ;and search the directory
   692 0000150B 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   693 0000150D E865020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   694 00001512 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   695 00001514 84C0                <1>     test al, al ;Exit if this pathspec was a file
   696 00001516 743D                <1>     jz .exitGood
   697                              <1>     ;Here I have to take the cluster data from the found directory entry
   698                              <1>     ; and setup the search for the next pathspec portion
   699                              <1>     ;Copy necessary data from the current directory copy
   700 00001518 803D(07C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   701 0000151F 74CC                <1>     jz .mainlp
   702 00001521 0FB705(47C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   703 00001528 C1E010              <1>     shl eax, 10h    ;Shift it high
   704 0000152B 668B05(4DC60300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   705                              <1>     ;eax now has the cluster number of the search
   706 00001532 8905(59C70300)      <1>     mov dword [dirClustA], eax
   707 00001538 8905(55C70300)      <1>     mov dword [dirClustPar], eax
   708 0000153E 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   709 00001540 8905(5FC70300)      <1>     mov dword [dirEntry], eax
   710 00001546 668905(5DC70300)    <1>     mov word [dirSect], ax
   711 0000154D EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   712                              <1> .badDriveExit:
   713 0000154F B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   714                              <1>     return
    18                              <2> %%_ret:
    19 00001554 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   715                              <1> .exitGood:
   716 00001555 C605(D9C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   717                              <1> .exit:
   718                              <1>     return
    18                              <2> %%_ret:
    19 0000155C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   719                              <1> .checkDev:
   720                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   721                              <1> ; we are in \DEV pseudo dir
   722 0000155D F605(43C40300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   723 00001564 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   724                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   725 00001566 56                  <1>     push rsi
   726 00001567 57                  <1>     push rdi
   727 00001568 E87A020000          <1>     call checkDevPath
   728 0000156D 5F                  <1>     pop rdi
   729 0000156E 5E                  <1>     pop rsi
   730 0000156F 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   731                              <1> .deviceFound:
   732 00001571 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   733 00001573 C605(DAC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   734 0000157A C605(D9C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   735 00001581 EBD9                <1>     jmp short .exit   
   736                              <1> .nodev:
   737 00001583 F9                  <1>     stc
   738 00001584 EBD6                <1>     jmp short .exit
   739                              <1> 
   740                              <1> prepareDir:
   741                              <1> ;Used to transfer the current directory if it is necessary.
   742                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   743                              <1> ; relative
   744                              <1> ;Input: al = 1-based drive letter
   745                              <1> ;Output: rdi = Pointing at where to place chars from source string
   746                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   747 00001586 56                  <1>     push rsi
   748 00001587 E8A1490000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   749 0000158C E86E450000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   750 00001591 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   751 00001593 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS] 
   752 0000159A 57                  <1>     push rdi    ;Push CDS pointer on stack...
   753 0000159B E866420000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   754                              <1> .critExit:
   755 000015A0 E892490000          <1>     call dosCrit1Exit
   756 000015A5 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   757 000015A6 724A                <1>     jc .badDriveExit 
   758 000015A8 488B3D(F7C50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   759                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   760                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   761                              <1>     ;   terminating char (\, / or Null)
   762                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   763                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   764 000015AF 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   765 000015B5 753D                <1>     jnz .prepDirJoin
   766 000015B7 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   767 000015BD 7556                <1>     jnz .prepDirSubst
   768                              <1> .prepMain:
   769                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   770 000015BF F605(D6C60300)FF    <1>     test byte [spliceFlag], -1
   771 000015C6 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   772                              <1>     ;Else we copy the first two chars only (X:)
   773 000015C8 66A5                <1>     movsw  
   774 000015CA B05C                <1>     mov al, "\"
   775 000015CC AA                  <1>     stosb   ;Store the path separator and increment rdi
   776 000015CD 31C0                <1>     xor eax, eax    ;Get cluster 0
   777 000015CF EB1B                <1>     jmp short .prepDirExitSkip
   778                              <1> .prepLoop:
   779 000015D1 AC                  <1>     lodsb
   780 000015D2 84C0                <1>     test al, al ;If al was null, then we stop
   781 000015D4 7403                <1>     jz .prepDirExit
   782 000015D6 AA                  <1>     stosb
   783 000015D7 EBF8                <1>     jmp short .prepLoop
   784                              <1> .prepDirExit:
   785 000015D9 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   786 000015DD 7403                <1>     je .prepDirExitSkipPathsep
   787 000015DF B05C                <1>     mov al, "\"
   788 000015E1 AA                  <1>     stosb   ;Store the path separator and increment rdi
   789                              <1> .prepDirExitSkipPathsep:
   790 000015E2 488B35(E7C60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   791 000015E9 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   792                              <1> .prepDirExitSkip:
   793 000015EC E837000000          <1>     call .prepSetupDirSearchVars
   794 000015F1 F8                  <1>     clc ;Clear carry before exiting
   795                              <1> .badDriveExit:
   796 000015F2 5E                  <1>     pop rsi
   797                              <1>     return
    18                              <2> %%_ret:
    19 000015F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   798                              <1> .prepDirJoin:
   799 000015F4 51                  <1>     push rcx
   800 000015F5 56                  <1>     push rsi
   801 000015F6 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   802 000015FD B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   803                              <1> .prepDirJoin1:
   804 00001602 AC                  <1>     lodsb   ;Get the char
   805 00001603 84C0                <1>     test al, al ;Null char?
   806 00001605 740B                <1>     jz .prepDirJoin2
   807 00001607 E8E9450000          <1>     call swapPathSeparator
   808 0000160C 7404                <1>     jz .prepDirJoin2
   809 0000160E FFC1                <1>     inc ecx ;Accrue length to copy
   810 00001610 EBF0                <1>     jmp short .prepDirJoin1
   811                              <1> .prepDirJoin2:
   812 00001612 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   813 00001613 EB05                <1>     jmp short .prepDirCopy1
   814                              <1> .prepDirSubst:
   815 00001615 51                  <1>     push rcx
   816 00001616 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   817                              <1> .prepDirCopy1:
   818 0000161A F3A4                <1>     rep movsb   ;Copy the string over
   819 0000161C 59                  <1>     pop rcx
   820 0000161D F605(D6C60300)FF    <1>     test byte [spliceFlag], -1
   821 00001624 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   822 00001626 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   823                              <1> .prepSetupDirSearchVars:
   824                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   825                              <1> ;       rbp = DPB pointer for the device which will do transaction
   826 00001628 51                  <1>     push rcx
   827 00001629 31C9                <1>     xor ecx, ecx
   828 0000162B 66890D(5DC70300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   829 00001632 890D(5FC70300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   830 00001638 E8B9F5FFFF          <1>     call getFATtype ;Get type of fat
   831 0000163D 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   832 00001643 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   833                              <1>     ;FAT 32 here
   834 00001645 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   835 00001647 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   836 00001649 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   837                              <1> .psdsvExit:
   838 0000164C 8905(59C70300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   839 00001652 8905(55C70300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   840 00001658 59                  <1>     pop rcx
   841                              <1>     return 
    18                              <2> %%_ret:
    19 00001659 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   842                              <1> 
   843                              <1> copyPathspec:
   844                              <1> ;1) Copies a path portion from the source buffer to the destination
   845                              <1> ;2) Advances rsi to the next null, \ or /
   846                              <1> ;3) Expands all * to ?'s
   847                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   848                              <1> ;    next path separator and rdi pointing to the previous pathsep
   849                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   850                              <1> ;    with rsi moving to path separator
   851                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   852                              <1> ;
   853                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   854                              <1> ;           rdi = Points to where to store it
   855                              <1> ;
   856                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   857                              <1> ;           rdi = First char of next space to store next pathspec
   858                              <1> ;           al = Last char stored (either \ or NULL)
   859                              <1> ;           CF=NC = OK path
   860                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   861                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   862 0000165A 57                  <1>     push rdi    ;Save the pointer into the user buffer
   863 0000165B C605(66C40300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   864 00001662 488D3D(AEC60300)    <1>     lea rdi, fcbName
   865 00001669 57                  <1>     push rdi
   866 0000166A B903000000          <1>     mov ecx, 3
   867 0000166F B820202020          <1>     mov eax, "    " ;Four spaces
   868 00001674 F3AB                <1>     rep stosd   ;Store 12 spaces
   869 00001676 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   870                              <1> 
   871 00001677 488D1D(B9C60300)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   872 0000167E AC                  <1>     lodsb   ;Get first char from user path in al
   873 0000167F 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   874 00001681 745B                <1>     je .cpsDots
   875 00001683 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   876                              <1> ;First char is not a dot, so now check if starts with E5h? 
   877                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   878 00001686 3CE5                <1>     cmp al, 0E5h
   879 00001688 7506                <1>     jne .cpsMainLoop
   880 0000168A 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   881 0000168D B005                <1>     mov al, 05h
   882 0000168F AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   883                              <1> .cpsMainLoop:
   884 00001690 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   885 00001691 84C0                <1>     test al, al ;Is it the null char?
   886 00001693 7471                <1>     jz .cpsStore  ;If so, terminate immediately
   887 00001695 E85B450000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   888 0000169A 746A                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   889 0000169C 3C2E                <1>     cmp al, "." ;Filename extension separator
   890 0000169E 7420                <1>     je .cpsExtension
   891                              <1>     ;If we have space in the filename, we check to see if the next char is *
   892 000016A0 3C2A                <1>     cmp al, "*" ;Wildcard?
   893 000016A2 7430                <1>     je .cpsWildcard
   894 000016A4 3C3F                <1>     cmp al, "?" ;Good wildcard?
   895 000016A6 740C                <1>     je .store
   896 000016A8 E854450000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   897 000016AD E885460000          <1>     call checkCharValid ; and check it is a valid char
   898 000016B2 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   899                              <1> .store:
   900 000016B4 4839DF              <1>     cmp rdi, rbx
   901 000016B7 742D                <1>     je .cpsProcessName ;Skip any non-terminating chars
   902 000016B9 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   903 000016BA EBD4                <1>     jmp short .cpsMainLoop
   904                              <1> .cpsInvalidChar:
   905 000016BC 30C0                <1>     xor al, al
   906 000016BE EB26                <1>     jmp short .cpsProcessName
   907                              <1> .cpsExtension:
   908                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   909 000016C0 B903000000          <1>     mov ecx, 3 
   910 000016C5 488D3D(B6C60300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   911 000016CC 57                  <1>     push rdi
   912 000016CD B020                <1>     mov al, " "
   913 000016CF F3AA                <1>     rep stosb
   914 000016D1 5F                  <1>     pop rdi
   915 000016D2 EBBC                <1>     jmp short .cpsMainLoop
   916                              <1> .cpsWildcard:
   917 000016D4 B03F                <1>     mov al, "?"
   918                              <1> .cpsWildcardLp:
   919 000016D6 AA                  <1>     stosb
   920 000016D7 4839DF              <1>     cmp rdi, rbx
   921 000016DA 75FA                <1>     jne .cpsWildcardLp
   922 000016DC EBB2                <1>     jmp short .cpsMainLoop
   923                              <1> 
   924                              <1> .cpsDots:
   925 000016DE AA                  <1>     stosb   ;Store the first dot
   926 000016DF 8A06                <1>     mov al, byte [rsi]
   927 000016E1 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   928 000016E3 752B                <1>     jne .oneDotResolve
   929 000016E5 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   930                              <1> 
   931                              <1> .cpsProcessName:
   932                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   933 000016E6 84C0                <1>     test al, al 
   934 000016E8 741C                <1>     jz .cpsStore
   935 000016EA E806450000          <1>     call swapPathSeparator
   936 000016EF 7415                <1>     jz .cpsStore
   937                              <1> .cpsFindTerminator:
   938 000016F1 AC                  <1>     lodsb
   939 000016F2 84C0                <1>     test al, al 
   940 000016F4 7410                <1>     jz .cpsStore
   941 000016F6 E8FA440000          <1>     call swapPathSeparator
   942 000016FB 7409                <1>     jz .cpsStore
   943 000016FD E835460000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   944 00001702 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   945                              <1>     ;If we encounter a terminator, convert to 0
   946 00001704 30C0                <1>     xor al, al
   947                              <1> .cpsStore:
   948 00001706 488D3D(B9C60300)    <1>     lea rdi, fcbName+11
   949 0000170D AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   950 0000170E 5F                  <1>     pop rdi
   951                              <1>     return
    18                              <2> %%_ret:
    19 0000170F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   952                              <1> .oneDotResolve:
   953 00001710 488D3D(B9C60300)    <1>     lea rdi, fcbName+11
   954 00001717 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   955 00001718 5F                  <1>     pop rdi ;rdi points to fresh space
   956 00001719 48FFCF              <1>     dec rdi ;Point to the previous path separator
   957 0000171C AA                  <1>     stosb   ;Store this separator as if it is what we had before
   958                              <1>     return
    18                              <2> %%_ret:
    19 0000171D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   959                              <1> .cpsBadChar:
   960 0000171E 30C0                <1>     xor al, al  ;Convert the char to a terminator
   961                              <1>     return
    18                              <2> %%_ret:
    19 00001720 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   962                              <1> 
   963                              <1> searchForPathspec:
   964                              <1>     ;Now search the current directory for this filename
   965                              <1>     ;Find first using SDA ffBlock
   966                              <1>     ;If al = 0, we have final file name or directory name
   967                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   968                              <1>     ;Output: CF=CY => Error occured
   969                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   970                              <1>     ;                 FF block somewhat setup
   971                              <1>     ;Preserves rax, rbx, rsi,  rdi
   972 00001721 50                  <1>     push rax
   973 00001722 53                  <1>     push rbx
   974 00001723 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   975 00001724 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   976 00001725 0FB61D(42C40300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   977 0000172C 53                  <1>     push rbx    ;and push it onto the stack
   978                              <1> ;Evaluate whether we are searching for a file for a directory
   979 0000172D 84C0                <1>     test al, al
   980 0000172F 741D                <1>     jz .sfpPNfile
   981                              <1>     ;Fall if subdir
   982 00001731 488D3D(AEC60300)    <1>     lea rdi, fcbName
   983 00001738 B03F                <1>     mov al, "?" ;Search for wildcard
   984 0000173A B90B000000          <1>     mov ecx, 11
   985 0000173F F2AE                <1>     repne scasb
   986 00001741 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   987 00001743 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   988 00001745 C605(42C40300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   989 0000174C EB07                <1>     jmp short .sfpPNMain
   990                              <1> .sfpPNfile:
   991                              <1>     ;Here if we are searching for a file or directory as setup by search init
   992 0000174E 0FB605(D1C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   993                              <1> .sfpPNMain:
   994 00001755 803D(07C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   995 0000175C 7405                <1>     je .sfpPNNoDisk
   996 0000175E E83BF9FFFF          <1>     call searchDir
   997                              <1> .sfpPNNoDisk:
   998 00001763 5B                  <1>     pop rbx
   999 00001764 881D(42C40300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1000 0000176A 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1001 0000176B 5E                  <1>     pop rsi
  1002 0000176C 5B                  <1>     pop rbx
  1003 0000176D 58                  <1>     pop rax
  1004                              <1>     return
    18                              <2> %%_ret:
    19 0000176E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1005                              <1> .sfpPnf:
  1006 0000176F B803000000          <1>     mov eax, errPnf
  1007                              <1> .sfpErrExit:
  1008 00001774 F9                  <1>     stc ;Set carry
  1009 00001775 EBEC                <1>     jmp short .sfpPNNoDisk
  1010                              <1> 
  1011                              <1> addPathspecToBuffer:
  1012                              <1> ;Input: fcbName = Qualified pathname portion
  1013                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1014                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1015                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1016                              <1> ;rbx points to the "head of the path"
  1017 00001777 F605(07C60300)FF    <1>     test byte [skipDisk], -1
  1018                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000177E 75EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1019 00001780 803D(AEC60300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1020 00001787 741F                <1>     je .aptbPNDots
  1021                              <1>     ;Copy filename over to internal buffer
  1022 00001789 56                  <1>     push rsi    ;Save source pointer position
  1023 0000178A 488D35(AEC60300)    <1>     lea rsi, fcbName
  1024 00001791 E8FEFAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1025 00001796 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1026 00001799 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1027                              <1> .aptbOkExit:
  1028 0000179A 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1029 0000179D E853440000          <1>     call swapPathSeparator
  1030 000017A2 7402                <1>     jz .aptbPNexit
  1031 000017A4 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1032                              <1> .aptbPNexit:
  1033 000017A6 AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1034                              <1>     return
    18                              <2> %%_ret:
    19 000017A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1035                              <1> .aptbPNDots:
  1036                              <1> ;For one dot, we leave rdi where it is
  1037                              <1> ;For two dots, we search backwards for the previous "\"
  1038 000017A8 803D(AFC60300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1039 000017AF F8                  <1>     clc ;Ensure we clear CF if we return via here
  1040 000017B0 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1041                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017B3 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1042                              <1>     ;Here we have two dots
  1043                              <1>     ;Walk rdi backwards until a \ is found
  1044 000017B5 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1045 000017B8 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1046 000017BE 7420                <1>     je .aptbPnf
  1047 000017C0 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1048 000017C6 7418                <1>     je .aptbPnf
  1049                              <1> .aptbPNDotsLp:
  1050 000017C8 48FFCF              <1>     dec rdi
  1051 000017CB 803F5C              <1>     cmp byte [rdi], "\"
  1052 000017CE 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1053                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1054 000017D0 803D(07C60300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1055 000017D7 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1056 000017D9 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1057 000017DC 7202                <1>     jb .aptbPnf
  1058 000017DE EBBA                <1>     jmp short .aptbOkExit
  1059                              <1> ;.aptbSearchError:
  1060                              <1> ;    mov eax, errFnf
  1061                              <1> ;    jmp short .aptbErrExit
  1062                              <1> .aptbPnf:
  1063 000017E0 B803000000          <1>     mov eax, errPnf
  1064                              <1> .aptbErrExit:
  1065 000017E5 F9                  <1>     stc ;Set carry
  1066                              <1>     return
    18                              <2> %%_ret:
    19 000017E6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1067                              <1> 
  1068                              <1> checkDevPath:
  1069                              <1> ;Called only if the file/directory was not found on disk.
  1070                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1071                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1072                              <1> ; and check to see if it is a char device. If it is, build a directory
  1073                              <1> ; If it is not, proceed with the request fail.
  1074                              <1> ;
  1075                              <1> ;Input: rsi = Pointer to the next path spec
  1076                              <1> ;Output: CF=NC => Char device found, directory built
  1077                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1078 000017E7 803D(07C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1079                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017EE 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1080 000017F0 803D(B9C60300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1081 000017F7 7459                <1>     je .notOk                      
  1082                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1083 000017F9 50                  <1>     push rax
  1084 000017FA 48B844455620202020- <1>     mov rax, "DEV     "
  1084 00001803 20                  <1>
  1085 00001804 483905(AEC60300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1086 0000180B 58                  <1>     pop rax
  1087 0000180C 7544                <1>     jne .notOk
  1088 0000180E 813D(B6C60300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1088 00001816 205C                <1>
  1089 00001818 7538                <1>     jne .notOk
  1090                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1091                              <1>     ; looking for a device driver
  1092                              <1>     ;First append it to rdi 
  1093 0000181A B84445565C          <1>     mov eax, "DEV\" 
  1094 0000181F AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1095 00001820 57                  <1>     push rdi
  1096 00001821 488D3D(AEC60300)    <1>     lea rdi, fcbName
  1097 00001828 E81FFAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1098                              <1>     ;Returns in al the terminating char of the source string
  1099 0000182D 5F                  <1>     pop rdi
  1100                              <1>     ;If al is a pathsep, fail
  1101 0000182E E8C2430000          <1>     call swapPathSeparator
  1102 00001833 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1103 00001835 30C0                <1>     xor al, al
  1104 00001837 8805(B9C60300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1105 0000183D 53                  <1>     push rbx
  1106 0000183E E844000000          <1>     call checkIfCharDevice
  1107 00001843 5B                  <1>     pop rbx ;Don't need bh yet
  1108 00001844 720C                <1>     jc .notOk
  1109 00001846 E86D000000          <1>     call buildCharDir
  1110                              <1>     ;Here the device was determined to be a char device.
  1111                              <1>     ;A dummy directory entry was built for it.
  1112                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1113                              <1>     ; Do not Find Next!
  1114                              <1> .copyName:
  1115 0000184B E844FAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1116 00001850 F8                  <1>     clc
  1117                              <1>     return
    18                              <2> %%_ret:
    19 00001851 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1118                              <1> .notOk:
  1119 00001852 B802000000          <1>     mov eax, errFnf
  1120 00001857 F9                  <1>     stc
  1121                              <1>     return
    18                              <2> %%_ret:
    19 00001858 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1122                              <1> .charDevSearch:
  1123 00001859 53                  <1>     push rbx
  1124 0000185A E828000000          <1>     call checkIfCharDevice
  1125 0000185F 5B                  <1>     pop rbx ;Dont need bh yet
  1126 00001860 72F0                <1>     jc .notOk
  1127 00001862 E851000000          <1>     call buildCharDir
  1128 00001867 803D(B9C60300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1129 0000186E 750C                <1>     jne .cds2
  1130 00001870 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1131 00001874 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1132 00001876 48FFCF              <1>     dec rdi
  1133 00001879 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1134 0000187B AA                  <1>     stosb   ;Store that and let the dir write the filename
  1135                              <1> .cds2:
  1136 0000187C 803D(07C60300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1137 00001883 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1138 00001885 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1139                              <1>     return
    18                              <2> %%_ret:
    19 00001886 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1140                              <1> 
  1141                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1142                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1143                              <1> ; device driver chain. 
  1144                              <1> ;Output: CF=CY if not found
  1145                              <1> ;        CF=NC if found
  1146                              <1> ;           BH = Low byte of the device attribute word
  1147 00001887 50                  <1>     push rax
  1148 00001888 57                  <1>     push rdi
  1149 00001889 488B05(AEC60300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1150 00001890 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1151                              <1> .checkName:
  1152 00001897 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1153 0000189B 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1154 0000189D F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1155 000018A0 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1156 000018A2 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1157 000018A6 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1158                              <1> .walkList:
  1159 000018A8 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1160 000018AB 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1161 000018B2 75E3                <1>     jne .checkName  ;If no, rdi points to char device
  1162 000018B4 F9                  <1>     stc
  1163                              <1> .exit:
  1164 000018B5 5F                  <1>     pop rdi
  1165 000018B6 58                  <1>     pop rax
  1166                              <1>     return
    18                              <2> %%_ret:
    19 000018B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1167                              <1> 
  1168                              <1> buildCharDir:
  1169                              <1> ;Build a dummy directory entry for the char device in FCBName
  1170                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1171 000018B8 803D(07C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1172                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000018BF 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1173 000018C1 50                  <1>     push rax
  1174 000018C2 57                  <1>     push rdi
  1175 000018C3 C605(B9C60300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1176 000018CA 488D3D(33C60300)    <1>     lea rdi, curDirCopy
  1177                              <1>     ;Zero the directory copy (32 bytes)
  1178 000018D1 50                  <1>     push rax
  1179 000018D2 51                  <1>     push rcx
  1180 000018D3 57                  <1>     push rdi
  1181 000018D4 31C0                <1>     xor eax, eax    ;Zero rax
  1182 000018D6 B904000000          <1>     mov ecx, 4
  1183 000018DB F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1184 000018DE 5F                  <1>     pop rdi
  1185 000018DF 59                  <1>     pop rcx
  1186 000018E0 58                  <1>     pop rax
  1187 000018E1 488B05(AEC60300)    <1>     mov rax, qword [fcbName]
  1188 000018E8 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1189 000018EB B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1190 000018F0 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1191 000018F3 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1192                              <1>     ;Get date and time and set the write time in the directory entry
  1193 000018F7 E893100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1194 000018FC E879110000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1195 00001901 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1196 00001904 31C0                <1>     xor eax, eax
  1197 00001906 5F                  <1>     pop rdi
  1198 00001907 58                  <1>     pop rax
  1199                              <1>     return
    18                              <2> %%_ret:
    19 00001908 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1200                              <1> 
  1201                              <1> checkFailingComp:
  1202                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1203                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1204                              <1> ;Returns: ZF=ZE => Last path componant
  1205                              <1> ;         ZF=NZ => Not last path componant
  1206 00001909 50                  <1>     push rax
  1207 0000190A 8A05(B9C60300)      <1>     mov al, byte [fcbName + 11]
  1208 00001910 84C0                <1>     test al, al
  1209 00001912 58                  <1>     pop rax
  1210                              <1>     return
    18                              <2> %%_ret:
    19 00001913 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FAT/dirfun.asm"
    27                              <1> ;---------------------------------------------------:
    28                              <1> ;                   KERNEL FUNCTIONS                :
    29                              <1> ;---------------------------------------------------:
    30                              <1> makeDIR:           ;ah = 39h
    31                              <1> ;For make, the path must exist but the final componant must not exist.
    32                              <1> ;Input: rdx = Pointer to ASCIIZ string
    33 00001914 4889D7              <1>     mov rdi, rdx
    34 00001917 E80C430000          <1>     call strlen
    35 0000191C 81F940000000        <1>     cmp ecx, 64
    36 00001922 7607                <1>     jbe .okLength
    37                              <1> .badPath:
    38 00001924 B003                <1>     mov al, errPnf
    39 00001926 E963460000          <1>     jmp extErrExit
    40                              <1> .okLength:
    41 0000192B 4889D6              <1>     mov rsi, rdx
    42 0000192E E85F430000          <1>     call checkPathspecOK
    43 00001933 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    44                              <1> .pathOk:
    45 00001935 E8EA430000          <1>     call scanPathWC
    46 0000193A 72E8                <1>     jc .badPath ;Dont allow wildcards
    47                              <1>     ;Path is ok, now proceed
    48 0000193C 488D3D(F7C40300)    <1>     lea rdi, buffer1    ;Build the full path here
    49 00001943 E862FAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    50                              <1>     ;If the path exists, exit error
    51 00001948 0F8340460000        <1>     jnc extErrExit
    52                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    53 0000194E E8B6FFFFFF          <1>     call checkFailingComp
    54 00001953 0F8535460000        <1>     jnz extErrExit
    55                              <1>     ;So all is well, the new subdirectories name is in fcbName
    56                              <1>     ;The parent dir's directory entry is in the curDirCopy
    57 00001959 E810410000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    58                              <1>     ;returns in rdi the working cds ptr
    59 0000195E 7312                <1>     jnc .notNet
    60 00001960 B803110000          <1>     mov eax, 1103h
    61 00001965 CD4F                <1>     int 4fh
    62 00001967 0F8221460000        <1>     jc extErrExit
    63 0000196D E90E460000          <1>     jmp extGoodExit
    64                              <1> .notNet:
    65 00001972 E8B6450000          <1>     call dosCrit1Enter
    66                              <1>     ;Current dpb ptr is already set
    67                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    68                              <1>     ;First we make a dummy dir in curDirCopy
    69 00001977 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
    70 0000197E 488D35(AEC60300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    71 00001985 488D3D(33C60300)    <1>     lea rdi, curDirCopy
    72 0000198C 48A5                <1>     movsq   ;Copy the name over
    73 0000198E A5                  <1>     movsd
    74 0000198F E8FB0F0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    75 00001994 E8E1100000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    76 00001999 8905(41C60300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    77 0000199F 8905(49C60300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    78 000019A5 31C0                <1>     xor eax, eax
    79 000019A7 8905(4FC60300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    80 000019AD C605(3EC60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    81 000019B4 8B05(55C70300)      <1>     mov eax, dword [dirClustPar]
    82                              <1> .searchForDirSpace:
    83 000019BA 8905(59C70300)      <1>     mov dword [dirClustA], eax
    84 000019C0 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    85 000019C2 668905(5DC70300)    <1>     mov word [dirSect], ax
    86 000019C9 8905(5FC70300)      <1>     mov dword [dirEntry], eax
    87 000019CF E865040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    88 000019D4 7328                <1>     jnc .dirEntryFnd
    89 000019D6 813D(55C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    89 000019DE 0000                <1>
    90 000019E0 0F8443010000        <1>     je .bad ;Set CF and exit
    91 000019E6 E85F050000          <1>     call growDirectory  ;Increase directory size by 1 cluster
    92 000019EB 0F8238010000        <1>     jc .bad
    93 000019F1 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    94 000019F6 0F842D010000        <1>     je .bad
    95                              <1>     ;Else eax = Newly allocated cluster
    96 000019FC EBBC                <1>     jmp short .searchForDirSpace
    97                              <1> .dirEntryFnd:
    98                              <1> ;rdi points to current directory copy
    99                              <1> ;rsi now points to offset in the buffer to write the entry to
   100                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   101 000019FE 488B1D(13C70300)    <1>     mov rbx, qword [currBuff]
   102 00001A05 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   103                              <1>      
   104 00001A09 488905(1BC70300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   105 00001A10 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   106 00001A17 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   107 00001A1A 668935(23C70300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   108                              <1> ;Must now request a cluster and sanitise it
   109 00001A21 E8B8F2FFFF          <1>     call startNewChain  ;Get cluster number in eax
   110 00001A26 0F8202010000        <1>     jc .badExit
   111 00001A2C E84C050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax
   112 00001A31 0F82F7000000        <1>     jc .badExit
   113                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   114 00001A37 668905(4DC60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   115 00001A3E C1E810              <1>     shr eax, 10h    ;Get high word low
   116 00001A41 668905(47C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   117 00001A48 488B05(1BC70300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   118 00001A4F E8F2F0FFFF          <1>     call getBufForDirNoFile
   119 00001A54 0F82D4000000        <1>     jc .badExit
   120 00001A5A 0FB705(23C70300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   121 00001A61 488D35(33C60300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   122 00001A68 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   123 00001A6D B904000000          <1>     mov ecx, 4
   124 00001A72 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   125 00001A75 E841EFFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   126                              <1>     ;Now need to read in data sector and make two entries . and ..
   127 00001A7A 57                  <1>     push rdi
   128 00001A7B 51                  <1>     push rcx
   129 00001A7C B90B000000          <1>     mov ecx, 11
   130 00001A81 488D3D(33C60300)    <1>     lea rdi, curDirCopy
   131 00001A88 B020                <1>     mov al, " "
   132 00001A8A F3AA                <1>     rep stosb
   133 00001A8C 59                  <1>     pop rcx
   134 00001A8D 5F                  <1>     pop rdi
   135 00001A8E 48B82E000000000000- <1>     mov rax, "."
   135 00001A97 00                  <1>
   136 00001A98 8805(33C60300)      <1>     mov byte [curDirCopy], al
   137 00001A9E 0FB705(4DC60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   138 00001AA5 0FB715(47C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   139 00001AAC C605(3EC60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   140 00001AB3 C1E210              <1>     shl edx, 10h
   141 00001AB6 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   142 00001AB8 E8A7F1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   143 00001ABD E884F0FFFF          <1>     call getBufForDirNoFile
   144 00001AC2 726A                <1>     jc .badExit
   145                              <1>     ;rbx has buffer pointer now
   146 00001AC4 488D35(33C60300)    <1>     lea rsi, curDirCopy
   147 00001ACB 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   148 00001ACF B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   149 00001AD4 F348A5              <1>     rep movsq
   150                              <1>     ;Now create .. entry
   151 00001AD7 C605(34C60300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   152 00001ADE 8B05(55C70300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   153 00001AE4 E80DF1FFFF          <1>     call getFATtype
   154 00001AE9 81F902000000        <1>     cmp ecx, 2
   155 00001AEF 7207                <1>     jb .notFAT32
   156 00001AF1 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   157 00001AF4 7502                <1>     jne .notFAT32
   158 00001AF6 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   159                              <1> .notFAT32:
   160 00001AF8 668905(4DC60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   161 00001AFF C1E810              <1>     shr eax, 10h
   162 00001B02 668905(47C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   163 00001B09 488D35(33C60300)    <1>     lea rsi, curDirCopy
   164 00001B10 B904000000          <1>     mov ecx, 4
   165 00001B15 F348A5              <1>     rep movsq
   166 00001B18 E89EEEFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   167                              <1> .okExit:
   168                              <1>     ;AND WE ARE DONE!
   169 00001B1D E815440000          <1>     call dosCrit1Exit
   170 00001B22 31C0                <1>     xor eax, eax
   171 00001B24 E957440000          <1>     jmp extGoodExit
   172                              <1> .bad:
   173 00001B29 B805000000          <1>     mov eax, errAccDen
   174                              <1> .badExit:
   175 00001B2E E804440000          <1>     call dosCrit1Exit
   176 00001B33 E956440000          <1>     jmp extErrExit
   177                              <1> 
   178                              <1> removeDIR:         ;ah = 3Ah
   179 00001B38 4889D7              <1>     mov rdi, rdx
   180 00001B3B E8E8400000          <1>     call strlen
   181 00001B40 81F940000000        <1>     cmp ecx, 64
   182 00001B46 7607                <1>     jbe .okLength
   183                              <1> .badPath:
   184 00001B48 B003                <1>     mov al, errPnf
   185 00001B4A E93F440000          <1>     jmp extErrExit
   186                              <1> .okLength:
   187 00001B4F 4889D6              <1>     mov rsi, rdx
   188 00001B52 E83B410000          <1>     call checkPathspecOK
   189 00001B57 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   190                              <1> .pathOk:
   191 00001B59 E8C6410000          <1>     call scanPathWC
   192 00001B5E 72E8                <1>     jc .badPath ;Dont allow wildcards
   193                              <1>     ;Path is ok, now proceed
   194 00001B60 488D3D(F7C40300)    <1>     lea rdi, buffer1    ;Build the full path here
   195 00001B67 E83EF8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   196 00001B6C 72DA                <1>     jc .badPath    ;Path Doesn't exist
   197 00001B6E E8FB3E0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   198 00001B73 7312                <1>     jnc .notNet
   199 00001B75 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   200 00001B7A CD4F                <1>     int 4fh
   201 00001B7C 0F820C440000        <1>     jc extErrExit
   202 00001B82 E9F9430000          <1>     jmp extGoodExit
   203                              <1> .notNet:
   204 00001B87 E8A1430000          <1>     call dosCrit1Enter
   205 00001B8C 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
   206                              <1>     ;Now let use check that our directory is not the CDS currentdir
   207 00001B93 488B35(E7C60300)    <1>     mov rsi, qword [workingCDS]
   208 00001B9A 488D3D(F7C40300)    <1>     lea rdi, buffer1
   209 00001BA1 E882400000          <1>     call strlen ;Get the length of the full qualified name in ecx
   210 00001BA6 66890D(23C70300)    <1>     mov word [pathLen], cx
   211 00001BAD E88D400000          <1>     call strcmp ;Then compare rdi to CDS string
   212 00001BB2 750F                <1>     jnz .notEqual
   213 00001BB4 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   214 00001BB9 E879430000          <1>     call dosCrit1Exit
   215 00001BBE E9CB430000          <1>     jmp extErrExit
   216                              <1> .notEqual:
   217 00001BC3 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   218                              <1>     ;If the given path length is one more than the backslash offset
   219                              <1>     ; due to the terminating null, then the user is trying to delete the 
   220                              <1>     ; root dir. Fail this.
   221 00001BC6 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   222 00001BCA FFC1                <1>     inc ecx
   223 00001BCC 663B0D(23C70300)    <1>     cmp cx, word [pathLen]
   224 00001BD3 0F8415010000        <1>     je .accessDenied
   225 00001BD9 E86F020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   226                              <1>     ;for the entry in the sector we are hoping to delete
   227 00001BDE 0FB705(47C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   228 00001BE5 C1E010              <1>     shl eax, 10h
   229 00001BE8 0FB71D(4DC60300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   230 00001BEF 09D8                <1>     or eax, ebx
   231 00001BF1 8905(55C70300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   232 00001BF7 E868F0FFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   233 00001BFC E845EFFFFF          <1>     call getBufForDirNoFile
   234 00001C01 0F82EC000000        <1>     jc .exitBad
   235                              <1>     ;rbx points to buffer
   236 00001C07 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   237 00001C0B 48B82E202020202020- <1>     mov rax, ".       "
   237 00001C14 20                  <1>
   238 00001C15 483906              <1>     cmp qword [rsi], rax
   239 00001C18 0F85D0000000        <1>     jne .accessDenied
   240 00001C1E B42E                <1>     mov ah, "." ;Screw the partial stall
   241 00001C20 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   242 00001C24 0F85C4000000        <1>     jne .accessDenied
   243 00001C2A 4881C620000000      <1>     add rsi, fatDirEntry_size
   244 00001C31 488D3D(33C60300)    <1>     lea rdi, curDirCopy
   245 00001C38 B904000000          <1>     mov ecx, 4
   246 00001C3D F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   247                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   248                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   249 00001C40 488D3D(AEC60300)    <1>     lea rdi, fcbName
   250 00001C47 B03F                <1>     mov al, "?"
   251 00001C49 B90B000000          <1>     mov ecx, 11
   252 00001C4E F3AA                <1>     rep stosb   ;Store the pattern to search for
   253 00001C50 30C0                <1>     xor al, al  ;Store a terminating zero
   254 00001C52 AA                  <1>     stosb
   255 00001C53 8B05(55C70300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   256 00001C59 50                  <1>     push rax    ;Save on stack temporarily
   257 00001C5A 8905(59C70300)      <1>     mov dword [dirClustA], eax
   258 00001C60 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   259 00001C62 668905(5DC70300)    <1>     mov word [dirSect], ax
   260 00001C69 C705(5FC70300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   260 00001C71 0000                <1>
   261 00001C73 C605(D1C60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   262 00001C7A 58                  <1>     pop rax
   263 00001C7B E8E4EFFFFF          <1>     call getStartSectorOfCluster
   264 00001C80 E8E3EEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   265 00001C85 726C                <1>     jc .exitBad
   266 00001C87 E8F2F4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   267 00001C8C 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   268 00001C93 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   269 00001C99 E83DF4FFFF          <1>     call searchDir.rmdirEP
   270 00001C9E 734E                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   271                              <1>     ;Else, this is a empty dir, we can remove it
   272                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   273 00001CA0 488B05(1BC70300)    <1>     mov rax, qword [tempSect]
   274 00001CA7 E8BCEEFFFF          <1>     call getBufForDOS
   275 00001CAC 7245                <1>     jc .exitBad
   276 00001CAE E8CBF4FFFF          <1>     call adjustDosDirBuffer
   277 00001CB3 0FB705(23C70300)    <1>     movzx eax, word [entry]
   278 00001CBA 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   279 00001CBE 4801C6              <1>     add rsi, rax    
   280 00001CC1 8A05(DDC60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   281 00001CC7 8806                <1>     mov byte [rsi], al  ;Store delchar there
   282 00001CC9 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   283 00001CCD 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   284 00001CD1 E8E5ECFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   285 00001CD6 C1E210              <1>     shl edx, 10h
   286 00001CD9 09D0                <1>     or eax, edx
   287                              <1>     ;Now remove the FAT chain
   288 00001CDB E828F1FFFF          <1>     call unlinkFAT
   289 00001CE0 7211                <1>     jc .exitBad
   290 00001CE2 E850420000          <1>     call dosCrit1Exit
   291 00001CE7 31C0                <1>     xor eax, eax
   292 00001CE9 E992420000          <1>     jmp extGoodExit
   293                              <1> .accessDenied:
   294 00001CEE B805000000          <1>     mov eax, errAccDen
   295                              <1> .exitBad:
   296 00001CF3 F9                  <1>     stc
   297 00001CF4 E83E420000          <1>     call dosCrit1Exit
   298 00001CF9 E990420000          <1>     jmp extErrExit
   299                              <1> 
   300                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   301                              <1> ;Input: rdx = Pointer to ASCIIZ string
   302 00001CFE 4889D7              <1>     mov rdi, rdx
   303 00001D01 E8223F0000          <1>     call strlen
   304 00001D06 81F940000000        <1>     cmp ecx, 64
   305 00001D0C 7607                <1>     jbe .okLength
   306                              <1> .badPath:
   307 00001D0E B003                <1>     mov al, errPnf
   308 00001D10 E979420000          <1>     jmp extErrExit
   309                              <1> .okLength:
   310 00001D15 4889D6              <1>     mov rsi, rdx
   311 00001D18 E8753F0000          <1>     call checkPathspecOK
   312 00001D1D 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   313 00001D1F E854400000          <1>     call checkPathNet
   314 00001D24 74E8                <1>     jz .badPath ;Or Net paths
   315                              <1>     ;Path is ok, now proceed
   316 00001D26 488D3D(F7C40300)    <1>     lea rdi, buffer1    ;Build the full path here
   317 00001D2D E878F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   318 00001D32 0F8256420000        <1>     jc extErrExit   ;Exit with error code in eax
   319                              <1>     ;The path must've been ok, so now copy the path into the CDS
   320                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   321 00001D38 488B35(E7C60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   322 00001D3F 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   323 00001D45 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   324 00001D47 488D3D(53C60300)    <1>     lea rdi, tmpCDS
   325 00001D4E B95B000000          <1>     mov ecx, cds_size
   326 00001D53 F3A4                <1>     rep movsb
   327                              <1>     ;If the path is longer than 67, call it an invalid path
   328 00001D55 488D3D(F7C40300)    <1>     lea rdi, buffer1
   329 00001D5C E8C73E0000          <1>     call strlen ;Get the length of this path
   330 00001D61 81F943000000        <1>     cmp ecx, 67
   331 00001D67 77A5                <1>     ja .badPath
   332 00001D69 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   333 00001D6C 488D3D(53C60300)    <1>     lea rdi, tmpCDS
   334 00001D73 F3A4                <1>     rep movsb   ;Copy the path over
   335                              <1>     ;Now get the start cluster from the directory copy
   336 00001D75 0FB715(4DC60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   337 00001D7C 0FB705(47C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   338 00001D83 C1E010              <1>     shl eax, 10h
   339 00001D86 09D0                <1>     or eax, edx ;Add low bits to eax
   340 00001D88 8905(A0C60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   341 00001D8E 488D35(53C60300)    <1>     lea rsi, tmpCDS
   342 00001D95 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS]
   343 00001D9C B95B000000          <1>     mov ecx, cds_size
   344 00001DA1 E887410000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   345 00001DA6 F3A4                <1>     rep movsb
   346 00001DA8 E88A410000          <1>     call dosCrit1Exit
   347 00001DAD 31C0                <1>     xor eax, eax
   348 00001DAF E9CC410000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   349                              <1> .net:
   350                              <1> ;SDA Vars are setup for this request
   351 00001DB4 B805110000          <1>     mov eax, 1105h
   352 00001DB9 CD4F                <1>     int 4fh
   353 00001DBB 0F82CD410000        <1>     jc extErrExit
   354 00001DC1 E9BA410000          <1>     jmp extGoodExit
   355                              <1> getCurrentDIR:     ;ah = 47h
   356                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   357                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   358 00001DC6 88D0                <1>     mov al, dl  ;Move drive number into al
   359 00001DC8 E89B3D0000          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   360 00001DCD 0F82BB410000        <1>     jc extErrExit
   361                              <1> .okDrive:
   362 00001DD3 4889F7              <1>     mov rdi, rsi    ;Save destination in rdi
   363 00001DD6 E852410000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   364 00001DDB 488B35(E7C60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   365 00001DE2 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   366 00001DE6 FFC0                <1>     inc eax ;Go past the backslash
   367 00001DE8 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   368 00001DEB E8473E0000          <1>     call strcpy
   369 00001DF0 E842410000          <1>     call dosCrit1Exit
   370 00001DF5 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   371 00001DFA E981410000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   372                              <1> 
   373                              <1> trueName:          ;ah = 60h, get fully qualified name. Int 4Fh, AX=1221h
   374                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   375 00001DFF E88E3E0000          <1>     call checkPathspecOK    ;This preserves rsi
   376 00001E04 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   377 00001E06 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   378                              <1> .badPath:
   379 00001E08 B803000000          <1>     mov eax, errPnf
   380 00001E0D E97C410000          <1>     jmp extErrExit
   381                              <1> .pathspecOk:
   382 00001E12 57                  <1>     push rdi    ;Save the destination
   383 00001E13 488D3D(F7C40300)    <1>     lea rdi, buffer1    ;Build the full path here
   384 00001E1A E84BF5FFFF          <1>     call canonicaliseFileName
   385 00001E1F 5F                  <1>     pop rdi
   386 00001E20 0F8268410000        <1>     jc extErrExit
   387 00001E26 488D35(F7C40300)    <1>     lea rsi, buffer1
   388 00001E2D E8053E0000          <1>     call strcpy
   389 00001E32 31C0                <1>     xor eax, eax
   390 00001E34 E947410000          <1>     jmp extGoodExit
   391                              <1> 
   392                              <1> ;-----------------------------------
   393                              <1> ;    General Directory Routines    :
   394                              <1> ;-----------------------------------
   395                              <1> 
   396                              <1> findFreeDiskDirEntry:
   397                              <1> ;Find a space in the directory we are searching for a directory entry
   398                              <1> ;Accept first entry starting with a 0E5h or 00h
   399                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   400                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   401                              <1> ; be called for CDS's that are NOT net CDS's).
   402                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   403                              <1> ;       Directory vars must be set up for the directory we are searching in
   404                              <1> ;Output: CF=CY => Error, eax has error code
   405                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   406 00001E39 8A05(DDC60300)      <1>     mov al, byte [delChar]
   407 00001E3F 8805(AEC60300)      <1>     mov byte [fcbName], al
   408 00001E45 E854F2FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   409                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001E4A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001E4C C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   410                              <1> ;Free entry found, dir variables are set for the free entry. 
   411                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   412                              <1> getDiskDirectoryEntry:
   413                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   414                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   415                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   416                              <1> ;        qword [tempSect] = Disk sector number of directory
   417                              <1> ;        word [entry] = 32 byte offset into sector
   418                              <1> ;        CF=CY => Error, exit 
   419 00001E4D 53                  <1>     push rbx
   420 00001E4E 8B05(59C70300)      <1>     mov eax, dword [dirClustA]  
   421                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   422                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   423 00001E54 0FB71D(5DC70300)    <1>     movzx ebx, word [dirSect]
   424 00001E5B 85C0                <1>     test eax, eax
   425 00001E5D 7407                <1>     jz .skipCluster
   426 00001E5F E800EEFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   427 00001E64 EB0C                <1>     jmp short .skipOldFat
   428                              <1> .skipCluster:
   429 00001E66 55                  <1>     push rbp
   430 00001E67 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
   431 00001E6E 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   432 00001E71 5D                  <1>     pop rbp
   433                              <1> .skipOldFat:
   434 00001E72 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   435 00001E75 488905(1BC70300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   436 00001E7C E8E7ECFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   437 00001E81 5B                  <1>     pop rbx
   438                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E82 72C8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   439 00001E84 53                  <1>     push rbx
   440 00001E85 488B1D(13C70300)    <1>     mov rbx, qword [currBuff]
   441 00001E8C E8EDF2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   442                              <1>     ;Above function gets data buffer ptr in rsi
   443 00001E91 0FB705(5DC70300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   444 00001E98 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   445 00001E9C F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   446                              <1>     ; the current sector
   447 00001E9E C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   448 00001EA1 8B1D(5FC70300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   449 00001EA7 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   450 00001EA9 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   451 00001EAC 66891D(23C70300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   452 00001EB3 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   453 00001EB6 5B                  <1>     pop rbx
   454                              <1>     return
    18                              <2> %%_ret:
    19 00001EB7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> 
   457                              <1> updateDirectoryEntryForFile:    
   458                              <1> ;Updates the directory entry for disk files
   459                              <1> ;Called with:
   460                              <1> ;   [workingDPB] = DPB pointer for the disk device
   461                              <1> ;   [currentSFT] = Current SFT pointer
   462 00001EB8 50                  <1>     push rax
   463 00001EB9 53                  <1>     push rbx
   464 00001EBA 57                  <1>     push rdi
   465 00001EBB 55                  <1>     push rbp
   466                              <1> 
   467 00001EBC 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
   468 00001EC3 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
   469 00001ECA 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   470 00001ED0 751D                <1>     jnz .skipDT
   471                              <1>     ;Get date and time words and add them to the directory entry
   472 00001ED2 E8B80A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   473 00001ED7 726C                <1>     jc .exit  ;If we fail to get time/date, fail the request
   474                              <1>     ;Build date and time words
   475 00001ED9 E89C0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   476                              <1>     ;Update SFT fields
   477 00001EDE 66894713            <1>     mov word [rdi + sft.wTime], ax
   478 00001EE2 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   479 00001EE5 66894715            <1>     mov word [rdi + sft.wDate], ax
   480 00001EE9 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
   481                              <1> .skipDT:
   482                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   483                              <1> ; we skip all of this
   484 00001EEF 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   485 00001EF5 744E                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
   486 00001EF7 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   487 00001EFB E876ECFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   488 00001F00 7243                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
   489                              <1>     ;Now we write the changes to the sector
   490                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   491 00001F02 E8B4EAFFFF          <1>     call setBufferDirty
   492 00001F07 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   493 00001F0B 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   494 00001F0F C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   495 00001F12 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   496 00001F15 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   497 00001F18 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   498 00001F1B 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   499 00001F1F 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   500 00001F23 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   501 00001F27 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   502 00001F2B 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   503 00001F2F 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   504 00001F32 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   505 00001F36 C1E810              <1>     shr eax, 10h
   506 00001F39 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   507                              <1>     ;Directory sector updated and marked to be flushed to disk!
   508                              <1>     ;Now mark that the file has sectors not yet flushed to disk
   509                              <1>      
   510 00001F3D 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   511 00001F3E 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
   512 00001F44 9D                  <1>     popfq
   513                              <1> .exit:
   514 00001F45 5D                  <1>     pop rbp
   515 00001F46 5F                  <1>     pop rdi
   516 00001F47 5B                  <1>     pop rbx
   517 00001F48 58                  <1>     pop rax
   518                              <1>     return
    18                              <2> %%_ret:
    19 00001F49 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> growDirectory:
   521                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   522                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   523                              <1> ;                 eax = New Cluster number
   524                              <1> ;               TWO NON CF ERROR CASES.
   525                              <1> ;               If eax = -1 => disk full!
   526                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   527                              <1> ;        CF=CY => Something went wrong. Rip. 
   528 00001F4A 53                  <1>     push rbx
   529 00001F4B 51                  <1>     push rcx
   530 00001F4C 8B05(55C70300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   531 00001F52 85C0                <1>     test eax, eax
   532 00001F54 7424                <1>     jz .exit
   533 00001F56 E836EDFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   534 00001F5B 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   535 00001F5D B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   536 00001F62 E898EDFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   537 00001F67 7211                <1>     jc .exit
   538 00001F69 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   539 00001F6B E8CEEEFFFF          <1>     call readFAT
   540 00001F70 7208                <1>     jc .exit
   541 00001F72 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   542 00001F77 7201                <1>     jc .exit
   543 00001F79 F8                  <1>     clc
   544                              <1> .exit:
   545 00001F7A 59                  <1>     pop rcx
   546 00001F7B 5B                  <1>     pop rbx
   547                              <1>     return   
    18                              <2> %%_ret:
    19 00001F7C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   548                              <1> sanitiseCluster:
   549                              <1> ;Sanitises the cluster in eax to all zeros
   550                              <1> ;Does not move file pointers
   551                              <1> ;Currently, is only called to sanitise subdirectory clusters
   552                              <1> ;Input: eax = Cluster number
   553                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   554                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   555                              <1> ;        If CF=CY => Error, exit
   556 00001F7D 50                  <1>     push rax
   557 00001F7E 53                  <1>     push rbx
   558 00001F7F 51                  <1>     push rcx
   559 00001F80 52                  <1>     push rdx
   560 00001F81 56                  <1>     push rsi
   561 00001F82 55                  <1>     push rbp
   562 00001F83 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
   563 00001F8A E8D5ECFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   564 00001F8F 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   565 00001F93 FFC2                <1>     inc edx ;Make it a count of sectors
   566                              <1> .getSectorInCluster:
   567 00001F95 E88FEBFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   568 00001F9A 721E                <1>     jc .exitBad
   569 00001F9C 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   570 00001FA0 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   571 00001FA4 31C0                <1>     xor eax, eax
   572 00001FA6 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   573 00001FA8 E80EEAFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   574                              <1> 
   575 00001FAD FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   576 00001FAF 740A                <1>     jz .exit    ;Jump if we done
   577 00001FB1 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   578 00001FB5 48FFC0              <1>     inc rax ;Goto next sector in cluster
   579 00001FB8 EBDB                <1>     jmp short .getSectorInCluster
   580                              <1> .exitBad:
   581 00001FBA F9                  <1>     stc
   582                              <1> .exit:
   583 00001FBB 5D                  <1>     pop rbp
   584 00001FBC 5E                  <1>     pop rsi
   585 00001FBD 5A                  <1>     pop rdx
   586 00001FBE 59                  <1>     pop rcx
   587 00001FBF 5B                  <1>     pop rbx
   588 00001FC0 58                  <1>     pop rax
   589                              <1>     return
    18                              <2> %%_ret:
    19 00001FC1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/devio.asm"
    28                              <1> ;This file contains the primitive dev io function, which will be called 
    29                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    30                              <1> ; make requests for device IO.
    31                              <1> 
    32                              <1> mainCharIO:
    33                              <1> ;This is the main IO clearing function for Char IO.
    34                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    35                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    36                              <1> ;
    37                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    38                              <1> ;       ah = {0,..., 5}, a subfunction number
    39                              <1> ;       Function 0: Read Char (drvREAD)
    40                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    41                              <1> ;       Function 2: Write Char (drvWrite)
    42                              <1> ; In the case the below functions are called for Disk/Net files
    43                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    44                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    45                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    46                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    47                              <1> ;
    48                              <1> ; If and only if ah = 02h, al = Char to write to device
    49                              <1> ;
    50                              <1> ;
    51                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    52                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    53                              <1> ;                                           ZF = NZ => Device ready (not busy)
    54                              <1> ;                                               If ND read, AL = Next Char
    55                              <1> ; For Files/Net:
    56                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    57                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    58                              <1> ;           For Read and ND Read:
    59                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    60                              <1> ;               Read returns ^Z on EOF.
    61                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    62                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    63                              <1> ;
    64                              <1> ;All registers preserved EXCEPT for ax and flags
    65                              <1> 
    66                              <1> ;Reference Request Header
    67                              <1> ;Common Section:
    68                              <1> ;    .hdrlen resb 1  ;Length of the request header
    69                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    70                              <1> ;    .cmdcde resb 1  ;Command code
    71                              <1> ;    .status resw 1  ;Status word
    72                              <1> ;    .devptr resq 1  ;Reserved. Unused
    73                              <1> ;Below used by calls 0,1,2,5
    74                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    75                              <1> ;Below used by calls 0,2
    76                              <1> ;    .bufptr resq 1
    77                              <1> ;    .tfrlen resd 1
    78                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    79                              <1> ;    .strtsc resq 1
    80                              <1> ;    .desptr resq 1
    81                              <1> 
    82                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    83 00001FC2 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    84 00001FC3 488D1D(F5C40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    85 00001FCA 48891D(7EC40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    86 00001FD1 5B                  <1>     pop rbx
    87 00001FD2 C705(86C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    87 00001FDA 0000                <1>
    88 00001FDC 668905(F5C40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    89 00001FE3 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    90 00001FE9 0F85A1000000        <1>     jnz .notChar
    91 00001FEF 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    92 00001FF5 0F8495000000        <1>     jz .notChar
    93                              <1> ;Char devices only here
    94 00001FFB E8163F0000          <1>     call dosPushRegs    ;Save context here
    95 00002000 488D1D39E0FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    96 00002007 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    97 0000200A C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    98 0000200D 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    99 00002010 890D(70C40300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
   100                              <1>     ;Now set up cx for status word
   101 00002016 31C9                <1>     xor ecx, ecx
   102 00002018 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   103 0000201B 7506                <1>     jne .skipBsySet
   104 0000201D 81C900020000        <1>     or ecx, drvBsyStatus
   105                              <1> .skipBsySet:
   106 00002023 66870D(73C40300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   107                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   108 0000202A 488D1D(70C40300)    <1>     lea rbx, secdReqHdr
   109 00002031 E882360000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   110 00002036 668B3D(73C40300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   111 0000203D F7C700800000        <1>     test edi, drvErrStatus
   112 00002043 752D                <1>     jnz .error
   113                              <1> .ignoreRet:
   114 00002045 803D(72C40300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   115 0000204C 750C                <1>     jne .notNDRead
   116 0000204E 8A05(7DC40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   117 00002054 8805(F5C40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   118                              <1> .notNDRead:
   119 0000205A 8A25(74C40300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   120 00002060 F6D4                <1>     not ah
   121 00002062 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   122 00002065 E8953E0000          <1>     call dosPopRegs ;Get back the context
   123 0000206A 668B05(F5C40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   124                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00002071 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   125                              <1> .error:
   126                              <1>     ;cl has flags
   127 00002072 88CC                <1>     mov ah, cl
   128 00002074 E81D350000          <1>     call charDevErr
   129 00002079 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   130 0000207B 750A                <1>     jne .errorIgnore
   131                              <1>     ;Fallthrough => Retry
   132 0000207D E87D3E0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   133 00002082 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   134                              <1> .errorIgnore:
   135                              <1>     ;Clear the busy bit in the status word
   136 00002087 8025(74C40300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   137 0000208E EBB5                <1>     jmp short .ignoreRet
   138                              <1> .notChar:
   139                              <1> ;Just return with ZF=NZ for now
   140 00002090 50                  <1>     push rax
   141 00002091 31C0                <1>     xor eax, eax
   142 00002093 FEC0                <1>     inc al
   143 00002095 58                  <1>     pop rax
   144                              <1>     return
    18                              <2> %%_ret:
    19 00002096 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> 
   146                              <1> openSFT:
   147                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   148                              <1> ;Input: rdi = SFT pointer
   149 00002097 E87A3E0000          <1>     call dosPushRegs
   150 0000209C B00D                <1>     mov al, drvOPEN
   151 0000209E EB07                <1>     jmp short openCloseCommon
   152                              <1> closeSFT:
   153                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   154 000020A0 E8713E0000          <1>     call dosPushRegs
   155 000020A5 B00E                <1>     mov al, drvCLOSE
   156                              <1> openCloseCommon:
   157                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   158 000020A7 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   159 000020AD 7469                <1>     jz .exit    ;Exit if so
   160 000020AF F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   161 000020B3 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   162 000020B7 7512                <1>     jnz .charDev
   163                              <1>     ;Here a disk drive, rdi is a DPB ptr
   164 000020B9 803D(AEC30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   165 000020C0 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   166 000020C2 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   167 000020C5 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   168 000020C7 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   169                              <1> .charDev:
   170 000020CB 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   171 000020D1 7445                <1>     jz .exit    ;No, exit!
   172 000020D3 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   173 000020D6 488D1D(9AC40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   174 000020DD 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   175                              <1> .retryEP:
   176 000020E0 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   177 000020E3 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   178 000020E6 50                  <1>     push rax    ;Save the dword
   179 000020E7 E8D0350000          <1>     call goDriver
   180 000020EC 0FB73D(9DC40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   181 000020F3 F7C700800000        <1>     test edi, drvErrStatus
   182 000020F9 741C                <1>     jz .exitPop
   183                              <1>     ;Error here, check if char or block drive
   184 000020FB 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   185 00002101 7404                <1>     jz .blockError
   186                              <1>     ;Char error here
   187 00002103 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   188 00002105 EB04                <1>     jmp short .errorCmn
   189                              <1> .blockError:
   190 00002107 88C8                <1>     mov al, cl  ;Move drive number into al
   191 00002109 B406                <1>     mov ah, critData    ;Data on block dev error
   192                              <1> .errorCmn:
   193                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   194 0000210B E886340000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   195 00002110 B001                <1>     mov al, critRetry   ;al returns user response
   196 00002112 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   197 00002114 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   198 00002115 EBC9                <1>     jmp short .retryEP  ;Reset
   199                              <1> .exitPop:
   200 00002117 58                  <1>     pop rax    
   201                              <1> .exit:
   202 00002118 E8E23D0000          <1>     call dosPopRegs
   203                              <1>     return
    18                              <2> %%_ret:
    19 0000211D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    29                              <1> ;-----------------------------------------------------------------------:
    30                              <1> ;                  DOS default char functions live here                 :
    31                              <1> ;                                                                       :
    32                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    33                              <1> ;                                                                       :
    34                              <1> ;Rules for the naming of the DOS functions                              :
    35                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    36                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    37                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    38                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    39                              <1> ;                                                                       :
    40                              <1> ;-----------------------------------------------------------------------:
    41                              <1> 
    42                              <1> charIn_BE:     ;ah = 01h
    43                              <1> ;Return char that has been read and echoed in al
    44 0000211E E866010000          <1>     call charIn_B
    45 00002123 50                  <1>     push rax
    46 00002124 E804000000          <1>     call charOut_B.in    ;Output it to screen
    47 00002129 58                  <1>     pop rax
    48                              <1>     return
    18                              <2> %%_ret:
    19 0000212A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    49                              <1> 
    50                              <1> charOut_B:       ;ah = 02h
    51                              <1> ;Bspace is regular cursor left, does not insert a blank
    52 0000212B 88D0                <1>     mov al, dl
    53                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    54 0000212D 3C20                <1>     cmp al, asciiCaret
    55 0000212F 7277                <1>     jb .control
    56 00002131 3C7F                <1>     cmp al, DEL ;DEL char?
    57 00002133 7406                <1>     je .skipCurs
    58 00002135 FE05(A6C20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    59                              <1> .skipCurs:
    60 0000213B FE05(ACC30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    61 00002141 8025(ACC30300)03    <1>     and byte [vConErr], 3
    62 00002148 56                  <1>     push rsi
    63 00002149 7507                <1>     jnz .skipErrorCheck
    64 0000214B 50                  <1>     push rax
    65 0000214C E884020000          <1>     call vConCtrlCheck
    66 00002151 58                  <1>     pop rax
    67                              <1> .skipErrorCheck:
    68 00002152 E80C020000          <1>     call outputOnStdout
    69 00002157 5E                  <1>     pop rsi
    70 00002158 F605(A9C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    71                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000215F 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    72 00002161 53                  <1>     push rbx
    73 00002162 56                  <1>     push rsi
    74 00002163 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    75 00002168 E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    76 0000216D 7236                <1>     jc .exitPrintEcho
    77                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    78 0000216F 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    79 00002173 F7C300800000        <1>     test ebx, devRedirDev
    80 00002179 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    81 0000217B F7C380000000        <1>     test ebx, devCharDev
    82 00002181 7422                <1>     jz .exitPrintEcho
    83 00002183 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    84 00002188 E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    85 0000218D 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    86 0000218F 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    87 00002195 7407                <1>     jz .netSpool
    88 00002197 E8FB010000          <1>     call outputOnSFT
    89 0000219C EB07                <1>     jmp short .exitPrintEcho
    90                              <1> .netSpool:
    91 0000219E C605(A9C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    92                              <1> .exitPrintEcho:
    93 000021A5 5E                  <1>     pop rsi
    94 000021A6 5B                  <1>     pop rbx
    95                              <1>     return
    18                              <2> %%_ret:
    19 000021A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    96                              <1> .control:
    97 000021A8 3C0D                <1>     cmp al, CR
    98 000021AA 7425                <1>     je .newline
    99 000021AC 3C08                <1>     cmp al, BSP
   100 000021AE 742D                <1>     je .back
   101 000021B0 3C09                <1>     cmp al, TAB
   102 000021B2 7587                <1>     jne .skipCurs   ;Treat as normal
   103                              <1>     ;TAB key here
   104                              <1> .tab:
   105 000021B4 51                  <1>     push rcx
   106 000021B5 0FB60D(A6C20300)    <1>     movzx ecx, byte [vConCursPos]
   107 000021BC 80C9F8              <1>     or cl, ~7
   108 000021BF F6D9                <1>     neg cl
   109 000021C1 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   110                              <1> .tabloop:
   111 000021C4 B020                <1>     mov al, SPC
   112 000021C6 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   113 000021CB FEC9                <1>     dec cl
   114 000021CD 75F5                <1>     jnz .tabloop
   115                              <1> .stopTab:
   116 000021CF 59                  <1>     pop rcx
   117                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 000021D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   118                              <1> .newline:
   119 000021D1 C605(A6C20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   120 000021D8 E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   121                              <1> .back:
   122 000021DD FE0D(A6C20300)      <1>     dec byte [vConCursPos]
   123 000021E3 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   124                              <1> 
   125                              <1> auxIn_B:        ;ah = 03h
   126 000021E8 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   127 000021ED BB03000000          <1>     mov ebx, 3
   128 000021F2 E8A5020000          <1>     call getCharDevSFT
   129                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000021F7 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   130                              <1> .auxloop:
   131 000021F9 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   132 000021FB E8C2FDFFFF          <1>     call mainCharIO
   133 00002200 7408                <1>     jz .signalLoop
   134 00002202 30E4                <1>     xor ah, ah  ;Read the char in
   135 00002204 E8B9FDFFFF          <1>     call mainCharIO
   136                              <1>     return
    18                              <2> %%_ret:
    19 00002209 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   137                              <1> .signalLoop:
   138 0000220A E8A3010000          <1>     call callInt48h
   139 0000220F EBE8                <1>     jmp short .auxloop
   140                              <1> 
   141                              <1> auxOut_B:       ;ah = 04h
   142 00002211 53                  <1>     push rbx
   143 00002212 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   144 00002217 EB06                <1>     jmp short auxOutCmn
   145                              <1> prnOut_B:       ;ah = 05h
   146 00002219 53                  <1>     push rbx
   147 0000221A BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   148                              <1> auxOutCmn: ;Auxilliary output device common 
   149 0000221F 88D0                <1>     mov al, dl  ;Get the char into al
   150 00002221 50                  <1>     push rax
   151 00002222 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   152 00002227 58                  <1>     pop rax
   153 00002228 56                  <1>     push rsi
   154 00002229 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   155 0000222E 5E                  <1>     pop rsi
   156 0000222F 5B                  <1>     pop rbx
   157                              <1>     return
    18                              <2> %%_ret:
    19 00002230 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> directConIO:    ;ah = 06h
   160 00002231 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   161 00002233 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   162 00002235 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   163                              <1> ;Here is the read char direct function
   164 0000223B 31DB                <1>     xor ebx, ebx    
   165 0000223D E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   166                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002242 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   167 00002244 488B2D(54C40300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   168 0000224B B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   169 0000224D E870FDFFFF          <1>     call mainCharIO
   170 00002252 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   171 00002257 7507                <1>     jnz .readChar
   172 00002259 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   173 0000225D 30C0                <1>     xor al, al  ;Set caller return code to 0
   174                              <1>     return
    18                              <2> %%_ret:
    19 0000225F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> .readChar:
   176 00002260 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   177                              <1>     ;Fallthrough here to get the char at STDIN
   178                              <1> charIn:         ;ah = 07h
   179                              <1> ;Return char in al from STDIN without waiting
   180 00002264 31DB                <1>     xor ebx, ebx
   181 00002266 E831020000          <1>     call getCharDevSFT
   182                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000226B 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   183 0000226D B401                <1>     mov ah, 01  ;ND read for char
   184 0000226F E84EFDFFFF          <1>     call mainCharIO
   185 00002274 750B                <1>     jnz .getChar
   186 00002276 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   187 00002278 CD4A                <1>     int 4Ah
   188 0000227A E833010000          <1>     call callInt48h
   189 0000227F EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   190                              <1> .getChar:
   191                              <1>     ;Get the char in al and exit
   192 00002281 30E4                <1>     xor ah, ah
   193 00002283 E83AFDFFFF          <1>     call mainCharIO
   194                              <1>     return
    18                              <2> %%_ret:
    19 00002288 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   195                              <1> charIn_B:       ;ah = 08h
   196                              <1> ;Return char in al from STDIN
   197 00002289 56                  <1>     push rsi
   198                              <1> .readAgain:
   199 0000228A E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   200                              <1>     ;Also sets rsi to point to the device SFT for 
   201 0000228F 7543                <1>     jnz .pullChar
   202 00002291 803D(B7D90300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   203 00002298 7507                <1>     jne .skiplookahead
   204 0000229A B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   205 0000229C E821FDFFFF          <1>     call mainCharIO
   206                              <1> .skiplookahead:
   207 000022A1 B484                <1>     mov ah, 84h
   208 000022A3 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   209 000022A5 66813D(7EDA0300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   209 000022AD FF                  <1>
   210 000022AE 751B                <1>     jne .skipClockRead
   211 000022B0 E8613C0000          <1>     call dosPushRegs
   212 000022B5 F8                  <1>     clc ;Clear CF, write primary header to backup
   213 000022B6 E882000000          <1>     call swapPrimaryHeader
   214 000022BB E8CF060000          <1>     call readDateTimeRecord
   215 000022C0 F9                  <1>     stc ;Set CF, write backup to primary header
   216 000022C1 E877000000          <1>     call swapPrimaryHeader
   217 000022C6 E8343C0000          <1>     call dosPopRegs
   218                              <1> .skipClockRead:
   219 000022CB 66FF05(7EDA0300)    <1>     inc word [keybTicks]
   220 000022D2 EBB6                <1>     jmp short .readAgain
   221                              <1> .pullChar:
   222 000022D4 30E4                <1>     xor ah, ah
   223 000022D6 E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   224 000022DB 5E                  <1>     pop rsi
   225 000022DC 3C00                <1>     cmp al, NUL ;Is this the null char?
   226 000022DE 7507                <1>     jne .exit
   227                              <1>     ;We are mid extended ascii, prevent printer toggling
   228 000022E0 C605(7DDA0300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   229                              <1> .exit:
   230                              <1>     return
    18                              <2> %%_ret:
    19 000022E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> printString_B:      ;ah = 09h
   233 000022E8 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   234                              <1> .ps0:
   235 000022EB AC                  <1>     lodsb   ;Get char in al and inc rsi
   236 000022EC 3C24                <1>     cmp al, "$" ;End of string char?
   237                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000022EE 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   238 000022F0 E838FEFFFF          <1>     call charOut_B.in
   239 000022F5 EBF4                <1>     jmp short .ps0
   240                              <1> 
   241                              <1> checkStdinStatus:  ;ah = 0Bh
   242                              <1> ;Returns the status of the driver controlling vCon
   243 000022F7 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   244 000022FC B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   245                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000022FE 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   246 00002300 FEC8                <1>     dec al  ;Set al to -1 if char available
   247                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00002302 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   248                              <1> clearbuffDoFunc:   ;ah = 0Ch
   249                              <1> ;Clears any buffers and issues a console read command (the command in al)
   250                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   251 00002303 50                  <1>     push rax
   252 00002304 52                  <1>     push rdx
   253 00002305 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   254 00002307 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   255 0000230C 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   256 0000230E B404                <1>     mov ah, 04h ;Flush input buffers
   257 00002310 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   258                              <1> .skipFlush:
   259 00002315 5A                  <1>     pop rdx
   260 00002316 58                  <1>     pop rax
   261 00002317 88C4                <1>     mov ah, al  ;Move function number into ah
   262 00002319 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   263 0000231B 7507                <1>     jne .others
   264 0000231D 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   265 00002320 7412                <1>     jz .bad ;Yes, exit
   266 00002322 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   267                              <1> .others:
   268 00002324 3C01                <1>     cmp al, 01h
   269 00002326 740F                <1>     je .callFunction
   270 00002328 3C07                <1>     cmp al, 07h
   271 0000232A 740B                <1>     je .callFunction
   272 0000232C 3C08                <1>     cmp al, 08h
   273 0000232E 7407                <1>     je .callFunction
   274 00002330 3C0A                <1>     cmp al, 0Ah
   275 00002332 7403                <1>     je .callFunction
   276                              <1> .bad:
   277 00002334 30C0                <1>     xor al, al
   278                              <1>     return
    18                              <2> %%_ret:
    19 00002336 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   279                              <1> .callFunction:
   280 00002337 FA                  <1>     cli ;Prepare to swap stack pointer
   281                              <1>     ;The below address avoids "properly" reentering DOS
   282                              <1>     ;We simply reuse the function dispatch aspect. 
   283                              <1>     ;this means we dont trash the caller's register frame 
   284 00002338 E9F13A0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   285                              <1> ;------------------------
   286                              <1> ;  Primitive functions  :
   287                              <1> ;------------------------
   288                              <1> swapPrimaryHeader:
   289                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   290                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   291 0000233D 56                  <1>     push rsi
   292 0000233E 57                  <1>     push rdi
   293 0000233F 51                  <1>     push rcx
   294 00002340 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   294 00002349 00                  <1>
   295 0000234A 488D35(9AC40300)    <1>     lea rsi, primReqHdr
   296 00002351 488D3D(50DA0300)    <1>     lea rdi, bkupReqHdr
   297 00002358 7303                <1>     jnc .read
   298 0000235A 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   299                              <1> .read:
   300 0000235D F3A4                <1>     rep movsb   ;Swap
   301 0000235F 59                  <1>     pop rcx
   302 00002360 5F                  <1>     pop rdi
   303 00002361 5E                  <1>     pop rsi
   304                              <1>     return
    18                              <2> %%_ret:
    19 00002362 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> outputOnStdout:
   306                              <1> ;Input: al = Char to output
   307                              <1> ;Output: CF=CY, all good
   308 00002363 53                  <1>     push rbx
   309 00002364 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   310 00002369 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   311 0000236E 7217                <1>     jc .exit
   312 00002370 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   313 00002376 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   314 00002378 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   315 0000237C 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   316 00002382 7405                <1>     jz .notCharDevOrFast
   317 00002384 CD49                <1>     int 49h ;Fast output
   318                              <1> .exitOk:
   319 00002386 F8                  <1>     clc
   320                              <1> .exit:
   321 00002387 5B                  <1>     pop rbx
   322                              <1>     return
    18                              <2> %%_ret:
    19 00002388 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> .notCharDevOrFast:
   324 00002389 E809000000          <1>     call outputOnSFT
   325 0000238E 5B                  <1>     pop rbx
   326                              <1>     return
    18                              <2> %%_ret:
    19 0000238F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   327                              <1> 
   328                              <1> outputToHandle:
   329                              <1> ;Char to output must be in al
   330 00002390 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   331                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002395 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   332                              <1> outputOnSFT:
   333                              <1> ;Output char in al to SFT in rsi
   334                              <1> ;Waits until device is not busy to send char.
   335                              <1> ;Calls int 48h if device busy
   336 00002397 50                  <1>     push rax
   337 00002398 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   338 0000239A E823FCFFFF          <1>     call mainCharIO
   339 0000239F 58                  <1>     pop rax
   340 000023A0 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   341 000023A2 B402                <1>     mov ah, 02h ;Output char in al
   342 000023A4 E819FCFFFF          <1>     call mainCharIO
   343 000023A9 F8                  <1>     clc
   344                              <1>     return
    18                              <2> %%_ret:
    19 000023AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> .signalLoop:
   346 000023AB E802000000          <1>     call callInt48h
   347 000023B0 EBE5                <1>     jmp short outputOnSFT
   348                              <1> 
   349                              <1> callInt48h:
   350                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   351 000023B2 9C                  <1>     pushfq
   352 000023B3 F605(6EC40300)FF    <1>     test byte [int48Flag], -1
   353 000023BA 7417                <1>     jz .exit    ;If zero, not safe
   354 000023BC F605(E1C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   355 000023C3 750E                <1>     jnz .exit
   356                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   357 000023C5 FF35(6EC40300)      <1>     push qword [int48Flag] 
   358 000023CB CD48                <1>     int 48h
   359 000023CD 8F05(6EC40300)      <1>     pop qword [int48Flag]    ;Return original value
   360                              <1> .exit:
   361 000023D3 9D                  <1>     popfq
   362                              <1>     return
    18                              <2> %%_ret:
    19 000023D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> 
   365                              <1> vConCtrlCheck:
   366                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   367                              <1> ; the processing. 
   368                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   369                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   370                              <1> ;
   371                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   372                              <1> ;^S will pause screen processing until another key is processed by vCon input
   373                              <1> ;^P will toggle the printer echo feature of the vConsole
   374                              <1> ;
   375                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   376                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   377                              <1> ;
   378                              <1> ;Output: 
   379                              <1> ;   CF=CY : Error
   380                              <1> ;   CF=NC : ...
   381                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   382                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   383 000023D5 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   384 000023DA 53                  <1>     push rbx
   385 000023DB 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   386 000023DD E8BA000000          <1>     call getCharDevSFT
   387 000023E2 5B                  <1>     pop rbx
   388                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000023E3 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   389 000023E5 B401                <1>     mov ah, 01  ;Non destructively read CON
   390 000023E7 E8D6FBFFFF          <1>     call mainCharIO
   391 000023EC 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   392                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   393 000023EE 3C13                <1>     cmp al, DC3 ;^S ?
   394 000023F0 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   395 000023F2 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   396 000023F4 E8C9FBFFFF          <1>     call mainCharIO
   397 000023F9 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   398                              <1> .checkPrintOrExit:
   399 000023FE 3C10                <1>     cmp al, DLE ;Do we have ^P?
   400 00002400 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   401 00002402 3C03                <1>     cmp al, ETX ;Do we have ^C?
   402 00002404 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   403                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   404                              <1>     return 
    18                              <2> %%_ret:
    19 00002406 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   405                              <1> .printToggle:
   406 00002407 F615(A9C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   407 0000240D 53                  <1>     push rbx
   408 0000240E BB04000000          <1>     mov ebx, 4  ;PRN handle
   409 00002413 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   410 00002418 5B                  <1>     pop rbx
   411                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002419 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   412 0000241B 57                  <1>     push rdi
   413 0000241C 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   414 0000241F 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   415 00002425 741D                <1>     jz .notNet
   416 00002427 50                  <1>     push rax
   417 00002428 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   418 0000242D CD4F                <1>     int 4Fh
   419 0000242F 58                  <1>     pop rax
   420 00002430 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   421                              <1>     ;If something went wrong, turn off echo
   422 00002432 C605(A9C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   423 00002439 50                  <1>     push rax
   424 0000243A B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   425 0000243F CD4F                <1>     int 4Fh
   426 00002441 58                  <1>     pop rax
   427 00002442 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   428                              <1> .notNet:
   429                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   430                              <1> ; 0Dh or 0Eh
   431 00002444 803D(A9C30300)00    <1>     cmp byte [printEcho], 00
   432 0000244B 7507                <1>     jnz .echoOn
   433 0000244D E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   434 00002452 EB05                <1>     jmp short .printExit
   435                              <1> .echoOn:
   436 00002454 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   437                              <1> .printExit:
   438 00002459 5F                  <1>     pop rdi
   439                              <1>     return
    18                              <2> %%_ret:
    19 0000245A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   440                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   441 0000245B E852FFFFFF          <1>     call callInt48h
   442                              <1> .waitNextChar:   ;Here get next char
   443 00002460 B401                <1>     mov ah, 01h ;ND read
   444 00002462 E85BFBFFFF          <1>     call mainCharIO
   445 00002467 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   446                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   447 00002469 53                  <1>     push rbx
   448 0000246A 31DB                <1>     xor ebx, ebx
   449 0000246C E82B000000          <1>     call getCharDevSFT
   450 00002471 5B                  <1>     pop rbx
   451                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002472 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   452 00002474 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   453 00002476 E847FBFFFF          <1>     call mainCharIO
   454 0000247B 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   455 0000247D 7514                <1>     jnz .checkBreak2
   456 0000247F 803D(7DDA0300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   457 00002486 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   458 0000248C C605(7DDA0300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   459                              <1> .checkBreak2:
   460 00002493 3C03                <1>     cmp al, ETX
   461                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002495 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   462 00002497 E9B3310000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   463                              <1> 
   464                              <1> 
   465                              <1> getCharDevSFT:
   466                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   467                              <1> ;Input: bx = zero extended handle number
   468                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   469                              <1> ;        CF=CY => al = Error code, abort operation
   470 0000249C F605(6DC40300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   471 000024A3 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   472                              <1> .getSFT:
   473 000024A5 57                  <1>     push rdi
   474 000024A6 E8BC210000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   475 000024AB 4889FE              <1>     mov rsi, rdi
   476 000024AE 5F                  <1>     pop rdi
   477                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 000024AF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   478                              <1> .swap:
   479                              <1> ;workingSFT is only set for CON calls
   480 000024B0 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   481 000024B6 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   482 000024B8 488B35(F7C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   483 000024BF F8                  <1>     clc
   484                              <1>     return
    18                              <2> %%_ret:
    19 000024C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> ;------------------------
   487                              <1> ;   Utility functions   :
   488                              <1> ;------------------------
   489                              <1> printCaretASCII:
   490                              <1> ;Input: al = Char to print with a caret
   491                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   492                              <1> ;First check if the char should be careted, and then print normally if so
   493 000024C1 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   494 000024C3 0F8364FCFFFF        <1>     jae charOut_B.in
   495 000024C9 3C09                <1>     cmp al, TAB
   496 000024CB 0F845CFCFFFF        <1>     je charOut_B.in
   497 000024D1 3C15                <1>     cmp al, NAK
   498 000024D3 0F8454FCFFFF        <1>     je charOut_B.in
   499 000024D9 3C14                <1>     cmp al, DC4
   500 000024DB 0F844CFCFFFF        <1>     je charOut_B.in
   501 000024E1 50                  <1>     push rax
   502 000024E2 B05E                <1>     mov al, "^" ;Get caret in place
   503 000024E4 E844FCFFFF          <1>     call charOut_B.in
   504 000024E9 58                  <1>     pop rax
   505 000024EA 0440                <1>     add al, "@" ;Turn into an ASCII Char
   506 000024EC E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   507                              <1> printCRLF:
   508 000024F1 B00D                <1>     mov al, CR
   509 000024F3 E835FCFFFF          <1>     call charOut_B.in
   510 000024F8 B00A                <1>     mov al, LF
   511 000024FA E92EFCFFFF          <1>     jmp charOut_B.in
   512                              <1> 
   513                              <1> checkBreak:
   514                              <1> ;Reads bytes from CON if there are any bytes to read and 
   515                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   516 000024FF 803D(E2C30300)01    <1>     cmp byte [inDOS], 1
   517                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002506 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   518                              <1> ;Returns in al the keystroke that is available IF one is available
   519                              <1> ; or al=0 if no keystroke available
   520 00002508 53                  <1>     push rbx
   521 00002509 56                  <1>     push rsi
   522 0000250A 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   523                              <1>     ;Place command code and a zero status word at the same time
   524 00002511 C705(C6C40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   524 00002519 0000                <1>
   525                              <1>     ;Place the packet size in the hdrlen field
   526 0000251B C605(C4C40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   527 00002522 488D1D(C4C40300)    <1>     lea rbx, critReqHdr
   528 00002529 E88E310000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   529                              <1>     ;Check if the busy bit is set (No keystroke available)
   530 0000252E 66F705(C7C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   530 00002536 02                  <1>
   531 00002537 7405                <1>     jz .charFound
   532                              <1> .exit:
   533 00002539 30C0                <1>     xor al, al
   534 0000253B 5E                  <1>     pop rsi
   535 0000253C 5B                  <1>     pop rbx
   536                              <1>     return
    18                              <2> %%_ret:
    19 0000253D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   537                              <1> .charFound:
   538                              <1> ;Keystroke available, proceed
   539 0000253E 8A05(D1C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   540 00002544 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   541 00002546 75F1                <1>     jne .exit   ;If not equal exit
   542                              <1> ;Now we pull the char out of the buffer
   543 00002548 C705(C6C40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   543 00002550 0000                <1>
   544 00002552 C605(C4C40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   545                              <1>     ;Place pointers and number of chars
   546 00002559 C705(DAC40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   546 00002561 0000                <1>
   547                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   548 00002563 488D05(D1C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   549 0000256A 488905(D2C40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   550 00002571 E846310000          <1>     call goDriver   ;RSI and RBX as before
   551 00002576 E9D4300000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   552                              <1> 
   553                              <1> vConSwapDriver:
   554                              <1> ;Sets up the vCon to use the alternative SFT pointer
   555 0000257B 57                  <1>     push rdi
   556 0000257C C605(6DC40300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   557 00002583 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   558 0000258A 48893D(F7C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   559 00002591 5F                  <1>     pop rdi
   560                              <1>     return
    18                              <2> %%_ret:
    19 00002592 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   561                              <1> 
   562                              <1> vConRetDriver:
   563                              <1> ;Returns the original driver (sets flag down)
   564 00002593 C605(6DC40300)00    <1>     mov byte [vConDrvSwp], 0
   565                              <1>     return
    18                              <2> %%_ret:
    19 0000259A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   566                              <1> 
   567                              <1> ;--------------------------------------------------
   568                              <1> ;      Main Keyboard Buffered Input Function      :
   569                              <1> ;--------------------------------------------------
   570                              <1> buffCharInput_BE:  ;ah = 0Ah
   571                              <1> ;Buffer pointer in rdx
   572                              <1> ; byte [rdx + 0], buffer length
   573                              <1> ; byte [rdx + 1], number of chars in buffer
   574                              <1> ; byte [rdx + 2], buffer start
   575                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   576                              <1> ;Register use
   577                              <1> ; dh = Char offset in internal buffer
   578                              <1> ; dl = Buffer length
   579                              <1> ; bh = Char offset in user buffer
   580                              <1> ; bl = Number of chars already in the buffer
   581                              <1> ; rdi = Internal buffer
   582                              <1> ; rsi = User buffer
   583 0000259B 4889D6              <1>     mov rsi, rdx
   584 0000259E 66AD                <1>     lodsw   ;Get buffer metadata in ax
   585 000025A0 84C0                <1>     test al, al
   586                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000025A2 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   587 000025A4 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   588 000025A7 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   589 000025A9 7606                <1>     jbe .avoidcheck
   590 000025AB 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   591 000025AF 7402                <1>     je .functionKeyOk
   592                              <1> .avoidcheck:
   593 000025B1 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   594                              <1> .functionKeyOk:
   595 000025B3 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   596 000025B6 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   597                              <1> .breakEP:
   598 000025B8 8A05(A6C20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   599 000025BE 8805(A7C20300)      <1>     mov byte [vConCurCnt], al
   600 000025C4 56                  <1>     push rsi    ;Push user buffer address
   601 000025C5 488D3D(A8C20300)    <1>     lea rdi, vConBuffer
   602 000025CC C605(D8C60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   603                              <1> .mainLoop:
   604 000025D3 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   605 000025D8 3C0A                <1>     cmp al, LF
   606 000025DA 7505                <1>     jne .checkControlChars
   607                              <1> .mainLoop2:
   608 000025DC E8A8FCFFFF          <1>     call charIn_B
   609                              <1> .checkControlChars:
   610 000025E1 3C06                <1>     cmp al, ACK
   611 000025E3 74F7                <1>     je .mainLoop2   ;Get another char
   612 000025E5 3A0575DAFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   613 000025EB 0F8426010000        <1>     je .escape
   614 000025F1 3C7F                <1>     cmp al, DEL
   615 000025F3 0F8489000000        <1>     je .delete
   616 000025F9 3C08                <1>     cmp al, BSP
   617 000025FB 0F8481000000        <1>     je .delete
   618 00002601 3C17                <1>     cmp al, ETB
   619                              <1>     ;Add space for patched jump instructions
   620 00002603 9090909090          <1>     db 5 dup (90h)  ;NOP
   621 00002608 3C15                <1>     cmp al, NAK
   622 0000260A 9090909090          <1>     db 5 dup (90h)
   623 0000260F 3C0D                <1>     cmp al, CR
   624 00002611 744C                <1>     je .carriageReturn
   625 00002613 3C0A                <1>     cmp al, LF
   626 00002615 7461                <1>     je .lineFeed
   627 00002617 3A0544DAFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   628 0000261D 7429                <1>     je .break
   629                              <1> .checkIfCanInsert:
   630 0000261F 38D6                <1>     cmp dh, dl
   631 00002621 731C                <1>     jae .bufOflw
   632 00002623 AA                  <1>     stosb   ;Store the byte and increment rdi!
   633 00002624 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   634 00002626 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   635 0000262B 803D(D8C60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   636 00002632 75A8                <1>     jne .mainLoop2
   637                              <1>     ;IF not in insert mode, we fall here
   638                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   639                              <1>     ; or insert chars if needed.
   640 00002634 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   641 00002636 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   642 00002638 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   643 0000263B FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   644 0000263D EB9D                <1>     jmp short .mainLoop2
   645                              <1> .bufOflw:
   646                              <1> ;Buffer overflow
   647 0000263F B007                <1>     mov al, BEL ;Sound the bell
   648 00002641 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   649 00002646 EB94                <1>     jmp short .mainLoop2
   650                              <1> .break:
   651                              <1> ;Break, Place a "\", and do a CRLF
   652 00002648 B05C                <1>     mov al, "\"
   653 0000264A E8DEFAFFFF          <1>     call charOut_B.in
   654 0000264F 5E                  <1>     pop rsi ;Realign stack
   655                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   656 00002650 E89CFEFFFF          <1>     call printCRLF
   657                              <1>     ;Align to next tabstop
   658 00002655 E85AFBFFFF          <1>     call charOut_B.tab
   659 0000265A E959FFFFFF          <1>     jmp .breakEP
   660                              <1> .carriageReturn:
   661 0000265F AA                  <1>     stosb
   662 00002660 E8C8FAFFFF          <1>     call charOut_B.in
   663 00002665 5F                  <1>     pop rdi ;User buffer address was pushed 
   664 00002666 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   665 00002669 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   666                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   667 0000266B 488D35(A8C20300)    <1>     lea rsi, vConBuffer
   668 00002672 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   669 00002675 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   670                              <1>     return
    18                              <2> %%_ret:
    19 00002677 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   671                              <1> .lineFeed:
   672 00002678 E874FEFFFF          <1>     call printCRLF
   673 0000267D E95AFFFFFF          <1>     jmp .mainLoop2
   674                              <1> .delete:
   675 00002682 E805000000          <1>     call .removeChar
   676 00002687 E950FFFFFF          <1>     jmp .mainLoop2
   677                              <1> .removeChar:
   678 0000268C 84F6                <1>     test dh, dh ;Is char count 0?
   679 0000268E 741C                <1>     jz .normalChar   ;If so, skip going back!
   680 00002690 E868000000          <1>     call .vConErase
   681 00002695 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   682 00002697 3C20                <1>     cmp al, SPC
   683 00002699 7311                <1>     jae .normalChar
   684 0000269B 3C09                <1>     cmp al, TAB
   685 0000269D 7420                <1>     je .eraTab
   686 0000269F 3C15                <1>     cmp al, NAK
   687 000026A1 7409                <1>     je .normalChar
   688 000026A3 3C14                <1>     cmp al, DC4
   689 000026A5 7405                <1>     je .normalChar
   690 000026A7 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   691                              <1> .normalChar:
   692 000026AC 803D(D8C60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   693                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000026B3 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   694 000026B5 84FF                <1>     test bh, bh ;Beginning of user buffer?
   695                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000026B7 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   696 000026B9 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   697 000026BC FECF                <1>     dec bh
   698                              <1>     return
    18                              <2> %%_ret:
    19 000026BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   699                              <1> .eraTab:
   700                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   701                              <1> ; up to a tab stop worth of space chars printed
   702 000026BF 57                  <1>     push rdi
   703 000026C0 48FFCF              <1>     dec rdi
   704 000026C3 FD                  <1>     std ;Go backwards
   705 000026C4 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   706 000026C7 B020                <1>     mov al, SPC
   707 000026C9 53                  <1>     push rbx
   708 000026CA BB07000000          <1>     mov ebx, 7
   709 000026CF 67E30D              <1>     jecxz .onTabstop
   710                              <1> .scanString:
   711 000026D2 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   712 000026D3 7608                <1>     jbe .notChar    ;No, skip handling
   713 000026D5 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   714 000026D9 740A                <1>     je .tabChar
   715 000026DB FECB                <1>     dec bl
   716                              <1> .notChar:
   717 000026DD E2F3                <1>     loop .scanString
   718                              <1> .onTabstop:
   719 000026DF 2A1D(A7C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   720                              <1> .tabChar:
   721 000026E5 28F3                <1>     sub bl, dh  ;Same on tabstop
   722 000026E7 00D9                <1>     add cl, bl
   723 000026E9 80E107              <1>     and cl, 7
   724 000026EC 5B                  <1>     pop rbx
   725 000026ED 5F                  <1>     pop rdi
   726 000026EE FC                  <1>     cld
   727 000026EF 74BB                <1>     jz .normalChar
   728                              <1>     ;Now erase all the spaces placed on the vCon
   729                              <1> .vConDelTab:
   730 000026F1 E80C000000          <1>     call .vConEraseNoDec
   731 000026F6 E2F9                <1>     loop .vConDelTab
   732 000026F8 E9AFFFFFFF          <1>     jmp .normalChar
   733                              <1> .vConErase:
   734                              <1> ;Erase the char on the vCon
   735                              <1> ;Return through the output function
   736 000026FD 48FFCF              <1>     dec rdi ;Go back a space in the 
   737 00002700 FECE                <1>     dec dh  ;Decrement char count in the buffer
   738                              <1> .vConEraseNoDec:
   739 00002702 B008                <1>     mov al, BSP ;Move cursor back
   740 00002704 E824FAFFFF          <1>     call charOut_B.in
   741 00002709 B020                <1>     mov al, SPC ;Replace with a space
   742 0000270B E81DFAFFFF          <1>     call charOut_B.in
   743 00002710 B008                <1>     mov al, BSP ;Move cursor back again
   744 00002712 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   745                              <1> .escape:
   746                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   747                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   748                              <1> ; including the function keys.
   749 00002717 FF253BD9FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   750                              <1> .f2:
   751 0000271D E846000000          <1>     call .fCommon2
   752 00002722 EB0C                <1>     jmp short .fCommon
   753                              <1> .f3:
   754 00002724 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   755 00002727 28F9                <1>     sub cl, bh  ;Sub our current position
   756 00002729 EB05                <1>     jmp short .fCommon
   757                              <1> .f1:
   758 0000272B B901000000          <1>     mov ecx, 1  ;Get one char
   759                              <1> .fCommon:
   760 00002730 C605(D8C60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   761 00002737 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   762 00002739 0F849DFEFFFF        <1>     je .mainLoop2
   763 0000273F 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   764 00002741 0F8495FEFFFF        <1>     je .mainLoop2
   765                              <1>     ;Else, copy byte by byte, and retain char in al
   766 00002747 AC                  <1>     lodsb
   767 00002748 AA                  <1>     stosb
   768 00002749 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   769 0000274E FEC7                <1>     inc bh
   770 00002750 FEC6                <1>     inc dh
   771 00002752 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   772 00002754 E983FEFFFF          <1>     jmp .mainLoop2
   773                              <1> .f4:
   774 00002759 E80A000000          <1>     call .fCommon2
   775 0000275E 4801CE              <1>     add rsi, rcx
   776 00002761 00CF                <1>     add bh, cl
   777 00002763 E974FEFFFF          <1>     jmp .mainLoop2
   778                              <1> .fCommon2:
   779 00002768 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   780 0000276D 3A05EDD8FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   781 00002773 750B                <1>     jne .fnotEscape
   782                              <1>     ;Get another char if they typed escape and force it in the buffer
   783                              <1>     ; Do not return to caller
   784 00002775 E80FFBFFFF          <1>     call charIn_B
   785                              <1> .fforceExit:
   786 0000277A 59                  <1>     pop rcx ;Get original return address from stack
   787 0000277B E95CFEFFFF          <1>     jmp .mainLoop2
   788                              <1> .fnotEscape:
   789 00002780 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   790 00002783 28F9                <1>     sub cl, bh
   791 00002785 74F3                <1>     jz .fforceExit
   792 00002787 FFC9                <1>     dec ecx
   793 00002789 74EF                <1>     jz .fforceExit
   794 0000278B 57                  <1>     push rdi
   795 0000278C 4889F7              <1>     mov rdi, rsi
   796 0000278F 48FFC7              <1>     inc rdi
   797 00002792 F2AE                <1>     repne scasb ;Search for the char to start printing from
   798 00002794 5F                  <1>     pop rdi
   799 00002795 75E3                <1>     jne .fforceExit ;If char not found, return
   800 00002797 F6D1                <1>     not cl
   801 00002799 00D9                <1>     add cl, bl
   802 0000279B 28F9                <1>     sub cl, bh
   803                              <1>     return
    18                              <2> %%_ret:
    19 0000279D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   804                              <1> .f5:
   805 0000279E B040                <1>     mov al, "@"
   806 000027A0 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   807 000027A5 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   808 000027A6 57                  <1>     push rdi
   809 000027A7 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   810 000027AC 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   811 000027AD 88F3                <1>     mov bl, dh
   812 000027AF E99CFEFFFF          <1>     jmp .breakAlt
   813                              <1> .f6:
   814                              <1> ;If the user wants to insert a EOF, they can use F6
   815 000027B4 B01A                <1>     mov al, EOF
   816 000027B6 E964FEFFFF          <1>     jmp .checkIfCanInsert
   817                              <1> .f7:
   818                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   819 000027BB 8A059FD8FFFF        <1>     mov al, byte [extESC]
   820 000027C1 E959FEFFFF          <1>     jmp .checkIfCanInsert
   821                              <1> .toggleIns:
   822 000027C6 F615(D8C60300)      <1>     not byte [vConInsert]   ;Toggle
   823                              <1>     return
    18                              <2> %%_ret:
    19 000027CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   824                              <1> .eDel:
   825 000027CD 38DF                <1>     cmp bh, bl
   826 000027CF 0F8407FEFFFF        <1>     je .mainLoop2
   827 000027D5 FEC7                <1>     inc bh
   828 000027D7 48FFC6              <1>     inc rsi
   829 000027DA E9FDFDFFFF          <1>     jmp .mainLoop2
   830                              <1> 
   831                              <1> editKeys:
   832                              <1> ;Our Default Extended keys handler
   833 000027DF E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   834 000027E4 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   835 000027E9 57                  <1>     push rdi    ;Preserve rdi
   836 000027EA 488D3D71D8FFFF      <1>     lea rdi, extKeyTbl
   837 000027F1 57                  <1>     push rdi
   838                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   839                              <1>     ; offset of function from extKeyTbl
   840                              <1> .lp:
   841 000027F2 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   842 000027F3 7411                <1>     je .charFound
   843 000027F5 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   844 000027F7 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   845 000027FD 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   846 00002804 EBEC                <1>     jmp short .lp
   847                              <1> .charFound:
   848 00002806 59                  <1>     pop rcx ;Pop back the effective address of the table
   849 00002807 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   850 0000280B 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   851 0000280E 5F                  <1>     pop rdi
   852 0000280F FFE1                <1>     jmp rcx
    29                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    30                              <1> ;Major kernel date time functions and subroutines
    31                              <1> 
    32                              <1> getDate:           ;ah = 2Ah
    33 00002811 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    34 00002816 E8C0320000          <1>     call getUserRegs
    35 0000281B 668B15(67C40300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    36                              <1> ;    mov dh, byte [monthOfYear]
    37 00002822 0FB60D(69C40300)    <1>     movzx ecx, byte [years]
    38 00002829 8A05(6CC40300)      <1>     mov al, byte [dayOfWeek]
    39 0000282F 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    40 00002833 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    41                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002837 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                              <1> setDate:           ;ah = 2Bh
    43                              <1> ;	CX = year (1980-2099)
    44                              <1> ;   DH = month (1-12)
    45                              <1> ;	DL = day (1-31)
    46 00002838 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    47                              <1>     return
    18                              <2> %%_ret:
    19 0000283D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> getTime:           ;ah = 2Ch
    49 0000283E E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    50 00002843 E893320000          <1>     call getUserRegs
    51 00002848 668B0D(F1C40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    52 0000284F 668B15(F3C40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    53 00002856 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    54 0000285A 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    55                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 0000285E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    56                              <1> setTime:           ;ah = 2Dh
    57                              <1> ;   CH = hour (0-23)
    58                              <1> ;	CL = minutes (0-59)
    59                              <1> ;	DH = seconds (0-59)
    60                              <1> ;	DL = hundredths (0-99)
    61 0000285F 80FD17              <1>     cmp ch, 23
    62 00002862 7749                <1>     ja .exitBad
    63 00002864 80F93B              <1>     cmp cl, 59
    64 00002867 7744                <1>     ja .exitBad
    65 00002869 80FE3B              <1>     cmp dh, 59
    66 0000286C 773F                <1>     ja .exitBad
    67 0000286E 80FA63              <1>     cmp dl, 99
    68 00002871 773A                <1>     ja .exitBad
    69                              <1> ;Now we read date (updating internal count if necessary)
    70 00002873 E817010000          <1>     call readDateTimeRecord
    71 00002878 488D1D(EFC40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    72 0000287F 0FB705(6AC40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    73 00002886 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    74 00002889 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    75 0000288D 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    76 00002891 B906000000          <1>     mov ecx, 6
    77 00002896 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    78 00002899 E8B3300000          <1>     call primReqWriteSetup   ;rbx now points to request header
    79 0000289E 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    80 000028A5 E8122E0000          <1>     call goDriver
    81 000028AA 30C0                <1>     xor al, al
    82                              <1>     return
    18                              <2> %%_ret:
    19 000028AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> .exitBad:
    84 000028AD B0FF                <1>     mov al, -1
    85                              <1>     return
    18                              <2> %%_ret:
    19 000028AF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> ;------------------------
    87                              <1> ;   Utility functions   :
    88                              <1> ;------------------------
    89                              <1> writeDate:
    90 000028B0 6681F97800          <1>     cmp cx, 120
    91 000028B5 0F83D1000000        <1>     jae .exitBad
    92 000028BB 80FE0C              <1>     cmp dh, 12
    93 000028BE 0F87C8000000        <1>     ja .exitBad
    94 000028C4 80FA1F              <1>     cmp dl, 31
    95 000028C7 0F87BF000000        <1>     ja .exitBad
    96 000028CD 668915(67C40300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    97                              <1>     ;mov byte [monthOfYear], dh
    98 000028D4 880D(69C40300)      <1>     mov byte [years], cl    ;Save the years count
    99 000028DA E878010000          <1>     call setDaysInFeb   ;Set days in february this year
   100 000028DF 88CD                <1>     mov ch, cl ;Get years count in ch
   101 000028E1 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   102 000028E4 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   103 000028E7 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   104 000028EA BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   105 000028EF F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   106                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   107 000028F1 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   108 000028F4 67E316              <1>     jecxz .addDay    ;Skip adding years
   109 000028F7 056E010000          <1>     add eax, 366    ;First add for a leap year
   110                              <1> .addYears:
   111 000028FC FFC9                <1>     dec ecx
   112 000028FE 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   113 00002901 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   114 00002906 EBF4                <1>     jmp short .addYears
   115                              <1> .addLeap:
   116 00002908 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   117                              <1> .addDay:
   118 0000290D 89C2                <1>     mov edx, eax    ;Save this number in edx
   119                              <1>     ;Now to add day offset
   120 0000290F 0FB60D(68C40300)    <1>     movzx ecx, byte [monthOfYear]
   121 00002916 488D3566D7FFFF      <1>     lea rsi, monthsTbl
   122                              <1> .addDaysInMonth:
   123 0000291D FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   124 0000291F 67E308              <1>     jecxz .addMonthOffset
   125 00002922 AC                  <1>     lodsb   ;Get the number of days in the month in al
   126 00002923 0FB6C0              <1>     movzx eax, al
   127 00002926 01C2                <1>     add edx, eax
   128 00002928 EBF3                <1>     jmp short .addDaysInMonth
   129                              <1> .addMonthOffset:
   130 0000292A 0FB60D(67C40300)    <1>     movzx ecx, byte [dayOfMonth]
   131 00002931 FFC9                <1>     dec ecx
   132 00002933 01CA                <1>     add edx, ecx    ;Add month offset
   133                              <1>     ;edx has the number of days since 01/01/1980
   134 00002935 668915(6AC40300)    <1>     mov word [daysOffset], dx   ;Store!
   135                              <1> ;Now read and then write CLOCKrecrd
   136 0000293C 488D1D(EFC40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   137 00002943 B906000000          <1>     mov ecx, 6
   138 00002948 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   139 0000294B E80C300000          <1>     call primReqReadSetup   ;rbx now points to request header
   140 00002950 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   141 00002957 E8602D0000          <1>     call goDriver
   142                              <1> ;Now we change daycount and write it back
   143 0000295C 0FB705(6AC40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   144 00002963 488D1D(EFC40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   145 0000296A 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   146 0000296D B906000000          <1>     mov ecx, 6
   147 00002972 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   148 00002975 E8D72F0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   149 0000297A 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   150 00002981 E8362D0000          <1>     call goDriver
   151 00002986 E8AE000000          <1>     call setDayofWeek
   152                              <1>     return
    18                              <2> %%_ret:
    19 0000298B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> .exitBad:
   154 0000298C B0FF                <1>     mov al, -1
   155                              <1>     return
    18                              <2> %%_ret:
    19 0000298E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> 
   157                              <1> readDateTimeRecord:
   158                              <1> ;Will read the clock using the primary request header
   159                              <1> ;Preserves all regs except eax and flags
   160 0000298F 53                  <1>     push rbx
   161 00002990 51                  <1>     push rcx
   162 00002991 52                  <1>     push rdx
   163 00002992 56                  <1>     push rsi
   164 00002993 55                  <1>     push rbp
   165                              <1> 
   166 00002994 66C705(7EDA0300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   166 0000299C 00                  <1>
   167 0000299D 488D1D(EFC40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   168 000029A4 B906000000          <1>     mov ecx, 6
   169 000029A9 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   170                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   171                              <1> ; rbx = Data storage buffer ptr
   172                              <1> ; ecx = Number of sectors to transfer
   173                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   174 000029AC E8AB2F0000          <1>     call primReqReadSetup   ;rbx now points to request header
   175 000029B1 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   176 000029B8 E8FF2C0000          <1>     call goDriver
   177 000029BD 0FB705(EFC40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   178                              <1> ;Here we have:  ax = Days since 1/1/1980
   179                              <1> ;Updates the internal date fields
   180                              <1> ;Internal time fields are in the clock record
   181                              <1> ;So now we check if the number of days since 1980 are the same.
   182                              <1> ;If so, we can skip updating.
   183 000029C4 663B05(6AC40300)    <1>     cmp ax, word [daysOffset]
   184 000029CB 7466                <1>     je .exit    ;Return if equal
   185 000029CD 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   186 000029D2 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   187 000029D4 668905(6AC40300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   188                              <1>     ;Now want to update years, month and day fields
   189                              <1>     ;ax has the number of days since 01/01/1980
   190                              <1>     ;Get days in a 4 year period
   191 000029DB BBB5050000          <1>     mov ebx, 365*4 + 1
   192 000029E0 31D2                <1>     xor edx, edx
   193 000029E2 89D1                <1>     mov ecx, edx  ;Zero ecx
   194 000029E4 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   195                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   196                              <1>     ;edx has offset into current 4 year bunch
   197 000029E6 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   198 000029EB 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   199 000029ED 7210                <1>     jb .foundBunch
   200 000029EF 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   201 000029F1 FFC1                <1>     inc ecx
   202 000029F3 FFCB                <1>     dec ebx ;Number of days in a normal year
   203                              <1> .findBunch:
   204 000029F5 39DA                <1>     cmp edx, ebx
   205 000029F7 7206                <1>     jb .foundBunch
   206 000029F9 29DA                <1>     sub edx, ebx
   207 000029FB FFC1                <1>     inc ecx
   208 000029FD EBF6                <1>     jmp short .findBunch
   209                              <1> .foundBunch:
   210                              <1>     ;If ecx = 0, february has 29 days!
   211                              <1>     ;eax has number of four year bunches elapsed since 1980
   212 000029FF C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   213 00002A02 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   214                              <1>     ;ecx now has the number of years since 1980
   215 00002A04 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   216                              <1> ;edx has number of days into the year we are in
   217                              <1> ;eax has number of days in Feb for this year
   218 00002A09 488D3573D6FFFF      <1>     lea rsi, monthsTbl
   219 00002A10 31C9                <1>     xor ecx, ecx    ;Use as month counter
   220                              <1> .monthSearch:
   221 00002A12 FFC1                <1>     inc ecx ;Start from 1
   222 00002A14 AC                  <1>     lodsb   ;Get value in al and inc rsi
   223 00002A15 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   224 00002A18 39C2                <1>     cmp edx, eax
   225 00002A1A 7204                <1>     jb .monthFound
   226 00002A1C 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   227 00002A1E EBF2                <1>     jmp short .monthSearch
   228                              <1> .monthFound:
   229                              <1>     ;cl has the month (01h-0Ch)
   230                              <1>     ;dl has the day of the month - 1
   231 00002A20 FFC2                <1>     inc edx
   232 00002A22 880D(68C40300)      <1>     mov byte [monthOfYear], cl
   233 00002A28 8815(67C40300)      <1>     mov byte [dayOfMonth], dl
   234 00002A2E E806000000          <1>     call setDayofWeek
   235                              <1> .exit:
   236 00002A33 5D                  <1>     pop rbp
   237 00002A34 5E                  <1>     pop rsi
   238 00002A35 5A                  <1>     pop rdx
   239 00002A36 59                  <1>     pop rcx
   240 00002A37 5B                  <1>     pop rbx
   241                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 00002A38 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> 
   243                              <1> setDayofWeek:
   244                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   245 00002A39 0FB705(6AC40300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   246 00002A40 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   247                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   248 00002A45 31D2                <1>     xor edx, edx
   249 00002A47 B907000000          <1>     mov ecx, 7   
   250 00002A4C F7F1                <1>     div ecx  ;Get remainder in dl
   251 00002A4E 8815(6CC40300)      <1>     mov byte [dayOfWeek], dl
   252                              <1> ;Set ZF to indicate all ok
   253 00002A54 31C0                <1>     xor eax, eax
   254                              <1>     return
    18                              <2> %%_ret:
    19 00002A56 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   255                              <1> 
   256                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   257                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   258                              <1> ;Input: cl = Year - 1980
   259                              <1> ;Output: al = Number of days in February
   260 00002A57 880D(69C40300)      <1>     mov byte [years], cl    ;Save this figure
   261 00002A5D F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   262 00002A60 51                  <1>     push rcx
   263 00002A61 57                  <1>     push rdi
   264 00002A62 B81C000000          <1>     mov eax, 28  ;Usual days in february
   265 00002A67 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   266 00002A6C 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   267 00002A6F 488D3D0ED6FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   268 00002A76 AA                  <1>     stosb   ;Store the word in rdi
   269 00002A77 5F                  <1>     pop rdi
   270 00002A78 59                  <1>     pop rcx
   271                              <1>     return
    18                              <2> %%_ret:
    19 00002A79 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   272                              <1> 
   273                              <1> getDirDTwords:
   274                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   275                              <1> ; High word of eax = Date
   276                              <1> ; Low word of eax = Time
   277                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   278                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   279                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   280                              <1> 
   281                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   282                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   283                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   284                              <1> ;Preserves all registers except eax
   285 00002A7A 53                  <1>     push rbx
   286 00002A7B 0FB61D(F4C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   287 00002A82 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   288 00002A84 89D8                <1>     mov eax, ebx
   289 00002A86 0FB61D(F1C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   290 00002A8D C1E305              <1>     shl ebx, 5
   291 00002A90 09D8                <1>     or eax, ebx
   292 00002A92 0FB61D(F2C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   293 00002A99 C1E30B              <1>     shl ebx, 11
   294 00002A9C 09D8                <1>     or eax, ebx
   295 00002A9E 0FB61D(67C40300)    <1>     movzx ebx, byte [dayOfMonth]
   296 00002AA5 C1E310              <1>     shl ebx, 16
   297 00002AA8 09D8                <1>     or eax, ebx
   298 00002AAA 0FB61D(68C40300)    <1>     movzx ebx, byte [monthOfYear]
   299 00002AB1 C1E315              <1>     shl ebx, 21
   300 00002AB4 09D8                <1>     or eax, ebx
   301 00002AB6 0FB61D(69C40300)    <1>     movzx ebx, byte [years]
   302 00002ABD C1E319              <1>     shl ebx, 25
   303 00002AC0 09D8                <1>     or eax, ebx
   304 00002AC2 5B                  <1>     pop rbx
   305                              <1>     return
    18                              <2> %%_ret:
    19 00002AC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   306                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   307                              <1> ;Returns edx = time
   308                              <1> ;        eax = date
   309                              <1> ; Formally ax and dx but we clear the upper words
   310 00002AC4 E8C6FEFFFF          <1>     call readDateTimeRecord
   311 00002AC9 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   312 00002ACE 31D2                <1>     xor edx, edx
   313 00002AD0 6689C2              <1>     mov dx, ax  ;Save time
   314 00002AD3 C1E810              <1>     shr eax, 10h    ;Get date into rax
   315                              <1>     return
    18                              <2> %%_ret:
    19 00002AD6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    31                              <1> ;FCB functions.
    32                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
    33                              <1> ;On FAT 32 volumes things are a bit more restricted.
    34                              <1> 
    35                              <1> ;The following functions ARE currently supported for general FAT 32 files:
    36                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
    37                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
    38                              <1> ;   parseFilename       (I mean, this function is useful anyway)
    39                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    40                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    41                              <1> ;   findNextFileFCB     (ditto the above)
    42                              <1> 
    43                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    44                              <1> ;   openFCB
    45                              <1> ;   closeFCB
    46                              <1> ;   createFCB
    47                              <1> ;   randomReadFCB
    48                              <1> ;   randomWriteFCB
    49                              <1> ;   randBlockReadFCB
    50                              <1> ;   randBlockWriteFCB
    51                              <1> ;   sequentialReadFCB
    52                              <1> ;   sequentialWriteFCB
    53                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    54                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    55                              <1> 
    56                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    57                              <1> ;Reading and Writing to the Volume label will silently return ok.
    58                              <1> ;Volume labels will be editable by being created/opened/closed.
    59                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    60                              <1> ; root directory always.
    61                              <1> 
    62                              <1> findFirstFileFCB:  ;ah = 11h
    63                              <1> ;Input: rdx -> FCB
    64 00002AD7 488915(EFC60300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    65 00002ADE 4889D6              <1>     mov rsi, rdx
    66 00002AE1 803EFF              <1>     cmp byte [rsi], -1
    67 00002AE4 7407                <1>     je .notExt1
    68 00002AE6 4881C607000000      <1>     add rsi, exFcb.driveNum
    69                              <1> .notExt1:
    70 00002AED 0FB606              <1>     movzx eax, byte [rsi]
    71 00002AF0 50                  <1>     push rax    ;Push on stack the drive number
    72 00002AF1 488D3D(F7C40300)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    73 00002AF8 E804030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    74 00002AFD 7306                <1>     jnc .fcbOk
    75 00002AFF 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    76 00002B00 E969340000          <1>     jmp fcbErrExit
    77                              <1> .fcbOk:
    78 00002B05 488D3D(F7C40300)    <1>     lea rdi, buffer1
    79 00002B0C E892E8FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    80 00002B11 7306                <1>     jnc .fileFound
    81 00002B13 5B                  <1>     pop rbx
    82 00002B14 E955340000          <1>     jmp fcbErrExit
    83                              <1> .fileFound:
    84                              <1> ;Now we build an FFBlock internally
    85 00002B19 488D3D(08C60300)    <1>     lea rdi, dosffblock
    86 00002B20 57                  <1>     push rdi
    87 00002B21 E8AEE7FFFF          <1>     call setupFFBlock
    88 00002B26 5E                  <1>     pop rsi
    89                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    90 00002B27 488B3D(EFC60300)    <1>     mov rdi, qword [workingFCB]
    91 00002B2E F605(D0C60300)FF    <1>     test byte [extFCBFlag], -1
    92 00002B35 7407                <1>     jz .notExt2
    93 00002B37 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    94                              <1> .notExt2:
    95 00002B3E 5B                  <1>     pop rbx ;Get back the drive number in bl
    96 00002B3F 85DB                <1>     test ebx, ebx
    97 00002B41 7509                <1>     jnz .notCurrentDrive
    98 00002B43 0FB61D(0BC40300)    <1>     movzx ebx, byte [currentDrv]
    99 00002B4A FFC3                <1>     inc ebx ;Turn into a 1 based drive number
   100                              <1> .notCurrentDrive:
   101 00002B4C AC                  <1>     lodsb   ;Get search drive from FFBlock in al
   102 00002B4D 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
   103 00002B50 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
   104 00002B55 A5                  <1>     movsd
   105 00002B56 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
   106 00002B57 488B3D(F1C30300)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
   107 00002B5E 488D35(33C60300)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
   108 00002B65 F605(D0C60300)FF    <1>     test byte [extFCBFlag], -1
   109 00002B6C 7412                <1>     jz .notExt3
   110 00002B6E B8FFFFFFFF          <1>     mov eax, -1
   111 00002B73 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
   112 00002B74 FFC0                <1>     inc eax ;Make it zero
   113 00002B76 AB                  <1>     stosd
   114 00002B77 AA                  <1>     stosb   ;Store 5 bytes of zero
   115 00002B78 0FB605(D1C60300)    <1>     movzx eax, byte [searchAttr]
   116 00002B7F AA                  <1>     stosb   ;Store the search attributes
   117                              <1> .notExt3:
   118 00002B80 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
   119 00002B82 AA                  <1>     stosb
   120 00002B83 B904000000          <1>     mov ecx, fatDirEntry_size/8
   121 00002B88 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
   122 00002B8B E9DB330000          <1>     jmp fcbGoodExit
   123                              <1>     
   124                              <1> findNextFileFCB:   ;ah = 12h
   125 00002B90 488915(EFC60300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
   126 00002B97 C605(D0C60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
   127 00002B9E C605(D1C60300)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
   128 00002BA5 4889D6              <1>     mov rsi, rdx
   129                              <1> 
   130 00002BA8 803EFF              <1>     cmp byte [rsi], -1
   131 00002BAB 7514                <1>     jne .notExt
   132 00002BAD FE0D(D0C60300)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   133 00002BB3 4881C606000000      <1>     add rsi, exFcb.attribute
   134 00002BBA AC                  <1>     lodsb   ;Get search attr in al
   135 00002BBB 8805(D1C60300)      <1>     mov byte [searchAttr], al
   136                              <1> .notExt:
   137                              <1>     ;rsi points to drive letter
   138 00002BC1 488D3D(08C60300)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   139 00002BC8 31C0                <1>     xor eax, eax
   140 00002BCA AC                  <1>     lodsb   ;Get the FCB drive letter
   141 00002BCB 50                  <1>     push rax    ;Push drive letter on the stack
   142 00002BCC 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   143 00002BCF AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   144 00002BD0 B905000000          <1>     mov ecx, 5
   145 00002BD5 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   146 00002BD7 FF35(F1C30300)      <1>     push qword [currentDTA] ;Save original currentDTA
   147 00002BDD 488D3D(08C60300)    <1>     lea rdi, dosffblock
   148 00002BE4 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   149 00002BE5 8F05(F1C30300)      <1>     pop qword [currentDTA]
   150 00002BEB E894E3FFFF          <1>     call findNextMain
   151 00002BF0 8F05(F1C30300)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   152 00002BF6 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   153 00002BFC 488B3D(EFC60300)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   154 00002C03 F607FF              <1>     test byte [rdi], -1
   155 00002C06 7407                <1>     jz .notExt2
   156 00002C08 4881C707000000      <1>     add rdi, exFcb.driveNum
   157                              <1> .notExt2:
   158 00002C0F 5B                  <1>     pop rbx ;Get the drive letter back into bl
   159 00002C10 881F                <1>     mov byte [rdi], bl
   160 00002C12 E957330000          <1>     jmp fcbErrExit  ;And exit bad
   161                              <1> 
   162                              <1> deleteFileFCB:     ;ah = 13h
   163 00002C17 488D3D(F7C40300)    <1>     lea rdi, buffer1
   164 00002C1E 57                  <1>     push rdi
   165 00002C1F E8DD010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   166 00002C24 5F                  <1>     pop rdi ;Point rdi to the canonised path
   167 00002C25 0F8243330000        <1>     jc fcbErrExit
   168 00002C2B E873E7FFFF          <1>     call getFilePathNoCanon ;Get the file
   169 00002C30 0F8238330000        <1>     jc fcbErrExit
   170 00002C36 E80D0D0000          <1>     call outerDeleteMain
   171 00002C3B 0F822D330000        <1>     jc fcbErrExit
   172 00002C41 E925330000          <1>     jmp fcbGoodExit
   173                              <1> 
   174                              <1> renameFileFCB:     ;ah = 17h
   175                              <1> ;Input: rdx -> User FCB
   176 00002C46 488915(EFC60300)    <1>     mov qword [workingFCB], rdx
   177                              <1>     ;First we get the drive letter 
   178 00002C4D 4889D6              <1>     mov rsi, rdx
   179 00002C50 803EFF              <1>     cmp byte [rsi], -1
   180 00002C53 7507                <1>     jne .notExt
   181 00002C55 4881C607000000      <1>     add rsi, exFcb.driveNum
   182                              <1> .notExt:
   183 00002C5C 31C0                <1>     xor eax, eax
   184 00002C5E AC                  <1>     lodsb
   185 00002C5F 50                  <1>     push rax    ;Push the drive letter on the stack for now
   186 00002C60 488D3D(F7C40300)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   187 00002C67 E895010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   188 00002C6C 723D                <1>     jc .badPop
   189 00002C6E FF35(F7C50300)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   190 00002C74 8F05(FFC50300)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   191 00002C7A 58                  <1>     pop rax ;Get drive letter back
   192 00002C7B 488D3D(77C50300)    <1>     lea rdi, buffer2
   193 00002C82 E84E010000          <1>     call fcbInitName2
   194 00002C87 7223                <1>     jc short .bad
   195 00002C89 488B05(FFC50300)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   196 00002C90 488705(F7C50300)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   197 00002C97 488905(FFC50300)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   198 00002C9E E8E7090000          <1>     call renameMain
   199 00002CA3 0F83C2320000        <1>     jnc fcbGoodExit
   200 00002CA9 EB01                <1>     jmp short .bad
   201                              <1> .badPop:
   202 00002CAB 5B                  <1>     pop rbx ;Pop drive number off stack
   203                              <1> .bad:
   204 00002CAC E9BD320000          <1>     jmp fcbErrExit
   205                              <1> 
   206                              <1> getFileSizeFCB:    ;ah = 23h
   207                              <1> ;This function which can be used to test existance of file without opening it 
   208                              <1> ;Input: rdx -> FCB
   209 00002CB1 488915(EFC60300)    <1>     mov qword [workingFCB], rdx
   210 00002CB8 488D3D(F7C40300)    <1>     lea rdi, buffer1
   211 00002CBF 57                  <1>     push rdi
   212 00002CC0 E83C010000          <1>     call fcbInitRoutine
   213 00002CC5 5F                  <1>     pop rdi
   214 00002CC6 0F82A2320000        <1>     jc fcbErrExit
   215 00002CCC E8D2E6FFFF          <1>     call getFilePathNoCanon
   216 00002CD1 0F8297320000        <1>     jc fcbErrExit
   217 00002CD7 8B05(4FC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   218                              <1>     ;Now we gotta set up FCB randRecrd Field
   219 00002CDD 488B35(EFC60300)    <1>     mov rsi, qword [workingFCB]
   220 00002CE4 803EFF              <1>     cmp byte [rsi], -1
   221 00002CE7 7507                <1>     jne .notExtended
   222 00002CE9 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   223                              <1> .notExtended:
   224                              <1> ;rsi points to the drive number now
   225 00002CF0 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   226 00002CF4 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   227 00002CF6 85D2                <1>     test edx, edx
   228 00002CF8 7402                <1>     jz .noRemainder
   229 00002CFA FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   230                              <1> .noRemainder:
   231 00002CFC 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   232 00002CFF E967320000          <1>     jmp fcbGoodExit
   233                              <1> 
   234                              <1> setDTA:            ;ah = 1Ah, Always can be used
   235                              <1> ;Called with:
   236                              <1> ;   rdx = Pointer to the new default DTA
   237 00002D04 488B1D(54C40300)    <1>     mov rbx, qword [oldRSP]
   238 00002D0B 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   239 00002D0F 488915(F1C30300)    <1>     mov qword [currentDTA], rdx
   240 00002D16 C3                  <1>     ret
   241                              <1> 
   242                              <1> getDTA:            ;ah = 2Fh, Always can be used
   243 00002D17 488B15(54C40300)    <1>     mov rdx, qword [oldRSP]
   244 00002D1E 488B1D(F1C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   245 00002D25 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   246                              <1>     return
    18                              <2> %%_ret:
    19 00002D29 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1>     
   248                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   249                              <1> ;Input:
   250                              <1> ;rsi points to a command line to parse
   251                              <1> ;rdi points to a future unopened FCB
   252                              <1> ;al = parsing control bits. 
   253                              <1> ; al[0] = If set, leading filename separators are scanned off
   254                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   255                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   256                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   257                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   258                              <1> ;        al = 1 => Wildcards found
   259                              <1> ;        al = -1 => Drive specifier invalid
   260                              <1> ;rsi -> to the first char past the parsed filename
   261                              <1> ;rdi -> First byte of the FCB 
   262                              <1> 
   263 00002D2A E872010000          <1>     call parseNameToFCB
   264 00002D2F 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   265 00002D30 E8A62D0000          <1>     call getUserRegs
   266 00002D35 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   267                              <1>     return  ;al now contains dl, the signature, special unique return type
    18                              <2> %%_ret:
    19 00002D38 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   268                              <1> 
   269                              <1> ;=================================================================
   270                              <1> ;=================================================================
   271                              <1> ;These functions CHECK the Volume type and fail if the volume is 
   272                              <1> ; not compatible.
   273                              <1> ;=================================================================
   274                              <1> ;=================================================================
   275                              <1> openFileFCB:       ;ah = 0Fh
   276 00002D39 B805000000          <1>     mov eax, errAccDen
   277 00002D3E E92B320000          <1>     jmp fcbErrExit
   278                              <1> closeFileFCB:      ;ah = 10h
   279 00002D43 B805000000          <1>     mov eax, errAccDen
   280 00002D48 E921320000          <1>     jmp fcbErrExit
   281                              <1> sequentialReadFCB: ;ah = 14h
   282 00002D4D B805000000          <1>     mov eax, errAccDen
   283 00002D52 E917320000          <1>     jmp fcbErrExit
   284                              <1> sequentialWriteFCB:;ah = 15h
   285 00002D57 B805000000          <1>     mov eax, errAccDen
   286 00002D5C E90D320000          <1>     jmp fcbErrExit
   287                              <1> createFileFCB:     ;ah = 16h
   288 00002D61 B805000000          <1>     mov eax, errAccDen
   289 00002D66 E903320000          <1>     jmp fcbErrExit
   290                              <1> randomReadFCB:     ;ah = 21h
   291 00002D6B B805000000          <1>     mov eax, errAccDen
   292 00002D70 E9F9310000          <1>     jmp fcbErrExit
   293                              <1> randomWriteFCB:    ;ah = 22h
   294 00002D75 B805000000          <1>     mov eax, errAccDen
   295 00002D7A E9EF310000          <1>     jmp fcbErrExit
   296                              <1> setRelRecordFCB:   ;ah = 24h
   297 00002D7F B805000000          <1>     mov eax, errAccDen
   298 00002D84 E9E5310000          <1>     jmp fcbErrExit
   299                              <1> randBlockReadFCB:  ;ah = 27h
   300 00002D89 B805000000          <1>     mov eax, errAccDen
   301 00002D8E E9DB310000          <1>     jmp fcbErrExit
   302                              <1> randBlockWriteFCB: ;ah = 28h
   303 00002D93 B805000000          <1>     mov eax, errAccDen
   304 00002D98 E9D1310000          <1>     jmp fcbErrExit
   305                              <1> 
   306                              <1> 
   307                              <1> ;--------------------------------
   308                              <1> ;  Common FCB related Routines  :
   309                              <1> ;--------------------------------
   310                              <1> fcbCheckDriveType:
   311                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   312                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   313                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   314                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   315                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   316                              <1> ;If a net CDS, automatic fail (for now).
   317 00002D9D C605(CEC60300)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   318 00002DA4 51                  <1>     push rcx
   319 00002DA5 57                  <1>     push rdi
   320 00002DA6 55                  <1>     push rbp
   321 00002DA7 9C                  <1>     pushfq
   322 00002DA8 F605(3EC60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   323 00002DAF 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   324 00002DB1 E8B82C0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   325 00002DB6 7218                <1>     jc .exit
   326                              <1>     ;rdi has cds ptr now
   327 00002DB8 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   328 00002DBC E835DEFFFF          <1>     call getFATtype
   329 00002DC1 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   330 00002DC7 7707                <1>     ja .exit
   331                              <1> .okToGo:
   332 00002DC9 C605(CEC60300)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   333                              <1> .exit:
   334 00002DD0 9D                  <1>     popfq
   335 00002DD1 5D                  <1>     pop rbp
   336 00002DD2 5F                  <1>     pop rdi
   337 00002DD3 59                  <1>     pop rcx
   338                              <1>     return
    18                              <2> %%_ret:
    19 00002DD4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> fcbInitName2:
   340                              <1> ;Must be called after fcbInitRoutine has been run once
   341                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   342                              <1> ;       rdx -> UserFCB
   343                              <1> ;       eax[0] = Drive number (0 based)
   344 00002DD5 55                  <1>     push rbp
   345 00002DD6 4889E5              <1>     mov rbp, rsp
   346 00002DD9 4881EC0F000000      <1>     sub rsp, 15
   347 00002DE0 57                  <1>     push rdi
   348 00002DE1 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   349 00002DE5 4889D6              <1>     mov rsi, rdx
   350 00002DE8 F605(D0C60300)FF    <1>     test byte [extFCBFlag], -1
   351 00002DEF 7407                <1>     jz .notExtended
   352 00002DF1 4881C607000000      <1>     add rsi, exFcb.driveNum
   353                              <1> .notExtended:
   354                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   355 00002DF8 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   356 00002DFF EB36                <1>     jmp short fcbInitRoutine.rename2EP
   357                              <1> fcbInitRoutine:
   358                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   359                              <1> ;Input: rdx -> User FCB
   360                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   361 00002E01 55                  <1>     push rbp
   362 00002E02 4889E5              <1>     mov rbp, rsp
   363 00002E05 4881EC0F000000      <1>     sub rsp, 15    ;Make 15 char space on stack
   364                              <1>     ;This space is used to store X:FILENAME.EXT,0
   365 00002E0C 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   366 00002E0D 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   367 00002E11 C605(D0C60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   368 00002E18 C605(D1C60300)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   369 00002E1F E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   370 00002E24 7410                <1>     jz .notExtended
   371 00002E26 C605(D0C60300)FF    <1>     mov byte [extFCBFlag], -1
   372 00002E2D 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   373 00002E30 8805(D1C60300)      <1>     mov byte [searchAttr], al
   374                              <1> .notExtended:
   375 00002E36 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   376                              <1> .rename2EP:
   377 00002E37 E82C2D0000          <1>     call getCDS ;Get the CDS (preserves rdi)
   378 00002E3C 723F                <1>     jc .badDisk
   379 00002E3E E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   380 00002E43 488D1D05D4FFFF      <1>     lea rbx, asciiCharProperties
   381 00002E4A B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   382 00002E4F 56                  <1>     push rsi    ;rsi -> fcb.filename
   383                              <1> .nameCharCheck:
   384 00002E50 AC                  <1>     lodsb   ;Get the char in al
   385 00002E51 D7                  <1>     xlatb   ;Get the char signature in al
   386 00002E52 A808                <1>     test al, 8
   387 00002E54 7427                <1>     jz .badDisk
   388 00002E56 FFC9                <1>     dec ecx
   389 00002E58 75F6                <1>     jnz .nameCharCheck
   390 00002E5A 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   391 00002E5B 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   392 00002E5E E831E4FFFF          <1>     call FCBToAsciiz
   393 00002E63 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   394 00002E64 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   395 00002E67 7414                <1>     je .badDisk
   396 00002E69 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   397 00002E6D 55                  <1>     push rbp
   398 00002E6E E8F7E4FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename
   399 00002E73 5D                  <1>     pop rbp
   400 00002E74 7207                <1>     jc .badDisk
   401 00002E76 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   402 00002E7B EB03                <1>     jmp short .jiggleStack  ;Skip the error
   403                              <1> .badDisk:
   404 00002E7D B003                <1>     mov al, errPnf  ;DOS does this... so will I
   405 00002E7F F9                  <1>     stc
   406                              <1> .jiggleStack:
   407 00002E80 4889EC              <1>     mov rsp, rbp
   408 00002E83 5D                  <1>     pop rbp
   409                              <1> .exit:
   410                              <1>     return
    18                              <2> %%_ret:
    19 00002E84 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> storeZeroBasedDriveNumber:
   413                              <1> ;Input: al => 0 based drive letter
   414                              <1> ;       rdi -> Points to buffer to store the X: in
   415 00002E85 FEC0                <1>     inc al
   416                              <1> storeOneBasedDriveNumber:
   417                              <1> ;Input: al => 1 based drive letter
   418                              <1> ;       rdi -> Points to buffer to store the X: in
   419 00002E87 0440                <1>     add al, "@"
   420 00002E89 B43A                <1>     mov ah, ":"
   421 00002E8B 66AB                <1>     stosw
   422                              <1>     return
    18                              <2> %%_ret:
    19 00002E8D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   423                              <1> 
   424                              <1> isFCBExtended:
   425                              <1> ;Input: rdx = FCB ptr
   426                              <1> ;Output: rsi -> Drive letter of FCB
   427                              <1> ;        rdx -> FCB first byte
   428                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   429 00002E8E 4889D6              <1>     mov rsi, rdx
   430 00002E91 803EFF              <1>     cmp byte [rsi], -1
   431 00002E94 7507                <1>     jne .notExtended
   432 00002E96 4881C607000000      <1>     add rsi, exFcb.driveNum
   433                              <1> .notExtended:
   434 00002E9D 4839F2              <1>     cmp rdx, rsi
   435                              <1>     return
    18                              <2> %%_ret:
    19 00002EA0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   436                              <1> 
   437                              <1> parseNameToFCB:
   438                              <1> ;rsi points to a command line to parse
   439                              <1> ;rdi points to a future unopened FCB
   440                              <1> ;al = parsing control bits. 
   441                              <1> ; al[0] = If set, leading filename separators are scanned off
   442                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   443                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   444                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   445                              <1> ;
   446                              <1> ;Separators include : . ; , = + TAB SPACE
   447                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   448                              <1> 
   449 00002EA1 C605(66C40300)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   450 00002EA8 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   451 00002EAA A802                <1>     test al, 2  ;Set drive letter>
   452 00002EAC 7402                <1>     jz .skipDriveLetter
   453 00002EAE 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   454                              <1> .skipDriveLetter:
   455 00002EB0 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   456 00002EB3 B908000000          <1>     mov ecx, 8  ;Copy Filename
   457 00002EB8 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   458 00002EBA 93                  <1>     xchg eax, ebx
   459 00002EBB B020                <1>     mov al, " " ;Clear the field
   460 00002EBD 7405                <1>     jz .clearFilenameField
   461 00002EBF 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   462 00002EC2 31C9                <1>     xor ecx, ecx
   463                              <1> .clearFilenameField:
   464 00002EC4 F3AA                <1>     rep stosb
   465 00002EC6 B903000000          <1>     mov ecx, 3
   466 00002ECB F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   467 00002ECE 7405                <1>     jz .clearExtensionField
   468 00002ED0 4801CF              <1>     add rdi, rcx
   469 00002ED3 31C9                <1>     xor ecx, ecx
   470                              <1> .clearExtensionField:
   471 00002ED5 F3AA                <1>     rep stosb
   472 00002ED7 91                  <1>     xchg eax, ecx
   473 00002ED8 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   474 00002ED9 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   475 00002EE0 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   476 00002EE3 740F                <1>     jz .dontScanOff
   477 00002EE5 E8602E0000          <1>     call skipSpacesAndTabs
   478 00002EEA E8672E0000          <1>     call isCharDelimType
   479 00002EEF 7508                <1>     jnz .skipIfDelim
   480 00002EF1 48FFC6              <1>     inc rsi
   481                              <1> .dontScanOff:
   482 00002EF4 E8512E0000          <1>     call skipSpacesAndTabs  ;Skip a char
   483                              <1> .skipIfDelim:
   484 00002EF9 E8022D0000          <1>     call uppercaseCharAtPtr 
   485 00002EFE 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   486 00002F00 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   487 00002F03 7519                <1>     jne .skipSettingDriveLetter
   488 00002F05 48FFC6              <1>     inc rsi ;Goto next char
   489 00002F08 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   490 00002F0A 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   491 00002F0C 50                  <1>     push rax    ;Save the 1 based drive letter
   492 00002F0D E8ED2B0000          <1>     call setDrive   ;Verifies if this drive letter is valid
   493 00002F12 58                  <1>     pop rax
   494 00002F13 7302                <1>     jnc .validDriveLetter
   495                              <1> .invalidDriveLetter:
   496 00002F15 B2FF                <1>     mov dl, -1
   497                              <1> .validDriveLetter:
   498 00002F17 AA                  <1>     stosb
   499 00002F18 48FFC6              <1>     inc rsi ;Align pointers...
   500 00002F1B 48FFCF              <1>     dec rdi 
   501                              <1> .skipSettingDriveLetter:
   502 00002F1E 48FFCE              <1>     dec rsi
   503 00002F21 48FFC7              <1>     inc rdi
   504                              <1>     
   505                              <1> getFCBFilename:
   506                              <1> ;Input: rsi points to first char of filename
   507                              <1> ;       rdi points to storage buffer for filename
   508                              <1> ;       dl contains the signature if drive invalid
   509                              <1> ;Output:
   510                              <1> ;       Fields filled
   511                              <1> ;       al = Return signature
   512 00002F24 B908000000          <1>     mov ecx, 8
   513 00002F29 E815000000          <1>     call getFCBNameField
   514 00002F2E 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   515 00002F31 750D                <1>     jne .noExt
   516 00002F33 B903000000          <1>     mov ecx, 3
   517 00002F38 48FFC6              <1>     inc rsi ;Skip this char
   518 00002F3B E814000000          <1>     call forceFCBNameField
   519                              <1> .noExt:
   520 00002F40 88D0                <1>     mov al, dl  ;Store the return signature
   521                              <1>     return
    18                              <2> %%_ret:
    19 00002F42 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   522                              <1> 
   523                              <1> getFCBNameField:
   524                              <1> ;Checks if the field is appropriate before copying it
   525 00002F43 E8B82C0000          <1>     call uppercaseCharAtPtr
   526 00002F48 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   527 00002F4A 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   528 00002F4D 48FFCE              <1>     dec rsi ;Point to previous char
   529                              <1>     return
    18                              <2> %%_ret:
    19 00002F50 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> .okName:
   531 00002F51 48FFCE              <1>     dec rsi ;Go back now a char
   532                              <1> forceFCBNameField:
   533                              <1> ;Forcefully copies the name from rsi to rdi
   534 00002F54 E8A72C0000          <1>     call uppercaseCharAtPtr
   535 00002F59 7226                <1>     jc .terminatingSpace
   536 00002F5B 750D                <1>     jnz .notSep
   537 00002F5D F605(66C40300)FF    <1>     test byte [fcbSpaceOk], -1
   538 00002F64 741B                <1>     jz .terminatingSpace
   539 00002F66 3C20                <1>     cmp al, " "
   540 00002F68 7517                <1>     jne .terminatingSpace
   541                              <1> .notSep:
   542 00002F6A 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   543 00002F6D FFC9                <1>     dec ecx
   544 00002F6F 3C2A                <1>     cmp al, "*" ;Big wildcard?
   545 00002F71 7504                <1>     jne .notBigWildcard
   546 00002F73 B03F                <1>     mov al, "?"
   547 00002F75 F3AA                <1>     rep stosb
   548                              <1> .notBigWildcard:
   549 00002F77 AA                  <1>     stosb   ;Stores the uppercased char
   550 00002F78 3C3F                <1>     cmp al, "?"
   551 00002F7A 75D8                <1>     jne forceFCBNameField
   552 00002F7C 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   553 00002F7F EBD3                <1>     jmp short forceFCBNameField
   554                              <1> .terminatingSpace:
   555 00002F81 B020                <1>     mov al, " "
   556 00002F83 AA                  <1>     stosb
   557 00002F84 48FFCE              <1>     dec rsi ;Point to this trailing space
   558                              <1>     return
    18                              <2> %%_ret:
    19 00002F87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    32                              <1> ;-----------------------------------:
    33                              <1> ;    File Handle Kernel routines    :
    34                              <1> ;-----------------------------------:
    35                              <1> 
    36                              <1> createFileHdl:     ;ah = 3Ch, handle function
    37                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    38                              <1> ;       rdx = Ptr to ASCIZ filename to create
    39                              <1> ;Output: CF=CY => ax = File handle
    40                              <1> ;        CF=NC => al = Error code
    41 00002F88 51                  <1>     push rcx    ;Save file attributes on stack
    42 00002F89 488D0D010B0000      <1>     lea rcx, createMain
    43 00002F90 C605(D1C60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
    44 00002F97 EB1D                <1>     jmp short openFileHdl.openCommon
    45                              <1> openFileHdl:       ;ah = 3Dh, handle function
    46                              <1> ;Input: al = Open mode, to open file with
    47                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    48                              <1> ;If called from 5D00h, cl = File attributes too
    49                              <1> ;Output: CF=CY => ax = File handle
    50                              <1> ;        CF=NC => al = Error code
    51 00002F99 BB16000000          <1>     mov ebx, dirInclusive
    52 00002F9E F605(D7C60300)FF    <1>     test byte [dosInvoke], -1
    53 00002FA5 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    54 00002FA8 880D(D1C60300)      <1>     mov byte [searchAttr], cl
    55 00002FAE 488D0D410A0000      <1>     lea rcx, openMain  
    56 00002FB5 50                  <1>     push rax    ;Save open mode on stack
    57                              <1> .openCommon:
    58 00002FB6 4889D6              <1>     mov rsi, rdx
    59 00002FB9 E8D42C0000          <1>     call checkPathspecOK
    60 00002FBE 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    61                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    62 00002FC0 58                  <1>     pop rax
    63 00002FC1 B803000000          <1>     mov eax, errPnf
    64 00002FC6 E9C32F0000          <1>     jmp extErrExit
    65                              <1> .pathOk:
    66 00002FCB E85D2F0000          <1>     call dosCrit1Enter
    67 00002FD0 E8B0150000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    68 00002FD5 E85D2F0000          <1>     call dosCrit1Exit
    69 00002FDA 0F82A9000000        <1>     jc .exitBad
    70                              <1>     ;Now save variables
    71 00002FE0 E8D9140000          <1>     call setCurrentSFT
    72 00002FE5 66891D(0FC70300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    73 00002FEC E846160000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    74 00002FF1 0F8292000000        <1>     jc .exitBad
    75 00002FF7 66891D(11C70300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    76 00002FFE 48893D(FFC60300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    77 00003005 0FB71D(0FC70300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    78 0000300C 881F                <1>     mov byte [rdi], bl  ;And open the file
    79                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    80 0000300E 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    81 00003011 488D3D(F7C40300)    <1>     lea rdi, buffer1    ;Build the full path here
    82 00003018 51                  <1>     push rcx    ;Save the procedure to call on stack
    83 00003019 E890E3FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    84 0000301E 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    85 0000301F 488D05D0090000      <1>     lea rax, openMain   ;Get EA for open procedure
    86 00003026 488B35(07C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    87 0000302D 7319                <1>     jnc .proceedCall
    88                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    89                              <1> ;                              For Create New, Bad but handled later.
    90                              <1> ;If CF=CY => Path doesnt all exist:
    91                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    92                              <1> ;Now we check if we are creating or opening.
    93 0000302F 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    94 00003032 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    95 00003034 F605(DAC60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    96 0000303B 750B                <1>     jnz .proceedCall    ;If so, proceed.
    97                              <1> .badPathspec:
    98 0000303D 58                  <1>     pop rax
    99 0000303E B802000000          <1>     mov eax, errFnf
   100 00003043 E951000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
   101                              <1> .proceedCall:
   102                              <1> ;If the pathspec exists, recall that for create, we truncate.
   103 00003048 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
   104 0000304A 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
   105 0000304D 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
   106 0000304E 750B                <1>     jne .callProc   ;Jump if we are creating
   107                              <1>     ;al means openmode here
   108 00003050 A880                <1>     test al, 80h    ;No Inherit bit set?
   109 00003052 7407                <1>     jz .callProc
   110 00003054 247F                <1>     and al, 7Fh     ;Clear this bit
   111 00003056 B900100000          <1>     mov ecx, devNoInherit
   112                              <1> .callProc:
   113 0000305B 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   114 00003061 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   115 00003067 51                  <1>     push rcx    ;Save the device word 
   116 00003068 FFD3                <1>     call rbx    ;Enter with open mode in 
   117 0000306A 59                  <1>     pop rcx
   118 0000306B 488B35(07C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   119 00003072 7225                <1>     jc .exitBad2
   120 00003074 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   121 00003079 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   122 0000307D 0FB705(11C70300)    <1>     movzx eax, word [currentHdl]
   123                              <1>     ;SHARE HOOK, DOS DS:[008Ch]
   124 00003084 E9F72E0000          <1>     jmp extGoodExit ;Save ax and return OK
   125                              <1> .exitBad:
   126 00003089 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   127 0000308A 5B                  <1>     pop rbx ;Pop the word from the stack
   128 0000308B 66C705(0FC70300)FF- <1>     mov word [currentNdx], -1
   128 00003093 FF                  <1>
   129 00003094 E9F52E0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   130                              <1> .exitBad2:
   131                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   132 00003099 488B35(FFC60300)    <1>     mov rsi, qword [curHdlPtr]
   133 000030A0 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   134 000030A3 488B35(07C70300)    <1>     mov rsi, qword [currentSFT]
   135 000030AA 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   136 000030AF 66C705(0FC70300)FF- <1>     mov word [currentNdx], -1
   136 000030B7 FF                  <1>
   137 000030B8 E9D12E0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   138                              <1> 
   139                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   140                              <1> ;Input: bx = file handle to close
   141 000030BD E88B150000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   142 000030C2 0F82C62E0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   143 000030C8 E8F1130000          <1>     call setCurrentSFT  ;Set this as the current SFT
   144                              <1>     ;Check count to see if we need to check share mode
   145 000030CD 31C0                <1>     xor eax, eax    ;Preset ax to 0
   146 000030CF 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   147 000030D4 7406                <1>     je .skipShareCheck
   148                              <1>     ;Now check sharing mode
   149 000030D6 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   150 000030DA 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   151                              <1> .skipShareCheck:
   152 000030DC 50                  <1>     push rax    ;Save the share mode on stack
   153 000030DD E85C0C0000          <1>     call closeMain  ;Call close main!
   154 000030E2 58                  <1>     pop rax 
   155 000030E3 0F82A52E0000        <1>     jc extErrExit   ;If an error, exit through error exit
   156 000030E9 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   157 000030EB 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   158 000030ED E827150000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   159 000030F2 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   160                              <1> .exitOk:
   161 000030F5 31C0                <1>     xor eax, eax    ;Return value
   162 000030F7 E9842E0000          <1>     jmp extGoodExit
   163                              <1> 
   164                              <1> readFileHdl:       ;ah = 3Fh, handle function
   165 000030FC 488D35AD0C0000      <1>     lea rsi, readBytes
   166                              <1> .common:
   167 00003103 E845150000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   168 00003108 0F82802E0000        <1>     jc extErrExit   ;Error code in al and exit
   169 0000310E E8AB130000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   170 00003113 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   171 00003115 FF35(F1C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   172 0000311B 488915(F1C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   173 00003122 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   174 00003124 8F05(F1C30300)      <1>     pop qword [currentDTA]
   175 0000312A 0F825E2E0000        <1>     jc extErrExit   ;Error code in al and exit
   176 00003130 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   177 00003132 E9402E0000          <1>     jmp extGoodExit2    ;and exit!
   178                              <1> 
   179                              <1> writeFileHdl:      ;ah = 40h, handle function
   180 00003137 488D35510F0000      <1>     lea rsi, writeBytes
   181 0000313E E9C0FFFFFF          <1>     jmp readFileHdl.common
   182                              <1> 
   183                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   184                              <1> ;Here don't allow malformed chars unless it is a network CDS
   185 00003143 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   186 00003148 F605(D7C60300)FF    <1>     test byte [dosInvoke], -1
   187 0000314F 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   188 00003152 880D(D1C60300)      <1>     mov byte [searchAttr], cl
   189 00003158 4889D6              <1>     mov rsi, rdx
   190 0000315B E8322B0000          <1>     call checkPathspecOK
   191 00003160 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   192 00003162 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   193                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   194 00003164 F605(D7C60300)FF    <1>     test byte [dosInvoke], -1
   195 0000316B 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   196                              <1> .badPath:
   197 0000316D B803000000          <1>     mov eax, errPnf
   198 00003172 E9172E0000          <1>     jmp extErrExit
   199                              <1> .pathOk:
   200 00003177 488D3D(F7C40300)    <1>     lea rdi, buffer1
   201 0000317E 52                  <1>     push rdx
   202 0000317F E82AE2FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   203 00003184 5A                  <1>     pop rdx
   204 00003185 0F82032E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   205                              <1>     ;In the case of a wildcard, recall this will return the first file
   206 0000318B 803D(D9C60300)FF    <1>     cmp byte [fileExist], -1
   207 00003192 0F85F62D0000        <1>     jnz extErrExit
   208 00003198 E8AB070000          <1>     call outerDeleteMain
   209 0000319D 0F82EB2D0000        <1>     jc extErrExit
   210 000031A3 E9D82D0000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   213                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   214 000031A8 E8A0140000          <1>     call getSFTPtr
   215 000031AD 0F82DB2D0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   216 000031B3 3C03                <1>     cmp al, 3
   217 000031B5 720A                <1>     jb .validFunction
   218 000031B7 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   219 000031BC E9CD2D0000          <1>     jmp extErrExit
   220                              <1> .validFunction:
   221 000031C1 3C01                <1>     cmp al, 1
   222 000031C3 7718                <1>     ja .seekend
   223 000031C5 7203                <1>     jb .seekset
   224                              <1> ;Here we are at seekcur, seek from current (signed)
   225 000031C7 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   226                              <1> .seekset:
   227                              <1> ;Seek from the start (unsigned)
   228 000031CA 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   229 000031CD E809290000          <1>     call getUserRegs    ;Get user regs in rsi
   230 000031D2 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   231                              <1> .seekExit:
   232 000031D5 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   233 000031D8 E99A2D0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   234                              <1> .seekend:
   235                              <1> ;Here we are at seekend, seek from end (signed)
   236 000031DD 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   237 000031E3 7505                <1>     jnz .netCheck
   238                              <1> .proceedDisk:
   239 000031E5 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   240 000031E8 EBE0                <1>     jmp short .seekset
   241                              <1> .netCheck:
   242 000031EA 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   243 000031F0 75F3                <1>     jnz .proceedDisk
   244 000031F2 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   245                              <1>     ;Check it's share mode
   246 000031F6 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   247 000031FB 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   248 00003200 7407                <1>     je .netSeek
   249 00003202 3D30000000          <1>     cmp eax, denyReadShare
   250 00003207 75DC                <1>     jne .proceedDisk
   251                              <1> .netSeek:
   252 00003209 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   253 0000320E CD4F                <1>     int 4Fh
   254 00003210 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   255 00003212 E9772D0000          <1>     jmp extErrExit
   256                              <1> 
   257                              <1> 
   258                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   259 00003217 3C01                <1>     cmp al, 1
   260 00003219 760A                <1>     jbe .subFuncOk
   261 0000321B B801000000          <1>     mov eax, errInvFnc
   262 00003220 E9692D0000          <1>     jmp extErrExit
   263                              <1> .subFuncOk:
   264 00003225 4889D6              <1>     mov rsi, rdx
   265 00003228 89C3                <1>     mov ebx, eax    ;Store function code in bl
   266 0000322A 53                  <1>     push rbx
   267 0000322B 51                  <1>     push rcx
   268 0000322C E8612A0000          <1>     call checkPathspecOK
   269 00003231 730C                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   270                              <1> .badPath:
   271 00003233 59                  <1>     pop rcx
   272 00003234 5B                  <1>     pop rbx
   273 00003235 B803000000          <1>     mov eax, errPnf
   274 0000323A E94F2D0000          <1>     jmp extErrExit
   275                              <1> .pathOk:
   276 0000323F E8342B0000          <1>     call checkPathNet 
   277 00003244 74ED                <1>     jz .badPath ;Or Net paths
   278 00003246 E8D92A0000          <1>     call scanPathWC
   279 0000324B 72E6                <1>     jc .badPath ;Dont allow wildcards
   280 0000324D 488D3D(F7C40300)    <1>     lea rdi, buffer1
   281 00003254 52                  <1>     push rdx
   282 00003255 C605(D1C60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   283 0000325C E84DE1FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   284 00003261 5A                  <1>     pop rdx
   285 00003262 59                  <1>     pop rcx
   286 00003263 5B                  <1>     pop rbx
   287 00003264 0F82242D0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   288                              <1>     ;In the case of a wildcard, recall this will return the first file
   289 0000326A 803D(D9C60300)FF    <1>     cmp byte [fileExist], -1
   290 00003271 0F85172D0000        <1>     jnz extErrExit
   291                              <1> 
   292 00003277 E8F2270000          <1>     call testCDSNet
   293 0000327C 730C                <1>     jnc .notNet
   294 0000327E 750A                <1>     jnz .notNet ;This type of net ok
   295 00003280 B805000000          <1>     mov eax, errAccDen
   296 00003285 E9042D0000          <1>     jmp extErrExit
   297                              <1> .notNet:
   298 0000328A 84DB                <1>     test bl, bl
   299 0000328C 7526                <1>     jnz .setAttribs
   300                              <1>     ;Get attribs here
   301 0000328E 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   302 00003294 7412                <1>     jz .getDiskAttribs
   303 00003296 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   304 0000329B CD4F                <1>     int 4Fh
   305 0000329D 0F82EB2C0000        <1>     jc extErrExit
   306 000032A3 E9D82C0000          <1>     jmp extGoodExit
   307                              <1> .getDiskAttribs:
   308 000032A8 0FB605(3EC60300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   309 000032AF E9CC2C0000          <1>     jmp extGoodExit
   310                              <1> .setAttribs:
   311                              <1>     ;Set attribs here
   312 000032B4 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   313 000032BA 7417                <1>     jz .setDiskAttribs
   314 000032BC 0FB7C9              <1>     movzx ecx, cx
   315 000032BF 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   316 000032C0 B80E110000          <1>     mov eax, 110Eh
   317 000032C5 CD4F                <1>     int 4Fh
   318 000032C7 59                  <1>     pop rcx
   319 000032C8 0F82C02C0000        <1>     jc extErrExit
   320 000032CE E9AD2C0000          <1>     jmp extGoodExit
   321                              <1> .setDiskAttribs:
   322 000032D3 E875EBFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   323 000032D8 0F82B02C0000        <1>     jc extErrExit
   324 000032DE F6C118              <1>     test cl, dirVolumeID | dirDirectory
   325 000032E1 740A                <1>     jz .set
   326 000032E3 B805000000          <1>     mov eax, errAccDen
   327 000032E8 E9A12C0000          <1>     jmp extErrExit
   328                              <1> .set:
   329 000032ED 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   330 000032F0 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   331 000032F3 08E9                <1>     or cl, ch
   332 000032F5 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   333 000032F8 31C0                <1>     xor eax, eax
   334 000032FA E9812C0000          <1>     jmp extGoodExit
   335                              <1> 
   336                              <1> 
   337                              <1> duplicateHandle:   ;ah = 45h, handle function
   338                              <1> ;Input: bx = Handle to duplicate
   339                              <1> ;Output: If ok then ax = New handle
   340 000032FF E8AA130000          <1>     call findFreeJFTSpace    ;First find a free space in the JFT
   341 00003304 0F82842C0000        <1>     jc extErrExit   ;Exit if no space
   342                              <1>     ;rsi points to the free space
   343                              <1> .duplicateCommon:
   344 0000330A E80A130000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   345 0000330F 4887F7              <1>     xchg rsi, rdi
   346 00003312 AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   347 00003313 AA                  <1>     stosb
   348 00003314 48FFCE              <1>     dec rsi
   349 00003317 48FFCF              <1>     dec rdi
   350                              <1>     ;rdi now points to new position
   351                              <1>     ;rsi points to old position
   352                              <1>     ;al has SFT ndx
   353 0000331A 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   354 0000331D 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   355 00003320 E8BF120000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   356 00003325 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   357                              <1>     ;Now we must return in ax the entry in the JFT 
   358 00003328 488B3D(F9C30300)    <1>     mov rdi, qword [currentPSP]
   359 0000332F 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   360 00003333 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   361 00003336 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   362 00003338 E9432C0000          <1>     jmp extGoodExit
   363                              <1> 
   364                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   365                              <1> ;Input: bx = Handle to duplicate
   366                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   367                              <1>     ;First we close cx
   368 0000333D 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   369 0000333F 53                  <1>     push rbx
   370 00003340 51                  <1>     push rcx
   371 00003341 E877FDFFFF          <1>     call closeFileHdl   ;Close handle 
   372 00003346 59                  <1>     pop rcx
   373 00003347 5B                  <1>     pop rbx
   374                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00003348 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 0000334A C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   375                              <1>     ;Else, close was ok, lets duplicate now
   376 0000334B E8C9120000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   377 00003350 0F82382C0000        <1>     jc extErrExit   ;Return bad with error code in al
   378 00003356 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   379 00003358 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   380 0000335B EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   381                              <1> 
   382                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   383                              <1> ;Input: cx = Search Attributes, cl only used
   384                              <1> ;       rdx = Ptr to path to file to look for
   385                              <1> ;       al = Document as needing to be 0 for now
   386                              <1> ;Return:
   387                              <1> ;Data in the DTA or error through AX with CF=CY
   388                              <1> ;CAVEATS!
   389                              <1> ;DTA:attribFnd = 40h => Char dev
   390                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   391 0000335D 880D(D1C60300)      <1>     mov byte [searchAttr], cl
   392 00003363 4889D6              <1>     mov rsi, rdx
   393 00003366 E827290000          <1>     call checkPathspecOK
   394 0000336B 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   395 0000336D 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   396                              <1> .badPath:
   397 0000336F B803000000          <1>     mov eax, errPnf
   398 00003374 E9152C0000          <1>     jmp extErrExit
   399                              <1> .pathspecOk:
   400 00003379 FF35(F1C30300)      <1>     push qword [currentDTA]
   401 0000337F 488D3D(08C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   402 00003386 48893D(F1C30300)    <1>     mov qword [currentDTA], rdi
   403 0000338D 488D3D(F7C40300)    <1>     lea rdi, buffer1    ;Build the full path here
   404 00003394 E815E0FFFF          <1>     call getFilePath
   405                              <1> .findfileExit:
   406 00003399 8F05(F1C30300)      <1>     pop qword [currentDTA]
   407 0000339F 0F82E92B0000        <1>     jc extErrExit
   408 000033A5 488D3D(08C60300)    <1>     lea rdi, dosffblock
   409 000033AC 57                  <1>     push rdi
   410 000033AD E822DFFFFF          <1>     call setupFFBlock
   411 000033B2 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   412 000033B3 488B3D(F1C30300)    <1>     mov rdi, qword [currentDTA]
   413 000033BA B92B000000          <1>     mov ecx, ffBlock_size
   414 000033BF F3A4                <1>     rep movsb   ;Copy the whole block. 
   415                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   416 000033C1 31C0                <1>     xor eax, eax    ;Return value
   417 000033C3 E9B82B0000          <1>     jmp extGoodExit ;Exit well
   418                              <1> 
   419                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   420                              <1> ;Input: DTA has the find first block from the previous search
   421 000033C8 488B35(F1C30300)    <1>     mov rsi, qword [currentDTA]
   422 000033CF 488D3D(08C60300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   423 000033D6 B92B000000          <1>     mov ecx, ffBlock_size
   424 000033DB F3A4                <1>     rep movsb
   425 000033DD FF35(F1C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   426 000033E3 488D3D(08C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   427 000033EA 48893D(F1C30300)    <1>     mov qword [currentDTA], rdi
   428 000033F1 E88EDBFFFF          <1>     call findNextMain
   429 000033F6 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   430                              <1> 
   431                              <1> renameFile:        ;ah = 56h
   432                              <1> ;Input: rsi -> Filespec to rename
   433                              <1> ;       rdi -> New filespec
   434                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   435 000033F8 BB16000000          <1>     mov ebx, dirInclusive
   436 000033FD F605(D7C60300)FF    <1>     test byte [dosInvoke], -1
   437 00003404 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   438 00003407 880D(D1C60300)      <1>     mov byte [searchAttr], cl
   439                              <1>     ;Step 0, verify both paths provided are valid
   440 0000340D E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   441 00003412 7249                <1>     jc .pnfError
   442 00003414 56                  <1>     push rsi
   443 00003415 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   444 00003418 E84A000000          <1>     call .renamePathCheck
   445 0000341D 5E                  <1>     pop rsi
   446 0000341E 723D                <1>     jc .pnfError
   447                              <1>     ;Now we canonicalise the filenames to make life easy
   448 00003420 56                  <1>     push rsi
   449 00003421 4889FE              <1>     mov rsi, rdi
   450 00003424 488D3D(77C50300)    <1>     lea rdi, buffer2
   451 0000342B E83ADFFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   452 00003430 5E                  <1>     pop rsi
   453 00003431 722A                <1>     jc .pnfError
   454                              <1>     ;Now test if first file exists.
   455 00003433 FF35(F7C50300)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   456 00003439 8F05(FFC50300)      <1>     pop qword [fname2Ptr]
   457 0000343F 488D3D(F7C40300)    <1>     lea rdi, buffer1
   458 00003446 E81FDFFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   459 0000344B 7210                <1>     jc .pnfError  
   460                              <1> 
   461 0000344D E838020000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   462 00003452 0F82362B0000        <1>     jc extErrExit
   463 00003458 E9232B0000          <1>     jmp extGoodExit
   464                              <1> .pnfError:
   465 0000345D B803000000          <1>     mov eax, errPnf
   466 00003462 E9272B0000          <1>     jmp extErrExit
   467                              <1> .renamePathCheck:
   468                              <1> ;Checks if the pathspec in rsi is OK
   469 00003467 56                  <1>     push rsi
   470 00003468 57                  <1>     push rdi
   471 00003469 E824280000          <1>     call checkPathspecOK
   472 0000346E 5F                  <1>     pop rdi
   473 0000346F 5E                  <1>     pop rsi
   474 00003470 730D                <1>     jnc .pathOk     ;Path ok 
   475 00003472 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   476                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   477 00003474 F605(D7C60300)FF    <1>     test byte [dosInvoke], -1
   478 0000347B 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   479                              <1> .badPath:
   480 0000347D F9                  <1>     stc
   481                              <1>     return
    18                              <2> %%_ret:
    19 0000347E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   482                              <1> .pathOk:
   483 0000347F F8                  <1>     clc
   484                              <1>     return
    18                              <2> %%_ret:
    19 00003480 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> getSetFileDateTime:;ah = 57h
   487 00003481 3C01                <1>     cmp al, 1
   488 00003483 760A                <1>     jbe .oksubfun
   489 00003485 B801000000          <1>     mov eax, errInvFnc
   490 0000348A E9FF2A0000          <1>     jmp extErrExit
   491                              <1> .oksubfun:
   492 0000348F E8B9110000          <1>     call getSFTPtr  ;Preserves al unless error returned
   493 00003494 0F82F42A0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   494 0000349A 3C01                <1>     cmp al, 1
   495 0000349C 741C                <1>     je .setTimeDate
   496                              <1>     ;Here we get the Time/Date
   497 0000349E 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   498 000034A2 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   499 000034A6 E830260000          <1>     call getUserRegs
   500 000034AB 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   501 000034AF 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   502 000034B3 31C0                <1>     xor eax, eax
   503 000034B5 E9C62A0000          <1>     jmp extGoodExit
   504                              <1> .setTimeDate:
   505                              <1>     ;Here we set the Time/Date
   506 000034BA 66894F13            <1>     mov word [rdi + sft.wTime], cx
   507 000034BE 66895715            <1>     mov word [rdi + sft.wDate], dx
   508 000034C2 31C0                <1>     xor eax, eax
   509 000034C4 E9B72A0000          <1>     jmp extGoodExit
   510                              <1> 
   511                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   512                              <1> ;Uses the clock to do it's bidding
   513                              <1> ;cx = file attribute 
   514                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   515                              <1> ;       filename
   516 000034C9 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   517 000034CE 740A                <1>     jz .validAttribs
   518 000034D0 B805000000          <1>     mov eax, errAccDen
   519 000034D5 E9B42A0000          <1>     jmp extErrExit
   520                              <1> .validAttribs:
   521 000034DA 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   522 000034DE 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   523 000034E1 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   524 000034E6 31C0                <1>     xor eax, eax
   525 000034E8 4889D7              <1>     mov rdi, rdx
   526 000034EB F3AE                <1>     rep scasb
   527 000034ED 85C9                <1>     test ecx, ecx
   528 000034EF 750A                <1>     jnz .nullFnd
   529                              <1>     ;Bad path
   530 000034F1 B803000000          <1>     mov eax, errPnf
   531 000034F6 E9932A0000          <1>     jmp extErrExit
   532                              <1> .nullFnd:
   533 000034FB 48FFCF              <1>     dec rdi
   534 000034FE 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   535 00003502 E8EE260000          <1>     call swapPathSeparator
   536 00003507 7403                <1>     jz .pathsepFnd
   537                              <1>     ;If no pathsep found, force one at rdi
   538 00003509 B05C                <1>     mov al, "\"
   539 0000350B AA                  <1>     stosb
   540                              <1> .pathsepFnd:
   541 0000350C 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   542                              <1> .fileCreateLoop:
   543 0000350F 55                  <1>     push rbp
   544 00003510 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   545 00003515 5D                  <1>     pop rbp
   546 00003516 0FB7C1              <1>     movzx eax, cx
   547 00003519 0FB7D2              <1>     movzx edx, dx
   548 0000351C C1E010              <1>     shl eax, 10h
   549 0000351F 09D0                <1>     or eax, edx  ;Add the bits of dx too
   550 00003521 E831000000          <1>     call .writeNybbles
   551 00003526 31C0                <1>     xor eax, eax
   552 00003528 AA                  <1>     stosb   ;Store terminating null
   553 00003529 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   554 0000352C 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   555 0000352F 55                  <1>     push rbp
   556 00003530 E85C000000          <1>     call createNewFile
   557 00003535 5D                  <1>     pop rbp
   558 00003536 0F83442A0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   559 0000353C 0FB705(E5C30300)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   560 00003543 3D05000000          <1>     cmp eax, errAccDen
   561 00003548 74C5                <1>     je .fileCreateLoop
   562 0000354A 3D50000000          <1>     cmp eax, errFilExist
   563 0000354F 74BE                <1>     je .fileCreateLoop
   564 00003551 F9                  <1>     stc
   565 00003552 E9372A0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   566                              <1> .writeNybbles:
   567                              <1> ;Write the nybbles of eax at rdi
   568 00003557 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   569                              <1> .wnLp:
   570 0000355C C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   571 0000355F 50                  <1>     push rax
   572 00003560 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   573 00003565 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   574 0000356A 3D39000000          <1>     cmp eax, '9'
   575 0000356F 7605                <1>     jbe .notExtDigit
   576 00003571 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   577                              <1> .notExtDigit:
   578 00003576 AA                  <1>     stosb   ;Store the digit
   579 00003577 58                  <1>     pop rax
   580 00003578 FFC9                <1>     dec ecx
   581 0000357A 75E0                <1>     jnz .wnLp
   582                              <1>     return
    18                              <2> %%_ret:
    19 0000357C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   583                              <1> 
   584                              <1> .uniqueTimeGet:
   585 0000357D E80DF4FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   586 00003582 668B0D(F1C40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   587 00003589 668B15(F3C40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   588                              <1>     return
    18                              <2> %%_ret:
    19 00003590 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   589                              <1> 
   590                              <1> createNewFile:     ;ah = 5Bh
   591 00003591 51                  <1>     push rcx    ;Save file attributes on stack
   592 00003592 488D0DE5040000      <1>     lea rcx, createNewMain
   593 00003599 C605(D1C60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   594 000035A0 E911FAFFFF          <1>     jmp openFileHdl.openCommon
   595                              <1> 
   596                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   597                              <1>     ;Input: bx = File to flush
   598 000035A5 E8A3100000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   599 000035AA 0F82DE290000        <1>     jc extErrExit
   600 000035B0 E8090F0000          <1>     call setCurrentSFT
   601                              <1>     ;Now we check if the device is a char, disk or net file
   602 000035B5 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   603 000035B9 66A90080            <1>     test ax, devRedirDev
   604 000035BD 7512                <1>     jnz .notNet
   605                              <1>     ;Commit file net redir call and exit
   606 000035BF B807110000          <1>     mov eax, 1107h
   607 000035C4 CD4F                <1>     int 4Fh
   608 000035C6 0F82C2290000        <1>     jc extErrExit
   609 000035CC E93D000000          <1>     jmp .exitOk
   610                              <1> .notNet:
   611 000035D1 66A98000            <1>     test ax, devCharDev
   612 000035D5 7418                <1>     jz .blokDev
   613                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   614 000035D7 E8B3F3FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   615 000035DC 0F82AC290000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   616                              <1>     ;Build date and time words
   617 000035E2 E893F4FFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   618 000035E7 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   619 000035EA E91F000000          <1>     jmp .exitOk
   620                              <1> .blokDev:
   621 000035EF 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   622 000035F3 E86E240000          <1>     call setWorkingDPB
   623 000035F8 E8BBE8FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   624 000035FD 0F828B290000        <1>     jc extErrExit
   625 00003603 E897D5FFFF          <1>     call flushFile  ;Now the file gets flushed
   626 00003608 0F8280290000        <1>     jc extErrExit
   627                              <1> .exitOk:
   628 0000360E 30C0                <1>     xor al, al
   629 00003610 E8C6240000          <1>     call getUserRegs
   630 00003615 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   631                              <1>     return
    18                              <2> %%_ret:
    19 00003618 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   632                              <1> 
   633                              <1> lockUnlockFile:    ;ah = 5Ch
   634                              <1> ;ah = 5Ch
   635                              <1> ;al = subfunction
   636                              <1> ;       00h lock region of file
   637                              <1> ;       01h unlock region of file
   638                              <1> ;ebx = file handle
   639                              <1> ;ecx = start offset of region within file
   640                              <1> ;edi = length of region in bytes
   641 00003619 3C01                <1>     cmp al, 1
   642 0000361B 7757                <1>     ja .badFunction
   643 0000361D 57                  <1>     push rdi
   644 0000361E E844100000          <1>     call derefSFTPtr
   645 00003623 730B                <1>     jnc .validHdl
   646 00003625 58                  <1>     pop rax ;Discard the qword on the stack
   647 00003626 B806000000          <1>     mov eax, errBadHdl
   648 0000362B E95E290000          <1>     jmp extErrExit
   649                              <1> .validHdl:
   650 00003630 84C0                <1>     test al, al ;Check if al = 0
   651 00003632 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   652 00003633 7424                <1>     jz .lockFileRegion
   653 00003635 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   654 0000363B 740B                <1>     jz .unlockShare ;Jump if a local file only
   655 0000363D 50                  <1>     push rax
   656 0000363E B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   657 00003643 CD4F                <1>     int 4Fh
   658 00003645 5B                  <1>     pop rbx
   659 00003646 EB06                <1>     jmp short .exitSelect
   660                              <1> .unlockShare:
   661 00003648 FF15(D1C00300)      <1>     call qword [unlockFileShare]    ;Call share hook
   662                              <1> .exitSelect:
   663 0000364E 0F823A290000        <1>     jc extErrExit
   664 00003654 E927290000          <1>     jmp extGoodExit
   665                              <1> .lockFileRegion:
   666 00003659 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   667 0000365F 740B                <1>     jz .lockShare   ;Jump if a local file only
   668 00003661 50                  <1>     push rax
   669 00003662 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   670 00003667 CD4F                <1>     int 4Fh
   671 00003669 5B                  <1>     pop rbx
   672 0000366A EBE2                <1>     jmp short .exitSelect
   673                              <1> .lockShare:
   674 0000366C FF15(C9C00300)      <1>     call qword [lockFileShare]  ;Call share hook
   675 00003672 EBDA                <1>     jmp short .exitSelect
   676                              <1> .badFunction:
   677 00003674 B801000000          <1>     mov eax, errInvFnc
   678 00003679 668905(E5C30300)    <1>     mov word [errorExCde], ax
   679 00003680 E909290000          <1>     jmp extErrExit
   680                              <1> ;STUB FUNCTIONS
   681                              <1> setHandleCount:    ;ah = 67h
   682 00003685 E904290000          <1>     jmp extErrExit
   683                              <1> 
   684                              <1> ;-----------------------------------:
   685                              <1> ;       Main File IO Routines       :
   686                              <1> ;-----------------------------------:
   687                              <1> renameMain:
   688                              <1> ;Now, creates a special find first block for the source file
   689                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   690                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   691                              <1> ; block. 
   692                              <1> ;Then we search for that file name specifically (again), replacing 
   693                              <1> ; the filename portion of the destination buffer. If it exists or the 
   694                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   695                              <1> ; the new directory entry and delete the original file. 
   696                              <1> ;Input:
   697                              <1> ; filenamePtr1 -> Source path + filename pattern
   698                              <1> ; filenamePtr2 -> New path + filename pattern
   699                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   700 0000368A 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS]
   701 00003691 E8D8230000          <1>     call testCDSNet ;CF=CY => Not net
   702 00003696 7208                <1>     jc .notNet
   703 00003698 B811110000          <1>     mov eax, 1111h
   704 0000369D CD4F                <1>     int 4Fh
   705                              <1>     return
    18                              <2> %%_ret:
    19 0000369F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   706                              <1> .notNet:
   707                              <1> ;First check if both drives are on the same disk
   708 000036A0 8A05(F7C40300)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   709 000036A6 8A25(77C50300)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   710 000036AC 38E0                <1>     cmp al, ah
   711 000036AE 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   712 000036B0 B811000000          <1>     mov eax, errDevUnk
   713 000036B5 F9                  <1>     stc
   714                              <1>     return
    18                              <2> %%_ret:
    19 000036B6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   715                              <1> .sameDrive:
   716                              <1> ;Now we check if either pathsepc is simply X:\,0
   717                              <1> ; If they are, return fail as we cannot rename the root dir
   718 000036B7 E871280000          <1>     call dosCrit1Enter
   719 000036BC 8B05(F7C40300)      <1>     mov eax, dword [buffer1]
   720 000036C2 30C0                <1>     xor al, al
   721 000036C4 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   722 000036C9 750B                <1>     jne .checkpath2
   723                              <1> .accDen:
   724 000036CB B805000000          <1>     mov eax, errAccDen
   725 000036D0 F9                  <1>     stc
   726 000036D1 E9ED010000          <1>     jmp .exit2
   727                              <1> .checkpath2:
   728 000036D6 8B05(77C50300)      <1>     mov eax, dword [buffer2]
   729 000036DC 30C0                <1>     xor al, al
   730 000036DE 3D003A5C00          <1>     cmp eax, 005C3A00h
   731 000036E3 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   732                              <1> ;Now we find first the source file
   733 000036E5 488B35(F7C50300)    <1>     mov rsi, qword [fname1Ptr]
   734 000036EC 4889F7              <1>     mov rdi, rsi
   735 000036EF E8BADCFFFF          <1>     call getFilePath    ;Now hit the disk to search for the file
   736 000036F4 0F82C9010000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   737 000036FA 488D35(33C60300)    <1>     lea rsi, curDirCopy
   738 00003701 488D3D(97C70300)    <1>     lea rdi, renameDir
   739 00003708 B904000000          <1>     mov ecx, fatDirEntry_size/8
   740 0000370D F348A5              <1>     rep movsq   ;Copy directory over
   741 00003710 488D3D(6CC70300)    <1>     lea rdi, renameFFBlk
   742 00003717 E8B8DBFFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   743                              <1> 
   744                              <1>     ;Now we use the destination filename pattern to build the new filename
   745 0000371C 488B3D(FFC50300)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   746 00003723 31C0                <1>     xor eax, eax
   747 00003725 B943000000          <1>     mov ecx, 67
   748 0000372A F3AE                <1>     rep scasb   ;Find the null terminator of the destination path
   749                              <1> .findPattern:
   750 0000372C 48FFCF              <1>     dec rdi
   751 0000372F 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   752 00003732 75F8                <1>     jne .findPattern
   753                              <1> ;rdi points to the pathseparator
   754 00003734 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   755 00003735 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   756                              <1>     ;Now check if the parent directory exists for the destination
   757 00003736 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   758 00003737 FF35(F7C50300)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   759 0000373D 488D35(77C50300)    <1>     lea rsi, buffer2
   760 00003744 4889F7              <1>     mov rdi, rsi
   761 00003747 E85EDCFFFF          <1>     call getDirPath ;We are searching for a directory ONLY
   762 0000374C 8F05(F7C50300)      <1>     pop qword [fname1Ptr]
   763 00003752 5F                  <1>     pop rdi
   764 00003753 0F8275010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
   765 00003759 C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
   766                              <1>     ;rdi now points to the first char of the pattern
   767 0000375D 4889FE              <1>     mov rsi, rdi
   768 00003760 488D3D(BAC60300)    <1>     lea rdi, wcdFcbName
   769 00003767 E8E0DAFFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
   770                              <1>     ;Ensure the destination pattern is not all question marks
   771 0000376C 813D(BAC60300)3F3F- <1>     cmp dword [wcdFcbName], "????"
   771 00003774 3F3F                <1>
   772 00003776 7524                <1>     jne .validRenPattern
   773 00003778 813D(BEC60300)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
   773 00003780 3F3F                <1>
   774 00003782 7518                <1>     jne .validRenPattern
   775 00003784 66813D(C2C60300)3F- <1>     cmp word [wcdFcbName + 8], "??"
   775 0000378C 3F                  <1>
   776 0000378D 750D                <1>     jne .validRenPattern
   777 0000378F 803D(C4C60300)3F    <1>     cmp byte [wcdFcbName + 10], "?"
   778 00003796 0F842D010000        <1>     je .bad ;Access denied buddy ol' pal
   779                              <1> .validRenPattern:
   780                              <1>     ;curDirCopy has information for the destination directory file we will 
   781                              <1>     ; write to. The cluster points to the directory file itself to search in
   782                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
   783 0000379C E86C010000          <1>     call .makeNewName   ;Make new fname in fcbName from asciizname in renFFblk
   784 000037A1 488D35(AEC60300)    <1>     lea rsi, fcbName
   785 000037A8 488D3D(97C70300)    <1>     lea rdi, renameDir
   786 000037AF B90B000000          <1>     mov ecx, 11
   787 000037B4 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
   788 000037B6 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
   789 000037B7 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
   790 000037B8 48BE-               <1>     mov rsi, fcbName
   790 000037BA [AEC6030000000000]  <1>
   791 000037C2 E8CDDAFFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
   792 000037C7 488B35(FFC50300)    <1>     mov rsi, qword [fname2Ptr]
   793 000037CE 4889F7              <1>     mov rdi, rsi
   794 000037D1 E8D8DBFFFF          <1>     call getFilePath    ;This must be a non-existant file
   795 000037D6 0F83F2000000        <1>     jnc .badExit   ;If the file exists, then error
   796 000037DC 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
   797 000037E1 0F85E7000000        <1>     jne .badExit
   798                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
   799 000037E7 0FB715(47C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   800 000037EE 0FB705(4DC60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   801 000037F5 C1E210              <1>     shl edx, 10h
   802 000037F8 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
   803 000037FA E8D2000000          <1>     call .searchForDirSpace
   804 000037FF 0F82C4000000        <1>     jc .bad
   805                              <1> ;dir Entry found, rsi points to space in buffer
   806 00003805 4889F7              <1>     mov rdi, rsi
   807 00003808 488D35(97C70300)    <1>     lea rsi, renameDir
   808 0000380F B904000000          <1>     mov ecx, fatDirEntry_size/8
   809 00003814 F348A5              <1>     rep movsq   ;Copy dir over
   810 00003817 E89FD1FFFF          <1>     call setBufferDirty ;Mark buffer as written to now
   811                              <1> ;Now we delete the original directory entry
   812 0000381C 8B05(79C70300)      <1>     mov eax, dword [renameFFBlk + ffBlock.dirOffset]
   813 00003822 C1E005              <1>     shl eax, 5  ;Turn into byte offset
   814 00003825 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB]
   815 0000382C 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   816 00003830 F7F1                <1>     div ecx ;Turn byte in clust offset into sec in clust offset and byte offset
   817 00003832 668905(5DC70300)    <1>     mov word [dirSect], ax
   818 00003839 C1EA05              <1>     shr edx, 5  ;Turn into 32 byte offset
   819 0000383C 8915(5FC70300)      <1>     mov dword [dirEntry], edx
   820 00003842 8B05(7DC70300)      <1>     mov eax, dword [renameFFBlk + ffBlock.parDirClus]
   821 00003848 E817D4FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   822 0000384D 0FB715(5DC70300)    <1>     movzx edx, word [dirSect]
   823 00003854 4801D0              <1>     add rax, rdx
   824                              <1>     ;rax now has the sector number to read in
   825 00003857 E8EAD2FFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   826 0000385C 726B                <1>     jc .bad
   827 0000385E 8B15(5FC70300)      <1>     mov edx, dword [dirEntry]   ;Get the dir entry
   828 00003864 C1E205              <1>     shl edx, 5  ;Get as byte offset
   829 00003867 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;rsi points to old dir
   830 0000386C 0FB605(DDC60300)    <1>     movzx eax, byte [delChar]
   831 00003873 8806                <1>     mov byte [rsi], al  ;Store the del char there
   832 00003875 E841D1FFFF          <1>     call setBufferDirty ;Mark buffer as written to now
   833                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
   834                              <1>     ;If it does, we find next. If not, we exit
   835 0000387A B03F                <1>     mov al, "?"
   836 0000387C 488B3D(F7C50300)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
   837 00003883 E8A0230000          <1>     call strlen ;Get in rcx to get the length of the string
   838 00003888 F3AE                <1>     rep scasb
   839 0000388A 67E335              <1>     jecxz .exit  ;If source name has no wildcards, exit
   840 0000388D B90B000000          <1>     mov ecx, 11
   841 00003892 8D3D(BAC60300)      <1>     lea edi, wcdFcbName
   842 00003898 F3AE                <1>     rep scasb
   843 0000389A 67E325              <1>     jecxz .exit
   844                              <1>     ;Here we gotta do a find next now!
   845 0000389D FF35(F1C30300)      <1>     push qword [currentDTA]
   846 000038A3 488D3D(6CC70300)    <1>     lea rdi, renameFFBlk
   847 000038AA 48893D(F1C30300)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
   848 000038B1 E8CED6FFFF          <1>     call findNextMain
   849 000038B6 8F05(F1C30300)      <1>     pop qword [currentDTA]
   850 000038BC 0F83DAFEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
   851                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
   852                              <1> .exit:
   853 000038C2 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
   854                              <1> .exit2: ;Bad exit before we push qword on stack 
   855 000038C3 E86F260000          <1>     call dosCrit1Exit
   856                              <1>     return
    18                              <2> %%_ret:
    19 000038C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   857                              <1> .bad:
   858 000038C9 B805000000          <1>     mov eax, errAccDen  ;Temp return code
   859                              <1> .badExit:
   860 000038CE F9                  <1>     stc
   861 000038CF EBF1                <1>     jmp short .exit
   862                              <1> 
   863                              <1> .searchForDirSpace:
   864                              <1> ;Input: eax = First directory to search 
   865 000038D1 8905(59C70300)      <1>     mov dword [dirClustA], eax
   866 000038D7 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   867 000038D9 668905(5DC70300)    <1>     mov word [dirSect], ax
   868 000038E0 8905(5FC70300)      <1>     mov dword [dirEntry], eax
   869 000038E6 E84EE5FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   870 000038EB 731C                <1>     jnc .dirEntryFnd
   871 000038ED 813D(55C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   871 000038F5 0000                <1>
   872 000038F7 7412                <1>     je .searchBad ;Set CF and exit
   873 000038F9 E84CE6FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   874 000038FE 720B                <1>     jc .searchBad
   875 00003900 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   876 00003905 7404                <1>     je .searchBad
   877                              <1>     ;Else eax = Newly allocated cluster
   878 00003907 EBC8                <1>     jmp short .searchForDirSpace
   879                              <1> .dirEntryFnd:
   880 00003909 F8                  <1>     clc
   881                              <1>     return
    18                              <2> %%_ret:
    19 0000390A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   882                              <1> .searchBad:
   883 0000390B F9                  <1>     stc
   884                              <1>     return
    18                              <2> %%_ret:
    19 0000390C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   885                              <1> 
   886                              <1> .makeNewName:
   887                              <1> ;Copy old filename as initial pattern into fcbName
   888                              <1> ;Then copies wcfcb letter by letter unless a ? is encountered
   889 0000390D 51                  <1>     push rcx
   890 0000390E 56                  <1>     push rsi
   891 0000390F 57                  <1>     push rdi
   892 00003910 488D35(97C70300)    <1>     lea rsi, renameDir  ;Copy the source filename over
   893 00003917 488D3D(AEC60300)    <1>     lea rdi, fcbName
   894 0000391E 57                  <1>     push rdi    ;Preserve this as the destination for copy
   895 0000391F B90B000000          <1>     mov ecx, 11
   896 00003924 F3A4                <1>     rep movsb
   897 00003926 5F                  <1>     pop rdi
   898 00003927 488D35(BAC60300)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
   899                              <1> .mnnLp:
   900 0000392E AC                  <1>     lodsb
   901 0000392F 3C3F                <1>     cmp al, "?" ;Is it a wc?
   902 00003931 7404                <1>     je .mnnWC   ;Skip overriding this char
   903 00003933 AA                  <1>     stosb   ;Store new char and go forwards by one
   904 00003934 48FFCF              <1>     dec rdi ;Now go back by one
   905                              <1> .mnnWC:
   906 00003937 48FFC7              <1>     inc rdi ;Goto next letter
   907 0000393A FFC1                <1>     inc ecx
   908 0000393C 81F90B000000        <1>     cmp ecx, 11
   909 00003942 75EA                <1>     jne .mnnLp
   910 00003944 5F                  <1>     pop rdi
   911 00003945 5E                  <1>     pop rsi
   912 00003946 59                  <1>     pop rcx
   913                              <1>     return  ;Return new filename in fcbName
    18                              <2> %%_ret:
    19 00003947 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   914                              <1> 
   915                              <1> outerDeleteMain:
   916                              <1> ;Internal current dir must be populated with dir entry
   917                              <1> ; and internal DOS directory variables now point to this entry.
   918                              <1> ;Checks if the file is a char device or read only.
   919                              <1> ;Input: curDirCopy must has dir for the file to be deleted
   920                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
   921                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
   922                              <1> ;         CF=NC => File deleted
   923 00003948 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS]
   924 0000394F E81A210000          <1>     call testCDSNet ;CF=CY => Not net
   925 00003954 7208                <1>     jc .notNet
   926 00003956 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
   927 0000395B CD4F                <1>     int 4Fh
   928                              <1>     return
    18                              <2> %%_ret:
    19 0000395D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   929                              <1> .notNet:
   930 0000395E B805000000          <1>     mov eax, errAccDen  
   931 00003963 F605(3EC60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   932 0000396A 7551                <1>     jnz .exitBad  ;Can't delete a char dev
   933 0000396C F605(3EC60300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
   934 00003973 7548                <1>     jnz .exitBad  ;Can't delete a read only file
   935 00003975 E845000000          <1>     call deleteMain
   936 0000397A 7241                <1>     jc .exitBad
   937                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
   938 0000397C B03F                <1>     mov al, "?"
   939 0000397E 488D3D(AEC60300)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
   940 00003985 B90B000000          <1>     mov ecx, 11
   941 0000398A F3AE                <1>     rep scasb   ;Scan for the wildcard char
   942 0000398C 85C9                <1>     test ecx, ecx    ;If ecx != 0, then a wildcard found, we delete more
   943 0000398E 7502                <1>     jnz .serverWCloop   ;This is not possible if entered via 21/41h
   944 00003990 F8                  <1>     clc
   945                              <1>     return  ;Return ok!
    18                              <2> %%_ret:
    19 00003991 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   946                              <1> .serverWCloop:
   947 00003992 FF35(F1C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   948 00003998 488D3D(08C60300)    <1>     lea rdi, dosffblock
   949 0000399F 57                  <1>     push rdi    ;Push this address onto the stack
   950 000039A0 E82FD9FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
   951 000039A5 8F05(F1C30300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
   952 000039AB E8D4D5FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
   953 000039B0 8F05(F1C30300)      <1>     pop qword [currentDTA]
   954 000039B6 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
   955 000039BB 73D5                <1>     jnc .serverWCloop     
   956                              <1> ;Stop as soon as an error occurs
   957                              <1> .exitBad:
   958 000039BD F9                  <1>     stc
   959                              <1>     return
    18                              <2> %%_ret:
    19 000039BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   960                              <1> 
   961                              <1> deleteMain:
   962                              <1> ;Now unlink FAT chain and then clear directory entry
   963                              <1> ;Get the start cluster of this file
   964                              <1> ;Input:
   965                              <1> ; The file must have NOT be read-only.
   966                              <1> ; If the CDS is NOT a net cds then the following must hold:
   967                              <1> ;     - curDirCopy must be filled with the file directory information
   968                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
   969                              <1> ;Output: CF=NC => Success, 
   970                              <1> ; If not net CDS:
   971                              <1> ;   rsi keeps pointing to directory entry.
   972                              <1> ;   al = First char of the file that was deleted.
   973                              <1> ;        CF=CY => Error
   974                              <1> ;The dir buffer must be marked as referenced once we are done with it
   975 000039BF 52                  <1>     push rdx
   976 000039C0 0FB715(4DC60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   977 000039C7 0FB705(47C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   978 000039CE C1E010              <1>     shl eax, 10h
   979 000039D1 09D0                <1>     or eax, edx ;Add low bits to eax
   980 000039D3 5A                  <1>     pop rdx
   981 000039D4 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
   982 000039D6 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
   983 000039D8 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
   984 000039DF E824D4FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
   985 000039E4 720F                <1>     jc .exit
   986                              <1> .skipUnlink:
   987                              <1>     ;Now replace the first char of the directory to 0E5h
   988                              <1>     ;Get the disk directory in a buffer to manipulate the entry
   989 000039E6 E862E4FFFF          <1>     call getDiskDirectoryEntry
   990 000039EB 7208                <1>     jc .exit
   991 000039ED 8A05(DDC60300)      <1>     mov al, byte [delChar]
   992 000039F3 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
   993                              <1>     ;CF must be clear
   994                              <1> .exit:
   995                              <1>     return
    18                              <2> %%_ret:
    19 000039F5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   996                              <1> 
   997                              <1> openMain:
   998                              <1> ;Input: ax (formally al) = Open mode
   999                              <1> ;       [currentSFT] = SFT we are building
  1000                              <1> ;       [workingCDS] = CDS of drive to access
  1001                              <1> ;       [workingDPB] = DPB of drive to access
  1002                              <1> ;Ouput: CF=CY => Error, eax has error code
  1003 000039F6 E84F000000          <1>     call .setOpenMode
  1004                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000039FB 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1005 000039FD 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  1006 00003A04 488B35(E7C60300)    <1>     mov rsi, qword [workingCDS]
  1007 00003A0B 30E4                <1>     xor ah, ah  ;al has the access mode
  1008 00003A0D 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1009 00003A11 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1010 00003A18 750A                <1>     jne .notNet
  1011                              <1> .redirOpen:
  1012 00003A1A 50                  <1>     push rax    ;Push open mode onto stack
  1013 00003A1B B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
  1014 00003A20 CD4F                <1>     int 4Fh
  1015 00003A22 58                  <1>     pop rax
  1016                              <1>     return
    18                              <2> %%_ret:
    19 00003A23 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1017                              <1> .notNet:
  1018 00003A24 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1019 00003A2A 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1020 00003A2C E8FC240000          <1>     call dosCrit1Enter
  1021 00003A31 C605(DCC60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1022 00003A38 C605(DDC60300)E5    <1>     mov byte [delChar], 0E5h
  1023 00003A3F E8C3000000          <1>     call buildSFTEntry  ;ax must have the open mode
  1024                              <1>     ;Here we put Share mode stuff
  1025 00003A44 E8EE240000          <1>     call dosCrit1Exit
  1026                              <1>     return
    18                              <2> %%_ret:
    19 00003A49 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1027                              <1> .setOpenMode:
  1028                              <1> ;Input: al = Open mode for the file open
  1029 00003A4A 8805(D2C60300)      <1>     mov byte [fileOpenMd], al
  1030 00003A50 53                  <1>     push rbx
  1031 00003A51 88C3                <1>     mov bl, al
  1032 00003A53 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1033 00003A56 803D(D7C60300)FF    <1>     cmp byte [dosInvoke], -1    
  1034 00003A5D 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1035 00003A5F 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1036 00003A62 7405                <1>     je .s2
  1037                              <1> .s1:
  1038 00003A64 80FB40              <1>     cmp bl, denyNoneShare
  1039 00003A67 770D                <1>     ja .somBad
  1040                              <1> .s2:
  1041 00003A69 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1042 00003A6B 80E30F              <1>     and bl, 0Fh
  1043 00003A6E 80FB02              <1>     cmp bl, RWAccess
  1044 00003A71 7703                <1>     ja .somBad
  1045 00003A73 5B                  <1>     pop rbx
  1046 00003A74 F8                  <1>     clc
  1047                              <1>     return
    18                              <2> %%_ret:
    19 00003A75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1048                              <1> .somBad:
  1049 00003A76 5B                  <1>     pop rbx
  1050 00003A77 B80C000000          <1>     mov eax, errAccCde
  1051 00003A7C F9                  <1>     stc
  1052                              <1>     return
    18                              <2> %%_ret:
    19 00003A7D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1053                              <1> createNewMain:
  1054                              <1> ;Input: ax (formally al) = File attributes
  1055                              <1> ;       [currentSFT] = SFT we are building
  1056                              <1> ;       [workingCDS] = CDS of drive to access
  1057                              <1> ;       [workingDPB] = DPB of drive to access
  1058 00003A7E 0FB6C0              <1>     movzx eax, al
  1059 00003A81 F605(D9C60300)FF    <1>     test byte [fileExist], -1
  1060 00003A88 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1061 00003A8A B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1062 00003A8F F9                  <1>     stc
  1063                              <1>     return
    18                              <2> %%_ret:
    19 00003A90 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1064                              <1> createMain:
  1065                              <1> ;Input: ax (formally al) = File attributes
  1066                              <1> ;       [currentSFT] = SFT we are building
  1067                              <1> ;       [workingCDS] = CDS of drive to access
  1068                              <1> ;       [workingDPB] = DPB of drive to access
  1069 00003A91 0FB6C0              <1>     movzx eax, al
  1070                              <1> .createNewEP:
  1071 00003A94 A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1072 00003A96 750A                <1>     jnz .invalidAttrib
  1073 00003A98 A808                <1>     test al, dirVolumeID
  1074 00003A9A 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1075 00003A9C 0C20                <1>     or al, dirArchive   ;Set archive bit
  1076 00003A9E A810                <1>     test al, dirDirectory   
  1077 00003AA0 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1078                              <1> .invalidAttrib:
  1079 00003AA2 B805000000          <1>     mov eax, errAccDen
  1080 00003AA7 F9                  <1>     stc
  1081                              <1>     return
    18                              <2> %%_ret:
    19 00003AA8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1082                              <1> .validAttr:
  1083 00003AA9 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  1084 00003AB0 488B35(E7C60300)    <1>     mov rsi, qword [workingCDS]
  1085 00003AB7 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1086 00003ABE 750A                <1>     jne .diskFile
  1087 00003AC0 50                  <1>     push rax    ;Save the new attributes
  1088 00003AC1 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1089 00003AC6 CD4F                <1>     int 4Fh
  1090 00003AC8 5B                  <1>     pop rbx
  1091                              <1>     return
    18                              <2> %%_ret:
    19 00003AC9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1092                              <1> .diskFile:
  1093 00003ACA 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1094 00003AD0 740A                <1>     jz .hardFile
  1095 00003AD2 50                  <1>     push rax    ;Save the new attributes
  1096 00003AD3 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1097 00003AD8 CD4F                <1>     int 4Fh
  1098 00003ADA 5B                  <1>     pop rbx
  1099                              <1>     return
    18                              <2> %%_ret:
    19 00003ADB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1100                              <1> .hardFile:
  1101 00003ADC 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1102 00003AE2 C605(DCC60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1103 00003AE9 C605(DDC60300)E5    <1>     mov byte [delChar], 0E5h
  1104 00003AF0 E838240000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1105 00003AF5 50                  <1>     push rax    ;Save the file attributes on stack
  1106 00003AF6 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1107 00003AFB E807000000          <1>     call buildSFTEntry
  1108 00003B00 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1109                              <1>     ;Here we put Share mode stuff
  1110 00003B01 E831240000          <1>     call dosCrit1Exit
  1111                              <1>     return
    18                              <2> %%_ret:
    19 00003B06 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1112                              <1> buildSFTEntry:
  1113                              <1> ;Called in a critical section.
  1114                              <1> ;Input: al = Open mode
  1115                              <1> ;       STACK: File attributes if creating a file
  1116                              <1> ;       [currentSFT] = SFT we are building
  1117                              <1> ;       [workingCDS] = CDS of drive to access
  1118                              <1> ;       [workingDPB] = DPB of drive to access
  1119                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1120                              <1> ;
  1121                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1122                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1123                              <1> ;        If CF=CY: - Return fail
  1124                              <1> ;
  1125                              <1> ;
  1126                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1127                              <1> ;   If not, create disk entry.
  1128                              <1> ;Check if the device was a char device by checking curDirCopy.
  1129                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1130                              <1> 
  1131                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1132                              <1> ; to start of file fields of the SFT
  1133 00003B07 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1134 00003B08 4889E5              <1>     mov rbp, rsp
  1135 00003B0B 488B35(07C70300)    <1>     mov rsi, qword [currentSFT]
  1136                              <1> ;Set the open mode
  1137 00003B12 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1138                              <1> ;Get current time
  1139 00003B16 E874EEFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1140 00003B1B E85AEFFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1141 00003B20 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1142                              <1> ;Set current Owner
  1143 00003B23 488B05(F9C30300)    <1>     mov rax, qword [currentPSP]
  1144 00003B2A 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1145                              <1> ;Set file pointer to first byte
  1146 00003B2E C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1147                              <1> ;Common fields set
  1148 00003B35 F605(DCC60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1149 00003B3C 0F847A010000        <1>     jz .openProc
  1150                              <1>     ;Here if Creating a file.
  1151 00003B42 F605(3EC60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1152 00003B49 0F8576010000        <1>     jnz .charDev
  1153 00003B4F F605(D9C60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1154 00003B56 0F84A9000000        <1>     jz .createFile
  1155                              <1>     ;Here disk file exists, so recreating the file.
  1156 00003B5C E85EFEFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1157                              <1>     ;al has the char for the filename
  1158                              <1>     ;Sets vars for the sector/offset into the sector
  1159 00003B61 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  1160 00003B68 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1161 00003B6A 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1162                              <1>     ;al has file attributes.
  1163 00003B6E 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1164 00003B70 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1165 00003B73 31C0                <1>     xor eax, eax
  1166                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1167 00003B75 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1168 00003B79 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1169 00003B7D 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1170 00003B80 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1171 00003B83 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1172 00003B86 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1173                              <1> 
  1174 00003B89 57                  <1>     push rdi    ;Save SFT pointer
  1175 00003B8A 488D3D(33C60300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1176 00003B91 B920000000          <1>     mov ecx, fatDirEntry_size
  1177 00003B96 F3A4                <1>     rep movsb
  1178 00003B98 E81ECEFFFF          <1>     call setBufferDirty ;We wrote to this buffer
  1179 00003B9D 5F                  <1>     pop rdi
  1180                              <1> .createCommon:  ;rdi must point to the current SFT 
  1181                              <1>     ;Now populate the remaining SFT fields 
  1182 00003B9E 488D35(33C60300)    <1>     lea rsi, curDirCopy
  1183 00003BA5 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1184 00003BA8 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1185 00003BAB 488B05(1BC70300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1186 00003BB2 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1187 00003BB6 0FB705(23C70300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1188 00003BBD C0E805              <1>     shr al, 5   ;Divide by 5 to get directory entry number
  1189 00003BC0 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1190 00003BC3 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1191 00003BC6 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1192 00003BC9 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1193 00003BCD 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1194 00003BD1 C1E210              <1>     shl edx, 10h
  1195 00003BD4 09D0                <1>     or eax, edx
  1196 00003BD6 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1197                              <1> 
  1198 00003BD9 31C0                <1>     xor eax, eax
  1199                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1200 00003BDB 8A05(DEC60300)      <1>     mov al, byte [workingDrv]
  1201 00003BE1 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1202 00003BE5 488B05(DFC60300)    <1>     mov rax, qword [workingDPB]
  1203 00003BEC 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1204                              <1>     ;Last thing, copy the filename over
  1205                              <1>     ;Now save the name
  1206                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1207 00003BF0 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1208 00003BF4 488D35(33C60300)    <1>     lea rsi, curDirCopy
  1209 00003BFB 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1210 00003BFD 66A5                <1>     movsw
  1211 00003BFF A4                  <1>     movsb
  1212                              <1>     ;SFT filled, now we open on the driver if it supports it
  1213 00003C00 E905010000          <1>     jmp .openDriver
  1214                              <1> .createFile:
  1215                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1216                              <1>     ;rsi points to current sda entry
  1217 00003C05 488D3D(33C60300)    <1>     lea rdi, curDirCopy
  1218                              <1>     ;Clear out the dir entry
  1219 00003C0C 57                  <1>     push rdi
  1220 00003C0D B904000000          <1>     mov ecx, 4
  1221 00003C12 31C0                <1>     xor eax, eax
  1222 00003C14 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1223 00003C17 5F                  <1>     pop rdi
  1224                              <1>     ;Copy the FCB name over    
  1225 00003C18 56                  <1>     push rsi
  1226 00003C19 57                  <1>     push rdi
  1227 00003C1A B90B000000          <1>     mov ecx, 11
  1228 00003C1F 488D35(AEC60300)    <1>     lea rsi, fcbName
  1229 00003C26 F3A4                <1>     rep movsb   ;Move over the FCB name
  1230 00003C28 5F                  <1>     pop rdi
  1231 00003C29 5E                  <1>     pop rsi
  1232                              <1> 
  1233 00003C2A 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1234                              <1>     ;al has file attributes.
  1235 00003C2E 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1236 00003C30 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1237 00003C33 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1238 00003C36 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1239 00003C39 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1240 00003C3C 8B05(55C70300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1241                              <1> .searchForDirSpace:
  1242 00003C42 8905(59C70300)      <1>     mov dword [dirClustA], eax
  1243 00003C48 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1244 00003C4A 668905(5DC70300)    <1>     mov word [dirSect], ax
  1245 00003C51 8905(5FC70300)      <1>     mov dword [dirEntry], eax
  1246 00003C57 57                  <1>     push rdi
  1247 00003C58 E8DCE1FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1248 00003C5D 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1249 00003C5E 7328                <1>     jnc .dirEntryFnd
  1250 00003C60 813D(55C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1250 00003C68 0000                <1>
  1251 00003C6A 0F84CB000000        <1>     je .bad ;Set CF and exit
  1252 00003C70 E8D5E2FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1253 00003C75 0F82BE000000        <1>     jc .exit
  1254 00003C7B 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1255 00003C80 0F84B5000000        <1>     je .bad
  1256                              <1>     ;Else eax = Newly allocated cluster
  1257 00003C86 EBBA                <1>     jmp short .searchForDirSpace
  1258                              <1> .dirEntryFnd:
  1259 00003C88 4887FE              <1>     xchg rdi, rsi
  1260 00003C8B B904000000          <1>     mov ecx, 4
  1261 00003C90 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1262 00003C93 E823CDFFFF          <1>     call setBufferDirty ;We wrote to this buffer
  1263 00003C98 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  1264 00003C9F E9FAFEFFFF          <1>     jmp .createCommon
  1265                              <1> .open:
  1266                              <1> ;curdircopy has a copy of the disk file directory
  1267                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1268 00003CA4 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  1269 00003CAB 488B2D(DFC60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1270                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1271 00003CB2 E896E1FFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1272 00003CB7 E9E2FEFFFF          <1>     jmp .createCommon
  1273                              <1> .openProc:
  1274                              <1>     ;Here if Opening a file.
  1275 00003CBC F605(3EC60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1276 00003CC3 74DF                <1>     jz .open
  1277                              <1> .charDev:
  1278 00003CC5 488B05(33C60300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1279 00003CCC E8B9200000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1280 00003CD1 7307                <1>     jnc .notBadCharDevName
  1281 00003CD3 B805000000          <1>     mov eax, errAccDen
  1282 00003CD8 EB5F                <1>     jmp short .exit ;CF already set
  1283                              <1> .notBadCharDevName:
  1284 00003CDA 488B35(07C70300)    <1>     mov rsi, qword [currentSFT]
  1285 00003CE1 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1286 00003CE5 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1287 00003CE9 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1288 00003CEC 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1289 00003CEF 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1290 00003CF3 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1291 00003CFA 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1292 00003CFE B820202020          <1>     mov eax, "    "
  1293 00003D03 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1294 00003D07 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1295                              <1> .openDriver:
  1296 00003D0A 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  1297 00003D11 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the ptr here
  1298 00003D15 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1299 00003D1B 7508                <1>     jnz .charDevOpen
  1300 00003D1D 0FB64601            <1>     movzx eax, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1301 00003D21 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1302                              <1> .charDevOpen:
  1303 00003D25 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1304 00003D2B 740C                <1>     jz .exit  ;If not, immediately jump to exit, all is well
  1305                              <1>     ;rsi has device driver ptr for device, make request
  1306 00003D2D 53                  <1>     push rbx
  1307 00003D2E E8D51C0000          <1>     call primReqOpenSetup  ;rbx gets header ptr, rsi has driver ptr
  1308 00003D33 E884190000          <1>     call goDriver   ;Make request
  1309 00003D38 5B                  <1>     pop rbx
  1310                              <1> .exit:
  1311 00003D39 5D                  <1>     pop rbp
  1312                              <1>     return
    18                              <2> %%_ret:
    19 00003D3A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1313                              <1> .bad:
  1314 00003D3B F9                  <1>     stc
  1315 00003D3C EBFB                <1>     jmp short .exit
  1316                              <1> closeMain: ;Int 4Fh AX=1201h
  1317                              <1> ;Gets the directory entry for a file
  1318                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1319                              <1> ;If CF=CY on return: Error, return error with al = error code
  1320                              <1> ;Preserve all regs except eax and rdi
  1321                              <1> ; If CF=NC on return: eax = Unknown
  1322                              <1> ;                     rdi = current SFT ptr
  1323 00003D3E 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1324 00003D45 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1325 00003D4B 7408                <1>     jz .physical
  1326                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1327 00003D4D B806110000          <1>     mov eax, 1106h  ;Make request
  1328 00003D52 CD4F                <1>     int 4Fh ;Beep!
  1329                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 00003D54 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1330                              <1> .physical:  
  1331                              <1> ; We make a request to the dev dir to close the device
  1332                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1333 00003D55 E8D3210000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1334 00003D5A 53                  <1>     push rbx
  1335 00003D5B 56                  <1>     push rsi
  1336 00003D5C 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1337 00003D60 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1338 00003D66 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1339                              <1>     ;rsi has DPB pointer here
  1340                              <1>     ;rdi has the SFT pointer
  1341 00003D68 55                  <1>     push rbp
  1342 00003D69 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1343 00003D6C E8F51C0000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1344 00003D71 E842E1FFFF          <1>     call updateDirectoryEntryForFile
  1345 00003D76 5D                  <1>     pop rbp
  1346                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1347 00003D77 722F                <1>     jc .exit
  1348 00003D79 E821CEFFFF          <1>     call flushFile
  1349 00003D7E 7228                <1>     jc .exit    ;If something went wrong, exit
  1350 00003D80 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1351 00003D84 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1352                              <1> .charClose:
  1353                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1354                              <1>     ;We now decrement handle count in SFT structure
  1355 00003D88 E866090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1356 00003D8D 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1357 00003D90 7503                <1>     jnz .driverClose
  1358 00003D92 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1359                              <1> .driverClose:
  1360 00003D95 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1361                              <1>     ;and if the device is a disk device, cl will have the unit number
  1362                              <1>     ;We first check if the driver supports oper/close requests
  1363 00003D96 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1364 00003D9C 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
  1365                              <1>     ;rsi has device driver ptr for device, make request
  1366 00003D9E E86A1C0000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
  1367 00003DA3 E814190000          <1>     call goDriver   ;Make request
  1368                              <1>     ;Don't check the status here, as we are simply informing the driver 
  1369                              <1>     ; of an operation. Nothing should be able to go wrong. 
  1370                              <1>     ;Functionally, an ignore if anything does go wrong.
  1371                              <1> .exit:
  1372 00003DA8 5E                  <1>     pop rsi
  1373 00003DA9 5B                  <1>     pop rbx
  1374 00003DAA E888210000          <1>     call dosCrit1Exit
  1375                              <1>     return
    18                              <2> %%_ret:
    19 00003DAF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1376                              <1> 
  1377                              <1> readBytes:
  1378                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1379                              <1> ;Input: ecx = Number of bytes to read
  1380                              <1> ;Output: ecx = Number of bytes read
  1381                              <1> ;Number of bytes read 
  1382                              <1> ;If CF=CY, return with error code in ax
  1383 00003DB0 E811070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1384 00003DB5 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1385 00003DB9 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1386 00003DBB 3C01                <1>     cmp al, WriteAccess
  1387 00003DBD 7509                <1>     jne .readable
  1388 00003DBF B805000000          <1>     mov eax, errAccDen
  1389 00003DC4 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1390 00003DC6 F9                  <1>     stc
  1391                              <1>     return
    18                              <2> %%_ret:
    19 00003DC7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1392                              <1> .readable:
  1393 00003DC8 E83A070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1394 00003DCD 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1395 00003DD0 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1396 00003DD6 740A                <1>     jz .notRedir
  1397 00003DD8 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1398 00003DDD CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1399                              <1>     return 
    18                              <2> %%_ret:
    19 00003DDF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1400                              <1> .exitOk:
  1401 00003DE0 F8                  <1>     clc
  1402                              <1>     return 
    18                              <2> %%_ret:
    19 00003DE1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1403                              <1> .notRedir:
  1404 00003DE2 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1405 00003DE8 7510                <1>     jnz readCharDev
  1406 00003DEA E83E210000          <1>     call dosCrit1Enter
  1407 00003DEF E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1408 00003DF4 E83E210000          <1>     call dosCrit1Exit
  1409                              <1>     return 
    18                              <2> %%_ret:
    19 00003DF9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1410                              <1> readCharDev:
  1411                              <1> ;rdi points to sft for char dev to read
  1412                              <1> ;ecx has the number of bytes to transfer
  1413                              <1> ;Vars have been set up and DTA has the transfer address
  1414                              <1> ;Returns in ecx, the actual bytes transferred
  1415                              <1> ;If CF=CY, return with error code in ax
  1416 00003DFA C605(E4C30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1417 00003E01 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1418 00003E05 488B3D(F1C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1419 00003E0C F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1420 00003E0F 0F8463020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1421 00003E15 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1422 00003E18 7407                <1>     jz .notNul
  1423                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1424                              <1>     ;NUL never transfers bytes 
  1425 00003E1A 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1426 00003E1C E957020000          <1>     jmp readExitOk    ;Goto exit
  1427                              <1> .notNul:
  1428 00003E21 F6C320              <1>     test bl, charDevBinary
  1429 00003E24 0F857F000000        <1>     jnz .binary
  1430                              <1>     ;Here if the device is in ASCII mode
  1431 00003E2A F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1432 00003E2D 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1433                              <1> .consoleInput:
  1434                              <1>     ;Console input here
  1435 00003E33 E843E7FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1436                              <1>     ;Get current offset into buffer (if one exists)
  1437 00003E38 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
  1438 00003E3F 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1439 00003E42 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1440 00003E44 803D(28C30300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1441 00003E4B 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1442                              <1>     ;Else, reset the buffer
  1443 00003E4D 66C705(28C30300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1443 00003E55 FF                  <1>
  1444                              <1> .oldBuf:
  1445                              <1> ;Preserve the dta and number of chars to tfr
  1446 00003E56 51                  <1>     push rcx
  1447 00003E57 57                  <1>     push rdi
  1448 00003E58 488D15(28C30300)    <1>     lea rdx, vConInBuf
  1449 00003E5F E837E7FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1450 00003E64 5F                  <1>     pop rdi
  1451 00003E65 59                  <1>     pop rcx
  1452 00003E66 488D35(2AC30300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1453 00003E6D 803E1A              <1>     cmp byte [rsi], EOF
  1454 00003E70 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1455 00003E72 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1456 00003E75 B00A                <1>     mov al, LF
  1457 00003E77 E8B1E2FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1458 00003E7C 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1459 00003E7E EB18                <1>     jmp short .exit
  1460                              <1> .tfrBuf:
  1461 00003E80 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1462 00003E81 AA                  <1>     stosb
  1463 00003E82 3C0D                <1>     cmp al, CR 
  1464 00003E84 7503                <1>     jne .noCRLF
  1465 00003E86 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1466                              <1> .noCRLF:
  1467 00003E89 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1468 00003E8B E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1469 00003E8D 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1470                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1471 00003E8F E899E2FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1472 00003E94 31F6                <1>     xor esi, esi
  1473 00003E96 0C01                <1>     or al, 1    ;Set ZF = NZ
  1474                              <1> .exit:
  1475 00003E98 E8F6E6FFFF          <1>     call vConRetDriver
  1476 00003E9D 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1477 00003EA4 E9CF010000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1478                              <1> 
  1479                              <1> .binary:
  1480                              <1>     ;Setup registers for transfer
  1481 00003EA9 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1482 00003EAC 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1483                              <1>     ;ecx has the number of bytes to transfer directly
  1484 00003EAF E8A81A0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1485 00003EB4 488B35(DFC60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1486 00003EBB E8FC170000          <1>     call goDriver   ;Make the request
  1487 00003EC0 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1488 00003EC3 0FB73D(9DC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1489 00003ECA F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1490 00003ED0 7422                <1>     jz .binNoError
  1491                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1492 00003ED2 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1493 00003ED4 E8BD160000          <1>     call charDevErr   ;ah = has part of the error 
  1494                              <1>     ;al now has the response
  1495 00003ED9 3C00                <1>     cmp al, critIgnore
  1496 00003EDB 7417                <1>     je .binNoError ;Simply proceed as normal
  1497 00003EDD 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1498 00003EE0 3C03                <1>     cmp al, critFail
  1499 00003EE2 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1500                              <1>     ;Fallthrough here for fail!
  1501                              <1> .failExit:
  1502 00003EE4 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  1503 00003EEB 31C9                <1>     xor ecx, ecx
  1504 00003EED B805000000          <1>     mov eax, errAccDen
  1505 00003EF2 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1506                              <1>     return
    18                              <2> %%_ret:
    19 00003EF3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1507                              <1> .binNoError:
  1508                              <1>     ;Get number of bytes transferred into 
  1509 00003EF4 8B05(B0C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1510 00003EFA F7D8                <1>     neg eax ;make it into -eax
  1511 00003EFC 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1512                              <1>     ;ecx now has bytes left to transfer
  1513 00003F00 50                  <1>     push rax    ;Save value on stack
  1514 00003F01 31C0                <1>     xor eax, eax ;Set ZF
  1515 00003F03 FFC0                <1>     inc eax ;Clear ZF
  1516 00003F05 58                  <1>     pop rax ;Get back the original value
  1517 00003F06 E96D010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1518                              <1> .generalASCII:
  1519                              <1>     ;ecx has bytes to transfer here
  1520                              <1>     ;Setup registers for transfer
  1521 00003F0B 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1522 00003F0E 51                  <1>     push rcx
  1523 00003F0F B901000000          <1>     mov ecx, 1  ;Get one char
  1524 00003F14 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1525 00003F17 E8401A0000          <1>     call primReqReadSetup   ;Setup request
  1526 00003F1C 59                  <1>     pop rcx
  1527                              <1>     ;rbx now has request header ptr
  1528 00003F1D 488B35(DFC60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1529                              <1> .asciiReadChar:
  1530 00003F24 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1531 00003F27 E8D3E5FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1532 00003F2C E88B170000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1533 00003F31 0FB73D(9DC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1534 00003F38 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1535 00003F3E 741E                <1>     jz .asciiNoError
  1536 00003F40 E851160000          <1>     call charDevErr    ;Call Int 44h
  1537                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1538 00003F45 C705(B0C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1538 00003F4D 0000                <1>
  1539 00003F4F 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1540 00003F52 3C03                <1>     cmp al, critFail
  1541 00003F54 748E                <1>     je .failExit
  1542 00003F56 3C01                <1>     cmp al, critRetry
  1543 00003F58 74CA                <1>     je .asciiReadChar
  1544                              <1>     ;Ignore here, pretend NULL CHAR was read
  1545 00003F5A 30C0                <1>     xor al, al
  1546 00003F5C EB15                <1>     jmp short .asciiIgnoreEP
  1547                              <1> .asciiNoError:
  1548                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1549                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1550                              <1> ;Preserve RBX, RSI
  1551                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1552 00003F5E 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1553 00003F61 813D(B0C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1553 00003F69 0000                <1>
  1554 00003F6B 0F8507010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1555 00003F71 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1556                              <1> .asciiIgnoreEP:
  1557 00003F73 48FF05(A8C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1558 00003F7A 48FFC7              <1>     inc rdi ;Also advance register pointer
  1559 00003F7D 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1560 00003F7F 0F84F3000000        <1>     je readExitOk
  1561 00003F85 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1562 00003F87 E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1563                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1564 00003F89 FEC0                <1>     inc al  ;make ZF=NZ
  1565 00003F8B E9E8000000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1566                              <1> 
  1567                              <1> readDiskFile:
  1568                              <1> ;rdi = Current SFT
  1569                              <1> ;rbp = WorkingDPB
  1570                              <1> ;ecx = Bytes to transfer
  1571 00003F90 C605(E4C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1572 00003F97 C605(D5C60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1573                              <1>     ;We have the following vars setup:
  1574                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1575                              <1>     ;currClustF
  1576                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1577                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1578 00003F9E 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1579 00003FA1 85D2                <1>     test edx, edx
  1580 00003FA3 0F84CF000000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1581 00003FA9 8B15(25C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1582 00003FAF 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1583 00003FB2 8905(29C70300)      <1>     mov dword [currClustD], eax
  1584 00003FB8 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1585 00003FBA 0F84B8000000        <1>     jz readExitOk
  1586 00003FC0 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1587 00003FC2 8B0D(4DC70300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1588 00003FC8 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1589 00003FCA 741E                <1>     jz .skipWalk
  1590                              <1> .goToCurrentCluster:
  1591 00003FCC 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1592 00003FD1 0F84A1000000        <1>     je readExitOk ;Exit with no bytes transferred
  1593 00003FD7 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
  1594 00003FD9 E860CEFFFF          <1>     call readFAT    ;Get in eax the next cluster
  1595 00003FDE 0F8285000000        <1>     jc .badExit   ;This can only return Fail
  1596 00003FE4 FFCA                <1>     dec edx ;Decrement counter
  1597 00003FE6 75E4                <1>     jnz .goToCurrentCluster
  1598                              <1> ;Now we fall out with ebx = Current cluster
  1599 00003FE8 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
  1600                              <1> .skipWalk:
  1601 00003FEA E875CCFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1602                              <1>     ;Now we add the offset to this
  1603 00003FEF 0FB61D(31C70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1604 00003FF6 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1605 00003FF9 488905(32C70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1606                              <1> ;Main
  1607                              <1> .mainRead:
  1608 00004000 E876CBFFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1609 00004005 7262                <1>     jc .badExit
  1610 00004007 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1611 0000400B 0FB71D(3AC70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1612 00004012 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1613                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1614                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1615 00004015 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1616 00004018 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1617 0000401B 8B1D(51C70300)      <1>     mov ebx, dword [tfrCntr]
  1618 00004021 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1619 00004023 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1620 00004026 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1621 0000402A 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1622 0000402C 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1623 0000402F 57                  <1>     push rdi
  1624 00004030 488B3D(F1C30300)    <1>     mov rdi, qword [currentDTA]
  1625 00004037 E855060000          <1>     call readWriteBytesBinary
  1626 0000403C 48893D(F1C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1627 00004043 5F                  <1>     pop rdi
  1628 00004044 8B0D(51C70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1629 0000404A 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1630 0000404C 742A                <1>     jz readExitOk ;Exit if so!
  1631 0000404E E85FCDFFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1632 00004053 7214                <1>     jc .badExit
  1633                              <1>     ;If ZF=ZE then CurrClustF has last cluster
  1634 00004055 7421                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1635                              <1>     ;Else repeat
  1636                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1637 00004057 66C705(3AC70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1637 0000405F 00                  <1>
  1638 00004060 488B05(32C70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1639 00004067 EB97                <1>     jmp short .mainRead
  1640                              <1> .badExit:
  1641                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1642                              <1>     ; we need to update the SFT before returning
  1643 00004069 8B0D(51C70300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1644 0000406F 30C0                <1>     xor al, al  ;Set ZF flag
  1645 00004071 E802000000          <1>     call readExitOk   ;We call this
  1646 00004076 F9                  <1>     stc ;All calls which end up here return Fail!
  1647 00004077 C3                  <1>     ret
  1648                              <1> 
  1649                              <1> readExitOk:
  1650                              <1> ;Input: ecx = Number of bytes left to transfer!
  1651                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1652 00004078 890D(51C70300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1653 0000407E 7509                <1>     jnz .skipbitClear
  1654 00004080 E841040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  1655                              <1>     ;The disk transfer must've flushed by now. 
  1656 00004085 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
  1657                              <1>     ;Next char dev read should give EOF.
  1658                              <1> .skipbitClear:  ;Or skip that entirely
  1659 00004089 E840040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1660                              <1>     return 
    18                              <2> %%_ret:
    19 0000408E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1661                              <1> 
  1662                              <1> writeBytes:
  1663                              <1> ;Writes the bytes from the user buffer
  1664                              <1> ;Input: ecx = Bytes to xfr
  1665                              <1> ;Returns number of bytes written in ecx
  1666 0000408F E832040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1667 00004094 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1668 00004098 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1669 0000409A 3C00                <1>     cmp al, ReadAccess
  1670 0000409C 7509                <1>     jne .writeable
  1671                              <1> .noWrite:
  1672 0000409E B805000000          <1>     mov eax, errAccDen
  1673 000040A3 31C9                <1>     xor ecx, ecx
  1674 000040A5 F9                  <1>     stc
  1675 000040A6 C3                  <1>     ret
  1676                              <1> .writeable:
  1677 000040A7 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1678 000040AD 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1679 000040AF 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1680 000040B3 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1681                              <1> .skipAttribCheck:
  1682 000040B5 E84D040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1683 000040BA 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1684 000040C0 7408                <1>     jz .notRedir
  1685 000040C2 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1686 000040C7 CD4F                <1>     int 4Fh
  1687                              <1>     return
    18                              <2> %%_ret:
    19 000040C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1688                              <1> .notRedir:
  1689 000040CA 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1690 000040D0 7510                <1>     jnz writeCharDev
  1691 000040D2 E8561E0000          <1>     call dosCrit1Enter
  1692 000040D7 E84C010000          <1>     call writeDiskFile
  1693 000040DC E8561E0000          <1>     call dosCrit1Exit
  1694                              <1>     return
    18                              <2> %%_ret:
    19 000040E1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1695                              <1> writeCharDev:
  1696 000040E2 C605(E4C30300)04    <1>     mov byte [errorLocus], eLocChr
  1697                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1698 000040E9 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1699 000040EF 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1700                              <1>     ;If ecx = 0, we exit
  1701 000040F3 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1702 000040F5 85C9                <1>     test ecx, ecx
  1703 000040F7 0F84AA030000        <1>     jz writeExit
  1704 000040FD 488B1D(F1C30300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1705 00004104 4889DF              <1>     mov rdi, rbx
  1706 00004107 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1707 00004109 A820                <1>     test al, charDevBinary
  1708 0000410B 744A                <1>     jz .asciiDev
  1709                              <1> ;Write binary transfer here
  1710                              <1> .binaryLp:
  1711 0000410D 31C0                <1>     xor eax, eax
  1712 0000410F 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1713 00004112 E83A180000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1714 00004117 488B35(07C70300)    <1>     mov rsi, qword [currentSFT]
  1715 0000411E E895150000          <1>     call goDriverChar
  1716 00004123 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1717 00004126 B487                <1>     mov ah, critCharDev | critData | critWrite
  1718 00004128 0FB73D(9DC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1719 0000412F F7C700800000        <1>     test edi, drvErrStatus
  1720 00004135 7415                <1>     jz .binXfrOk
  1721 00004137 E85A140000          <1>     call charDevErr ;Invoke Int 44h
  1722 0000413C 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1723 0000413F 3C00                <1>     cmp al, critIgnore
  1724 00004141 7409                <1>     je .binXfrOk
  1725 00004143 3C01                <1>     cmp al, critRetry
  1726 00004145 74C6                <1>     je .binaryLp
  1727 00004147 E9D5000000          <1>     jmp .exitFail
  1728                              <1> .binXfrOk:
  1729 0000414C 8B05(B0C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1730 00004152 E950030000          <1>     jmp writeExit   ;Exit oki with # bytes xfrd in eax
  1731                              <1> .asciiDev:
  1732 00004157 A802                <1>     test al, charDevConOut
  1733 00004159 0F859E000000        <1>     jnz .conDev
  1734 0000415F A804                <1>     test al, charDevNulDev
  1735 00004161 0F858F000000        <1>     jnz .nulDev
  1736                              <1>     ;Here we transfer for a generic character device in ascii mode
  1737 00004167 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1738 00004169 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1739 0000416C 0F8435030000        <1>     je writeExit
  1740 00004172 51                  <1>     push rcx
  1741 00004173 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1742 00004178 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1743 0000417B E8D1170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1744 00004180 59                  <1>     pop rcx
  1745 00004181 488B35(07C70300)    <1>     mov rsi, qword [currentSFT]
  1746 00004188 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1747                              <1> .asciiLp:
  1748 0000418C E86EE3FFFF          <1>     call checkBreak
  1749 00004191 E826150000          <1>     call goDriver
  1750 00004196 57                  <1>     push rdi
  1751 00004197 B487                <1>     mov ah, critCharDev | critData | critWrite
  1752 00004199 0FB73D(9DC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1753 000041A0 F7C700800000        <1>     test edi, drvErrStatus
  1754 000041A6 741D                <1>     jz .asciiNoError
  1755 000041A8 E8E9130000          <1>     call charDevErr ;Invoke Int 44h
  1756 000041AD 5F                  <1>     pop rdi
  1757 000041AE C705(B0C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1757 000041B6 0000                <1>
  1758 000041B8 3C01                <1>     cmp al, critRetry
  1759 000041BA 74D0                <1>     je .asciiLp
  1760 000041BC 3C00                <1>     cmp al, critIgnore
  1761 000041BE 7412                <1>     je .ignoreEp
  1762 000041C0 E95C000000          <1>     jmp .exitFail
  1763                              <1> .asciiNoError:
  1764 000041C5 5F                  <1>     pop rdi
  1765 000041C6 813D(B0C40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1765 000041CE 0000                <1>
  1766 000041D0 741D                <1>     je .bytesXfrdOk
  1767                              <1> .ignoreEp:
  1768 000041D2 FFC2                <1>     inc edx ;One more char has been xfrd
  1769 000041D4 FF05(A8C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1770 000041DA 48FFC7              <1>     inc rdi ;And our copy... 
  1771 000041DD 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1772 000041E0 740D                <1>     je .bytesXfrdOk
  1773 000041E2 66C705(9DC40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1773 000041EA 00                  <1>
  1774 000041EB FFC9                <1>     dec ecx
  1775 000041ED 759D                <1>     jnz .asciiLp
  1776                              <1> .bytesXfrdOk:
  1777 000041EF 89D0                <1>     mov eax, edx
  1778 000041F1 E9B1020000          <1>     jmp writeExit
  1779                              <1> .nulDev:
  1780 000041F6 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1781 000041F8 E9AA020000          <1>     jmp writeExit
  1782                              <1> .conDev:
  1783 000041FD E879E3FFFF          <1>     call vConSwapDriver
  1784 00004202 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1785 00004205 51                  <1>     push rcx
  1786                              <1> .conDevLp:
  1787 00004206 AC                  <1>     lodsb
  1788 00004207 3C1A                <1>     cmp al, EOF
  1789 00004209 7409                <1>     je .conDevExit
  1790 0000420B E81DDFFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  1791 00004210 FFC9                <1>     dec ecx
  1792 00004212 75F2                <1>     jnz .conDevLp
  1793                              <1> .conDevExit:
  1794 00004214 58                  <1>     pop rax ;Get initial ecx back into eax
  1795 00004215 29C8                <1>     sub eax, ecx
  1796 00004217 E877E3FFFF          <1>     call vConRetDriver
  1797 0000421C E986020000          <1>     jmp writeExit   ;Input: eax = bytes xfrd
  1798                              <1> .exitFail:
  1799 00004221 B805000000          <1>     mov eax, errAccDen
  1800 00004226 F9                  <1>     stc
  1801                              <1>     return
    18                              <2> %%_ret:
    19 00004227 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1802                              <1> writeDiskFile:
  1803                              <1>     ;rdi has SFT ptr
  1804 00004228 C605(E4C30300)02    <1>     mov byte [errorLocus], eLocDsk 
  1805 0000422F C605(D5C60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  1806 00004236 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  1807 0000423C 0F8542020000        <1>     jnz .badExit
  1808 00004242 31DB                <1>     xor ebx, ebx
  1809 00004244 891D(49C70300)      <1>     mov dword [bytesAppend], ebx ;Reset the appending counter
  1810 0000424A 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  1811                              <1>     ;If the start cluster is 0, we create a new cluster chain
  1812 0000424D 85C0                <1>     test eax, eax
  1813 0000424F 7520                <1>     jnz .notStart
  1814 00004251 E888CAFFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  1815 00004256 0F821F020000        <1>     jc .exitPrepHardErr
  1816 0000425C 3DFFFFFFFF          <1>     cmp eax, -1
  1817 00004261 0F8424020000        <1>     je .exitPrep
  1818                              <1>     ;Now eax has the first cluster of chain
  1819 00004267 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  1820 0000426A C605(48C70300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  1821                              <1> .notStart:
  1822 00004271 E81BCAFFFF          <1>     call getLastClusterInChain  ;to get the current last cluster in the file
  1823 00004276 8905(44C70300)      <1>     mov dword [lastClustA], eax
  1824 0000427C E829CAFFFF          <1>     call getNumberOfClustersInChain ;Gets number of clusters
  1825 00004281 FFC8                <1>     dec eax ;Turn into an offset of clusters in file
  1826 00004283 8905(40C70300)      <1>     mov dword [lastClust], eax
  1827                              <1>     ;Get the disk cluster of the file (currClustD)
  1828 00004289 8B0D(25C70300)      <1>     mov ecx, dword [currClustF]
  1829 0000428F 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1830 00004292 E82ECAFFFF          <1>     call getClusterInChain  ;Returns in eax the disk cluster value
  1831 00004297 0F82E7010000        <1>     jc .badExit
  1832                              <1>     ;ecx has the number of clusters we need to extend the allocation by.
  1833 0000429D 67E36A              <1>     jecxz .skipExtension
  1834 000042A0 E8BFCAFFFF          <1>     call findFreeClusterData    ;This updates the dpb to have free cluster data
  1835 000042A5 0F82D9010000        <1>     jc .badExit
  1836 000042AB 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters
  1837 000042B0 0F84EF010000        <1>     je .noByteExit
  1838 000042B6 394D31              <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], ecx
  1839 000042B9 0F82E6010000        <1>     jb .noByteExit    ;If dNumberOfFreeClusters < ecx, exit
  1840                              <1>     ;Enough to extend by ecx amount
  1841 000042BF 8B1D(44C70300)      <1>     mov ebx, dword [lastClustA] ;Get the last disk cluster of the file
  1842 000042C5 E835CAFFFF          <1>     call allocateClusters   ;Extend by ecx clusters
  1843 000042CA 0F82B4010000        <1>     jc .badExit
  1844 000042D0 010D(40C70300)      <1>     add dword [lastClust], ecx  
  1845 000042D6 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1846 000042D9 8B0D(40C70300)      <1>     mov ecx, dword [lastClust]
  1847 000042DF E8E1C9FFFF          <1>     call getClusterInChain
  1848 000042E4 0F829A010000        <1>     jc .badExit
  1849                              <1>     ;eax has the last cluster on disk
  1850 000042EA 8905(44C70300)      <1>     mov dword [lastClustA], eax
  1851                              <1>     ;Now we must extend the filesize in the SFT
  1852 000042F0 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1853 000042F3 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1854 000042F6 31C0                <1>     xor eax, eax
  1855 000042F8 8505(4DC70300)      <1>     test dword [tfrLen], eax
  1856 000042FE 0F84A3010000        <1>     jz writeExit    ;If we were extending the file, we are done
  1857 00004304 8B05(44C70300)      <1>     mov eax, dword [lastClustA] ;Get the absolute last cluster
  1858                              <1> .skipExtension:
  1859 0000430A 8905(29C70300)      <1>     mov dword [currClustD], eax ;Now eax has the currClustD value
  1860                              <1>     ;Get the disk sector too
  1861 00004310 E84FC9FFFF          <1>     call getStartSectorOfCluster
  1862 00004315 0FB61D(31C70300)    <1>     movzx ebx, byte [currSectC] ;Add the in cluster sector offset
  1863 0000431C 01D8                <1>     add eax, ebx    ;Add the offset to eax
  1864 0000431E 8905(32C70300)      <1>     mov dword [currSectD], eax 
  1865                              <1>     ;If tfrLen = 0, we truncate to current file pointer position, rounding up
  1866                              <1>     ; clusterwise!
  1867 00004324 8B0D(4DC70300)      <1>     mov ecx, dword [tfrLen] ;Get the number of bytes to transfer in ecx
  1868 0000432A 85C9                <1>     test ecx, ecx
  1869 0000432C 0F8433010000        <1>     jz .truncate
  1870                              <1>     ;Here we write proper data to the disk file
  1871                              <1> .writeLoop:
  1872 00004332 0FB705(3AC70300)    <1>     movzx eax, word [currByteS] ;Get bytewise sector offset
  1873 00004339 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  1874 0000433D 29C1                <1>     sub ecx, eax    ;Get bytes left to fill this sector in ecx
  1875 0000433F 8B05(51C70300)      <1>     mov eax, dword [tfrCntr] ;Get # bytes left to transfer
  1876 00004345 6639C1              <1>     cmp cx, ax  ;Is # of bytes leftto tfr less than bytes left in sector?
  1877 00004348 660F47C8            <1>     cmova cx, ax    ;If yes, swap
  1878 0000434C 66890D(23C70300)    <1>     mov word [sectTfr], cx  ;Save this value in the var
  1879 00004353 0FB605(31C70300)    <1>     movzx eax, byte [currSectC] ;Get sector offset in cluster
  1880 0000435A 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
  1881 0000435D 0F8689000000        <1>     jbe .stayInCluster
  1882                              <1>     ;Get next Cluster information here
  1883 00004363 8B05(29C70300)      <1>     mov eax, dword [currClustD] ;Get disk cluster
  1884 00004369 3B05(44C70300)      <1>     cmp eax, dword [lastClustA] ;Is this the last sector?
  1885 0000436F 7543                <1>     jne .nextCluster
  1886                              <1>     ;Growing the file
  1887 00004371 C605(48C70300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true
  1888 00004378 B901000000          <1>     mov ecx, 1  ;Request 1 cluster
  1889 0000437D 89C3                <1>     mov ebx, eax    ;Save the last cluster number in eax
  1890 0000437F E87BC9FFFF          <1>     call allocateClusters
  1891 00004384 0F82F1000000        <1>     jc .exitPrepHardErr
  1892 0000438A 3DFFFFFFFF          <1>     cmp eax, -1 ;If eax = -1 then disk full condition
  1893 0000438F 0F82F6000000        <1>     jc .exitPrep
  1894 00004395 89D8                <1>     mov eax, ebx    ;ebx is preserved
  1895 00004397 E8A2CAFFFF          <1>     call readFAT    ;Goto next cluster now, return in eax next cluster
  1896 0000439C 0F82D9000000        <1>     jc .exitPrepHardErr
  1897 000043A2 FF05(40C70300)      <1>     inc dword [lastClust]
  1898 000043A8 8905(44C70300)      <1>     mov dword [lastClustA], eax ;Now eax is the new last cluster
  1899 000043AE 8B05(29C70300)      <1>     mov eax, dword [currClustD] ;Get the old last cluster
  1900                              <1>     ;eax now has the old last sector
  1901                              <1> .nextCluster:
  1902                              <1>     ;eax has old disk cluster information
  1903 000043B4 E885CAFFFF          <1>     call readFAT    ;Get the next disk cluster in eax
  1904 000043B9 0F82BC000000        <1>     jc .exitPrepHardErr
  1905 000043BF 8905(29C70300)      <1>     mov dword [currClustD], eax
  1906 000043C5 FF05(25C70300)      <1>     inc dword [currClustF]
  1907 000043CB E894C8FFFF          <1>     call getStartSectorOfCluster
  1908 000043D0 488905(32C70300)    <1>     mov qword [currSectD], rax
  1909 000043D7 FF05(2DC70300)      <1>     inc dword [currSectF]
  1910 000043DD 31C0                <1>     xor eax, eax
  1911 000043DF 8805(31C70300)      <1>     mov byte [currSectC], al  ;Sector zero in cluster
  1912 000043E5 668905(3AC70300)    <1>     mov word [currByteS], ax  ;And byte zero of this sector in the cluster
  1913                              <1> .stayInCluster:
  1914 000043EC 488B05(32C70300)    <1>     mov rax, qword [currSectD]  ;Get disk sector
  1915 000043F3 E883C7FFFF          <1>     call getBufForData
  1916 000043F8 0F827D000000        <1>     jc .exitPrepHardErr
  1917                              <1>     ;rbx points to disk buffer header
  1918 000043FE 0FB705(3AC70300)    <1>     movzx eax, word [currByteS] 
  1919 00004405 488D5C0330          <1>     lea rbx, qword [rbx + bufferHdr.dataarea + rax] ;In sector offset
  1920                              <1>     ;rbx points to the current byte to write at
  1921 0000440A 57                  <1>     push rdi
  1922 0000440B 56                  <1>     push rsi
  1923 0000440C 4889DF              <1>     mov rdi, rbx    ;The sector is the destination of the write
  1924 0000440F 488B35(F1C30300)    <1>     mov rsi, qword [currentDTA] ;Get the user buffer as the source
  1925 00004416 0FB70D(23C70300)    <1>     movzx ecx, word [sectTfr]   ;Get # of bytes to write
  1926 0000441D F3A4                <1>     rep movsb   ;Move over cx number of bytes
  1927 0000441F 488935(F1C30300)    <1>     mov qword [currentDTA], rsi ;Update currentDTA
  1928 00004426 5E                  <1>     pop rsi
  1929 00004427 5F                  <1>     pop rdi
  1930 00004428 E88EC5FFFF          <1>     call setBufferDirty
  1931 0000442D 0FB70D(23C70300)    <1>     movzx ecx, word [sectTfr]
  1932 00004434 F605(48C70300)FF    <1>     test byte [fileGrowing], -1
  1933 0000443B 7406                <1>     jz .notGrowing
  1934 0000443D 010D(49C70300)      <1>     add dword [bytesAppend], ecx
  1935                              <1> .notGrowing:
  1936 00004443 290D(51C70300)      <1>     sub dword [tfrCntr], ecx
  1937 00004449 7440                <1>     jz .exitPrep
  1938 0000444B 31C0                <1>     xor eax, eax
  1939 0000444D 668905(3AC70300)    <1>     mov word [currByteS], ax    ;Start of the next sector
  1940 00004454 010D(3CC70300)      <1>     add dword [currByteF], ecx  ;Goto the next sector in the file
  1941 0000445A FE05(31C70300)      <1>     inc byte [currSectC]    ;Increment sector in cluster now
  1942 00004460 E9CDFEFFFF          <1>     jmp .writeLoop
  1943                              <1> 
  1944                              <1> .truncate:
  1945                              <1> ;We must free the chain from currClustD
  1946 00004465 8B05(29C70300)      <1>     mov eax, dword [currClustD]
  1947 0000446B E8A9C9FFFF          <1>     call truncateFAT    ;Truncate from the current cluster
  1948 00004470 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1949 00004473 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1950 00004476 E92A000000          <1>     jmp .noByteExit ;Exit ok!
  1951                              <1> .exitPrepHardErr:
  1952 0000447B 50                  <1>     push rax    ;Save error code
  1953 0000447C E80A000000          <1>     call .exitPrep
  1954 00004481 58                  <1>     pop rax
  1955                              <1> .badExitHard:    ;AL has error code already
  1956 00004482 F9                  <1>     stc
  1957                              <1>     return
    18                              <2> %%_ret:
    19 00004483 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1958                              <1> .badExit:
  1959                              <1> ;Might need to do some weird stuff later. Leave for now
  1960 00004484 B805000000          <1>     mov eax, errAccDen
  1961 00004489 EBF7                <1>     jmp short .badExitHard
  1962                              <1> 
  1963                              <1> .exitPrep:
  1964 0000448B 8B0D(49C70300)      <1>     mov ecx, dword [bytesAppend]
  1965 00004491 014F17              <1>     add dword [rdi + sft.dFileSize], ecx    ;Add these bytes to the filesize
  1966 00004494 8B05(4DC70300)      <1>     mov eax, dword [tfrLen]
  1967 0000449A 2B05(51C70300)      <1>     sub eax, dword [tfrCntr]    ;Subtract by bytes left to tfr
  1968 000044A0 E902000000          <1>     jmp writeExit
  1969                              <1> 
  1970                              <1> .noByteExit:
  1971 000044A5 31C0                <1>     xor eax, eax
  1972                              <1> writeExit:
  1973                              <1> ;Advances the bytes on the file pointer
  1974                              <1> ;eax = Number of bytes transferred
  1975 000044A7 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  1976 000044AE 89C1                <1>     mov ecx, eax
  1977 000044B0 E801000000          <1>     call .advPtr
  1978                              <1>     return  ;Return to caller, ecx = # bytes xfrd
    18                              <2> %%_ret:
    19 000044B5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1979                              <1> .advPtr:
  1980 000044B6 67E303              <1>     jecxz .exit
  1981 000044B9 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx
  1982                              <1> .exit:
  1983 000044BC F8                  <1>     clc
  1984                              <1>     return
    18                              <2> %%_ret:
    19 000044BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1985                              <1> 
  1986                              <1> ;-----------------------------------:
  1987                              <1> ;        File Handle routines       :
  1988                              <1> ;-----------------------------------:
  1989                              <1> 
  1990                              <1> setCurrentSFT:
  1991                              <1> ;Set the pointer in rdi as current SFT 
  1992 000044BE 48893D(07C70300)    <1>     mov qword [currentSFT], rdi
  1993                              <1>     return 
    18                              <2> %%_ret:
    19 000044C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1994                              <1> getCurrentSFT:
  1995                              <1> ;Get the current SFT pointer in rdi
  1996 000044C6 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  1997                              <1>     return 
    18                              <2> %%_ret:
    19 000044CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1998                              <1> updateCurrentSFT:
  1999                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2000                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2001 000044CE 57                  <1>     push rdi
  2002 000044CF 488B3D(07C70300)    <1>     mov rdi, qword [currentSFT]
  2003 000044D6 8B0D(4DC70300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
  2004 000044DC 2B0D(51C70300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
  2005                              <1>     ;ecx has bytes transferred
  2006 000044E2 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2007 000044E8 751A                <1>     jnz .exit
  2008 000044EA 50                  <1>     push rax
  2009 000044EB 8B05(29C70300)      <1>     mov eax, dword [currClustD]
  2010 000044F1 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2011 000044F4 8B05(25C70300)      <1>     mov eax, dword [currClustF]
  2012 000044FA 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2013 000044FD 58                  <1>     pop rax
  2014 000044FE 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
  2015 00004501 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2016                              <1> .exit:
  2017 00004504 5F                  <1>     pop rdi
  2018 00004505 F8                  <1>     clc
  2019                              <1>     return 
    18                              <2> %%_ret:
    19 00004506 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2020                              <1> setupVarsForTransfer:
  2021                              <1> ;Computes the actual bytes to be transferred and 
  2022                              <1> ; sets up internal variables for the transfer. 
  2023                              <1> ;Works for both reading and writing
  2024                              <1> ;Input: ecx = User desired Bytes to transfer
  2025                              <1> ;       rdi = SFT pointer for the file
  2026                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2027                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2028                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2029                              <1> ;
  2030                              <1> ;Note: Does not account for a FULL disk. When writing,
  2031                              <1> ; if the disk will get full as a result of the write,
  2032                              <1> ; stop at the last byte before the transfer. If the 
  2033                              <1> ; file pointer is past the last free byte, write 0
  2034 00004507 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2035 0000450B 488935(DFC60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2036 00004512 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2037 00004515 8905(3CC70300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2038 0000451B 890D(4DC70300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2039 00004521 890D(51C70300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2040 00004527 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2041 0000452D 7402                <1>     jz setupVarsForDiskTransfer
  2042 0000452F F8                  <1>     clc
  2043                              <1>     return
    18                              <2> %%_ret:
    19 00004530 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2044                              <1> setupVarsForDiskTransfer:
  2045                              <1> ;Extension of the above, but for Disk files only
  2046                              <1> ;Input: ecx = User desired Bytes to transfer
  2047                              <1> ;       rdi = SFT pointer for the file
  2048                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2049                              <1> ;        CF=CY: Error exit
  2050 00004531 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2051 00004534 8905(3CC70300)      <1>     mov dword [currByteF], eax
  2052 0000453A 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2053                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2054 0000453E 48892D(DFC60300)    <1>     mov qword [workingDPB], rbp
  2055 00004545 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2056 00004548 881D(DEC60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2057 0000454E 8B05(3CC70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2058 00004554 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2059 00004558 31D2                <1>     xor edx, edx    ;Zero rdx
  2060 0000455A F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2061                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2062                              <1>     ;edx has the offset into that sector
  2063 0000455C 8905(2DC70300)      <1>     mov dword [currSectF], eax
  2064 00004562 668915(3AC70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2065 00004569 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2066 0000456B 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2067 0000456E 8805(31C70300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2068 00004574 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2069 00004576 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2070 00004579 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2071 0000457B 8915(25C70300)      <1>     mov dword [currClustF], edx ;Save in var
  2072 00004581 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2073                              <1> .exit:
  2074 00004583 F8                  <1>     clc
  2075                              <1>     return 
    18                              <2> %%_ret:
    19 00004584 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2076                              <1> findFreeSFT:
  2077                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2078                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2079                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2080                              <1> ;        CF=CY => eax = errNhl, error exit
  2081 00004585 31DB                <1>     xor ebx, ebx
  2082                              <1> .mainLp:
  2083 00004587 53                  <1>     push rbx    ;Save the sft ndx
  2084 00004588 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2085 0000458D 5B                  <1>     pop rbx
  2086 0000458E 7307                <1>     jnc .sftExists
  2087 00004590 B804000000          <1>     mov eax, errNhl
  2088 00004595 F9                  <1>     stc
  2089                              <1>     return
    18                              <2> %%_ret:
    19 00004596 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2090                              <1> .sftExists:
  2091 00004597 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2092 0000459C 7427                <1>     je .sftFound
  2093 0000459E 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2094 000045A3 751C                <1>     jne .gotoNextNdx
  2095                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2096 000045A5 53                  <1>     push rbx
  2097 000045A6 488B1D(15C40300)    <1>     mov rbx, qword [serverPSP]
  2098 000045AD 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2099 000045B1 750B                <1>     jne .netGoToNextNdx
  2100 000045B3 0FB71D(1DC40300)    <1>     movzx ebx, word [machineNum]
  2101 000045BA 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2102                              <1> .netGoToNextNdx:
  2103 000045BE 5B                  <1>     pop rbx
  2104 000045BF 7404                <1>     je .sftFound
  2105                              <1> .gotoNextNdx:
  2106 000045C1 FFC3                <1>     inc ebx
  2107 000045C3 EBC2                <1>     jmp short .mainLp
  2108                              <1> .sftFound:
  2109 000045C5 53                  <1>     push rbx
  2110 000045C6 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2111 000045CB 488B1D(15C40300)    <1>     mov rbx, qword [serverPSP]
  2112 000045D2 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2113 000045D6 0FB71D(1DC40300)    <1>     movzx ebx, word [machineNum]
  2114 000045DD 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2115 000045E1 5B                  <1>     pop rbx
  2116 000045E2 F8                  <1>     clc
  2117                              <1>     return
    18                              <2> %%_ret:
    19 000045E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2118                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2119                              <1> ;Return a pointer to the SFT entry in rdi
  2120                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2121                              <1> ;Output: rdi = SFT pointer
  2122 000045E4 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2123                              <1> .walk:
  2124 000045EB 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2125 000045EF 7212                <1>     jb .thisTable
  2126 000045F1 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2127 000045F5 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2128 000045F8 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2129 000045FF 75EA                <1>     jne .walk
  2130 00004601 F9                  <1>     stc
  2131                              <1>     return
    18                              <2> %%_ret:
    19 00004602 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2132                              <1> .thisTable:
  2133 00004603 50                  <1>     push rax
  2134 00004604 52                  <1>     push rdx
  2135 00004605 B84F000000          <1>     mov eax, sft_size
  2136 0000460A F7E3                <1>     mul ebx
  2137 0000460C 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2138 0000460F 5A                  <1>     pop rdx
  2139 00004610 58                  <1>     pop rax
  2140 00004611 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2141                              <1>     return
    18                              <2> %%_ret:
    19 00004618 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2142                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2143                              <1> ;Return a zero extended value in rdi for the SFT entry
  2144                              <1> ;Input: bx = JFT handle (we zero extend)
  2145                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  2146                              <1> ;        CF=CY => al = Error code, Fail
  2147 00004619 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2148 0000461C 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  2149 00004623 7204                <1>     jb .ok
  2150 00004625 B006                <1>     mov al, errBadHdl
  2151 00004627 F9                  <1>     stc
  2152                              <1>     return
    18                              <2> %%_ret:
    19 00004628 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2153                              <1> .ok:
  2154 00004629 488B3D(F9C30300)    <1>     mov rdi, qword [currentPSP]
  2155 00004630 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2156 00004635 F8                  <1>     clc
  2157                              <1>     return
    18                              <2> %%_ret:
    19 00004636 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2158                              <1> findFreeJFTEntry:
  2159                              <1> ;Finds a free JFT entry in the currentPSP.
  2160                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2161                              <1> ;        CF=CY => al=errNhl
  2162 00004637 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2163                              <1> .searchLp:
  2164 00004639 E8DBFFFFFF          <1>     call getJFTPtr
  2165 0000463E 7209                <1>     jc .badExit
  2166 00004640 803FFF              <1>     cmp byte [rdi], -1
  2167                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004643 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2168 00004645 FFC3                <1>     inc ebx
  2169 00004647 EBF0                <1>     jmp short .searchLp
  2170                              <1> .badExit:
  2171 00004649 B004                <1>     mov al, errNhl
  2172 0000464B F9                  <1>     stc
  2173                              <1>     return
    18                              <2> %%_ret:
    19 0000464C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2174                              <1> getSFTPtr:
  2175                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2176                              <1> ;Input: bx = JFT handle
  2177                              <1> ;Output: CF=NC: rdi = SFT pointer
  2178                              <1> ;        CF=CY: Error, ax=Error code
  2179 0000464D E815000000          <1>     call derefSFTPtr
  2180                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004652 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2181 00004654 50                  <1>     push rax
  2182 00004655 0FB705(1DC40300)    <1>     movzx eax, word [machineNum]
  2183 0000465C 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2184 00004660 58                  <1>     pop rax
  2185                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004661 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2186 00004663 B006                <1>     mov al, errBadHdl   ;Error code
  2187 00004665 F9                  <1>     stc         ;Reset CF
  2188                              <1>     return
    18                              <2> %%_ret:
    19 00004666 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2189                              <1> 
  2190                              <1> derefSFTPtr:
  2191                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2192                              <1> ;Input: bx = File handle (gets zero extended)
  2193                              <1> ;Output: CF=NC: rdi = SFT pointer
  2194                              <1> ;        CF=CY: Error, ax=Error code
  2195 00004667 E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2196 0000466C 7205                <1>     jb .fail
  2197 0000466E 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2198 00004671 7504                <1>     jne .ok
  2199                              <1> .fail:
  2200 00004673 B006                <1>     mov al, errBadHdl
  2201 00004675 F9                  <1>     stc
  2202                              <1>     return
    18                              <2> %%_ret:
    19 00004676 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2203                              <1> .ok:
  2204 00004677 53                  <1>     push rbx    ;Preserve the JFT handle
  2205 00004678 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2206 0000467B E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2207 00004680 5B                  <1>     pop rbx 
  2208                              <1>     return
    18                              <2> %%_ret:
    19 00004681 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2209                              <1> 
  2210                              <1> getBytesTransferred:
  2211 00004682 8B0D(51C70300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2212 00004688 F7D9                <1>     neg ecx ;Multiply by -1
  2213 0000468A 030D(4DC70300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2214                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00004690 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2215                              <1> 
  2216                              <1> readWriteBytesBinary:
  2217                              <1> ;Input: ecx = number of bytes to read in Binary mode
  2218                              <1> ;       rdi = Points to where in caller buffer to read/write bytes
  2219                              <1> ;       rsi = Points to where in DOS buffer to write/read pointer
  2220                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
  2221                              <1> ;Preserve rcx so we know how many bytes transferred
  2222                              <1> ;Update the currByteA variable
  2223                              <1> ;Returns (rsi and rdi) + (ecx on entry)
  2224 00004691 51                  <1>     push rcx
  2225 00004692 F605(D5C60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
  2226 00004699 7403                <1>     jz .noSwap
  2227 0000469B 4887FE              <1>     xchg rdi, rsi
  2228                              <1> .noSwap:
  2229 0000469E F3A4                <1>     rep movsb
  2230 000046A0 59                  <1>     pop rcx
  2231 000046A1 010D(3CC70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2232 000046A7 290D(51C70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2233                              <1>     return
    18                              <2> %%_ret:
    19 000046AD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2234                              <1> 
  2235                              <1> findFreeJFTSpace:
  2236                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
  2237                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
  2238                              <1> ;Else, a pointer to the free space in rsi and al = -1
  2239 000046AE 51                  <1>     push rcx
  2240 000046AF 488B35(F9C30300)    <1>     mov rsi, qword [currentPSP]
  2241 000046B6 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
  2242 000046BD 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
  2243                              <1> .search:
  2244 000046C1 AC                  <1>     lodsb
  2245 000046C2 3CFF                <1>     cmp al, -1
  2246 000046C4 7407                <1>     je .exit
  2247 000046C6 FFC9                <1>     dec ecx
  2248 000046C8 75F7                <1>     jnz .search
  2249 000046CA B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
  2250 000046CC F9                  <1>     stc ;Set error bit
  2251                              <1> .exit:
  2252 000046CD 59                  <1>     pop rcx
  2253                              <1>     return
    18                              <2> %%_ret:
    19 000046CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2254                              <1> 
  2255                              <1> getSFTndxInheritable:
  2256                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2257                              <1> ;Input: ebx = SFTndx (word)
  2258                              <1> ;Output: 
  2259                              <1> ;   ZF=ZE => Inheritable
  2260                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2261 000046CF 57                  <1>     push rdi
  2262 000046D0 E80FFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2263 000046D5 7208                <1>     jc .badNdx
  2264 000046D7 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2265 000046DD 5F                  <1>     pop rdi
  2266                              <1>     return
    18                              <2> %%_ret:
    19 000046DE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2267                              <1> .badNdx:
  2268 000046DF 31FF                <1>     xor edi, edi
  2269 000046E1 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2270 000046E3 F8                  <1>     clc
  2271 000046E4 5F                  <1>     pop rdi
  2272                              <1>     return
    18                              <2> %%_ret:
    19 000046E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2273                              <1> 
  2274                              <1> incrementOpenCount:
  2275                              <1> ;Given a SFTndx, this function will increment it's open count
  2276                              <1> ;Output:
  2277                              <1> ;   CF=NC => sftndx ok, count incremented
  2278                              <1> ;   CF=CY => Bad ndx
  2279 000046E6 57                  <1>     push rdi
  2280 000046E7 E8F8FEFFFF          <1>     call getSFTPtrfromSFTNdx
  2281 000046EC 7203                <1>     jc .exit
  2282 000046EE 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2283                              <1> .exit:
  2284 000046F1 5F                  <1>     pop rdi
  2285                              <1>     return
    18                              <2> %%_ret:
    19 000046F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2286                              <1> 
  2287                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2288                              <1> ;Input: rdi = SFT pointer
  2289                              <1> ;Output: ax = Original wNumHandles count
  2290 000046F3 9C                  <1>     pushfq
  2291 000046F4 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2292 000046F7 FFC8                <1>     dec eax     ;Decrement count
  2293 000046F9 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2294 000046FB FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2295                              <1> .exit:
  2296 000046FD 9D                  <1>     popfq
  2297 000046FE 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2298                              <1>     return
    18                              <2> %%_ret:
    19 00004701 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    33                              <1> ioctrl:            ;ah = 44h, handle function
    34                              <1> ;Possible subfunctions
    35                              <1> ;al = 00h => Get Handle Information word in dx  x
    36                              <1> ;al = 01h => Set Handle Information word        x
    37                              <1> ;al = 02h => Read from Char device              
    38                              <1> ;al = 03h => Write to Char device               
    39                              <1> ;al = 04h => Read from Block device             
    40                              <1> ;al = 05h => Write to Block device              
    41                              <1> ;al = 06h => Get input status                   
    42                              <1> ;al = 07h => Get output status                  
    43                              <1> ;al = 08h => Is a block device removable?       
    44                              <1> ;al = 09h => Is a logical device local or remote?   
    45                              <1> ;al = 0Ah => Is a handle to a local or remote file? 
    46                              <1> ;al = 0Bh => Change sharing retry count (RESERVED)  
    47                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    48                              <1> ;al = 0Dh => Block device Generic IOCTL request     
    49                              <1> ;al = 0Eh => Get logical device                 
    50                              <1> ;al = 0Fh => Set logical device                 
    51 00004702 84C0                <1>     test al, al
    52 00004704 740B                <1>     jz .getDevWord
    53 00004706 3C01                <1>     cmp al, 1
    54 00004708 7422                <1>     je .setDevWord
    55 0000470A B001                <1>     mov al, errInvFnc
    56 0000470C E97D180000          <1>     jmp extErrExit
    57                              <1> .getDevWord:
    58                              <1>     ;Input: bx = File Handle
    59 00004711 E851FFFFFF          <1>     call derefSFTPtr
    60 00004716 0F8272180000        <1>     jc extErrExit
    61                              <1>     ;Now rdi has ptr to SFT handle
    62 0000471C 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    63 00004720 30C0                <1>     xor al, al
    64 00004722 E8B4130000          <1>     call getUserRegs
    65 00004727 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    66                              <1>     return
    18                              <2> %%_ret:
    19 0000472B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> .setDevWord:
    68                              <1>     ;Input: bx = File Handle
    69                              <1>     ;       dl = Low byte of Device information word 
    70 0000472C E836FFFFFF          <1>     call derefSFTPtr
    71 00004731 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    72                              <1>     return
    18                              <2> %%_ret:
    19 00004734 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    34                              <1> ;Memory related functions
    35                              <1> 
    36                              <1> ;-----------------------------------:
    37                              <1> ;  Memory related Kernel routines   :
    38                              <1> ;-----------------------------------:
    39                              <1> allocateMemory:    ;ah = 48h
    40                              <1> ;Input: ebx = Number of paragraphs requested
    41                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    42                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    43 00004735 E8F3170000          <1>     call dosCrit1Enter
    44 0000473A 31D2                <1>     xor edx, edx
    45                              <1>     ;Clear the pointers
    46 0000473C 488915(1FC40300)    <1>     mov qword [firstMCB], rdx
    47 00004743 488915(27C40300)    <1>     mov qword [bestMCB], rdx
    48 0000474A 488915(2FC40300)    <1>     mov qword [lastMCB], rdx
    49 00004751 31ED                <1>     xor ebp, ebp    
    50 00004753 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    51 00004755 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    52                              <1> .walk:
    53 0000475C 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    54 0000475F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    55 00004762 7409                <1>     je .walk1
    56 00004764 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    57 00004767 0F850B050000        <1>     jne badMCBChain
    58                              <1> .walk1:
    59                              <1>     ;Here if valid but not the last block
    60 0000476D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    61 00004775 0F8582000000        <1>     jne .walk2
    62                              <1>     ;Here we consolidate adjacent free blocks if there are any
    63                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    64                              <1>     ;End consolidation at first non free block or at last block in chain
    65 0000477B 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    66 0000477E 744A                <1>     je .det0    ;Determine if this block is useful
    67 00004780 31C9                <1>     xor ecx, ecx
    68 00004782 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    69 00004785 4881C610000000      <1>     add rsi, mcb.program
    70                              <1> .cons0:
    71 0000478C 48C1E104            <1>     shl rcx, 4
    72 00004790 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    73 00004793 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    74 00004796 7409                <1>     je .cons1
    75 00004798 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    76 0000479B 0F85D7040000        <1>     jne badMCBChain 
    77                              <1> .cons1:
    78 000047A1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    79 000047A9 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    80                              <1>     ;Here rsi, points to a free block, add it to rdi
    81 000047AB 31C9                <1>     xor ecx, ecx
    82 000047AD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    83 000047B0 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    84 000047B6 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    85 000047B9 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    86 000047BB 31D2                <1>     xor edx, edx
    87 000047BD 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    88 000047C0 48895608            <1>     mov qword [rsi + 8], rdx
    89 000047C4 3C5A                <1>     cmp al, mcbMarkEnd
    90 000047C6 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    91                              <1>     ;Here we deal with if the block was the last one 
    92 000047C8 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    93                              <1> .det0:  ;Now determine if pointer in rdi is useful
    94 000047CA 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    95                              <1> ;ebx must be less than the arena size for the arena to be useful!
    96 000047CD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    97 000047D0 39D9                <1>     cmp ecx, ebx
    98 000047D2 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    99 000047D4 488935(2FC40300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
   100 000047DB 488B05(1FC40300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   101 000047E2 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   102 000047E5 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   103 000047E7 488935(1FC40300)    <1>     mov qword [firstMCB], rsi
   104                              <1> .det1:
   105                              <1>     ;Now test for best fit.
   106 000047EE 29D9                <1>     sub ecx, ebx    ;Block - ebx
   107 000047F0 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   108 000047F2 7209                <1>     jb .walk2
   109 000047F4 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   110 000047F6 488935(27C40300)    <1>     mov qword [bestMCB], rsi
   111                              <1> .walk2:
   112 000047FD 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   113 00004800 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   114 00004802 31C9                <1>     xor ecx, ecx
   115 00004804 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   116 00004807 48C1E104            <1>     shl rcx, 4
   117 0000480B 4881C610000000      <1>     add rsi, mcb.program
   118 00004812 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   119 00004815 E942FFFFFF          <1>     jmp .walk
   120                              <1> .allocate:
   121                              <1>     ;Allocation fails IF the pointer is the null pointer
   122 0000481A 803D(ADC30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   123 00004821 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   124                              <1>     ;Fall thru if last fit
   125 00004823 488B35(2FC40300)    <1>     mov rsi, qword [lastMCB]
   126 0000482A 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   127 0000482D 0F84D8000000        <1>     jz .allocFail
   128 00004833 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   129 00004835 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   130 00004838 31C9                <1>     xor ecx, ecx
   131 0000483A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   132 0000483D 29D9                <1>     sub ecx, ebx
   133 0000483F 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   134 00004845 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   135 00004848 48C1E104            <1>     shl rcx, 4
   136 0000484C 4881C610000000      <1>     add rsi, mcb.program
   137 00004853 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   138 00004856 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   139 00004858 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   140 0000485B 488B15(F9C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   141 00004862 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   142 00004866 488B15(54C40300)    <1>     mov rdx, qword [oldRSP]
   143 0000486D 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   144 00004874 4889F0              <1>     mov rax, rsi
   145 00004877 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   146 0000487A 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 0000487E E8C8030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 00004883 E8AF160000          <1>     call dosCrit1Exit
   149                              <1>     return
    18                              <2> %%_ret:
    19 00004888 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   150                              <1> .bfCommon:
   151 00004889 488B35(1FC40300)    <1>     mov rsi, qword [firstMCB]
   152 00004890 803D(ADC30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   153 00004897 480F4435(27C40300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   154 0000489F 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   155 000048A2 7467                <1>     jz .allocFail
   156 000048A4 8A06                <1>     mov al, byte [rsi + mcb.marker]
   157 000048A6 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   158 000048A9 31C9                <1>     xor ecx, ecx
   159 000048AB 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   160 000048AE 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   161 000048B0 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   162 000048B6 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   163 000048B9 488B15(F9C30300)    <1>     mov rdx, qword [currentPSP]
   164 000048C0 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   165 000048C4 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   166 000048C7 4881C610000000      <1>     add rsi, mcb.program
   167 000048CE 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   168 000048D4 48C1E304            <1>     shl rbx, 4
   169 000048D8 4801DE              <1>     add rsi, rbx
   170 000048DB 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   171 000048DD 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   172 000048E5 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   173 000048E8 488B15(54C40300)    <1>     mov rdx, qword [oldRSP]
   174 000048EF 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   175 000048F6 4889F8              <1>     mov rax, rdi
   176 000048F9 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   177 000048FC 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   178 00004900 E846030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   179 00004905 E82D160000          <1>     call dosCrit1Exit
   180                              <1>     return
    18                              <2> %%_ret:
    19 0000490A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   181                              <1> .allocFail:
   182                              <1>     ;Walk the MCB chain to determine the biggest block size
   183 0000490B 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   184 00004912 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   185                              <1> .af0:
   186 00004914 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   187 00004917 7409                <1>     je .af1
   188 00004919 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   189 0000491C 0F8556030000        <1>     jne badMCBChain
   190                              <1> .af1:
   191 00004922 31C9                <1>     xor ecx, ecx
   192 00004924 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   193 00004927 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   194 0000492F 7505                <1>     jne .af2
   195 00004931 39D9                <1>     cmp ecx, ebx
   196 00004933 0F47D9              <1>     cmova ebx, ecx
   197                              <1> .af2:
   198 00004936 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   199 00004939 7410                <1>     je .afExit
   200 0000493B 48C1E104            <1>     shl rcx, 4
   201 0000493F 4881C610000000      <1>     add rsi, mcb.program
   202 00004946 4801CE              <1>     add rsi, rcx
   203 00004949 EBD7                <1>     jmp short .af1
   204                              <1> .afExit:
   205 0000494B B808000000          <1>     mov eax, errNoMem
   206 00004950 488B15(54C40300)    <1>     mov rdx, qword [oldRSP]
   207 00004957 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   208 0000495A E91B030000          <1>     jmp mcbErrHdlr
   209                              <1> freeMemory:        ;ah = 49h
   210                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   211                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   212                              <1> ;Always skip the first block as this is the anchor for DOS
   213 0000495F E8C9150000          <1>     call dosCrit1Enter
   214 00004964 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   215 0000496B 31C9                <1>     xor ecx, ecx
   216 0000496D 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   217 00004974 4889F7              <1>     mov rdi, rsi
   218 00004977 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 0000497A 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   220 0000497E 4881C610000000      <1>     add rsi, mcb.program
   221 00004985 4801CE              <1>     add rsi, rcx    ;Go to next block
   222                              <1> .mainLoop:
   223 00004988 31C9                <1>     xor ecx, ecx
   224 0000498A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   225 0000498D 7409                <1>     je .valid
   226 0000498F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   227 00004992 0F85E0020000        <1>     jne badMCBChain
   228                              <1> .valid:
   229 00004998 4939F0              <1>     cmp r8, rsi
   230 0000499B 741C                <1>     je .blockFound
   231                              <1>     ;Not valid, check if last block in chain
   232 0000499D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   233 000049A0 0F84A5000000        <1>     je .blockError
   234 000049A6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   235 000049A9 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   236 000049AD 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   237 000049B4 4801CE              <1>     add rsi, rcx    ;Go to next block
   238 000049B7 EBCF                <1>     jmp short .mainLoop
   239                              <1> .blockFound:
   240                              <1>     ;If hole, error.
   241                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   242 000049B9 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   243 000049C1 0F8484000000        <1>     je .blockError
   244 000049C7 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   245 000049CF 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   246 000049D7 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   247                              <1>     ;It is, let it absorb this space
   248 000049D9 31C9                <1>     xor ecx, ecx
   249 000049DB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   250 000049DE 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   251 000049E4 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   252                              <1>     ;Replace block marker
   253 000049E7 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   254 000049E9 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   255 000049EB 31C9                <1>     xor ecx, ecx
   256 000049ED 48890E              <1>     mov qword [rsi], rcx
   257 000049F0 48894E08            <1>     mov qword [rsi + 8], rcx
   258 000049F4 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   259                              <1> .blockFoundCheckFollowing:
   260                              <1>     ;First check if we are the last block in chain
   261 000049F7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   262 000049FA 7439                <1>     je .blockFoundExit  ;If yes, exit!
   263 000049FC 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   264 000049FF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   265 00004A02 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   266 00004A06 4881C110000000      <1>     add rcx, mcb.program
   267 00004A0D 4801CE              <1>     add rsi, rcx    ;Go to next block
   268 00004A10 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   269 00004A18 751B                <1>     jne .blockFoundExit ;If not free, exit
   270                              <1>     ;If free, absorb into block pointed to by rdi
   271 00004A1A 31C9                <1>     xor ecx, ecx
   272 00004A1C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   273 00004A1F 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   274 00004A25 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   275                              <1>     ;Replace block marker
   276 00004A28 8A06                <1>     mov al, byte [rsi + mcb.marker]
   277 00004A2A 8807                <1>     mov byte [rdi + mcb.marker], al
   278 00004A2C 31C9                <1>     xor ecx, ecx
   279 00004A2E 48890E              <1>     mov qword [rsi], rcx
   280 00004A31 48894E08            <1>     mov qword [rsi + 8], rcx
   281                              <1> .blockFoundExit:
   282 00004A35 E811020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   283 00004A3A E8F8140000          <1>     call dosCrit1Exit
   284 00004A3F 488B1D(54C40300)    <1>     mov rbx, qword [oldRSP]
   285 00004A46 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   286                              <1>     return
    18                              <2> %%_ret:
    19 00004A4A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   287                              <1> .blockError:
   288 00004A4B C605(E3C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   289 00004A52 B809000000          <1>     mov eax, errMemAddr
   290 00004A57 E832150000          <1>     call extErrExit ;Error thru the unified error handler
   291 00004A5C E8EA010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   292 00004A61 E8D1140000          <1>     call dosCrit1Exit
   293                              <1>     return
    18                              <2> %%_ret:
    19 00004A66 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   294                              <1> reallocMemory:     ;ah = 4Ah
   295                              <1> ;Input: r8 = address of the block to be realloc'ed
   296                              <1> ;       ebx = How many paras this block should contain after realloc. 
   297                              <1> ;               If ebx = 0, jump to free memory
   298 00004A67 E8C1140000          <1>     call dosCrit1Enter
   299 00004A6C 85DB                <1>     test ebx, ebx
   300 00004A6E 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   301 00004A74 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   302 00004A7B 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   303 00004A7E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   304 00004A81 7409                <1>     je .ctn
   305 00004A83 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   306 00004A86 0F856F010000        <1>     jne .badAddrGiven
   307                              <1> .ctn:
   308                              <1>     ;Provided block is valid and not a hole
   309                              <1>     ;Check if Growth or Shrink
   310 00004A8C 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   311 00004A94 74B5                <1>     je freeMemory.blockError
   312 00004A96 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   313 00004A99 31C9                <1>     xor ecx, ecx
   314 00004A9B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   315 00004A9E 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   316 00004AA0 0F8791000000        <1>     ja .growth
   317 00004AA6 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   318                              <1> ;We can always shrink
   319 00004AAC 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   320 00004AAE 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   321 00004AB4 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   322 00004AB7 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   323 00004ABD 48C1E304            <1>     shl rbx, 4
   324 00004AC1 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   325 00004AC8 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   326 00004ACB 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   327 00004ACD C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   328 00004AD0 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   329 00004AD2 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   330 00004ADA 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   331 00004ADD 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   332 00004ADF 0F84E6000000        <1>     je .exit
   333                              <1> ;Else, now see if the block following is also free and absorb it
   334 00004AE5 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   335 00004AE8 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   336 00004AEC 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   337 00004AF3 4801CE              <1>     add rsi, rcx    ;Goto next arena
   338 00004AF6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   339 00004AF9 7409                <1>     je .shrinkAbsorb
   340 00004AFB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   341 00004AFE 0F8574010000        <1>     jne badMCBChain
   342                              <1> .shrinkAbsorb:
   343 00004B04 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   344 00004B0C 0F85B9000000        <1>     jne .exit
   345                              <1>     ;It is free, absorb it
   346 00004B12 8A06                <1>     mov al, byte [rsi + mcb.marker]
   347 00004B14 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   348 00004B16 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   349 00004B19 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   350 00004B1C 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   351 00004B1F 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   352 00004B22 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   353 00004B26 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   354 00004B29 31C9                <1>     xor ecx, ecx
   355                              <1>     ;Clear absorbed MCB
   356 00004B2B 48890E              <1>     mov qword [rsi], rcx
   357 00004B2E 48894E08            <1>     mov qword [rsi + 8], rcx
   358 00004B32 E994000000          <1>     jmp .exit
   359                              <1> .growth:
   360                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   361 00004B37 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   362 00004B3A 0F84A5000000        <1>     je .notEnuffMem
   363                              <1> ;Now check the following space is free. If not, not enuff mem err
   364 00004B40 31C9                <1>     xor ecx, ecx
   365 00004B42 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   366 00004B45 48C1E104            <1>     shl rcx, 4
   367 00004B49 4889F7              <1>     mov rdi, rsi    
   368 00004B4C 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   369 00004B53 4801CE              <1>     add rsi, rcx
   370 00004B56 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   371 00004B59 7409                <1>     je .growthOK
   372 00004B5B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   373 00004B5E 0F8514010000        <1>     jne badMCBChain
   374                              <1> .growthOK:
   375                              <1>     ;rdi points to block we are growing
   376 00004B64 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   377 00004B6C 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   378                              <1>     ;rsi must own all memory up to the next owned arena
   379 00004B6E 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   380 00004B70 31C9                <1>     xor ecx, ecx
   381 00004B72 31D2                <1>     xor edx, edx
   382 00004B74 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   383 00004B77 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   384 00004B7D 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   385 00004B80 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   386 00004B82 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   387 00004B84 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   388 00004B87 775E                <1>     ja .notEnuffMem1
   389 00004B89 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   390 00004B8B 81FA01000000        <1>     cmp edx, 1
   391 00004B91 744E                <1>     je .notEnuffMem2
   392 00004B93 31C9                <1>     xor ecx, ecx
   393 00004B95 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   394 00004B98 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   395 00004B9C 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   396 00004B9F 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   397 00004BA2 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   398 00004BA9 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   399 00004BAD 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   400 00004BB0 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   401 00004BB4 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   402                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   403                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   404 00004BB6 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   405 00004BB8 7411                <1>     jz .exit
   406 00004BBA 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   407 00004BC0 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   408 00004BC3 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   409                              <1> .exit:
   410 00004BCB E87B000000          <1>     call verifyIntegrityOfMCBChain
   411 00004BD0 E862130000          <1>     call dosCrit1Exit
   412 00004BD5 488B1D(54C40300)    <1>     mov rbx, qword [oldRSP]
   413 00004BDC 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   414                              <1>     return
    18                              <2> %%_ret:
    19 00004BE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   415                              <1> .notEnuffMem2:
   416 00004BE1 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   417 00004BE3 EB02                <1>     jmp short .notEnuffMem1
   418                              <1> .notEnuffMem:
   419 00004BE5 31DB                <1>     xor ebx, ebx    ;No space to grow
   420                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   421 00004BE7 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   422 00004BEC 488B15(54C40300)    <1>     mov rdx, qword [oldRSP]
   423 00004BF3 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   424 00004BF6 E97F000000          <1>     jmp mcbErrHdlr
   425                              <1> .badAddrGiven:
   426 00004BFB B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   427 00004C00 E975000000          <1>     jmp mcbErrHdlr
   428                              <1> getsetMallocStrat: ;ah = 58h
   429 00004C05 84C0                <1>     test al, al
   430 00004C07 741F                <1>     jz .get
   431 00004C09 3C02                <1>     cmp al, 2
   432 00004C0B 7337                <1>     jae .bad
   433                              <1> ;Set here
   434 00004C0D 488B1D(54C40300)    <1>     mov rbx, qword [oldRSP]
   435 00004C14 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   436 00004C18 8805(ADC30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   437 00004C1E 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   438 00004C22 E824000000          <1>     call verifyIntegrityOfMCBChain
   439                              <1>     return
    18                              <2> %%_ret:
    19 00004C27 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   440                              <1> .get:
   441 00004C28 488B1D(54C40300)    <1>     mov rbx, qword [oldRSP]
   442 00004C2F 31C0                <1>     xor eax, eax
   443 00004C31 8A05(ADC30300)      <1>     mov al, byte [allocStrat]
   444 00004C37 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   445 00004C3A 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   446 00004C3E E808000000          <1>     call verifyIntegrityOfMCBChain
   447                              <1>     return
    18                              <2> %%_ret:
    19 00004C43 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   448                              <1> .bad:
   449 00004C44 B801000000          <1>     mov eax, errInvFnc
   450 00004C49 EB2F                <1>     jmp short mcbErrHdlr
   451                              <1> ;-----------------------------------:
   452                              <1> ;      Memory related routines      :
   453                              <1> ;-----------------------------------:
   454                              <1> verifyIntegrityOfMCBChain:
   455 00004C4B 50                  <1>     push rax
   456 00004C4C 53                  <1>     push rbx
   457 00004C4D 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   458                              <1> .ok:
   459 00004C54 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   460 00004C57 7408                <1>     je .ok1
   461 00004C59 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   462 00004C5C 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   463                              <1> .exit:
   464 00004C5E 5B                  <1>     pop rbx
   465 00004C5F 58                  <1>     pop rax
   466                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00004C60 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   467                              <1> .ok1:
   468 00004C61 31C0                <1>     xor eax, eax
   469 00004C63 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   470 00004C66 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   471 00004C6A 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   472 00004C71 4801C3              <1>     add rbx, rax
   473 00004C74 EBDE                <1>     jmp short .ok
   474                              <1> .bmcbPrep:
   475 00004C76 5B                  <1>     pop rbx ;Pop off the stack first!
   476 00004C77 58                  <1>     pop rax
   477                              <1> badMCBChain:
   478 00004C78 B007                <1>     mov al, errMCBbad   ;Yikes!
   479                              <1> mcbErrHdlr:
   480                              <1>     ;Jumped to with eax = error code
   481 00004C7A C605(E3C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   482 00004C81 E808130000          <1>     call extErrExit ;Error thru the unified error handler
   483 00004C86 3C07                <1>     cmp al, errMCBbad
   484                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004C88 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   485 00004C8A EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    34                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    35                              <1> ;EXEC and all default terminates are here
    36                              <1> 
    37                              <1> ;========================
    38                              <1> ;   Interrupt handlers
    39                              <1> ;========================
    40                              <1> terminateProcess:   ;Int 40h
    41 00004C8C 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    42 00004C8E E912110000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    43                              <1> terminateRes:       ;Int 47h
    44                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    45 00004C93 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    46 00004C99 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    47 00004C9C B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    48 00004CA1 E9FF100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    49                              <1> ;========================
    50                              <1> ;    Int 21h functions
    51                              <1> ;========================
    52                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    53                              <1> ;Input:
    54                              <1> ;rdx = Pointer to new PSP in memory.
    55                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    56                              <1> ;   Officially document that this MUST be paragraph aligned.
    57                              <1> ;rsi = alloc size for new psp block
    58 00004CA6 C605(EEC40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    59 00004CAD 4C8B05(F9C30300)    <1>     mov r8, qword [currentPSP]
    60 00004CB4 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    61 00004CB6 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    62 00004CB7 EB0C                <1>     jmp short copyPSP.pspCommon
    63                              <1> copyPSP:      ;ah = 26h
    64                              <1> ;Input:
    65                              <1> ;rdx = Pointer to new PSP in memory.
    66                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    67                              <1> ;   Officially document that this MUST be paragraph aligned.
    68 00004CB9 4C8B05(F9C30300)    <1>     mov r8, qword [currentPSP]
    69 00004CC0 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    70 00004CC4 53                  <1>     push rbx    ;Save this value for PSP allocsize
    71                              <1> .pspCommon:
    72 00004CC5 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    73 00004CCC 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    74 00004CD0 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    75                              <1> ;r8 is current PSP, now copy psp to rdx
    76                              <1> ;Preserve rdx and r8 until the end
    77 00004CD4 4C89C6              <1>     mov rsi, r8
    78 00004CD7 4889D7              <1>     mov rdi, rdx
    79 00004CDA B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    80 00004CDF F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    81 00004CE2 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    82 00004CEA F605(EEC40300)FF    <1>     test byte [pspCopyFlg], -1
    83 00004CF1 7449                <1>     jz .copy
    84                              <1>     ;Now reset the parent psp data
    85 00004CF3 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    86 00004CFB 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    87                              <1>     ;Now reset the copied jobFileTable
    88 00004CFF 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    89 00004D03 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    90 00004D0A B0FF                <1>     mov al, -1
    91 00004D0C F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    92                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    93 00004D0E 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    94 00004D12 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    95 00004D16 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    96                              <1> .xfrJFT:
    97 00004D1D 67E31C              <1>     jecxz .copy
    98 00004D20 FFC9                <1>     dec ecx
    99 00004D22 AC                  <1>     lodsb   ;Get the SFTndx in al
   100 00004D23 0FB6D8              <1>     movzx ebx, al
   101 00004D26 53                  <1>     push rbx
   102 00004D27 E8A3F9FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   103 00004D2C 58                  <1>     pop rax
   104 00004D2D 7508                <1>     jnz .badJFT
   105 00004D2F AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   106 00004D30 E8B1F9FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   107 00004D35 EBE6                <1>     jmp short .xfrJFT
   108                              <1> .badJFT:
   109 00004D37 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   110 00004D3A EBE1                <1>     jmp short .xfrJFT 
   111                              <1> .copy:
   112 00004D3C C605(EEC40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   113 00004D43 58                  <1>     pop rax ;Pop the allocsize back into rax
   114 00004D44 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   115                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   116 00004D47 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   117 00004D4B B042                <1>     mov al, 42h
   118 00004D4D E87B0D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   119 00004D52 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   120 00004D55 48AB                <1>     stosq   ;Move rdi to next entry and store
   121 00004D57 B043                <1>     mov al, 43h
   122 00004D59 E86F0D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   123 00004D5E 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   124 00004D61 48AB                <1>     stosq   ;Move rdi to next entry and store
   125 00004D63 B044                <1>     mov al, 44h
   126 00004D65 E8630D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   127 00004D6A 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   128 00004D6D 48AB                <1>     stosq   ;Move rdi to next entry and store
   129                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   130 00004D6F 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   131 00004D74 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   132 00004D7A C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
   133                              <1>     return
    18                              <2> %%_ret:
    19 00004D7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   134                              <1> 
   135                              <1> terminateStayRes:  ;ah = 31h
   136                              <1> ;Input: al  = Error code
   137                              <1> ;       edx = Number of paragraphs to keep resident
   138 00004D7F C605(DBC60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   139                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   140 00004D86 81FA06000000        <1>     cmp edx, 6
   141 00004D8C 7305                <1>     jae .aboveMinimum
   142 00004D8E BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   143                              <1> .aboveMinimum:
   144                              <1> ;Now we setup a call to Realloc 
   145                              <1> ;Setup regs with: 
   146                              <1> ;   r8 = address of the block to be realloc'ed
   147                              <1> ;   ebx = How many paras this block should contain after realloc.
   148 00004D93 4C8B05(F9C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   149 00004D9A 89D3                <1>     mov ebx, edx
   150 00004D9C 50                  <1>     push rax    ;Preserve errorlevel across call
   151 00004D9D 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   152 00004D9E E8C4FCFFFF          <1>     call reallocMemory
   153 00004DA3 5B                  <1>     pop rbx
   154 00004DA4 58                  <1>     pop rax
   155 00004DA5 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   156 00004DA7 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   157                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   158 00004DAB EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   159                              <1> 
   160                              <1> simpleTerminate:   ;ah = 00h
   161 00004DAD 31C0                <1>     xor eax, eax    ;Just fall through as normal
   162                              <1> terminateClean:    ;ah = 4Ch, EXIT
   163                              <1> ;Here we must:
   164                              <1> ;0) Build errorlevel and adjust variables accordingly
   165                              <1> ;1) Call Network Termination hook.
   166                              <1> ;2) Check if the program is it's own parent. If so, return.
   167                              <1> ;3) Swap the console back to the original driver if it is swapped.
   168                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   169                              <1> ;4) Free all file handles associated to the current process.
   170                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   171                              <1> ;5) Free all memory blocks that have the signature of current PSP
   172                              <1> ;6) Set current PSP to parent PSP
   173                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   174                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   175                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   176                              <1> ;10) Exit all critical sections.
   177                              <1> ;
   178                              <1> ; Step 0
   179                              <1> ;For now, just adjust error level in var
   180 00004DAF 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   181 00004DB1 8625(DBC60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   182 00004DB7 F605(65C40300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   183 00004DBE 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   184 00004DC0 C605(DBC60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   185                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   186 00004DC7 8A25(DBC60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   187                              <1> .storeELvl:
   188 00004DCD 668905(09C40300)    <1>     mov word [errorLevel], ax   ;Store word
   189                              <1>     
   190                              <1> ; Step 1 Tell network a process is terminating
   191 00004DD4 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   192 00004DD9 4C8B05(F9C30300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   193 00004DE0 CD4F                <1>     int 4Fh
   194                              <1> 
   195                              <1> ; Step 2
   196                              <1> .step1:
   197 00004DE2 488B3D(F9C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   198 00004DE9 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   199 00004DEC 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   200 00004DF0 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   201                              <1>     ;rete            ;If it is, simply return (al has errorLevel)
   202 00004DF3 0F84D1000000        <1>     je .exit
   203                              <1> ; Step 3
   204 00004DF9 E895D7FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   205                              <1> ; Step 3.5
   206 00004DFE 803D(DBC60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   207 00004E05 0F8491000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   208                              <1> ; Step 4
   209 00004E0B 803D(DBC60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   210 00004E12 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   211 00004E14 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   212 00004E19 CD4F                <1>     int 4Fh
   213                              <1> .skipAbortNetClose:
   214 00004E1B 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   215 00004E22 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   216 00004E25 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   217                              <1> .s4lp:
   218 00004E2C AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   219 00004E2D 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   220 00004E2F 7429                <1>     je .step5
   221 00004E31 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   222                              <1>     ;Replace with a call to close the handle eventually
   223 00004E34 57                  <1>     push rdi
   224 00004E35 E82DF8FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   225 00004E3A 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   226 00004E3C FF35(07C70300)      <1>     push qword [currentSFT]
   227 00004E42 E877F6FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   228 00004E47 E8F2EEFFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   229                              <1>     ;closeMain also flushes all sectors associated to the file
   230                              <1>     ;Ignore errors, simply keep closing files
   231 00004E4C 8F05(07C70300)      <1>     pop qword [currentSFT]
   232                              <1> .badHdl:
   233 00004E52 5F                  <1>     pop rdi
   234 00004E53 B0FF                <1>     mov al, -1
   235 00004E55 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   236 00004E56 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   237 00004E58 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   238                              <1> ;Step 5
   239                              <1> .step5:
   240 00004E5A 488B1D(F9C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   241                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   242                              <1>     ; with the currentPSP signature and free them.
   243 00004E61 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   244                              <1> .s5lp:  ;And walk the chain
   245                              <1> ;First verify the address in rsi is a valid mcb
   246 00004E68 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   247 00004E6A 80F94D              <1>     cmp cl, mcbMarkCtn
   248 00004E6D 7405                <1>     je .checkToFree
   249 00004E6F 80F95A              <1>     cmp cl, mcbMarkEnd
   250 00004E72 7528                <1>     jne .step6  ;Something wrong so stop freeing
   251                              <1> .checkToFree:
   252 00004E74 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   253 00004E78 750F                <1>     jne .noFree
   254 00004E7A 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   255 00004E7E 53                  <1>     push rbx
   256 00004E7F 51                  <1>     push rcx
   257 00004E80 56                  <1>     push rsi
   258 00004E81 E8D9FAFFFF          <1>     call freeMemory ;Free this memory block
   259 00004E86 5E                  <1>     pop rsi
   260 00004E87 59                  <1>     pop rcx
   261 00004E88 5B                  <1>     pop rbx
   262                              <1>     ;If an error occured, the internal vars will be set.
   263                              <1> .noFree:
   264 00004E89 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   265 00004E8C 740E                <1>     je .step6   ;Skip if we are
   266 00004E8E 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   267 00004E91 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   268 00004E95 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   269 00004E9A EBCC                <1>     jmp short .s5lp
   270                              <1> ;Step 6
   271                              <1> .step6:
   272 00004E9C 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   273 00004EA0 488905(F9C30300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   274                              <1> ;Step 7
   275                              <1>     ;rbx points to current PSP, the old parent task
   276                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   277 00004EA7 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   278 00004EAB B044                <1>     mov al, 44h
   279 00004EAD E889120000          <1>     call setIntVector
   280 00004EB2 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   281 00004EB6 B043                <1>     mov al, 43h
   282 00004EB8 E87E120000          <1>     call setIntVector
   283 00004EBD 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   284 00004EC1 B042                <1>     mov al, 42h
   285 00004EC3 52                  <1>     push rdx
   286 00004EC4 E872120000          <1>     call setIntVector
   287 00004EC9 5A                  <1>     pop rdx
   288                              <1> ;Step 8
   289                              <1> .exit:
   290 00004ECA B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   291 00004ECC CD4A                <1>     int 4ah
   292                              <1> 
   293 00004ECE FA                  <1>     cli
   294 00004ECF 488B1D(F9C30300)    <1>     mov rbx, qword [currentPSP]
   295 00004ED6 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   296                              <1>     ;Make the parent register frame the current one
   297                              <1>     ;Make RSP point to user stack from parent entry to exec
   298 00004EDA 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   299                              <1> 
   300 00004EDE 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   301 00004EE3 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   302                              <1> 
   303 00004EEC C605(6FC40300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   304 00004EF3 C605(E2C30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   305 00004EFA C605(E3C30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   306 00004F01 E8F90F0000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   307                              <1>     
   308 00004F06 48CF                <1>     iretq   ;and return to address that was in rdx
    35                                  %include "./Source/Kernel/MemExec/exec.asm"
    36                              <1> 
    37                              <1> 
    38                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    39                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    40                              <1> ;       rbx = Ptr to the parameter block used for loading
    41                              <1> ;       al = Subfunction:
    42                              <1> ;            00h = Load Program and transfer control to it
    43                              <1> ;            01h = Load Program but do not transfer ctrl to it
    44                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    45                              <1> ;      Reserved for future expansion:
    46                              <1> ;            04h = Load in background execution mode (PE only)
    47                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    48                              <1> ;               function but in 16-bit mode. 
    49                              <1> ;
    50                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    51                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    52                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    53                              <1> 
    54                              <1> ;If AL = 0 :
    55                              <1> ;            Load Child Program and Xfr control to it
    56                              <1> ; rbx ------>   |-------------------------------|
    57                              <1> ;               |   Ptr to Environment Block    |
    58                              <1> ;               |                               |
    59                              <1> ;               | Can be 0 => Get pointer to    |
    60                              <1> ;               | parent Environment Block      |
    61                              <1> ;               |-------------------------------|
    62                              <1> ;               |   Ptr to Command Line to be   |
    63                              <1> ;               |   placed at PSP + 80h         |
    64                              <1> ;               |-------------------------------|
    65                              <1> ;               |   Ptr to first default FCB    |
    66                              <1> ;               |      to copy to PSP.fcb1      |
    67                              <1> ;               |                               |
    68                              <1> ;               | Should be used to parse the   |
    69                              <1> ;               |  first two command line args  |
    70                              <1> ;               |-------------------------------|
    71                              <1> ;               |   Ptr to second default FCB   |
    72                              <1> ;               |      to copy to PSP.fcb2      |
    73                              <1> ;               |-------------------------------|
    74                              <1> ;
    75                              <1> ;If AL = 1 :
    76                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    77                              <1> ; rbx ------>   |-------------------------------|
    78                              <1> ;               |         AS IN AL=00H          |
    79                              <1> ;               |-------------------------------|
    80                              <1> ;               |     Initial Value of RSP      |
    81                              <1> ;               |       on program launch       |
    82                              <1> ;               |                               |
    83                              <1> ;               |     This is returned to the   |
    84                              <1> ;               |         caller by DOS         |
    85                              <1> ;               |-------------------------------|
    86                              <1> ;               |     Initial Value of RIP      |
    87                              <1> ;               |       on program launch       |
    88                              <1> ;               |                               |
    89                              <1> ;               |     This is returned to the   |
    90                              <1> ;               |         caller by DOS         |
    91                              <1> ;               |-------------------------------|
    92                              <1> ;
    93                              <1> ;                      !!Important Note!!
    94                              <1> ;   The block pointed to by rbx must reserve the space for 
    95                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    96                              <1> ;
    97                              <1> ;If AL = 3 :
    98                              <1> ;                      Load program overlay
    99                              <1> ; rbx ------>   |-------------------------------|
   100                              <1> ;               |  Pointer to the byte in the   |
   101                              <1> ;               |  prog space to start writing  |
   102                              <1> ;               |        the overlay at         |
   103                              <1> ;               |-------------------------------|
   104                              <1> ;               | DWORD offset from the base of |
   105                              <1> ;               |  the program to the location  |
   106                              <1> ;               |  the overlay is being loaded  |
   107                              <1> ;               |              in               |
   108                              <1> ;               |  (Called a Relocation Factor) |
   109                              <1> ;               |     Only FOR EXE Overlays     |
   110                              <1> ;               |        for CODE fixups        |
   111                              <1> ;               |  For COM, Current PSP + 100h  |
   112                              <1> ;               |      assumed to suffice       |
   113                              <1> ;               |-------------------------------|
   114                              <1> ;
   115                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   116                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   117                              <1> ;
   118                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   119 00004F08 55                  <1>     push rbp
   120 00004F09 4889E5              <1>     mov rbp, rsp
   121 00004F0C 4881EC70000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   122                              <1>     ;Clear up the pointers on the stack frame
   123 00004F13 31C0                <1>     xor eax, eax
   124 00004F15 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   125 00004F19 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax
   126 00004F1D 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   127 00004F21 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   128 00004F25 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   129                              <1> 
   130                              <1> 
   131 00004F29 3C03                <1>     cmp al, execOverlay
   132 00004F2B 7615                <1>     jbe .validSubfunction
   133                              <1> .badSubFunction:
   134 00004F2D B801000000          <1>     mov eax, errInvFnc
   135 00004F32 C605(E4C30300)01    <1>     mov byte [errorLocus], eLocUnk
   136                              <1> .badExit:
   137 00004F39 4889EC              <1>     mov rsp, rbp
   138 00004F3C 5D                  <1>     pop rbp
   139 00004F3D E94C100000          <1>     jmp extErrExit
   140                              <1> 
   141                              <1> .validSubfunction:
   142 00004F42 3C02                <1>     cmp al, execInvld
   143 00004F44 74E7                <1>     je .badSubFunction
   144                              <1>     ;Save registers for each function call
   145 00004F46 48895DD8            <1>     mov qword [rbp - execFrame.pParam], rbx
   146 00004F4A 488955D0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   147 00004F4E 0FB6C0              <1>     movzx eax, al
   148 00004F51 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   149 00004F55 4889D7              <1>     mov rdi, rdx
   150 00004F58 E8CB0C0000          <1>     call strlen ;Get string length in cx
   151 00004F5D 66894DE0            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   152                              <1>     ;Now open the file we wanna yeet to
   153 00004F61 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   154 00004F63 55                  <1>     push rbp    ;Preserve local frame ptr
   155 00004F64 E830E0FFFF          <1>     call openFileHdl
   156 00004F69 5D                  <1>     pop rbp
   157 00004F6A 72CD                <1>     jc .badExit ;Exit preserving error code in al
   158                              <1>     ;Now ax has the file handle
   159 00004F6C 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   160 00004F70 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   161 00004F73 E8EFF6FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   162 00004F78 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   163 00004F7C F7C280000000        <1>     test edx, devCharDev
   164 00004F82 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   165 00004F84 B002                <1>     mov al, errFnf
   166 00004F86 E9E3040000          <1>     jmp .cleanAndFail
   167                              <1> .validDiskFile:
   168 00004F8B 31C0                <1>     xor eax, eax
   169 00004F8D 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   170 00004F91 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   171 00004F95 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   172 00004F99 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   173 00004F9F 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   174 00004FA3 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   175 00004FA6 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   176 00004FA9 7514                <1>     jnz .copyEnvironmentBlock
   177 00004FAB 488B35(F9C30300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   178 00004FB2 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   179 00004FB6 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   180 00004FBA 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   181 00004FBD 746D                <1>     jz .loadProgram
   182                              <1> .copyEnvironmentBlock:
   183 00004FBF 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   184                              <1>     ;Get the length of the environment
   185 00004FC2 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   186 00004FC7 31C0                <1>     xor eax, eax
   187 00004FC9 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   188                              <1> .envVerifyLp:
   189 00004FCC F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   190 00004FCE 7531                <1>     jnz .invalidEnvironmentError
   191 00004FD0 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   192 00004FD3 FFC9                <1>     dec ecx
   193 00004FD5 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   194 00004FD6 75F4                <1>     jnz .envVerifyLp
   195                              <1> 
   196 00004FD8 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   197 00004FDB 57                  <1>     push rdi     ;Save the length of the environment block
   198 00004FDC 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   199 00004FE2 0FB75DE0            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   200 00004FE6 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   201 00004FE8 89FB                <1>     mov ebx, edi
   202 00004FEA C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   203 00004FED 55                  <1>     push rbp
   204 00004FEE E842F7FFFF          <1>     call allocateMemory
   205 00004FF3 5D                  <1>     pop rbp
   206 00004FF4 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   207 00004FF5 7314                <1>     jnc .copyEnvironment
   208                              <1>     ;Fall thru if not enuff memory
   209                              <1> .insufficientMemory:
   210 00004FF7 B808000000          <1>     mov eax, errNoMem
   211 00004FFC E96D040000          <1>     jmp .cleanAndFail
   212                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   213 00005001 B80A000000          <1>     mov eax, errBadEnv
   214 00005006 E963040000          <1>     jmp .cleanAndFail
   215                              <1> 
   216                              <1> .copyEnvironment:
   217                              <1>     ;rax has the ptr to allocated memory block
   218                              <1>     ;rcx has the number of chars to copy from the source env block
   219 0000500B 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   220 0000500E 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   221 00005012 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   222 00005016 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   223 00005019 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   224 0000501B B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   225 00005020 66AB                <1>     stosw       ;Away you go!
   226 00005022 488B75D0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   227 00005026 0FB74DE0            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   228 0000502A F3A4                <1>     rep movsb   ;Move the bytes to rdi
   229                              <1> ;Done with the environment... more or less
   230                              <1> .loadProgram:
   231 0000502C B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   232 00005031 488D15(B8D90300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   233 00005038 E84D040000          <1>     call .readDataFromHdl
   234 0000503D 0F8226040000        <1>     jc .badFmtErr
   235 00005043 85C0                <1>     test eax, eax   ;Were zero bytes read?
   236 00005045 0F841E040000        <1>     jz .badFmtErr
   237 0000504B 3D40000000          <1>     cmp eax, imageDosHdr_size
   238 00005050 0F8272020000        <1>     jb .loadCom
   239                              <1> 
   240 00005056 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   241 0000505B 740B                <1>     je .proceedEXE
   242 0000505D 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   243 00005062 0F8560020000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   244                              <1> .proceedEXE:
   245                              <1>     ;Now we need to read e_lfanew
   246 00005068 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   247 00005069 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   248 0000506C 8955A8              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   249 0000506F 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   250 00005071 30C0                <1>     xor al, al  ;Set file pointer from start of file
   251 00005073 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   252 00005077 E82CE1FFFF          <1>     call lseekHdl   ;Move to that position in the file
   253                              <1> 
   254 0000507C 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   255 0000507D B914000000          <1>     mov ecx, imageFileHeader_size
   256 00005082 E803040000          <1>     call .readDataFromHdl       ;Now read the COFF header
   257 00005087 85C0                <1>     test eax, eax   ;Were zero bytes read?
   258 00005089 0F84DA030000        <1>     jz .badFmtErr
   259 0000508F 3D14000000          <1>     cmp eax, imageFileHeader_size
   260 00005094 0F82CF030000        <1>     jb .badFmtErr
   261                              <1>     ;So now rdx points to the imageFileHeader
   262 0000509A 66813A6486          <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   263 0000509F 0F85C4030000        <1>     jne .badFmtErr
   264 000050A5 66817A107000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   265 000050AB 0F82B8030000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   266                              <1>     ;Now save the number of sections in the the file
   267 000050B1 0FB74202            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   268 000050B5 85C0                <1>     test eax, eax   ;If this is 0, what?
   269 000050B7 0F84AC030000        <1>     jz .badFmtErr
   270 000050BD 668945A0            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   271                              <1> 
   272                              <1>     ;Now load Optional header, file ptr points to it so all good!
   273 000050C1 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   274                              <1>     ;rdx points to exeHdrSpace
   275 000050C6 E8BF030000          <1>     call .readDataFromHdl
   276 000050CB 85C0                <1>     test eax, eax   ;Were zero bytes read?
   277 000050CD 0F8496030000        <1>     jz .badFmtErr
   278 000050D3 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   279 000050D8 0F828B030000        <1>     jb .badFmtErr
   280                              <1>     ;Now File Ptr points to data dirs, not an issue
   281 000050DE 81459870000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   282                              <1>     ;We load the program in, one section at a time, reading section headers in
   283                              <1>     ; one at a time to the section header internal buffer.
   284 000050E5 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   285 000050E9 744B                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   286 000050EB 8B1D(F0D90300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   287 000050F1 488B05(00DA0300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   288 000050F8 4885C0              <1>     test rax, rax
   289 000050FB 750A                <1>     jnz .notDefaultStackAlloc
   290 000050FD 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   290 00005106 00                  <1>
   291                              <1> .notDefaultStackAlloc:
   292 00005107 01C3                <1>     add ebx, eax    ;Add stack allocation
   293 00005109 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   294 0000510F 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   295 00005112 81C30B000000        <1>     add ebx, 11
   296 00005118 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   297 0000511B E815F6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   298 00005120 0F82D1FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   299 00005126 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   300 0000512A 480500010000        <1>     add rax, psp_size
   301 00005130 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   302 00005134 EB0B                <1>     jmp short .exeProceed1
   303                              <1> .exeOvlySkipAlloc:
   304 00005136 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   305 0000513A 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   306 0000513D 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   307                              <1> .exeProceed1:
   308                              <1>     ;So now copy one section at a time, read section header in
   309                              <1>     ;File pointer points to the directory table, so skip that
   310 00005141 8B15(24DA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   311 00005147 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   312 0000514D 0F8216030000        <1>     jb .badFmtErr
   313 00005153 FFCA                <1>     dec edx ;Decrement by 1 to make into a 0 based offset
   314                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   315 00005155 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   316 00005158 31C9                <1>     xor ecx, ecx
   317 0000515A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   318 0000515E B001                <1>     mov al, 1   ;Move handle forwards from current position
   319 00005160 E843E0FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   320                              <1>     ;eax has pointer location after adjustment
   321 00005165 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   322                              <1>     ;File now points to start of Section headers. Read first header in.
   323                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   324 00005168 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   325 0000516C 0FB74DA0            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   326                              <1> .loadLp:
   327 00005170 51                  <1>     push rcx    ;Save # of segments left on stack
   328 00005171 57                  <1>     push rdi    ;Save the current buffer ptr here
   329 00005172 B928000000          <1>     mov ecx, imageSectionHdr_size
   330 00005177 488D15(28DA0300)    <1>     lea rdx, sectHdr    ;Read section headers here
   331 0000517E E807030000          <1>     call .readDataFromHdl
   332 00005183 5F                  <1>     pop rdi
   333 00005184 59                  <1>     pop rcx
   334 00005185 85C0                <1>     test eax, eax
   335 00005187 0F84DC020000        <1>     jz .badFmtErr
   336 0000518D 3D28000000          <1>     cmp eax, imageSectionHdr_size
   337 00005192 0F85D1020000        <1>     jne .badFmtErr
   338                              <1>     ;File ptr moved forwards to next section header
   339 00005198 81459828000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   340                              <1>     ;Section header read, now we load section into memory
   341                              <1>     ;Move file ptr to data location
   342 0000519F 8B15(3CDA0300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   343 000051A5 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   344 000051A9 31C0                <1>     xor eax, eax    ;Seek from start of file
   345 000051AB 51                  <1>     push rcx
   346 000051AC 57                  <1>     push rdi
   347 000051AD E8F6DFFFFF          <1>     call lseekHdl
   348 000051B2 5F                  <1>     pop rdi
   349 000051B3 59                  <1>     pop rcx
   350                              <1> 
   351 000051B4 51                  <1>     push rcx
   352 000051B5 57                  <1>     push rdi    ;Save current buffer offset
   353 000051B6 8B0D(38DA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   354 000051BC 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   355 000051BF E8C6020000          <1>     call .readDataFromHdl
   356 000051C4 5F                  <1>     pop rdi
   357 000051C5 59                  <1>     pop rcx
   358 000051C6 0F829D020000        <1>     jc .badFmtErr
   359 000051CC 85C0                <1>     test eax, eax
   360 000051CE 0F8495020000        <1>     jz .badFmtErr
   361 000051D4 3B05(38DA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   362 000051DA 0F8589020000        <1>     jne .badFmtErr
   363                              <1>     ;Data read ok, now fill in any zeros needed
   364 000051E0 8B05(38DA0300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   365 000051E6 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   366 000051E9 3B05(30DA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   367 000051EF 730E                <1>     jae .skipPadding
   368 000051F1 51                  <1>     push rcx
   369 000051F2 8B0D(30DA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   370 000051F8 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   371                              <1>     ;rdi points to pad space
   372 000051FA 31C0                <1>     xor eax, eax
   373 000051FC F3AA                <1>     rep stosb   ;Pad that many zeros
   374 000051FE 59                  <1>     pop rcx
   375                              <1> .skipPadding:
   376 000051FF FFC9                <1>     dec ecx ;Decrement our section counter
   377 00005201 7419                <1>     jz .doExeFixups
   378                              <1>     ;Read next section header in here
   379 00005203 51                  <1>     push rcx
   380 00005204 57                  <1>     push rdi
   381 00005205 30C0                <1>     xor al, al  ;Move rel start of file
   382 00005207 8B5598              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   383 0000520A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   384 0000520E 31C9                <1>     xor ecx, ecx
   385 00005210 E893DFFFFF          <1>     call lseekHdl
   386 00005215 5F                  <1>     pop rdi
   387 00005216 59                  <1>     pop rcx
   388 00005217 E954FFFFFF          <1>     jmp .loadLp
   389                              <1> .doExeFixups:
   390                              <1> ;Here we fixup addresses as needed
   391                              <1> ;Program Entrypoint is saved in the header structure in the SDA
   392                              <1> ;Move File pointer to COFF header Coff + optional header sizes
   393                              <1> ;We look only for .reloc segment. We have it in memory too so use it to make 
   394                              <1> ; fixups. Zero the in memory image of reloc segment once we are done with it. 
   395                              <1> ;We checked that .reloc exists so all ok
   396 0000521C 8B15(24DA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   397 00005222 8B55A8              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   398 00005225 81C2AC000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   399                              <1>     ;eax now points to position in file of direcotry entry for reloc
   400 0000522B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   401 0000522F 31C0                <1>     xor eax, eax
   402 00005231 E872DFFFFF          <1>     call lseekHdl   ;Move handle there in file
   403 00005236 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   404 00005239 B908000000          <1>     mov ecx, imageDataDirectory_size
   405                              <1>     ;Read 8 bytes into sectHdr space
   406 0000523E 488D15(28DA0300)    <1>     lea rdx, sectHdr
   407 00005245 E840020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   408                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   409 0000524A 8B35(28DA0300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   410 00005250 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   411 00005252 0F840F010000        <1>     jz .buildChildPSP   ;... including if overlay
   412 00005258 480375B8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   413                              <1>     ;Now rsi points to where in memory the relocation data table is
   414                              <1>     ;Now compute the relocation factor 
   415 0000525C 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   416 00005260 482B05(D0D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   417                              <1>     ;The value in rax gives how much to subtract by
   418 00005267 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   419 0000526B 7507                <1>     jne .notOverlayReloc
   420 0000526D 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   421 00005271 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   422                              <1> .notOverlayReloc:
   423 00005274 48894598            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   424 00005278 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   425                              <1>     ;rsi points to relocation data table in memory
   426 0000527B 8B0D(2CDA0300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   427 00005281 81F900000000        <1>     cmp ecx, 0    ;If no relocations, skip
   428 00005287 0F84DA000000        <1>     jz .buildChildPSP
   429 0000528D 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   430                              <1>     ;rsi points to the first base relocation block. The relocations begin
   431                              <1>     ; after the first block
   432                              <1>     ;ecx has the number of base relocation blocks to process.
   433                              <1> .nextBlock:
   434 00005291 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   435 00005292 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   436 00005294 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   437 00005297 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   438 0000529A D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   439 0000529C 67E311              <1>     jecxz .blockDone
   440                              <1> .blockNotDone:
   441 0000529F 66AD                <1>     lodsw   ;Get the next page offset word
   442 000052A1 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   443 000052A6 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   444                              <1>     ;rdi points to qword to rebase
   445 000052A9 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   446 000052AC FFC9                <1>     dec ecx
   447 000052AE 75EF                <1>     jnz .blockNotDone
   448                              <1> .blockDone:
   449 000052B0 59                  <1>     pop rcx
   450 000052B1 FFC9                <1>     dec ecx
   451 000052B3 75DC                <1>     jnz .nextBlock
   452 000052B5 8B05(C8D90300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   453 000052BB 480345B8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   454 000052BF 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   455 000052C3 E99F000000          <1>     jmp .buildChildPSP
   456                              <1> .loadCom:
   457                              <1>     ;File is open here, so just read the file into memory. 
   458                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   459                              <1>     ;Allocate 64Kb of memory, or as much as we can
   460 000052C8 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   461 000052CC 744E                <1>     je .comOverlay
   462 000052CE BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   463 000052D3 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   464 000052D6 55                  <1>     push rbp
   465 000052D7 E859F4FFFF          <1>     call allocateMemory
   466 000052DC 5D                  <1>     pop rbp
   467 000052DD 734A                <1>     jnc .comallocOk
   468 000052DF 3C08                <1>     cmp al, errNoMem
   469 000052E1 0F8587010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   470                              <1>     ;rbx should have the amount available
   471                              <1>     ;We check if this value is psp_size more than filesize
   472 000052E7 53                  <1>     push rbx    ;Save new minimum size
   473 000052E8 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   474 000052ED 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   475 000052F1 31D2                <1>     xor edx, edx    ;Go to end of file
   476 000052F3 E8B0DEFFFF          <1>     call lseekHdl
   477                              <1>     ;eax has file size
   478 000052F8 5B                  <1>     pop rbx ;Get back max alloc size
   479 000052F9 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   480 000052FB 29C2                <1>     sub edx, eax
   481 000052FD 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   482 00005303 0F82EEFCFFFF        <1>     jb .insufficientMemory   ;Fail
   483 00005309 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   484 0000530C E824F4FFFF          <1>     call allocateMemory
   485 00005311 0F8257010000        <1>     jc .cleanAndFail
   486 00005317 E90D000000          <1>     jmp .comallocOk
   487                              <1> .comOverlay:
   488                              <1>     ;Here we simply read the file into the buffer provided
   489 0000531C 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   490 00005320 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   491 00005323 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   492 00005327 EB0A                <1>     jmp short .comRead
   493                              <1> .comallocOk:
   494                              <1>     ;rax should point to the first byte
   495 00005329 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   496 0000532D 480500010000        <1>     add rax, psp_size
   497                              <1> .comRead:
   498 00005333 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   499                              <1> 
   500 00005337 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   501 0000533C 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   502 00005340 31D2                <1>     xor edx, edx    ;Go to end of file
   503 00005342 E861DEFFFF          <1>     call lseekHdl
   504                              <1>     ;eax has filesize now
   505 00005347 50                  <1>     push rax    ;Save filesize
   506 00005348 31C0                <1>     xor eax, eax    ;Reposition to start of file
   507 0000534A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   508 0000534E 31D2                <1>     xor edx, edx    ;Go to start of file
   509 00005350 E853DEFFFF          <1>     call lseekHdl
   510 00005355 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   511 00005356 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   512 0000535A E82B010000          <1>     call .readDataFromHdl   ;Read from the file handle
   513 0000535F 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   514 00005363 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   515                              <1> .buildChildPSP:
   516                              <1>     ;We can close handle now
   517 00005367 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   518 0000536B 55                  <1>     push rbp
   519 0000536C E84CDDFFFF          <1>     call closeFileHdl   ;Close the file
   520 00005371 5D                  <1>     pop rbp
   521                              <1> 
   522                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   523 00005372 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   524 00005376 0F84CB000000        <1>     je .overlayExit
   525                              <1>     ;Now build the PSP
   526 0000537C 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   527 0000537F 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   528 00005383 52                  <1>     push rdx
   529 00005384 55                  <1>     push rbp
   530 00005385 E81CF9FFFF          <1>     call createPSP
   531 0000538A 5D                  <1>     pop rbp
   532 0000538B 5A                  <1>     pop rdx
   533                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   534 0000538C 488915(F9C30300)    <1>     mov qword [currentPSP], rdx
   535 00005393 E8950B0000          <1>     call dosCrit1Enter
   536 00005398 E812010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   537                              <1> 
   538 0000539D 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   539 000053A4 48893D(F1C30300)    <1>     mov qword [currentDTA], rdi ;and set it!
   540                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   541                              <1>     ; and set FS to point to the PSP
   542 000053AB 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   543                              <1> 
   544 000053AF 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   545 000053B3 B925000000          <1>     mov ecx, fcb_size
   546 000053B8 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   547 000053BC 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   548 000053BE F3A4                <1>     rep movsb   ;Copy fcb 1 over
   549 000053C0 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   550 000053C4 B925000000          <1>     mov ecx, fcb_size
   551 000053C9 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   552 000053CD 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   553 000053CF F3A4                <1>     rep movsb   ;Copy fcb 2 over
   554 000053D1 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   555 000053D5 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   556 000053DC B980000000          <1>     mov ecx, 80h
   557 000053E1 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   558                              <1> 
   559 000053E3 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   560 000053E5 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   561                              <1> 
   562                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   563 000053E8 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   564 000053ED 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   565 000053EF 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   566 000053F3 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   567                              <1> 
   568 000053F5 E8E1060000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   569 000053FA 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   570 000053FE 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   571 00005402 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   572 00005405 B042                <1>     mov al, 42h
   573 00005407 E82F0D0000          <1>     call setIntVector   ;bx preserved by this call
   574                              <1> 
   575                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   576 0000540C 88D8                <1>     mov al, bl
   577 0000540E 30DB                <1>     xor bl, bl
   578 00005410 E8EA060000          <1>     call setDrive
   579 00005415 7302                <1>     jnc .drive1Ok
   580 00005417 B3FF                <1>     mov bl, -1
   581                              <1> .drive1Ok:
   582 00005419 88F8                <1>     mov al, bh
   583 0000541B 30FF                <1>     xor bh, bh
   584 0000541D E8DD060000          <1>     call setDrive
   585 00005422 7302                <1>     jnc .drive2Ok
   586 00005424 B7FF                <1>     mov bh, -1
   587                              <1> .drive2Ok:
   588                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   589                              <1>     ;rdi has pointer to psp
   590 00005426 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   591                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   592 00005429 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   593 0000542E 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   594 00005432 741C                <1>     je .xfrProgram
   595 00005434 488B45A8            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   596 00005438 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   597 0000543C 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   598 00005440 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   599 00005444 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   600                              <1> .overlayExit:
   601 00005447 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   602 0000544A 5D                  <1>     pop rbp ;Point rsp to the return address
   603 0000544B E9300B0000          <1>     jmp extGoodExit ;And return!
   604                              <1> .xfrProgram:
   605 00005450 FA                  <1>     cli
   606 00005451 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   607 00005454 C605(E2C30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   608 0000545B FB                  <1>     sti
   609 0000545C FF75A8              <1>     push qword [rbp - execFrame.pProgEP]
   610 0000545F 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   611 00005462 4989F9              <1>     mov r9, rdi
   612 00005465 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   613                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 00005468 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   614                              <1> 
   615                              <1> .badFmtErr:
   616 00005469 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   617                              <1> .cleanAndFail:
   618                              <1> ;Close the open file and any open resources and fail
   619 0000546E E82D000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   620 00005473 E8BF0A0000          <1>     call dosCrit1Exit
   621 00005478 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   622 0000547C 50                  <1>     push rax    ;Save error code
   623 0000547D 55                  <1>     push rbp
   624 0000547E E83ADCFFFF          <1>     call closeFileHdl
   625 00005483 5D                  <1>     pop rbp
   626 00005484 58                  <1>     pop rax
   627 00005485 E9AFFAFFFF          <1>     jmp .badExit
   628                              <1> 
   629                              <1> .readDataFromHdl:
   630                              <1> ;Input: bx = File Handle
   631                              <1> ;       ecx = Number of bytes to transfer
   632                              <1> ;       rdx = Ptr to the buffer to use
   633 0000548A E811000000          <1>     call .clearArenaOwner   ;Entering critical section!
   634 0000548F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   635 00005493 55                  <1>     push rbp
   636 00005494 E863DCFFFF          <1>     call readFileHdl
   637 00005499 5D                  <1>     pop rbp
   638 0000549A E810000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   639                              <1>     return
    18                              <2> %%_ret:
    19 0000549F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   640                              <1> .clearArenaOwner:
   641 000054A0 53                  <1>     push rbx
   642 000054A1 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   643 000054A3 E8850A0000          <1>     call dosCrit1Enter
   644 000054A8 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   645 000054AD 5B                  <1>     pop rbx
   646                              <1>     return
    18                              <2> %%_ret:
    19 000054AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   647                              <1> .setPSPArenaOwner:
   648                              <1> ;Sets the current PSP as the arena owner
   649 000054AF 53                  <1>     push rbx
   650 000054B0 488B1D(F9C30300)    <1>     mov rbx, qword [currentPSP]
   651 000054B7 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   652 000054BC E8760A0000          <1>     call dosCrit1Exit
   653 000054C1 5B                  <1>     pop rbx
   654                              <1>     return
    18                              <2> %%_ret:
    19 000054C2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   655                              <1> .setProgOrEnvArenaOwnerToRBX:
   656                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   657 000054C3 9C                  <1>     pushfq
   658 000054C4 50                  <1>     push rax
   659                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   660                              <1>     ;This is because they are set up at separate points in the routine!
   661 000054C5 488B45C0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   662 000054C9 E80C000000          <1>     call .writeArenaHeaderOwner
   663 000054CE 488B45C8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   664 000054D2 E803000000          <1>     call .writeArenaHeaderOwner
   665 000054D7 58                  <1>     pop rax
   666 000054D8 9D                  <1>     popfq
   667                              <1>     return
    18                              <2> %%_ret:
    19 000054D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   668                              <1> .writeArenaHeaderOwner:
   669                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   670                              <1> ;       rbx = Owner ID
   671 000054DA 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   672                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000054DD 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   673 000054DF 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   674 000054E5 48895801            <1>     mov qword [rax + 1], rbx
   675                              <1>     return
    18                              <2> %%_ret:
    19 000054E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                                  %include "./Source/Kernel/Local/Local.asm"
    37                              <1> ;Localisation based functions live here
    38                              <1> 
    39                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    40                              <1> ;al = 0 => Get the switch char
    41                              <1> ;al = 1 => Set the switch char to whats in DL
    42                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    43                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    44                              <1> ;       Always returns -1 => /DEV/ optional
    45                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    46                              <1> ;       Input value is ignored
    47 000054EA 3C01                <1>     cmp al, 01
    48 000054EC 740B                <1>     je .setSC
    49 000054EE 7210                <1>     jb .getSC
    50 000054F0 3C03                <1>     cmp al, 03
    51 000054F2 7214                <1>     jb .getDev
    52 000054F4 741C                <1>     je .setDev
    53 000054F6 B0FF                <1>     mov al, -1
    54                              <1>     return
    18                              <2> %%_ret:
    19 000054F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> .setSC:
    56 000054F9 8815(ABC30300)      <1>     mov byte [switchChar], dl
    57                              <1>     return
    18                              <2> %%_ret:
    19 000054FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> .getSC:
    59 00005500 8A15(ABC30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    60 00005506 EB02                <1>     jmp short .getRet
    61                              <1> .getDev:
    62 00005508 B2FF                <1>     mov dl, -1
    63                              <1> .getRet:
    64 0000550A E8CC050000          <1>     call getUserRegs
    65 0000550F 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    66                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    67                              <1>     return
    18                              <2> %%_ret:
    19 00005512 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    68                              <1> 
    69                              <1> 
    70                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    71                              <1> ;Currently only accept subfunction al = 0, current country
    72                              <1> ;AL > 0 => errInvFnc, Subfunction error
    73                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    74 00005513 84C0                <1>     test al, al
    75 00005515 740A                <1>     jz .currentCountry
    76                              <1> .invalidFunction:
    77 00005517 B801000000          <1>     mov eax, errInvFnc
    78 0000551C E96D0A0000          <1>     jmp extErrExit
    79                              <1> .currentCountry:
    80 00005521 4881FAFFFFFFFF      <1>     cmp rdx, -1
    81 00005528 74ED                <1>     je .invalidFunction
    82 0000552A 488D35E9AAFFFF      <1>     lea rsi, ctryTbl
    83 00005531 4889D7              <1>     mov rdi, rdx
    84 00005534 B926000000          <1>     mov ecx, countryStruc_size
    85 00005539 F3A4                <1>     rep movsb
    86 0000553B 31C0                <1>     xor eax, eax
    87 0000553D E93E0A0000          <1>     jmp extGoodExit
    88                              <1> 
    89                              <1> 
    90                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    91                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    92 00005542 C3                  <1>     ret
    37                                  %include "./Source/Kernel/ctrlc.asm"
    38                              <1> diskDevErr:
    39                              <1> ;Called, NOT Jumped to. 
    40                              <1> ;Input: rdi = Disk Buffer pointer
    41                              <1> ;       eax = Status word (Zero Extended)
    42                              <1> ;       rbp = Disk DPB pointer
    43                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    44                              <1> ;Output: al = Int 44h response (0-3)
    45                              <1> ; All other registers preserved
    46 00005543 48893D(E9C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    47 0000554A 89C7                <1>     mov edi, eax    ;Store status word in rdi
    48 0000554C 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    49 0000554F 8A25(41C40300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    50 00005555 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    51                              <1>     ;Test for correct buffer data type
    52 00005558 53                  <1>     push rbx    ;Save rbx temporarily
    53 00005559 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    54 0000555C F6C301              <1>     test bl, dosBuffer
    55 0000555F 7505                <1>     jnz .df0
    56 00005561 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    57 00005564 EB17                <1>     jmp short .df3
    58                              <1> .df0:
    59 00005566 F6C302              <1>     test bl, fatBuffer
    60 00005569 7505                <1>     jnz .df1
    61 0000556B 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    62 0000556E EB0D                <1>     jmp short .df3
    63                              <1> .df1:
    64 00005570 F6C304              <1>     test bl, dirBuffer
    65 00005573 7505                <1>     jnz .df2
    66 00005575 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    67 00005578 EB03                <1>     jmp short .df3
    68                              <1> .df2:
    69 0000557A 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    70                              <1> .df3:
    71 0000557D 5B                  <1>     pop rbx
    72 0000557E 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    73 00005582 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    74 00005587 488B2D(63C70300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    75 0000558E 488B3D(E9C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    76                              <1>     return
    18                              <2> %%_ret:
    19 00005595 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    77                              <1> 
    78                              <1> charDevErr:
    79                              <1> ;Called with ah with additional bits
    80 00005596 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    81                              <1> criticalErrorSetup:
    82 00005599 8825(41C40300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    83 0000559F 48892D(63C70300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    84 000055A6 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    85                              <1>     ;For now, fall through, but need much work to change it later! 
    86                              <1> 
    87                              <1> 
    88                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    89                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    90                              <1> ; to the critical error handler.
    91                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    92                              <1> ; and with Int44Bitfield set
    93                              <1> ;               AH = Critical Error Bitfield
    94                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    95                              <1> ;               Bit 6 - Reserved
    96                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    97                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    98                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    99                              <1> ;               Bits [2-1] = Affected Disk Error
   100                              <1> ;                     0 0   DOS area
   101                              <1> ;                     0 1   FAT area
   102                              <1> ;                     1 0   Directory area
   103                              <1> ;                     1 1   Data area
   104                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   105                              <1> ;               AL  = Failing drive number if AH[7] = 0
   106                              <1> ;               DIL = Error code for errorMsg
   107                              <1> ;               RSI = EA of Device Header for which device the error occured
   108                              <1> ;Return:
   109                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   110                              <1> ;                  = 1 - Retry the Operation    (Retry)
   111                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   112                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   113                              <1> ; Return response from int 44h in al
   114                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   115                              <1> ; This function will terminate the program if an abort was requested!
   116                              <1> ; This function also destroys RBP
   117 000055AC 803D(E1C30300)01    <1>     cmp byte [critErrFlag], 1
   118 000055B3 7204                <1>     jb .noIntError  ;If not 0, enter
   119 000055B5 B003                <1>     mov al, critFail    ;Else, return Fail always
   120 000055B7 EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   121                              <1> .noIntError:
   122 000055B9 FA                  <1>     cli ;Disable Interrupts
   123 000055BA FE05(E1C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   124 000055C0 FE0D(E2C30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   125 000055C6 488925(39C40300)    <1>     mov qword [xInt44hRSP], rsp
   126 000055CD 488B25(54C40300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   127 000055D4 31ED                <1>     xor ebp, ebp    ;Always zeroed
   128 000055D6 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   129 000055D8 488B25(39C40300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   130 000055DF C605(E1C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   131 000055E6 FE05(E2C30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   132 000055EC FB                  <1>     sti ;Reenable Interrupts
   133                              <1>     ;Now we check that the response given was allowed, and translate if needed
   134                              <1> .checkResponse:
   135 000055ED 3C00                <1>     cmp al, critIgnore
   136 000055EF 7421                <1>     je .checkIgnore
   137 000055F1 3C01                <1>     cmp al, critRetry
   138 000055F3 7428                <1>     je .checkRetry
   139 000055F5 3C03                <1>     cmp al, critFail
   140 000055F7 752F                <1>     jne .abort   ;Must be abort
   141                              <1> .setFail:   ;Here is for fail
   142 000055F9 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   143 000055FB FE05(43C40300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   144 00005601 F605(41C40300)08    <1>     test byte [Int44bitfld], critFailOK
   145 00005608 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   146                              <1> .exit:
   147 0000560A C605(E3C30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   148                              <1>     return
    18                              <2> %%_ret:
    19 00005611 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> .checkIgnore:
   150 00005612 F605(41C40300)20    <1>     test byte [Int44bitfld], critIgnorOK
   151 00005619 75EF                <1>     jnz .exit
   152 0000561B EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   153                              <1> .checkRetry:
   154 0000561D F605(41C40300)10    <1>     test byte [Int44bitfld], critRetryOK
   155 00005624 75E4                <1>     jnz .exit   
   156 00005626 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   157                              <1> .abort:
   158                              <1> ;Prepare to abort. We abort from within!
   159                              <1> ;If a network request requests abort, translate to fail
   160 00005628 803D(D7C60300)FF    <1>     cmp byte [dosInvoke], -1
   161 0000562F 7509                <1>     jne .kill   ;If this is zero, local invokation
   162 00005631 C605(6FC40300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   163 00005638 EBD0                <1>     jmp short .exit
   164                              <1> .kill:
   165 0000563A 66893D(E5C30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   166 00005641 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   167 00005643 C605(DBC60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   168 0000564A E978F7FFFF          <1>     jmp terminateClean.altEP
   169                              <1> 
   170                              <1> ctrlBreakHdlr:
   171 0000564F B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   172 00005651 E86BCEFFFF          <1>     call printCaretASCII
   173 00005656 E896CEFFFF          <1>     call printCRLF
   174                              <1>     ;Reset the console back to 0
   175 0000565B C605(6DC40300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   176                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   177 00005662 FA                  <1> 	cli
   178 00005663 488B25(54C40300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   179 0000566A E890080000          <1> 	call dosPopRegs ;Get user state back
   180 0000566F 488925(01C40300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   181 00005676 F8                  <1>     clc
   182 00005677 CD43                <1>     int 43h ;Call critical error handler
   183 00005679 FA                  <1>     cli ;Clear interrupts again
   184 0000567A 488905(0DC40300)    <1>     mov qword [oldRAX], rax ;Save rax
   185 00005681 9C                  <1>     pushfq  ;Get flags in rax
   186 00005682 58                  <1>     pop rax 
   187 00005683 483B25(01C40300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   188 0000568A 750C                <1>     jne .checkCF
   189                              <1> .returnToDOS:
   190 0000568C 488B05(0DC40300)    <1>     mov rax, qword [oldRAX]
   191 00005693 E90D070000          <1>     jmp functionDispatch    ;Goto int 41h
   192                              <1> .checkCF:
   193 00005698 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   194 0000569F A801                <1>     test al, 1  ;CF set?
   195 000056A1 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   196 000056A3 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   197 000056A8 C605(65C40300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   198 000056AF E9F1060000          <1>     jmp functionDispatch
   199                              <1> 
    38                                  %include "./Source/Kernel/dosPrim.asm"
    39                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    40                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    41                              <1> 
    42                              <1> dosDefCritErrHdlr:
    43                              <1> ;The DOS default critical error handler always returns FAIL
    44 000056B4 B003                <1>     mov al, critFail
    45 000056B6 48CF                <1>     iretq
    46                              <1> goDriverChar:
    47                              <1> ;Shortcut for Char requests, make a driver request
    48                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    49 000056B8 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    50                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    51                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    52                              <1> ;       rbx = Ptr to the request header for the driver call!
    53 000056BC E880080000          <1>     call dosCrit2Enter
    54 000056C1 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    55 000056C4 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    56 000056C7 E87F080000          <1>     call dosCrit2Exit
    57                              <1>     return
    18                              <2> %%_ret:
    19 000056CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> 
    59                              <1> setupPhysicalDiskRequest:
    60                              <1> ;Ensure that al has valid disk number
    61                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    62                              <1> ;If CF=NC, rbp = DPB ptr.
    63                              <1> ;If CF=CY, exit error
    64 000056CD 84C0                <1>     test al, al
    65 000056CF 723F                <1>     jc .diskError
    66 000056D1 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    67 000056D7 7337                <1>     jae .diskError
    68 000056D9 50                  <1>     push rax
    69 000056DA FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    70 000056DC E887040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    71 000056E1 58                  <1>     pop rax
    72 000056E2 7235                <1>     jc .error
    73 000056E4 8805(DEC60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    74 000056EA 488B2D(E7C60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    75 000056F1 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    76 000056F9 750A                <1>     jnz .netError
    77 000056FB 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    78 000056FF E862030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    79                              <1>     return
    18                              <2> %%_ret:
    19 00005704 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    80                              <1> .netError:
    81 00005705 66C705(E5C30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    81 0000570D 00                  <1>
    82 0000570E EB09                <1>     jmp short .error
    83                              <1> .diskError:
    84 00005710 66C705(E5C30300)0F- <1>     mov word [errorExCde], errBadDrv
    84 00005718 00                  <1>
    85                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    86 00005719 C605(E4C30300)02    <1>     mov byte [errorLocus], eLocDsk
    87 00005720 C605(E7C30300)07    <1>     mov byte [errorAction], eActRetUsr
    88 00005727 C605(E8C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    89 0000572E F9                  <1>     stc
    90                              <1>     return
    18                              <2> %%_ret:
    19 0000572F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> setupAbsDiskEntry:
    93                              <1> ;Prepares to sets up the CDS and DPB for the request
    94 00005730 FE05(E2C30300)      <1>     inc byte [inDOS]
    95 00005736 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    96 00005737 FC                  <1>     cld ;Set string ops in the right direction
    97 00005738 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    98 0000573D 7223                <1>     jc .exit    ;Error exit
    99 0000573F C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
   100 00005746 56                  <1>     push rsi
   101 00005747 50                  <1>     push rax
   102 00005748 488D35(F7C40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   103 0000574F 8806                <1>     mov byte [rsi], al  ;Construct a path
   104 00005751 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   105 00005754 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   106 00005758 F8                  <1>     clc
   107                              <1> ;++++++++++++++++++++++++++++
   108                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   109                              <1> ;Entered with path in rsi (ah=03h)
   110 00005759 B800030000          <1>     mov eax, 0300h  
   111 0000575E CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   112                              <1> ;++++++++++++++++++++++++++++
   113 00005760 58                  <1>     pop rax
   114 00005761 5E                  <1>     pop rsi
   115                              <1> .exit:
   116 00005762 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   117                              <1>     return
    18                              <2> %%_ret:
    19 00005764 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   118                              <1> 
   119                              <1> absDiskWrite:       ;Int 46h
   120                              <1> ;al = Drive number
   121                              <1> ;rbx = Memory Buffer address to read from
   122                              <1> ;ecx = Number of sectors to write
   123                              <1> ;rdx = Start LBA to write to
   124 00005765 FA                  <1>     cli
   125 00005766 488925(54C40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   126 0000576D 488D25(AED90300)    <1>     lea rsp, DiskStakTop
   127 00005774 55                  <1>     push rbp
   128 00005775 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   129 00005776 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   130 0000577B 7252                <1>     jc absDiskExit
   131 0000577D E8CF010000          <1>     call primReqWriteSetup
   132 00005782 EB1D                <1>     jmp short absDiskReadWriteCommon
   133                              <1> absDiskRead:        ;Int 45h
   134                              <1> ;al = Drive number
   135                              <1> ;rbx = Memory Buffer address to write to
   136                              <1> ;ecx = Number of sectors to read
   137                              <1> ;rdx = Start LBA to read from
   138 00005784 FA                  <1>     cli 
   139 00005785 488925(54C40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   140 0000578C 488D25(AED90300)    <1>     lea rsp, DiskStakTop
   141 00005793 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   142 00005794 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   143 00005795 E896FFFFFF          <1>     call setupAbsDiskEntry
   144 0000579A 7233                <1>     jc absDiskExit
   145 0000579C E8BB010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   146                              <1> absDiskReadWriteCommon:
   147                              <1> ;Entered with the appropriate function number in ah
   148                              <1> ; and primary request header in rbx
   149 000057A1 E83B000000          <1>     call absDiskDriverCall
   150 000057A6 7427                <1>     jz absDiskExit  ;Skip error code checking
   151 000057A8 8A05(9DC40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   152                              <1>     ;DOS uses the following pairs in a table
   153                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   154 000057AE B480                <1>     mov ah, 80h ;Attachment failure
   155 000057B0 3C0C                <1>     cmp al, 0Ch ;Gen error
   156 000057B2 741A                <1>     je .absExit
   157 000057B4 B440                <1>     mov ah, 40h ;Seek error
   158 000057B6 3C06                <1>     cmp al, 06h
   159 000057B8 7414                <1>     je .absExit
   160 000057BA B408                <1>     mov ah, 08h ;Bad CRC
   161 000057BC 3C04                <1>     cmp al, 04h
   162 000057BE 740E                <1>     je .absExit
   163 000057C0 B404                <1>     mov ah, 04h ;Sector not found
   164 000057C2 3C08                <1>     cmp al, 08h
   165 000057C4 7408                <1>     je .absExit
   166 000057C6 30E4                <1>     xor ah, ah  ;Write Protect Violation
   167 000057C8 84C0                <1>     test al, al
   168 000057CA 7402                <1>     je .absExit
   169 000057CC B402                <1>     mov ah, 02h ;Other Error
   170                              <1> .absExit:
   171 000057CE F9                  <1>     stc
   172                              <1> absDiskExit:
   173 000057CF 5B                  <1>     pop rbx
   174 000057D0 5D                  <1>     pop rbp
   175 000057D1 FA                  <1>     cli
   176 000057D2 FE0D(E2C30300)      <1>     dec byte [inDOS]
   177 000057D8 488B25(54C40300)    <1>     mov rsp, qword [oldRSP]
   178 000057DF FB                  <1>     sti ;Reenable interrupts
   179                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 000057E0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> absDiskDriverCall:
   181                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   182                              <1> ;       rbx = Request header address
   183                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   184                              <1> ;       eax = Status word from request
   185                              <1> ;       ecx = Number of sectors transferred
   186 000057E1 56                  <1>     push rsi
   187                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   188 000057E2 8B0D(B0C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   189                              <1>     ;Prepare for goDriver now
   190 000057E8 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   191 000057EC E8CBFEFFFF          <1>     call goDriver   ;Make request
   192 000057F1 5E                  <1>     pop rsi
   193 000057F2 8B05(B0C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   194 000057F8 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   195 000057FA 0FB705(9DC40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   196 00005801 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   197                              <1>     return
    18                              <2> %%_ret:
    19 00005805 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   198                              <1> 
   199                              <1> getDiskDPB:
   200                              <1> ;Gets the disk DPB if the Disk is valid
   201                              <1> ;Otherwise will return a pointer to the drive DPB
   202                              <1> ;Called with rdi pointing to the CDS
   203                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   204 00005806 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   205 0000580A 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   206 0000580D 8805(DEC60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   207 00005813 E84E020000          <1>     call setWorkingDPB
   208 00005818 57                  <1>     push rdi    ;Save the CDS ptr
   209 00005819 E85A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   210 0000581E 5F                  <1>     pop rdi
   211 0000581F 7233                <1>     jc .exitBad ;Preserve CF
   212 00005821 7530                <1>     jnz .exit
   213                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   214 00005823 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   215 00005829 31C0                <1>     xor eax, eax
   216 0000582B 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   217 0000582E 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   218 00005832 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   219                              <1> .checkCDS:
   220 00005839 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   221 0000583D 7509                <1>     jne .next
   222 0000583F 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   223 00005843 7403                <1>     jz .next    ;IF yes, skip it
   224 00005845 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   225                              <1> .next:
   226 00005848 4881C75B000000      <1>     add rdi, cds_size
   227 0000584F FEC9                <1>     dec cl
   228 00005851 75E6                <1>     jnz .checkCDS
   229                              <1> .exit:
   230 00005853 F8                  <1>     clc
   231                              <1> .exitBad:
   232                              <1>     return
    18                              <2> %%_ret:
    19 00005854 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> checkIfMedCheck:
   235                              <1> ;Input: rsi = DPB for disk
   236 00005855 50                  <1>     push rax
   237 00005856 53                  <1>     push rbx
   238                              <1>     ;!!!!!!!!!!!!
   239                              <1>     ;For now just if its the same disk, be ok with it.
   240                              <1>     ;!!!!!!!!!!!!
   241                              <1>     ;Read the clock record. Cross Day Bndry will always force a new operation
   242                              <1>     ;Read the time fields directly.
   243 00005857 E8E1CAFFFF          <1>     call swapPrimaryHeader  ;Save the primary header temporarily
   244 0000585C E82ED1FFFF          <1>     call readDateTimeRecord ;Update the time
   245 00005861 F9                  <1>     stc ;Set CF, write backup to primary header
   246 00005862 E8D6CAFFFF          <1>     call swapPrimaryHeader
   247                              <1> 
   248                              <1> 
   249 00005867 8A06                <1>     mov al, byte [rsi + dpb.bDriveNumber] 
   250 00005869 3805(7ADA0300)      <1>     cmp byte [lastDiskNum], al
   251 0000586F 7500                <1>     jnz .exit
   252                              <1> 
   253                              <1> .exit:
   254 00005871 5B                  <1>     pop rbx
   255 00005872 58                  <1>     pop rax
   256                              <1>     return
    18                              <2> %%_ret:
    19 00005873 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> .okTime:
   258 00005874 31DB                <1>     xor ebx, ebx
   259 00005876 EBF9                <1>     jmp short .exit
   260                              <1> ensureDiskValid:
   261                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   262                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   263                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   264                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   265                              <1> .medChk:
   266 00005878 E828010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   267                              <1> ;Return in rbx the req hdr address
   268 0000587D 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   269 00005881 E836FEFFFF          <1>     call goDriver   ;Request!
   270 00005886 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   271 0000588A F7C700800000        <1>     test edi, drvErrStatus
   272 00005890 756B                <1>     jnz .diskDrvCritErrMedChk
   273                              <1> .medChkIgnore:
   274 00005892 8A05(DEC60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   275 00005898 30E4                <1>     xor ah, ah
   276 0000589A 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   277 0000589D 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   278 000058A0 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   279 000058A2 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   280 000058A4 E8CCB0FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   281 000058A9 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   282 000058AA 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   283                              <1>     ;ZF=NZ from test for dirty buffers
   284                              <1> .exit:
   285                              <1>     return
    18                              <2> %%_ret:
    19 000058AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   286                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   287 000058AD C605(B6D90300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   288 000058B4 E8E0B0FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   289                              <1>     ;Get a buffer to read BPB into in rdi
   290 000058B9 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   291 000058BB E8A8B2FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   292 000058C0 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   293 000058C2 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   294                              <1> .repeatEP:
   295 000058C6 E806010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   296 000058CB 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   297 000058CF E8E8FDFFFF          <1>     call goDriver   ;Request!
   298 000058D4 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   299 000058D8 A900800000          <1>     test eax, drvErrStatus
   300 000058DD 755C                <1>     jnz .diskDrvCritErrBPB
   301                              <1>     ;Now rebuild the dpb fields for this drive
   302 000058DF 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   303 000058E3 E867090000          <1>     call createDPB
   304                              <1>     ;Adjust the buffer header information
   305 000058E8 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   306 000058EB 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   307 000058EE 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   308 000058F1 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   309 000058F4 30E4                <1>     xor ah, ah
   310 000058F6 8825(B6D90300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   311                              <1>     return
    18                              <2> %%_ret:
    19 000058FC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   312                              <1> .diskDrvCritErrMedChk:
   313                              <1> ;Critical Errors fall through here
   314                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   315 000058FD 48893D(E9C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   316 00005904 48892D(63C70300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   317 0000590B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   318 0000590E B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   319 00005910 8825(41C40300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   320 00005916 E891FCFFFF          <1>     call criticalDOSError
   321 0000591B 488B3D(E9C30300)    <1>     mov rdi, qword [xInt44RDI]
   322 00005922 488B2D(63C70300)    <1>     mov rbp, qword [tmpDPBPtr]
   323 00005929 3C01                <1>     cmp al, critRetry
   324 0000592B 0F8447FFFFFF        <1>     je .medChk
   325 00005931 3C00                <1>     cmp al, critIgnore
   326 00005933 0F8459FFFFFF        <1>     je .medChkIgnore
   327 00005939 F9                  <1>     stc ;Set error flag to indicate fail
   328                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 0000593A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> .diskDrvCritErrBPB:
   331                              <1>     ;eax has status word, rbp has dpb ptr
   332                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   333 0000593B C605(41C40300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   334 00005942 E8FCFBFFFF          <1>     call diskDevErr
   335 00005947 3C01                <1>     cmp al, critRetry
   336 00005949 0F8477FFFFFF        <1>     je .repeatEP
   337                              <1>     ;Else we fail (Ignore=Fail here)
   338 0000594F F9                  <1>     stc ;Set error flag to indicate fail
   339                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00005950 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   340                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   341                              <1> ;           Primitive Driver Requests
   342                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   343                              <1> ;First are Disk requests, then Char device requests
   344                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   345                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   346                              <1> 
   347                              <1> primReqWriteSetup:
   348 00005951 50                  <1>     push rax
   349 00005952 B408                <1>     mov ah, drvWRITE    ;Command code
   350 00005954 0225(AAC30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   351 0000595A EB03                <1>     jmp short primReqRWCommon
   352                              <1> primReqReadSetup:
   353 0000595C 50                  <1>     push rax
   354 0000595D B404                <1>     mov ah, drvREAD
   355                              <1> primReqRWCommon:
   356                              <1> ;Sets up the IO request packet with:
   357                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   358                              <1> ; rbx = Data storage buffer ptr
   359                              <1> ; ecx = Number of sectors to transfer
   360                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   361                              <1> ; ~~~~ Set by entry function ~~~~ 
   362                              <1> ; ah = Command code
   363                              <1> ; All regs preserved EXCEPT rbx.
   364                              <1> ; Return: rbx = Transfer Address
   365 0000595F 48891D(A8C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   366 00005966 890D(B0C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   367 0000596C C605(9AC40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   368 00005973 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   369 00005978 8905(9BC40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   370 0000597E 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   371 00005981 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   372                              <1>     ;Disk operations only here!
   373 00005983 488915(B4C40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   374 0000598A 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   375 0000598D 8805(A7C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   376 00005993 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   377 00005996 8805(9BC40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   378                              <1> primReqCommonExit:
   379                              <1> ;Returns in rbx the primary request header as these functions
   380                              <1> ; setup the request in the primary request header space
   381 0000599C 58                  <1>     pop rax
   382 0000599D 488D1D(9AC40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   383                              <1>     return
    18                              <2> %%_ret:
    19 000059A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   384                              <1> 
   385                              <1> primReqMedCheckSetup:
   386                              <1> ;Prepare the diskIO packet for mediacheck
   387                              <1> ;rbp has DPB pointer for device to check media on
   388 000059A5 50                  <1>     push rax
   389 000059A6 C605(9AC40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   390 000059AD 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   391 000059B0 8805(A7C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   392 000059B6 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   393 000059B9 8805(9BC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   394 000059BF C605(9CC40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   395 000059C6 66C705(9DC40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   395 000059CE 00                  <1>
   396 000059CF EBCB                <1>     jmp short primReqCommonExit
   397                              <1> 
   398                              <1> primReqGetBPBSetup:
   399                              <1> ;rbp has DPB pointer for device
   400                              <1> ;rdi has sector buffer header pointer for transfer
   401 000059D1 50                  <1>     push rax
   402 000059D2 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   403 000059D6 48893D(A8C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   404 000059DD C605(9AC40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   405 000059E4 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   406 000059E7 8805(A7C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   407 000059ED 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   408 000059F0 8805(9BC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   409 000059F6 C605(9CC40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   410 000059FD 66C705(9DC40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   410 00005A05 00                  <1>
   411 00005A06 EB94                <1>     jmp short primReqCommonExit
   412                              <1> 
   413                              <1> primReqOpenSetup:
   414                              <1> ;al = unit number if a disk device. Undefined otherwise
   415 00005A08 50                  <1>     push rax
   416 00005A09 B40D                <1>     mov ah, drvOPEN
   417 00005A0B EB03                <1>     jmp short primReqOCcommon
   418                              <1> primReqCloseSetup:
   419                              <1> ;al = unit number if a disk device. Undefined otherwise
   420 00005A0D 50                  <1>     push rax
   421 00005A0E B40E                <1>     mov ah, drvCLOSE
   422                              <1> primReqOCcommon:
   423 00005A10 C605(9AC40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   424 00005A17 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   425 00005A18 8905(9BC40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   426                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   427 00005A1E E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   428                              <1> 
   429                              <1> secdReqCharIOReq:
   430                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   431                              <1> ;Input:
   432                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   433                              <1> ; ecx = Length of buffer
   434                              <1> ; rdi = Buffer pointer
   435                              <1> ;Output: 
   436                              <1> ; rbx = Transfer Address 
   437 00005A23 488D1D(70C40300)    <1>     lea rbx, secdReqHdr
   438 00005A2A C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   439 00005A2D 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   440 00005A30 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   441 00005A36 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   442 00005A3A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   443                              <1>     return
    18                              <2> %%_ret:
    19 00005A3D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   444                              <1> ;If the device which will process this request is a disk device
   445                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   446                              <1> ;Then we will read the appropriate byte from that buffer to the 
   447                              <1> ; singleIOByt buffer.
   448                              <1> ;Such a request will require additional setup with the following fields:
   449                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    39                                  %include "./Source/Kernel/dosUtils.asm"
    40                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    41                              <1> 
    42                              <1> readFSRegister:
    43                              <1> ;Output: rax = Value of fs
    44 00005A3E 51                  <1>     push rcx
    45 00005A3F 52                  <1>     push rdx
    46 00005A40 B9000100C0          <1>     mov ecx, 0C0000100h
    47 00005A45 0F32                <1>     rdmsr   ;Get fs in edx:eax
    48 00005A47 48C1E220            <1>     shl rdx, 20h
    49 00005A4B 4809D0              <1>     or rax, rdx
    50 00005A4E 5A                  <1>     pop rdx
    51 00005A4F 59                  <1>     pop rcx
    52                              <1>     return
    18                              <2> %%_ret:
    19 00005A50 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> writeFSRegister:
    55                              <1> ;Input: rax = Value to write to fs
    56 00005A51 51                  <1>     push rcx
    57 00005A52 52                  <1>     push rdx
    58 00005A53 4889C2              <1>     mov rdx, rax    ;Split rax to edx:eax
    59 00005A56 48C1EA20            <1>     shr rdx, 20h    ;Shift the upper dword low
    60 00005A5A 09C0                <1>     or eax, eax     ;Clear upper dword
    61 00005A5C B9000100C0          <1>     mov ecx, 0C0000100h
    62 00005A61 0F30                <1>     wrmsr
    63 00005A63 5A                  <1>     pop rdx
    64 00005A64 59                  <1>     pop rcx
    65                              <1>     return
    18                              <2> %%_ret:
    19 00005A65 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> ;Basic Drive related Utilities
    68                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    69                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    70                              <1> ; that gets set up)
    71                              <1> 
    72                              <1> setWorkingDPB:
    73                              <1> ;Gets dpb in rbp and saves to workingDPB
    74 00005A66 48892D(DFC60300)    <1>     mov qword [workingDPB], rbp
    75                              <1>     return
    18                              <2> %%_ret:
    19 00005A6D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> testCDSNet:
    78                              <1> ;Checks if the workingCDS is a redirector drive
    79                              <1> ;Returns: CF=NC => Not net
    80                              <1> ;         CF=CY => Network redirector
    81                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    82                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    83                              <1> ;         rdi = workingCDS ptr
    84 00005A6E 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS]
    85 00005A75 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    86 00005A7C 7409                <1>     je .net
    87 00005A7E 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    88 00005A84 7501                <1>     jnz .net ;Net with CDS
    89                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 00005A86 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    90                              <1> .net:
    91 00005A87 F9                  <1>     stc ;Set Net bit
    92                              <1>     return
    18                              <2> %%_ret:
    19 00005A88 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    93                              <1> 
    94                              <1> getDiskData:
    95                              <1> ;This function returns:
    96                              <1> ;al = sectors per cluster
    97                              <1> ;ah = media ID byte
    98                              <1> ;ebx = total clusters
    99                              <1> ;cx = bytes per sector
   100                              <1> ;edx = number of available clusters
   101                              <1> ;
   102                              <1> ;If CF=CY on exit, al contains the error code
   103 00005A89 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
   104 00005A8E 7308                <1>     jnc .physical
   105                              <1>     ;Beep a redir request out
   106 00005A90 B80C110000          <1>     mov eax, 110Ch 
   107 00005A95 CD4F                <1>     int 4Fh
   108                              <1>     return
    18                              <2> %%_ret:
    19 00005A97 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   109                              <1> .physical:
   110                              <1> ;Now we must lock the structures
   111 00005A98 C605(E4C30300)02    <1>     mov byte [errorLocus], eLocDsk
   112 00005A9F E889040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   113 00005AA4 E85DFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
   114 00005AA9 721C                <1>     jc .exit
   115 00005AAB E8B4B2FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
   116 00005AB0 7215                <1>     jc .exit
   117 00005AB2 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   118 00005AB5 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   119 00005AB7 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
   120 00005ABA 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
   121 00005ABD FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
   122 00005ABF 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
   123 00005AC3 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
   124 00005AC6 F8                  <1>     clc
   125                              <1> .exit:
   126 00005AC7 E86B040000          <1>     call dosCrit1Exit
   127                              <1>     return
    18                              <2> %%_ret:
    19 00005ACC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   130                              <1> ;Input: al = Interrupt number
   131                              <1> ;Output: rbx = Interrupt Vector
   132 00005ACD 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   133 00005ACE 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   134 00005ACF 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   135 00005AD1 B807F00000          <1>     mov eax, 0F007h
   136 00005AD6 CD35                <1>     int 35h
   137 00005AD8 5A                  <1>     pop rdx
   138 00005AD9 58                  <1>     pop rax
   139                              <1>     return
    18                              <2> %%_ret:
    19 00005ADA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   140                              <1> 
   141                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   142                              <1> ;Returns ptr to user regs in rsi
   143 00005ADB 488B35(54C40300)    <1>     mov rsi, qword [oldRSP]
   144                              <1>     return
    18                              <2> %%_ret:
    19 00005AE2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> 
   146                              <1> walkDPBchain:
   147                              <1> ;Called with al = 0 based drive number
   148                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   149 00005AE3 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   150                              <1> .walk:
   151 00005AEA 4881FEFFFFFFFF      <1>     cmp rsi, -1
   152 00005AF1 740A                <1>     je .exitBad
   153 00005AF3 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   154 00005AF5 7407                <1>     je .exit    ;Drive found
   155 00005AF7 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   156 00005AFB EBED                <1>     jmp short .walk
   157                              <1> .exitBad:
   158 00005AFD F9                  <1>     stc
   159                              <1> .exit:
   160                              <1>     return
    18                              <2> %%_ret:
    19 00005AFE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   161                              <1> setDrive:   
   162                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   163                              <1> ;Input: al = 1-based drive number
   164                              <1> ;Output: al = 0-based drive number
   165                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   166                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   167                              <1> ;            set.
   168 00005AFF E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   169 00005B04 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   170 00005B06 56                  <1>     push rsi
   171 00005B07 488B35(E7C60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   172 00005B0E 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   173 00005B14 5E                  <1>     pop rsi
   174 00005B15 7401                <1>     jz .exit
   175 00005B17 F9                  <1>     stc
   176                              <1> .exit:
   177                              <1>     return
    18                              <2> %%_ret:
    19 00005B18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   178                              <1> 
   179                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   180                              <1> ;Allows a redirector or subst/join to build a CDS
   181                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   182                              <1> ; volumes, that are made at system boot.
   183                              <1> ;Input: al = Drive Letter for drive
   184                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   185                              <1> ;Output: rdi = newly filled in workingCDS
   186                              <1> ;CF=NC => CDS valid and has a DPB
   187                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   188 00005B19 50                  <1>     push rax
   189 00005B1A 2C40                <1>     sub al, "A"-1
   190 00005B1C 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   191 00005B22 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   192 00005B29 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   193 00005B2F 58                  <1>     pop rax
   194 00005B30 7235                <1>     jb .exit    ;Exit with CF=CY
   195 00005B32 50                  <1>     push rax
   196 00005B33 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   197 00005B38 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   198 00005B3A 58                  <1>     pop rax
   199 00005B3B 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   200 00005B41 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   201 00005B48 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   202 00005B50 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   203                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   204 00005B56 50                  <1>     push rax
   205 00005B57 56                  <1>     push rsi
   206 00005B58 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   207 00005B5A E884FFFFFF          <1>     call walkDPBchain
   208 00005B5F 7204                <1>     jb .skipSettingDPB
   209 00005B61 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   210                              <1> .skipSettingDPB:
   211 00005B65 5E                  <1>     pop rsi
   212 00005B66 58                  <1>     pop rax
   213                              <1> .exit:
   214                              <1>     return
    18                              <2> %%_ret:
    19 00005B67 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> 
   216                              <1> getCDS:     ;Int 4Fh AX=1219h
   217                              <1> ;Gets the device DPB and saves it in the DOS variable
   218                              <1> ;This can be called to get CDS for network drives too!
   219                              <1> ;Input: al = 1 based drive number
   220                              <1> ;Sets workingCDS var with the CDS for the device. 
   221                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   222 00005B68 84C0                <1>     test al, al
   223 00005B6A 7508                <1>     jnz .skip
   224 00005B6C 8A05(0BC40300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   225 00005B72 FEC0                <1>     inc al
   226                              <1> .skip:
   227 00005B74 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   228 00005B76 56                  <1>     push rsi
   229 00005B77 C605(E4C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   230 00005B7E F605(D7C60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   231 00005B85 7423                <1>     jz .physDrive
   232                              <1>     ;Invokation via 21/5D00
   233 00005B87 50                  <1>     push rax
   234 00005B88 57                  <1>     push rdi
   235 00005B89 488D3D(53C60300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   236 00005B90 48893D(E7C60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   237 00005B97 0441                <1>     add al, "A" ;Convert to a drive letter
   238 00005B99 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   239 00005B9E 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   240 00005BA4 5F                  <1>     pop rdi
   241 00005BA5 58                  <1>     pop rax
   242 00005BA6 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   243 00005BA8 EB17                <1>     jmp short .exitOk   ;All oki
   244                              <1> .physDrive:
   245 00005BAA E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   246 00005BAF 7208                <1>     jc .exitBad
   247 00005BB1 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   248 00005BB7 7508                <1>     jnz .exitOk ;Exit with flag cleared
   249                              <1>     ;Else Return to unknown error locus
   250                              <1> .exitBad:
   251 00005BB9 C605(E4C30300)01    <1>     mov byte [errorLocus], eLocUnk
   252                              <1> .exitBad1:
   253 00005BC0 F9                  <1>     stc
   254                              <1> .exitOk:
   255 00005BC1 5E                  <1>     pop rsi
   256                              <1>     return
    18                              <2> %%_ret:
    19 00005BC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   259                              <1>     ;Gets the CDS for the current drive in al
   260                              <1>     ;Input: al = Drive number, 0 = A ...
   261                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   262                              <1>     ;        CF=CY => al not valid
   263 00005BC3 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   264 00005BC9 7202                <1>     jb .ctn
   265 00005BCB F9                  <1>     stc 
   266                              <1>     return
    18                              <2> %%_ret:
    19 00005BCC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   267                              <1> .ctn:
   268 00005BCD 50                  <1>     push rax
   269 00005BCE 52                  <1>     push rdx
   270 00005BCF 0FB6C0              <1>     movzx eax, al
   271 00005BD2 48BE5B000000000000- <1>     mov rsi, cds_size
   271 00005BDB 00                  <1>
   272 00005BDC 31D2                <1>     xor edx, edx
   273 00005BDE F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   274 00005BE0 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   275 00005BE7 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   276 00005BEA 488935(E7C60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   277 00005BF1 5A                  <1>     pop rdx
   278 00005BF2 58                  <1>     pop rax
   279 00005BF3 F8                  <1>     clc
   280                              <1>     return
    18                              <2> %%_ret:
    19 00005BF4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> 
   283                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   284                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   285                              <1> ;Input: AL = Char to normalise.
   286                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   287                              <1> ;If path separator, set ZF=ZE
   288 00005BF5 3C5C                <1>     cmp al, "\"
   289 00005BF7 7406                <1>     je .exit
   290 00005BF9 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   291 00005BFB 7502                <1>     jne .exit
   292 00005BFD B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   293                              <1> .exit:
   294                              <1>     return
    18                              <2> %%_ret:
    19 00005BFF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> 
   296                              <1> uppercaseCharAtPtr:
   297                              <1> ;Get the char pointed to by rsi and then fall
   298 00005C00 AC                  <1>     lodsb
   299                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   300                              <1> ;Convert a lowercase char to uppercase
   301                              <1> ; Leave alone uppercase chars and invalid chars
   302                              <1> ;Input: al = Char to convert to uppercase
   303                              <1> ;Output: al = Processed char
   304 00005C01 53                  <1>     push rbx
   305 00005C02 3C61                <1>     cmp al, "a"
   306 00005C04 7214                <1>     jb .exit
   307 00005C06 3C7A                <1>     cmp al, "z"
   308 00005C08 7702                <1>     ja .checkExt
   309 00005C0A 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   310                              <1> .checkExt:
   311 00005C0C 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   312 00005C0E 720A                <1>     jb .exit
   313 00005C10 2C80                <1>     sub al, 80h ;Turn into table offset
   314 00005C12 488B1D13A4FFFF      <1>     mov rbx, qword [ctryTbl + countryStruc.mapaddr]    ;Get ptr to extAsciiTable
   315 00005C19 D7                  <1>     xlatb   ;Get converted extended byte into al
   316                              <1> .exit:
   317 00005C1A 50                  <1>     push rax    ;Save al temporarily
   318 00005C1B 488D1D2DA6FFFF      <1>     lea rbx, asciiCharProperties
   319 00005C22 D7                  <1>     xlatb   ;Get the signature in al
   320 00005C23 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   321 00005C25 58                  <1>     pop rax
   322 00005C26 5B                  <1>     pop rbx
   323                              <1>     return
    18                              <2> %%_ret:
    19 00005C27 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> strlen: ;Int 4Fh, AX=1212h
   326                              <1> ;Gets the length of a ASCIIZ string
   327                              <1> ;Input: rdi = Source buffer
   328                              <1> ;Output: ecx = Length of string
   329 00005C28 50                  <1>     push rax
   330 00005C29 57                  <1>     push rdi
   331 00005C2A 30C0                <1>     xor al, al
   332 00005C2C 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   333 00005C2E FFC9                <1>     dec ecx ;rcx = -1
   334 00005C30 F2AE                <1>     repne scasb
   335 00005C32 F7D1                <1>     not ecx
   336 00005C34 5F                  <1>     pop rdi
   337 00005C35 58                  <1>     pop rax
   338                              <1>     return
    18                              <2> %%_ret:
    19 00005C36 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> strcpy:
   341                              <1> ;Copies a null terminated string from rsi to rdi
   342 00005C37 AC                  <1>     lodsb
   343 00005C38 AA                  <1>     stosb
   344 00005C39 84C0                <1>     test al, al
   345                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005C3B 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   346 00005C3D EBF8                <1>     jmp short strcpy
   347                              <1> 
   348                              <1> strcmp:
   349                              <1> ;Compares two ASCIIZ strings for equality.
   350                              <1> ;Input: rsi = First string
   351                              <1> ;       rdi = Second string
   352                              <1> ;       ecx = Number of bytes to compare
   353                              <1> ;Output: ZF=ZE => Equal
   354                              <1> ;        ZF=NZ => Not equal
   355 00005C3F 56                  <1>     push rsi
   356 00005C40 57                  <1>     push rdi
   357 00005C41 F3A6                <1>     repe cmpsb
   358 00005C43 5F                  <1>     pop rdi
   359 00005C44 5E                  <1>     pop rsi
   360                              <1>     return
    18                              <2> %%_ret:
    19 00005C45 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   361                              <1> 
   362                              <1> 
   363                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   364                              <1> ;Converts lowercase to uppercase and / to "\"
   365                              <1> ;Input: rsi = Source buffer
   366                              <1> ;       rdi = Buffer to place normalised path
   367 00005C46 50                  <1>     push rax
   368 00005C47 56                  <1>     push rsi
   369 00005C48 57                  <1>     push rdi
   370                              <1> .scan:
   371 00005C49 AC                  <1>     lodsb
   372 00005C4A 84C0                <1>     test al, al
   373 00005C4C 740D                <1>     jz .exit
   374 00005C4E E8A2FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   375 00005C53 E8A9FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   376 00005C58 AA                  <1>     stosb
   377 00005C59 EBEE                <1>     jmp short .scan
   378                              <1> .exit:
   379 00005C5B 5F                  <1>     pop rdi
   380 00005C5C 5E                  <1>     pop rsi
   381 00005C5D 58                  <1>     pop rax
   382                              <1>     return
    18                              <2> %%_ret:
    19 00005C5E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   385                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   386                              <1> ;Input: rsi = One ASCIIZ pathname
   387                              <1> ;       rdi = Second ASCIIZ pathname
   388                              <1> ;Return:
   389                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   390 00005C5F 50                  <1>     push rax
   391 00005C60 56                  <1>     push rsi
   392 00005C61 57                  <1>     push rdi
   393                              <1> .scan:
   394 00005C62 8A06                <1>     mov al, byte [rsi]
   395 00005C64 84C0                <1>     test al, al
   396 00005C66 7424                <1>     jz .endOfString
   397 00005C68 8A27                <1>     mov ah, byte [rdi]
   398 00005C6A E886FFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   399 00005C6F 7410                <1>     jz .pathseps
   400 00005C71 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   401 00005C75 38E0                <1>     cmp al, ah
   402 00005C77 7515                <1>     jnz .exit
   403                              <1> .nextChar:
   404 00005C79 48FFC6              <1>     inc rsi
   405 00005C7C 48FFC7              <1>     inc rdi
   406 00005C7F EBE1                <1>     jmp short .scan
   407                              <1> .pathseps:
   408 00005C81 86E0                <1>     xchg ah, al
   409 00005C83 E86DFFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   410 00005C88 7504                <1>     jnz .exit
   411 00005C8A EBED                <1>     jmp short .nextChar ;Else get the next chars
   412                              <1> .endOfString:
   413 00005C8C 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   414                              <1> .exit:
   415 00005C8E 5F                  <1>     pop rdi
   416 00005C8F 5E                  <1>     pop rsi
   417 00005C90 58                  <1>     pop rax
   418                              <1>     return
    18                              <2> %%_ret:
    19 00005C91 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   419                              <1> checkPathspecOK:
   420                              <1> ;Input:
   421                              <1> ;rsi -> points to a path to verify if it is ok.
   422                              <1> ;Output:
   423                              <1> ;CF=NC => The path is totally clean and ok to use.
   424                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   425                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   426                              <1> ; and depending on method of invokation and caller, may be permissable.
   427                              <1> ;We accept lc and uc characters in this check function.
   428 00005C92 50                  <1>     push rax
   429 00005C93 53                  <1>     push rbx    ;Use rbx as the return flag status
   430 00005C94 56                  <1>     push rsi
   431 00005C95 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   432                              <1> 
   433                              <1>     ;Start by getting the length of the ASCIIZ string.
   434 00005C97 51                  <1>     push rcx
   435 00005C98 57                  <1>     push rdi
   436 00005C99 4889F7              <1>     mov rdi, rsi
   437 00005C9C E887FFFFFF          <1>     call strlen
   438 00005CA1 81F940000000        <1>     cmp ecx, 64    ;Check
   439 00005CA7 5F                  <1>     pop rdi
   440 00005CA8 59                  <1>     pop rcx
   441 00005CA9 776E                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   442                              <1>     ;First we verify if our path is relative or canonical (absolute)
   443 00005CAB 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   444 00005CAE 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   445 00005CB2 7416                <1>     je .netName
   446 00005CB4 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   447 00005CB8 7410                <1>     je .netName
   448 00005CBA 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   449 00005CBD 7412                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   450                              <1>     ;Here if relative
   451 00005CBF F605(D7C60300)FF    <1>     test byte [dosInvoke], -1
   452 00005CC6 7551                <1>     jnz .badExit    ;If this is -1, server invoke.
   453 00005CC8 EB1F                <1>     jmp short .okToScan
   454                              <1> .netName:
   455 00005CCA 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the \    jmp short .okToScan
   457                              <1> .diskPath:
   458 00005CD1 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   459 00005CD8 F605(D7C60300)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   460 00005CDF 7408                <1>     jz .okToScan
   461 00005CE1 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   462 00005CE2 E80EFFFFFF          <1>     call swapPathSeparator
   463 00005CE7 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   464                              <1> .okToScan:
   465 00005CE9 AC                  <1>     lodsb   
   466 00005CEA 84C0                <1>     test al, al ;End of path char?
   467 00005CEC 7430                <1>     jz .exit
   468 00005CEE E802FFFFFF          <1>     call swapPathSeparator
   469 00005CF3 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   470 00005CF5 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   471 00005CF7 7411                <1>     je .wcFound
   472 00005CF9 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   473 00005CFB 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   474                              <1>     ;Else we check that the char in al is an acceptable char
   475 00005CFD 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   476 00005CFF 74E8                <1>     je .okToScan
   477 00005D01 E831000000          <1>     call checkCharValid
   478 00005D06 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   479 00005D08 EBDF                <1>     jmp short .okToScan
   480                              <1> .wcFound:
   481 00005D0A BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   482 00005D0F EBD8                <1>     jmp short .okToScan
   483                              <1> .wcCheck:
   484                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   485 00005D11 F7C340000000        <1>     test ebx, 40h
   486 00005D17 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   487                              <1>     ;Else fall through in error
   488                              <1> .badExit:
   489 00005D19 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   490                              <1> .exit:
   491 00005D1E 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   492 00005D1F 9D                  <1>     popfq
   493 00005D20 5E                  <1>     pop rsi
   494 00005D21 5B                  <1>     pop rbx
   495 00005D22 58                  <1>     pop rax
   496                              <1>     return
    18                              <2> %%_ret:
    19 00005D23 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   497                              <1> 
   498                              <1> scanPathWC:
   499                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   500                              <1> ; even in the final path componant.
   501                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   502                              <1> ;Output: CF=NC => No wildcards present
   503                              <1> ;        CF=CY => Wildcards found
   504 00005D24 50                  <1>     push rax
   505 00005D25 56                  <1>     push rsi
   506                              <1> .scan:
   507 00005D26 AC                  <1>     lodsb
   508 00005D27 84C0                <1>     test al, al
   509 00005D29 7409                <1>     jz .exit
   510 00005D2B 3C3F                <1>     cmp al, "?"
   511 00005D2D 7404                <1>     je .wcFnd
   512 00005D2F 3C2A                <1>     cmp al, "*"
   513 00005D31 75F3                <1>     jne .scan
   514                              <1> .wcFnd:
   515 00005D33 F9                  <1>     stc
   516                              <1> .exit:
   517 00005D34 5E                  <1>     pop rsi
   518 00005D35 58                  <1>     pop rax
   519                              <1>     return
    18                              <2> %%_ret:
    19 00005D36 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> checkCharValid:
   522                              <1> ;If ZF=ZE => Invalid Char
   523                              <1> ;If ZF=NZ => Valid Char
   524 00005D37 51                  <1>     push rcx
   525 00005D38 57                  <1>     push rdi
   526 00005D39 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   527 00005D3E 488D3D5AA4FFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   528 00005D45 F2AE                <1>     repne scasb ;Scan. Stop when equal
   529 00005D47 5F                  <1>     pop rdi
   530 00005D48 59                  <1>     pop rcx
   531                              <1>     return
    18                              <2> %%_ret:
    19 00005D49 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> 
   534                              <1> skipSpacesAndTabs:
   535                              <1> ;Input: rsi -> String 
   536                              <1> ;Output: rsi -> First non Space or Tab type char
   537 00005D4A AC                  <1>     lodsb
   538 00005D4B E815000000          <1>     call isCharSpaceType
   539 00005D50 74F8                <1>     jz skipSpacesAndTabs
   540 00005D52 48FFCE              <1>     dec rsi
   541                              <1>     return
    18                              <2> %%_ret:
    19 00005D55 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> isCharDelimType:
   544                              <1> ;Input: al = Char to check properties of
   545                              <1> ;Output:    ZF=NZ => Char not name delimiter
   546                              <1> ;           ZF=ZE => Char delimiter
   547 00005D56 50                  <1>     push rax
   548 00005D57 53                  <1>     push rbx
   549 00005D58 488D1DF0A4FFFF      <1>     lea rbx, asciiCharProperties
   550 00005D5F D7                  <1>     xlatb
   551 00005D60 A802                <1>     test al, 2
   552 00005D62 5B                  <1>     pop rbx
   553 00005D63 58                  <1>     pop rax
   554                              <1>     return
    18                              <2> %%_ret:
    19 00005D64 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   555                              <1> 
   556                              <1> isCharSpaceType:
   557                              <1> ;Input: al = Char to check properties of
   558                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   559                              <1> ;           ZF=ZE => Char Space or Tab
   560 00005D65 50                  <1>     push rax
   561 00005D66 53                  <1>     push rbx
   562 00005D67 488D1DE1A4FFFF      <1>     lea rbx, asciiCharProperties
   563 00005D6E D7                  <1>     xlatb
   564 00005D6F A804                <1>     test al, 4
   565 00005D71 5B                  <1>     pop rbx
   566 00005D72 58                  <1>     pop rax
   567                              <1>     return
    18                              <2> %%_ret:
    19 00005D73 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   568                              <1> 
   569                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   570                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   571                              <1> ;Input: rsi = One pointer
   572                              <1> ;       rdi = Second pointer
   573                              <1> ;Output: ZF=ZE if equal
   574                              <1> ;        ZF=NZ if not
   575 00005D74 4839FE              <1>     cmp rsi, rdi
   576                              <1>     return
    18                              <2> %%_ret:
    19 00005D77 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   577                              <1> 
   578                              <1> checkPathNet:
   579                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   580                              <1> ;Output: ZF=ZE => Path is a net path
   581                              <1> ;        ZF=NZ => Path is not a net path
   582 00005D78 50                  <1>     push rax
   583 00005D79 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   584 00005D7C E874FEFFFF          <1>     call swapPathSeparator
   585 00005D81 7505                <1>     jnz .exit
   586 00005D83 E86DFEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   587                              <1> .exit:
   588 00005D88 58                  <1>     pop rax
   589                              <1>     return
    18                              <2> %%_ret:
    19 00005D89 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   590                              <1> 
   591                              <1> getCharDevDriverPtr:
   592                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   593                              <1> ;Input: rax = Device Driver name (space padded)
   594                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   595 00005D8A 488D3D(73C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   596                              <1> .lp:
   597 00005D91 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   598                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005D95 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   599 00005D97 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   600 00005D9A 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   601 00005DA1 75EE                <1>     jne .lp ;If not loop
   602 00005DA3 F9                  <1>     stc ;Else bad exit
   603                              <1>     return
    18                              <2> %%_ret:
    19 00005DA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   604                              <1> 
    40                                  %include "./Source/Kernel/dosMain.asm"
    41                              <1> ;-----------------------------------:
    42                              <1> ;        Main Kernel dispatch       :
    43                              <1> ;            and routines           :
    44                              <1> ;-----------------------------------:
    45                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    46                              <1> ;ah = Function number, all other registers have various meanings
    47                              <1>  %if DEBUG
    48                              <1>     ;Entry function
    49                              <1>     debugEnterM
    50                              <1>     lea rbp, .l0000
    51                              <1>     call debPrintNullString
    52                              <1>     call debPrintFunctionName
    53                              <1>     jmp short .l0001
    54                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    55                              <1> .l0001:    
    56                              <1>     debugExitM
    57                              <1>     %endif
    58 00005DA5 FA                  <1>     cli ;Halt external interrupts
    59 00005DA6 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    60 00005DA7 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    61 00005DAA 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    62                              <1>     ;Cherry pick functions
    63 00005DB0 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    64 00005DB3 722C                <1>     jb .fsbegin   ;If below skip these checks
    65 00005DB5 0F8492020000        <1>     je ctrlBreakCheck
    66 00005DBB 80FC64              <1>     cmp ah, 64h
    67 00005DBE 0F84D2020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    68 00005DC4 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    69 00005DC6 80FC51              <1>     cmp ah, 51h
    70 00005DC9 0F84B5020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    71 00005DCF 80FC62              <1>     cmp ah, 62h
    72 00005DD2 0F84B5020000        <1>     je getPSPaddr          ;Calls the above function
    73 00005DD8 80FC50              <1>     cmp ah, 50h
    74 00005DDB 0F849A020000        <1>     je setCurrProcessID
    75                              <1> .fsbegin:
    76 00005DE1 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    77 00005DE6 48891D(5CC40300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    78 00005DED 66C705(1DC40300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    78 00005DF5 00                  <1>
    79 00005DF6 488B05(54C40300)    <1>     mov rax, qword [oldRSP]
    80 00005DFD 488905(44C40300)    <1>     mov qword [oldoldRSP], rax
    81 00005E04 FE05(E2C30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    82 00005E0A 488925(54C40300)    <1>     mov qword [oldRSP], rsp
    83                              <1> ;Network related variable resetting
    84 00005E11 C605(D7C60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    85                              <1> ;Here, we want to save oldRSP in the callers PSP
    86 00005E18 803D(E2C30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    87 00005E1F 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    88 00005E21 488B05(F9C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    89 00005E28 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    90                              <1> .fsb1:
    91 00005E2C 58                  <1>     pop rax     ;Get old rax back
    92 00005E2D 50                  <1>     push rax    ;and push it back onto the stack
    93                              <1> .abortEP:
    94                              <1> .charFun0CEP:
    95                              <1> .serverEP:
    96 00005E2E 488D25(DFCC0300)    <1>     lea rsp, critStakTop
    97 00005E35 FB                  <1>     sti         ;Reenable interrupts
    98                              <1> 
    99 00005E36 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
   100 00005E38 881D(6DC40300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   101 00005E3E C605(6EC40300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   102 00005E45 881D(43C40300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   103 00005E4B 881D(64C40300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   104                              <1> 
   105 00005E51 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   106 00005E52 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   107 00005E54 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   108 00005E56 488D0572A4FFFF      <1>     lea rax, kDispTbl
   109 00005E5D 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   110 00005E60 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   111 00005E64 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   112 00005E67 58                  <1>     pop rax
   113                              <1> 
   114 00005E68 84E4                <1>     test ah, ah     ;Simple Terminate function?
   115 00005E6A 741C                <1>     jz .fddiskOp
   116 00005E6C 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   117 00005E6F 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   118 00005E71 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   119 00005E74 7712                <1>     ja .fddiskOp
   120                              <1> ;Char operations here
   121 00005E76 F605(E1C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   122 00005E7D 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   123 00005E7F 488D25(6ED30300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   124 00005E86 EB40                <1>     jmp short .fdGoToFunction
   125                              <1> .fddiskOp:
   126                              <1>     ;Disk operations go here
   127                              <1>     ;Save rax on entry to a disk funciton
   128 00005E88 488905(0DC40300)    <1>     mov qword [oldRAX], rax
   129                              <1>     ;Clear up error info
   130 00005E8F C605(E4C30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   131 00005E96 C605(E1C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   132 00005E9D C605(E3C30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   133                              <1> 
   134 00005EA4 50                  <1>     push rax
   135 00005EA5 B482                <1>     mov ah, 82h ;Cancel all critical section!
   136 00005EA7 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   137 00005EA9 58                  <1>     pop rax
   138                              <1> 
   139 00005EAA C605(6EC40300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   140 00005EB1 488D25(AED90300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   141 00005EB8 F605(0CC40300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   142 00005EBF 7407                <1>     jz .fdGoToFunction
   143                              <1> ; HANDLE CTRL+BREAK HERE!
   144 00005EC1 50                  <1>     push rax
   145 00005EC2 E838C6FFFF          <1>     call checkBreak   ; Check for a ^C
   146 00005EC7 58                  <1>     pop rax
   147                              <1> .fdGoToFunction:
   148 00005EC8 48871D(5CC40300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   149                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   150                              <1>     ;
   151                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   152                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   153                              <1>     ;
   154                              <1>     %if DEBUG && REGS
   155                              <1>     ;Print stack if necessary function
   156                              <1>     debugEnterM
   157                              <1>     call debPrintDOSStack
   158                              <1>     debugExitM
   159                              <1>     %endif
   160 00005ECF FF15(5CC40300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   161                              <1>     %if DEBUG
   162                              <1>     ;Entry function
   163                              <1>     debugEnterM
   164                              <1>     lea rbp, .l0002
   165                              <1>     call debPrintNullString
   166                              <1>     jmp short .l0003
   167                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   168                              <1> .l0003:    
   169                              <1>     debugExitM
   170                              <1>     %endif
   171                              <1>     %if DEBUG && REGS
   172                              <1>     ;Exit function
   173                              <1>     debugEnterM
   174                              <1>     call debPrintDOSStack
   175                              <1>     debugExitM
   176                              <1>     %endif
   177                              <1> .fdExit:
   178 00005ED5 FA                  <1>     cli     ;Redisable interrupts
   179 00005ED6 FE0D(E2C30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   180 00005EDC 488B25(54C40300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   181 00005EE3 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   182 00005EE6 488B05(44C40300)    <1>     mov rax, qword [oldoldRSP]
   183 00005EED 488905(54C40300)    <1>     mov qword [oldRSP], rax
   184 00005EF4 E806000000          <1>     call dosPopRegs  ;Pop the frame
   185 00005EF9 48CF                <1>     iretq
   186                              <1> .fdExitBad:
   187 00005EFB 30C0                <1>     xor al, al
   188                              <1> defaultIretq:
   189 00005EFD 48CF                <1>     iretq
   190                              <1> dosPopRegs:
   191 00005EFF 8F05(4CC40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   192 00005F05 58                  <1>     pop rax
   193 00005F06 5B                  <1>     pop rbx
   194 00005F07 59                  <1>     pop rcx
   195 00005F08 5A                  <1>     pop rdx
   196 00005F09 5E                  <1>     pop rsi
   197 00005F0A 5F                  <1>     pop rdi
   198 00005F0B 5D                  <1>     pop rbp
   199 00005F0C 4158                <1>     pop r8
   200 00005F0E 4159                <1>     pop r9
   201 00005F10 FF25(4CC40300)      <1>     jmp qword [dosReturn]
   202                              <1> dosPushRegs:
   203 00005F16 8F05(4CC40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   204 00005F1C 4151                <1>     push r9
   205 00005F1E 4150                <1>     push r8
   206 00005F20 55                  <1>     push rbp
   207 00005F21 57                  <1>     push rdi
   208 00005F22 56                  <1>     push rsi
   209 00005F23 52                  <1>     push rdx
   210 00005F24 51                  <1>     push rcx
   211 00005F25 53                  <1>     push rbx
   212 00005F26 50                  <1>     push rax
   213 00005F27 FF25(4CC40300)      <1>     jmp qword [dosReturn]
   214                              <1> dosCrit1Enter:
   215                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00005F2D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216 00005F2E B801800000          <1>     mov eax, 8001h
   217 00005F33 CD4A                <1>     int 4ah
   218 00005F35 58                  <1>     pop rax
   219                              <1>     return
    18                              <2> %%_ret:
    19 00005F36 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   220                              <1> dosCrit1Exit:
   221                              <1>     return
    18                              <2> %%_ret:
    19 00005F37 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222 00005F38 B801810000          <1>     mov eax, 8101h
   223 00005F3D CD4A                <1>     int 4ah
   224 00005F3F 58                  <1>     pop rax
   225                              <1>     return
    18                              <2> %%_ret:
    19 00005F40 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   226                              <1> dosCrit2Enter:
   227                              <1>     return
    18                              <2> %%_ret:
    19 00005F41 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228 00005F42 B802800000          <1>     mov eax, 8002h
   229 00005F47 CD4A                <1>     int 4ah
   230 00005F49 58                  <1>     pop rax
   231                              <1>     return
    18                              <2> %%_ret:
    19 00005F4A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> dosCrit2Exit:
   233                              <1>     return
    18                              <2> %%_ret:
    19 00005F4B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234 00005F4C B802810000          <1>     mov eax, 8102h
   235 00005F51 CD4A                <1>     int 4ah
   236 00005F53 58                  <1>     pop rax
   237                              <1>     return
    18                              <2> %%_ret:
    19 00005F54 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> ;Generic Share Hooks
   240                              <1> shareBadFunction:
   241 00005F55 B801000000          <1>     mov eax, errInvFnc
   242 00005F5A 668905(E5C30300)    <1>     mov word [errorExCde], ax
   243 00005F61 F9                  <1>     stc
   244                              <1>     return
    18                              <2> %%_ret:
    19 00005F62 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   245                              <1> badDfltShareHook:
   246                              <1> ;Return CF=CY
   247 00005F63 E8EDFFFFFF          <1>     call shareBadFunction
   248                              <1>     return
    18                              <2> %%_ret:
    19 00005F68 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   249                              <1> goodDfltShareHook:
   250                              <1> ;Return CF=NC
   251 00005F69 F8                  <1>     clc
   252                              <1>     return
    18                              <2> %%_ret:
    19 00005F6A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> ;FCB specific returns
   255                              <1> fcbGoodExit:
   256                              <1> ;Preserve the carry flag on entry to DOS
   257 00005F6B 30C0                <1>     xor al, al ;Set return code al = 0
   258                              <1>     return
    18                              <2> %%_ret:
    19 00005F6D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   259                              <1> fcbErrExit:
   260                              <1> ;Preserve the carry flag on entry to DOS
   261                              <1> ;Input: eax = Extended error code to store in SDA 
   262 00005F6E E836000000          <1>     call xLatError
   263 00005F73 B0FF                <1>     mov al, -1  ;Set return code al = -1
   264 00005F75 F9                  <1>     stc
   265                              <1>     return
    18                              <2> %%_ret:
    19 00005F76 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   266                              <1> 
   267                              <1> ;Handle and General DOS Returns
   268                              <1> ;All good exits destroy AT LEAST ax 
   269                              <1> extGoodExit2:
   270                              <1> ;Good exit with an extended return code in eax
   271 00005F77 E85FFBFFFF          <1>     call getUserRegs
   272 00005F7C 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   273 00005F7E EB08                <1>     jmp short extGoodExit.extGoodCommon
   274                              <1> extGoodExit:
   275                              <1> ;Good exit
   276                              <1> ;Return code in ax
   277 00005F80 E856FBFFFF          <1>     call getUserRegs
   278 00005F85 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   279                              <1> .extGoodCommon:
   280 00005F88 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   281 00005F8C F8                  <1>     clc
   282                              <1>     return
    18                              <2> %%_ret:
    19 00005F8D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> extErrExit:
   284                              <1> ;The extended error exit from DOS
   285                              <1> ;Jumped to with AL=Extended error code
   286                              <1> ;Can be called too.
   287                              <1> ;Input: al = Extended error code
   288                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   289                              <1> ;   Returns with: eax = xLat Error
   290                              <1> ;                 rsi = callerFrame
   291 00005F8E 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   292 00005F91 E813000000          <1>     call xLatError
   293 00005F96 E891000000          <1>     call checkFail
   294 00005F9B E83BFBFFFF          <1>     call getUserRegs
   295 00005FA0 668906              <1>     mov word [rsi + callerFrame.rax], ax
   296 00005FA3 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   297 00005FA7 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   298                              <1>     return
    18                              <2> %%_ret:
    19 00005FA8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   299                              <1> xLatError:
   300                              <1> ;Translates the error code given in ax and sets error code in the var
   301                              <1> ; Input: ax = Extended Error Code
   302                              <1> ; Output: ax = Potentially translated Error Code
   303                              <1> ;         [errorExCde] = Original Error Code
   304                              <1> ;Preserves all registers except ax
   305                              <1> ;AH is always returned as 0
   306 00005FA9 53                  <1>     push rbx
   307 00005FAA 51                  <1>     push rcx
   308 00005FAB 56                  <1>     push rsi
   309 00005FAC 668905(E5C30300)    <1>     mov word [errorExCde], ax
   310 00005FB3 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   311 00005FB5 488D35D3A0FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   312                              <1> .readEntry:
   313 00005FBC 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   314 00005FBE 3CFF                <1>     cmp al, -1
   315 00005FC0 741F                <1>     je .skipXlat
   316 00005FC2 3A05(0EC40300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   317 00005FC8 7408                <1>     je .found
   318                              <1>     ;Here, entry not found, goto next entry
   319 00005FCA 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   320 00005FCD 4801C6              <1>     add rsi, rax    ;Goto next entry
   321 00005FD0 EBEA                <1>     jmp short .readEntry
   322                              <1> .found:
   323                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   324 00005FD2 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   325                              <1> .mainSearch:
   326 00005FD5 AC                  <1>     lodsb   ;Get one byte into al
   327 00005FD6 38C3                <1>     cmp bl, al  ;Check against the error code
   328 00005FD8 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   329 00005FDA FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   330 00005FDC 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   331                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   332 00005FDE 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   333                              <1> .skipXlat:
   334 00005FE1 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   335 00005FE3 5E                  <1>     pop rsi
   336 00005FE4 59                  <1>     pop rcx
   337 00005FE5 5B                  <1>     pop rbx
   338                              <1>     return
    18                              <2> %%_ret:
    19 00005FE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> setErrorVars:
   340                              <1> ;Looks up the error code in the variable and sets the other error vars
   341                              <1> ;Called with the lookup table in rsi
   342                              <1> ;All regs preserved
   343 00005FE7 50                  <1>     push rax
   344 00005FE8 53                  <1>     push rbx
   345 00005FE9 51                  <1>     push rcx
   346 00005FEA 56                  <1>     push rsi
   347 00005FEB 0FB71D(E5C30300)    <1>     movzx ebx, word [errorExCde]
   348 00005FF2 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   349                              <1> .readEntry:
   350 00005FF7 AD                  <1>     lodsd   ;Read the dword table entry into eax
   351 00005FF8 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   352 00005FFD 7428                <1>     je .exit    
   353 00005FFF 38D8                <1>     cmp al, bl  ;Compare the error codes
   354 00006001 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   355 00006003 D3E8                <1>     shr eax, cl
   356 00006005 3CFF                <1>     cmp al, -1
   357 00006007 7406                <1>     je .skipClass
   358 00006009 8805(E8C30300)      <1>     mov byte [errorClass], al
   359                              <1> .skipClass:
   360 0000600F D3E8                <1>     shr eax, cl
   361 00006011 3CFF                <1>     cmp al, -1
   362 00006013 7406                <1>     je .skipAct
   363 00006015 8805(E7C30300)      <1>     mov byte [errorAction], al
   364                              <1> .skipAct:
   365 0000601B D3E8                <1>     shr eax, cl
   366 0000601D 3CFF                <1>     cmp al, -1
   367 0000601F 7406                <1>     je .exit
   368 00006021 8805(E4C30300)      <1>     mov byte [errorLocus], al
   369                              <1> .exit:
   370 00006027 5E                  <1>     pop rsi
   371 00006028 59                  <1>     pop rcx
   372 00006029 5B                  <1>     pop rbx
   373 0000602A 58                  <1>     pop rax
   374                              <1>     return
    18                              <2> %%_ret:
    19 0000602B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   375                              <1> checkFail:
   376                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   377                              <1> ; and swaps the var error code if so
   378 0000602C 803D(43C40300)00    <1>     cmp byte [Int44Fail], 0
   379 00006033 7509                <1>     jnz .skipFail
   380 00006035 66C705(E5C30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   380 0000603D 00                  <1>
   381                              <1> .skipFail:
   382 0000603E 56                  <1>     push rsi
   383 0000603F 488D35E5A0FFFF      <1>     lea rsi, extErrTbl
   384 00006046 E89CFFFFFF          <1>     call setErrorVars
   385 0000604B 5E                  <1>     pop rsi
   386                              <1>     return
    18                              <2> %%_ret:
    19 0000604C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   387                              <1> ;========================================:
   388                              <1> ;      Reentrant Kernel Functions        :
   389                              <1> ;========================================:
   390                              <1> ctrlBreakCheck:    ;ah = 33h
   391 0000604D 84C0                <1>     test al, al
   392 0000604F 7508                <1>     jnz .cbcget  ;Get the state or other functions
   393 00006051 8A15(0CC40300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   394 00006057 48CF                <1>     iretq
   395                              <1> .cbcget:
   396 00006059 3C02                <1>     cmp al, 02h
   397 0000605B 771A                <1>     ja .cbcBad
   398 0000605D 740D                <1>     jz .cbcxchg ;Function 2
   399 0000605F 52                  <1>     push rdx
   400 00006060 80E201              <1>     and dl, 1   ;Get only the bottom bit
   401 00006063 8815(0CC40300)      <1>     mov byte [breakFlag], dl    ;Set the state
   402 00006069 5A                  <1>     pop rdx
   403 0000606A 48CF                <1>     iretq
   404                              <1> .cbcxchg:
   405 0000606C 80E201              <1>     and dl, 1
   406 0000606F 8615(0CC40300)      <1>     xchg byte [breakFlag], dl
   407 00006075 48CF                <1>     iretq
   408                              <1> .cbcBad:
   409 00006077 B0FF                <1>     mov al, -1
   410 00006079 48CF                <1>     iretq
   411                              <1> 
   412                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   413 0000607B 48891D(F9C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   414 00006082 48CF                <1>     iretq
   415                              <1> 
   416                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   417 00006084 488B15(F9C30300)    <1>     mov rdx, qword [currentPSP]
   418 0000608B 48CF                <1>     iretq
   419                              <1> 
   420                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   421 0000608D 488B15(F9C30300)    <1>     mov rdx, qword [currentPSP]
   422 00006094 48CF                <1>     iretq
   423                              <1> 
   424                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   425 00006096 8805(B7D90300)      <1>     mov byte [lookahead], al    
   426 0000609C 48CF                <1>     iretq
   427                              <1> 
   428                              <1> ;========================================:
   429                              <1> ;            Kernel Functions            :
   430                              <1> ;========================================:
   431                              <1> diskReset:         ;ah = 0Dh
   432                              <1> ;Flush all dirty buffers to disk
   433 0000609E E88AFEFFFF          <1>     call dosCrit1Enter
   434 000060A3 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   435                              <1> .drCheckBuffer:
   436 000060AA F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   437 000060AE 7407                <1>     jz .drGotoNextBuffer
   438                              <1> .drFlushBuffer:
   439 000060B0 E8F5A7FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   440 000060B5 720C                <1>     jc .drExit
   441                              <1> .drGotoNextBuffer:
   442 000060B7 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   443 000060BA 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   444 000060C1 75E7                <1>     jne .drCheckBuffer
   445                              <1> .drExit:
   446 000060C3 E86FFEFFFF          <1>     call dosCrit1Exit
   447 000060C8 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   448 000060CD CD4F                <1>     int 4fh
   449                              <1>     return
    18                              <2> %%_ret:
    19 000060CF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> selectDisk:        ;ah = 0Eh
   452                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   453 000060D0 88D0                <1>     mov al, dl
   454 000060D2 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   455 000060D4 E826FAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   456 000060D9 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   457 000060DB 8805(0BC40300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   458                              <1> .skipSettingCurrent:
   459 000060E1 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   460                              <1>     return
    18                              <2> %%_ret:
    19 000060E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   463 000060E9 8A05(0BC40300)      <1>     mov al, byte [currentDrv]
   464                              <1>     return
    18                              <2> %%_ret:
    19 000060EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   465                              <1> 
   466                              <1> FATinfoDefault:    ;ah = 1Bh
   467 000060F0 30D2                <1>     xor dl, dl
   468                              <1> FATinfoDevice:     ;ah = 1Ch
   469                              <1> ;Input: dl = 1 based drive number
   470                              <1> ;Output:
   471                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   472                              <1> ;cx = bytes per sector
   473                              <1> ;edx = total number of clusters
   474                              <1> ;rbx = Ptr to media ID byte
   475 000060F2 88D0                <1>     mov al, dl  ;Move drive number into al
   476 000060F4 E86FFAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   477 000060F9 7307                <1>     jnc .fidCDSFound
   478 000060FB B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   479 00006100 EB2E                <1>     jmp short .error 
   480                              <1> .fidCDSFound:
   481 00006102 E882F9FFFF          <1>     call getDiskData
   482 00006107 7227                <1>     jc .error
   483                              <1> ;Now we have that:
   484                              <1> ;al = sectors per cluster
   485                              <1> ;ah = media ID byte
   486                              <1> ;ebx = total clusters
   487                              <1> ;cx = bytes per sector
   488                              <1> ;edx = number of available clusters
   489 00006109 E8CDF9FFFF          <1>     call getUserRegs
   490 0000610E 8825(6BC70300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   491 00006114 30E4                <1>     xor ah, ah
   492 00006116 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   493 00006119 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   494 0000611D 488D1D(6BC70300)    <1>     lea rbx, mediaByte
   495 00006124 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   496 00006128 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   497                              <1> .badExit:
   498 0000612C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   499                              <1>     return
    18                              <2> %%_ret:
    19 0000612F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   500                              <1> .error:
   501 00006130 E859FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   502 00006135 66B8FFFF            <1>     mov ax, -1
   503 00006139 EBF1                <1>     jmp short .badExit
   504                              <1> 
   505                              <1> setIntVector:      ;ah = 25h
   506                              <1> ;Called with:
   507                              <1> ;   rdx = Pointer to interrupt handler
   508                              <1> ;   al = Interrupt number
   509 0000613B 50                  <1>     push rax    ;Preserve all registers in call
   510 0000613C 53                  <1>     push rbx
   511 0000613D 51                  <1>     push rcx
   512 0000613E 52                  <1>     push rdx
   513 0000613F 56                  <1>     push rsi
   514 00006140 55                  <1>     push rbp
   515 00006141 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   516 00006143 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   517                              <1> ;First call to get default BIOS segement selector and attribute word
   518 00006149 88C3                <1>     mov bl, al  ;Set interrupt number 
   519 0000614B B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   520 00006150 CD35                <1>     int 35h
   521 00006152 E884F9FFFF          <1>     call getUserRegs
   522 00006157 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   523 0000615B 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   524 0000615D 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   525                              <1> ;dx preserves the attribute word
   526 0000615F B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   527 00006164 CD35                <1>     int 35h
   528 00006166 5D                  <1>     pop rbp
   529 00006167 5E                  <1>     pop rsi
   530 00006168 5A                  <1>     pop rdx
   531 00006169 59                  <1>     pop rcx
   532 0000616A 5B                  <1>     pop rbx
   533 0000616B 58                  <1>     pop rax
   534                              <1>     return
    18                              <2> %%_ret:
    19 0000616C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   535                              <1> 
   536                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   537 0000616D 8805(AAC30300)      <1>     mov byte [verifyFlag], al
   538 00006173 8025(AAC30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   539                              <1>     return
    18                              <2> %%_ret:
    19 0000617A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   540                              <1> getDOSversion:     ;ah = 30h
   541 0000617B E85BF9FFFF          <1>     call getUserRegs
   542 00006180 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   543 00006182 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   544 00006185 668B05749EFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   545 0000618C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   546                              <1>     return
    18                              <2> %%_ret:
    19 0000618F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   547                              <1> 
   548                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   549                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   550 00006190 30D2                <1>     xor dl, dl
   551                              <1> getDeviceDPBptr:   ;ah = 32h
   552                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   553                              <1> ;On exit: rbx = DPB pointer
   554 00006192 88D0                <1>     mov al, dl
   555 00006194 E8CFF9FFFF          <1>     call getCDS
   556 00006199 722C                <1>     jc .bad
   557 0000619B 488B3D(E7C60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   558 000061A2 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   559 000061A8 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   560                              <1>     ;Here ONLY if accessing critical Disk data structures
   561 000061AA E87EFDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   562 000061AF E852F6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   563 000061B4 E87EFDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   564 000061B9 720C                <1>     jc .bad
   565 000061BB E81BF9FFFF          <1>     call getUserRegs
   566 000061C0 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   567 000061C4 30C0                <1>     xor al, al
   568                              <1>     return
    18                              <2> %%_ret:
    19 000061C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   569                              <1> .bad:
   570 000061C7 B0FF                <1>     mov al, -1
   571                              <1>     return
    18                              <2> %%_ret:
    19 000061C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   572                              <1> 
   573                              <1> getInDOSflagPtr:   ;ah = 34h
   574 000061CA 488D15(E2C30300)    <1>     lea rdx, inDOS
   575 000061D1 E805F9FFFF          <1>     call getUserRegs
   576 000061D6 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   577                              <1>     return
    18                              <2> %%_ret:
    19 000061DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   578                              <1> 
   579                              <1> getIntVector:      ;ah = 35h
   580                              <1> ;Called with:
   581                              <1> ;   al = Interrupt Number
   582                              <1> ;Returns:
   583                              <1> ;   rbx = Pointer to interrupt handler
   584 000061DB E8EDF8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   585 000061E0 E8F6F8FFFF          <1>     call getUserRegs
   586 000061E5 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   587 000061E9 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   588                              <1>     return
    18                              <2> %%_ret:
    19 000061EB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   589                              <1> 
   590                              <1> getDiskFreeSpace:  ;ah = 36h
   591                              <1> ;Input: Drive number in dl (0 = Current)
   592                              <1> ;Output:    ax = sectors per cluster
   593                              <1> ;           ebx = number of free clusters
   594                              <1> ;           cx = bytes per sector
   595                              <1> ;           edx = total clusters on drive
   596 000061EC 88D0                <1>     mov al, dl
   597 000061EE E875F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   598 000061F3 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   599                              <1> ;Else, we at an error.
   600                              <1> ;Simply return with CY set and error code in al with extended error info
   601 000061F5 B80F000000          <1>     mov eax, errBadDrv
   602 000061FA E88FFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   603                              <1>     ;extErrExit sets rsi to caller regs
   604 000061FF 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   605                              <1>     return
    18                              <2> %%_ret:
    19 00006204 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   606                              <1> .gdfsCDSFound:
   607 00006205 E87FF8FFFF          <1>     call getDiskData
   608 0000620A 7219                <1>     jc .error
   609                              <1> ;Now we have that:
   610                              <1> ;al = sectors per cluster
   611                              <1> ;ah = media ID byte
   612                              <1> ;ebx = total clusters
   613                              <1> ;cx = bytes per sector
   614                              <1> ;edx = number of available clusters
   615 0000620C E8CAF8FFFF          <1>     call getUserRegs
   616 00006211 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   617 00006213 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   618 00006216 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   619 0000621A 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   620 0000621D 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   621                              <1> .badExit:
   622 00006221 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   623                              <1>     return
    18                              <2> %%_ret:
    19 00006224 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   624                              <1> .error:
   625 00006225 E864FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   626 0000622A 66B8FFFF            <1>     mov ax, -1
   627 0000622E EBF1                <1>     jmp short .badExit
   628                              <1> 
   629                              <1> 
   630                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   631 00006230 31C0                <1>     xor eax, eax
   632 00006232 668705(09C40300)    <1>     xchg ax, word [errorLevel]
   633 00006239 E942FDFFFF          <1>     jmp extGoodExit
   634                              <1> 
   635                              <1> getSysVarsPtr:     ;ah = 52h
   636 0000623E 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   637 00006245 E891F8FFFF          <1>     call getUserRegs
   638 0000624A 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   639                              <1>     return
    18                              <2> %%_ret:
    19 0000624E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   640                              <1> 
   641                              <1> 
   642                              <1> ;AH = 53h - CREATE DPB
   643                              <1> createDPB:         ;generates a DPB from a given BPB
   644                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   645                              <1> ;This is done so that the other fields of the DPB can be recycled
   646                              <1> ;Input: rsi = ptr to the BPB
   647                              <1> ;       rbp = ptr to the DPB
   648                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   649                              <1> ;bMediaDescriptor
   650 0000624F 8A4615              <1>     mov al, byte [rsi + bpb.media]
   651 00006252 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   652                              <1> ;dFirstFreeCluster
   653 00006255 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   654                              <1> ;dNumberOfFreeClusters
   655 0000625C C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   656                              <1> ;wBytesPerSector
   657 00006263 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   658 00006267 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   659                              <1> ;bMaxSectorInCluster
   660 0000626B 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   661 0000626E FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   662 00006270 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   663                              <1> ;bSectorsPerClusterShift
   664 00006273 FEC0                <1>     inc al
   665 00006275 30C9                <1>     xor cl, cl
   666                              <1> .cd2:
   667 00006277 D0E8                <1>     shr al, 1
   668 00006279 7404                <1>     jz .cd3
   669 0000627B FEC1                <1>     inc cl
   670 0000627D EBF8                <1>     jmp short .cd2
   671                              <1> .cd3:
   672 0000627F 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   673                              <1> ;wFAToffset, number of reserved sectors in partition
   674 00006282 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   675 00006286 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   676                              <1> ;bNumberOfFATs
   677 0000628A 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   678 0000628D 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   679                              <1> ;wNumberRootDirEntries
   680                              <1> ;Gets the number of 32 byte entries in the root directory
   681                              <1> ;Only valid for FAT 12/16
   682 00006290 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   683 00006294 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   684                              <1> ;dFATlength, get the FAT length
   685 00006298 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   686 0000629C 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   687 0000629F 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   688 000062A1 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   689 000062A4 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   690                              <1> ;Complex cases below...
   691                              <1> ;dClusterHeapOffset, start sector of the data area
   692 000062A7 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   693 000062AB 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   694 000062AE 85C0                <1>     test eax, eax
   695 000062B0 0F44C3              <1>     cmovz eax, ebx
   696                              <1> ;eax = FATsz
   697 000062B3 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   698 000062B7 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   699 000062BA 85DB                <1>     test ebx, ebx
   700 000062BC 0F44D9              <1>     cmovz ebx, ecx 
   701                              <1> ;ebx = TotSec
   702 000062BF 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   703 000062C2 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   704                              <1> .cd4:
   705 000062C4 01C2                <1>     add edx, eax
   706 000062C6 FEC9                <1>     dec cl
   707 000062C8 75FA                <1>     jnz .cd4
   708 000062CA 89D0                <1>     mov eax, edx    ;Store product in eax
   709 000062CC 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   710 000062D0 01D0                <1>     add eax, edx
   711                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   712 000062D2 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   713 000062D6 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   714 000062D9 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   715 000062DD 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   716 000062DE 89D0                <1>     mov eax, edx
   717 000062E0 31D2                <1>     xor edx, edx
   718 000062E2 F7F1                <1>     div ecx
   719 000062E4 89C2                <1>     mov edx, eax
   720 000062E6 58                  <1>     pop rax
   721 000062E7 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   722                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   723                              <1>     ;aka eax = Start sector of the data area in volume
   724 000062E9 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   725                              <1> ;dClusterCount
   726 000062EC 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   727 000062EE 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   728 000062F0 31D2                <1>     xor edx, edx
   729 000062F2 BB01000000          <1>     mov ebx, 1
   730 000062F7 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   731 000062FA D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   732 000062FC F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   733 000062FE FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   734 00006300 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   735                              <1> ;dFirstUnitOfRootDir
   736 00006303 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   737 00006308 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   738 0000630B 770F                <1>     ja .cd5
   739                              <1>     ;Else, we need to find the first sector of the root directory
   740                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   741 0000630D 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   742 00006311 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   743                              <1> .cd51:
   744 00006315 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   745 00006318 FFC9                <1>     dec ecx
   746 0000631A 75F9                <1>     jnz .cd51
   747                              <1> .cd5:
   748 0000631C 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   749                              <1> ;Exit epilogue
   750 0000631F 488B1D(54C40300)    <1>     mov rbx, qword [oldRSP]
   751 00006326 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   752                              <1>     %if DEBUG && DPBINFO
   753                              <1>     ;Print DPB 
   754                              <1>     debugEnterM
   755                              <1>     push rbp
   756                              <1>     lea rbp, .l0000
   757                              <1>     call debPrintNullString
   758                              <1>     pop rbp
   759                              <1>     call debDPBBPBptr
   760                              <1>     call debMakeDebuggerRespond
   761                              <1>     jmp short .l0001
   762                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   763                              <1> .l0001:
   764                              <1>     debugExitM
   765                              <1>     %endif
   766                              <1>     return
    18                              <2> %%_ret:
    19 00006328 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   767                              <1> 
   768                              <1> getVerifySetting:  ;ah = 54h
   769 00006329 8A05(AAC30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   770                              <1>     return
    18                              <2> %%_ret:
    19 0000632F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   771                              <1> 
   772                              <1> getExtendedError:  ;ah = 59h
   773 00006330 E8A6F7FFFF          <1>     call getUserRegs
   774 00006335 668B05(E5C30300)    <1>     mov ax, word [errorExCde]
   775 0000633C 8A2D(E4C30300)      <1>     mov ch, byte [errorLocus]
   776 00006342 8A3D(E8C30300)      <1>     mov bh, byte [errorClass]
   777 00006348 8A1D(E7C30300)      <1>     mov bl, byte [errorAction]
   778 0000634E 668906              <1>     mov word [rsi + callerFrame.rax], ax
   779 00006351 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   780 00006355 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   781                              <1>     return
    18                              <2> %%_ret:
    19 00006358 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   782                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   783                              <1> noOp:
   784                              <1>     return
    18                              <2> %%_ret:
    19 00006359 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                                  %include "./Source/Kernel/Net/server.asm"
    42                              <1> ;Network functions here
    43                              <1> 
    44                              <1> dosServer:  ;ah = 5Dh
    45                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    46                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    47                              <1> ;   rdx = Pointer to DPL
    48 0000635A 3C07                <1>     cmp al, 07h
    49 0000635C 7204                <1>     jb .skip
    50 0000635E 3C09                <1>     cmp al, 09h
    51 00006360 7619                <1>     jbe .skip2
    52                              <1> .skip:
    53 00006362 4889D6              <1>     mov rsi, rdx
    54 00006365 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    55 00006369 66891D(1DC40300)    <1>     mov word [machineNum], bx
    56 00006370 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    57 00006374 48891D(15C40300)    <1>     mov qword [serverPSP], rbx
    58                              <1>     
    59                              <1> .skip2:
    60                              <1> serverDispatch: ;AX=5D00h
    61                              <1> ;Input: rsi points to the DOS parameter list
    62 0000637B 58                  <1>     pop rax
    63 0000637C 56                  <1>     push rsi    ;Put dpl ptr in rdi
    64 0000637D 5F                  <1>     pop rdi
    65 0000637E E858F7FFFF          <1>     call getUserRegs
    66 00006383 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    67 00006386 56                  <1>     push rsi
    68 00006387 B906000000          <1>     mov ecx, 6
    69 0000638C F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    70 0000638F 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    71 00006396 48A5                <1>     movsq   ;Transfer r8...
    72 00006398 48A5                <1>     movsq   ;... and r9
    73 0000639A 5E                  <1>     pop rsi
    74 0000639B 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    75 0000639E 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    76 000063A2 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    77 000063A6 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    78 000063AA 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    79 000063AE 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    80 000063B2 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    81 000063B6 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    82 000063BA 48891D(5CC40300)    <1>     mov qword [oldRBX], rbx
    83 000063C1 C605(D7C60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    84 000063C8 E961FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    85                              <1> 
    86                              <1> 
    87                              <1> netServices:   ;ah = 5Eh, do nothing
    88                              <1> netRedir:;ah = 5Fh, do nothing
    89                              <1>     return
    18                              <2> %%_ret:
    19 000063CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                                  %include "./Source/Kernel/Net/multiplx.asm"
    43                              <1> ;Default multiplexer. Current only installed function is ah=12h
    44                              <1> 
    45                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    46 000063CE 80FC12              <1>     cmp ah, 12h
    47 000063D1 751C                <1>     jne .exit       ;Exit if not for us
    48 000063D3 3C1B                <1>     cmp al, mDispTblL / 2
    49 000063D5 7318                <1>     jae .exit   ;If above or equal, exit
    50 000063D7 53                  <1>     push rbx
    51 000063D8 51                  <1>     push rcx
    52 000063D9 31C9                <1>     xor ecx, ecx
    53 000063DB 488D1DC19FFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    54 000063E2 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    55 000063E4 D1E1                <1>     shl ecx, 1   ;multiply by 2
    56 000063E6 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    57 000063E9 FFD3                <1>     call rbx
    58 000063EB 59                  <1>     pop rcx
    59 000063EC 5B                  <1>     pop rbx
    60 000063ED 48CF                <1>     iretq
    61                              <1> .exit:
    62 000063EF 804C241001          <1>     or byte [rsp + 8h*2], 1
    63 000063F4 48CF                <1>     iretq
    64                              <1> multiplexTest:
    65 000063F6 B0FF                <1>     mov al, -1
    66 000063F8 C3                  <1>     ret
    67                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    68                              <1> ;Return: r8 = Dos Data Segment Pointer
    69 000063F9 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    70                              <1>     return
    18                              <2> %%_ret:
    19 00006400 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    43                                  %include "./Source/Drivers/drvData.asm"
    44                              <1> ;-----------------------------------:
    45                              <1> ;          Driver routines          :
    46                              <1> ;-----------------------------------:
    47                              <1> drivers:
    48                              <1> conHdr:
    49 00006401 [2364000000000000]  <1>     dq auxHdr
    50 00006409 1380                <1>     dw 08013h
    51 0000640B [A165000000000000]  <1>     dq commonStrat
    52 00006413 [B065000000000000]  <1>     dq conDriver
    53 0000641B 434F4E2020202020    <1>     db "CON     "
    54                              <1> auxHdr:
    55 00006423 [4564000000000000]  <1>     dq prnHdr
    56 0000642B 0080                <1>     dw 08000h
    57 0000642D [A165000000000000]  <1>     dq commonStrat
    58 00006435 [6568000000000000]  <1>     dq com1Intr
    59 0000643D 4155582020202020    <1>     db "AUX     "
    60                              <1> prnHdr:
    61 00006445 [6764000000000000]  <1>     dq clkHdr
    62 0000644D 40A0                <1>     dw 0A040h
    63 0000644F [A965000000000000]  <1>     dq nulStrat
    64 00006457 [AF65000000000000]  <1>     dq nulIntr
    65 0000645F 50524E2020202020    <1>     db "PRN     "
    66                              <1> clkHdr:
    67 00006467 [8964000000000000]  <1>     dq msdHdr
    68 0000646F 0880                <1>     dw 08008h
    69 00006471 [A165000000000000]  <1>     dq commonStrat
    70 00006479 [FD66000000000000]  <1>     dq clkDriver
    71 00006481 434C4F434B242020    <1>     db "CLOCK$  "
    72                              <1> msdHdr:
    73 00006489 [AB64000000000000]  <1>     dq com1Hdr
    74 00006491 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    75 00006493 [A165000000000000]  <1>     dq commonStrat
    76 0000649B [E969000000000000]  <1>     dq msdDriver
    77 000064A3 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    78                              <1> com1Hdr:
    79 000064AB [CD64000000000000]  <1>     dq com2Hdr
    80 000064B3 0080                <1>     dw 08000h
    81 000064B5 [A165000000000000]  <1>     dq commonStrat
    82 000064BD [6568000000000000]  <1>     dq com1Intr
    83 000064C5 434F4D3120202020    <1>     db "COM1    "
    84                              <1> com2Hdr:
    85 000064CD [EF64000000000000]  <1>     dq com3Hdr
    86 000064D5 0080                <1>     dw 08000h
    87 000064D7 [A165000000000000]  <1>     dq commonStrat
    88 000064DF [6E68000000000000]  <1>     dq com2Intr
    89 000064E7 434F4D3220202020    <1>     db "COM2    "
    90                              <1> com3Hdr:
    91 000064EF [1165000000000000]  <1>     dq com4Hdr
    92 000064F7 0080                <1>     dw 08000h
    93 000064F9 [A165000000000000]  <1>     dq commonStrat
    94 00006501 [7768000000000000]  <1>     dq com3Intr
    95 00006509 434F4D3320202020    <1>     db "COM3    "
    96                              <1> com4Hdr:
    97 00006511 [3365000000000000]  <1>     dq lpt1Hdr
    98 00006519 0080                <1>     dw 08000h
    99 0000651B [A165000000000000]  <1>     dq commonStrat
   100 00006523 [8068000000000000]  <1>     dq com4Intr
   101 0000652B 434F4D3420202020    <1>     db "COM4    "
   102                              <1> lpt1Hdr:
   103 00006533 [5565000000000000]  <1>     dq lpt2Hdr
   104 0000653B 40A0                <1>     dw 0A040h
   105 0000653D [A965000000000000]  <1>     dq nulStrat
   106 00006545 [AF65000000000000]  <1>     dq nulIntr
   107 0000654D 4C50543120202020    <1>     db "LPT1    "
   108                              <1> lpt2Hdr:
   109 00006555 [7765000000000000]  <1>     dq lpt3Hdr
   110 0000655D 40A0                <1>     dw 0A040h
   111 0000655F [A965000000000000]  <1>     dq nulStrat
   112 00006567 [AF65000000000000]  <1>     dq nulIntr
   113 0000656F 4C50543220202020    <1>     db "LPT2    "
   114                              <1> lpt3Hdr:
   115 00006577 FFFFFFFFFFFFFFFF    <1>     dq -1
   116 0000657F 40A0                <1>     dw 0A040h
   117 00006581 [A965000000000000]  <1>     dq nulStrat
   118 00006589 [AF65000000000000]  <1>     dq nulIntr
   119 00006591 4C50543320202020    <1>     dq "LPT3    "
   120 00006599 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    44                                  %include "./Source/Drivers/charDrv.asm"
    45                              <1> commonStrat:
    46                              <1> ;DOS calls this function with rbx=Ptr to request header
    47 000065A1 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    48 000065A8 C3                  <1>     ret
    49                              <1> nulStrat:
    50 000065A9 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    51                              <1> nulIntr:
    52 000065AF C3                  <1>     ret
    53                              <1> conDriver:
    54 000065B0 50                  <1>     push rax
    55 000065B1 53                  <1>     push rbx
    56 000065B2 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    57 000065B9 B003                <1>     mov al, 03h ;Unknown Command
    58 000065BB 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    59 000065BF 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    60                              <1> 
    61 000065C1 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    62 000065C4 3C04                <1>     cmp al, 4
    63 000065C6 7441                <1>     jz .conRead
    64 000065C8 3C05                <1>     cmp al, 5
    65 000065CA 0F847F000000        <1>     jz .conNondestructiveRead
    66 000065D0 3C06                <1>     cmp al, 6
    67 000065D2 0F84A8000000        <1>     jz .conInputStatus
    68 000065D8 3C07                <1>     cmp al, 7
    69 000065DA 0F84B0000000        <1>     jz .conFlushInputBuffers
    70 000065E0 3C08                <1>     cmp al, 8
    71 000065E2 0F84CA000000        <1>     jz .conWrite
    72 000065E8 3C09                <1>     cmp al, 9
    73 000065EA 0F84C2000000        <1>     jz .conWrite
    74 000065F0 3C0A                <1>     cmp al, 0Ah
    75 000065F2 0F84E3000000        <1>     jz .conOutputStatus
    76 000065F8 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    77                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    78 000065FA B480                <1>     mov ah, 80h ;Set error bit
    79 000065FC 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    80                              <1> .conExit:
    81 00006600 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    82 00006606 5B                  <1>     pop rbx
    83 00006607 58                  <1>     pop rax
    84 00006608 C3                  <1>     ret
    85                              <1> .conRead:    ;Function 4
    86 00006609 B005                <1>     mov al, 05h ;Bad request structure length?
    87 0000660B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    88 0000660E 75EA                <1>     jne .conWriteErrorCode
    89                              <1> 
    90 00006610 57                  <1>     push rdi
    91 00006611 51                  <1>     push rcx
    92 00006612 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    93 00006616 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    94                              <1> .cre1:
    95 00006618 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    96 0000661B 741C                <1>     je .cre2
    97 0000661D 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    98 00006624 751A                <1>     jnz .cre3   ;No, get the buffer value
    99 00006626 31C0                <1>     xor eax, eax
   100 00006628 CD36                <1>     int 36h
   101                              <1> .cre11:
   102 0000662A AA                  <1>     stosb
   103 0000662B 84C0                <1>     test al, al ;Was the ascii code stored 0?
   104 0000662D 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   105 0000662F 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   106                              <1> .cre12:
   107 00006635 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   108 00006637 EBDF                <1>     jmp short .cre1
   109                              <1> .cre2:
   110 00006639 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   111 0000663C 59                  <1>     pop rcx
   112 0000663D 5F                  <1>     pop rdi
   113 0000663E EBC0                <1>     jmp short .conExit
   114                              <1> .cre3:
   115 00006640 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   116 00006646 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   117 0000664D EBDB                <1>     jmp short .cre11
   118                              <1> 
   119                              <1> .conNondestructiveRead:  ;Function 5
   120 0000664F B005                <1>     mov al, 05h ;Bad request structure length?
   121 00006651 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   122 00006654 75A4                <1>     jne .conWriteErrorCode
   123 00006656 803D8E00000000      <1>     cmp byte [.conBuf], 0
   124 0000665D 7519                <1>     jnz .cnr2
   125 0000665F B401                <1>     mov ah, 01h     ;Get key if exists
   126 00006661 CD36                <1>     int 36h
   127 00006663 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   128                              <1>     ;Keystroke available
   129                              <1> .cnr0:
   130 00006665 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   131 00006668 E993FFFFFF          <1>     jmp .conExit
   132                              <1> .cnr1: ;No keystroke available
   133 0000666D 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   134 00006673 E988FFFFFF          <1>     jmp .conExit
   135                              <1> .cnr2:
   136 00006678 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   137 0000667E EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   138                              <1> 
   139                              <1> .conInputStatus:         ;Function 6
   140 00006680 B005                <1>     mov al, 05h ;Bad request structure length?
   141 00006682 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   142 00006685 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   143 0000668B E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   144                              <1> 
   145                              <1> .conFlushInputBuffers:   ;Function 7
   146 00006690 B005                <1>     mov al, 05h ;Bad request structure length?
   147 00006692 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   148 00006695 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   149 0000669B C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   150                              <1> .cfib0:
   151 000066A2 B401                <1>     mov ah, 01      ;Get buffer status
   152 000066A4 CD36                <1>     int 36h
   153 000066A6 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   154 000066AC 30E4                <1>     xor ah, ah
   155 000066AE CD36                <1>     int 36h ;Read key to flush from buffer
   156 000066B0 EBF0                <1>     jmp short .cfib0
   157                              <1> 
   158                              <1> .conWrite:   ;Function 8 and 9
   159 000066B2 B005                <1>     mov al, 05h ;Bad request structure length?
   160 000066B4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   161 000066B7 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   162                              <1> 
   163 000066BD 56                  <1>     push rsi
   164 000066BE 51                  <1>     push rcx
   165 000066BF 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   166 000066C3 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   167                              <1> .cw1: 
   168 000066C5 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   169 000066C8 7407                <1>     je .cw2
   170 000066CA AC                  <1>     lodsb   ;Get char into al, and inc rsi
   171 000066CB CD49                <1>     int 49h ;Fast print char
   172 000066CD FFC1                <1>     inc ecx
   173 000066CF EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   174                              <1> .cw2:
   175 000066D1 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   176 000066D4 59                  <1>     pop rcx
   177 000066D5 5E                  <1>     pop rsi
   178 000066D6 E925FFFFFF          <1>     jmp .conExit
   179                              <1> .conOutputStatus:   ;Function 0Ah
   180 000066DB B005                <1>     mov al, 05h ;Bad request structure length?
   181 000066DD 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   182 000066E0 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   183 000066E6 E915FFFFFF          <1>     jmp .conExit
   184                              <1> 
   185 000066EB 00                  <1> .conBuf db 0    ;Single byte buffer
   186                              <1> fastOutput:         ;This CON driver supports Int 49h
   187                              <1> ;Called with char to transfer in al
   188 000066EC 50                  <1>     push rax
   189 000066ED B40E                <1>     mov ah, 0Eh
   190 000066EF CD30                <1>     int 30h
   191 000066F1 58                  <1>     pop rax
   192 000066F2 48CF                <1>     iretq
   193                              <1> ctrlBreak:
   194                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   195 000066F4 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   196 000066FB 48CF                <1>     iretq
   197                              <1> 
   198                              <1> clkDriver:
   199 000066FD 50                  <1>     push rax
   200 000066FE 53                  <1>     push rbx
   201 000066FF 51                  <1>     push rcx
   202 00006700 52                  <1>     push rdx
   203 00006701 56                  <1>     push rsi
   204 00006702 55                  <1>     push rbp
   205 00006703 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   206 0000670A B003                <1>     mov al, 03h ;Unknown Command
   207 0000670C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   208 00006710 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   209                              <1> 
   210 00006712 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   211 00006715 3C04                <1>     cmp al, 04h
   212 00006717 7437                <1>     jz .clkRead
   213 00006719 3C06                <1>     cmp al, 06h
   214 0000671B 0F8494000000        <1>     jz .clkInputStatus
   215 00006721 3C07                <1>     cmp al, 07h
   216 00006723 0F8498000000        <1>     jz .clkFlushInputBuffers
   217 00006729 3C08                <1>     cmp al, 08h
   218 0000672B 0F84A0000000        <1>     jz .clkWrite
   219 00006731 3C09                <1>     cmp al, 09h
   220 00006733 0F8498000000        <1>     jz .clkWrite
   221 00006739 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   222                              <1> .clkNotFunctioning:
   223 0000673B B002                <1>     mov al, 02h ;Device not ready error
   224                              <1> .clkWriteErrorCode:
   225 0000673D B480                <1>     mov ah, 80h ;Set error bit
   226 0000673F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   227                              <1> .clkExit:
   228 00006743 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   229 00006749 5D                  <1>     pop rbp
   230 0000674A 5E                  <1>     pop rsi
   231 0000674B 5A                  <1>     pop rdx
   232 0000674C 59                  <1>     pop rcx
   233 0000674D 5B                  <1>     pop rbx
   234 0000674E 58                  <1>     pop rax
   235 0000674F C3                  <1>     ret
   236                              <1> 
   237                              <1> .clkRead:           ;Function 4
   238 00006750 B005                <1>     mov al, 05h ;Bad request structure length?
   239 00006752 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   240 00006755 75E6                <1>     jne .clkWriteErrorCode
   241                              <1> 
   242 00006757 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   243 0000675A 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   244 0000675E 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   245 00006765 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   246 00006769 30E4                <1>     xor ah, ah
   247 0000676B CD3A                <1>     int 3Ah         ;Read the system timer
   248 0000676D 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   249 0000676F 740D                <1>     jz .clkr1       ;Nope, now just time 
   250 00006771 30E4                <1>     xor ah, ah
   251                              <1>     ;This works as al should keep count of the # of days passed since last read
   252 00006773 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   253 00006777 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   254                              <1> .clkr1:
   255 0000677E 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   256 00006781 0FB7D2              <1>     movzx edx, dx
   257 00006784 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   258 00006786 89D0                <1>     mov eax, edx
   259 00006788 31D2                <1>     xor edx, edx
   260 0000678A 89D8                <1>     mov eax, ebx
   261 0000678C B944040000          <1>     mov ecx, 1092   
   262 00006791 F7F1                <1>     div ecx
   263 00006793 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   264 00006796 89D0                <1>     mov eax, edx    ;Get remainder in eax
   265 00006798 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   266 0000679C 31D2                <1>     xor edx, edx
   267 0000679E B95B000000          <1>     mov ecx, 91 ;5*18.2
   268 000067A3 F7F1                <1>     div ecx
   269 000067A5 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   270 000067A8 89D0                <1>     mov eax, edx    ;Get remainder in eax
   271                              <1>     ;lea eax, dword [eax + 4*eax]
   272                              <1>     ;add eax, edx    ;Essentially multiply by 6
   273 000067AA 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   274 000067AD 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   275 000067B0 E98EFFFFFF          <1>     jmp .clkExit
   276                              <1> 
   277                              <1> .clkInputStatus:    ;Function 6
   278                              <1> ;Always return ready
   279 000067B5 B005                <1>     mov al, 05h ;Bad request structure length?
   280 000067B7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   281 000067BA 7581                <1>     jne .clkWriteErrorCode
   282 000067BC E982FFFFFF          <1>     jmp .clkExit
   283                              <1> .clkFlushInputBuffers:  ;Function 7
   284                              <1> ;Always return done immediately
   285 000067C1 B005                <1>     mov al, 05h ;Bad request structure length?
   286 000067C3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   287 000067C6 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   288 000067CC E972FFFFFF          <1>     jmp .clkExit
   289                              <1> 
   290                              <1> .clkWrite:          ;Functions 8 and 9
   291 000067D1 B005                <1>     mov al, 05h ;Bad request structure length?
   292 000067D3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   293 000067D6 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   294                              <1> 
   295 000067DC 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   296 000067DF 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   297 000067E3 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   298 000067E7 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   299                              <1> 
   300 000067EE 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   301 000067F0 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   302 000067F4 B105                <1>     mov cl, 5
   303 000067F6 F6F1                <1>     div cl          ;Divide al by 5
   304 000067F8 30E4                <1>     xor ah, ah      ;Remove the remainder
   305 000067FA 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   306                              <1> ;Using the decimal part of this formula for the low count
   307                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   308 000067FC 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   309 000067FF B912000000          <1>     mov ecx, 18
   310 00006804 F7E1                <1>     mul ecx  
   311 00006806 01C3                <1>     add ebx, eax
   312                              <1> 
   313 00006808 31D2                <1>     xor edx, edx
   314 0000680A 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   315 0000680E B944040000          <1>     mov ecx, 1092
   316 00006813 F7E1                <1>     mul ecx
   317 00006815 01C3                <1>     add ebx, eax
   318 00006817 89DA                <1>     mov edx, ebx    ;edx now has low count
   319 00006819 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   320 0000681D B401                <1>     mov ah, 01h     ;Set the system time
   321 0000681F CD3A                <1>     int 3Ah
   322                              <1> 
   323 00006821 4889F3              <1>     mov rbx, rsi
   324 00006824 E91AFFFFFF          <1>     jmp .clkExit
   325                              <1> 
   326                              <1> .clkBCDtoHex:
   327                              <1> ;Converts a BCD value to a Hex byte
   328                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   329 00006829 51                  <1>     push rcx
   330 0000682A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   331 0000682D 89C1                <1>     mov ecx, eax    ;Save al in ecx
   332 0000682F 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   333 00006834 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   334 0000683A C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   335                              <1> .cbth0:
   336 0000683D 050A000000          <1>     add eax, 10
   337 00006842 E2F9                <1>     loop .cbth0
   338 00006844 59                  <1>     pop rcx
   339 00006845 C3                  <1>     ret
   340                              <1> 
   341                              <1> .clkHexToBCD:
   342                              <1> ;Converts a Hex byte into two BCD digits
   343                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   344 00006846 51                  <1>     push rcx
   345 00006847 0FB6C0              <1>     movzx eax, al   ;Zero extend
   346 0000684A 31C9                <1>     xor ecx, ecx
   347                              <1> .chtb0:
   348 0000684C 3D0A000000          <1>     cmp eax, 10
   349 00006851 7209                <1>     jb .chtb1
   350 00006853 2D0A000000          <1>     sub eax, 10
   351 00006858 FFC1                <1>     inc ecx
   352 0000685A EBF0                <1>     jmp short .chtb0
   353                              <1> .chtb1:
   354 0000685C C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   355 0000685F 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   356 00006861 59                  <1>     pop rcx
   357 00006862 C3                  <1>     ret
   358 00006863 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   359                              <1> 
   360                              <1> ;COM Driver headers and main interrupt strat
   361                              <1> com1Intr:
   362 00006865 C6057C01000000      <1>     mov byte [comIntr.comDevice], 0
   363 0000686C EB19                <1>     jmp short comIntr
   364                              <1> com2Intr:
   365 0000686E C6057301000001      <1>     mov byte [comIntr.comDevice], 1
   366 00006875 EB10                <1>     jmp short comIntr
   367                              <1> com3Intr:
   368 00006877 C6056A01000002      <1>     mov byte [comIntr.comDevice], 2
   369 0000687E EB07                <1>     jmp short comIntr
   370                              <1> com4Intr:
   371 00006880 C6056101000003      <1>     mov byte [comIntr.comDevice], 3
   372                              <1> comIntr:
   373 00006887 50                  <1>     push rax
   374 00006888 53                  <1>     push rbx
   375 00006889 51                  <1>     push rcx
   376 0000688A 52                  <1>     push rdx
   377 0000688B 56                  <1>     push rsi
   378 0000688C 57                  <1>     push rdi
   379 0000688D 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   380 00006894 B003                <1>     mov al, 03h ;Unknown Command
   381 00006896 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   382 0000689A 7758                <1>     ja .comWriteErrorCode ;If yes, error!
   383                              <1> 
   384 0000689C 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   385 0000689F 3C04                <1>     cmp al, 4   ;Read Character(s)
   386 000068A1 7464                <1>     jz .comRead
   387 000068A3 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   388 000068A5 0F849D000000        <1>     jz .comNondestructiveRead   
   389 000068AB 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   390 000068AD 0F8486000000        <1>     jz .comReadInputStatus
   391 000068B3 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   392 000068B5 0F849C000000        <1>     jz .comFlushInputBuffers
   393 000068BB 3C08                <1>     cmp al, 8
   394 000068BD 0F84BA000000        <1>     jz .comWrite
   395 000068C3 3C09                <1>     cmp al, 9
   396 000068C5 0F84B2000000        <1>     jz .comWrite
   397 000068CB 3C0A                <1>     cmp al, 0Ah
   398 000068CD 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   399 000068D3 EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   400                              <1> .comErrorNoCount:
   401 000068D5 B002                <1>     mov al, 02h ;Unknown device
   402 000068D7 EB1B                <1>     jmp short .comWriteErrorCode
   403                              <1> .comReadError:
   404 000068D9 BA0B000000          <1>     mov edx, 0Bh
   405 000068DE EB05                <1>     jmp short .comError
   406                              <1> .comWriteError:
   407 000068E0 BA0A000000          <1>     mov edx, 0Ah
   408                              <1> .comError:
   409 000068E5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   410 000068E8 B902000000          <1>     mov ecx, 02h    ;Unknown device
   411 000068ED 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   412 000068EF 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   413 000068F2 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   414                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   415 000068F4 B480                <1>     mov ah, 80h ;Set error bit
   416 000068F6 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   417                              <1> .comExit:
   418 000068FA 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   419 00006900 5F                  <1>     pop rdi
   420 00006901 5E                  <1>     pop rsi
   421 00006902 5A                  <1>     pop rdx
   422 00006903 59                  <1>     pop rcx
   423 00006904 5B                  <1>     pop rbx
   424 00006905 58                  <1>     pop rax
   425 00006906 C3                  <1>     ret
   426                              <1> 
   427                              <1> .comRead:
   428 00006907 B005                <1>     mov al, 05h ;Bad request structure length?
   429 00006909 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   430 0000690C 75E6                <1>     jne .comWriteErrorCode
   431 0000690E 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   432 00006912 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   433                              <1> .cr1:
   434 00006914 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   435 00006917 741B                <1>     je .cre2
   436                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   437 00006919 B800020000          <1>     mov eax, 0200h    ;Recieve 
   438 0000691E 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   439 00006925 F8                  <1>     clc
   440 00006926 CD34                <1>     int 34h ;Recieve Char
   441 00006928 72BB                <1>     jc .comError
   442 0000692A 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   443 0000692D 74EA                <1>     je .cr11
   444 0000692F AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   445 00006930 FFC1                <1>     inc ecx
   446 00006932 EBE0                <1>     jmp short .cr1
   447                              <1> .cre2:
   448 00006934 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   449 00006937 EBC1                <1>     jmp short .comExit
   450                              <1> 
   451                              <1> .comReadInputStatus:
   452 00006939 B005                <1>     mov al, 05h ;Bad request structure length?
   453 0000693B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   454 0000693E 75B4                <1>     jne .comWriteErrorCode
   455 00006940 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   456 00006946 EBB2                <1>     jmp short .comExit
   457                              <1> 
   458                              <1> .comNondestructiveRead:
   459                              <1> ;The buffer is always empty for now (no keystroke available)
   460 00006948 B005                <1>     mov al, 05h ;Bad request structure length?
   461 0000694A 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   462 0000694D 75A5                <1>     jne .comWriteErrorCode
   463 0000694F 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   464 00006955 EBA3                <1>     jmp short .comExit
   465                              <1> 
   466                              <1> .comFlushInputBuffers:
   467 00006957 B005                <1>     mov al, 05h ;Bad request structure length?
   468 00006959 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   469 0000695C 7596                <1>     jne .comWriteErrorCode
   470                              <1> .cfib0:
   471 0000695E 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   472 00006965 B800020000          <1>     mov eax, 0200h    ;Recieve
   473 0000696A F8                  <1>     clc
   474 0000696B CD34                <1>     int 34h
   475 0000696D 0F8262FFFFFF        <1>     jc .comErrorNoCount
   476 00006973 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   477 00006976 75E6                <1>     jne .cfib0
   478 00006978 E97DFFFFFF          <1>     jmp .comExit
   479                              <1> 
   480                              <1> .comWrite:
   481 0000697D B005                <1>     mov al, 05h ;Bad request structure length?
   482 0000697F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   483 00006982 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   484                              <1> 
   485 00006988 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   486 0000698C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   487                              <1> .cw1: 
   488 0000698E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   489 00006991 7417                <1>     je .cw2
   490 00006993 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   491 00006994 B401                <1>     mov ah, 01h ;Move function number into ah
   492 00006996 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   493 0000699D F8                  <1>     clc
   494 0000699E CD34                <1>     int 34h ;Transmit char
   495 000069A0 0F823FFFFFFF        <1>     jc .comError
   496 000069A6 FFC1                <1>     inc ecx
   497 000069A8 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   498                              <1> .cw2:
   499 000069AA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   500 000069AD E948FFFFFF          <1>     jmp .comExit
   501                              <1> 
   502                              <1> .comOutputStatus:
   503                              <1> ;Read MODEM status
   504 000069B2 B005                <1>     mov al, 05h ;Bad request structure length?
   505 000069B4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   506 000069B7 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   507                              <1> 
   508 000069BD 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   509 000069C4 B403                <1>     mov ah, 03h     ;Get status
   510 000069C6 F8                  <1>     clc
   511 000069C7 CD34                <1>     int 34h
   512 000069C9 0F8206FFFFFF        <1>     jc .comErrorNoCount
   513 000069CF 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   514 000069D4 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   515 000069D7 F7D0                <1>     not eax      ;Bitwise inversion
   516 000069D9 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   517 000069DE 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   518 000069E3 E912FFFFFF          <1>     jmp .comExit
   519 000069E8 00                  <1> .comDevice   db 0
    45                                  %include "./Source/Drivers/diskDrv.asm"
    46                              <1> msdDriver:
    47 000069E9 50                  <1>     push rax
    48 000069EA 53                  <1>     push rbx
    49 000069EB 51                  <1>     push rcx
    50 000069EC 52                  <1>     push rdx
    51 000069ED 56                  <1>     push rsi
    52 000069EE 57                  <1>     push rdi
    53 000069EF 55                  <1>     push rbp
    54 000069F0 4150                <1>     push r8
    55 000069F2 488B1DA0FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    56 000069F9 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    57 000069FD B003                <1>     mov al, drvBadCmd
    58 000069FF 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    59 00006A05 B001                <1>     mov al, drvBadUnit 
    60 00006A07 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    61 00006A0B 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    62 00006A11 488D353A030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    63 00006A18 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    64 00006A1C C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    65 00006A1F 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    66 00006A23 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    67 00006A27 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    68 00006A29 488D0D9A000000      <1>     lea rcx, .msdTable
    69 00006A30 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    70 00006A34 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    71 00006A36 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    72 00006A38 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    73 00006A3B FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    74                              <1> .msdDriverExit:
    75 00006A3D 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    76 00006A43 4158                <1>     pop r8
    77 00006A45 5D                  <1>     pop rbp
    78 00006A46 5F                  <1>     pop rdi
    79 00006A47 5E                  <1>     pop rsi
    80 00006A48 5A                  <1>     pop rdx
    81 00006A49 59                  <1>     pop rcx
    82 00006A4A 5B                  <1>     pop rbx
    83 00006A4B 58                  <1>     pop rax
    84 00006A4C C3                  <1>     ret
    85                              <1> 
    86                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    87 00006A4D 4889FB              <1>     mov rbx, rdi
    88 00006A50 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    89 00006A53 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    90 00006A55 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    91                              <1> ;Now fall through to general error
    92                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    93 00006A58 B401                <1>     mov ah, 01h
    94 00006A5A CD33                <1>     int 33h ;Read status of last operation
    95 00006A5C 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    96 00006A5F B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    97 00006A61 7460                <1>     je .msdWriteErrorCode 
    98 00006A63 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    99 00006A65 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   100 00006A68 7459                <1>     je .msdWriteErrorCode 
   101 00006A6A 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   102 00006A6D 7454                <1>     je .msdWriteErrorCode
   103                              <1> ;Device Not Ready
   104 00006A6F B002                <1>     mov al, 02h  ;Device not ready code
   105 00006A71 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   106 00006A74 744D                <1>     je .msdWriteErrorCode
   107 00006A76 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   108 00006A7A 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   109                              <1> ;Write Protected
   110 00006A7E 30C0                <1>     xor al, al
   111 00006A80 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   112 00006A85 743C                <1>     je .msdWriteErrorCode
   113                              <1> ;CRC Error
   114 00006A87 B004                <1>     mov al, 04h     ;CRC error code
   115 00006A89 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   116 00006A8E 7433                <1>     je .msdWriteErrorCode
   117 00006A90 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   118 00006A95 742C                <1>     je .msdWriteErrorCode
   119 00006A97 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   120 00006A9C 7425                <1>     je .msdWriteErrorCode
   121                              <1> ;Seek Error
   122 00006A9E B006                <1>     mov al, 06h     ;Seek error code
   123 00006AA0 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   124 00006AA3 741E                <1>     je .msdWriteErrorCode
   125                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   126                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   127 00006AA5 B007                <1>     mov al, 07h
   128 00006AA7 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   129 00006AAA 7417                <1>     je .msdWriteErrorCode
   130                              <1> ;Sector Not Found
   131 00006AAC B008                <1>     mov al, 08h     ;Sector not found code
   132 00006AAE 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   133 00006AB1 7410                <1>     je .msdWriteErrorCode
   134                              <1> ;Write faults
   135 00006AB3 B00A                <1>     mov al, 0Ah     ;Write fault
   136 00006AB5 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   137 00006AB8 7409                <1>     je .msdWriteErrorCode
   138                              <1> ;Read faults
   139 00006ABA B00B                <1>     mov al, 0Bh     ;Read fault
   140 00006ABC 80F911              <1>     cmp cl, 11h     ;Read error
   141 00006ABF 7402                <1>     je .msdWriteErrorCode
   142                              <1> ;General Errors
   143 00006AC1 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   144                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   145 00006AC3 B480                <1>     mov ah, 80h ;Set error bit
   146 00006AC5 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   147 00006AC9 C3                  <1>     ret ;Return to set done bit
   148                              <1> .msdTable:
   149 00006ACA 0000                <1>     dw 0                            ;Function 0
   150 00006ACC 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   151 00006ACE 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   152 00006AD0 F100                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   153 00006AD2 FD00                <1>     dw .msdRead - .msdTable         ;Function 4
   154 00006AD4 0000                <1>     dw 0                            ;Function 5
   155 00006AD6 0000                <1>     dw 0                            ;Function 6
   156 00006AD8 0000                <1>     dw 0                            ;Function 7
   157 00006ADA 3501                <1>     dw .msdWrite - .msdTable        ;Function 8
   158 00006ADC 6D01                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   159 00006ADE 0000                <1>     dw 0                            ;Function 10
   160 00006AE0 0000                <1>     dw 0                            ;Function 11
   161 00006AE2 B201                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   162 00006AE4 BE01                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   163 00006AE6 D901                <1>     dw .msdDevClose - .msdTable     ;Function 14
   164 00006AE8 F401                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   165 00006AEA 0000                <1>     dw 0                            ;Function 16
   166 00006AEC 0000                <1>     dw 0                            ;Function 17
   167 00006AEE 0000                <1>     dw 0                            ;Function 18
   168 00006AF0 1F02                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   169 00006AF2 0000                <1>     dw 0                            ;Function 20
   170 00006AF4 0000                <1>     dw 0                            ;Function 21
   171 00006AF6 0000                <1>     dw 0                            ;Function 22
   172 00006AF8 2B02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   173 00006AFA 4002                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   174                              <1> 
   175                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   176                              <1> .msdMedChk:          ;Function 1
   177 00006AFC B005                <1>     mov al, 05h ;Bad request structure length
   178 00006AFE 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   179 00006B01 75C0                <1>     jne .msdWriteErrorCode
   180                              <1> 
   181 00006B03 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   182 00006B08 488D0D39020000      <1>     lea rcx, .msdBIOSmap
   183 00006B0F 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   184 00006B12 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   185 00006B15 753F                <1>     jnz .mmcNoChange
   186                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   187 00006B17 B416                <1>     mov ah, 16h 
   188 00006B19 CD33                <1>     int 33h
   189 00006B1B 0F8237FFFFFF        <1>     jc .msdGenDiskError
   190 00006B21 80FC80              <1>     cmp ah, 80h
   191 00006B24 740E                <1>     je .mmcNoChangeLine
   192 00006B26 80FC86              <1>     cmp ah, 86h
   193 00006B29 7409                <1>     je .mmcNoChangeLine
   194 00006B2B 84E4                <1>     test ah, ah ;No change?
   195 00006B2D 7427                <1>     jz .mmcNoChange
   196 00006B2F F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   197 00006B32 750D                <1>     jnz .mmcChange
   198                              <1> ;If nothing, fall through and test manually, should never happen though
   199                              <1> .mmcNoChangeLine:
   200                              <1> ;Now we test Media Descriptor
   201 00006B34 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   202 00006B39 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   203 00006B3C 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   204 00006B3F 7410                <1>     je .mmcUnsure
   205                              <1> .mmcChange:
   206 00006B41 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   207 00006B45 488D05F2010000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   208 00006B4C 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   209                              <1>     ;Check here if there were any open handles on the device when it was changed
   210 00006B50 C3                  <1>     ret
   211                              <1> .mmcUnsure:
   212 00006B51 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   213 00006B55 C3                  <1>     ret
   214                              <1> .mmcNoChange:
   215 00006B56 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   216 00006B5A C3                  <1>     ret
   217                              <1> 
   218                              <1> 
   219                              <1> .msdBuildBPB:        ;Function 2
   220 00006B5B B005                <1>     mov al, 05h ;Bad request structure length
   221 00006B5D 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   222 00006B60 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   223                              <1> 
   224 00006B66 4889DE              <1>     mov rsi, rbx
   225 00006B69 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   226 00006B6E 488D0DD3010000      <1>     lea rcx, .msdBIOSmap
   227 00006B75 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   228 00006B78 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   229 00006B7C 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   230 00006B7E 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   231 00006B81 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   232 00006B86 CD33                <1>     int 33h
   233 00006B88 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   234                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   235 00006B8E 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   236 00006B92 7418                <1>     je .mbbpb0
   237 00006B94 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   238 00006B98 7412                <1>     je .mbbpb0
   239 00006B9A 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   240 00006B9E 740C                <1>     je .mbbpb0
   241 00006BA0 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   242 00006BA4 B007                <1>     mov al, 07h ;Unknown media error code
   243 00006BA6 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   244                              <1> .mbbpb0:
   245 00006BAC 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   246 00006BAF 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   247 00006BB2 B90F000000          <1>     mov ecx, bpbEx_size/8
   248 00006BB7 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   249 00006BBA C3                  <1>     ret
   250                              <1> .msdIOCTLRead:       ;Function 3, returns done
   251 00006BBB B005                <1>     mov al, drvBadDrvReq
   252 00006BBD 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   253 00006BC0 0F85FDFEFFFF        <1>     jne .msdWriteErrorCode
   254 00006BC6 C3                  <1>     ret
   255                              <1> .msdRead:            ;Function 4
   256                              <1> ;Will read one sector at a time.
   257 00006BC7 B005                <1>     mov al, 05h ;Bad request structure length
   258 00006BC9 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   259 00006BCC 0F85F1FEFFFF        <1>     jne .msdWriteErrorCode
   260                              <1> 
   261 00006BD2 4889DF              <1>     mov rdi, rbx
   262 00006BD5 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   263                              <1> .msdr0:
   264 00006BD7 B682                <1>     mov dh, 82h ;LBA Read Sectors
   265 00006BD9 E841010000          <1>     call .msdBlkIOCommon
   266 00006BDE 0F8269FEFFFF        <1>     jc .msdIOError
   267 00006BE4 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   268 00006BEC 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   269 00006BF4 FFC6                <1>     inc esi
   270 00006BF6 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   271 00006BF9 75DC                <1>     jne .msdr0
   272 00006BFB 4889FB              <1>     mov rbx, rdi
   273 00006BFE C3                  <1>     ret
   274                              <1> .msdWrite:           ;Function 8
   275                              <1> ;Will write one sector at a time.
   276 00006BFF B005                <1>     mov al, 05h ;Bad request structure length
   277 00006C01 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   278 00006C04 0F85B9FEFFFF        <1>     jne .msdWriteErrorCode
   279                              <1> 
   280 00006C0A 4889DF              <1>     mov rdi, rbx
   281 00006C0D 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   282                              <1> .msdw0:
   283 00006C0F B683                <1>     mov dh, 83h ;LBA Write Sectors
   284 00006C11 E809010000          <1>     call .msdBlkIOCommon
   285 00006C16 0F8231FEFFFF        <1>     jc .msdIOError
   286 00006C1C 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   287 00006C24 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   288 00006C2C FFC6                <1>     inc esi
   289 00006C2E 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   290 00006C31 75DC                <1>     jne .msdw0
   291 00006C33 4889FB              <1>     mov rbx, rdi
   292 00006C36 C3                  <1>     ret
   293                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   294                              <1> ;Will write one sector at a time and then verify it.
   295 00006C37 B005                <1>     mov al, 05h ;Bad request structure length
   296 00006C39 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   297 00006C3C 0F8581FEFFFF        <1>     jne .msdWriteErrorCode
   298                              <1> 
   299 00006C42 4889DF              <1>     mov rdi, rbx
   300 00006C45 31F6                <1>     xor esi, esi  ;Set counter to zero
   301                              <1> .msdwv0:
   302 00006C47 B683                <1>     mov dh, 83h ;LBA Write Sectors
   303 00006C49 E8D1000000          <1>     call .msdBlkIOCommon
   304 00006C4E 0F82F9FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   305 00006C54 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   306 00006C56 E8C4000000          <1>     call .msdBlkIOCommon
   307 00006C5B 0F82ECFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   308 00006C61 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   309 00006C69 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   310 00006C71 FFC6                <1>     inc esi
   311 00006C73 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   312 00006C76 75CF                <1>     jne .msdwv0
   313 00006C78 4889FB              <1>     mov rbx, rdi
   314 00006C7B C3                  <1>     ret
   315                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   316 00006C7C B005                <1>     mov al, drvBadDrvReq
   317 00006C7E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   318 00006C81 0F853CFEFFFF        <1>     jne .msdWriteErrorCode
   319                              <1> 
   320 00006C87 C3                  <1>     ret
   321                              <1> .msdDevOpen:         ;Function 13
   322 00006C88 B005                <1>     mov al, drvBadDrvReq
   323 00006C8A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   324 00006C8D 0F8530FEFFFF        <1>     jne .msdWriteErrorCode
   325                              <1> 
   326 00006C93 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   327 00006C98 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   328 00006C9F FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   329 00006CA2 C3                  <1>     ret
   330                              <1> .msdDevClose:        ;Function 14
   331 00006CA3 B005                <1>     mov al, drvBadDrvReq
   332 00006CA5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   333 00006CA8 0F8515FEFFFF        <1>     jne .msdWriteErrorCode
   334                              <1> 
   335 00006CAE 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   336 00006CB3 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   337 00006CBA FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   338 00006CBD C3                  <1>     ret
   339                              <1> .msdRemovableMedia:  ;Function 15
   340 00006CBE B005                <1>     mov al, drvBadDrvReq
   341 00006CC0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   342 00006CC3 0F85FAFDFFFF        <1>     jne .msdWriteErrorCode
   343                              <1> 
   344 00006CC9 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   345 00006CCE 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   346 00006CD5 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   347 00006CD8 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   348 00006CDD 31D2                <1>     xor edx, edx    ;Busy bit clear
   349 00006CDF A880                <1>     test al, 80h
   350 00006CE1 0F44CA              <1>     cmovz ecx, edx
   351 00006CE4 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   352 00006CE8 C3                  <1>     ret
   353                              <1> .msdGenericIOCTL:    ;Function 19
   354 00006CE9 B005                <1>     mov al, drvBadDrvReq
   355 00006CEB 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   356 00006CEE 0F85CFFDFFFF        <1>     jne .msdWriteErrorCode
   357                              <1> 
   358 00006CF4 C3                  <1>     ret
   359                              <1> .msdGetLogicalDev:   ;Function 23
   360 00006CF5 B005                <1>     mov al, drvBadDrvReq
   361 00006CF7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   362 00006CFA 0F85C3FDFFFF        <1>     jne .msdWriteErrorCode
   363                              <1> 
   364 00006D00 8A0541000000        <1>     mov al, byte [.msdCurDev]
   365 00006D06 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   366 00006D09 C3                  <1>     ret
   367                              <1> .msdSetLogicalDev:   ;Function 24
   368 00006D0A B005                <1>     mov al, drvBadDrvReq
   369 00006D0C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   370 00006D0F 0F85AEFDFFFF        <1>     jne .msdWriteErrorCode
   371                              <1> 
   372 00006D15 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   373 00006D18 880529000000        <1>     mov byte [.msdCurDev], al
   374 00006D1E C3                  <1>     ret
   375                              <1> 
   376                              <1> .msdBlkIOCommon:  ;Does block IO
   377                              <1> ;Called with rdi containing old rbx value and ah with function number
   378                              <1> ;rbp points to bpb
   379                              <1> ;Error handled by caller
   380                              <1> ;Sector count handled by caller
   381                              <1> ;Called with dh = BIOS function number
   382 00006D1F 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   383 00006D24 8A90[486D0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   384 00006D2A 31C9                <1>     xor ecx, ecx
   385 00006D2C 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   386 00006D2F 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   387 00006D33 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   388 00006D37 88F4                <1>     mov ah, dh
   389 00006D39 B001                <1>     mov al, 01h ;Do one sector at a time 
   390 00006D3B CD33                <1>     int 33h
   391 00006D3D C3                  <1>     ret
   392                              <1> 
   393 00006D3E 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   394                              <1> ;LASTDRIVE default is 5
   395                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   396                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   397 00006D47 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   398                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   399 00006D48 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   400 00006D4D 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   401 00006D52 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   401 00006D5B 000000000000000000- <1>
   401 00006D64 000000000000000000- <1>
   401 00006D6D 000000000000000000- <1>
   401 00006D76 00000000            <1>
   402                              <1> .msdBPBblks  defaultBPB ;Add two default BPB's. If no remdrv, these are used
   402                              <2> .msdBPBblks :
   181 00006D7A E9                  <2>  db 0E9h
   182 00006D7B 00                  <2>  db 00h
   183 00006D7C 90                  <2>  db 90h
   184 00006D7D 534350444F537631    <2>  db 'SCPDOSv1'
   185 00006D85 0002                <2>  dw 0200h
   186 00006D87 01                  <2>  db 01h
   187 00006D88 0100                <2>  dw 0001h
   188 00006D8A 02                  <2>  db 02h
   189 00006D8B E000                <2>  dw 00E0h
   190 00006D8D 400B                <2>  dw 0B40h
   191 00006D8F F0                  <2>  db 0F0h
   192 00006D90 0900                <2>  dw 0009h
   193 00006D92 1200                <2>  dw 0012h
   194 00006D94 0200                <2>  dw 0002h
   195 00006D96 00000000            <2>  dd 0
   196 00006D9A 00000000            <2>  dd 0
   197 00006D9E 00                  <2>  db 00h
   198 00006D9F 00                  <2>  db 00h
   199 00006DA0 29                  <2>  db 29h
   200 00006DA1 00000000            <2>  dd 0
   201 00006DA5 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00006DAE 2020                <2>
   202 00006DB0 4641543132202020    <2>  db 'FAT12   '
   203 00006DB8 000000000000000000- <2>  db 58 dup 0
   203 00006DC1 000000000000000000- <2>
   203 00006DCA 000000000000000000- <2>
   203 00006DD3 000000000000000000- <2>
   203 00006DDC 000000000000000000- <2>
   203 00006DE5 000000000000000000- <2>
   203 00006DEE 00000000            <2>
   403                              <1>              defaultBPB ;If remdrvs found, these are overridden
   181 00006DF2 E9                  <2>  db 0E9h
   182 00006DF3 00                  <2>  db 00h
   183 00006DF4 90                  <2>  db 90h
   184 00006DF5 534350444F537631    <2>  db 'SCPDOSv1'
   185 00006DFD 0002                <2>  dw 0200h
   186 00006DFF 01                  <2>  db 01h
   187 00006E00 0100                <2>  dw 0001h
   188 00006E02 02                  <2>  db 02h
   189 00006E03 E000                <2>  dw 00E0h
   190 00006E05 400B                <2>  dw 0B40h
   191 00006E07 F0                  <2>  db 0F0h
   192 00006E08 0900                <2>  dw 0009h
   193 00006E0A 1200                <2>  dw 0012h
   194 00006E0C 0200                <2>  dw 0002h
   195 00006E0E 00000000            <2>  dd 0
   196 00006E12 00000000            <2>  dd 0
   197 00006E16 00                  <2>  db 00h
   198 00006E17 00                  <2>  db 00h
   199 00006E18 29                  <2>  db 29h
   200 00006E19 00000000            <2>  dd 0
   201 00006E1D 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00006E26 2020                <2>
   202 00006E28 4641543132202020    <2>  db 'FAT12   '
   203 00006E30 000000000000000000- <2>  db 58 dup 0
   203 00006E39 000000000000000000- <2>
   203 00006E42 000000000000000000- <2>
   203 00006E4B 000000000000000000- <2>
   203 00006E54 000000000000000000- <2>
   203 00006E5D 000000000000000000- <2>
   203 00006E66 00000000            <2>
   404 00006E6A 000000000000000000- <1>              db 3*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   404 00006E73 000000000000000000- <1>
   404 00006E7C 000000000000000000- <1>
   404 00006E85 000000000000000000- <1>
   404 00006E8E 000000000000000000- <1>
   404 00006E97 000000000000000000- <1>
   404 00006EA0 000000000000000000- <1>
   404 00006EA9 000000000000000000- <1>
   404 00006EB2 000000000000000000- <1>
   404 00006EBB 000000000000000000- <1>
   404 00006EC4 000000000000000000- <1>
   404 00006ECD 000000000000000000- <1>
   404 00006ED6 000000000000000000- <1>
   404 00006EDF 000000000000000000- <1>
   404 00006EE8 000000000000000000- <1>
   404 00006EF1 000000000000000000- <1>
   404 00006EFA 000000000000000000- <1>
   404 00006F03 000000000000000000- <1>
   404 00006F0C 000000000000000000- <1>
   404 00006F15 000000000000000000- <1>
   404 00006F1E 000000000000000000- <1>
   404 00006F27 000000000000000000- <1>
   404 00006F30 000000000000000000- <1>
   404 00006F39 000000000000000000- <1>
   404 00006F42 000000000000000000- <1>
   404 00006F4B 000000000000000000- <1>
   404 00006F54 000000000000000000- <1>
   404 00006F5D 000000000000000000- <1>
   404 00006F66 000000000000000000- <1>
   404 00006F6F 000000000000000000- <1>
   404 00006F78 000000000000000000- <1>
   404 00006F81 000000000000000000- <1>
   404 00006F8A 000000000000000000- <1>
   404 00006F93 000000000000000000- <1>
   404 00006F9C 000000000000000000- <1>
   404 00006FA5 000000000000000000- <1>
   404 00006FAE 000000000000000000- <1>
   404 00006FB7 000000000000000000- <1>
   404 00006FC0 000000000000000000- <1>
   404 00006FC9 000000000000000000  <1>
   405                              <1> endptr equ $
    46                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    47                                  ;Paragraph alignment
    48                                  %include "./Source/BSS/dosDynaDataArea.asm"
    49                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    50                              <1> ; the MCB chain!
    51                              <1> ddaStart:
    52 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    53                              <1> 
    54                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
    55                              <1> ;Create DPB chain of first 5 available DPB slots
    56 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
    57 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    58 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    59 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    60 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    61                              <1> 
    62                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    63                              <1> 
    64 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    65                              <1> 
    66 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    67 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    68                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    69                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    70                              <1> dynamicDataAreaLength equ $ - ddaStart
    70          ------------------  <1>  info: assembly required 1+14+2 passes

