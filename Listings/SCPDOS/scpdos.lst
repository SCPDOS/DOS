     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Drive structures
    70                              <1> struc drvReqHdr
    71                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc initReqPkt  ;Init Request Packet
    75                              <1> 
    76                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    77 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    78 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    79 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    80 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    85                              <1> 
    86                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    87 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    88 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    89 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    90                              <1> 
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    96 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    97 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    98 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    99                              <1> 
   100                              <1> endstruc
   101                              <1> 
   102                              <1> struc ioReqPkt   ;IO Request Packet
   103                              <1> 
   104                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   105 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   106 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   107 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   108 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   109 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   114                              <1>     
   115                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   116 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc statusReqPkt   ;Status Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   129                              <1>      
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc openReqPkt ;Open Device Request Packet
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   135                              <1>      
   136                              <1> endstruc
   137                              <1> 
   138                              <1> struc closeReqPkt ;Close Device Request Packet
   139                              <1> 
   140                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   141                              <1>      
   142                              <1> endstruc
   143                              <1> 
   144                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   145                              <1> 
   146                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   147                              <1>      
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   153 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   154 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   155 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   156 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   157 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   162                              <1>     
   163                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   164                              <1> 
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   168                              <1>     
   169                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   170                              <1> 
   171                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214                              <1>     .dataarea:             ;Points to the start of the data area
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1>     .program:
   232                              <1> endstruc
   233                              <1> ;MCB equates
   234                              <1> mcbOwnerHole    equ -1  ;Owner = -1 => Memory hole
   235                              <1> mcbOwnerFree    equ 0   ;Owner =  0 => Free and available space
   236                              <1> mcbOwnerDOS     equ 8   ;Owner =  8 => Owned by DOS
   237                              <1> mcbMarkCtn      equ "M"
   238                              <1> mcbMarkEnd      equ "Z"
   239                              <1> 
   240                              <1> ;Owner = Para aligned address => Owning application PSP
   241                              <1> ;...To consider...
   242                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   243                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   244                              <1> ;------------------------------------------------------------------------;
   245                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   246                              <1> ; following order, thus allowing for return values to be placed in the 
   247                              <1> ; registers by accessing the caller register stack frame.
   248                              <1> ;------------------------------------------------------------------------;
   249                              <1> struc callerFrame
   250 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   251 00000008 ????????????????    <1>     .rbx    resq 1    
   252 00000010 ????????????????    <1>     .rcx    resq 1
   253 00000018 ????????????????    <1>     .rdx    resq 1
   254 00000020 ????????????????    <1>     .rsi    resq 1
   255 00000028 ????????????????    <1>     .rdi    resq 1
   256 00000030 ????????????????    <1>     .rbp    resq 1
   257 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   258 00000040 ????????????????    <1>     .r9     resq 1
   259                              <1> ;Pushed by Processor when invoked via Interrupt
   260 00000048 ????????????????    <1>     .rip    resq 1
   261 00000050 ????????????????    <1>     .cs     resq 1
   262 00000058 ????????????????    <1>     .flags  resq 1
   263                              <1> endstruc
   264                              <1> 
   265                              <1> %macro pushDOS 0
   266                              <1>     push r9
   267                              <1>     push r8
   268                              <1>     push rbp
   269                              <1>     push rdi
   270                              <1>     push rsi
   271                              <1>     push rdx
   272                              <1>     push rcx
   273                              <1>     push rbx
   274                              <1>     push rax
   275                              <1> %endmacro
   276                              <1> 
   277                              <1> %macro popDOS 0
   278                              <1>     pop rax
   279                              <1>     pop rbx
   280                              <1>     pop rcx
   281                              <1>     pop rdx
   282                              <1>     pop rsi
   283                              <1>     pop rdi
   284                              <1>     pop rbp
   285                              <1>     pop r8
   286                              <1>     pop r9
   287                              <1> %endmacro
   288                              <1> struc fcb
   289                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   290 00000000 ??                  <1>     .driveNum   resb 1
   291 00000001 ????????????????    <1>     .filename   resb 8
   292 00000009 ??????              <1>     .fileext    resb 3
   293 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   294                              <1> ;One block consists of 128 records, of size denoted in the below
   295 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   296 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   297 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   298 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   299 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   300 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   301 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   302 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   303 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   304                              <1>     ;If record size > 64, high byte is ignored.
   305                              <1>     ;Used for random read and write operations to find the right record
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc psp
   309 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   310 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   311 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   312 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   313 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   314 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   315 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   316 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   317 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   318 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   319 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   320 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   321 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   322                              <1> ;Extra handle arrays are grouped into a linked list
   323                              <1> ;The below are in the same place as in DOS
   324 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   325 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   326                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   327 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   328 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc clkStruc
   332 00000000 ????                <1>     .dateWord   resw 1
   333 00000002 ??                  <1>     .minutes    resb 1
   334 00000003 ??                  <1>     .hours      resb 1
   335 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   336 00000005 ??                  <1>     .seconds    resb 1
   337                              <1> endstruc
   338                              <1> 
   339                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   340                              <1> ;for a space of 64Gb
   341                              <1> dosAPTsize  equ 60*4096
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG true
    16                              <1> %define DPBINFO true
    17                              <1> %define REGS true
    18                              <1> 
    19                              <1> ;Use this space as the debug stack
    20                              <1> %define debStackTop 80000h
     9                                  Segment .text align=1   ;Init code
    10                                  %include "./Source/Sysinit/sysInit.asm"
    11                              <1> ; We arrive here with the following values in the registers.
    12                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    13                              <1> ; dx  = Int 33h boot device number
    14                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    15                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    16 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    17 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    17 0000000B 909090909090909090- <1>
    17 00000014 909090909090909090- <1>
    17 0000001D 909090909090909090- <1>
    17 00000026 909090909090909090- <1>
    17 0000002F 909090909090909090- <1>
    17 00000038 909090909090909090- <1>
    17 00000041 909090909090909090- <1>
    17 0000004A 909090909090909090- <1>
    17 00000053 909090909090909090- <1>
    17 0000005C 909090909090909090- <1>
    17 00000065 909090909090909090- <1>
    17 0000006E 909090909090909090- <1>
    17 00000077 909090909090909090- <1>
    17 00000080 909090909090909090- <1>
    17 00000089 909090909090909090- <1>
    17 00000092 909090909090909090- <1>
    17 0000009B 909090909090909090- <1>
    17 000000A4 909090909090909090- <1>
    17 000000AD 909090909090909090- <1>
    17 000000B6 909090909090909090- <1>
    17 000000BF 909090909090909090- <1>
    17 000000C8 909090909090909090- <1>
    17 000000D1 909090909090909090- <1>
    17 000000DA 909090909090909090- <1>
    17 000000E3 909090909090909090- <1>
    17 000000EC 909090909090909090- <1>
    17 000000F5 909090909090909090- <1>
    17 000000FE 9090                <1>
    18                              <1> ;First move the alignment of the DOSSEG to 4Kb
    19 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    20 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    21 00000106 0F32                <1>     rdmsr
    22 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    23 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    24 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    25 00000110 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    26 00000113 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    27 0000011A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    28 00000121 89F8                <1>     mov eax, edi
    29 00000123 4889FA              <1>     mov rdx, rdi
    30 00000126 48C1EA20            <1>     shr rdx, 20h
    31 0000012A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    32 0000012C 5A                  <1>     pop rdx
    33                              <1> ;------------------------------------------------;
    34                              <1> ;              Connect Debugger                  ;
    35                              <1> ;------------------------------------------------;
    36                              <1> %if DEBUG
    37                              <1> ;Only connect if in debug mode
    38 0000012D B801C50000          <1>     mov eax, 0C501h ;Connect debugger
    39 00000132 CD35                <1>     int 35h
    40                              <1> %endif
    41                              <1> ;------------------------------------------------;
    42                              <1> ;           Sanitise the data area               ;
    43                              <1> ;------------------------------------------------;
    44 00000134 B9[ECD30300]        <1>     mov ecx, dSegLen
    45 00000139 30C0                <1>     xor al, al
    46 0000013B 57                  <1>     push rdi    ;Temp save rdi on the stack
    47 0000013C F3AA                <1>     rep stosb
    48 0000013E 5F                  <1>     pop rdi
    49                              <1> ;------------------------------------------------;
    50                              <1> ;          Start saving Basic DOS data           ;
    51                              <1> ;------------------------------------------------;
    52 0000013F 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    53                              <1> ;Copy DOS to its final resting place
    54 00000147 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    54 0000014C [00C00300]          <1>
    55 00000150 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    55 00000155 [08C00300]          <1>
    56 00000159 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    57 0000015C 4881C7[ECD30300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    58 00000163 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    59 0000016A B900100000          <1>     mov ecx, 1000h
    60 0000016F F348A5              <1>     rep movsq
    61                              <1> 
    62 00000172 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    63 00000174 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    64 00000178 664489C0            <1>     mov ax, r8w
    65 0000017C 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    66 00000184 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    67 0000018C 64C60425[B2C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    67 00000194 05                  <1>
    68 00000195 64C60425[13C00300]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    68 0000019D 00                  <1>
    69                              <1>     ;If no detected Int 33h devices, halt 
    70 0000019E 49C1E810            <1>     shr r8, 2*8
    71 000001A2 4584C0              <1>     test r8b, r8b
    72 000001A5 0F84230B0000        <1>     jz errorInit
    73                              <1> ;------------------------------------------------;
    74                              <1> ;          Add additional page tables            ;
    75                              <1> ;------------------------------------------------;
    76                              <1> ;This will allow for up to 64Gb of addressible space
    77 000001AB 4889EF              <1>     mov rdi, rbp
    78                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    79 000001AE B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    80 000001B3 57                  <1>     push rdi
    81 000001B4 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    81 000001BD 00                  <1>
    82                              <1> pdtLoop:
    83 000001BE 48AB                <1>     stosq
    84 000001C0 480500002000        <1>     add rax, 200000h
    85 000001C6 FFC9                <1>     dec ecx
    86 000001C8 75F4                <1>     jnz pdtLoop
    87 000001CA 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    88                              <1> ;Now we add every 4kb page to the page directory pointer table
    89                              <1> ;15 4kb pages to consider
    90 000001CB 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    91 000001CE 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    92 000001D1 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    93 000001D8 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    94 000001DF B93C000000          <1>     mov ecx, 60
    95 000001E4 480D03000000        <1>     or rax, 3h      ;present and r/w
    96                              <1> pdptLoop:
    97 000001EA 48AB                <1>     stosq
    98 000001EC 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
    99 000001F2 FFC9                <1>     dec ecx
   100 000001F4 75F4                <1>     jnz pdptLoop
   101 000001F6 0F20DF              <1>     mov rdi, cr3
   102 000001F9 0F22DF              <1>     mov cr3, rdi
   103                              <1> 
   104                              <1> ;------------------------------------------------;
   105                              <1> ;                   MCB inits                    ;
   106                              <1> ;------------------------------------------------;
   107                              <1> mcbInit:
   108 000001FC B820E80000          <1>     mov eax, 0E820h
   109 00000201 CD35                <1>     int 35h
   110                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   111 00000203 E8F9000000          <1>     call .mcbFindAddress
   112 00000208 7349                <1>     jnc .mcbi1  ;If found, proceed
   113                              <1>     ;Here, we try use E801h
   114 0000020A B801E80000          <1>     mov eax, 0E801h
   115 0000020F CD35                <1>     int 35h
   116 00000211 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   117 00000214 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   118 00000217 85C0                <1>     test eax, eax
   119 00000219 741B                <1>     jz .worst
   120 0000021B C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   121 0000021E C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   122 00000221 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   123 00000229 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx
   124 00000231 E918010000          <1>     jmp mcbBuild
   125                              <1> .worst:
   126                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   127 00000236 B800002000          <1>     mov eax, 200000h
   128 0000023B 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   128 00000240 [08C00300]          <1>
   129 00000244 29D8                <1>     sub eax, ebx
   130 00000246 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   131 0000024E E9FB000000          <1>     jmp mcbBuild 
   132                              <1> .mcbi1:
   133 00000253 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   134 00000256 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   134 0000025F 00                  <1>
   135 00000260 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   136 00000264 0F85B7000000        <1>     jne .mcbFail
   137 0000026A 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   138                              <1>     ;PCI hole always exists so this value will always be a dword
   139 0000026E 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   140 00000276 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   141 00000279 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   142 0000027C 4881FB00000001      <1>     cmp rbx, 1000000h  
   143 00000283 773F                <1>     ja .skipISA
   144                              <1> ;Here we deal with ISA hole issues
   145 00000285 B820E80000          <1>     mov eax, 0E820h
   146 0000028A CD35                <1>     int 35h
   147 0000028C 48B800000001000000- <1>     mov rax, 1000000h
   147 00000295 00                  <1>
   148 00000296 E866000000          <1>     call .mcbFindAddress
   149 0000029B 0F82AD000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   150 000002A1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   150 000002AA 00                  <1>
   151 000002AB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   152 000002AF 0F8599000000        <1>     jne mcbBuild  
   153 000002B5 488B18              <1>     mov rbx, qword [rax]    ;Get 16Mb value in rbx
   154 000002B8 48035808            <1>     add rbx, qword [rax + 8]    ;Get the domain size in rbx
   155 000002BC 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   156                              <1> .skipISA:
   157 000002C4 B820E80000          <1>     mov eax, 0E820h
   158 000002C9 CD35                <1>     int 35h
   159 000002CB 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   159 000002D4 00                  <1>
   160 000002D5 E827000000          <1>     call .mcbFindAddress
   161 000002DA 7272                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   162 000002DC 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   162 000002E5 00                  <1>
   163 000002E6 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   164 000002EA 7562                <1>     jne mcbBuild   
   165 000002EC 488B18              <1>     mov rbx, qword [rax]    ;Get 4Gb value in rbx
   166 000002EF 48035808            <1>     add rbx, qword [rax + 8]    ;Get the domain size in rbx
   167 000002F3 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   167 000002F8 [1CC00300]          <1>
   168 000002FC E94D000000          <1>     jmp mcbBuild
   169                              <1> .mcbFindAddress:
   170                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   171                              <1> ;Entry: rax = Address of arena to search for
   172                              <1> ;       rsi = Pointer to memory map
   173                              <1> ;       ecx = Number of 24 byte entries
   174                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   175                              <1> ;       CF=CY : value in rax not found
   176 00000301 56                  <1>     push rsi
   177 00000302 51                  <1>     push rcx
   178 00000303 50                  <1>     push rax
   179                              <1> .mfa0:
   180 00000304 483B06              <1>     cmp rax, qword [rsi]
   181 00000307 7410                <1>     je .mcbAddressFound
   182 00000309 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   183 00000310 FFC9                <1>     dec ecx
   184 00000312 79F0                <1>     jns .mfa0
   185                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   186 00000314 58                  <1>     pop rax
   187 00000315 59                  <1>     pop rcx
   188 00000316 5E                  <1>     pop rsi
   189 00000317 F9                  <1>     stc
   190 00000318 C3                  <1>     ret
   191                              <1> .mcbAddressFound:
   192 00000319 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   193 0000031C 59                  <1>     pop rcx ;Pop old rax value off
   194 0000031D 59                  <1>     pop rcx
   195 0000031E 5E                  <1>     pop rsi
   196 0000031F F8                  <1>     clc
   197 00000320 C3                  <1>     ret
   198                              <1> .mcbFail:
   199 00000321 488D2D0C000000      <1>     lea rbp, .mcbFailmsg
   200 00000328 B804130000          <1>     mov eax, 1304h
   201 0000032D CD30                <1>     int 30h
   202 0000032F E99A090000          <1>     jmp errorInit
   203 00000334 4D656D6F727920416C- <1> .mcbFailmsg: db "Memory Allocation Error",0Ah,0Dh,0
   203 0000033D 6C6F636174696F6E20- <1>
   203 00000346 4572726F720A0D00    <1>
   204                              <1> mcbBuild:
   205                              <1> ;Actually build the MCB chain here
   206                              <1> ;Start by computing the difference between userbase and DOS area
   207                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   208 0000034E 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   208 00000353 [08C00300]          <1>
   209 00000357 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   210 0000035E 56                  <1>     push rsi    ;Save ptr
   211 0000035F 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   212 00000366 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   213 00000369 64293425[14C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   214 00000371 5B                  <1>     pop rbx
   215 00000372 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   216 00000375 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   217 0000037D 648B3425[14C00300]  <1>     mov esi, dword fs:[loProtMem]
   218 00000385 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   219 00000388 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   220 0000038B 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   220 00000390 [78C00300]          <1>
   221                              <1> 
   222                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   223 00000394 64813C25[18C00300]- <1>     cmp dword fs:[hiProtMem], 0
   223 0000039C 00000000            <1>
   224 000003A0 746E                <1>     jz .skipISA
   225                              <1>     ;Here if an ISA hole exists, place a MCB around it
   226 000003A2 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   227                              <1>     ;Remove one MCB worth of space from alloc
   228 000003A9 31C9                <1>     xor ecx, ecx
   229 000003AB 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   230 000003AE 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   231 000003B4 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   232 000003B7 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   233 000003BA 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   234 000003BD C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   235 000003C0 48C74301FFFFFFFF    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   236 000003C8 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   236 000003D1 00                  <1>
   237 000003D2 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   238 000003D5 480510000000        <1>     add rax, mcb_size
   239 000003DB 4829C1              <1>     sub rcx, rax    ;Take their difference
   240 000003DE C1E904              <1>     shr ecx, 4
   241 000003E1 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   242 000003E4 C1E104              <1>     shl ecx, 4  ;Get bytes again
   243 000003E7 4881C310000000      <1>     add rbx, mcb_size
   244 000003EE 4801CB              <1>     add rbx, rcx
   245                              <1>     ;RBX should now be at 16Mb
   246 000003F1 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   247 000003F4 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   248 000003FC 648B0C25[18C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   249 00000404 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   250 00000407 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   251 0000040D 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   252                              <1> .skipISA:
   253                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   254                              <1>     ;rbx points to a block with "Z" marker
   255 00000410 64813C25[1CC00300]- <1>     cmp dword fs:[longMem], 0
   255 00000418 00000000            <1>
   256 0000041C 746E                <1>     jz .exit
   257                              <1>     ;Add PCI hole MCB
   258 0000041E 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   259                              <1>     ;Remove one MCB worth of space from alloc
   260 00000425 31C9                <1>     xor ecx, ecx
   261 00000427 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   262 0000042A 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   263 00000430 C1E104              <1>     shl ecx, 4  ;Get bytes
   264 00000433 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   265 00000436 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   266 00000439 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   267 0000043C 48C74301FFFFFFFF    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   268 00000444 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   268 0000044D 00                  <1>
   269 0000044E 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   270 00000451 480510000000        <1>     add rax, mcb_size
   271 00000457 4829C1              <1>     sub rcx, rax    ;Take their difference
   272 0000045A C1E904              <1>     shr ecx, 4
   273 0000045D 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   274 00000460 C1E104              <1>     shl ecx, 4  ;Get bytes again
   275 00000463 4881C310000000      <1>     add rbx, mcb_size
   276 0000046A 4801CB              <1>     add rbx, rcx
   277                              <1>     ;RBX should now be at 4Gb
   278 0000046D C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   279 00000470 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   280 00000478 648B0C25[1CC00300]  <1>     mov ecx, dword fs:[longMem]
   281 00000480 C1E904              <1>     shr ecx, 4
   282 00000483 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   283 00000489 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   284                              <1> .exit:
   285                              <1> ;------------------------------------------------;
   286                              <1> ;          Kernel inits and adjustments          ;
   287                              <1> ;------------------------------------------------;
   288                              <1> ;Adjust Int 41h address table
   289                              <1> adjInt41h:
   290 0000048C B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
   291 00000491 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
   291 00000493 [1E17000000000000]  <1>
   292 0000049B 488D5C1D00          <1>     lea rbx, qword [rbp + rbx]    ;Point to the start of the relocated table 
   293                              <1> .ai41h:
   294 000004A0 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
   295 000004A3 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
   296 000004AA FFC9                <1>     dec ecx
   297 000004AC 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
   298                              <1> 
   299                              <1> ;Adjust Interrupt Entries Int 40h-49h
   300                              <1> adjInts:
   301 000004AE B340                <1>     mov bl, 40h
   302 000004B0 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   303 000004B5 CD35                <1>     int 35h
   304 000004B7 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   305 000004BC 488D3D6F080000      <1>     lea rdi, intData
   306 000004C3 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   307                              <1> .ai0:
   308 000004C5 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   309 000004CA 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   310 000004CD 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   311                              <1> .ai1:
   312 000004D0 CD35                <1>     int 35h
   313 000004D2 4881C708000000      <1>     add rdi, 8
   314 000004D9 FFC1                <1>     inc ecx
   315 000004DB 81F94A000000        <1>     cmp ecx, 4Ah
   316 000004E1 75E2                <1>     jne .ai0
   317                              <1> 
   318                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   319                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   320                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   321                              <1>     %if DEBUG
   322                              <1> debugPopUpMsg:
   323 000004E3 53                  <1>     push rbx
   324 000004E4 55                  <1>     push rbp
   325 000004E5 51                  <1>     push rcx
   326 000004E6 52                  <1>     push rdx
   327 000004E7 B935000000          <1>     mov ecx, 53 ;A large number of lines
   328 000004EC 31D2                <1>     xor edx, edx    ;COM 1
   329                              <1> .cls:
   330 000004EE B80A010000          <1>     mov eax, 010Ah ;Transmit Line feed
   331 000004F3 CD34                <1>     int 34h
   332 000004F5 FFC9                <1>     dec ecx
   333 000004F7 75F5                <1>     jnz .cls
   334 000004F9 488D9D[EE000000]    <1>     lea rbx, qword [debPrintNullString + rbp]
   335 00000500 488D2D04000000      <1>     lea rbp, .msg
   336 00000507 FFD3                <1>     call rbx
   337 00000509 EB39                <1>     jmp short .exit
   338 0000050B 0A0D5343502F444F53- <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   338 00000514 204B65726E656C2044- <1>
   338 0000051D 656275676765722043- <1>
   338 00000526 6F6E6E656374656420- <1>
   338 0000052F 6F6E20434F4D313A32- <1>
   338 00000538 3430302C6E2C382C31- <1>
   338 00000541 0A0D00              <1>
   339                              <1> .exit:
   340 00000544 5A                  <1>     pop rdx
   341 00000545 59                  <1>     pop rcx
   342 00000546 5D                  <1>     pop rbp
   343 00000547 5B                  <1>     pop rbx
   344                              <1>     %endif
   345                              <1> 
   346                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   347 00000548 488D157F070000      <1>     lea rdx, errorInit ;Get segment start address
   348 0000054F B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   349 00000554 CD41                <1>     int 41h
   350 00000556 488D1571070000      <1>     lea rdx, errorInit ;Get segment start address
   351 0000055D B844250000          <1>     mov eax, 2544h
   352 00000562 CD41                <1>     int 41h
   353                              <1> ;------------------------------------------------;
   354                              <1> ;          Driver Adjustments and inits          ;
   355                              <1> ;------------------------------------------------;
   356                              <1> ;Modify the pointers in nData before putting them in the data area
   357 00000564 48012D17080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   358 0000056B 48012D1A080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   359 00000572 48012D1B080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   360                              <1> ;Copy the Null driver to its location in Sysvars
   361 00000579 B922000000          <1>     mov ecx, drvHdr_size
   362 0000057E 488D35FD070000      <1>     lea rsi, qword [nData]
   363 00000585 488DBD[BEC00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   364 0000058C F3A4                <1>     rep movsb   
   365                              <1> 
   366                              <1> ;Adjust the addresses in the other driver headers 
   367 0000058E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   367 00000590 [011D000000000000]  <1>
   368 00000598 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   369 0000059D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   370                              <1> adjDrivers:
   371 000005A1 E815070000          <1>     call adjustDrvHdr
   372 000005A6 E2F9                <1>     loop adjDrivers
   373                              <1> 
   374                              <1> ;Open NUL
   375 000005A8 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr]
   376 000005AF C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   377 000005B2 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   378 000005B6 FF95[C8C00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   379 000005BC FF95[D0C00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   380                              <1> ;Open CON
   381                              <1> conInit:    ;Rather than keeping this resident... do it here
   382                              <1> .ci0:
   383 000005C2 B401                <1>     mov ah, 01      ;Get buffer status
   384 000005C4 CD36                <1>     int 36h
   385 000005C6 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   386 000005C8 30E4                <1>     xor ah, ah
   387 000005CA CD36                <1>     int 36h ;Read key to flush from buffer
   388 000005CC EBF4                <1>     jmp short .ci0
   389                              <1> .ci1:
   390 000005CE B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   391 000005D3 CD30                <1>     int 30h
   392 000005D5 B402                <1>     mov ah, 02h
   393 000005D7 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   394 000005D9 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   395 000005DB CD30                <1>     int 30h
   396 000005DD B707                <1>     mov bh, 07h     ;Grey/Black attribs
   397 000005DF B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   398 000005E4 CD30                <1>     int 30h
   399                              <1> 
   400                              <1>     ;Save ptr to ConHdr in Sysvars
   401 000005E6 488D85[011D0000]    <1>     lea rax, qword [rbp + conHdr]
   402 000005ED 6448890425-         <1>     mov qword fs:[conPtr], rax
   402 000005F2 [98C00300]          <1>
   403                              <1> 
   404                              <1>     ;Save ptr to ClkHdr in Sysvars
   405 000005F6 488D85[671D0000]    <1>     lea rax, qword [rbp + clkHdr]
   406 000005FD 6448890425-         <1>     mov qword fs:[clockPtr], rax
   406 00000602 [90C00300]          <1>
   407                              <1> 
   408                              <1> ;------------------------------------------------;
   409                              <1> ;         Link DOS to temporary Buffer           ;
   410                              <1> ;------------------------------------------------;
   411                              <1> tempBufferInit:
   412 00000606 488DBD[AA020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   413 0000060D 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   413 00000612 [A2C00300]          <1>
   414 00000616 31C0                <1>     xor eax, eax
   415 00000618 48FFC8              <1>     dec rax
   416 0000061B 48AB                <1>     stosq   ;.nextBufPTr, end of list
   417 0000061D AA                  <1>     stosb   ;.driveNumber, Free entry
   418 0000061E 48FFC0              <1>     inc rax
   419 00000621 AA                  <1>     stosb   ;.bufferFlags, No flags
   420                              <1> ;------------------------------------------------;
   421                              <1> ;         Init msd driver, create DPB            ;
   422                              <1> ;------------------------------------------------;
   423                              <1> storageInits:
   424                              <1> ;First save dpb pointer in sysvars
   425 00000622 488D9D[4B010000]    <1>     lea rbx, qword [rbp + firstDPB]
   426 00000629 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   426 0000062E [80C00300]          <1>
   427                              <1> ;Open Mass Storage
   428                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   429                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   430                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   431                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   432                              <1>     ;mov al, byte fs:[numLogDrv]
   433                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   434                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   435                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   436                              <1>     ;Check if it returned OK first!
   437                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   438                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   439                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   440                              <1>     ;mov byte fs:[numLogDrv], al
   441                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   442                              <1> 
   443                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   444 00000632 E86D070000          <1>     call diskInit
   445 00000637 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   446 0000063A 648A0425[13C00300]  <1>     mov al, byte fs:[numLogDrv]
   447 00000642 488D95[97260000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   448 00000649 30C9                <1>     xor cl, cl  ;Clear counter
   449 0000064B 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   449 00000650 [80C00300]          <1>
   450                              <1> .si0:   
   451 00000654 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   452 00000657 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   453 00000659 CD41                <1>     int 41h
   454                              <1> ;Add other data to DPB
   455 0000065B 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   456 0000065E 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   457 00000661 50                  <1>     push rax
   458 00000662 488D87[891D0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   459 00000669 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   460 0000066D 58                  <1>     pop rax
   461 0000066E FEC1                <1>     inc cl
   462 00000670 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   463 00000672 7416                <1>     je .si1
   464 00000674 50                  <1>     push rax
   465 00000675 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   466 00000679 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   467 0000067D 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   468 00000680 58                  <1>     pop rax
   469 00000681 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   470 00000688 EBCA                <1>     jmp short .si0
   471                              <1> .si1:
   472                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   473 0000068A 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   474 00000692 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   475                              <1> ;------------------------------------------------;
   476                              <1> ;          Find largest sector size              ;
   477                              <1> ;------------------------------------------------;
   478                              <1> sectorSizeSearch:
   479                              <1> ;Done by reading BPB's for each drive
   480 00000695 488D9D[97260000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   481                              <1>     
   482                              <1>     ;Go thru each block individually
   483 0000069C 31C0                <1>     xor eax, eax
   484 0000069E 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   485                              <1> .findLargest:
   486 000006A1 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   487 000006A5 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   488 000006AA 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   489 000006B1 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   490 000006B4 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   491 000006B7 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   492 000006B9 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   492 000006BE [A0C00300]          <1>
   493                              <1>     
   494                              <1> ;------------------------------------------------;
   495                              <1> ;                 Temp CDS inits                 ;
   496                              <1> ;------------------------------------------------;
   497                              <1> tempCDS:
   498                              <1> ;Build a temporary CDS for Drive A to use it for booting
   499 000006C2 488DBD[4F020000]    <1>     lea rdi, qword [rbp + initCDS]
   500 000006C9 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   500 000006CE [AAC00300]          <1>
   501 000006D2 B943000000          <1>     mov ecx, 67 ;Buffer length
   502 000006D7 31C0                <1>     xor eax, eax
   503 000006D9 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   504 000006DC F3AA                <1>     rep stosb   ;Zero out the path string
   505 000006DE 4889DF              <1>     mov rdi, rbx
   506 000006E1 B041                <1>     mov al, "A"
   507 000006E3 AA                  <1>     stosb
   508 000006E4 B03A                <1>     mov al, ":"
   509 000006E6 AA                  <1>     stosb
   510 000006E7 B05C                <1>     mov al, "\"
   511 000006E9 AA                  <1>     stosb
   512 000006EA 4889DF              <1>     mov rdi, rbx
   513 000006ED 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   514 000006F3 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   514 000006F8 [80C00300]          <1>
   515 000006FC 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   516 00000700 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   517                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   518                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   519                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   520 00000706 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   521                              <1> ;------------------------------------------------;
   522                              <1> ;     Set up general PSP areas and DOS vars      ;
   523                              <1> ;------------------------------------------------;
   524                              <1>     ;Additional DOS Vars init
   525 00000709 31C0                <1>     xor eax, eax
   526 0000070B 64880425[0AC10300]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   527 00000713 64880425[0BC10300]  <1>     mov byte fs:[breakFlag], al  ;Break off
   528 0000071B 64880425[0CC10300]  <1>     mov byte fs:[verifyFlag], al ;Write only
   529 00000723 64880425[15C10300]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   530 0000072B 64880425[E0C00300]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   531 00000733 64880425[E1C00300]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   532 0000073B 64C60425[E2C00300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   532 00000743 FF                  <1>
   533 00000744 6466890425-         <1>     mov word fs:[lastRetCode], ax   ;Last return code is 0, no error
   533 00000749 [08C10300]          <1>
   534                              <1> 
   535                              <1>     ;SYSVARS PSP Init
   536 0000074D 488D1DACF8FFFF      <1>     lea rbx, qword [tempPSP]
   537 00000754 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   537 00000759 [F0C00300]          <1>
   538 0000075D 53                  <1>     push rbx
   539 0000075E 4881C380000000      <1>     add rbx, psp.dta
   540 00000765 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   540 0000076A [E8C00300]          <1>
   541 0000076E 5B                  <1>     pop rbx
   542 0000076F 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   543 00000774 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   544 0000077B 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   545 0000077F 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   546 00000783 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   547 00000787 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   548 0000078B 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   548 00000794 00                  <1>
   549 00000795 48AB                <1>     stosq   ;8 bytes
   550 00000797 31C0                <1>     xor eax, eax
   551 00000799 48AB                <1>     stosq   ;16 bytes
   552 0000079B AB                  <1>     stosd   ;20 bytes
   553 0000079C 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   554 000007A4 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   555 000007A8 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   556 000007AC 4889DA              <1>     mov rdx, rbx
   557 000007AF B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   558 000007B4 CD41                <1>     int 41h
   559 000007B6 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   560 000007BA B843350000          <1>     mov eax, 3543h
   561 000007BF CD41                <1>     int 41h
   562 000007C1 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   563 000007C5 B844350000          <1>     mov eax, 3544h
   564 000007CA CD41                <1>     int 41h
   565 000007CC 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   566                              <1> 
   567 000007D0 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   568 000007D5 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   569 000007D9 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   570                              <1> ;------------------------------------------------;
   571                              <1> ;          Default File Handle Creation          ;
   572                              <1> ;------------------------------------------------;
   573                              <1> defaultFileHandles:
   574                              <1> ;Fill in the default file table entries
   575 000007DB 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   576 000007E2 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   577 000007E9 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   578 000007EF 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   578 000007F4 [88C00300]          <1>
   579                              <1> ;GOTO FIRST FILE 
   580 000007F8 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   581                              <1> ;Write CON
   582 000007FF 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   583 00000804 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   584 0000080A C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   585 0000080E C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   586                              <1>     ;No EOF when reading from the device
   587 00000812 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   587 00000817 [98C00300]          <1>
   588 0000081B 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   589                              <1>     ;Ignore disk related fields and Date/Time of open
   590 0000081F 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   591 00000823 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   592                              <1>     ;11 chars in 8.3 name
   593 0000082A 48A5                <1>     movsq   ;8 chars
   594 0000082C 66A5                <1>     movsw   ;10 chars
   595 0000082E A4                  <1>     movsb   ;11 chars
   596 0000082F 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   596 00000834 [F0C00300]          <1>
   597 00000838 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   598                              <1> ;GOTO NEXT ENTRY
   599 0000083C 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   600                              <1> ;Write AUX
   601 00000843 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   602 00000848 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   603 0000084E C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   604 00000852 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   605                              <1>     ;No EOF when reading from the device
   606 00000856 488B85[231D0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   607 0000085D 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   608                              <1>     ;Ignore disk related fields and Date/Time of open
   609 00000861 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   610 00000865 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   611                              <1>     ;11 chars in 8.3 name
   612 0000086C 48A5                <1>     movsq   ;8 chars
   613 0000086E 66A5                <1>     movsw   ;10 chars
   614 00000870 A4                  <1>     movsb   ;11 chars
   615 00000871 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   615 00000876 [F0C00300]          <1>
   616 0000087A 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   617                              <1> ;GOTO NEXT ENTRY
   618 0000087E 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   619                              <1> ;Write PRN
   620 00000885 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   621 0000088A 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   622 00000890 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   623 00000894 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   624                              <1>     ;Want EOF when reading from to the device
   625 00000898 488B85[451D0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   626 0000089F 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   627                              <1>     ;Ignore disk related fields and Date/Time of open
   628 000008A3 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   629 000008A7 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   630                              <1>     ;11 chars in 8.3 name
   631 000008AE 48A5                <1>     movsq   ;8 chars
   632 000008B0 66A5                <1>     movsw   ;10 chars
   633 000008B2 A4                  <1>     movsb   ;11 chars
   634 000008B3 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   634 000008B8 [F0C00300]          <1>
   635 000008BC 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   636 000008C0 EB21                <1>     jmp short .dfhExit
   637 000008C2 434F4E202020202020- <1> .dfhCon db "CON        "
   637 000008CB 2020                <1>
   638 000008CD 415558202020202020- <1> .dfhAux db "AUX        "
   638 000008D6 2020                <1>
   639 000008D8 50524E202020202020- <1> .dfhPrn db "PRN        "
   639 000008E1 2020                <1>
   640                              <1> .dfhExit:
   641                              <1> ;------------------------------------------------;
   642                              <1> ;               Load CONFIG.SYS                  ;
   643                              <1> ;------------------------------------------------;
   644                              <1> ;------------------------------------------------;
   645                              <1> ;              Process CONFIG.SYS                ;
   646                              <1> ;------------------------------------------------;
   647                              <1> ;------------------------------------------------;
   648                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   649                              <1> ;------------------------------------------------;
   650                              <1> ;------------------------------------------------;
   651                              <1> ;   Setup Final Data Areas With Overrides from   ;
   652                              <1> ;                  CONFIG.SYS                    ;
   653                              <1> ;------------------------------------------------;
   654                              <1> ;------------------------------------------------;
   655                              <1> ;           Load Command interpreter             ;
   656                              <1> ;------------------------------------------------;
   657 000008E3 488D15F5030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   658 000008EA B409                <1>     mov ah, 09h
   659 000008EC CD41                <1>     int 41h
   660                              <1>     %if true
   661                              <1> debugFinal:
   662                              <1>     ;Print system state
   663 000008EE 55                  <1>     push rbp    ;Only rbp really matters here
   664 000008EF 4989E8              <1>     mov r8, rbp
   665                              <1> 
   666 000008F2 488D2DD0020000      <1>     lea rbp, .msg2
   667 000008F9 4D8D88[EE000000]    <1>     lea r9, qword [r8 + debPrintNullString]
   668 00000900 41FFD1              <1>     call r9
   669                              <1> 
   670 00000903 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   671 0000090A 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   671 0000090F [08C00300]          <1>
   672                              <1> 
   673 00000913 4D8D88[29040000]    <1>     lea r9, qword [r8 + overlayQword]
   674 0000091A 41FFD1              <1>     call r9
   675                              <1> 
   676 0000091D 4881C31B000000      <1>     add rbx, 19+8
   677 00000924 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   677 00000929 [00C00300]          <1>
   678 0000092D 41FFD1              <1>     call r9
   679                              <1> 
   680 00000930 4881C31B000000      <1>     add rbx, 19+8
   681 00000937 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   681 0000093C [78C00300]          <1>
   682 00000940 41FFD1              <1>     call r9
   683                              <1> 
   684 00000943 4881C31C000000      <1>     add rbx, 20+8
   685 0000094A 4D8D88[E6030000]    <1>     lea r9, qword [r8 + overlayDword]
   686 00000951 648B0425[14C00300]  <1>     mov eax, dword fs:[loProtMem]
   687 00000959 41FFD1              <1>     call r9
   688                              <1> 
   689 0000095C 4881C312000000      <1>     add rbx, 10+8
   690 00000963 648B0425[18C00300]  <1>     mov eax, dword fs:[hiProtMem]
   691 0000096B 41FFD1              <1>     call r9
   692                              <1> 
   693 0000096E 4881C312000000      <1>     add rbx, 10+8
   694 00000975 64488B0425-         <1>     mov rax, qword fs:[longMem]
   694 0000097A [1CC00300]          <1>
   695 0000097E 4D8D88[29040000]    <1>     lea r9, qword [r8 + overlayQword]
   696 00000985 41FFD1              <1>     call r9
   697                              <1> 
   698 00000988 4881C31B000000      <1>     add rbx, 19+8
   699 0000098F 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   699 00000994 [80C00300]          <1>
   700 00000998 41FFD1              <1>     call r9
   701                              <1> 
   702 0000099B 4881C31B000000      <1>     add rbx, 19+8
   703 000009A2 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   703 000009A7 [88C00300]          <1>
   704 000009AB 41FFD1              <1>     call r9
   705                              <1> 
   706 000009AE 4881C31B000000      <1>     add rbx, 19+8
   707 000009B5 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   707 000009BA [A2C00300]          <1>
   708 000009BE 41FFD1              <1>     call r9
   709                              <1> 
   710 000009C1 4881C31B000000      <1>     add rbx, 19+8
   711 000009C8 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   711 000009CD [AAC00300]          <1>
   712 000009D1 41FFD1              <1>     call r9
   713                              <1> 
   714 000009D4 4D8D88[74030000]    <1>     lea r9, qword [r8 + overlayByte]
   715                              <1> 
   716 000009DB 4881C32C000000      <1>     add rbx, 25+19
   717 000009E2 64480FB60425-       <1>     movzx rax, byte fs:[numLogDrv]
   717 000009E8 [13C00300]          <1>
   718 000009EC 41FFD1              <1>     call r9
   719                              <1> 
   720 000009EF 4881C31E000000      <1>     add rbx, 30
   721 000009F6 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   721 000009FC [12C00300]          <1>
   722 00000A00 41FFD1              <1>     call r9
   723                              <1> 
   724 00000A03 4881C31E000000      <1>     add rbx, 30
   725 00000A0A 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   725 00000A10 [11C00300]          <1>
   726 00000A14 41FFD1              <1>     call r9
   727                              <1> 
   728 00000A17 4881C310000000      <1>     add rbx, 16
   729 00000A1E 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   729 00000A24 [10C00300]          <1>
   730 00000A28 0441                <1>     add al, "A"
   731 00000A2A 8803                <1>     mov byte [rbx], al
   732                              <1> 
   733 00000A2C 488D2D10000000      <1>     lea rbp, .msg
   734 00000A33 4D8D88[EE000000]    <1>     lea r9, qword [r8 + debPrintNullString]
   735 00000A3A 41FFD1              <1>     call r9
   736 00000A3D 5D                  <1>     pop rbp
   737 00000A3E E99E010000          <1>     jmp l1
   738 00000A43 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   738 00000A4C 206261736520464646- <1>
   738 00000A55 464646464646464646- <1>
   738 00000A5E 46464646680A0D      <1>
   739 00000A65 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   739 00000A6E 464646464646464646- <1>
   739 00000A77 464646464646680A0D  <1>
   740 00000A80 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   740 00000A89 464646464646464646- <1>
   740 00000A92 46464646464668200A- <1>
   740 00000A9B 0D                  <1>
   741 00000A9C 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   741 00000AA5 464646464646466820  <1>
   742 00000AAE 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   742 00000AB7 464646464646466820  <1>
   743 00000AC0 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   743 00000AC9 464646464646464646- <1>
   743 00000AD2 464646464646680A0D  <1>
   744 00000ADB 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   744 00000AE4 464646464646464646- <1>
   744 00000AED 464646464646680A0D  <1>
   745 00000AF6 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   745 00000AFF 464646464646464646- <1>
   745 00000B08 464646464646680A0D  <1>
   746 00000B11 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   746 00000B1A 464646464646464646- <1>
   746 00000B23 464646464646680A0D  <1>
   747 00000B2C 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   747 00000B35 464646464646464646- <1>
   747 00000B3E 464646464646680A0D  <1>
   748 00000B47 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   748 00000B50 204C6F676963616C20- <1>
   748 00000B59 447269766573204646- <1>
   748 00000B62 680A0D              <1>
   749 00000B65 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   749 00000B6E 204669786564204472- <1>
   749 00000B77 697665732020204646- <1>
   749 00000B80 680A0D              <1>
   750 00000B83 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   750 00000B8C 2052656D6F7661626C- <1>
   750 00000B95 652044727673204646- <1>
   750 00000B9E 680A0D              <1>
   751 00000BA1 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   751 00000BAA 65205A3A0A0D        <1>
   752 00000BB0 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   752 00000BB9 4F4D4D414E442E434F- <1>
   752 00000BC2 4D2E2E2E0A0D00      <1>
   753 00000BC9 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   753 00000BD2 626F6F742073756D6D- <1>
   753 00000BDB 6172790A0D00        <1>
   754                              <1>     %endif
   755                              <1> l1:
   756 00000BE1 B401                <1>     mov ah, 01h  ;Write with echo
   757 00000BE3 CD41                <1>     int 41h
   758 00000BE5 3C00                <1>     cmp al, 0
   759 00000BE7 7402                <1>     je l2
   760 00000BE9 EBF6                <1>     jmp short l1
   761                              <1> l2:
   762 00000BEB B407                <1>     mov ah, 07h
   763 00000BED CD41                <1>     int 41h
   764 00000BEF 3C42                <1>     cmp al, 42h
   765 00000BF1 75EE                <1>     jne l1
   766                              <1> l3:
   767 00000BF3 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   767 00000BF8 [31C10300]0000      <1>
   768 00000BFE 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   769 00000C05 488D85[31C10300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   770 00000C0C C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   771 00000C0F C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   772 00000C13 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   773 00000C19 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   774 00000C1D C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   775 00000C24 FF95[711D0000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   776 00000C2A FF95[791D0000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   777                              <1> 
   778 00000C30 B403                <1>     mov ah, 03h
   779 00000C32 30FF                <1>     xor bh, bh
   780 00000C34 CD30                <1>     int 30h
   781 00000C36 30D2                <1>     xor dl, dl  ;0 column
   782 00000C38 B402                <1>     mov ah, 02h
   783 00000C3A CD30                <1>     int 30h
   784                              <1> 
   785 00000C3C 488D9D[31C10300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   786 00000C43 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   787 00000C47 E832000000          <1>     call .clkHexToBCD
   788 00000C4C B40E                <1>     mov ah, 0Eh
   789 00000C4E B03A                <1>     mov al, ":"
   790 00000C50 CD30                <1>     int 30h
   791 00000C52 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   792 00000C56 E823000000          <1>     call .clkHexToBCD
   793 00000C5B B40E                <1>     mov ah, 0Eh
   794 00000C5D B03A                <1>     mov al, ":"
   795 00000C5F CD30                <1>     int 30h
   796 00000C61 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   797 00000C65 E814000000          <1>     call .clkHexToBCD
   798 00000C6A B40E                <1>     mov ah, 0Eh
   799 00000C6C B02E                <1>     mov al, "."
   800 00000C6E CD30                <1>     int 30h
   801 00000C70 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   802 00000C74 E805000000          <1>     call .clkHexToBCD
   803 00000C79 E963FFFFFF          <1>     jmp l1
   804                              <1> .clkHexToBCD:
   805                              <1> ;Converts a Hex byte into two BCD digits
   806                              <1> ;Takes input in each nybble of al
   807 00000C7E 53                  <1>     push rbx
   808 00000C7F 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   808 00000C88 00                  <1>
   809 00000C89 31D2                <1>     xor edx, edx
   810 00000C8B 48F7F3              <1>     div rbx
   811 00000C8E 80C230              <1>     add dl, '0'
   812 00000C91 80FA39              <1>     cmp dl, '9'
   813 00000C94 7603                <1>     jbe .chtb0
   814 00000C96 80C207              <1>     add dl, 'A'-'0'-10
   815                              <1> .chtb0:
   816 00000C99 88D1                <1>     mov cl, dl    ;Save remainder byte
   817 00000C9B 31D2                <1>     xor edx, edx
   818 00000C9D 48F7F3              <1>     div rbx
   819 00000CA0 80C230              <1>     add dl, '0'
   820 00000CA3 80FA39              <1>     cmp dl, '9'
   821 00000CA6 7603                <1>     jbe .chtb1
   822 00000CA8 80C207              <1>     add dl, 'A'-'0'-10
   823                              <1> .chtb1:
   824 00000CAB 88D5                <1>     mov ch, dl    ;Save remainder byte
   825                              <1> 
   826 00000CAD 88E8                <1>     mov al, ch    ;Get most sig digit into al
   827 00000CAF B40E                <1>     mov ah, 0Eh
   828 00000CB1 CD30                <1>     int 30h
   829 00000CB3 88C8                <1>     mov al, cl    ;Get least sig digit into al
   830 00000CB5 B40E                <1>     mov ah, 0Eh
   831 00000CB7 CD30                <1>     int 30h
   832 00000CB9 5B                  <1>     pop rbx
   833 00000CBA C3                  <1>     ret
   834                              <1> ;--------------------------------
   835                              <1> ;       PROCS FOR SYSINIT       :
   836                              <1> ;--------------------------------
   837                              <1> adjustDrvHdr:
   838                              <1> ;Input: rsi = Effective address of driver in DOS segment
   839                              <1> ;       rbp = Ptr to the start of the DOS segment
   840                              <1> ;Output: rsi = EA of next header in DOS segment
   841 00000CBB 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   842 00000CBE 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   843 00000CC2 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   844 00000CC6 4881C622000000      <1>     add rsi, drvHdr_size
   845 00000CCD C3                  <1>     ret
   846                              <1> errorInit:
   847                              <1> ;If a critical error occurs during sysinit, fail through here
   848                              <1> ;Int 42h, 43h and 44h point here during sysinit
   849 00000CCE 488D2D20000000      <1>     lea rbp, hltmsg
   850 00000CD5 B804130000          <1>     mov eax, 1304h
   851 00000CDA CD30                <1>     int 30h
   852                              <1>     ;cli ;Clear interrupts
   853                              <1>     ;mov al, -1
   854                              <1>     ;mov dx, 0A1h    ;PIC2 data
   855                              <1>     ;out dx, al      ;Mask all lines
   856                              <1>     ;mov dx, 21h     ;PIC1 data
   857                              <1>     ;out dx, al      ;Mask all lines
   858                              <1> .ei0:
   859 00000CDC F4                  <1>     hlt
   860 00000CDD EBFD                <1>     jmp short .ei0
   861                              <1> ;--------------------------------
   862                              <1> ;       DATA FOR SYSINIT        :
   863                              <1> ;--------------------------------
   864 00000CDF 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   864 00000CE8 5343502F444F532E2E- <1>
   864 00000CF1 2E0A0D24            <1>
   865 00000CF5 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   865 00000CFE 7469616C6973696E67- <1>
   865 00000D07 20534350444F532E53- <1>
   865 00000D10 59532E205379737465- <1>
   865 00000D19 6D2068616C74696E67- <1>
   865 00000D22 2E2E2E00            <1>
   866 00000D26 434F4E00            <1> conName db "CON",0
   867 00000D2A 41555800            <1> auxName db "AUX",0
   868 00000D2E 50524E00            <1> prnName db "PRN",0
   869                              <1> intData:
   870 00000D32 [330C000000000000]  <1>     dq terminateProcess ;Int 40h
   871 00000D3A [B90D000000000000]  <1>     dq functionDispatch ;Int 41h
   872 00000D42 [CE0C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   873 00000D4A [350C000000000000]  <1>     dq ctrlCHandler     ;Int 43h, ignore any CTRL+C during init
   874 00000D52 [CE0C000000000000]  <1>     dq errorInit        ;Int 44h, If critical error in sysinit, halt system
   875 00000D5A [AE0C000000000000]  <1>     dq absDiskRead      ;Int 45h
   876 00000D62 [370C000000000000]  <1>     dq absDiskWrite     ;Int 46h
   877 00000D6A [AB0D000000000000]  <1>     dq terminateResident    ;Int 47h
   878 00000D72 [AB0D000000000000]  <1>     dq inDosHandler     ;Int 48h
   879 00000D7A [AD0D000000000000]  <1>     dq fastOutput       ;Int 49h
   880                              <1> nData:
   881 00000D82 [011D000000000000]  <1>     dq conHdr
   882 00000D8A 0480                <1>     dw 08004h
   883 00000D8C [A91E000000000000]  <1>     dq nulStrat
   884 00000D94 [AF1E000000000000]  <1>     dq nulIntr
   885 00000D9C 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   886                              <1> 
   887                              <1> diskInit:
   888                              <1>     ;We create a function to deal with BPB parsing etc
   889                              <1>     ;Start with the first primary partition on each hard disk (until max)
   890                              <1>     ;   They dont have to be bootable
   891                              <1>     ;Then go back and look for other partitions partitions. 
   892                              <1>     ;   Add each other primary or logical ptn (until max)
   893                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   894                              <1>     ;Use r8 as device counter
   895 00000DA4 488DBD[BF260000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   896 00000DAB 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   896 00000DB3 00                  <1>
   897 00000DB4 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   898 00000DBA 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   898 00000DC3 00                  <1>
   899 00000DC4 B280                <1>     mov dl, 80h ;Start with HDD 0
   900                              <1> .primary:
   901 00000DC6 64803C25[13C00300]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   901 00000DCE 03                  <1>
   902 00000DCF 0F84AB000000        <1>     je .remInit
   903 00000DD5 31C9                <1>     xor ecx, ecx    ;Sector 0
   904 00000DD7 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   905 00000DDC 0F8289000000        <1>     jc .primaryEpilog
   906                              <1>     ;Here, check MBR or BPB
   907 00000DE2 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   908 00000DEB 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   909                              <1>     ;Now check if BPB or MBR
   910 00000DED 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   911 00000DEF 8A6302              <1>     mov ah, byte [rbx + 2]
   912 00000DF2 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   913 00000DF6 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   914                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   915                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   916 00000DF8 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   917 00000DFF B104                <1>     mov cl, 4
   918                              <1> .checkPrimary:
   919 00000E01 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   920 00000E04 3C01                <1>     cmp al, 01
   921 00000E06 7421                <1>     je .primaryFound
   922 00000E08 3C04                <1>     cmp al, 04
   923 00000E0A 741D                <1>     je .primaryFound
   924 00000E0C 3C06                <1>     cmp al, 06
   925 00000E0E 7419                <1>     je .primaryFound
   926 00000E10 3C0B                <1>     cmp al, 0Bh
   927 00000E12 7415                <1>     je .primaryFound
   928 00000E14 3C0C                <1>     cmp al, 0Ch
   929 00000E16 7411                <1>     je .primaryFound
   930 00000E18 3C0E                <1>     cmp al, 0Eh
   931 00000E1A 740D                <1>     je .primaryFound
   932 00000E1C 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   933 00000E23 FEC9                <1>     dec cl
   934 00000E25 7444                <1>     jz .primaryEpilog
   935 00000E27 EBD8                <1>     jmp short .checkPrimary
   936                              <1> .primaryFound:
   937                              <1>     ;Copy the first sector of this partition into memory
   938 00000E29 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   939 00000E2C E8E9000000          <1>     call .initReadSector
   940 00000E31 7238                <1>     jc .primaryEpilog
   941                              <1>     ;Now verify this is a BPB
   942 00000E33 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   943 00000E35 8A6302              <1>     mov ah, byte [rbx + 2]
   944 00000E38 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   945 00000E3C 752D                <1>     jne .primaryEpilog   ;If not, skip
   946                              <1>     ;Now copy data to internal tables
   947 00000E3E 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   948 00000E41 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   949 00000E46 57                  <1>     push rdi
   950 00000E47 F348A5              <1>     rep movsq   ;Copy the BPB
   951 00000E4A 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   952                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   953 00000E4B 4A8D9C05[8D260000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   954                              <1>     ;Add device count to rbx to point to correct entry
   955 00000E53 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   956 00000E55 4A8D9CC5[97260000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   957 00000E5D 488933              <1>     mov qword [rbx], rsi
   958 00000E60 49FFC0              <1>     inc r8  ;Goto next logical drive
   959 00000E63 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   960                              <1> .primaryEpilog:
   961 00000E6B FEC2                <1>     inc dl  ;Goto next BIOS drive
   962 00000E6D 88D6                <1>     mov dh, dl
   963 00000E6F 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   964 00000E72 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
   965 00000E7A 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
   966                              <1> .extended:
   967                              <1> ;We have gone through all the devices once
   968                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   969                              <1>     ;je .remInit ;If yes, get removable devices
   970                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   971                              <1>     ;xor ecx, ecx    ;Get MBR back
   972                              <1>     ;call .initReadSector
   973                              <1>     ;Now we eventually search MBR for a FAT extended partition
   974                              <1> .remInit:
   975                              <1> ;Now handle removable devices, at least 2 rem. devs.
   976 00000E80 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
   977 00000E83 30D2                <1>     xor dl, dl  ;Start with removable device 0
   978 00000E85 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   979                              <1>     ;rdi points to the space for the subsequent bpb's
   980                              <1> .removables:
   981 00000E88 31C9                <1>     xor ecx, ecx    ;Read sector 0
   982 00000E8A E88B000000          <1>     call .initReadSector
   983 00000E8F 7238                <1>     jc .removableEpilogue   ;Goto next device
   984                              <1>     ;Now verify this is a BPB
   985 00000E91 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   986 00000E93 8A6302              <1>     mov ah, byte [rbx + 2]
   987 00000E96 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   988 00000E9A 752D                <1>     jne .removableEpilogue   ;If not, skip
   989                              <1>     ;Now copy data to internal tables
   990 00000E9C 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   991 00000E9F B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   992 00000EA4 57                  <1>     push rdi
   993 00000EA5 F348A5              <1>     rep movsq   ;Copy the BPB
   994 00000EA8 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   995                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   996 00000EA9 4A8D9C05[8D260000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   997                              <1>     ;Add device count to rbx to point to correct entry
   998 00000EB1 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   999 00000EB3 4A8D9CC5[97260000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1000 00000EBB 488933              <1>     mov qword [rbx], rsi
  1001 00000EBE 49FFC0              <1>     inc r8  ;Goto next logical drive
  1002 00000EC1 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
  1003                              <1> .removableEpilogue:
  1004 00000EC9 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1005 00000ECB 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1006 00000ED3 7412                <1>     je .end
  1007 00000ED5 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1008 00000EDC 7403                <1>     je .re0
  1009 00000EDE 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1010                              <1> .re0:
  1011 00000EE1 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1012 00000EE5 72A1                <1>     jb .removables
  1013                              <1> .end:
  1014 00000EE7 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1014 00000EEF 01                  <1>
  1015 00000EF0 7401                <1>     je .singleRemDev
  1016 00000EF2 C3                  <1>     ret
  1017                              <1> .singleRemDev:
  1018                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1019 00000EF3 488D9D[8D260000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1020 00000EFA 8A95[8D260000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1021 00000F00 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1022 00000F03 488D9D[97260000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1023 00000F0A 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1024 00000F0D 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1025 00000F11 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
  1026 00000F19 C3                  <1>     ret
  1027                              <1> .initReadSector:
  1028                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1029 00000F1A B482                <1>     mov ah, 82h ;Read
  1030 00000F1C B001                <1>     mov al, 1   ;One sector
  1031 00000F1E 488D9D[CA020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1032 00000F25 CD33                <1>     int 33h
  1033 00000F27 C3                  <1>     ret
    11                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    12                                  %include "./Source/BSS/dosSeg.asm"
    13                              <1> ;This file contains the main DOS data segment
    14                              <1> dosAPT: ;Additional Page tables
    15 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    16                              <1> dosDataArea:
    17 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    18 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    19 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    20 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    21 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    22 0003C013 ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    23 0003C014 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    24 0003C018 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    25 0003C01C ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    26 0003C024 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    27 0003C04E <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    28                              <1>     ;The device driver header with space for the largest possible packet
    29 0003C078 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    30                              <1> sysVarsPtr:
    31 0003C080 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    32 0003C088 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    33 0003C090 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    34                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    35 0003C098 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    36                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    37 0003C0A0 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    38 0003C0A2 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    39 0003C0AA ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    40 0003C0B2 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    41 0003C0B3 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    42 0003C0BB ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    43 0003C0BD ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    44 0003C0BE <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    45                              <1> 
    46                              <1> ;Start of Swappable Data Area, this bit can remain static
    47 0003C0E0 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    48 0003C0E1 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    49 0003C0E2 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    50 0003C0E3 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    51 0003C0E4 ????                <1>     errorExt    resw 1  ;Extended Error Code
    52 0003C0E6 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    53 0003C0E7 ??                  <1>     errorClass  resb 1  ;Error Class
    54                              <1> 
    55 0003C0E8 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    56 0003C0F0 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    57 0003C0F8 ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    58 0003C100 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    59 0003C108 ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch x
    60 0003C10A ??                  <1>     currentDrv  resb 1  ;Default drive x
    61 0003C10B ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    62 0003C10C ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    63                              <1> ;SDA, needs to be replaced between processes
    64 0003C10D ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    65                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    66 0003C115 ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    67                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    68                              <1> 
    69 0003C116 ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    70 0003C117 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    71 0003C118 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    72 0003C119 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    73 0003C121 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    74 0003C129 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    75                              <1> ;Time stuff
    76 0003C131 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    77 0003C137 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    78 0003C138 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    79 0003C139 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    80 0003C13A ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    81 0003C13C ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    82                              <1> ;String Stuff
    83 0003C13D <res FFh>           <1>     asciiBuffer resb 255    ;Have a 255 char buffer for the ascii terminal
    84                              <1> ;Stacks
    85 0003C23C <res 528h>          <1>     critStack   resq 165
    86 0003C764 ????????????????    <1>     critStakTop resq 1
    87 0003C76C <res 638h>          <1>     IOStack     resq 199
    88 0003CDA4 ????????????????    <1>     IOStakTop   resq 1
    89 0003CDAC <res 638h>          <1>     DiskStack   resq 199
    90 0003D3E4 ????????????????    <1>     DiskStakTop resq 1
    91                              <1>     dSegLen     equ     $
    13                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    14                                  %include "./Source/Data/staticData.asm"
    15                              <1> 
    16                              <1> ;-----------------------------------:
    17                              <1> ;           Static Data             :
    18                              <1> ;-----------------------------------:
    19 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    20 00000001 01                  <1> dosMinor    db 01h      ;.01
    21 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    21 0000000B 535953              <1>
    22 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    22 00000017 535953              <1>
    23 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    15                                  %include "./Source/Debug/debug.asm"
    16                              <1> ;This file contains debugging macros, procs and strings
    17                              <1> ; that we can use to output to COM1 bypassing the operating system.
    18                              <1> ;A serial terminal must be connected for this to work.
    19                              <1> 
    20                              <1> ;Variables and equates
    21                              <1> 
    22 0000001B 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    23                              <1> 
    24 00000023 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    24 0000002C 39414243444546      <1>
    25                              <1> ;Common procedures
    26                              <1> debMakeDebuggerRespond:
    27 00000033 488D2D26000000      <1>     lea rbp, .msg
    28 0000003A E8AF000000          <1>     call debPrintNullString
    29 0000003F B900001000          <1>     mov ecx, 100000h
    30                              <1> .waiting:
    31 00000044 FFC9                <1>     dec ecx
    32 00000046 740C                <1>     jz .timeout
    33 00000048 B402                <1>     mov ah, 02h ;Blocking recieve!
    34 0000004A 31D2                <1>     xor edx, edx
    35 0000004C CD34                <1>     int 34h
    36 0000004E F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    37 00000051 75F1                <1>     jnz .waiting
    38 00000053 C3                  <1>     ret
    39                              <1> .timeout:
    40 00000054 488D2D47000000      <1>     lea rbp, .msg2
    41 0000005B E98E000000          <1>     jmp debPrintNullString
    42 00000060 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    42 00000069 6B6579206174207468- <1>
    42 00000072 65207465726D696E61- <1>
    42 0000007B 6C20746F20636F6E74- <1>
    42 00000084 696E7565206F722077- <1>
    42 0000008D 61697420666F722074- <1>
    42 00000096 696D656F75742E2E2E- <1>
    42 0000009F 0A0D00              <1>
    43 000000A2 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    43 000000AB 436F6E74696E75696E- <1>
    43 000000B4 672E2E2E0A0D00      <1>
    44                              <1> debPrintHexByte:
    45                              <1> ;Print the hex byte in al as a hex value
    46 000000BB 52                  <1>     push rdx
    47 000000BC 53                  <1>     push rbx
    48 000000BD 50                  <1>     push rax
    49                              <1> 
    50 000000BE 88C2                <1>     mov dl, al           ;save byte in dl
    51 000000C0 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    52 000000C4 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    53 000000C9 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    54 000000CD E80C000000          <1>     call .wrchar
    55 000000D2 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    56 000000D5 E804000000          <1>     call .wrchar
    57                              <1> 
    58 000000DA 58                  <1>     pop rax
    59 000000DB 5B                  <1>     pop rbx
    60 000000DC 5A                  <1>     pop rdx
    61 000000DD C3                  <1>     ret
    62                              <1> .wrchar:
    63 000000DE 6687DB              <1>     xchg bx, bx
    64 000000E1 488D1D3BFFFFFF      <1>     lea rbx, debascii
    65 000000E8 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    66 000000E9 B401                <1>     mov ah, 01h
    67 000000EB CD34                <1>     int 34h  ;print char
    68 000000ED C3                  <1>     ret
    69                              <1> 
    70                              <1> debPrintNullString:
    71                              <1> ;Print a null terminated string pointed to by rbp
    72 000000EE 56                  <1>     push rsi
    73 000000EF 50                  <1>     push rax
    74 000000F0 52                  <1>     push rdx
    75 000000F1 31D2                <1>     xor edx, edx    ;Select COM1
    76 000000F3 4889EE              <1>     mov rsi, rbp
    77                              <1> .getChar:
    78 000000F6 AC                  <1>     lodsb
    79 000000F7 84C0                <1>     test al, al
    80 000000F9 7406                <1>     jz .exit
    81 000000FB B401                <1>     mov ah, 01h
    82 000000FD CD34                <1>     int 34h
    83 000000FF EBF5                <1>     jmp short .getChar
    84                              <1> .exit:
    85 00000101 5A                  <1>     pop rdx
    86 00000102 58                  <1>     pop rax
    87 00000103 5E                  <1>     pop rsi
    88 00000104 C3                  <1>     ret
    89                              <1> 
    90                              <1> debPrintDOSStack:
    91                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    92                              <1> ;Shows me which function, and parameters passed and returned
    93 00000105 488D2DA5010000      <1>     lea rbp, .a1
    94 0000010C E8DDFFFFFF          <1>     call debPrintNullString
    95 00000111 488B15(21C10300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    96 00000118 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
    97 0000011F 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
    98 00000122 E802030000          <1>     call overlayQword
    99 00000127 4881C316000000      <1>     add rbx, 22
   100 0000012E 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   101 00000132 E8F2020000          <1>     call overlayQword
   102 00000137 4881C316000000      <1>     add rbx, 22
   103 0000013E 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   104 00000142 E8E2020000          <1>     call overlayQword
   105 00000147 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   106 0000014E 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   107 00000152 E8D2020000          <1>     call overlayQword
   108 00000157 4881C316000000      <1>     add rbx, 22 
   109 0000015E 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   110 00000162 E8C2020000          <1>     call overlayQword
   111 00000167 4881C316000000      <1>     add rbx, 22
   112 0000016E 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   113 00000172 E8B2020000          <1>     call overlayQword
   114 00000177 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   115 0000017E 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   116 00000182 E8A2020000          <1>     call overlayQword
   117 00000187 4881C316000000      <1>     add rbx, 22
   118 0000018E 488B05(21C10300)    <1>     mov rax, qword [oldRSP]
   119 00000195 480560000000        <1>     add rax, callerFrame_size
   120 0000019B E889020000          <1>     call overlayQword
   121 000001A0 4881C316000000      <1>     add rbx, 22
   122 000001A7 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   123 000001AB E879020000          <1>     call overlayQword
   124 000001B0 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   125 000001B7 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   126 000001BB E869020000          <1>     call overlayQword
   127 000001C0 488D2D06000000      <1>     lea rbp, .a0
   128 000001C7 E822FFFFFF          <1>     call debPrintNullString
   129 000001CC C3                  <1>     ret
   130                              <1> 
   131 000001CD 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   131 000001D6 303030303030303030- <1>
   131 000001DF 30306820            <1>
   132 000001E3 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   132 000001EC 303030303030303030- <1>
   132 000001F5 30306820            <1>
   133 000001F9 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   133 00000202 303030303030303030- <1>
   133 0000020B 30306820            <1>
   134 0000020F 0A0D                <1>     db  0Ah,0Dh
   135 00000211 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   135 0000021A 303030303030303030- <1>
   135 00000223 30306820            <1>
   136 00000227 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   136 00000230 303030303030303030- <1>
   136 00000239 30306820            <1>
   137 0000023D 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   137 00000246 303030303030303030- <1>
   137 0000024F 30306820            <1>
   138 00000253 0A0D                <1>     db 0Ah, 0Dh
   139 00000255 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   139 0000025E 303030303030303030- <1>
   139 00000267 30306820            <1>
   140 0000026B 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   140 00000274 303030303030303030- <1>
   140 0000027D 30306820            <1>
   141 00000281 7269703D3030303030- <1>     db "rip=0000000000000000h"
   141 0000028A 303030303030303030- <1>
   141 00000293 303068              <1>
   142 00000296 0A0D                <1>     db 0Ah, 0Dh
   143 00000298 666C673D3030303030- <1>     db "flg=0000000000000000h "
   143 000002A1 303030303030303030- <1>
   143 000002AA 30306820            <1>
   144 000002AE 0A0D00              <1>     db 0Ah,0Dh,0
   145 000002B1 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   145 000002BA 206F6E20496E742034- <1>
   145 000002C3 316820737461636B0A- <1>
   145 000002CC 0D00                <1>
   146                              <1> 
   147                              <1> debDPBptr:
   148                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   149 000002CE 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   150 000002D5 4889E8              <1>     mov rax, rbp
   151 000002D8 E84C010000          <1>     call overlayQword
   152 000002DD 488D2D06000000      <1>     lea rbp, .dpb
   153 000002E4 E805FEFFFF          <1>     call debPrintNullString
   154 000002E9 C3                  <1>     ret
   155                              <1> .dpb: 
   156 000002EA 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   156 000002F3 203030303030303030- <1>
   156 000002FC 303030303030303068- <1>
   156 00000305 200A0D00            <1>
   157                              <1> 
   158                              <1> debDPBBPBptr:
   159                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   160                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   161 00000309 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   162 00000310 4889E8              <1>     mov rax, rbp
   163 00000313 E811010000          <1>     call overlayQword
   164 00000318 4881C321000000      <1>     add rbx, 33
   165 0000031F 4889F0              <1>     mov rax, rsi
   166 00000322 E802010000          <1>     call overlayQword
   167 00000327 488D2D06000000      <1>     lea rbp, .dpb
   168 0000032E E8BBFDFFFF          <1>     call debPrintNullString
   169 00000333 C3                  <1>     ret
   170                              <1> .dpb: 
   171 00000334 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   171 0000033D 203030303030303030- <1>
   171 00000346 303030303030303068- <1>
   171 0000034F 2066726F6D20        <1>
   172 00000355 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   172 0000035E 203030303030303030- <1>
   172 00000367 303030303030303068- <1>
   172 00000370 200A0D00            <1>
   173                              <1> overlayByte:
   174                              <1>     ;Called with number in rax
   175                              <1>     ;pointer to START of 16 byte space for number in rbx
   176 00000374 53                  <1>     push rbx
   177 00000375 51                  <1>     push rcx
   178 00000376 52                  <1>     push rdx
   179 00000377 55                  <1>     push rbp
   180 00000378 4889DD              <1>     mov rbp, rbx
   181 0000037B 4889C2              <1>     mov rdx, rax
   182 0000037E 48FFC5              <1>     inc rbp ;Go to end of number
   183                              <1> 
   184 00000381 488D1D9BFCFFFF      <1>     lea rbx, debascii
   185 00000388 88D0                <1>     mov al, dl  ;Go low nybble first
   186 0000038A 240F                <1>     and al, 0Fh
   187 0000038C D7                  <1>     xlatb
   188 0000038D 884500              <1>     mov byte [rbp], al
   189 00000390 48FFCD              <1>     dec rbp ;Go down one char pos
   190 00000393 88D0                <1>     mov al, dl
   191 00000395 24F0                <1>     and al, 0F0h    ;Hi nybble next
   192 00000397 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   193 0000039A D7                  <1>     xlatb
   194 0000039B 884500              <1>     mov byte [rbp], al  ;Store char
   195                              <1> 
   196 0000039E 5D                  <1>     pop rbp
   197 0000039F 5A                  <1>     pop rdx
   198 000003A0 59                  <1>     pop rcx
   199 000003A1 5B                  <1>     pop rbx
   200 000003A2 C3                  <1>     ret
   201                              <1> 
   202                              <1> overlayWord:
   203                              <1>     ;Called with number in rax
   204                              <1>     ;pointer to START of 16 byte space for number in rbx
   205 000003A3 53                  <1>     push rbx
   206 000003A4 51                  <1>     push rcx
   207 000003A5 52                  <1>     push rdx
   208 000003A6 55                  <1>     push rbp
   209 000003A7 4889DD              <1>     mov rbp, rbx
   210 000003AA 4889C2              <1>     mov rdx, rax
   211 000003AD 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   212 000003B4 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   213 000003B9 488D1D63FCFFFF      <1>     lea rbx, debascii
   214                              <1> .ow0:
   215 000003C0 88D0                <1>     mov al, dl  ;Go low nybble first
   216 000003C2 240F                <1>     and al, 0Fh
   217 000003C4 D7                  <1>     xlatb
   218 000003C5 884500              <1>     mov byte [rbp], al
   219 000003C8 48FFCD              <1>     dec rbp ;Go down one char pos
   220 000003CB 88D0                <1>     mov al, dl
   221 000003CD 24F0                <1>     and al, 0F0h    ;Hi nybble next
   222 000003CF C0E804              <1>     shr al, 4   ;Shift hi nybble low
   223 000003D2 D7                  <1>     xlatb
   224 000003D3 884500              <1>     mov byte [rbp], al  ;Store char
   225 000003D6 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   226 000003DA 48FFCD              <1>     dec rbp
   227 000003DD FFC9                <1>     dec ecx
   228 000003DF 75DF                <1>     jnz .ow0
   229 000003E1 5D                  <1>     pop rbp
   230 000003E2 5A                  <1>     pop rdx
   231 000003E3 59                  <1>     pop rcx
   232 000003E4 5B                  <1>     pop rbx
   233 000003E5 C3                  <1>     ret
   234                              <1> 
   235                              <1> overlayDword:
   236                              <1>     ;Called with number in rax
   237                              <1>     ;pointer to START of 16 byte space for number in rbx
   238 000003E6 53                  <1>     push rbx
   239 000003E7 51                  <1>     push rcx
   240 000003E8 52                  <1>     push rdx
   241 000003E9 55                  <1>     push rbp
   242 000003EA 4889DD              <1>     mov rbp, rbx
   243 000003ED 4889C2              <1>     mov rdx, rax
   244 000003F0 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   245 000003F7 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   246 000003FC 488D1D20FCFFFF      <1>     lea rbx, debascii
   247                              <1> .od0:
   248 00000403 88D0                <1>     mov al, dl  ;Go low nybble first
   249 00000405 240F                <1>     and al, 0Fh
   250 00000407 D7                  <1>     xlatb
   251 00000408 884500              <1>     mov byte [rbp], al
   252 0000040B 48FFCD              <1>     dec rbp ;Go down one char pos
   253 0000040E 88D0                <1>     mov al, dl
   254 00000410 24F0                <1>     and al, 0F0h    ;Hi nybble next
   255 00000412 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   256 00000415 D7                  <1>     xlatb
   257 00000416 884500              <1>     mov byte [rbp], al  ;Store char
   258 00000419 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   259 0000041D 48FFCD              <1>     dec rbp
   260 00000420 FFC9                <1>     dec ecx
   261 00000422 75DF                <1>     jnz .od0
   262 00000424 5D                  <1>     pop rbp
   263 00000425 5A                  <1>     pop rdx
   264 00000426 59                  <1>     pop rcx
   265 00000427 5B                  <1>     pop rbx
   266 00000428 C3                  <1>     ret
   267                              <1> 
   268                              <1> overlayQword:
   269                              <1>     ;Called with number in rax
   270                              <1>     ;pointer to START of 16 byte space for number in rbx
   271 00000429 53                  <1>     push rbx
   272 0000042A 51                  <1>     push rcx
   273 0000042B 52                  <1>     push rdx
   274 0000042C 55                  <1>     push rbp
   275 0000042D 4889DD              <1>     mov rbp, rbx
   276 00000430 4889C2              <1>     mov rdx, rax
   277 00000433 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   278 0000043A B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   279 0000043F 488D1DDDFBFFFF      <1>     lea rbx, debascii
   280                              <1> .oq0:
   281 00000446 88D0                <1>     mov al, dl  ;Go low nybble first
   282 00000448 240F                <1>     and al, 0Fh
   283 0000044A D7                  <1>     xlatb
   284 0000044B 884500              <1>     mov byte [rbp], al
   285 0000044E 48FFCD              <1>     dec rbp ;Go down one char pos
   286 00000451 88D0                <1>     mov al, dl
   287 00000453 24F0                <1>     and al, 0F0h    ;Hi nybble next
   288 00000455 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   289 00000458 D7                  <1>     xlatb
   290 00000459 884500              <1>     mov byte [rbp], al  ;Store char
   291 0000045C 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   292 00000460 48FFCD              <1>     dec rbp
   293 00000463 FFC9                <1>     dec ecx
   294 00000465 75DF                <1>     jnz .oq0
   295 00000467 5D                  <1>     pop rbp
   296 00000468 5A                  <1>     pop rdx
   297 00000469 59                  <1>     pop rcx
   298 0000046A 5B                  <1>     pop rbx
   299 0000046B C3                  <1>     ret
   300                              <1> 
   301                              <1> debPrintFunctionName:
   302                              <1> ;Prints the DOS function that has been entered
   303                              <1> ;Entered with ah = Function number
   304 0000046C 88E0                <1>     mov al, ah  ;Get dos function number
   305 0000046E 488D1DAEFBFFFF      <1>     lea rbx, debascii
   306 00000475 488D1535000000      <1>     lea rdx, .number
   307 0000047C 24F0                <1>     and al, 0F0h    ;Get high nybble first
   308 0000047E C0E804              <1>     shr al, 4
   309 00000481 D7                  <1>     xlatb
   310 00000482 8802                <1>     mov byte [rdx], al
   311 00000484 88E0                <1>     mov al, ah
   312 00000486 240F                <1>     and al, 0Fh
   313 00000488 D7                  <1>     xlatb
   314 00000489 884201              <1>     mov byte [rdx + 1], al
   315 0000048C 488D2D06000000      <1>     lea rbp, .dosString
   316 00000493 E856FCFFFF          <1>     call debPrintNullString
   317 00000498 C3                  <1>     ret
   318 00000499 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   318 000004A2 696F6E20496E742034- <1>
   318 000004AB 31682F41483D        <1>
   319 000004B1 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   320                              <1> 
   321                              <1> ;----------------:
   322                              <1> ;!!!! MACROS !!!!:
   323                              <1> ;----------------:
   324                              <1> ;Insert macro when entering a debug block
   325                              <1> %macro debugEnterM 0
   326                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   327                              <1>     mov rsp, debStackTop
   328                              <1> ;Push all registers except rsp on stack
   329                              <1>     push rax
   330                              <1>     push rbx
   331                              <1>     push rcx
   332                              <1>     push rdx
   333                              <1>     push rsi
   334                              <1>     push rdi
   335                              <1>     push rbp
   336                              <1>     push r8
   337                              <1>     push r9
   338                              <1>     push r10
   339                              <1>     push r11
   340                              <1>     push r12
   341                              <1>     push r13
   342                              <1>     push r14
   343                              <1>     push r15
   344                              <1>     pushfq
   345                              <1> %endmacro
   346                              <1> ;Insert macro when exiting a debug block
   347                              <1> %macro debugExitM 0
   348                              <1>     popfq
   349                              <1>     pop r15
   350                              <1>     pop r14
   351                              <1>     pop r13
   352                              <1>     pop r12
   353                              <1>     pop r11
   354                              <1>     pop r10
   355                              <1>     pop r9
   356                              <1>     pop r8
   357                              <1>     pop rbp
   358                              <1>     pop rdi
   359                              <1>     pop rsi
   360                              <1>     pop rdx
   361                              <1>     pop rcx
   362                              <1>     pop rbx
   363                              <1>     pop rax
   364                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   365                              <1> %endmacro
    16                                  %include "./Source/Kernel/bufferFunctions.asm"
    17                              <1> ;This file contains miscellaneous disk buffer related functions that
    18                              <1> ; dont fit anywhere else
    19                              <1> 
    20                              <1> readBuffer: ;EXTERNAL LINKAGE
    21                              <1> ;
    22                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    23                              <1> ;TO CALL!
    24                              <1> ;
    25                              <1> ;This function will return a pointer to the desired data sector OR 
    26                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    27                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    28                              <1> ;Entry: rax = Sector to read
    29                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    30                              <1> ;       rsi = DPB of transacting drive
    31                              <1> ;Exit:  CF = NC : All ok!
    32                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    33                              <1> ;       All other registers as before
    34                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    35                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    36                              <1> ;       ch = 1 -> Data Not Read From Disk
    37                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
    38 000004B7 52                  <1>     push rdx
    39 000004B8 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
    40 000004BA E848010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
    41 000004BF 4881FBFFFFFFFF      <1>     cmp rbx, -1
    42 000004C6 7403                <1>     je .rbReadNewSector
    43                              <1> .rbExit:
    44 000004C8 F8                  <1>     clc
    45                              <1> .rbExitNoFlag:
    46 000004C9 5A                  <1>     pop rdx
    47 000004CA C3                  <1>     ret
    48                              <1> .rbReadNewSector:
    49 000004CB E8C6000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
    50 000004D0 4889DD              <1>     mov rbp, rbx
    51 000004D3 30ED                <1>     xor ch, ch
    52 000004D5 E869000000          <1>     call flushBuffer
    53 000004DA 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
    54                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
    55 000004DC 51                  <1>     push rcx
    56 000004DD 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
    57 000004E0 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
    58 000004E3 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
    59 000004E7 80F902              <1>     cmp cl, fatBuffer
    60 000004EA B201                <1>     mov dl, 1   ;Default values if not fat buffer
    61 000004EC B900000000          <1>     mov ecx, 0  ;Ditto!
    62 000004F1 7506                <1>     jne .rbNonFATbuffer
    63 000004F3 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
    64 000004F6 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
    65                              <1> .rbNonFATbuffer:
    66 000004F9 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
    67 000004FC 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
    68 000004FF 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
    69 00000503 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
    70 00000507 59                  <1>     pop rcx
    71 00000508 FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
    72 0000050A E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
    73 0000050F EBB8                <1>     jmp short .rbExitNoFlag
    74                              <1> 
    75                              <1> readSectorBuffer:
    76                              <1> ;Reads a sector into a built sector buffer
    77                              <1> ;Entry: rbp = Pointer to buffer header
    78                              <1> ;Exit:  CF=NC : Success
    79                              <1> ;       CF=CY : Fail, terminate the request
    80                              <1> ;       rbx pointing to buffer header
    81                              <1> ;First make request to device driver
    82 00000511 50                  <1>     push rax
    83 00000512 53                  <1>     push rbx
    84 00000513 51                  <1>     push rcx
    85 00000514 52                  <1>     push rdx
    86 00000515 56                  <1>     push rsi
    87                              <1> .rsRequest0:
    88 00000516 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    89                              <1> .rsRequest1:
    90 0000051B 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
    91 0000051E B901000000          <1>     mov ecx, 1  ;One sector to copy
    92 00000523 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
    93 00000527 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
    94 0000052B E87E070000          <1>     call absDiskRead    ;Call INT 45h
    95 00000530 7207                <1>     jc .rsFail
    96                              <1> .rsExit:
    97 00000532 F8                  <1>     clc
    98                              <1> .rsExitBad:
    99 00000533 5E                  <1>     pop rsi
   100 00000534 5A                  <1>     pop rdx
   101 00000535 59                  <1>     pop rcx
   102 00000536 5B                  <1>     pop rbx
   103 00000537 58                  <1>     pop rax
   104 00000538 C3                  <1>     ret
   105                              <1> .rsFail:
   106                              <1> ;Enter here only if the request failed
   107 00000539 FFCE                <1>     dec esi
   108 0000053B 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   109                              <1> ;Request failed thrice, critical error call
   110 0000053D F9                  <1>     stc
   111 0000053E E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   112                              <1> 
   113                              <1> flushBuffer:
   114                              <1> ;Flushes the data in a sector buffer to disk!
   115                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   116                              <1> ;Exit:  CF=NC : Success
   117                              <1> ;       CF=CY : Fail, terminate the request
   118                              <1> ;First make request to device driver
   119 00000543 50                  <1>     push rax
   120 00000544 53                  <1>     push rbx
   121 00000545 51                  <1>     push rcx
   122 00000546 52                  <1>     push rdx
   123 00000547 56                  <1>     push rsi
   124 00000548 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   125 0000054C 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   126                              <1> .fbRequest0:
   127 0000054E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   128                              <1> .fbRequest1:
   129 00000553 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   130 00000556 B901000000          <1>     mov ecx, 1  ;One sector to copy
   131 0000055B 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   132 0000055F 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   133 00000563 E8CF060000          <1>     call absDiskWrite    ;Call INT 46h
   134 00000568 7222                <1>     jc .fbFail
   135                              <1> ;Now check if the buffer was a FAT, to write additional copies
   136 0000056A F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   137 0000056E 7411                <1>     jz .fbFreeExit  ;If not, exit
   138 00000570 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   139 00000573 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   140 00000575 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   141 00000578 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   142 0000057C E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   143                              <1> .fbFreeExit:
   144                              <1> ;Free the buffer if it was flushed successfully
   145 00000581 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   146 00000585 F8                  <1>     clc
   147                              <1> .fbExitBad:
   148 00000586 5E                  <1>     pop rsi
   149 00000587 5A                  <1>     pop rdx
   150 00000588 59                  <1>     pop rcx
   151 00000589 5B                  <1>     pop rbx
   152 0000058A 58                  <1>     pop rax
   153 0000058B C3                  <1>     ret
   154                              <1> .fbFail:
   155                              <1> ;Enter here only if the request failed
   156 0000058C FFCE                <1>     dec esi
   157 0000058E 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   158                              <1> ;Request failed thrice, critical error call
   159 00000590 F9                  <1>     stc
   160 00000591 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   161                              <1>     
   162                              <1> findLRUBuffer: 
   163                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   164                              <1> ; in rbx
   165                              <1> ;Input: Nothing
   166                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   167 00000596 52                  <1>     push rdx
   168 00000597 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   169 0000059E 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   170 000005A2 7436                <1>     je .flbExit 
   171 000005A4 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   172 000005AB 742D                <1>     je .flbExit
   173                              <1> .flbWalk:
   174 000005AD 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   175 000005B0 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   176 000005B3 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   177 000005B7 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   178 000005B9 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   179 000005C0 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   180 000005C2 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   181                              <1> .flbHeadLink:
   182 000005C9 488B15(A2C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   183 000005D0 48891D(A2C00300)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   184 000005D7 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   185                              <1> .flbExit:
   186 000005DA 5A                  <1>     pop rdx
   187 000005DB C3                  <1>     ret
   188                              <1> .flbFreeLink:
   189 000005DC 51                  <1>     push rcx
   190 000005DD 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   191 000005E0 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   192 000005E3 59                  <1>     pop rcx
   193 000005E4 EBE3                <1>     jmp short .flbHeadLink
   194                              <1> 
   195                              <1> findDirtyBufferForDrive:    ;EXTERNAL LINKAGE
   196                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   197                              <1> ;Input: dl = Drive number
   198                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   199 000005E6 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   200                              <1> .fdbfdCheckBuffer:
   201 000005ED 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   202 000005F0 7507                <1>     jne .fdbfdGotoNextBuffer
   203 000005F2 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   204 000005F6 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   205                              <1> .fdbfdExit:
   206 000005F8 C3                  <1>     ret
   207                              <1> .fdbfdGotoNextBuffer:
   208 000005F9 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   209 000005FC 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   210 00000603 74F3                <1>     je .fdbfdExit
   211 00000605 EBE6                <1>     jmp short .fdbfdCheckBuffer
   212                              <1> 
   213                              <1> findSectorInBuffer:     ;EXTERNAL LINKAGE
   214                              <1> ;Finds the Buffer for a sector
   215                              <1> ;If the sector is not in a buffer, returns with a -1
   216                              <1> ;Input: rax = Sector number
   217                              <1> ;        dl = Drive number
   218                              <1> ;Output: rbx = Buffer hdr pointer or -1
   219 00000607 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   220                              <1> .fsiCheckBuffer:
   221 0000060E 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   222 00000611 7507                <1>     jne .fsiGotoNextBuffer
   223 00000613 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   224 00000617 7501                <1>     jne .fsiGotoNextBuffer
   225                              <1> .fsiExit:
   226 00000619 C3                  <1>     ret
   227                              <1> .fsiGotoNextBuffer:
   228 0000061A 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   229 0000061D 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   230 00000624 74F3                <1>     je .fsiExit
   231 00000626 EBE6                <1>     jmp short .fsiCheckBuffer
    17                                  %include "./Source/Kernel/fat.asm"
    18                              <1> ;-----------------------------------:
    19                              <1> ;       File System routines        :
    20                              <1> ;-----------------------------------:
    21                              <1> name2Clust:
    22                              <1> ;Converts a file name to a first cluster number
    23                              <1> ;Entry : rbx = Points to ASCIIZ string to parse for a Cluster number
    24                              <1> ;Exit : rax = Cluster number or -1 if file not found
    25                              <1> ;Three cases:
    26                              <1> ;1) Start with a letter and a : => Full path and Drive specified
    27                              <1> ;2) Start with \ or / => Current Drive and relative path from root
    28                              <1> ;3) Else => File name in Current Dir or a subdir from current dir
    29 00000628 56                  <1>     push rsi
    30 00000629 57                  <1>     push rdi
    31 0000062A 51                  <1>     push rcx
    32 0000062B 52                  <1>     push rdx
    33 0000062C 4889DF              <1>     mov rdi, rbx    ;Save string ptr in rdi
    34 0000062F 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    35 00000633 7427                <1>     je .fullPath
    36 00000635 803F5C              <1>     cmp byte [rdi], "\"
    37 00000638 7422                <1>     je .relPath
    38 0000063A 803F2F              <1>     cmp byte [rdi], "/"
    39 0000063D 741D                <1>     je .relPath ;Both CPM and UNIX are considered acceptible path separators
    40                              <1>     ;Else search the current dir for an entry
    41 0000063F 480FB605(0AC10300)  <1>     movzx rax, byte [currentDrv]   ;Get current drive
    42 00000647 E8C8050000          <1>     call getCDS
    43 0000064C 8B434D              <1>     mov eax, dword [rbx + cds.dStartCluster]    ;Get start cluster
    44 0000064F 488B7345            <1>     mov rsi, qword [rbx + cds.qDPBPtr]  ;Get dpb ptr in rsi
    45 00000653 85C0                <1>     test eax, eax
    46 00000655 7505                <1>     jnz .localFileNoRoot
    47                              <1>     ;Here, we deal with Root Directories
    48 00000657 E872000000          <1>     call getFATtype ;rsi points to dpb
    49                              <1>     ;if ecx = 2, then FAT 32 and must treat differently
    50                              <1> 
    51                              <1> .localFileNoRoot:
    52                              <1> .relPath:
    53                              <1> .fullPath:
    54                              <1> .exit:
    55 0000065C 5A                  <1>     pop rdx
    56 0000065D 59                  <1>     pop rcx
    57 0000065E 5F                  <1>     pop rdi
    58 0000065F 5E                  <1>     pop rsi
    59 00000660 C3                  <1>     ret
    60                              <1> 
    61                              <1> searchDirectorySectorForEntry:
    62                              <1> ;Proc that searches the sector for the string 
    63                              <1> ; UP UNTIL the NULL char or the path separator
    64                              <1> ;If a . is found in file name, skip it
    65                              <1> ;If a sector entry is found to start with 0, return fail
    66                              <1> ;Entry: rdx = Path Section ptr (point to first A/N char)
    67                              <1> ;       rbx = Sector buffer pointer
    68                              <1> ;       rsi = DPB pointer
    69                              <1> ;Exit: CF=NC => Found, CF=CY => Not found
    70                              <1> ;       If CF=CY read char pointed to by rbx.
    71                              <1> ;       If this char is 0, then end of directory reached!
    72 00000661 50                  <1>     push rax
    73 00000662 51                  <1>     push rcx
    74                              <1>     ;cl has number of entries per sector
    75 00000663 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    76 00000666 80E905              <1>     sub cl, 5   ;5 is the number of bytes per dir entry shift
    77 00000669 B801000000          <1>     mov eax, 1
    78 0000066E D3E0                <1>     shl eax, cl ;eax has number of directory entries in sector
    79                              <1>     ;Now search each entry for name
    80                              <1>     ;Use ecx as counter for each entry
    81 00000670 89C1                <1>     mov ecx, eax
    82                              <1> .searchDir:
    83 00000672 803B00              <1>     cmp byte [rbx], 0 ;Check if dir empty before proceeding
    84 00000675 744E                <1>     jz .exitNotOK
    85                              <1>     ;Do string compare here, search for / or \ or 0 to exit
    86 00000677 52                  <1>     push rdx    ;Push the name pointer 
    87 00000678 53                  <1>     push rbx    ;Push sector pointer
    88                              <1> .searchLoop:
    89 00000679 8A02                <1>     mov al, byte [rdx] ;Get char in ASCIIZ buffer
    90 0000067B 3C2E                <1>     cmp al, "." ;Verify if name separator or directory entry
    91 0000067D 742C                <1>     je .dotCase
    92 0000067F 3C05                <1>     cmp al, 05h ;Special Case
    93 00000681 7424                <1>     je .specialCase
    94 00000683 3C2F                <1>     cmp al, "/" ;Name Found
    95 00000685 7442                <1>     je .nameFound
    96 00000687 3C5C                <1>     cmp al, "\" ;Name Found
    97 00000689 743E                <1>     je .nameFound
    98 0000068B 3C00                <1>     cmp al, 0   ;End of ASCIIZ string!
    99 0000068D 743A                <1>     je .nameFound
   100                              <1> .specRet:
   101 0000068F 3A03                <1>     cmp al, byte [rbx]  ;Compare to char in sector buffer
   102 00000691 7520                <1>     jne .nameNotFound
   103 00000693 48FFC3              <1>     inc rbx
   104                              <1> .skipChar:
   105 00000696 48FFC2              <1>     inc rdx ;Go to Filename extension
   106 00000699 5B                  <1>     pop rbx ;Get start of directory entry into rbx
   107 0000069A 53                  <1>     push rbx
   108 0000069B 4881C308000000      <1>     add rbx, 8  ;Go to the extension portion of the Filename
   109 000006A2 E9D2FFFFFF          <1>     jmp .searchLoop
   110                              <1> .specialCase:
   111 000006A7 B0E5                <1>     mov al, 0E5h
   112 000006A9 EBE4                <1>     jmp short .specRet
   113                              <1> .dotCase:
   114                              <1> ;Check if next char is geq than 'A'. If yes, path separator
   115 000006AB 807A0141            <1>     cmp byte [rdx + 1], 'A'
   116 000006AF 7CDE                <1>     jnge .specRet   ;Not Path Separator
   117 000006B1 EBE3                <1>     jmp short .skipChar
   118                              <1> .nameNotFound:
   119 000006B3 5B                  <1>     pop rbx
   120 000006B4 5A                  <1>     pop rdx
   121 000006B5 4881C320000000      <1>     add rbx, 20h    ;Goto next sector entry
   122 000006BC 803B00              <1>     cmp byte [rbx], 0   ;Are we at the end of the Directory?
   123 000006BF 7404                <1>     jz .exitNotOK   ;Exit early, end of directory
   124 000006C1 FFC9                <1>     dec ecx
   125 000006C3 75AD                <1>     jnz .searchDir
   126                              <1> .exitNotOK:
   127 000006C5 F9                  <1>     stc
   128                              <1> .exitOk:
   129 000006C6 59                  <1>     pop rcx
   130 000006C7 58                  <1>     pop rax
   131 000006C8 C3                  <1>     ret
   132                              <1> .nameFound:
   133 000006C9 5B                  <1>     pop rbx
   134 000006CA 5A                  <1>     pop rdx
   135 000006CB F8                  <1>     clc
   136 000006CC EBF8                <1>     jmp short .exitOk
   137                              <1> getFATtype:
   138                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
   139                              <1> ;Entry: rsi = DPB to ascertain FAT
   140                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
   141 000006CE 53                  <1>     push rbx
   142 000006CF 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   143 000006D2 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
   144 000006D7 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   145 000006DD 730F                <1>     jae .exit
   146 000006DF FFC9                <1>     dec ecx     ;FAT 12 marker
   147 000006E1 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   148 000006E7 7205                <1>     jb .exit
   149 000006E9 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
   150                              <1> .exit:
   151 000006EE 5B                  <1>     pop rbx
   152 000006EF C3                  <1>     ret
   153                              <1> 
   154                              <1> clust2FATEntry:
   155                              <1> ;Converts a cluster number to a offset in the FAT
   156                              <1> ;Entry:  rsi points to the DPB for the transacting device
   157                              <1> ;        eax = Cluster number to look for
   158                              <1> ;Exit:   eax = Sector on disk of FAT 
   159                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
   160                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
   161 000006F0 53                  <1>     push rbx
   162 000006F1 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   163 000006F4 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   164 000006FA 731E                <1>     jae .fat32
   165 000006FC 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   166 00000702 7209                <1>     jb .fat12
   167                              <1> ;FAT16
   168 00000704 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
   169 00000706 6801000000          <1>     push qword 1
   170 0000070B EB15                <1>     jmp short .common
   171                              <1> .fat12:
   172 0000070D 89C1                <1>     mov ecx, eax    ;ecx = eax
   173 0000070F D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
   174 00000711 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
   175 00000713 6800000000          <1>     push qword 0
   176 00000718 EB08                <1>     jmp short .common
   177                              <1> .fat32:
   178 0000071A 6802000000          <1>     push qword 2
   179 0000071F C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   180                              <1> .common:
   181                              <1> ;eax has the FAToffset
   182 00000722 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   183 00000725 BA01000000          <1>     mov edx, 1
   184 0000072A D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   185 0000072C 89D1                <1>     mov ecx, edx
   186 0000072E 31D2                <1>     xor edx, edx    ;edx = 0
   187 00000730 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   188 00000732 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
   189 00000736 01D8                <1>     add eax, ebx
   190 00000738 59                  <1>     pop rcx ;Pop the FAT type back into rcx
   191 00000739 5B                  <1>     pop rbx
   192 0000073A C3                  <1>     ret
   193                              <1> getStartSectorOfCluster:
   194                              <1> ;Input: eax = Cluster Number
   195                              <1> ;       r9 = dpb pointer
   196                              <1> ;Output: eax = Starting Sector number for cluster
   197                              <1> ;Gives the data sector we are at in the current cluster
   198                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   199 0000073B 51                  <1>     push rcx
   200 0000073C 2D02000000          <1>     sub eax, 2
   201 00000741 418A4904            <1>     mov cl, byte [r9 + dpb.bSectorsPerClusterShift]
   202 00000745 D3E0                <1>     shl eax, cl
   203 00000747 4103410A            <1>     add eax, [r9 + dpb.dClusterHeapOffset]
   204                              <1>     ;eax now has the first sector of the current cluster
   205 0000074B 59                  <1>     pop rcx
   206 0000074C C3                  <1>     ret
   207                              <1> getNextSectorOfFile:
   208                              <1> ;This function will read the next sector for a file into a buffer.
   209                              <1> ;If the next sector to be read lives in the next cluster, it will update
   210                              <1> ; the file handle of the file being read/written to the new cluster
   211                              <1> ;
   212                              <1> ;Input: r8 = sft pointer
   213                              <1> ;       r9 = dpb pointer
   214                              <1> ;Output:
   215                              <1> ;       rbx = Pointer to buffer data
   216                              <1> ;       CF = NC, buffer OK to read
   217                              <1> ;       CF = CY, buffer not ok, something went wrong
   218                              <1> ;           ZF = ZE(1), Data not flushed to disk
   219                              <1> ;           ZF = NZ(0), Data no read from disk
   220                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   221                              <1>     ; next cluster and read first sector 
   222 0000074D 50                  <1>     push rax
   223 0000074E 51                  <1>     push rcx
   224 0000074F 52                  <1>     push rdx
   225 00000750 56                  <1>     push rsi
   226 00000751 57                  <1>     push rdi
   227                              <1>     ;Check if we need to go to next cluster
   228 00000752 66418B401F          <1>     mov ax, word [r8 + sft.wRelSect]    ;Upper byte is ALWAYS 0
   229 00000757 413A4103            <1>     cmp al, byte [r9 + dpb.bMaxSectorInCluster]
   230 0000075B 745F                <1>     je .gotoNextCluster
   231                              <1>     ;Goto next sector
   232 0000075D 6641FF401F          <1>     inc word [r8 + sft.wRelSect]    ;Goto next sector in cluster
   233                              <1> .getSector:
   234 00000762 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get cluster number
   235 00000766 E8D0FFFFFF          <1>     call getStartSectorOfCluster
   236 0000076B 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Get relative sector number
   237                              <1>     ;eax now has the correct sector in the cluster
   238 00000770 01D8                <1>     add eax, ebx    
   239                              <1>     ;Read the sector into a buffer
   240                              <1>     ;The sector read here is either DATA or DOS
   241 00000772 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   242 00000776 488D3D85F8FFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   243 0000077D B90B000000          <1>     mov ecx, 11             ;File name length
   244 00000782 F3A6                <1>     repe cmpsb
   245 00000784 742D                <1>     je .OSFile
   246 00000786 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   247 0000078A 488D3D7DF8FFFF      <1>     lea rdi, dosKernName
   248 00000791 B90B000000          <1>     mov ecx, 11             ;File name length
   249 00000796 F3A6                <1>     repe cmpsb
   250 00000798 7419                <1>     je .OSFile
   251                              <1>     ;Not an OS file, dataBuffer
   252 0000079A B108                <1>     mov cl, dataBuffer
   253                              <1> .getSectorRead:
   254 0000079C 4C89CE              <1>     mov rsi, r9
   255 0000079F E813FDFFFF          <1>     call readBuffer
   256 000007A4 7211                <1>     jc .getSectorFailed
   257 000007A6 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   258                              <1> .getSectorExit:
   259 000007AD 5F                  <1>     pop rdi
   260 000007AE 5E                  <1>     pop rsi
   261 000007AF 5A                  <1>     pop rdx
   262 000007B0 59                  <1>     pop rcx
   263 000007B1 58                  <1>     pop rax
   264 000007B2 C3                  <1>     ret
   265                              <1> .OSFile:
   266 000007B3 B101                <1>     mov cl, dosBuffer
   267 000007B5 EBE5                <1>     jmp short .getSectorRead
   268                              <1> .getSectorFailed:
   269                              <1>     ;CF = CY => Something went wrong!
   270                              <1>     ;   Set the Zero flag for data not flushed to disk
   271                              <1>     ;   Clear Zero flag for data not read from disk
   272 000007B7 84ED                <1>     test ch, ch ;This sets the zero flag correctly, but mangles CF
   273 000007B9 F9                  <1>     stc ;Set the carry flag!
   274 000007BA EBF1                <1>     jmp short .getSectorExit
   275                              <1> 
   276                              <1> .gotoNextCluster:
   277                              <1>     ;Read FAT, find next cluster in cluster map, update SFT entries
   278 000007BC 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get the current cluster
   279 000007C0 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi, eax has cluster number
   280 000007C3 E828FFFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   281 000007C8 410FB75905          <1>     movzx ebx, word [r9 + dpb.wFAToffset]
   282 000007CD 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   283 000007CF B102                <1>     mov cl, fatBuffer
   284 000007D1 E8E1FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   285 000007D6 72DF                <1>     jc .getSectorFailed
   286                              <1>     ;Check if FAT 12, 16, 32
   287 000007D8 4885FF              <1>     test rdi, rdi
   288 000007DB 7429                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   289 000007DD 48F7C701000000      <1>     test rdi, 1
   290 000007E4 7407                <1>     jz .goToNextClusterCommonFat32
   291                              <1>     ;Here we handle FAT16
   292 000007E6 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   293 000007EB EB09                <1>     jmp short .goToNextClusterCommon
   294                              <1> .goToNextClusterCommonFat32:
   295 000007ED 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   296 000007F1 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   297                              <1> .goToNextClusterCommon:
   298 000007F6 41894039            <1>     mov dword [r8 + sft.dAbsClusr], eax ;Save new cluster number
   299 000007FA 6641C7401F0000      <1>     mov word [r8 + sft.wRelSect], 0 ;First sector in next cluster
   300 00000801 E95CFFFFFF          <1>     jmp .getSector
   301                              <1> .gotoNextClusterFat12:
   302                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   303                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   304 00000806 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   305 00000809 FFC0                <1>     inc eax ;Get next sector
   306 0000080B E8A7FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   307 00000810 72A5                <1>     jc .getSectorFailed
   308                              <1>     ;rdi has first buffer header, rbx has second buffer header
   309                              <1>     ;rdx has offset into first header for entry
   310 00000812 41F7403901000000    <1>     test dword [r8 + sft.dAbsClusr], 1  ;Check if cluster is odd
   311 0000081A 7429                <1>     jz .gotoNextClusterFat12Even
   312                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   313 0000081C B801000000          <1>     mov eax, 1
   314 00000821 418A4802            <1>     mov cl, byte [r8 + dpb.bBytesPerSectorShift]
   315 00000825 D3E0                <1>     shl eax, cl
   316 00000827 29D0                <1>     sub eax, edx
   317 00000829 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   318 0000082B 750E                <1>     jnz .gotoNextClusterFat12NoCross
   319                              <1>     ;Boundary cross, build entry properly
   320 0000082D 31C0                <1>     xor eax, eax
   321 0000082F 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   322 00000833 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   323 00000836 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   324 00000839 EBBB                <1>     jmp short .goToNextClusterCommon
   325                              <1> .gotoNextClusterFat12NoCross:
   326 0000083B 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   327 00000840 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   328 00000843 EBB1                <1>     jmp short .goToNextClusterCommon
   329                              <1> .gotoNextClusterFat12Even:
   330                              <1>     ;Here the cluster is even and can't cross a sector boundary
   331 00000845 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   332 0000084A 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   333 0000084F EBA5                <1>     jmp short .goToNextClusterCommon
   334                              <1> ;---------------------------------------------------:
   335                              <1> ;                   KERNEL FUNCTIONS                :
   336                              <1> ;---------------------------------------------------:
   337                              <1> makeDIR:           ;ah = 39h
   338                              <1> removeDIR:         ;ah = 3Ah
   339                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   340                              <1> getCurrentDIR:     ;ah = 47h
   341                              <1> getSetFileDateTime:;ah = 57h
   342                              <1> trueName:          ;ah = 60h, get fully qualified name
   343 00000851 C3                  <1>     ret
    18                                  %include "./Source/Kernel/charFunctions.asm"
    19                              <1> ;Dos default char functions live here
    20                              <1> 
    21                              <1> stdinReadEcho:     ;ah = 01h
    22                              <1> ;Return char that has been read and echoed in al
    23 00000852 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    24 00000859 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
    25 00000860 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    26 00000863 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    27 00000867 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    28 0000086D 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    29 00000871 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    30 00000878 FF158D140000        <1>     call qword [conHdr + drvHdr.strPtr]
    31 0000087E FF158F140000        <1>     call qword [conHdr + drvHdr.intPtr]
    32 00000884 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
    33 0000088B 7432                <1>     jz .stdireexit
    34 0000088D 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    35 00000894 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
    36 0000089B C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    37 0000089E C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    38 000008A2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    39 000008A8 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    40 000008AC C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    41 000008B3 FF1552140000        <1>     call qword [conHdr + drvHdr.strPtr]
    42 000008B9 FF1554140000        <1>     call qword [conHdr + drvHdr.intPtr]
    43                              <1> .stdireexit:
    44 000008BF 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
    45 000008C5 C3                  <1>     ret
    46 000008C6 00                  <1> .stdinReadEchoBuffer    db 0
    47                              <1> stdoutWrite:       ;ah = 02h
    48                              <1> ;Bspace is regular cursor left, does not insert a blank
    49 000008C7 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    50 000008CD 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    51 000008D4 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    52 000008DB C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    53 000008DE C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    54 000008E2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    55 000008E8 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    56 000008EC C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    57 000008F3 FF1512140000        <1>     call qword [conHdr + drvHdr.strPtr]
    58 000008F9 FF1514140000        <1>     call qword [conHdr + drvHdr.intPtr]
    59 000008FF C3                  <1>     ret
    60 00000900 00                  <1> .stdoutWriteBuffer db 0
    61                              <1> stdauxRead:        ;ah = 03h
    62                              <1> stdauxWrite:       ;ah = 04h
    63                              <1> stdprnWrite:       ;ah = 05h
    64                              <1> directCONIO:       ;ah = 06h
    65                              <1> waitDirectInNoEcho:;ah = 07h
    66                              <1> ;Return char in al
    67 00000901 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    68 00000908 488D052B000000      <1>     lea rax, .function7buffer
    69 0000090F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    70 00000912 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    71 00000916 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    72 0000091C 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    73 00000920 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    74 00000927 FF15DE130000        <1>     call qword [conHdr + drvHdr.strPtr]
    75 0000092D FF15E0130000        <1>     call qword [conHdr + drvHdr.intPtr]
    76 00000933 8A0501000000        <1>     mov al, byte [.function7buffer]
    77 00000939 C3                  <1>     ret
    78 0000093A 00                  <1> .function7buffer    db 0
    79                              <1> waitStdinNoEcho:   ;ah = 08h
    80 0000093B C3                  <1>     ret
    81                              <1> printString:       ;ah = 09h
    82 0000093C 31C9                <1>     xor ecx, ecx    ;Clear char counter
    83 0000093E B824000000          <1>     mov eax, "$"    ;Terminating char
    84 00000943 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    85                              <1> .ps0:   ;Search for $ to get count of chars
    86 00000946 AE                  <1>     scasb
    87 00000947 7404                <1>     je .ps1
    88 00000949 FFC1                <1>     inc ecx
    89 0000094B EBF9                <1>     jmp short .ps0
    90                              <1> .ps1:   ;Use handle 
    91 0000094D 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    92 00000954 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    93 00000957 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    94 0000095B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    95 00000961 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    96 00000965 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    97 00000968 FF159D130000        <1>     call qword [conHdr + drvHdr.strPtr]
    98 0000096E FF159F130000        <1>     call qword [conHdr + drvHdr.intPtr]
    99                              <1> 
   100 00000974 488B1D(21C10300)    <1>     mov rbx, qword [oldRSP]
   101 0000097B 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   102 0000097D C3                  <1>     ret
   103                              <1> buffStdinInput:    ;ah = 0Ah
   104                              <1> checkStdinStatus:  ;ah = 0Bh
   105                              <1> clearbuffDoFunc:   ;ah = 0Ch
    19                                  %include "./Source/Kernel/fcbFunctions.asm"
    20                              <1> openFileFCB:       ;ah = 0Fh
    21                              <1> closeFileFCB:      ;ah = 10h
    22                              <1> findFirstFileFCB:  ;ah = 11h
    23                              <1> findNextFileFCB:   ;ah = 12h
    24                              <1> deleteFileFCB:     ;ah = 13h
    25                              <1> sequentialReadFCB: ;ah = 14h
    26                              <1> sequentialWriteFCB:;ah = 15h
    27                              <1> createFileFCB:     ;ah = 16h
    28                              <1> renameFileFCB:     ;ah = 17h
    29 0000097E C3                  <1>     ret
    30                              <1> setDTA:            ;ah = 1Ah
    31                              <1> ;Called with:
    32                              <1> ;   rdx = Pointer to the new default DTA
    33 0000097F 488B1D(21C10300)    <1>     mov rbx, qword [oldRSP]
    34 00000986 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    35 0000098A 488915(E8C00300)    <1>     mov qword [currentDTA], rdx
    36 00000991 C3                  <1>     ret
    37                              <1> randomReadFCB:     ;ah = 21h
    38                              <1> randomWriteFCB:    ;ah = 22h
    39                              <1> getFileSizeFCB:    ;ah = 23h
    40                              <1> setRelRecordFCB:   ;ah = 24h
    41                              <1> randBlockReadFCB:  ;ah = 27h
    42                              <1> randBlockWriteFCB: ;ah = 28h
    43                              <1> parseFilenameFCB:  ;ah = 29h
    44 00000992 C3                  <1>     ret
    45                              <1> getDTA:            ;ah = 2Fh
    46 00000993 488B15(21C10300)    <1>     mov rdx, qword [oldRSP]
    47 0000099A 488B1D(E8C00300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    48 000009A1 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    49 000009A5 C3                  <1>     ret
    20                                  %include "./Source/Kernel/handleFunctions.asm"
    21                              <1> ;-----------------------------------:
    22                              <1> ;    File Handle Kernel routines    :
    23                              <1> ;-----------------------------------:
    24                              <1> 
    25                              <1> createFileHdl:     ;ah = 3Ch, handle function
    26                              <1> openFileHdl:       ;ah = 3Dh, handle function
    27                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    28 000009A6 C3                  <1>     ret
    29                              <1> readFileHdl:       ;ah = 3Fh, handle function
    30 000009A7 488B2D(21C10300)    <1>     mov rbp, qword [oldRSP]
    31 000009AE E83F000000          <1>     call getSFTPtr
    32 000009B3 722B                <1>     jc .rfhErrorHandle  ;Function can only fail for bad file handle
    33                              <1> ;Here rdi points to the correct SFT 
    34 000009B5 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    35 000009B9 A802                <1>     test al, RWAccess  ;Check r/w permission
    36 000009BB 7504                <1>     jnz .rfh2   ;Bit set, proceed
    37 000009BD 84C0                <1>     test al, al  ;Check read access (it is 0)
    38 000009BF 751F                <1>     jnz .rfhNoPermission    ;If not zero then it is write only permission
    39                              <1> .rfh2:
    40                              <1>     ;So now read the number of bytes from the data buffers
    41 000009C1 4889FB              <1>     mov rbx, rdi    ;Move SFT pointer into rbx
    42 000009C4 F6430520            <1>     test byte [rbx + sft.wDeviceInfo], devBinary
    43 000009C8 7409                <1>     jz .rfhASCII    ;If not set, read in ASCII
    44 000009CA E870000000          <1>     call readBinaryBytesFromFile
    45 000009CF 720F                <1>     jc .rfCriticalError
    46 000009D1 EB07                <1>     jmp short .rfhExitOK
    47                              <1> .rfhASCII:
    48 000009D3 E866000000          <1>     call readASCIIBytesFromFile
    49 000009D8 7206                <1>     jc .rfCriticalError
    50                              <1> .rfhExitOK:
    51 000009DA 88C8                <1>     mov al, cl  ;Get low byte in cl
    52 000009DC 894D00              <1>     mov dword [rbp + callerFrame.rax], ecx  ;Save number of bytes transf.
    53 000009DF C3                  <1>     ret
    54                              <1> .rfCriticalError:
    55                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    56                              <1> .rfhErrorHandle:
    57                              <1>     ;Fail due to bad file handle provided
    58                              <1> .rfhNoPermission:
    59                              <1>     ;Fail due to bad permissions
    60                              <1> writeFileHdl:      ;ah = 40h, handle function
    61 000009E0 E80D000000          <1>     call getSFTPtr
    62 000009E5 720A                <1>     jc .wfhErrorHandle  ;Function can only fail for bad file handle
    63 000009E7 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    64 000009EB 66A90300            <1>     test ax, 3
    65 000009EF 7400                <1>     jz .wfhNoPermission ;Bad permissions! No r/w or w permissions
    66                              <1> .wfCriticalError:
    67                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    68                              <1> .wfhErrorHandle:
    69                              <1>     ;Fail due to bad file handle provided
    70                              <1> .wfhNoPermission:
    71                              <1>     ;Fail due to bad permissions
    72                              <1> 
    73                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    74                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    75                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    76                              <1> ioctrl:            ;ah = 44h, handle function
    77                              <1> duplicateHandle:   ;ah = 45h, handle function
    78                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    79                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    80                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    81                              <1> renameFile:        ;ah = 56h
    82                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    83                              <1> createNewFile:     ;ah = 5Bh
    84                              <1> lockUnlockFile:    ;ah = 5Ch
    85                              <1> setHandleCount:    ;ah = 67h
    86                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    87 000009F1 C3                  <1>     ret
    88                              <1> ;-----------------------------------:
    89                              <1> ;        File Handle routines       :
    90                              <1> ;-----------------------------------:
    91                              <1> getSFTPtr:
    92                              <1> ;Gets the SFT pointer for a given file handle from the calling application
    93                              <1> ;On entry:
    94                              <1> ;   bl = File handle
    95                              <1> ;On exit:
    96                              <1> ;   rsi = currentPSP
    97                              <1> ;   rdi = SFT pointer
    98                              <1> ;   rax, rbx trashed
    99 000009F2 488B35(F0C00300)    <1>     mov rsi, qword [currentPSP]
   100 000009F9 480FB6DB            <1>     movzx rbx, bl
   101 000009FD 8A5C1E2A            <1>     mov bl, byte [rsi + psp.jobFileTbl + rbx]   ;Use jft entry to get sft num
   102 00000A01 31C0                <1>     xor eax, eax
   103 00000A03 488B3D(88C00300)    <1>     mov rdi, qword [sftHeadPtr]
   104                              <1> .gsp0:
   105 00000A0A 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   106 00000A0E 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   107 00000A10 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   108 00000A12 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   109 00000A19 7421                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   110 00000A1B 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   111 00000A1E EBEA                <1>     jmp short .gsp0 ;Search again
   112                              <1> .gsp1: 
   113                              <1>     ;Now point to the right entry
   114 00000A20 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   115 00000A22 0FB6C0              <1>     movzx eax, al
   116 00000A25 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   117 00000A2C 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   118 00000A2E 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   119                              <1> .gsp11:
   120 00000A30 4881C73D000000      <1>     add rdi, sft_size
   121 00000A37 FEC8                <1>     dec al
   122 00000A39 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   123                              <1> .gsp12:
   124 00000A3B C3                  <1>     ret
   125                              <1> .gspFail:
   126 00000A3C F9                  <1>     stc
   127 00000A3D C3                  <1>     ret
   128                              <1> 
   129                              <1> readASCIIBytesFromFile:
   130 00000A3E C3                  <1>     ret
   131                              <1> readBinaryBytesFromFile:
   132                              <1> ;Reads a byte from a SFT entry, does not translate it. 
   133                              <1> ;Read or RW permissions are checked at the INT 41h level
   134                              <1> ;Entry: rbp = Pointer to the caller stack
   135                              <1> ;       rbx = SFT entry pointer
   136                              <1> ;       On stack:
   137                              <1> ;           rdx = Address of the data buffer to read to
   138                              <1> ;           ecx = Number of bytes to read
   139                              <1> ;Exit: If CF = NC : All ok!
   140                              <1> ;       rbx = SFT entry pointer
   141                              <1> ;       ecx = Number of chars read/written
   142                              <1> ;      If CF = CY : Error!
   143                              <1> ;       rbx = SFT entry pointer
   144                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
   145                              <1> 
   146 00000A3F 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
   147 00000A45 755C                <1>     jnz .readBinaryBytesFromCharDevice
   148                              <1> .readBinaryBytesFromHardFile:
   149                              <1> ;Disk files are accessed from here
   150                              <1> ;Use the sector buffers if the data is already buffered,
   151                              <1> ; else use the dpb to fill a sector buffer
   152 00000A47 53                  <1>     push rbx
   153 00000A48 4989D8              <1>     mov r8, rbx                     ;Use r8 as sft pointer
   154 00000A4B 4D8B4807            <1>     mov r9, qword [r8 + sft.qPtr]   ;Use r9 as dpb pointer
   155                              <1>     ;First compute the number of bytes to read for the current sector
   156                              <1>     ;Compute how many bytes in a sector
   157 00000A4F 418A4902            <1>     mov cl, byte [r9 + dpb.bBytesPerSectorShift]
   158 00000A53 B801000000          <1>     mov eax, 1
   159 00000A58 D3E0                <1>     shl eax, cl
   160 00000A5A 89C1                <1>     mov ecx, eax    ;ecx has bytes per sector
   161 00000A5C 488B4510            <1>     mov rax, qword [rbp + callerFrame.rcx]  ;Get total number of bytes
   162 00000A60 31D2                <1>     xor edx, edx
   163 00000A62 48895510            <1>     mov qword [rbp + callerFrame.rcx], rdx  ;Zero this field
   164 00000A66 F7F1                <1>     div ecx ;Divide by number of bytes per sector
   165 00000A68 87CA                <1>     xchg ecx, edx    ;Get "in current sector remainder of bytes" in ecx
   166                              <1>                      ;and bytes per sector in edx
   167 00000A6A 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr]  ;Get cluster number
   168 00000A6E E8C8FCFFFF          <1>     call getStartSectorOfCluster
   169 00000A73 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Add the offset into the cluster
   170 00000A78 01D8                <1>     add eax, ebx    ;eax now has the sector number
   171 00000A7A 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi
   172 00000A7D 4831FF              <1>     xor rdi, rdi
   173 00000A80 89CF                <1>     mov edi, ecx    ;Save in current sector remainder of bytes in edi
   174 00000A82 B108                <1>     mov cl, dataBuffer
   175 00000A84 E82EFAFFFF          <1>     call readBuffer ;Read the data
   176 00000A89 7218                <1>     jc .readBinaryBytesFromHardFileError
   177 00000A8B 4881C320000000      <1>     add rbx, bufferHdr.dataarea
   178 00000A92 4889DE              <1>     mov rsi, rbx
   179 00000A95 4889F9              <1>     mov rcx, rdi    ;Get the number of bytes to read in this sector to rbx
   180 00000A98 488B7D18            <1>     mov rdi, qword [rbp + callerFrame.rdx]  ;Point to destination
   181 00000A9C 48014D10            <1>     add qword [rbp + callerFrame.rcx], rcx
   182 00000AA0 F3A4                <1>     rep movsb   ;Move the bytes from this sector
   183                              <1> 
   184 00000AA2 5B                  <1>     pop rbx
   185                              <1> .readBinaryBytesFromHardFileError:
   186                              <1> 
   187                              <1> .readBinaryBytesFromCharDevice:
   188                              <1> ;Devices are accessed from here
   189 00000AA3 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
   190 00000AA7 53                  <1>     push rbx
   191 00000AA8 488D1D(24C00300)    <1>     lea rbx, charReqHdr
   192 00000AAF C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   193 00000AB2 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
   194 00000AB6 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   195 00000ABC 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   196 00000AC0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   197                              <1> 
   198 00000AC3 FF550A              <1>     call qword [rbp + drvHdr.strPtr]
   199 00000AC6 FF5512              <1>     call qword [rbp + drvHdr.intPtr]
   200 00000AC9 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
   201 00000ACC 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
   202 00000AD2 5B                  <1>     pop rbx
   203 00000AD3 7400                <1>     jz .readBinaryBytesExitGood  ;Error bit not set, all good!
   204                              <1> .readBinaryBytesExitGood:
   205 00000AD5 C3                  <1>     ret
   206                              <1> 
    21                                  %include "./Source/Kernel/memoryFunctions.asm"
    22                              <1> ;Memory related functions
    23                              <1> 
    24                              <1> ;-----------------------------------:
    25                              <1> ;  Memory related Kernel routines   :
    26                              <1> ;-----------------------------------:
    27                              <1> allocateMemory:    ;ah = 48h
    28                              <1> freeMemory:        ;ah = 49h
    29                              <1> reallocMemory:     ;ah = 4Ah
    30                              <1> getsetMallocStrat: ;ah = 58h
    31 00000AD6 C3                  <1>     ret
    32                              <1> ;-----------------------------------:
    33                              <1> ;      Memory related routines      :
    34                              <1> ;-----------------------------------:
    35                              <1> verifyIntegrityOfMCBChain:
    36 00000AD7 488B1D(78C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
    37                              <1> .ok:
    38 00000ADE 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
    39 00000AE1 7406                <1>     je .ok1
    40 00000AE3 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
    41 00000AE6 7516                <1>     jne .sysHalt    ;It was not M or Z, fail violently
    42                              <1> .exit:
    43 00000AE8 C3                  <1>     ret ;We have reached the end of the chain, return all good!
    44                              <1> .ok1:
    45 00000AE9 31C0                <1>     xor eax, eax
    46 00000AEB 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
    47 00000AEE 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
    48 00000AF2 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
    49 00000AF9 4801C3              <1>     add rbx, rax
    50 00000AFC EBE0                <1>     jmp short .ok
    51                              <1> .sysHalt:
    52                              <1> ;Only arrive here if the integrity of the system is not verified
    53                              <1> ;Lock the system
    54 00000AFE 488D1D0E000000      <1>     lea rbx, .sysHltString
    55 00000B05 B409                <1>     mov ah, 09h
    56 00000B07 CD41                <1>     int 41h
    57 00000B09 FA                  <1>     cli ;Halt interrupts
    58 00000B0A B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
    59 00000B0C E6A1                <1>     out 0A1h, al
    60 00000B0E E621                <1>     out 021h, al
    61 00000B10 F4                  <1>     hlt             ;Halt the system
    62 00000B11 EBFB                <1>     jmp short $ - 3 ;Go back far enough to capture the hlt
    63 00000B13 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
    63 00000B1C 6C6F636174696F6E20- <1>
    63 00000B25 6572726F720D0A      <1>
    64 00000B2C 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
    64 00000B35 616420434F4D4D414E- <1>
    64 00000B3E 442C2073797374656D- <1>
    64 00000B47 2068616C74656424    <1>
    22                                  %include "./Source/Kernel/dateTimeFunctions.asm"
    23                              <1> ;Major kernel date time functions and subroutines
    24                              <1> 
    25                              <1> getDate:           ;ah = 2Ah
    26                              <1> setDate:           ;ah = 2Bh
    27                              <1> getTime:           ;ah = 2Ch
    28                              <1> setTime:           ;ah = 2Dh
    29 00000B4F C3                  <1>     ret
    23                                  %include "./Source/Kernel/localisation.asm"
    24                              <1> ;Localisation based functions live here
    25                              <1> 
    26                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    27                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    28                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    29                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    30 00000B50 C3                  <1>     ret
    24                                  %include "./Source/Kernel/dosKernel.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;       Misc System routines        :
    27                              <1> ;-----------------------------------:
    28                              <1> criticalDOSError:
    29                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    30                              <1> ; to the critical error handler.
    31                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    32                              <1> ;               AH = Critical Error Bitfield
    33                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    34                              <1> ;               Bit 6 - Reserved
    35                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    36                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    37                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    38                              <1> ;               Bits [2-1] = Affected Disk Error
    39                              <1> ;                     0 0   DOS area
    40                              <1> ;                     0 1   FAT area
    41                              <1> ;                     1 0   Directory area
    42                              <1> ;                     1 1   Data area
    43                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    44                              <1> ;               AL  = Failing drive number if AH[7] = 0
    45                              <1> ;               DIL = Error code for errorMsg
    46                              <1> ;               RSI = EA of Device Header for which device the error occured
    47                              <1> ;Return:
    48                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    49                              <1> ;                  = 1 - Retry the Operation    (Retry)
    50                              <1> ;                  = 2 - Terminate the Program  (Abort)
    51                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    52                              <1> ; Return response from int 44h in al
    53 00000B51 FA                  <1>     cli ;Disable Interrupts
    54 00000B52 C605(E0C00300)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    55 00000B59 488925(0DC10300)    <1>     mov qword [xInt44hRSP], rsp
    56 00000B60 488B25(21C10300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    57 00000B67 CD44                <1>     int 44h ;Call critical error handler
    58 00000B69 488B25(0DC10300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    59 00000B70 C605(E0C00300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    60 00000B77 FB                  <1>     sti ;Reenable Interrupts
    61 00000B78 C3                  <1>     ret
    62                              <1> 
    63                              <1> findDPB:
    64                              <1> ;Finds the DPB for a given drive
    65                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    66                              <1> ;Output: al = 00, rbp = Pointer to the DPB
    67                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    68 00000B79 488B1D(80C00300)    <1>     mov rbx, qword [dpbHeadPtr]
    69                              <1> .fd1:
    70 00000B80 30C0                <1>     xor al, al
    71 00000B82 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
    72 00000B85 740F                <1>     je .fd2
    73 00000B87 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
    74 00000B8B B0FF                <1>     mov al, -1
    75 00000B8D 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
    76 00000B94 75EA                <1>     jne .fd1
    77                              <1> .fd2:
    78                              <1>     %if DEBUG
    79                              <1>     ;Print DPB 
    80                              <1>     debugEnterM
   326 00000B96 4889257EF4FFFF      <2>  mov qword [debOldRSP], rsp
   327 00000B9D 48BC00000800000000- <2>  mov rsp, debStackTop
   327 00000BA6 00                  <2>
   328                              <2> 
   329 00000BA7 50                  <2>  push rax
   330 00000BA8 53                  <2>  push rbx
   331 00000BA9 51                  <2>  push rcx
   332 00000BAA 52                  <2>  push rdx
   333 00000BAB 56                  <2>  push rsi
   334 00000BAC 57                  <2>  push rdi
   335 00000BAD 55                  <2>  push rbp
   336 00000BAE 4150                <2>  push r8
   337 00000BB0 4151                <2>  push r9
   338 00000BB2 4152                <2>  push r10
   339 00000BB4 4153                <2>  push r11
   340 00000BB6 4154                <2>  push r12
   341 00000BB8 4155                <2>  push r13
   342 00000BBA 4156                <2>  push r14
   343 00000BBC 4157                <2>  push r15
   344 00000BBE 9C                  <2>  pushfq
    81 00000BBF 4989E8              <1>     mov r8, rbp ;Save dpb pointer
    82 00000BC2 488D2D0F000000      <1>     lea rbp, .l0000
    83 00000BC9 E820F5FFFF          <1>     call debPrintNullString
    84 00000BCE 4C89C5              <1>     mov rbp, r8
    85 00000BD1 E8F8F6FFFF          <1>     call debDPBptr
    86 00000BD6 EB1C                <1>     jmp short .l0001
    87 00000BD8 496E7465726E616C20- <1> .l0000 db "Internal call to find DPB",0Ah,0Dh,0
    87 00000BE1 63616C6C20746F2066- <1>
    87 00000BEA 696E64204450420A0D- <1>
    87 00000BF3 00                  <1>
    88                              <1> .l0001:
    89                              <1>     debugExitM
   348 00000BF4 9D                  <2>  popfq
   349 00000BF5 415F                <2>  pop r15
   350 00000BF7 415E                <2>  pop r14
   351 00000BF9 415D                <2>  pop r13
   352 00000BFB 415C                <2>  pop r12
   353 00000BFD 415B                <2>  pop r11
   354 00000BFF 415A                <2>  pop r10
   355 00000C01 4159                <2>  pop r9
   356 00000C03 4158                <2>  pop r8
   357 00000C05 5D                  <2>  pop rbp
   358 00000C06 5F                  <2>  pop rdi
   359 00000C07 5E                  <2>  pop rsi
   360 00000C08 5A                  <2>  pop rdx
   361 00000C09 59                  <2>  pop rcx
   362 00000C0A 5B                  <2>  pop rbx
   363 00000C0B 58                  <2>  pop rax
   364 00000C0C 488B2508F4FFFF      <2>  mov rsp, qword [debOldRSP]
    90                              <1>     %endif
    91 00000C13 C3                  <1>     ret
    92                              <1> getCDS:
    93                              <1>     ;Gets the CDS for the current drive in rax
    94                              <1>     ;Input: rax = Drive number, 0 = A ...
    95                              <1>     ;Output: rbx = Pointer to CDS for drive in rax
    96 00000C14 50                  <1>     push rax
    97 00000C15 51                  <1>     push rcx
    98 00000C16 52                  <1>     push rdx
    99 00000C17 488D1D(AAC00300)    <1>     lea rbx, qword [cdsHeadPtr] ;Point to cds array
   100 00000C1E 48B95B000000000000- <1>     mov rcx, cds_size   
   100 00000C27 00                  <1>
   101 00000C28 31D2                <1>     xor edx, edx
   102 00000C2A F7E1                <1>     mul ecx 
   103 00000C2C 4801C3              <1>     add rbx, rax    ;Move rbx to the right offset in the array
   104 00000C2F 5A                  <1>     pop rdx
   105 00000C30 59                  <1>     pop rcx
   106 00000C31 58                  <1>     pop rax
   107 00000C32 C3                  <1>     ret
   108                              <1> ;-----------------------------------:
   109                              <1> ;        Interrupt routines         :
   110                              <1> ;-----------------------------------:
   111                              <1> terminateProcess:   ;Int 40h
   112 00000C33 48CF                <1>     iretq
   113                              <1> terminateHandler:   ;Int 42h
   114                              <1> ctrlCHandler:       ;Int 43h
   115 00000C35 48CF                <1>     iretq
   116                              <1> absDiskWrite:       ;Int 46h
   117                              <1> ;al = Drive number
   118                              <1> ;rbx = Memory Buffer address to read from
   119                              <1> ;ecx = Number of sectors to write
   120                              <1> ;rdx = Start LBA to write to
   121                              <1>     %if DEBUG
   122                              <1>     ;Print DPB 
   123                              <1>     debugEnterM
   326 00000C37 488925DDF3FFFF      <2>  mov qword [debOldRSP], rsp
   327 00000C3E 48BC00000800000000- <2>  mov rsp, debStackTop
   327 00000C47 00                  <2>
   328                              <2> 
   329 00000C48 50                  <2>  push rax
   330 00000C49 53                  <2>  push rbx
   331 00000C4A 51                  <2>  push rcx
   332 00000C4B 52                  <2>  push rdx
   333 00000C4C 56                  <2>  push rsi
   334 00000C4D 57                  <2>  push rdi
   335 00000C4E 55                  <2>  push rbp
   336 00000C4F 4150                <2>  push r8
   337 00000C51 4151                <2>  push r9
   338 00000C53 4152                <2>  push r10
   339 00000C55 4153                <2>  push r11
   340 00000C57 4154                <2>  push r12
   341 00000C59 4155                <2>  push r13
   342 00000C5B 4156                <2>  push r14
   343 00000C5D 4157                <2>  push r15
   344 00000C5F 9C                  <2>  pushfq
   124 00000C60 488D2D07000000      <1>     lea rbp, .l0000
   125 00000C67 E882F4FFFF          <1>     call debPrintNullString
   126 00000C6C EB13                <1>     jmp short .l0001
   127 00000C6E 456E746572696E6720- <1> .l0000 db "Entering Int 46h",0Ah,0Dh,0
   127 00000C77 496E74203436680A0D- <1>
   127 00000C80 00                  <1>
   128                              <1> .l0001:
   129                              <1>     debugExitM
   348 00000C81 9D                  <2>  popfq
   349 00000C82 415F                <2>  pop r15
   350 00000C84 415E                <2>  pop r14
   351 00000C86 415D                <2>  pop r13
   352 00000C88 415C                <2>  pop r12
   353 00000C8A 415B                <2>  pop r11
   354 00000C8C 415A                <2>  pop r10
   355 00000C8E 4159                <2>  pop r9
   356 00000C90 4158                <2>  pop r8
   357 00000C92 5D                  <2>  pop rbp
   358 00000C93 5F                  <2>  pop rdi
   359 00000C94 5E                  <2>  pop rsi
   360 00000C95 5A                  <2>  pop rdx
   361 00000C96 59                  <2>  pop rcx
   362 00000C97 5B                  <2>  pop rbx
   363 00000C98 58                  <2>  pop rax
   364 00000C99 488B257BF3FFFF      <2>  mov rsp, qword [debOldRSP]
   130                              <1>     %endif
   131 00000CA0 50                  <1>     push rax
   132 00000CA1 53                  <1>     push rbx
   133 00000CA2 52                  <1>     push rdx
   134 00000CA3 55                  <1>     push rbp
   135 00000CA4 B408                <1>     mov ah, drvWRITE
   136 00000CA6 0225(0CC10300)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
   137 00000CAC EB6F                <1>     jmp short absDiskReadWriteCommon
   138                              <1> absDiskRead:        ;Int 45h
   139                              <1> ;al = Drive number
   140                              <1> ;rbx = Memory Buffer address to write to
   141                              <1> ;ecx = Number of sectors to read
   142                              <1> ;rdx = Start LBA to read from
   143                              <1>     %if DEBUG
   144                              <1>     ;Print DPB 
   145                              <1>     debugEnterM
   326 00000CAE 48892566F3FFFF      <2>  mov qword [debOldRSP], rsp
   327 00000CB5 48BC00000800000000- <2>  mov rsp, debStackTop
   327 00000CBE 00                  <2>
   328                              <2> 
   329 00000CBF 50                  <2>  push rax
   330 00000CC0 53                  <2>  push rbx
   331 00000CC1 51                  <2>  push rcx
   332 00000CC2 52                  <2>  push rdx
   333 00000CC3 56                  <2>  push rsi
   334 00000CC4 57                  <2>  push rdi
   335 00000CC5 55                  <2>  push rbp
   336 00000CC6 4150                <2>  push r8
   337 00000CC8 4151                <2>  push r9
   338 00000CCA 4152                <2>  push r10
   339 00000CCC 4153                <2>  push r11
   340 00000CCE 4154                <2>  push r12
   341 00000CD0 4155                <2>  push r13
   342 00000CD2 4156                <2>  push r14
   343 00000CD4 4157                <2>  push r15
   344 00000CD6 9C                  <2>  pushfq
   146 00000CD7 488D2D07000000      <1>     lea rbp, .l0000
   147 00000CDE E80BF4FFFF          <1>     call debPrintNullString
   148 00000CE3 EB13                <1>     jmp short .l0001
   149 00000CE5 456E746572696E6720- <1> .l0000 db "Entering Int 45h",0Ah,0Dh,0
   149 00000CEE 496E74203435680A0D- <1>
   149 00000CF7 00                  <1>
   150                              <1> .l0001:
   151                              <1>     debugExitM
   348 00000CF8 9D                  <2>  popfq
   349 00000CF9 415F                <2>  pop r15
   350 00000CFB 415E                <2>  pop r14
   351 00000CFD 415D                <2>  pop r13
   352 00000CFF 415C                <2>  pop r12
   353 00000D01 415B                <2>  pop r11
   354 00000D03 415A                <2>  pop r10
   355 00000D05 4159                <2>  pop r9
   356 00000D07 4158                <2>  pop r8
   357 00000D09 5D                  <2>  pop rbp
   358 00000D0A 5F                  <2>  pop rdi
   359 00000D0B 5E                  <2>  pop rsi
   360 00000D0C 5A                  <2>  pop rdx
   361 00000D0D 59                  <2>  pop rcx
   362 00000D0E 5B                  <2>  pop rbx
   363 00000D0F 58                  <2>  pop rax
   364 00000D10 488B2504F3FFFF      <2>  mov rsp, qword [debOldRSP]
   152                              <1>     %endif
   153 00000D17 50                  <1>     push rax
   154 00000D18 53                  <1>     push rbx
   155 00000D19 52                  <1>     push rdx
   156 00000D1A 55                  <1>     push rbp
   157 00000D1B B404                <1>     mov ah, drvREAD
   158                              <1> absDiskReadWriteCommon:
   159                              <1> ;Entered with the appropriate function number in ah
   160 00000D1D 52                  <1>     push rdx    ;Save start LBA
   161 00000D1E 50                  <1>     push rax
   162 00000D1F 88C2                <1>     mov dl, al
   163 00000D21 E853FEFFFF          <1>     call findDPB   ;Get dpb ptr in rbp
   164 00000D26 58                  <1>     pop rax
   165 00000D27 5A                  <1>     pop rdx
   166                              <1> 
   167 00000D28 C605(4EC00300)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   168 00000D2F 8805(4FC00300)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   169 00000D35 8825(50C00300)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   170 00000D3B 66C705(51C00300)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   170 00000D43 00                  <1>
   171 00000D44 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   172 00000D47 8805(5BC00300)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   173 00000D4D 48891D(5CC00300)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   174 00000D54 488915(68C00300)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   175 00000D5B 890D(64C00300)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   176 00000D61 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   177                              <1> 
   178 00000D65 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   179 00000D6C FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   180 00000D6F FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   181 00000D72 5D                  <1>     pop rbp
   182 00000D73 5A                  <1>     pop rdx
   183 00000D74 5B                  <1>     pop rbx
   184 00000D75 58                  <1>     pop rax
   185 00000D76 66F705(51C00300)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   185 00000D7E 80                  <1>
   186 00000D7F 7402                <1>     je .absDiskError
   187 00000D81 F8                  <1>     clc
   188 00000D82 C3                  <1>     ret
   189                              <1> .absDiskError:
   190 00000D83 8A05(51C00300)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   191 00000D89 B480                <1>     mov ah, 80h ;Attachment failure
   192 00000D8B 3C0C                <1>     cmp al, 0Ch ;Gen error
   193 00000D8D 741A                <1>     je .absExit
   194 00000D8F B440                <1>     mov ah, 40h ;Seek error
   195 00000D91 3C06                <1>     cmp al, 06h
   196 00000D93 7414                <1>     je .absExit
   197 00000D95 B408                <1>     mov ah, 08h ;Bad CRC
   198 00000D97 3C04                <1>     cmp al, 04h
   199 00000D99 740E                <1>     je .absExit
   200 00000D9B B404                <1>     mov ah, 04h ;Sector not found
   201 00000D9D 3C08                <1>     cmp al, 08h
   202 00000D9F 7408                <1>     je .absExit
   203 00000DA1 30E4                <1>     xor ah, ah  ;Write Protect Violation
   204 00000DA3 84C0                <1>     test al, al
   205 00000DA5 7402                <1>     je .absExit
   206 00000DA7 B402                <1>     mov ah, 02h ;Other Error
   207                              <1> .absExit:
   208 00000DA9 F9                  <1>     stc
   209 00000DAA C3                  <1>     ret
   210                              <1> 
   211                              <1> terminateResident:  ;Int 47h
   212                              <1> inDosHandler:       ;Int 48h
   213                              <1> ;Called when DOS idle
   214 00000DAB 48CF                <1>     iretq
   215                              <1> fastOutput:         ;Int 49h
   216                              <1> ;Called with char to transfer in al
   217 00000DAD 50                  <1>     push rax
   218 00000DAE B40E                <1>     mov ah, 0Eh
   219 00000DB0 CD30                <1>     int 30h
   220 00000DB2 58                  <1>     pop rax
   221 00000DB3 48CF                <1>     iretq
   222                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   223 00000DB5 48CF                <1>     iretq
   224                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   225 00000DB7 48CF                <1>     iretq
   226                              <1> ;-----------------------------------:
   227                              <1> ;        Main Kernel routines       :
   228                              <1> ;-----------------------------------:
   229                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   230                              <1> ;ah = Function number, all other registers have various meanings
   231                              <1>  %if DEBUG
   232                              <1>     ;Entry function
   233                              <1>     debugEnterM
   326 00000DB9 4889255BF2FFFF      <2>  mov qword [debOldRSP], rsp
   327 00000DC0 48BC00000800000000- <2>  mov rsp, debStackTop
   327 00000DC9 00                  <2>
   328                              <2> 
   329 00000DCA 50                  <2>  push rax
   330 00000DCB 53                  <2>  push rbx
   331 00000DCC 51                  <2>  push rcx
   332 00000DCD 52                  <2>  push rdx
   333 00000DCE 56                  <2>  push rsi
   334 00000DCF 57                  <2>  push rdi
   335 00000DD0 55                  <2>  push rbp
   336 00000DD1 4150                <2>  push r8
   337 00000DD3 4151                <2>  push r9
   338 00000DD5 4152                <2>  push r10
   339 00000DD7 4153                <2>  push r11
   340 00000DD9 4154                <2>  push r12
   341 00000DDB 4155                <2>  push r13
   342 00000DDD 4156                <2>  push r14
   343 00000DDF 4157                <2>  push r15
   344 00000DE1 9C                  <2>  pushfq
   234 00000DE2 488D2D0C000000      <1>     lea rbp, .l0000
   235 00000DE9 E800F3FFFF          <1>     call debPrintNullString
   236 00000DEE E879F6FFFF          <1>     call debPrintFunctionName
   237 00000DF3 EB15                <1>     jmp short .l0001
   238 00000DF5 0A0D456E746572696E- <1> .l0000 db 0Ah,0Dh,"Entering Int 41h",0Ah,0Dh,0
   238 00000DFE 6720496E7420343168- <1>
   238 00000E07 0A0D00              <1>
   239                              <1> .l0001:    
   240                              <1>     debugExitM
   348 00000E0A 9D                  <2>  popfq
   349 00000E0B 415F                <2>  pop r15
   350 00000E0D 415E                <2>  pop r14
   351 00000E0F 415D                <2>  pop r13
   352 00000E11 415C                <2>  pop r12
   353 00000E13 415B                <2>  pop r11
   354 00000E15 415A                <2>  pop r10
   355 00000E17 4159                <2>  pop r9
   356 00000E19 4158                <2>  pop r8
   357 00000E1B 5D                  <2>  pop rbp
   358 00000E1C 5F                  <2>  pop rdi
   359 00000E1D 5E                  <2>  pop rsi
   360 00000E1E 5A                  <2>  pop rdx
   361 00000E1F 59                  <2>  pop rcx
   362 00000E20 5B                  <2>  pop rbx
   363 00000E21 58                  <2>  pop rax
   364 00000E22 488B25F2F1FFFF      <2>  mov rsp, qword [debOldRSP]
   241                              <1>     %endif
   242 00000E29 FA                  <1>     cli ;Halt external interrupts
   243 00000E2A FC                  <1>     cld ;Ensure all string ops occur in the right direction
   244 00000E2B 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   245 00000E2E 0F8730020000        <1>     ja .fdExitBad
   246                              <1>     ;Cherry pick functions
   247 00000E34 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   248 00000E37 722C                <1>     jb .fsbegin   ;If below skip these checks
   249 00000E39 0F845A060000        <1>     je ctrlBreakCheck
   250 00000E3F 80FC64              <1>     cmp ah, 64h
   251 00000E42 0F84D3080000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   252 00000E48 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   253 00000E4A 80FC51              <1>     cmp ah, 51h
   254 00000E4D 0F8402070000        <1>     je getCurrProcessID    ;This and below are exactly the same
   255 00000E53 80FC62              <1>     cmp ah, 62h
   256 00000E56 0F84B6080000        <1>     je getPSPaddr          ;Calls the above function
   257 00000E5C 80FC50              <1>     cmp ah, 50h
   258 00000E5F 0F84E7060000        <1>     je setCurrProcessID
   259                              <1> .fsbegin:
   260                              <1>     pushDOS ;Push the usual prologue registers
   266 00000E65 4151                <2>  push r9
   267 00000E67 4150                <2>  push r8
   268 00000E69 55                  <2>  push rbp
   269 00000E6A 57                  <2>  push rdi
   270 00000E6B 56                  <2>  push rsi
   271 00000E6C 52                  <2>  push rdx
   272 00000E6D 51                  <2>  push rcx
   273 00000E6E 53                  <2>  push rbx
   274 00000E6F 50                  <2>  push rax
   261 00000E70 488B05(21C10300)    <1>     mov rax, qword [oldRSP]
   262 00000E77 488905(19C10300)    <1>     mov qword [oldoldRSP], rax
   263 00000E7E FE05(E1C00300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   264 00000E84 488925(21C10300)    <1>     mov qword [oldRSP], rsp
   265                              <1> ;Here, we want to save oldRSP in the callers PSP
   266 00000E8B 803D(E1C00300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   267 00000E92 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   268 00000E94 488B05(F0C00300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   269 00000E9B 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   270                              <1> .fsb1:
   271 00000E9F 58                  <1>     pop rax     ;Get old rax back
   272 00000EA0 50                  <1>     push rax    ;and push it back onto the stack
   273 00000EA1 488D25(64C70300)    <1>     lea rsp, critStakTop
   274 00000EA8 FB                  <1>     sti         ;Reenable interrupts
   275                              <1> 
   276 00000EA9 C605(18C10300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   277                              <1> 
   278 00000EB0 48891D(29C10300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   279 00000EB7 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   280 00000EBA C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   281 00000EBD 50                  <1>     push rax        ;Push rax onto the stack
   282 00000EBE 488D0559080000      <1>     lea rax, qword [kernelDispatchTable]
   283 00000EC5 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   284 00000EC8 58                  <1>     pop rax
   285 00000EC9 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   286                              <1> 
   287 00000ECC 84E4                <1>     test ah, ah     ;Simple Terminate function?
   288 00000ECE 741C                <1>     jz .fddiskOp
   289 00000ED0 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   290 00000ED3 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   291 00000ED5 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   292 00000ED8 7712                <1>     ja .fddiskOp
   293                              <1> ;Char operations here
   294 00000EDA F605(E0C00300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   295 00000EE1 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   296 00000EE3 488D25(A4CD0300)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   297 00000EEA EB2C                <1>     jmp short .fdGoToFunction
   298                              <1> .fddiskOp:
   299                              <1>     ;Disk operations go here
   300                              <1>     ;Clear up error info
   301 00000EEC C605(E3C00300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   302 00000EF3 C605(E0C00300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   303 00000EFA C605(E2C00300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   304                              <1> 
   305 00000F01 C605(18C10300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   306 00000F08 488D25(E4D30300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   307 00000F0F F605(0BC10300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   308 00000F16 7400                <1>     jz .fdGoToFunction
   309                              <1> ; HANDLE CTRL+BREAK HERE!
   310                              <1> .fdGoToFunction:
   311 00000F18 48871D(29C10300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   312                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   313                              <1>     ;
   314                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   315                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   316                              <1>     ;
   317                              <1>     %if DEBUG && REGS
   318                              <1>     ;Print stack if necessary function
   319                              <1>     debugEnterM
   326 00000F1F 488925F5F0FFFF      <2>  mov qword [debOldRSP], rsp
   327 00000F26 48BC00000800000000- <2>  mov rsp, debStackTop
   327 00000F2F 00                  <2>
   328                              <2> 
   329 00000F30 50                  <2>  push rax
   330 00000F31 53                  <2>  push rbx
   331 00000F32 51                  <2>  push rcx
   332 00000F33 52                  <2>  push rdx
   333 00000F34 56                  <2>  push rsi
   334 00000F35 57                  <2>  push rdi
   335 00000F36 55                  <2>  push rbp
   336 00000F37 4150                <2>  push r8
   337 00000F39 4151                <2>  push r9
   338 00000F3B 4152                <2>  push r10
   339 00000F3D 4153                <2>  push r11
   340 00000F3F 4154                <2>  push r12
   341 00000F41 4155                <2>  push r13
   342 00000F43 4156                <2>  push r14
   343 00000F45 4157                <2>  push r15
   344 00000F47 9C                  <2>  pushfq
   320 00000F48 E8B8F1FFFF          <1>     call debPrintDOSStack
   321                              <1>     debugExitM
   348 00000F4D 9D                  <2>  popfq
   349 00000F4E 415F                <2>  pop r15
   350 00000F50 415E                <2>  pop r14
   351 00000F52 415D                <2>  pop r13
   352 00000F54 415C                <2>  pop r12
   353 00000F56 415B                <2>  pop r11
   354 00000F58 415A                <2>  pop r10
   355 00000F5A 4159                <2>  pop r9
   356 00000F5C 4158                <2>  pop r8
   357 00000F5E 5D                  <2>  pop rbp
   358 00000F5F 5F                  <2>  pop rdi
   359 00000F60 5E                  <2>  pop rsi
   360 00000F61 5A                  <2>  pop rdx
   361 00000F62 59                  <2>  pop rcx
   362 00000F63 5B                  <2>  pop rbx
   363 00000F64 58                  <2>  pop rax
   364 00000F65 488B25AFF0FFFF      <2>  mov rsp, qword [debOldRSP]
   322                              <1>     %endif
   323 00000F6C FF15(29C10300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   324                              <1>     %if DEBUG
   325                              <1>     ;Entry function
   326                              <1>     debugEnterM
   326 00000F72 488925A2F0FFFF      <2>  mov qword [debOldRSP], rsp
   327 00000F79 48BC00000800000000- <2>  mov rsp, debStackTop
   327 00000F82 00                  <2>
   328                              <2> 
   329 00000F83 50                  <2>  push rax
   330 00000F84 53                  <2>  push rbx
   331 00000F85 51                  <2>  push rcx
   332 00000F86 52                  <2>  push rdx
   333 00000F87 56                  <2>  push rsi
   334 00000F88 57                  <2>  push rdi
   335 00000F89 55                  <2>  push rbp
   336 00000F8A 4150                <2>  push r8
   337 00000F8C 4151                <2>  push r9
   338 00000F8E 4152                <2>  push r10
   339 00000F90 4153                <2>  push r11
   340 00000F92 4154                <2>  push r12
   341 00000F94 4155                <2>  push r13
   342 00000F96 4156                <2>  push r14
   343 00000F98 4157                <2>  push r15
   344 00000F9A 9C                  <2>  pushfq
   327 00000F9B 488D2D16000000      <1>     lea rbp, .l0002
   328 00000FA2 E847F1FFFF          <1>     call debPrintNullString
   329 00000FA7 488B1D(21C10300)    <1>     mov rbx, qword [oldRSP]
   330 00000FAE 668B03              <1>     mov ax, word [rbx + callerFrame.rax]  ;Get ah value
   331 00000FB1 E8B6F4FFFF          <1>     call debPrintFunctionName
   332 00000FB6 EB14                <1>     jmp short .l0003
   333 00000FB8 0A0D45786974696E67- <1> .l0002 db 0Ah,0Dh,"Exiting Int 41h",0Ah,0Dh,0
   333 00000FC1 20496E74203431680A- <1>
   333 00000FCA 0D00                <1>
   334                              <1> .l0003:    
   335                              <1>     debugExitM
   348 00000FCC 9D                  <2>  popfq
   349 00000FCD 415F                <2>  pop r15
   350 00000FCF 415E                <2>  pop r14
   351 00000FD1 415D                <2>  pop r13
   352 00000FD3 415C                <2>  pop r12
   353 00000FD5 415B                <2>  pop r11
   354 00000FD7 415A                <2>  pop r10
   355 00000FD9 4159                <2>  pop r9
   356 00000FDB 4158                <2>  pop r8
   357 00000FDD 5D                  <2>  pop rbp
   358 00000FDE 5F                  <2>  pop rdi
   359 00000FDF 5E                  <2>  pop rsi
   360 00000FE0 5A                  <2>  pop rdx
   361 00000FE1 59                  <2>  pop rcx
   362 00000FE2 5B                  <2>  pop rbx
   363 00000FE3 58                  <2>  pop rax
   364 00000FE4 488B2530F0FFFF      <2>  mov rsp, qword [debOldRSP]
   336                              <1>     %endif
   337                              <1>     %if DEBUG && REGS
   338                              <1>     ;Exit function
   339                              <1>     debugEnterM
   326 00000FEB 48892529F0FFFF      <2>  mov qword [debOldRSP], rsp
   327 00000FF2 48BC00000800000000- <2>  mov rsp, debStackTop
   327 00000FFB 00                  <2>
   328                              <2> 
   329 00000FFC 50                  <2>  push rax
   330 00000FFD 53                  <2>  push rbx
   331 00000FFE 51                  <2>  push rcx
   332 00000FFF 52                  <2>  push rdx
   333 00001000 56                  <2>  push rsi
   334 00001001 57                  <2>  push rdi
   335 00001002 55                  <2>  push rbp
   336 00001003 4150                <2>  push r8
   337 00001005 4151                <2>  push r9
   338 00001007 4152                <2>  push r10
   339 00001009 4153                <2>  push r11
   340 0000100B 4154                <2>  push r12
   341 0000100D 4155                <2>  push r13
   342 0000100F 4156                <2>  push r14
   343 00001011 4157                <2>  push r15
   344 00001013 9C                  <2>  pushfq
   340 00001014 E8ECF0FFFF          <1>     call debPrintDOSStack
   341                              <1>     debugExitM
   348 00001019 9D                  <2>  popfq
   349 0000101A 415F                <2>  pop r15
   350 0000101C 415E                <2>  pop r14
   351 0000101E 415D                <2>  pop r13
   352 00001020 415C                <2>  pop r12
   353 00001022 415B                <2>  pop r11
   354 00001024 415A                <2>  pop r10
   355 00001026 4159                <2>  pop r9
   356 00001028 4158                <2>  pop r8
   357 0000102A 5D                  <2>  pop rbp
   358 0000102B 5F                  <2>  pop rdi
   359 0000102C 5E                  <2>  pop rsi
   360 0000102D 5A                  <2>  pop rdx
   361 0000102E 59                  <2>  pop rcx
   362 0000102F 5B                  <2>  pop rbx
   363 00001030 58                  <2>  pop rax
   364 00001031 488B25E3EFFFFF      <2>  mov rsp, qword [debOldRSP]
   342                              <1>     %endif
   343                              <1> .fdExit:
   344 00001038 FA                  <1>     cli     ;Redisable interrupts
   345                              <1>     ;???
   346 00001039 FE0D(E1C00300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   347 0000103F 488B25(21C10300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   348 00001046 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   349 00001049 488B05(19C10300)    <1>     mov rax, qword [oldoldRSP]
   350 00001050 488905(21C10300)    <1>     mov qword [oldRSP], rax
   351                              <1>     popDOS  ;Pop the frame
   278 00001057 58                  <2>  pop rax
   279 00001058 5B                  <2>  pop rbx
   280 00001059 59                  <2>  pop rcx
   281 0000105A 5A                  <2>  pop rdx
   282 0000105B 5E                  <2>  pop rsi
   283 0000105C 5F                  <2>  pop rdi
   284 0000105D 5D                  <2>  pop rbp
   285 0000105E 4158                <2>  pop r8
   286 00001060 4159                <2>  pop r9
   352 00001062 48CF                <1>     iretq
   353                              <1> .fdExitBad:
   354 00001064 B400                <1>     mov ah, 0
   355 00001066 48CF                <1>     iretq
   356                              <1> 
   357                              <1> ;========================================:
   358                              <1> ;            Kernel Functions            :
   359                              <1> ;========================================:
   360                              <1> simpleTerminate:   ;ah = 00h
   361 00001068 C3                  <1>     ret
   362                              <1> diskReset:         ;ah = 0Dh
   363                              <1> ;Flush all dirty buffers to disk
   364 00001069 488B2D(A2C00300)    <1>     mov rbp, qword [bufHeadPtr]
   365                              <1> .drCheckBuffer:
   366 00001070 F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   367 00001074 7407                <1>     jz .drGotoNextBuffer
   368                              <1> .drFlushBuffer:
   369 00001076 E8C8F4FFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   370 0000107B 720E                <1>     jc .drError
   371                              <1> .drGotoNextBuffer:
   372 0000107D 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   373 00001081 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   374 00001088 75E6                <1>     jne .drCheckBuffer
   375 0000108A C3                  <1>     ret
   376                              <1> .drError:
   377                              <1> ;Abort/Retry/Ignore
   378                              <1> ;Abort returns to DOS, 
   379                              <1> ;Retry retries the write on the buffer, 
   380                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   381 0000108B 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   382 0000108E 240F                <1>     and al, 0Fh ;Clear the upper nybble
   383 00001090 B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   384 00001092 3C01                <1>     cmp al, dosBuffer
   385 00001094 740F                <1>     je .drErrorMain
   386 00001096 80C402              <1>     add ah, 2
   387 00001099 3C02                <1>     cmp al, fatBuffer
   388 0000109B 7408                <1>     je .drErrorMain
   389 0000109D 80C402              <1>     add ah, 2
   390 000010A0 3C04                <1>     cmp al, dirBuffer
   391 000010A2 80C402              <1>     add ah, 2
   392                              <1> .drErrorMain:
   393 000010A5 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   394 000010A8 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   395 000010AC 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   396 000010B0 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   397 000010B7 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   398 000010BC 66893D(E4C00300)    <1>     mov word [errorExt], di     ;Save driver error code
   399 000010C3 668105(E4C00300)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   399 000010CB 00                  <1>
   400 000010CC 8805(E2C00300)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   401 000010D2 C605(E3C00300)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   402 000010D9 C605(E7C00300)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   403 000010E0 C605(E6C00300)01    <1>     mov byte [errorAction], 1   ;Retry request code
   404 000010E7 E865FAFFFF          <1>     call criticalDOSError       ;Critical error handler
   405 000010EC 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   406 000010EE 7406                <1>     jz .drIgnore
   407 000010F0 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   408 000010F2 7482                <1>     je .drFlushBuffer
   409 000010F4 CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   410                              <1> .drIgnore:
   411 000010F6 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   412 000010FA E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   413                              <1> 
   414                              <1> selectDisk:        ;ah = 0Eh
   415                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   416 000010FF 8A05(13C00300)      <1>     mov al, byte [numLogDrv]        ;Value 1 based
   417 00001105 8A1D(B2C00300)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   418 0000110B FEC8                <1>     dec al
   419 0000110D FECB                <1>     dec bl
   420 0000110F 38C3                <1>     cmp bl, al
   421 00001111 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   422 00001114 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   423 00001116 7707                <1>     ja .error
   424 00001118 8815(0AC10300)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   425 0000111E C3                  <1>     ret ;al = lastdrv as retcode
   426                              <1> .error:
   427 0000111F 488B2D(21C10300)    <1>     mov rbp, qword [oldRSP]
   428 00001126 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   429 0000112E B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   430 00001133 668905(E4C00300)    <1>     mov word [errorExt], ax     
   431 0000113A C605(E3C00300)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   432 00001141 C605(E7C00300)08    <1>     mov byte [errorClass], 8    ;Drive not found
   433 00001148 C605(E6C00300)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   434 0000114F C3                  <1>     ret
   435                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   436 00001150 8A05(0AC10300)      <1>     mov al, byte [currentDrv]
   437 00001156 C3                  <1>     ret
   438                              <1> FATinfoDefault:    ;ah = 1Bh
   439 00001157 30D2                <1>     xor dl, dl
   440                              <1> FATinfoDevice:     ;ah = 1Ch
   441                              <1> ;Return in:
   442                              <1> ;   al = Number of sectors per cluster
   443                              <1> ;   edx = Number of clusters
   444                              <1> ;   cx =  Size of a clsuter
   445 00001159 84D2                <1>     test dl, dl
   446 0000115B 7408                <1>     jz .fidSkipdefault
   447 0000115D 8A15(0AC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   448 00001163 EB02                <1>     jmp short .fidMain
   449                              <1> .fidSkipdefault:
   450 00001165 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   451                              <1> .fidMain:
   452                              <1> ;Walk the dpb chain manually
   453 00001167 E80DFAFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   454 0000116C 84C0                <1>     test al, al
   455 0000116E 7431                <1>     jz .fidDPBFound
   456                              <1> ;Else, we at an error.
   457                              <1> ;Simply return with CY set and error code in al with extended error info
   458 00001170 488B2D(21C10300)    <1>     mov rbp, qword [oldRSP]
   459 00001177 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   460 0000117F B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   461 00001184 668905(E4C00300)    <1>     mov word [errorExt], ax     
   462 0000118B C605(E3C00300)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   463 00001192 C605(E7C00300)08    <1>     mov byte [errorClass], 8    ;Drive not found
   464 00001199 C605(E6C00300)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   465 000011A0 C3                  <1>     ret
   466                              <1> .fidDPBFound:
   467 000011A1 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   468 000011A4 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   469 000011A6 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   470 000011A9 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   471 000011AC BB01000000          <1>     mov ebx, 1
   472 000011B1 D3E3                <1>     shl ebx, cl
   473 000011B3 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   474 000011B5 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   475 000011B9 488B2D(21C10300)    <1>     mov rbp, qword [oldRSP]
   476 000011C0 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   477 000011C4 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   478 000011C8 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   479 000011CC C3                  <1>     ret
   480                              <1> ;===============================
   481                              <1> setIntVector:      ;ah = 25h
   482                              <1> ;Called with:
   483                              <1> ;   rdx = Pointer to interrupt handler
   484                              <1> ;   al = Interrupt number
   485 000011CD 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   486 000011CF 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   487                              <1> ;First call to get default BIOS segement selector and attribute word
   488 000011D5 88C3                <1>     mov bl, al  ;Set interrupt number 
   489 000011D7 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   490 000011DC CD35                <1>     int 35h
   491 000011DE 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   492 000011E0 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   493                              <1> ;dx preserves the attribute word
   494 000011E2 488B2D(21C10300)    <1>     mov rbp, qword [oldRSP]
   495 000011E9 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   496 000011ED B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   497 000011F2 CD35                <1>     int 35h
   498                              <1> 
   499 000011F4 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   500 000011F7 C3                  <1>     ret
   501                              <1> createNewPSP:      ;ah = 26h
   502 000011F8 C3                  <1>     ret
   503                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   504 000011F9 8805(0CC10300)      <1>     mov byte [verifyFlag], al
   505 000011FF 8025(0CC10300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   506 00001206 C3                  <1>     ret
   507                              <1> getDOSversion:     ;ah = 30h
   508 00001207 488B15(21C10300)    <1>     mov rdx, qword [oldRSP]
   509 0000120E 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   510 00001210 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   511 00001213 668B05E6EDFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   512 0000121A 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   513 0000121D C3                  <1>     ret
   514                              <1> terminateStayRes:  ;ah = 31h
   515 0000121E C3                  <1>     ret
   516                              <1> ;-------------------------------------------
   517                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   518 0000121F 30D2                <1>     xor dl, dl
   519                              <1> getDeviceDPBptr:   ;ah = 32h
   520                              <1> ;On entry: dl = Drive number
   521                              <1> ;On exit: rbx = DPB pointer
   522 00001221 84D2                <1>     test dl, dl
   523 00001223 7508                <1>     jnz .gddpskipdefault
   524 00001225 8A15(0AC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   525 0000122B EB02                <1>     jmp short .gddpcommon
   526                              <1> .gddpskipdefault:
   527                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   528 0000122D FECA                <1>     dec dl
   529                              <1> .gddpcommon:
   530 0000122F E845F9FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   531 00001234 84C0                <1>     test al, al
   532 00001236 741F                <1>     jz .gddpMediaCheck
   533                              <1> ;Put in here error info
   534 00001238 66C705(E4C00300)0F- <1>     mov word [errorExt], 15 ;Invalid drive spec
   534 00001240 00                  <1>
   535 00001241 C605(E3C00300)02    <1>     mov byte [errorLocus], 2    ;Block device driver
   536 00001248 C605(E7C00300)08    <1>     mov byte [errorClass], 8    ;Drive not found
   537 0000124F C605(E6C00300)07    <1>     mov byte [errorAction], 7   ;Retry after intervention
   538 00001256 C3                  <1>     ret ;Return. al = -1
   539                              <1> .gddpMediaCheck:
   540                              <1> ;Media Check Section
   541 00001257 C605(4EC00300)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   542 0000125E 8815(4FC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   543 00001264 C605(50C00300)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   544 0000126B 66C705(51C00300)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   544 00001273 00                  <1>
   545 00001274 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   546 00001277 8805(5BC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   547 0000127D 88D0                <1>     mov al, dl  ;Save device number in al
   548 0000127F 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr]
   549 00001283 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   550 0000128A FF520A              <1>     call [rdx + drvHdr.strPtr]
   551 0000128D FF5212              <1>     call [rdx + drvHdr.intPtr]
   552 00001290 66F705(51C00300)00- <1>     test word [diskReqHdr + mediaCheckReqPkt.status], 8000h
   552 00001298 80                  <1>
   553 00001299 0F85EA000000        <1>     jnz .gddpError
   554 0000129F 88C2                <1>     mov dl, al
   555 000012A1 803D(5CC00300)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   556 000012A8 0F84B0000000        <1>     je .gddpretdbp
   557 000012AE 803D(5CC00300)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   558 000012B5 7512                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   559 000012B7 E82AF3FFFF          <1>     call findDirtyBufferForDrive
   560 000012BC 48F7C3FFFFFFFF      <1>     test rbx, -1    ;This is the case if no dirty buffers for drive
   561 000012C3 0F8595000000        <1>     jne .gddpretdbp ;If there is a dirty buffer for the drive, dont build bpb
   562                              <1> .gddpBuildBPB:
   563                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   564 000012C9 E8C8F2FFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   565 000012CE 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   566 000012D1 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   567                              <1>     ;If no, flush the data to disk.
   568                              <1> .gddpBuildBPBFlush:
   569 000012D3 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   570 000012D6 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   571 000012D9 E865F2FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   572 000012DE 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   573 000012E1 0F820F010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   574                              <1> .gddpBuildBPBInvalidateBuffer:
   575                              <1>     ;Write new buffer header
   576 000012E7 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   577 000012EA C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   578 000012EE 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   579 000012F6 C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   580 000012FA C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   581 00001301 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   582 00001305 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   583                              <1>     ;Build BPB request
   584 00001309 C605(4EC00300)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   585 00001310 8815(4FC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   586 00001316 C605(50C00300)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   587 0000131D 66C705(51C00300)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   587 00001325 00                  <1>
   588 00001326 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   589 00001329 8805(5BC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   590 0000132F 48891D(5CC00300)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   591 00001336 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   592 0000133A 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   593 00001341 FF520A              <1>     call [rdx + drvHdr.strPtr]
   594 00001344 FF5212              <1>     call [rdx + drvHdr.intPtr]
   595 00001347 66F705(51C00300)00- <1>     test word [diskReqHdr + bpbBuildReqPkt.status], 8000h
   595 0000134F 80                  <1>
   596 00001350 7537                <1>     jnz .gddpError
   597 00001352 488B35(64C00300)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   598                              <1>     ;rbp points to dpb so we good to go
   599                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   600                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   601 00001359 E813020000          <1>     call createDPB 
   602                              <1> .gddpretdbp: 
   603 0000135E C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   604 00001362 488B15(21C10300)    <1>     mov rdx, qword [oldRSP]
   605 00001369 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   606 0000136D 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   607 0000136F C3                  <1>     ret
   608                              <1> .gddpretdpbFail:
   609 00001370 488B15(21C10300)    <1>     mov rdx, qword [oldRSP]
   610 00001377 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   611 0000137F 66C705(E4C00300)53- <1>     mov word [errorExt], 83 ;Fail on INT 44h error code
   611 00001387 00                  <1>
   612 00001388 C3                  <1>     ret
   613                              <1> .gddpError:
   614                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   615                              <1> ;Entered with rbp = dpb for failing drive
   616                              <1> ;             rdx = driver header that caused fault
   617 00001389 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   618 0000138C 488B1D(21C10300)    <1>     mov rbx, qword [oldRSP]
   619 00001393 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   620 00001396 88C2                <1>     mov dl, al  ;Save in dl
   621 00001398 84C0                <1>     test al, al
   622 0000139A 7508                <1>     jnz .gddpE0
   623 0000139C 8A05(0AC10300)      <1>     mov al, byte [currentDrv]
   624 000013A2 EB02                <1>     jmp short .gddpE1
   625                              <1> .gddpE0:
   626 000013A4 FEC8                <1>     dec al
   627                              <1> .gddpE1:
   628 000013A6 B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   629 000013A8 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   630 000013AF 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   631 000013B4 66893D(E4C00300)    <1>     mov word [errorExt], di     ;Save driver error code
   632 000013BB 668105(E4C00300)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   632 000013C3 00                  <1>
   633 000013C4 8805(E2C00300)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   634 000013CA C605(E3C00300)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   635 000013D1 C605(E7C00300)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   636 000013D8 C605(E6C00300)01    <1>     mov byte [errorAction], 1   ;Retry request code
   637 000013DF E86DF7FFFF          <1>     call criticalDOSError   ;Critical error handler
   638 000013E4 84C0                <1>     test al, al
   639 000013E6 0F8472FFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   640 000013EC 3C01                <1>     cmp al, 1
   641 000013EE 0F842DFEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   642 000013F4 CD43                <1>     int 43h ;Else, restart DOS
   643                              <1> .gddpErrorType2:
   644                              <1> ;Error flushing the old buffer
   645                              <1> ;   rbx = Buffer header for data transfer
   646 000013F6 B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   647 000013F8 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   648 000013FC 7414                <1>     je .gddpErrorType2main
   649 000013FE 80CC02              <1>     or ah, 2h   ;Set bit 1
   650 00001401 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   651 00001405 740B                <1>     je .gddpErrorType2main
   652 00001407 B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   653 00001409 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   654 0000140D 7403                <1>     je .gddpErrorType2main
   655 0000140F 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   656                              <1> .gddpErrorType2main:    
   657 00001412 668B3D(51C00300)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   658 00001419 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   659 0000141E 66893D(E4C00300)    <1>     mov word [errorExt], di     ;Save driver error code
   660 00001425 668105(E4C00300)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   660 0000142D 00                  <1>
   661 0000142E 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   662 00001431 8805(E2C00300)      <1>     mov byte [errorDrv], al
   663 00001437 C605(E3C00300)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   664 0000143E C605(E7C00300)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad disk write) code
   665 00001445 C605(E6C00300)01    <1>     mov byte [errorAction], 1   ;Retry request code
   666 0000144C 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   667 00001450 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   668 00001454 E8F8F6FFFF          <1>     call criticalDOSError   ;Critical error handler
   669 00001459 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   670 0000145D 7420                <1>     je .gddpErrorType2FatDir
   671 0000145F 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   672 00001463 741A                <1>     je .gddpErrorType2FatDir
   673 00001465 84C0                <1>     test al, al
   674 00001467 0F847AFEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   675 0000146D 3C01                <1>     cmp al, 1
   676 0000146F 0F845EFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   677 00001475 3C03                <1>     cmp al, 3
   678 00001477 0F84F3FEFFFF        <1>     je .gddpretdpbFail
   679 0000147D CD43                <1>     int 43h ;al = 2, means just abort
   680                              <1> .gddpErrorType2FatDir:
   681 0000147F 84C0                <1>     test al, al ;Ignore converted to fail
   682 00001481 0F84E9FEFFFF        <1>     jz .gddpretdpbFail
   683 00001487 3C01                <1>     cmp al, 1
   684 00001489 0F8444FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   685 0000148F 3C03                <1>     cmp al, 3
   686 00001491 0F84D9FEFFFF        <1>     je .gddpretdpbFail
   687 00001497 CD43                <1>     int 43h ;al = 2, means just abort
   688                              <1> ;-------------------------------------------
   689                              <1> 
   690                              <1> ctrlBreakCheck:    ;ah = 33h
   691 00001499 84C0                <1>     test al, al
   692 0000149B 7406                <1>     jz .cbcget  ;Get the state
   693 0000149D 8815(0BC10300)      <1>     mov byte [breakFlag], dl    ;Set the state
   694                              <1> .cbcget:
   695 000014A3 8A15(0BC10300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   696 000014A9 48CF                <1>     iretq
   697                              <1> getInDOSflagPtr:   ;ah = 34h
   698 000014AB 488D15(E1C00300)    <1>     lea rdx, inDOS
   699 000014B2 488B1D(21C10300)    <1>     mov rbx, qword [oldRSP]
   700 000014B9 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   701 000014BD C3                  <1>     ret
   702                              <1> getIntVector:      ;ah = 35h
   703                              <1> ;Called with:
   704                              <1> ;   al = Interrupt Number
   705                              <1> ;Returns:
   706                              <1> ;   rbx = Pointer to interrupt handler
   707 000014BE 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   708 000014C0 B807F00000          <1>     mov eax, 0F007h
   709 000014C5 CD35                <1>     int 35h
   710 000014C7 488B15(21C10300)    <1>     mov rdx, qword [oldRSP]
   711 000014CE 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   712 000014D2 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   713 000014D4 C3                  <1>     ret
   714                              <1> getDiskFreeSpace:  ;ah = 36h
   715 000014D5 84D2                <1>     test dl, dl
   716 000014D7 7408                <1>     jz .gdfsSkipdefault
   717 000014D9 8A15(0AC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   718 000014DF EB02                <1>     jmp short .gdfsMain
   719                              <1> .gdfsSkipdefault:
   720 000014E1 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   721                              <1> .gdfsMain:
   722 000014E3 E891F6FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   723 000014E8 84C0                <1>     test al, al
   724 000014EA 7434                <1>     jz .gdfsDPBFound
   725                              <1> ;Else, we at an error.
   726                              <1> ;Simply return with CY set and error code in al with extended error info
   727 000014EC 66C705(E4C00300)0F- <1>     mov word [errorExt], 15     ;Invalid drive error
   727 000014F4 00                  <1>
   728 000014F5 C605(E3C00300)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   729 000014FC C605(E7C00300)08    <1>     mov byte [errorClass], 8    ;Drive not found
   730 00001503 C605(E6C00300)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   731 0000150A 488B2D(21C10300)    <1>     mov rbp, qword [oldRSP]
   732 00001511 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   733 00001517 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   734 0000151F C3                  <1>     ret
   735                              <1> .gdfsDPBFound:
   736 00001520 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   737 00001523 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   738 00001525 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   739 00001528 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   740 0000152B BB01000000          <1>     mov ebx, 1
   741 00001530 D3E3                <1>     shl ebx, cl
   742 00001532 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   743 00001534 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   744 00001537 488B2D(21C10300)    <1>     mov rbp, qword [oldRSP]
   745 0000153E 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   746 00001542 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   747 00001546 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   748 0000154A C3                  <1>     ret
   749                              <1> 
   750                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   751                              <1> terminateClean:    ;ah = 4Ch, EXIT
   752                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   753 0000154B C3                  <1>     ret
   754                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   755 0000154C 48891D(F0C00300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   756 00001553 48CF                <1>     iretq
   757                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   758 00001555 488B15(F0C00300)    <1>     mov rdx, qword [currentPSP]
   759 0000155C 48CF                <1>     iretq
   760                              <1> getSysVarsPtr:     ;ah = 52h
   761 0000155E 488D15(80C00300)    <1>     lea rdx, sysVarsPtr
   762 00001565 488B1D(21C10300)    <1>     mov rbx, qword [oldRSP]
   763 0000156C 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   764 00001570 C3                  <1>     ret
   765                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   766                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   767                              <1> ;This is done so that the other fields of the DPB can be recycled
   768                              <1> ;Input: rsi = ptr to the BPB
   769                              <1> ;       rbp = ptr to the DPB
   770                              <1> ;bMediaDescriptor
   771 00001571 8A4615              <1>     mov al, byte [rsi + bpb.media]
   772 00001574 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   773                              <1> ;bAccessFlag
   774 00001577 C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   775                              <1> ;dFirstFreeCluster
   776 0000157B C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   777                              <1> ;dNumberOfFreeClusters
   778 00001582 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   779                              <1> ;bBytesPerSectorShift
   780 00001589 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   781 0000158D B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   782 0000158F 66D3E8              <1>     shr ax, cl  ;Shift down
   783                              <1> .cd0:
   784 00001592 66D1E8              <1>     shr ax, 1
   785 00001595 7404                <1>     jz .cd1
   786 00001597 FEC1                <1>     inc cl
   787 00001599 EBF7                <1>     jmp short .cd0
   788                              <1> .cd1:
   789 0000159B 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   790                              <1> ;bMaxSectorInCluster
   791 0000159E 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   792 000015A1 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   793 000015A3 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   794                              <1> ;bSectorsPerClusterShift
   795 000015A6 FEC0                <1>     inc al
   796 000015A8 30C9                <1>     xor cl, cl
   797                              <1> .cd2:
   798 000015AA D0E8                <1>     shr al, 1
   799 000015AC 7404                <1>     jz .cd3
   800 000015AE FEC1                <1>     inc cl
   801 000015B0 EBF8                <1>     jmp short .cd2
   802                              <1> .cd3:
   803 000015B2 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   804                              <1> ;wFAToffset, number of reserved sectors in partition
   805 000015B5 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   806 000015B9 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   807                              <1> ;bNumberOfFATs
   808 000015BD 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   809 000015C0 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   810                              <1> ;wNumberRootDirSectors
   811 000015C3 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   812 000015C7 C1E005              <1>     shl eax, 5  ;Multiply by 32
   813 000015CA 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   814 000015CE FFC9                <1>     dec ecx
   815 000015D0 01C8                <1>     add eax, ecx
   816 000015D2 31D2                <1>     xor edx, edx    ;Clear for divide
   817 000015D4 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   818 000015D6 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   819                              <1> ;dFATlength, get the FAT length
   820 000015DA 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   821 000015DE 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   822 000015E1 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   823 000015E3 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   824 000015E6 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   825                              <1> ;Complex cases below...
   826                              <1> ;dClusterHeapOffset, start sector of the data area
   827 000015E9 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   828 000015ED 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   829 000015F0 85C0                <1>     test eax, eax
   830 000015F2 0F44C3              <1>     cmovz eax, ebx
   831                              <1> ;eax = FATsz
   832 000015F5 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   833 000015F9 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   834 000015FC 85DB                <1>     test ebx, ebx
   835 000015FE 0F44D9              <1>     cmovz ebx, ecx 
   836                              <1> ;ebx = TotSec
   837 00001601 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   838 00001604 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   839                              <1> .cd4:
   840 00001606 01C2                <1>     add edx, eax
   841 00001608 FEC9                <1>     dec cl
   842 0000160A 75FA                <1>     jnz .cd4
   843 0000160C 89D0                <1>     mov eax, edx    ;Store product in eax
   844 0000160E 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   845 00001612 01D0                <1>     add eax, edx
   846 00001614 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   847 00001618 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   848                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   849                              <1>     ;aka eax = Start sector of the data area in volume
   850 0000161A 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   851                              <1> ;dClusterCount
   852 0000161D 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   853 0000161F 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   854 00001621 31D2                <1>     xor edx, edx
   855 00001623 BB01000000          <1>     mov ebx, 1
   856 00001628 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   857 0000162B D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   858 0000162D F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   859 0000162F FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   860 00001631 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   861                              <1> ;dFirstUnitOfRootDir
   862 00001634 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   863 00001639 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   864 0000163C 7709                <1>     ja .cd5
   865                              <1>     ;Else, we need to find the first sector of the root directory
   866                              <1>     ;Get the start sector of data area in volume 
   867                              <1>     ; and sub the number of sectors in the root directory
   868 0000163E 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   869 00001641 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   870 00001645 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   871                              <1> .cd5:
   872 00001647 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   873                              <1> ;Exit epilogue
   874 0000164A 488B1D(21C10300)    <1>     mov rbx, qword [oldRSP]
   875 00001651 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   876                              <1>     %if DEBUG && DPBINFO
   877                              <1>     ;Print DPB 
   878                              <1>     debugEnterM
   326 00001653 488925C1E9FFFF      <2>  mov qword [debOldRSP], rsp
   327 0000165A 48BC00000800000000- <2>  mov rsp, debStackTop
   327 00001663 00                  <2>
   328                              <2> 
   329 00001664 50                  <2>  push rax
   330 00001665 53                  <2>  push rbx
   331 00001666 51                  <2>  push rcx
   332 00001667 52                  <2>  push rdx
   333 00001668 56                  <2>  push rsi
   334 00001669 57                  <2>  push rdi
   335 0000166A 55                  <2>  push rbp
   336 0000166B 4150                <2>  push r8
   337 0000166D 4151                <2>  push r9
   338 0000166F 4152                <2>  push r10
   339 00001671 4153                <2>  push r11
   340 00001673 4154                <2>  push r12
   341 00001675 4155                <2>  push r13
   342 00001677 4156                <2>  push r14
   343 00001679 4157                <2>  push r15
   344 0000167B 9C                  <2>  pushfq
   879 0000167C 55                  <1>     push rbp
   880 0000167D 488D2D12000000      <1>     lea rbp, .l0000
   881 00001684 E865EAFFFF          <1>     call debPrintNullString
   882 00001689 5D                  <1>     pop rbp
   883 0000168A E87AECFFFF          <1>     call debDPBBPBptr
   884 0000168F E89FE9FFFF          <1>     call debMakeDebuggerRespond
   885 00001694 EB28                <1>     jmp short .l0001
   886 00001696 436F6E737472756374- <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   886 0000169F 656420445042206672- <1>
   886 000016A8 6F6D20676976656E20- <1>
   886 000016B1 646576696365204250- <1>
   886 000016BA 420A0D00            <1>
   887                              <1> .l0001:
   888                              <1>     debugExitM
   348 000016BE 9D                  <2>  popfq
   349 000016BF 415F                <2>  pop r15
   350 000016C1 415E                <2>  pop r14
   351 000016C3 415D                <2>  pop r13
   352 000016C5 415C                <2>  pop r12
   353 000016C7 415B                <2>  pop r11
   354 000016C9 415A                <2>  pop r10
   355 000016CB 4159                <2>  pop r9
   356 000016CD 4158                <2>  pop r8
   357 000016CF 5D                  <2>  pop rbp
   358 000016D0 5F                  <2>  pop rdi
   359 000016D1 5E                  <2>  pop rsi
   360 000016D2 5A                  <2>  pop rdx
   361 000016D3 59                  <2>  pop rcx
   362 000016D4 5B                  <2>  pop rbx
   363 000016D5 58                  <2>  pop rax
   364 000016D6 488B253EE9FFFF      <2>  mov rsp, qword [debOldRSP]
   889                              <1>     %endif
   890 000016DD C3                  <1>     ret
   891                              <1> getVerifySetting:  ;ah = 54h
   892 000016DE 8A05(0CC10300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   893 000016E4 C3                  <1>     ret
   894                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   895 000016E5 C3                  <1>     ret
   896                              <1> getExtendedError:  ;ah = 59h
   897 000016E6 488B15(21C10300)    <1>     mov rdx, qword [oldRSP]
   898 000016ED 668B05(E4C00300)    <1>     mov ax, word [errorExt]
   899 000016F4 8A2D(E3C00300)      <1>     mov ch, byte [errorLocus]
   900 000016FA 8A3D(E7C00300)      <1>     mov bh, byte [errorClass]
   901 00001700 8A1D(E6C00300)      <1>     mov bl, byte [errorAction]
   902 00001706 668902              <1>     mov word [rdx + callerFrame.rax], ax
   903 00001709 66895A08            <1>     mov word [rdx + callerFrame.rbx], bx
   904 0000170D 886A11              <1>     mov byte [rdx + callerFrame.rcx + 1], ch
   905 00001710 C3                  <1>     ret
   906                              <1> getCritErrorInfo:  ;ah = 5Dh
   907                              <1> networkServices:   ;ah = 5Eh, do nothing
   908                              <1> networkRedirection:;ah = 5Fh, do nothing
   909 00001711 C3                  <1>     ret
   910                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   911 00001712 488B15(F0C00300)    <1>     mov rdx, qword [currentPSP]
   912 00001719 48CF                <1>     iretq
   913                              <1>                     ;ah = 63h, reserved
   914                              <1> setDriverLookahead:;ah = 64h, reserved
   915 0000171B 48CF                <1>     iretq
   916                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   917                              <1> return:
   918 0000171D C3                  <1>     ret
   919                              <1> 
   920                              <1> kernelDispatchTable:
   921 0000171E [6810000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   922 00001726 [5208000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   923 0000172E [C708000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   924 00001736 [0109000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   925 0000173E [0109000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   926 00001746 [0109000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   927 0000174E [0109000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   928 00001756 [0109000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   929 0000175E [3B09000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   930 00001766 [3C09000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   931 0000176E [7E09000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   932 00001776 [7E09000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   933 0000177E [7E09000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   934 00001786 [6910000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   935 0000178E [FF10000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   936 00001796 [7E09000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   937 0000179E [7E09000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   938 000017A6 [7E09000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   939 000017AE [7E09000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   940 000017B6 [7E09000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   941 000017BE [7E09000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   942 000017C6 [7E09000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   943 000017CE [7E09000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   944 000017D6 [7E09000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   945 000017DE [1D17000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   946 000017E6 [5011000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   947 000017EE [7F09000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   948 000017F6 [5711000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   949 000017FE [5911000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   950 00001806 [1D17000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   951 0000180E [1D17000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   952 00001816 [1F12000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   953 0000181E [1D17000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   954 00001826 [9209000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   955 0000182E [9209000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   956 00001836 [9209000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   957 0000183E [9209000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   958 00001846 [CD11000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   959 0000184E [F811000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   960 00001856 [9209000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   961 0000185E [9209000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   962 00001866 [9209000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   963 0000186E [4F0B000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   964 00001876 [4F0B000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   965 0000187E [4F0B000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   966 00001886 [4F0B000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   967 0000188E [F911000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   968 00001896 [9309000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   969 0000189E [0712000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   970 000018A6 [1E12000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   971 000018AE [2112000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   972 000018B6 [9914000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   973 000018BE [AB14000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   974 000018C6 [BE14000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   975 000018CE [D514000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   976 000018D6 [500B000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   977 000018DE [500B000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   978 000018E6 [5108000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   979 000018EE [5108000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   980 000018F6 [5108000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   981 000018FE [A609000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   982 00001906 [A609000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   983 0000190E [A609000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   984 00001916 [A709000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   985 0000191E [E009000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   986 00001926 [F109000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   987 0000192E [F109000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   988 00001936 [F109000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   989 0000193E [F109000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   990 00001946 [F109000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   991 0000194E [F109000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   992 00001956 [5108000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   993 0000195E [D60A000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   994 00001966 [D60A000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   995 0000196E [D60A000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   996 00001976 [4B15000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   997 0000197E [4B15000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   998 00001986 [4B15000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   999 0000198E [F109000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
  1000 00001996 [F109000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
  1001 0000199E [4C15000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
  1002 000019A6 [5515000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
  1003 000019AE [5E15000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
  1004 000019B6 [7115000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
  1005 000019BE [DE16000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
  1006 000019C6 [E516000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
  1007 000019CE [F109000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
  1008 000019D6 [5108000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
  1009 000019DE [D60A000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
  1010 000019E6 [E616000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
  1011 000019EE [F109000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
  1012 000019F6 [F109000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
  1013 000019FE [F109000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
  1014 00001A06 [1117000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
  1015 00001A0E [1117000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
  1016 00001A16 [1117000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
  1017 00001A1E [5108000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
  1018 00001A26 [1D17000000000000]  <1>     dq return              ;AH = 61H, RESERVED
  1019 00001A2E [1217000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
  1020 00001A36 [1D17000000000000]  <1>     dq return              ;AH = 63H, RESERVED
  1021 00001A3E [1B17000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
  1022 00001A46 [500B000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
  1023 00001A4E [500B000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
  1024 00001A56 [F109000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
  1025 00001A5E [F109000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
  1026 00001A66 [1D17000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
  1027                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    25                                  %include "./Source/Misc/int44h.asm"
    26                              <1> critErrorHandler:   ;Int 44h
    27                              <1> ;User Stack in usage here, must be swapped to before this is called
    28                              <1> ;Entered with:  
    29                              <1> ;               AH = Critical Error Bitfield
    30                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    31                              <1> ;               Bit 6 - Reserved
    32                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    33                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    34                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    35                              <1> ;               Bits [2-1] = Affected Disk Error
    36                              <1> ;                     0 0   DOS area
    37                              <1> ;                     0 1   FAT area
    38                              <1> ;                     1 0   Directory area
    39                              <1> ;                     1 1   Data area
    40                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    41                              <1> ;               AL  = Failing drive number if AH[7] = 0
    42                              <1> ;               DIL = Error code for errorMsg
    43                              <1> ;               RSI = EA of Device Header for which device the error occured
    44                              <1> ;Return:
    45                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    46                              <1> ;                  = 1 - Retry the Operation    (Retry)
    47                              <1> ;                  = 2 - Terminate the Program  (Abort)
    48                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    49 00001A6E 53                  <1>     push rbx
    50 00001A6F 51                  <1>     push rcx
    51 00001A70 52                  <1>     push rdx
    52 00001A71 57                  <1>     push rdi
    53 00001A72 56                  <1>     push rsi
    54 00001A73 FC                  <1>     cld         ;Make String ops go forward
    55                              <1> 
    56 00001A74 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    57 00001A77 488D155E020000      <1>     lea rdx, qword [.crlf]
    58 00001A7E B409                <1>     mov ah, 09h ;Print String
    59 00001A80 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    60                              <1> 
    61 00001A82 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    62 00001A88 B90C000000          <1>     mov ecx, 0Ch
    63 00001A8D 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    64 00001A8F 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    65 00001A92 480FB7FF            <1>     movzx rdi, di
    66 00001A96 4889FA              <1>     mov rdx, rdi    ;Copy error code
    67 00001A99 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    68 00001A9D 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    69 00001AA0 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    70 00001AA3 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    71 00001AAA 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    72 00001AAE B409                <1>     mov ah, 09h ;Print String
    73 00001AB0 CD41                <1>     int 41h     ;Call DOS to print first part of message
    74                              <1> 
    75 00001AB2 488D1505020000      <1>     lea rdx, qword [.readmsg]
    76 00001AB9 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    77 00001AC0 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    78 00001AC3 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    79 00001AC7 B409                <1>     mov ah, 09h ;Print String
    80 00001AC9 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    81                              <1> 
    82 00001ACB F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    83 00001ACE 0F85DF000000        <1>     jnz .charError
    84                              <1> ;Disk error continues here
    85 00001AD4 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    86 00001ADB B409                <1>     mov ah, 09h
    87 00001ADD CD41                <1>     int 41h
    88 00001ADF 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    89 00001AE1 80C241              <1>     add dl, "A" ;Add ASCII code
    90 00001AE4 B402                <1>     mov ah, 02h ;Print char in dl
    91 00001AE6 CD41                <1>     int 41h
    92                              <1> .userInput:
    93 00001AE8 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    94 00001AEF B409                <1>     mov ah, 09h
    95 00001AF1 CD41                <1>     int 41h
    96                              <1> ;Abort, Retry, Ignore, Fail is word order
    97                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    98                              <1> .userAbort:
    99                              <1> ;Abort is always an option
   100 00001AF3 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   101 00001AFA B409                <1>     mov ah, 09h
   102 00001AFC CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   103                              <1> .userRetry:
   104 00001AFE F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   105 00001B01 7416                <1>     jz .userIgnore    ;If clear, dont print message
   106 00001B03 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   107 00001B0A B409                <1>     mov ah, 09h
   108 00001B0C CD41                <1>     int 41h
   109 00001B0E 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   110 00001B15 B409                <1>     mov ah, 09h
   111 00001B17 CD41                <1>     int 41h
   112                              <1> .userIgnore:
   113 00001B19 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   114 00001B1C 7416                <1>     jz .userFail
   115 00001B1E 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   116 00001B25 B409                <1>     mov ah, 09h
   117 00001B27 CD41                <1>     int 41h
   118 00001B29 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   119 00001B30 B409                <1>     mov ah, 09h
   120 00001B32 CD41                <1>     int 41h
   121                              <1> .userFail:
   122 00001B34 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   123 00001B37 7416                <1>     jz .userMsgEnd
   124 00001B39 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   125 00001B40 B409                <1>     mov ah, 09h
   126 00001B42 CD41                <1>     int 41h
   127 00001B44 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   128 00001B4B B409                <1>     mov ah, 09h
   129 00001B4D CD41                <1>     int 41h
   130                              <1> .userMsgEnd:
   131 00001B4F 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   132 00001B56 B409                <1>     mov ah, 09h
   133 00001B58 CD41                <1>     int 41h
   134                              <1> ;Get user input now 
   135 00001B5A 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   136 00001B5C 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   137 00001B63 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   138 00001B65 CD41                <1>     int 41h ;Get char in al
   139 00001B67 3C61                <1>     cmp al, "a" ;Chack if lowercase
   140 00001B69 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   141 00001B6B 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   142                              <1> .uip1:
   143 00001B6D AE                  <1>     scasb   ;Compare char to list, offset gives return code
   144 00001B6E 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   145 00001B70 FFC1                <1>     inc ecx
   146 00001B72 81F904000000        <1>     cmp ecx, 4
   147 00001B78 75F3                <1>     jne .uip1
   148 00001B7A E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   149                              <1> .validInput:
   150 00001B7F 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   151                              <1> ;Now check if the input is permitted
   152 00001B81 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   153 00001B83 7427                <1>     je .cehExit
   154 00001B85 84C0                <1>     test al, al ;Check if 0 => Ignore
   155 00001B87 740F                <1>     je .viIgnore
   156 00001B89 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   157 00001B8B 7416                <1>     je .viRetry
   158                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   159 00001B8D F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   160 00001B90 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   161 00001B96 EB14                <1>     jmp short .cehExit
   162                              <1> .viIgnore:
   163 00001B98 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   164 00001B9B 0F8447FFFFFF        <1>     jz .userInput
   165 00001BA1 EB09                <1>     jmp short .cehExit
   166                              <1> .viRetry:
   167 00001BA3 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   168 00001BA6 0F843CFFFFFF        <1>     jz .userInput
   169                              <1> .cehExit:
   170 00001BAC 5E                  <1>     pop rsi
   171 00001BAD 5F                  <1>     pop rdi
   172 00001BAE 5A                  <1>     pop rdx
   173 00001BAF 59                  <1>     pop rcx
   174 00001BB0 5B                  <1>     pop rbx
   175 00001BB1 48CF                <1>     iretq
   176                              <1> .charError:
   177 00001BB3 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   178 00001BB8 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   179                              <1> .ce1:
   180 00001BBF AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   181 00001BC0 88C2                <1>     mov dl, al  ;Move char into dl
   182 00001BC2 B402                <1>     mov ah, 02h
   183 00001BC4 CD41                <1>     int 41h ;Print char
   184 00001BC6 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   185 00001BC8 E91BFFFFFF          <1>     jmp .userInput
   186                              <1> 
   187                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   188 00001BCD 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   188 00001BD6 746563742024202020  <1>
   189 00001BDF 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   189 00001BE8 6E6974202420202020  <1>
   190 00001BF1 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   190 00001BFA 202420202020202020  <1>
   191 00001C03 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   191 00001C0C 6F6D6D616E64202420  <1>
   192 00001C15 446174612024202020- <1>             db "Data $            "       ;Error 4
   192 00001C1E 202020202020202020  <1>
   193 00001C27 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   193 00001C30 737420242020202020  <1>
   194 00001C39 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   194 00001C42 202020202020202020  <1>
   195 00001C4B 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   195 00001C54 656469612024202020  <1>
   196 00001C5D 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   196 00001C66 7420466F756E642024  <1>
   197 00001C6F 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   197 00001C78 706572202420202020  <1>
   198 00001C81 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   198 00001C8A 6C7420242020202020  <1>
   199 00001C93 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   199 00001C9C 742024202020202020  <1>
   200 00001CA5 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   200 00001CAE 61696C757265202420  <1>
   201                              <1> 
   202 00001CB7 64726976652024      <1> .drive      db "drive $"
   203 00001CBE 6572726F7220726561- <1> .readmsg    db "error reading $"
   203 00001CC7 64696E672024        <1>
   204 00001CCD 6572726F7220777269- <1> .writemsg   db "error writing $"
   204 00001CD6 74696E672024        <1>
   205 00001CDC 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   206 00001CDF 41626F727424        <1> .abortmsg   db "Abort$" 
   207 00001CE5 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   208 00001CEC 526574727924        <1> .retrymsg   db "Retry$"
   209 00001CF2 4661696C24          <1> .failmsg    db "Fail$"
   210 00001CF7 2C2024              <1> .betweenMsg db ", $"
   211 00001CFA 3F2024              <1> .endMsg     db "? $"
   212 00001CFD 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    26                                  %include "./Source/Drivers/drvData.asm"
    27                              <1> ;-----------------------------------:
    28                              <1> ;          Driver routines          :
    29                              <1> ;-----------------------------------:
    30                              <1> drivers:
    31                              <1> conHdr:
    32 00001D01 [231D000000000000]  <1>     dq auxHdr
    33 00001D09 1308                <1>     dw 0813h
    34 00001D0B [A11E000000000000]  <1>     dq commonStrat
    35 00001D13 [B01E000000000000]  <1>     dq conDriver
    36 00001D1B 434F4E2020202020    <1>     db "CON     "
    37                              <1> auxHdr:
    38 00001D23 [451D000000000000]  <1>     dq prnHdr
    39 00001D2B 0080                <1>     dw 08000h
    40 00001D2D [A11E000000000000]  <1>     dq commonStrat
    41 00001D35 [7521000000000000]  <1>     dq com1Intr
    42 00001D3D 4155582020202020    <1>     db "AUX     "
    43                              <1> prnHdr:
    44 00001D45 [671D000000000000]  <1>     dq clkHdr
    45 00001D4D 40A0                <1>     dw 0A040h
    46 00001D4F [A91E000000000000]  <1>     dq nulStrat
    47 00001D57 [AF1E000000000000]  <1>     dq nulIntr
    48 00001D5F 50524E2020202020    <1>     db "PRN     "
    49                              <1> clkHdr:
    50 00001D67 [891D000000000000]  <1>     dq msdHdr
    51 00001D6F 0880                <1>     dw 08008h
    52 00001D71 [A11E000000000000]  <1>     dq commonStrat
    53 00001D79 [E81F000000000000]  <1>     dq clkDriver
    54 00001D81 434C4F434B242020    <1>     db "CLOCK$  "
    55                              <1> msdHdr:
    56 00001D89 [AB1D000000000000]  <1>     dq com1Hdr
    57 00001D91 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    58 00001D93 [A11E000000000000]  <1>     dq commonStrat
    59 00001D9B [1A23000000000000]  <1>     dq msdDriver
    60 00001DA3 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    61                              <1> com1Hdr:
    62 00001DAB [CD1D000000000000]  <1>     dq com2Hdr
    63 00001DB3 0080                <1>     dw 08000h
    64 00001DB5 [A11E000000000000]  <1>     dq commonStrat
    65 00001DBD [7521000000000000]  <1>     dq com1Intr
    66 00001DC5 434F4D3120202020    <1>     db "COM1    "
    67                              <1> com2Hdr:
    68 00001DCD [EF1D000000000000]  <1>     dq com3Hdr
    69 00001DD5 0080                <1>     dw 08000h
    70 00001DD7 [A11E000000000000]  <1>     dq commonStrat
    71 00001DDF [7E21000000000000]  <1>     dq com2Intr
    72 00001DE7 434F4D3220202020    <1>     db "COM2    "
    73                              <1> com3Hdr:
    74 00001DEF [111E000000000000]  <1>     dq com4Hdr
    75 00001DF7 0080                <1>     dw 08000h
    76 00001DF9 [A11E000000000000]  <1>     dq commonStrat
    77 00001E01 [8721000000000000]  <1>     dq com3Intr
    78 00001E09 434F4D3320202020    <1>     db "COM3    "
    79                              <1> com4Hdr:
    80 00001E11 [331E000000000000]  <1>     dq lpt1Hdr
    81 00001E19 0080                <1>     dw 08000h
    82 00001E1B [A11E000000000000]  <1>     dq commonStrat
    83 00001E23 [9021000000000000]  <1>     dq com4Intr
    84 00001E2B 434F4D3420202020    <1>     db "COM4    "
    85                              <1> lpt1Hdr:
    86 00001E33 [551E000000000000]  <1>     dq lpt2Hdr
    87 00001E3B 40A0                <1>     dw 0A040h
    88 00001E3D [A91E000000000000]  <1>     dq nulStrat
    89 00001E45 [AF1E000000000000]  <1>     dq nulIntr
    90 00001E4D 4C50543120202020    <1>     db "LPT1    "
    91                              <1> lpt2Hdr:
    92 00001E55 [771E000000000000]  <1>     dq lpt3Hdr
    93 00001E5D 40A0                <1>     dw 0A040h
    94 00001E5F [A91E000000000000]  <1>     dq nulStrat
    95 00001E67 [AF1E000000000000]  <1>     dq nulIntr
    96 00001E6F 4C50543220202020    <1>     db "LPT2    "
    97                              <1> lpt3Hdr:
    98 00001E77 FFFFFFFFFFFFFFFF    <1>     dq -1
    99 00001E7F 40A0                <1>     dw 0A040h
   100 00001E81 [A91E000000000000]  <1>     dq nulStrat
   101 00001E89 [AF1E000000000000]  <1>     dq nulIntr
   102 00001E91 4C50543320202020    <1>     dq "LPT3    "
   103 00001E99 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    27                                  %include "./Source/Drivers/charDrv.asm"
    28                              <1> commonStrat:
    29                              <1> ;DOS calls this function with rbx=Ptr to request header
    30 00001EA1 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    31 00001EA8 C3                  <1>     ret
    32                              <1> nulStrat:
    33 00001EA9 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    34                              <1> nulIntr:
    35 00001EAF C3                  <1>     ret
    36                              <1> conDriver:
    37 00001EB0 50                  <1>     push rax
    38 00001EB1 53                  <1>     push rbx
    39 00001EB2 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    40 00001EB9 B003                <1>     mov al, 03h ;Unknown Command
    41 00001EBB 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    42 00001EBF 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    43                              <1> 
    44 00001EC1 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    45 00001EC4 3C04                <1>     cmp al, 4
    46 00001EC6 743D                <1>     jz .conRead
    47 00001EC8 3C05                <1>     cmp al, 5
    48 00001ECA 747F                <1>     jz .conNondestructiveRead
    49 00001ECC 3C06                <1>     cmp al, 6
    50 00001ECE 0F84A8000000        <1>     jz .conInputStatus
    51 00001ED4 3C07                <1>     cmp al, 7
    52 00001ED6 0F84B0000000        <1>     jz .conFlushInputBuffers
    53 00001EDC 3C08                <1>     cmp al, 8
    54 00001EDE 0F84CA000000        <1>     jz .conWrite
    55 00001EE4 3C09                <1>     cmp al, 9
    56 00001EE6 0F84C2000000        <1>     jz .conWrite
    57 00001EEC 3C0A                <1>     cmp al, 0Ah
    58 00001EEE 0F84E3000000        <1>     jz .conOutputStatus
    59 00001EF4 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    60                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    61 00001EF6 B480                <1>     mov ah, 80h ;Set error bit
    62 00001EF8 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    63                              <1> .conExit:
    64 00001EFC 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    65 00001F02 5B                  <1>     pop rbx
    66 00001F03 58                  <1>     pop rax
    67 00001F04 C3                  <1>     ret
    68                              <1> .conRead:    ;Function 4
    69 00001F05 B005                <1>     mov al, 05h ;Bad request structure length?
    70 00001F07 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    71 00001F0A 75EA                <1>     jne .conWriteErrorCode
    72                              <1> 
    73 00001F0C 57                  <1>     push rdi
    74 00001F0D 51                  <1>     push rcx
    75 00001F0E 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    76 00001F12 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    77                              <1> .cre1:
    78 00001F14 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    79 00001F17 741C                <1>     je .cre2
    80 00001F19 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    81 00001F20 751A                <1>     jnz .cre3   ;No, get the buffer value
    82 00001F22 31C0                <1>     xor eax, eax
    83 00001F24 CD36                <1>     int 36h
    84                              <1> .cre11:
    85 00001F26 AA                  <1>     stosb
    86 00001F27 84C0                <1>     test al, al ;Was the ascii code 0?
    87 00001F29 7506                <1>     jnz .cre12  ;No, skip storing scancode
    88 00001F2B 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    89                              <1> .cre12:
    90 00001F31 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    91 00001F33 EBDF                <1>     jmp short .cre1
    92                              <1> .cre2:
    93 00001F35 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    94 00001F38 59                  <1>     pop rcx
    95 00001F39 5F                  <1>     pop rdi
    96 00001F3A EBC0                <1>     jmp short .conExit
    97                              <1> .cre3:
    98 00001F3C 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    99 00001F42 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   100 00001F49 EBDB                <1>     jmp short .cre11
   101                              <1> 
   102                              <1> .conNondestructiveRead:  ;Function 5
   103 00001F4B B005                <1>     mov al, 05h ;Bad request structure length?
   104 00001F4D 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   105 00001F50 75A4                <1>     jne .conWriteErrorCode
   106 00001F52 803D8E00000000      <1>     cmp byte [.conBuf], 0
   107 00001F59 7519                <1>     jnz .cnr2
   108 00001F5B B401                <1>     mov ah, 01h     ;Get key if exists
   109 00001F5D CD36                <1>     int 36h
   110 00001F5F 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   111                              <1>     ;Keystroke available
   112                              <1> .cnr0:
   113 00001F61 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   114 00001F64 E993FFFFFF          <1>     jmp .conExit
   115                              <1> .cnr1: ;No keystroke available
   116 00001F69 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   117 00001F6F E988FFFFFF          <1>     jmp .conExit
   118                              <1> .cnr2:
   119 00001F74 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   120 00001F7A EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   121                              <1> 
   122                              <1> .conInputStatus:         ;Function 6
   123 00001F7C B005                <1>     mov al, 05h ;Bad request structure length?
   124 00001F7E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   125 00001F81 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   126 00001F87 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   127                              <1> 
   128                              <1> .conFlushInputBuffers:   ;Function 7
   129 00001F8C B005                <1>     mov al, 05h ;Bad request structure length?
   130 00001F8E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   131 00001F91 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   132 00001F97 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   133                              <1> .cfib0:
   134 00001F9E B401                <1>     mov ah, 01      ;Get buffer status
   135 00001FA0 CD36                <1>     int 36h
   136 00001FA2 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   137 00001FA8 30E4                <1>     xor ah, ah
   138 00001FAA CD36                <1>     int 36h ;Read key to flush from buffer
   139 00001FAC EBF0                <1>     jmp short .cfib0
   140                              <1> 
   141                              <1> .conWrite:   ;Function 8 and 9
   142 00001FAE B005                <1>     mov al, 05h ;Bad request structure length?
   143 00001FB0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   144 00001FB3 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   145                              <1> 
   146 00001FB9 56                  <1>     push rsi
   147 00001FBA 51                  <1>     push rcx
   148 00001FBB 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   149 00001FBF 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   150                              <1> .cw1: 
   151 00001FC1 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   152 00001FC4 7407                <1>     je .cw2
   153 00001FC6 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   154 00001FC7 CD49                <1>     int 49h ;Fast print char
   155 00001FC9 FFC1                <1>     inc ecx
   156 00001FCB EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   157                              <1> .cw2:
   158 00001FCD 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   159 00001FD0 59                  <1>     pop rcx
   160 00001FD1 5E                  <1>     pop rsi
   161 00001FD2 E925FFFFFF          <1>     jmp .conExit
   162                              <1> .conOutputStatus:   ;Function 0Ah
   163 00001FD7 B005                <1>     mov al, 05h ;Bad request structure length?
   164 00001FD9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   165 00001FDC 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   166 00001FE2 E915FFFFFF          <1>     jmp .conExit
   167                              <1> 
   168 00001FE7 00                  <1> .conBuf db 0    ;Single byte buffer
   169                              <1> clkDriver:
   170 00001FE8 50                  <1>     push rax
   171 00001FE9 53                  <1>     push rbx
   172 00001FEA 51                  <1>     push rcx
   173 00001FEB 52                  <1>     push rdx
   174 00001FEC 56                  <1>     push rsi
   175 00001FED 55                  <1>     push rbp
   176 00001FEE 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   177 00001FF5 B003                <1>     mov al, 03h ;Unknown Command
   178 00001FF7 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   179 00001FFB 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   180                              <1> 
   181 00001FFD 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   182 00002000 3C04                <1>     cmp al, 04h
   183 00002002 7437                <1>     jz .clkRead
   184 00002004 3C06                <1>     cmp al, 06h
   185 00002006 0F8494000000        <1>     jz .clkInputStatus
   186 0000200C 3C07                <1>     cmp al, 07h
   187 0000200E 0F8498000000        <1>     jz .clkFlushInputBuffers
   188 00002014 3C08                <1>     cmp al, 08h
   189 00002016 0F84A0000000        <1>     jz .clkWrite
   190 0000201C 3C09                <1>     cmp al, 09h
   191 0000201E 0F8498000000        <1>     jz .clkWrite
   192 00002024 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   193                              <1> .clkNotFunctioning:
   194 00002026 B002                <1>     mov al, 02h ;Device not ready error
   195                              <1> .clkWriteErrorCode:
   196 00002028 B480                <1>     mov ah, 80h ;Set error bit
   197 0000202A 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   198                              <1> .clkExit:
   199 0000202E 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   200 00002034 5D                  <1>     pop rbp
   201 00002035 5E                  <1>     pop rsi
   202 00002036 5A                  <1>     pop rdx
   203 00002037 59                  <1>     pop rcx
   204 00002038 5B                  <1>     pop rbx
   205 00002039 58                  <1>     pop rax
   206 0000203A C3                  <1>     ret
   207                              <1> 
   208                              <1> .clkRead:           ;Function 4
   209 0000203B B005                <1>     mov al, 05h ;Bad request structure length?
   210 0000203D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   211 00002040 75E6                <1>     jne .clkWriteErrorCode
   212                              <1> 
   213 00002042 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   214 00002045 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   215 00002049 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   216 00002050 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   217 00002054 30E4                <1>     xor ah, ah
   218 00002056 CD3A                <1>     int 3Ah         ;Read the system timer
   219 00002058 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   220 0000205A 740D                <1>     jz .clkr1       ;Nope, now just time 
   221 0000205C 30E4                <1>     xor ah, ah
   222                              <1>     ;This works as al should keep count of the # of days passed since last read
   223 0000205E 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   224 00002062 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   225                              <1> .clkr1:
   226 00002069 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   227 0000206C 0FB7D2              <1>     movzx edx, dx
   228 0000206F 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   229 00002071 89D0                <1>     mov eax, edx
   230 00002073 31D2                <1>     xor edx, edx
   231 00002075 89D8                <1>     mov eax, ebx
   232 00002077 B944040000          <1>     mov ecx, 1092   
   233 0000207C F7F1                <1>     div ecx
   234 0000207E 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   235 00002081 89D0                <1>     mov eax, edx    ;Get remainder in eax
   236 00002083 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   237 00002087 31D2                <1>     xor edx, edx
   238 00002089 B95B000000          <1>     mov ecx, 91 ;5*18.2
   239 0000208E F7F1                <1>     div ecx
   240 00002090 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   241 00002093 89D0                <1>     mov eax, edx    ;Get remainder in eax
   242                              <1>     ;lea eax, dword [eax + 4*eax]
   243                              <1>     ;add eax, edx    ;Essentially multiply by 6
   244 00002095 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   245 00002098 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   246 0000209B E98EFFFFFF          <1>     jmp .clkExit
   247                              <1> 
   248                              <1> .clkInputStatus:    ;Function 6
   249                              <1> ;Always return ready
   250 000020A0 B005                <1>     mov al, 05h ;Bad request structure length?
   251 000020A2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   252 000020A5 7581                <1>     jne .clkWriteErrorCode
   253 000020A7 E982FFFFFF          <1>     jmp .clkExit
   254                              <1> .clkFlushInputBuffers:  ;Function 7
   255                              <1> ;Always return done immediately
   256 000020AC B005                <1>     mov al, 05h ;Bad request structure length?
   257 000020AE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   258 000020B1 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   259 000020B7 E972FFFFFF          <1>     jmp .clkExit
   260                              <1> 
   261                              <1> .clkWrite:          ;Functions 8 and 9
   262 000020BC B005                <1>     mov al, 05h ;Bad request structure length?
   263 000020BE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   264 000020C1 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   265                              <1> 
   266 000020C7 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   267 000020CA 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   268 000020CE 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   269 000020D2 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   270                              <1> 
   271 000020D9 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   272 000020DB 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   273 000020DF B105                <1>     mov cl, 5
   274 000020E1 F6F1                <1>     div cl          ;Divide al by 5
   275 000020E3 30E4                <1>     xor ah, ah      ;Remove the remainder
   276 000020E5 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   277                              <1> ;Using the decimal part of this formula for the low count
   278                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   279 000020E7 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   280 000020EA B912000000          <1>     mov ecx, 18
   281 000020EF F7E1                <1>     mul ecx  
   282 000020F1 01C3                <1>     add ebx, eax
   283                              <1> 
   284 000020F3 31D2                <1>     xor edx, edx
   285 000020F5 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   286 000020F9 B944040000          <1>     mov ecx, 1092
   287 000020FE F7E1                <1>     mul ecx
   288 00002100 01C3                <1>     add ebx, eax
   289 00002102 89DA                <1>     mov edx, ebx    ;edx now has low count
   290 00002104 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   291 00002108 B401                <1>     mov ah, 01h     ;Set the system time
   292 0000210A CD3A                <1>     int 3Ah
   293                              <1> 
   294 0000210C 4889F3              <1>     mov rbx, rsi
   295 0000210F E91AFFFFFF          <1>     jmp .clkExit
   296                              <1> 
   297                              <1> .clkBCDtoHex:
   298                              <1> ;Converts a BCD value to a Hex byte
   299                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   300 00002114 51                  <1>     push rcx
   301 00002115 0FB6C0              <1>     movzx eax, al   ;Zero extend
   302 00002118 89C1                <1>     mov ecx, eax    ;Save al in ecx
   303 0000211A 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   304 0000211F 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   305 00002125 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   306                              <1> .cbth0:
   307 00002128 050A000000          <1>     add eax, 10
   308 0000212D E2F9                <1>     loop .cbth0
   309 0000212F 59                  <1>     pop rcx
   310 00002130 C3                  <1>     ret
   311                              <1> 
   312                              <1> .clkHexToBCD:
   313                              <1> ;Converts a Hex byte into two BCD digits
   314                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   315 00002131 51                  <1>     push rcx
   316 00002132 0FB6C0              <1>     movzx eax, al   ;Zero extend
   317 00002135 31C9                <1>     xor ecx, ecx
   318                              <1> .chtb0:
   319 00002137 3D0A000000          <1>     cmp eax, 10
   320 0000213C 7209                <1>     jb .chtb1
   321 0000213E 2D0A000000          <1>     sub eax, 10
   322 00002143 FFC1                <1>     inc ecx
   323 00002145 EBF0                <1>     jmp short .chtb0
   324                              <1> .chtb1:
   325 00002147 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   326 0000214A 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   327 0000214C 59                  <1>     pop rcx
   328 0000214D C3                  <1>     ret
   329 0000214E 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   330                              <1> ;When counting the number of days, first compute the number of years since
   331                              <1> ; 1980 and your year. 
   332                              <1> ;Then, using the table below, find the number of leap years between 1980
   333                              <1> ; and (YourYear - 1). 
   334                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   335                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   336                              <1> ;Use the months table to get the number of days in a normal month as leap 
   337                              <1> ; years are added using the previous comment.
   338                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   339                              <1> ; a leap year using the table. If it is, add an extra day.
   340                              <1> .clkLeapYears:
   341 00002150 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   341 00002159 24282C30            <1>
   342 0000215D 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   342 00002166 585C60              <1>
   343                              <1> .clkMonths:
   344 00002169 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   344 00002172 1F1E1F              <1>
   345                              <1> ;COM Driver headers and main interrupt strat
   346                              <1> com1Intr:
   347 00002175 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   348 0000217C EB19                <1>     jmp short comIntr
   349                              <1> com2Intr:
   350 0000217E C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   351 00002185 EB10                <1>     jmp short comIntr
   352                              <1> com3Intr:
   353 00002187 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   354 0000218E EB07                <1>     jmp short comIntr
   355                              <1> com4Intr:
   356 00002190 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   357                              <1> comIntr:
   358 00002197 50                  <1>     push rax
   359 00002198 53                  <1>     push rbx
   360 00002199 51                  <1>     push rcx
   361 0000219A 52                  <1>     push rdx
   362 0000219B 56                  <1>     push rsi
   363 0000219C 57                  <1>     push rdi
   364 0000219D 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   365 000021A4 B003                <1>     mov al, 03h ;Unknown Command
   366 000021A6 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   367 000021AA 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   368                              <1> 
   369 000021AC 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   370 000021AF 3C04                <1>     cmp al, 4   ;Read Character(s)
   371 000021B1 7462                <1>     jz .comRead
   372 000021B3 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   373 000021B5 0F849B000000        <1>     jz .comNondestructiveRead   
   374 000021BB 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   375 000021BD 0F8484000000        <1>     jz .comReadInputStatus
   376 000021C3 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   377 000021C5 0F84B9000000        <1>     jz .comFlushInputBuffers
   378 000021CB 3C08                <1>     cmp al, 8
   379 000021CD 0F84DB000000        <1>     jz .comWrite
   380 000021D3 3C09                <1>     cmp al, 9
   381 000021D5 0F84D3000000        <1>     jz .comWrite
   382 000021DB 3C0A                <1>     cmp al, 0Ah
   383 000021DD 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   384 000021E3 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   385                              <1> .comErrorNoCount:
   386 000021E5 B002                <1>     mov al, 02h ;Unknown device
   387 000021E7 EB19                <1>     jmp short .comWriteErrorCode
   388                              <1> .comReadError:
   389 000021E9 BA0B000000          <1>     mov edx, 0Bh
   390                              <1> .comWriteError:
   391 000021EE BA0A000000          <1>     mov edx, 0Ah
   392                              <1> .comError:
   393 000021F3 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   394 000021F6 B902000000          <1>     mov ecx, 02h    ;Unknown device
   395 000021FB 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   396 000021FD 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   397 00002200 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   398                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   399 00002202 B480                <1>     mov ah, 80h ;Set error bit
   400 00002204 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   401                              <1> .comExit:
   402 00002208 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   403 0000220E 5F                  <1>     pop rdi
   404 0000220F 5E                  <1>     pop rsi
   405 00002210 5A                  <1>     pop rdx
   406 00002211 59                  <1>     pop rcx
   407 00002212 5B                  <1>     pop rbx
   408 00002213 58                  <1>     pop rax
   409 00002214 C3                  <1>     ret
   410                              <1> 
   411                              <1> .comRead:
   412 00002215 B005                <1>     mov al, 05h ;Bad request structure length?
   413 00002217 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   414 0000221A 75E6                <1>     jne .comWriteErrorCode
   415                              <1> 
   416 0000221C 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   417 00002220 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   418                              <1> .cr1:
   419 00002222 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   420 00002225 741B                <1>     je .cre2
   421                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   422 00002227 B802000000          <1>     mov eax, 02h    ;Recieve 
   423 0000222C 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   424 00002232 6698                <1>     cbw     ;Zero extend to upper byte
   425 00002234 CD34                <1>     int 34h ;Recieve Char
   426 00002236 72BB                <1>     jc .comError
   427 00002238 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   428 0000223B 74EA                <1>     je .cr11
   429 0000223D AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   430 0000223E FFC1                <1>     inc ecx
   431 00002240 EBE0                <1>     jmp short .cr1
   432                              <1> .cre2:
   433 00002242 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   434 00002245 EBC1                <1>     jmp short .comExit
   435                              <1> 
   436                              <1> .comReadInputStatus:
   437 00002247 B005                <1>     mov al, 05h ;Bad request structure length?
   438 00002249 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   439 0000224C 75B4                <1>     jne .comWriteErrorCode
   440 0000224E 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   441 00002254 EBB2                <1>     jmp short .comExit
   442                              <1> 
   443                              <1> .comNondestructiveRead:
   444                              <1> ;Acts like a "read one character if there is one" function
   445 00002256 B005                <1>     mov al, 05h ;Bad request structure length?
   446 00002258 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   447 0000225B 75A5                <1>     jne .comWriteErrorCode
   448                              <1> .cndr1:
   449 0000225D B802000000          <1>     mov eax, 02h    ;Recieve 
   450 00002262 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   451 00002268 6698                <1>     cbw     ;Zero extend to upper byte
   452 0000226A CD34                <1>     int 34h ;Recieve Char
   453 0000226C 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   454 00002272 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   455 00002275 7405                <1>     je .cndr2
   456 00002277 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   457 0000227A EB8C                <1>     jmp short .comExit
   458                              <1> .cndr2:
   459 0000227C 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   460 00002282 EB84                <1>     jmp short .comExit
   461                              <1> 
   462                              <1> .comFlushInputBuffers:
   463 00002284 B005                <1>     mov al, 05h ;Bad request structure length?
   464 00002286 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   465 00002289 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   466                              <1> .cfib0:
   467 0000228F 8A1584000000        <1>     mov dl, byte [.comDevice]
   468 00002295 6698                <1>     cbw
   469 00002297 B802000000          <1>     mov eax, 02h    ;Recieve
   470 0000229C CD34                <1>     int 34h
   471 0000229E 0F8241FFFFFF        <1>     jc .comErrorNoCount
   472 000022A4 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   473 000022A7 75E6                <1>     jne .cfib0
   474 000022A9 E95AFFFFFF          <1>     jmp .comExit
   475                              <1> 
   476                              <1> .comWrite:
   477 000022AE B005                <1>     mov al, 05h ;Bad request structure length?
   478 000022B0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   479 000022B3 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   480                              <1> 
   481 000022B9 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   482 000022BD 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   483                              <1> .cw1: 
   484 000022BF 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   485 000022C2 7417                <1>     je .cw2
   486 000022C4 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   487 000022C5 B401                <1>     mov ah, 01h ;Move function number into ah
   488 000022C7 8A154C000000        <1>     mov dl, byte [.comDevice]
   489 000022CD 6698                <1>     cbw     ;Zero extend to upper byte
   490 000022CF CD34                <1>     int 34h ;Transmit char
   491 000022D1 0F821CFFFFFF        <1>     jc .comError
   492 000022D7 FFC1                <1>     inc ecx
   493 000022D9 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   494                              <1> .cw2:
   495 000022DB 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   496 000022DE E925FFFFFF          <1>     jmp .comExit
   497                              <1> 
   498                              <1> .comOutputStatus:
   499                              <1> ;Read MODEM status
   500 000022E3 B005                <1>     mov al, 05h ;Bad request structure length?
   501 000022E5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   502 000022E8 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   503                              <1> 
   504 000022EE 8A1525000000        <1>     mov dl, byte [.comDevice]
   505 000022F4 6698                <1>     cbw     ;Zero extend to upper byte
   506 000022F6 B403                <1>     mov ah, 03h     ;Get status
   507 000022F8 CD34                <1>     int 34h
   508 000022FA 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   509 00002300 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   510 00002305 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   511 00002308 F7D0                <1>     not eax      ;Bitwise inversion
   512 0000230A 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   513 0000230F 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   514 00002314 E9EFFEFFFF          <1>     jmp .comExit
   515 00002319 00                  <1> .comDevice   db 0
    28                                  %include "./Source/Drivers/diskDrv.asm"
    29                              <1> msdDriver:
    30 0000231A 50                  <1>     push rax
    31 0000231B 53                  <1>     push rbx
    32 0000231C 51                  <1>     push rcx
    33 0000231D 52                  <1>     push rdx
    34 0000231E 56                  <1>     push rsi
    35 0000231F 57                  <1>     push rdi
    36 00002320 55                  <1>     push rbp
    37 00002321 4150                <1>     push r8
    38 00002323 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    39 0000232A 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    40 0000232E B003                <1>     mov al, drvBadCmd
    41 00002330 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    42 00002336 B001                <1>     mov al, drvBadUnit 
    43 00002338 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    44 0000233C 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    45 00002342 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    46 00002349 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    47 0000234D C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    48 00002350 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    49 00002354 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    50 00002358 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    51 0000235A 488D0D9A000000      <1>     lea rcx, .msdTable
    52 00002361 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    53 00002365 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    54 00002367 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    55 00002369 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    56 0000236C FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    57                              <1> .msdDriverExit:
    58 0000236E 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    59 00002374 4158                <1>     pop r8
    60 00002376 5D                  <1>     pop rbp
    61 00002377 5F                  <1>     pop rdi
    62 00002378 5E                  <1>     pop rsi
    63 00002379 5A                  <1>     pop rdx
    64 0000237A 59                  <1>     pop rcx
    65 0000237B 5B                  <1>     pop rbx
    66 0000237C 58                  <1>     pop rax
    67 0000237D C3                  <1>     ret
    68                              <1> 
    69                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    70 0000237E 4889FB              <1>     mov rbx, rdi
    71 00002381 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    72 00002384 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    73 00002386 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    74                              <1> ;Now fall through to general error
    75                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    76 00002389 B401                <1>     mov ah, 01h
    77 0000238B CD33                <1>     int 33h ;Read status of last operation
    78 0000238D 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    79 00002390 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    80 00002392 7460                <1>     je .msdWriteErrorCode 
    81 00002394 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    82 00002396 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    83 00002399 7459                <1>     je .msdWriteErrorCode 
    84 0000239B 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    85 0000239E 7454                <1>     je .msdWriteErrorCode
    86                              <1> ;Device Not Ready
    87 000023A0 B002                <1>     mov al, 02h  ;Device not ready code
    88 000023A2 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    89 000023A5 744D                <1>     je .msdWriteErrorCode
    90 000023A7 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    91 000023AB 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    92                              <1> ;Write Protected
    93 000023AF 30C0                <1>     xor al, al
    94 000023B1 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    95 000023B6 743C                <1>     je .msdWriteErrorCode
    96                              <1> ;CRC Error
    97 000023B8 B004                <1>     mov al, 04h     ;CRC error code
    98 000023BA 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    99 000023BF 7433                <1>     je .msdWriteErrorCode
   100 000023C1 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   101 000023C6 742C                <1>     je .msdWriteErrorCode
   102 000023C8 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   103 000023CD 7425                <1>     je .msdWriteErrorCode
   104                              <1> ;Seek Error
   105 000023CF B006                <1>     mov al, 06h     ;Seek error code
   106 000023D1 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   107 000023D4 741E                <1>     je .msdWriteErrorCode
   108                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   109                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   110 000023D6 B007                <1>     mov al, 07h
   111 000023D8 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   112 000023DB 7417                <1>     je .msdWriteErrorCode
   113                              <1> ;Sector Not Found
   114 000023DD B008                <1>     mov al, 08h     ;Sector not found code
   115 000023DF 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   116 000023E2 7410                <1>     je .msdWriteErrorCode
   117                              <1> ;Write faults
   118 000023E4 B00A                <1>     mov al, 0Ah     ;Write fault
   119 000023E6 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   120 000023E9 7409                <1>     je .msdWriteErrorCode
   121                              <1> ;Read faults
   122 000023EB B00B                <1>     mov al, 0Bh     ;Read fault
   123 000023ED 80F911              <1>     cmp cl, 11h     ;Read error
   124 000023F0 7402                <1>     je .msdWriteErrorCode
   125                              <1> ;General Errors
   126 000023F2 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   127                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   128 000023F4 B480                <1>     mov ah, 80h ;Set error bit
   129 000023F6 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   130 000023FA C3                  <1>     ret ;Return to set done bit
   131                              <1> .msdTable:
   132 000023FB 0000                <1>     dw 0                            ;Function 0
   133 000023FD 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   134 000023FF 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   135 00002401 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   136 00002403 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   137 00002405 0000                <1>     dw 0                            ;Function 5
   138 00002407 0000                <1>     dw 0                            ;Function 6
   139 00002409 0000                <1>     dw 0                            ;Function 7
   140 0000240B 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   141 0000240D 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   142 0000240F 0000                <1>     dw 0                            ;Function 10
   143 00002411 0000                <1>     dw 0                            ;Function 11
   144 00002413 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   145 00002415 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   146 00002417 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   147 00002419 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   148 0000241B 0000                <1>     dw 0                            ;Function 16
   149 0000241D 0000                <1>     dw 0                            ;Function 17
   150 0000241F 0000                <1>     dw 0                            ;Function 18
   151 00002421 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   152 00002423 0000                <1>     dw 0                            ;Function 20
   153 00002425 0000                <1>     dw 0                            ;Function 21
   154 00002427 0000                <1>     dw 0                            ;Function 22
   155 00002429 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   156 0000242B 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   157                              <1> 
   158                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   159                              <1> .msdMedChk:          ;Function 1
   160 0000242D B005                <1>     mov al, 05h ;Bad request structure length
   161 0000242F 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   162 00002432 75C0                <1>     jne .msdWriteErrorCode
   163                              <1> 
   164 00002434 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   165 00002439 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   166 00002440 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   167 00002443 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   168 00002446 753F                <1>     jnz .mmcNoChange
   169                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   170 00002448 B416                <1>     mov ah, 16h 
   171 0000244A CD33                <1>     int 33h
   172 0000244C 0F8237FFFFFF        <1>     jc .msdGenDiskError
   173 00002452 80FC80              <1>     cmp ah, 80h
   174 00002455 740E                <1>     je .mmcNoChangeLine
   175 00002457 80FC86              <1>     cmp ah, 86h
   176 0000245A 7409                <1>     je .mmcNoChangeLine
   177 0000245C 84E4                <1>     test ah, ah ;No change?
   178 0000245E 7427                <1>     jz .mmcNoChange
   179 00002460 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   180 00002463 750D                <1>     jnz .mmcChange
   181                              <1> ;If nothing, fall through and test manually, should never happen though
   182                              <1> .mmcNoChangeLine:
   183                              <1> ;Now we test Media Descriptor
   184 00002465 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   185 0000246A 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   186 0000246D 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   187 00002470 7410                <1>     je .mmcUnsure
   188                              <1> .mmcChange:
   189 00002472 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   190 00002476 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   191 0000247D 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   192                              <1>     ;Check here if there were any open handles on the device when it was changed
   193 00002481 C3                  <1>     ret
   194                              <1> .mmcUnsure:
   195 00002482 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   196 00002486 C3                  <1>     ret
   197                              <1> .mmcNoChange:
   198 00002487 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   199 0000248B C3                  <1>     ret
   200                              <1> 
   201                              <1> 
   202                              <1> .msdBuildBPB:        ;Function 2
   203 0000248C B005                <1>     mov al, 05h ;Bad request structure length
   204 0000248E 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   205 00002491 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   206                              <1> 
   207 00002497 4889DE              <1>     mov rsi, rbx
   208 0000249A 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   209 0000249F 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   210 000024A6 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   211 000024A9 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   212 000024AD 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   213 000024AF 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   214 000024B2 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   215 000024B7 CD33                <1>     int 33h
   216 000024B9 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   217                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   218 000024BF 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   219 000024C3 7418                <1>     je .mbbpb0
   220 000024C5 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   221 000024C9 7412                <1>     je .mbbpb0
   222 000024CB 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   223 000024CF 740C                <1>     je .mbbpb0
   224 000024D1 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   225 000024D5 B007                <1>     mov al, 07h ;Unknown media error code
   226 000024D7 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   227                              <1> .mbbpb0:
   228 000024DD 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   229 000024E0 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   230 000024E5 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   231 000024EC 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   232 000024F0 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   233 000024F3 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   234 000024F7 B90F000000          <1>     mov ecx, bpbEx_size/8
   235 000024FC F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   236 000024FF C3                  <1>     ret
   237                              <1> .msdIOCTLRead:       ;Function 3, returns done
   238 00002500 B005                <1>     mov al, drvBadDrvReq
   239 00002502 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   240 00002505 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   241 0000250B C3                  <1>     ret
   242                              <1> .msdRead:            ;Function 4
   243                              <1> ;Will read one sector at a time.
   244 0000250C B005                <1>     mov al, 05h ;Bad request structure length
   245 0000250E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   246 00002511 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   247                              <1> 
   248 00002517 4889DF              <1>     mov rdi, rbx
   249 0000251A 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   250                              <1> .msdr0:
   251 0000251C B682                <1>     mov dh, 82h ;LBA Read Sectors
   252 0000251E E841010000          <1>     call .msdBlkIOCommon
   253 00002523 0F8255FEFFFF        <1>     jc .msdIOError
   254 00002529 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   255 00002531 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   256 00002539 FFC6                <1>     inc esi
   257 0000253B 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   258 0000253E 75DC                <1>     jne .msdr0
   259 00002540 4889FB              <1>     mov rbx, rdi
   260 00002543 C3                  <1>     ret
   261                              <1> .msdWrite:           ;Function 8
   262                              <1> ;Will write one sector at a time.
   263 00002544 B005                <1>     mov al, 05h ;Bad request structure length
   264 00002546 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   265 00002549 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   266                              <1> 
   267 0000254F 4889DF              <1>     mov rdi, rbx
   268 00002552 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   269                              <1> .msdw0:
   270 00002554 B683                <1>     mov dh, 83h ;LBA Write Sectors
   271 00002556 E809010000          <1>     call .msdBlkIOCommon
   272 0000255B 0F821DFEFFFF        <1>     jc .msdIOError
   273 00002561 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   274 00002569 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   275 00002571 FFC6                <1>     inc esi
   276 00002573 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   277 00002576 75DC                <1>     jne .msdw0
   278 00002578 4889FB              <1>     mov rbx, rdi
   279 0000257B C3                  <1>     ret
   280                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   281                              <1> ;Will write one sector at a time and then verify it.
   282 0000257C B005                <1>     mov al, 05h ;Bad request structure length
   283 0000257E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 00002581 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   285                              <1> 
   286 00002587 4889DF              <1>     mov rdi, rbx
   287 0000258A 31F6                <1>     xor esi, esi  ;Set counter to zero
   288                              <1> .msdwv0:
   289 0000258C B683                <1>     mov dh, 83h ;LBA Write Sectors
   290 0000258E E8D1000000          <1>     call .msdBlkIOCommon
   291 00002593 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   292 00002599 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   293 0000259B E8C4000000          <1>     call .msdBlkIOCommon
   294 000025A0 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   295 000025A6 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   296 000025AE 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   297 000025B6 FFC6                <1>     inc esi
   298 000025B8 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   299 000025BB 75CF                <1>     jne .msdwv0
   300 000025BD 4889FB              <1>     mov rbx, rdi
   301 000025C0 C3                  <1>     ret
   302                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   303 000025C1 B005                <1>     mov al, drvBadDrvReq
   304 000025C3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   305 000025C6 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   306                              <1> 
   307 000025CC C3                  <1>     ret
   308                              <1> .msdDevOpen:         ;Function 13
   309 000025CD B005                <1>     mov al, drvBadDrvReq
   310 000025CF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   311 000025D2 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   312                              <1> 
   313 000025D8 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   314 000025DD 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   315 000025E4 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   316 000025E7 C3                  <1>     ret
   317                              <1> .msdDevClose:        ;Function 14
   318 000025E8 B005                <1>     mov al, drvBadDrvReq
   319 000025EA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   320 000025ED 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   321                              <1> 
   322 000025F3 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   323 000025F8 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   324 000025FF FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   325 00002602 C3                  <1>     ret
   326                              <1> .msdRemovableMedia:  ;Function 15
   327 00002603 B005                <1>     mov al, drvBadDrvReq
   328 00002605 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   329 00002608 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   330                              <1> 
   331 0000260E 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   332 00002613 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   333 0000261A 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   334 0000261D B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   335 00002622 31D2                <1>     xor edx, edx    ;Busy bit clear
   336 00002624 A880                <1>     test al, 80h
   337 00002626 0F44CA              <1>     cmovz ecx, edx
   338 00002629 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   339 0000262D C3                  <1>     ret
   340                              <1> .msdGenericIOCTL:    ;Function 19
   341 0000262E B005                <1>     mov al, drvBadDrvReq
   342 00002630 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   343 00002633 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   344                              <1> 
   345 00002639 C3                  <1>     ret
   346                              <1> .msdGetLogicalDev:   ;Function 23
   347 0000263A B005                <1>     mov al, drvBadDrvReq
   348 0000263C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   349 0000263F 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   350                              <1> 
   351 00002645 8A0541000000        <1>     mov al, byte [.msdCurDev]
   352 0000264B 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   353 0000264E C3                  <1>     ret
   354                              <1> .msdSetLogicalDev:   ;Function 24
   355 0000264F B005                <1>     mov al, drvBadDrvReq
   356 00002651 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   357 00002654 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   358                              <1> 
   359 0000265A 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   360 0000265D 880529000000        <1>     mov byte [.msdCurDev], al
   361 00002663 C3                  <1>     ret
   362                              <1> 
   363                              <1> .msdBlkIOCommon:  ;Does block IO
   364                              <1> ;Called with rdi containing old rbx value and ah with function number
   365                              <1> ;rbp points to bpb
   366                              <1> ;Error handled by caller
   367                              <1> ;Sector count handled by caller
   368                              <1> ;Called with dh = BIOS function number
   369 00002664 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   370 00002669 8A90[8D260000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   371 0000266F 31C9                <1>     xor ecx, ecx
   372 00002671 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   373 00002674 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   374 00002678 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   375 0000267C 88F4                <1>     mov ah, dh
   376 0000267E B001                <1>     mov al, 01h ;Do one sector at a time 
   377 00002680 CD33                <1>     int 33h
   378 00002682 C3                  <1>     ret
   379                              <1> 
   380 00002683 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   381                              <1> ;LASTDRIVE default is 5
   382                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   383                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   384 0000268C 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   385                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   386 0000268D FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   387 00002692 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   388 00002697 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   388 000026A0 000000000000000000- <1>
   388 000026A9 000000000000000000- <1>
   388 000026B2 000000000000000000- <1>
   388 000026BB 00000000            <1>
   389 000026BF 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   389 000026C8 000000000000000000- <1>
   389 000026D1 000000000000000000- <1>
   389 000026DA 000000000000000000- <1>
   389 000026E3 000000000000000000- <1>
   389 000026EC 000000000000000000- <1>
   389 000026F5 000000000000000000- <1>
   389 000026FE 000000000000000000- <1>
   389 00002707 000000000000000000- <1>
   389 00002710 000000000000000000- <1>
   389 00002719 000000000000000000- <1>
   389 00002722 000000000000000000- <1>
   389 0000272B 000000000000000000- <1>
   389 00002734 000000000000000000- <1>
   389 0000273D 000000000000000000- <1>
   389 00002746 000000000000000000- <1>
   389 0000274F 000000000000000000- <1>
   389 00002758 000000000000000000- <1>
   389 00002761 000000000000000000- <1>
   389 0000276A 000000000000000000- <1>
   389 00002773 000000000000000000- <1>
   389 0000277C 000000000000000000- <1>
   389 00002785 000000000000000000- <1>
   389 0000278E 000000000000000000- <1>
   389 00002797 000000000000000000- <1>
   389 000027A0 000000000000000000- <1>
   389 000027A9 000000000000000000- <1>
   389 000027B2 000000000000000000- <1>
   389 000027BB 000000000000000000- <1>
   389 000027C4 000000000000000000- <1>
   389 000027CD 000000000000000000- <1>
   389 000027D6 000000000000000000- <1>
   389 000027DF 000000000000000000- <1>
   389 000027E8 000000000000000000- <1>
   389 000027F1 000000000000000000- <1>
   389 000027FA 000000000000000000- <1>
   389 00002803 000000000000000000- <1>
   389 0000280C 000000000000000000- <1>
   389 00002815 000000000000000000- <1>
   389 0000281E 000000000000000000- <1>
   389 00002827 000000000000000000- <1>
   389 00002830 000000000000000000- <1>
   389 00002839 000000000000000000- <1>
   389 00002842 000000000000000000- <1>
   389 0000284B 000000000000000000- <1>
   389 00002854 000000000000000000- <1>
   389 0000285D 000000000000000000- <1>
   389 00002866 000000000000000000- <1>
   389 0000286F 000000000000000000- <1>
   389 00002878 000000000000000000- <1>
   389 00002881 000000000000000000- <1>
   389 0000288A 000000000000000000- <1>
   389 00002893 000000000000000000- <1>
   389 0000289C 000000000000000000- <1>
   389 000028A5 000000000000000000- <1>
   389 000028AE 000000000000000000- <1>
   389 000028B7 000000000000000000- <1>
   389 000028C0 000000000000000000- <1>
   389 000028C9 000000000000000000- <1>
   389 000028D2 000000000000000000- <1>
   389 000028DB 000000000000000000- <1>
   389 000028E4 000000000000000000- <1>
   389 000028ED 000000000000000000- <1>
   389 000028F6 000000000000000000- <1>
   389 000028FF 000000000000000000- <1>
   389 00002908 000000000000000000- <1>
   389 00002911 000000000000        <1>
   390                              <1> 
   391                              <1> endptr equ $
    29                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    30                                  ;Paragraph alignment
    31                                  %include "./Source/BSS/dosDynaDataArea.asm"
    32                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    33                              <1> ; the MCB chain!
    34 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    35                              <1> 
    36                              <1> ;Create SFT header and corresponding array of five default sft entries
    37 00000010 <res Ah>            <1> firstSftHeader  resb sfth_size
    38 0000001A <res 3Dh>           <1> firstSft        resb sft_size
    39 00000057 <res 3Dh>           <1> secondSft       resb sft_size
    40 00000094 <res 3Dh>           <1> thirdSft        resb sft_size
    41 000000D1 <res 3Dh>           <1> fourthSft       resb sft_size
    42 0000010E <res 3Dh>           <1> fifthSft        resb sft_size
    43                              <1> 
    44                              <1> ;Create DPB chain of first 5 available DPB slots
    45                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    46 0000014B <res 34h>           <1> firstDPB        resb dpb_size
    47 0000017F <res 34h>           <1> secondDPB       resb dpb_size
    48                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    49                              <1> ;Always jettison this space
    50 000001B3 <res 34h>           <1> thirdDPB        resb dpb_size
    51 000001E7 <res 34h>           <1> fourthDPB       resb dpb_size
    52 0000021B <res 34h>           <1> fifthDPB        resb dpb_size 
    53                              <1> 
    54                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    55                              <1> ;Replace once CONFGI.SYS has been read
    56 0000024F <res 5Bh>           <1> initCDS         resb cds_size 
    57                              <1> 
    58                              <1> 
    59 000002AA <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    60 000002CA <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    61                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    62                              <1> dynamicDataAreaLength equ $
