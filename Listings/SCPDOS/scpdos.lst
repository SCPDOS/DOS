     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro reta 0
    78                              <1> cret a
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> %macro retna 0
    82                              <1> cret na
    83                              <1> %endmacro
    84                              <1> 
    85                              <1> %macro breakpoint 0
    86                              <1> xchg bx, bx
    87                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
   179                              <1> 
   180                              <1> %macro defaultBPB 0
   181                              <1>     db 0E9h
   182                              <1>     db 00h
   183                              <1>     db 90h
   184                              <1>     db 'SCPDOSv1'
   185                              <1>     dw 0200h                       
   186                              <1>     db 01h                         
   187                              <1>     dw 0001h                           
   188                              <1>     db 02h                              
   189                              <1>     dw 00E0h            
   190                              <1>     dw 0B40h   
   191                              <1>     db 0F0h                   
   192                              <1>     dw 0009h                   
   193                              <1>     dw 0012h                     
   194                              <1>     dw 0002h                  
   195                              <1>     dd 0                 
   196                              <1>     dd 0 
   197                              <1>     db 00h
   198                              <1>     db 00h
   199                              <1>     db 29h
   200                              <1>     dd 0
   201                              <1>     db 'NO NAME    '
   202                              <1>     db 'FAT12   '
   203                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   204                              <1> %endmacro
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosStruc.inc"
    10                              <1> 
    11                              <1> ;-------------------------------------------------------;
    12                              <1> ; This include file contains miscellaneous internal     ;
    13                              <1> ; SCP/DOS structures.                                   ;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> 
    16                              <1> ;------------------------------------------------------------------------;
    17                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    18                              <1> ; its file system structure. This is used to locate files and structures
    19                              <1> ; on the device itself and to translate file requests to cluster chains
    20                              <1> ; to LBAs to pass to the disk driver..
    21                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    22                              <1> ; drivers Initialise routine has been called.
    23                              <1> ;------------------------------------------------------------------------;
    24                              <1> struc dpb        ;Drive Parameter Block
    25                              <1> 
    26 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    27 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    28 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    29 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    30 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    31 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    32 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    33 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    34 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    35 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    36 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    37 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    38                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    39 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    40 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    41 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    42 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    43 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    44 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    45                              <1> 
    46                              <1> endstruc
    47                              <1> 
    48                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    49                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    52                              <1> ; All disk pathing requests go via the CDS for that drive.
    53                              <1> ; The default drive is the last accessed drive, this number is stored
    54                              <1> ; in the DOS data area.
    55                              <1> ; The CDS is stored as an array with the offset into the array being 
    56                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    57                              <1> ;
    58                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    59                              <1> ;------------------------------------------------------------------------;
    60                              <1> struc cds       ;Current Directory structure
    61 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    62 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    63 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    64 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    65 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    66 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    67                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    68                              <1> ; another, we save the number of chars to skip to that deep level).
    69                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    70                              <1> ; Only affects for SUBST drives, not JOIN
    71                              <1> ; Flags: Bit 15 set = Network drive
    72                              <1> ;        Bit 14 set = Physical drive
    73                              <1> ;        Bit 13 set = JOIN'ed drive
    74                              <1> ;        Bit 12 set = SUBST'ed drive
    75                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    76                              <1> endstruc
    77                              <1> ;CDS equates
    78                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    79                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    80                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    81                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    82                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    83                              <1> ;------------------------------------------------------------------------;
    84                              <1> ; The SFT is a way to allow applications to open file handles to files 
    85                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    86                              <1> ; under the first header, and then a second header will be linked to the 
    87                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    88                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    89                              <1> ; using the FCBS= command. Default FCBS=5.
    90                              <1> ;
    91                              <1> ; A file handle describes the file, and the location within the file that
    92                              <1> ; we are reading. The file handle can be manipulated without the file
    93                              <1> ; being in memory, thus allowing the user to access data without needing 
    94                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    95                              <1> ; accessing devices, by treating them as files with their drivers 
    96                              <1> ; responding and translating the manipulations of the file handle itself.
    97                              <1> ; Neither the driver nor the application should see or use the SFT for
    98                              <1> ; the handle, as it is subject to change (and will change when file 
    99                              <1> ; sharing provisions are included). The DOS will make requests to the 
   100                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   101                              <1> ; track of the information in the SFT entry for that handle. 
   102                              <1> ;
   103                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   104                              <1> ; can point to the same file. It all depends on what the applications 
   105                              <1> ; want to do with the File.
   106                              <1> ;
   107                              <1> ; !!!!IMPORTANT!!!!
   108                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   109                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   110                              <1> ;
   111                              <1> ;Each SFT may look like this:
   112                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   113                              <1> ;            |                |
   114                              <1> ;       wNumFiles*sft    wNumFiles*sft
   115                              <1> ;
   116                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   117                              <1> ; System FCBs.
   118                              <1> ;
   119                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   120                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   121                              <1> ;
   122                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   123                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   124                              <1> ;------------------------------------------------------------------------;
   125                              <1> struc sfth   ;System file table header
   126                              <1> ; This is the SFT header.
   127                              <1> ; This structure comes before the start of the first file in the array/table.
   128 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   129 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc sft
   133                              <1> ;This is the file struc itself
   134 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   135 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   136 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   137 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   138 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   139 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   140 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   141 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   142 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   143 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   144 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   145 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   146 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   147 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   148 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   149 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   150 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   151 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   152 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   153                              <1> ;                           0 means no record
   154                              <1> endstruc
   155                              <1> ;Open Mode equates
   156                              <1> ;Access modes   Bits[2:0]
   157                              <1> ReadAccess      equ 0h
   158                              <1> WriteAccess     equ 1h
   159                              <1> RWAccess        equ 2h
   160                              <1> ;Bit 3 reserved 0
   161                              <1> ;Sharing modes  Bits[6:4]
   162                              <1> CompatShare     equ 0h
   163                              <1> denyRWShare     equ 10h
   164                              <1> denyWriteShare  equ 20h
   165                              <1> denyReadShare   equ 30h
   166                              <1> denyNoneShare   equ 40h
   167                              <1> netFCBShare     equ 70h
   168                              <1> ;Bit 7 reserved 0
   169                              <1> ;Bits 8-12 reserved 0
   170                              <1> 
   171                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   172                              <1> ;Buffering on writes
   173                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   174                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   175                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   176                              <1> ;Attribute Byte
   177                              <1> readOnlyFile    equ 1h
   178                              <1> hiddenFile      equ 2h
   179                              <1> systemFile      equ 4h
   180                              <1> volumeLabel     equ 8h
   181                              <1> directoryFile   equ 10h ;Directory entry
   182                              <1> archiveFile     equ 20h
   183                              <1> ;Device Info equates
   184                              <1> ;For a block device, bits [5:0] contain the drive number
   185                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   186                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   187                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   188                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   189                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   190                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   191                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   192                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   193                              <1> devCharDev      equ 80h ;If set, it is a char device!
   194                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   195                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   196                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   197                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   198                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   199                              <1>  
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>     .oldRBP         resq 1  
   299 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   300 00000009 ??                  <1>     .newSFTVal      resb 1
   301 0000000A ??                  <1>     .newFCBSVal     resb 1
   302 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   303 0000000C ??                  <1>     .newLastdrive   resb 1
   304 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   305 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   306 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   307 00000014 ????????            <1>                     resd 1  ;Alignment byte
   308 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   309                              <1> endstruc
   310                              <1> 
   311                              <1> struc filename
   312                              <1> ;8.3 File name struct
   313 00000000 ????????????????    <1>     .fName  resb 8
   314 00000008 ??????              <1>     .fExt   resb 3
   315                              <1> endstruc
   316                              <1> 
   317                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   318 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   319 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   320 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   321 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   322 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   323 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   324 00000016 ????                <1>     .fileTime   resw 1  ;File time
   325 00000018 ????                <1>     .fileDate   resw 1  ;File date
   326 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   327 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc psp
   331 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   332 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   333 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   334 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   335 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   336 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   337 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   338 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   339 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   340 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   341 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   342 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   343 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   344 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   345                              <1> ;Extra handle arrays are grouped into a linked list
   346                              <1> ;The below are in the same place as in DOS
   347 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   348 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   349                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   350 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   351 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   352                              <1> endstruc
   353                              <1> 
   354                              <1> struc clkStruc
   355 00000000 ????                <1>     .dateWord   resw 1
   356 00000002 ??                  <1>     .minutes    resb 1
   357 00000003 ??                  <1>     .hours      resb 1
   358 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   359 00000005 ??                  <1>     .seconds    resb 1
   360                              <1> endstruc
   361                              <1> 
   362                              <1> struc countryStruc
   363 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   364                              <1>                         ;0 = month day year hh:mm:ss
   365                              <1>                         ;1 = day month year hh:mm:ss
   366                              <1>                         ;2 = year month day hh:mm:ss
   367 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   368 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   369 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   370 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   371 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   372 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   373                              <1>                         ;0 = Symbol leads, without space
   374                              <1>                         ;1 = Symbol follows, without space
   375                              <1>                         ;2 = Symbol leads, one space
   376                              <1>                         ;3 = Symbol follows, one space
   377                              <1>                         ;4 = Symbol replace decimal separator
   378 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   379 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   380 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   381 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   382 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   383                              <1> endstruc
   384                              <1> 
   385                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   386                              <1> ;for a space of 64Gb
   387                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   388                              <1> dosLowBase  equ 600h    ;Low load address
   389                              <1> 
   390                              <1> ;Critical Error AH bitfield equates
   391                              <1> critRead    equ 0h
   392                              <1> critWrite   equ 1h
   393                              <1> critDOS     equ 0h
   394                              <1> critFAT     equ 2h
   395                              <1> critDir     equ 4h
   396                              <1> critData    equ 6h
   397                              <1> critFailOK  equ 8h
   398                              <1> critRetryOK equ 10h
   399                              <1> critIgnorOK equ 20h
   400                              <1> critCharDev equ 80h
   401                              <1> 
   402                              <1> critIgnore  equ 0
   403                              <1> critRetry   equ 1
   404                              <1> critAbort   equ 2
   405                              <1> critFail    equ 3
   406                              <1> 
   407                              <1> ;MISC ASCII control chars
   408                              <1> NUL equ 00h ;^@         | ASCII Null
   409                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   410                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   411                              <1> BEL equ 07h ;^G         | ASCII Bell
   412                              <1> BSP equ 08h ;^H         | ASCII Backspace
   413                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   414                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   415                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   416                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   417                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   418                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   419                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   420                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   421                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   422                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   423                              <1> SPC equ 20h ;Printable  | ASCII Space
   424                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   425                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   426                              <1> 
   427                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   428                              <1> ;Extended Ascii Codes
   429                              <1> eF1     equ 3Bh ;F1 second byte
   430                              <1> eF2     equ 3Ch ;F2 second byte
   431                              <1> eF3     equ 3Dh ;F3 second byte
   432                              <1> eF4     equ 3Eh ;F4 second byte
   433                              <1> eF5     equ 3Fh ;F5 second byte
   434                              <1> eF6     equ 40h ;F6 second byte
   435                              <1> eF7     equ 41h ;F7 second byte
   436                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   437                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   438                              <1> eIns    equ 52h ;Insert second byte
   439                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   440                              <1> 
   441                              <1> ;Default Configuration for the system
   442                              <1> 
   443                              <1> buffersDefault  equ 30
   444                              <1> filesDefault    equ 20
   445                              <1> fcbsDefault     equ 4
   446                              <1> safeFcbsDeflt   equ 0
   447                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Debug/debSym.inc"
    11                              <1> ;This file will include the debuging symbols
    12                              <1> 
    13                              <1> %define true 1
    14                              <1> %define false 0
    15                              <1> 
    16                              <1> ;Switch the DEBUG to false in production!
    17                              <1> %define DEBUG false
    18                              <1> %define DPBINFO false
    19                              <1> %define REGS false
    20                              <1> %define ENDSTATUS true
    21                              <1> %define ALLOCTEST false
    22                              <1> 
    23                              <1> 
    24                              <1> ;Use this space as the debug stack
    25                              <1> %define debStackTop 80000h
    11                                  %include "./Source/Include/dosError.inc"
    12                              <1> ;DOS Error codes
    13                              <1> 
    14                              <1> ;Extended Error Codes
    15                              <1> errInvFnc   equ 1   ;Invalid function number
    16                              <1> errFnf      equ 2   ;File not found
    17                              <1> errPnf      equ 3   ;Path not found
    18                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    19                              <1> errAccDen   equ 5   ;Access denied (to resource)
    20                              <1> errBadHdl   equ 6   ;Invalid handle
    21                              <1> errMCBbad   equ 7   ;MCB's destroyed
    22                              <1> errNoMem    equ 8   ;Insufficient memory
    23                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    24                              <1> errBadEnv   equ 10  ;Invalid environment
    25                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    26                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    27                              <1> errInvDat   equ 13  ;Invalid data
    28                              <1> ;           equ 14  ;Reserved
    29                              <1> errBadDrv   equ 15  ;Invalid drive specified
    30                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    31                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    32                              <1> errNoFil    equ 18  ;No more files, no match found
    33                              <1> ;The following are Driver error codes + 19
    34                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    35                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    36                              <1> errUnkUnt   equ 20  ;Unknown Unit
    37                              <1> errDrvNR    equ 21  ;Drive not ready
    38                              <1> errUnkCmd   equ 22  ;Unknown Command
    39                              <1> errCRCerr   equ 23  ;Data (CRC) error
    40                              <1> errBadRLn   equ 24  ;Bad request structure length
    41                              <1> errSekErr   equ 25  ;Seek error
    42                              <1> errUnkMed   equ 26  ;Unknown media type
    43                              <1> errSecNF    equ 27  ;Sector not Found
    44                              <1> errNoPap    equ 28  ;Printer out of paper
    45                              <1> errWF       equ 29  ;Write fault
    46                              <1> errRF       equ 30  ;Read fault
    47                              <1> errGF       equ 31  ;General fault
    48                              <1> ;----------------------------------------------
    49                              <1> ;The following two go inbetween the Disk errors
    50                              <1> errShrVio   equ 32  ;Sharing violations
    51                              <1> errLokVio   equ 33  ;File Lock violation
    52                              <1> ;----------------------------------------------
    53                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    54                              <1> errNoFCB    equ 35  ;FCB unavailable
    55                              <1> errShrFul   equ 36  ;Sharing buffer full
    56                              <1> 
    57                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    58                              <1> 
    59                              <1> errFilExist equ 80  ;File already exists
    60                              <1> errDirExist equ 82  ;Directory already exists
    61                              <1> errFI44     equ 83  ;Fail on INT 44h
    62                              <1> errRedir    equ 84  ;Too many levels of redirection
    63                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    64                              <1> errBadPass  equ 86  ;Bad password
    65                              <1> errBadParam equ 87  ;Bad parameter passed to request
    66                              <1> errNetWrite equ 88  ;Network Write Fault
    67                              <1> ;-----------------------------------------------------------------------------
    68                              <1> ;Error Loci
    69                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    70                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    71                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    72                              <1> eLocChr     equ 4   ;Serial/Character Device error
    73                              <1> eLocMem     equ 5   ;Related to RAM
    74                              <1> ;-----------------------------------------------------------------------------
    75                              <1> ;Error Actions
    76                              <1> eActRet     equ 1   ;Retry
    77                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    78                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    79                              <1> eActAbt     equ 4   ;Abort with cleanup
    80                              <1> eActKil     equ 5   ;Abort without cleanup
    81                              <1> eActIgn     equ 6   ;Ignore error
    82                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    83                              <1> ;-----------------------------------------------------------------------------
    84                              <1> ;Error classes
    85                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    86                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    87                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    88                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    89                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    90                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    91                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    92                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    93                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    94                              <1> eClsLocked  equ 10  ;Resource Locked
    95                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    96                              <1> eClsClash   equ 12  ;Resource already exists!
    97                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./Source/Include/dosExec.inc"
    13                              <1> ;This include file contains structures related to the EXE format
    14                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    15                              <1> 
    16                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    17                              <1> ; file.
    18                              <1> execLoadGo  equ 0
    19                              <1> execLoad    equ 1
    20                              <1> execInvld   equ 2
    21                              <1> execOverlay equ 3
    22                              <1> 
    23                              <1> struc execFrame
    24 00000000 ????????????????    <1>     .oldRBP     resq 1  
    25 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    26 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    27 00000018 ????????????????    <1>     .wEnvSize   resq 1  ;Size of the environment block
    28 00000020 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    29 00000028 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    30 00000030 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    31                              <1> 
    32 00000038 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    33 00000040 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    34 00000048 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to new Program Base address (consider removing)
    35 00000050 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    36                              <1> .pProgEP:   ;Program EP, recycle this qword
    37 00000058 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    38 00000060 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    39                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    40 00000068 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Possible blocks to be pointed to by rbx
    44                              <1> 
    45                              <1> struc execProg 
    46 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    47 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    48 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    49 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    50                              <1> endstruc
    51                              <1> 
    52                              <1> struc loadProg
    53 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    54 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    55 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    56 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    57 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    58 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc loadOvly
    62 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    63 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    64                              <1> endstruc
    65                              <1> 
    66                              <1> ;----------------------------
    67                              <1> ;   EXE header structures   :
    68                              <1> ;----------------------------
    69                              <1> 
    70                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    71                              <1> dosMagicSignature   equ "MZ"
    72                              <1> dosMagicSignature2  equ "ZM"
    73                              <1> struc imageDosHdr
    74 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    75 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    76 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    77 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    78 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    79 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    80 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    81 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    82 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    83 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    84 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    85 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    86 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    87 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    88 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    89 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    90 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    91 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    92 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Pssobile signatures pointed to by e_lfanew
    96                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    97                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    98                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    99                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
   100                              <1> 
   101                              <1> ;COFF File header, immadiately follows the signature so @ [e_lfanew + 4]
   102                              <1> 
   103                              <1> struc imageFileHeader
   104 00000000 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   105 00000002 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   106 00000004 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   107 00000008 ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   108 0000000C ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   109 00000010 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   110 00000012 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   111                              <1> endstruc
   112                              <1> 
   113                              <1> ;The only valid values in the .machineType field
   114                              <1> 
   115                              <1> imageFileMachineUnknown equ 0
   116                              <1> imageFileMachineAMD64   equ 08664h 
   117                              <1> 
   118                              <1> ;Optional header, immediately follows COFF header
   119                              <1> 
   120                              <1> struc imageFileOptionalHeader
   121 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   122 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   123 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   124 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   125 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   126 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   127 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   128 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   129 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   130 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   131 00000024 ????????            <1> 	.dFileAlignment             resd 1
   132 00000028 ????                <1> 	.wMajOSVer                  resw 1
   133 0000002A ????                <1> 	.wMinOSVer                  resw 1
   134 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   135 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   136 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   137 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   138 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   139 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   140 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   141 00000040 ????????            <1> 	.dCheckSum                  resd 1
   142 00000044 ????                <1> 	.wSubsystem                 resw 1
   143 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   144 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   145 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   146 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   147 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   148 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   149 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   150                              <1> endstruc
   151                              <1> 
   152                              <1> romMagicNum     equ 0107h
   153                              <1> pe32MagicNum    equ 010Bh
   154                              <1> pe64MagicNum    equ 020Bh
   155                              <1> 
   156                              <1> ;Data directory header structure
   157                              <1> 
   158                              <1> struc imageDataDirectory
   159 00000000 ????????            <1>     .virtualAddress  resd 1
   160 00000004 ????????            <1>     .size    resd 1
   161                              <1> endstruc
   162                              <1> 
   163                              <1> struc baseRelocBlock
   164 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   165 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   166                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   167                              <1> endstruc
   168                              <1> ;Section headers that form the Section Table.
   169                              <1> ;There are wNumberOfSections many entries in this table.
   170                              <1> ;Each entry is one imageSectionHdr
   171                              <1> 
   172                              <1> struc imageSectionHdr       ;size 40 bytes
   173 00000000 ????????????????    <1>     .name                   resb 8
   174 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   175 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   176 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   177 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   178 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   179 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   180 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   181 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   182 00000024 ????????            <1> 	.dCharacteristics       resd 1
   183                              <1> endstruc
   184                              <1> 
   185                              <1> ;Section Hdr characteristics flags 
   186                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   187                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   188                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./Source/Sysinit/sysinit.asm"
    16                              <1> ; We arrive here with the following values in the registers.
    17                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    18                              <1> ; dx  = Int 33h boot device number
    19                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    20                              <1> 
    21 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    22 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    23 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    24 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    25 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    26 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    27 0000001A F348A5              <1>     rep movsq   ;Copy over
    28 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    29 00000022 50                  <1>     push rax
    30 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    31                              <1> sysInitldr:
    32                              <1> ;Now the tough part, load DOS to 800
    33 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    34                              <1> .read:
    35 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    36 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    36 00000035 00                  <1>
    37 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    38 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    39 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    40 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    41 0000003F CD33                <1>     int 33h
    42 00000041 7206                <1>     jc .readFail
    43 00000043 6800080000          <1>     push qword 800h
    44 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    45                              <1> .readFail:
    46 00000049 FFCE                <1>     dec esi
    47 0000004B 75DC                <1>     jnz .read
    48 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    49 00000054 B804130000          <1>     mov eax, 1304h
    50 00000059 CD30                <1>     int 30h
    51 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    52 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    52 00000066 6F6164204572726F72- <1>
    52 0000006F 0A0D00              <1>
    53 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    53 0000007B 000000000000000000- <1>
    53 00000084 000000000000000000- <1>
    53 0000008D 000000000000000000- <1>
    53 00000096 000000000000000000- <1>
    53 0000009F 000000000000000000- <1>
    53 000000A8 000000000000000000- <1>
    53 000000B1 000000000000000000- <1>
    53 000000BA 000000000000000000- <1>
    53 000000C3 000000000000000000- <1>
    53 000000CC 000000000000000000- <1>
    53 000000D5 000000000000000000- <1>
    53 000000DE 000000000000000000- <1>
    53 000000E7 000000000000000000- <1>
    53 000000F0 000000000000000000- <1>
    53 000000F9 00000000000000      <1>
    54                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    55                              <1>     ;Store space for a static PSP
    56 00000100 000000000000000000- <1>     db 100h dup 00h
    56 00000109 000000000000000000- <1>
    56 00000112 000000000000000000- <1>
    56 0000011B 000000000000000000- <1>
    56 00000124 000000000000000000- <1>
    56 0000012D 000000000000000000- <1>
    56 00000136 000000000000000000- <1>
    56 0000013F 000000000000000000- <1>
    56 00000148 000000000000000000- <1>
    56 00000151 000000000000000000- <1>
    56 0000015A 000000000000000000- <1>
    56 00000163 000000000000000000- <1>
    56 0000016C 000000000000000000- <1>
    56 00000175 000000000000000000- <1>
    56 0000017E 000000000000000000- <1>
    56 00000187 000000000000000000- <1>
    56 00000190 000000000000000000- <1>
    56 00000199 000000000000000000- <1>
    56 000001A2 000000000000000000- <1>
    56 000001AB 000000000000000000- <1>
    56 000001B4 000000000000000000- <1>
    56 000001BD 000000000000000000- <1>
    56 000001C6 000000000000000000- <1>
    56 000001CF 000000000000000000- <1>
    56 000001D8 000000000000000000- <1>
    56 000001E1 000000000000000000- <1>
    56 000001EA 000000000000000000- <1>
    56 000001F3 000000000000000000- <1>
    56 000001FC 00000000            <1>
    57                              <1> ;END OF FIRST SECTOR!!
    58                              <1> ;DOS SYSINIT BEGINS HERE
    59                              <1> ;First move the alignment of the DOSSEG to 4Kb
    60                              <1> initBegin:
    61 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    62 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    63 00000206 0F32                <1>     rdmsr
    64 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    65 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    66 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    67 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    68 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    69 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    70 00000221 89F8                <1>     mov eax, edi
    71 00000223 4889FA              <1>     mov rdx, rdi
    72 00000226 48C1EA20            <1>     shr rdx, 20h
    73 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    74                              <1> ;------------------------------------------------;
    75                              <1> ;              Connect Debugger                  ;
    76                              <1> ;------------------------------------------------;
    77                              <1> %if DEBUG
    78                              <1> ;Only connect if in debug mode
    79                              <1>     mov eax, 0C501h ;Connect debugger
    80                              <1>     int 35h
    81                              <1> %endif
    82                              <1> ;------------------------------------------------;
    83                              <1> ;           Sanitise the data area               ;
    84                              <1> ;------------------------------------------------;
    85                              <1> ; This call initialises ALL fields in the DOS    ;
    86                              <1> ; data area with 0's. Thus any fields, which     ;
    87                              <1> ; need to be initialised with a 0 value, are     ;
    88                              <1> ; initialised for free.                          ;
    89                              <1> ;------------------------------------------------;
    90 0000022C B9[92DA0300]        <1>     mov ecx, dSegLen
    91 00000231 30C0                <1>     xor al, al
    92 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    93 00000234 F3AA                <1>     rep stosb
    94 00000236 5F                  <1>     pop rdi
    95                              <1> ;------------------------------------------------;
    96                              <1> ;          Start saving Basic DOS data           ;
    97                              <1> ;------------------------------------------------;
    98 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    98 0000023C [10C00300]          <1>
    99                              <1> ;Copy DOS to its final resting place
   100 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
   100 00000245 [00C00300]          <1>
   101 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
   101 0000024E [08C00300]          <1>
   102 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
   103 00000255 4881C7[92DA0300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   104 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   105 00000263 B900100000          <1>     mov ecx, 1000h
   106 00000268 F348A5              <1>     rep movsq
   107                              <1> 
   108 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   109 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   110 00000271 664489C0            <1>     mov ax, r8w
   111 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   112 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   113 00000285 64C60425[7CC00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   113 0000028D 05                  <1>
   114 0000028E 64C60425[A1C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
   114 00000296 05                  <1>
   115 00000297 64C60425[7DC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   115 0000029F 01                  <1>
   116 000002A0 6466C70425-         <1>     mov word fs:[shareCount], 3    ;Retry the repeat 3 times before failing
   116 000002A5 [23C00300]0300      <1>
   117 000002AB 6466C70425-         <1>     mov word fs:[shareDelay], 1    ;Go through one multiple of countdown loop
   117 000002B0 [25C00300]0100      <1>
   118                              <1>     ;If no detected Int 33h devices, halt 
   119 000002B6 49C1E810            <1>     shr r8, 2*8
   120 000002BA 4584C0              <1>     test r8b, r8b
   121 000002BD 0F84E90C0000        <1>     jz errorInit
   122                              <1> ;------------------------------------------------;
   123                              <1> ;          Add additional page tables            ;
   124                              <1> ;------------------------------------------------;
   125                              <1> ;This will allow for up to 64Gb of addressible space
   126 000002C3 4889EF              <1>     mov rdi, rbp
   127                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   128 000002C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   129 000002CB 57                  <1>     push rdi
   130 000002CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   130 000002D5 00                  <1>
   131                              <1> pdtLoop:
   132 000002D6 48AB                <1>     stosq
   133 000002D8 480500002000        <1>     add rax, 200000h
   134 000002DE FFC9                <1>     dec ecx
   135 000002E0 75F4                <1>     jnz pdtLoop
   136 000002E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   137                              <1> ;Now we add every 4kb page to the page directory pointer table
   138                              <1> ;15 4kb pages to consider
   139 000002E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   140 000002E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   141 000002E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   142 000002F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   143 000002F7 B93C000000          <1>     mov ecx, 60
   144 000002FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   145                              <1> pdptLoop:
   146 00000302 48AB                <1>     stosq
   147 00000304 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   148 0000030A FFC9                <1>     dec ecx
   149 0000030C 75F4                <1>     jnz pdptLoop
   150 0000030E 0F20DF              <1>     mov rdi, cr3
   151 00000311 0F22DF              <1>     mov cr3, rdi
   152                              <1> ;------------------------------------------------;
   153                              <1> ;                   MCB inits                    ;
   154                              <1> ;------------------------------------------------;
   155                              <1> mcbInit:
   156 00000314 B820E80000          <1>     mov eax, 0E820h
   157 00000319 CD35                <1>     int 35h
   158                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   159 0000031B E804010000          <1>     call .mcbFindAddress
   160 00000320 7349                <1>     jnc .mcbi1  ;If found, proceed
   161                              <1>     ;Here, we try use E801h
   162 00000322 B801E80000          <1>     mov eax, 0E801h
   163 00000327 CD35                <1>     int 35h
   164 00000329 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   165 0000032C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   166 0000032F 85C0                <1>     test eax, eax
   167 00000331 741B                <1>     jz .worst
   168 00000333 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   169 00000336 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   170 00000339 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   171 00000341 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   172 00000349 E909010000          <1>     jmp mcbBuild
   173                              <1> .worst:
   174                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   175 0000034E B800002000          <1>     mov eax, 200000h
   176 00000353 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   176 00000358 [08C00300]          <1>
   177 0000035C 29D8                <1>     sub eax, ebx
   178 0000035E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   179 00000366 E9EC000000          <1>     jmp mcbBuild 
   180                              <1> .mcbi1:
   181 0000036B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   182 0000036E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   182 00000377 00                  <1>
   183 00000378 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   184 0000037C 0F85C2000000        <1>     jne .mcbFail
   185 00000382 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   186                              <1>     ;PCI hole always exists so this value will always be a dword
   187 00000386 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   188 0000038E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   189 00000391 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   190 00000394 4881FB00000001      <1>     cmp rbx, 1000000h  
   191 0000039B 773C                <1>     ja .skipISA
   192                              <1> ;Here we deal with ISA hole issues
   193 0000039D B820E80000          <1>     mov eax, 0E820h
   194 000003A2 CD35                <1>     int 35h
   195 000003A4 48B800000001000000- <1>     mov rax, 1000000h
   195 000003AD 00                  <1>
   196 000003AE E871000000          <1>     call .mcbFindAddress
   197 000003B3 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   198 000003B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   198 000003C2 00                  <1>
   199 000003C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   200 000003C7 0F858A000000        <1>     jne mcbBuild  
   201 000003CD 488B5808            <1>     mov rbx, qword [rax + 8]
   202 000003D1 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   203                              <1> .skipISA:
   204 000003D9 B820E80000          <1>     mov eax, 0E820h
   205 000003DE CD35                <1>     int 35h
   206 000003E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   206 000003E9 00                  <1>
   207 000003EA E835000000          <1>     call .mcbFindAddress
   208 000003EF 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   209 000003F1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   209 000003FA 00                  <1>
   210 000003FB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   211 000003FF 7556                <1>     jne mcbBuild   
   212 00000401 488B5808            <1>     mov rbx, qword [rax + 8]
   213                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   214 00000405 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   214 0000040E 00                  <1>
   215 0000040F 4839CB              <1>     cmp rbx, rcx
   216 00000412 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   217 00000416 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   217 0000041B [1BC00300]          <1>
   218 0000041F E933000000          <1>     jmp mcbBuild
   219                              <1> .mcbFindAddress:
   220                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   221                              <1> ;Entry: rax = Address of arena to search for
   222                              <1> ;       rsi = Pointer to memory map
   223                              <1> ;       ecx = Number of 24 byte entries
   224                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   225                              <1> ;       CF=CY : value in rax not found
   226 00000424 56                  <1>     push rsi
   227 00000425 51                  <1>     push rcx
   228 00000426 50                  <1>     push rax
   229                              <1> .mfa0:
   230 00000427 483B06              <1>     cmp rax, qword [rsi]
   231 0000042A 7410                <1>     je .mcbAddressFound
   232 0000042C 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   233 00000433 FFC9                <1>     dec ecx
   234 00000435 79F0                <1>     jns .mfa0
   235                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   236 00000437 58                  <1>     pop rax
   237 00000438 59                  <1>     pop rcx
   238 00000439 5E                  <1>     pop rsi
   239 0000043A F9                  <1>     stc
   240 0000043B C3                  <1>     ret
   241                              <1> .mcbAddressFound:
   242 0000043C 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   243 0000043F 59                  <1>     pop rcx ;Pop old rax value off
   244 00000440 59                  <1>     pop rcx
   245 00000441 5E                  <1>     pop rsi
   246 00000442 F8                  <1>     clc
   247 00000443 C3                  <1>     ret
   248                              <1> .mcbFail:
   249 00000444 488D2D970B0000      <1>     lea rbp, mcbFailmsg
   250 0000044B B804130000          <1>     mov eax, 1304h
   251 00000450 CD30                <1>     int 30h
   252 00000452 E9550B0000          <1>     jmp errorInit
   253                              <1> 
   254                              <1> mcbBuild:
   255                              <1> ;Actually build the MCB chain here
   256                              <1> ;Start by computing the difference between userbase and DOS area
   257                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   258 00000457 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   258 0000045C [08C00300]          <1>
   259 00000460 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   260 00000467 56                  <1>     push rsi    ;Save ptr
   261 00000468 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   262 0000046F 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   263 00000472 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   264 0000047A 5B                  <1>     pop rbx
   265 0000047B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   266 0000047E 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   267 00000486 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   268 0000048E C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   269 00000491 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   270 00000494 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   270 00000499 [37C00300]          <1>
   271                              <1> 
   272                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   273 0000049D 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   273 000004A5 00000000            <1>
   274 000004A9 746E                <1>     jz .skipISA
   275                              <1>     ;Here if an ISA hole exists, place a MCB around it
   276 000004AB 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   277                              <1>     ;Remove one MCB worth of space from alloc
   278 000004B2 31C9                <1>     xor ecx, ecx
   279 000004B4 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   280 000004B7 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   281 000004BD C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   282 000004C0 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   283 000004C3 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   284 000004C6 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   285 000004C9 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   286 000004D1 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   286 000004DA 00                  <1>
   287 000004DB 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   288 000004DE 480510000000        <1>     add rax, mcb_size
   289 000004E4 4829C1              <1>     sub rcx, rax    ;Take their difference
   290 000004E7 C1E904              <1>     shr ecx, 4
   291 000004EA 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   292 000004ED C1E104              <1>     shl ecx, 4  ;Get bytes again
   293 000004F0 4881C310000000      <1>     add rbx, mcb_size
   294 000004F7 4801CB              <1>     add rbx, rcx
   295                              <1>     ;RBX should now be at 16Mb
   296 000004FA C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   297 000004FD 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   298 00000505 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   299 0000050D C1E904              <1>     shr ecx, 4  ;Get paragraphs
   300 00000510 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   301 00000516 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   302                              <1> .skipISA:
   303                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   304                              <1>     ;rbx points to a block with "Z" marker
   305 00000519 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   305 00000521 00000000            <1>
   306 00000525 7470                <1>     jz .exit
   307                              <1>     ;Add PCI hole MCB
   308 00000527 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   309                              <1>     ;Remove one MCB worth of space from alloc
   310 0000052E 31C9                <1>     xor ecx, ecx
   311 00000530 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   312 00000533 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   313 00000539 C1E104              <1>     shl ecx, 4  ;Get bytes
   314 0000053C C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   315 0000053F 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   316 00000542 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   317 00000545 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   318 0000054D 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   318 00000556 00                  <1>
   319 00000557 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   320 0000055A 480510000000        <1>     add rax, mcb_size
   321 00000560 4829C1              <1>     sub rcx, rax    ;Take their difference
   322 00000563 C1E904              <1>     shr ecx, 4
   323 00000566 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   324 00000569 C1E104              <1>     shl ecx, 4  ;Get bytes again
   325 0000056C 4881C310000000      <1>     add rbx, mcb_size
   326 00000573 4801CB              <1>     add rbx, rcx
   327                              <1>     ;RBX should now be at 4Gb
   328 00000576 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   329 00000579 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   330 00000581 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   330 00000586 [1BC00300]          <1>
   331 0000058A 48C1E904            <1>     shr rcx, 4
   332 0000058E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   333 00000594 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   334                              <1> .exit:
   335                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   336 00000597 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   337                              <1> ;------------------------------------------------;
   338                              <1> ;          Kernel inits and adjustments          ;
   339                              <1> ;------------------------------------------------;
   340                              <1> ;Adjust Interrupt Entries Int 40h-49h
   341                              <1> adjInts:
   342 0000059E B340                <1>     mov bl, 40h
   343 000005A0 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   344 000005A5 CD35                <1>     int 35h
   345 000005A7 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   346 000005AC 488D3DE50A0000      <1>     lea rdi, intData
   347 000005B3 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   348                              <1> .ai0:
   349 000005B5 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   350 000005BA 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   351 000005BD 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   352                              <1> .ai1:
   353 000005C0 CD35                <1>     int 35h
   354 000005C2 4881C708000000      <1>     add rdi, 8
   355 000005C9 FFC1                <1>     inc ecx
   356 000005CB 81F950000000        <1>     cmp ecx, 50h
   357 000005D1 75E2                <1>     jne .ai0
   358                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   359                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   360                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   361                              <1>     %if DEBUG
   362                              <1> debugPopUpMsg:
   363                              <1>     push rbx
   364                              <1>     push rbp
   365                              <1>     push rcx
   366                              <1>     push rdx
   367                              <1>     mov ecx, 53 ;A large number of lines
   368                              <1>     xor edx, edx    ;COM 1
   369                              <1> .cls:
   370                              <1>     mov eax, 010Ah ;Transmit Line feed
   371                              <1>     int 34h
   372                              <1>     dec ecx
   373                              <1>     jnz .cls
   374                              <1>     lea rbx, qword [debPrintNullString + rbp]
   375                              <1>     lea rbp, .msg
   376                              <1>     call rbx
   377                              <1>     jmp short .exit
   378                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   379                              <1> .exit:
   380                              <1>     pop rdx
   381                              <1>     pop rcx
   382                              <1>     pop rbp
   383                              <1>     pop rbx
   384                              <1>     %endif
   385                              <1> 
   386                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   387 000005D3 488D15D2090000      <1>     lea rdx, errorInit ;Get segment start address
   388 000005DA B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   389 000005DF CD41                <1>     int 41h
   390 000005E1 488D15C4090000      <1>     lea rdx, errorInit ;Get segment start address
   391 000005E8 B844250000          <1>     mov eax, 2544h
   392 000005ED CD41                <1>     int 41h
   393                              <1> ;------------------------------------------------;
   394                              <1> ;          Driver Adjustments and inits          ;
   395                              <1> ;------------------------------------------------;
   396                              <1> ;Modify the pointers in nData before putting them in the data area
   397 000005EF 48012D220B0000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   398 000005F6 48012D250B0000      <1>     add qword [nData + drvHdr.strPtr], rbp
   399 000005FD 48012D260B0000      <1>     add qword [nData + drvHdr.intPtr], rbp
   400                              <1> ;Copy the Null driver to its location in Sysvars
   401 00000604 B922000000          <1>     mov ecx, drvHdr_size
   402 00000609 488D35080B0000      <1>     lea rsi, qword [nData]
   403 00000610 488DBD[7EC00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   404 00000617 F3A4                <1>     rep movsb   
   405                              <1> 
   406                              <1> ;Adjust the addresses in the other driver headers 
   407 00000619 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   407 0000061B [8168000000000000]  <1>
   408 00000623 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   409 00000628 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   410                              <1> adjDrivers:
   411 0000062C E85F090000          <1>     call adjustDrvHdr
   412 00000631 E2F9                <1>     loop adjDrivers
   413                              <1> ;Open NUL
   414                              <1> ;NUL opened
   415                              <1> ;Open CON
   416                              <1> conInit:    ;Rather than keeping this resident... do it here
   417                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   418 00000633 488D95[6C6B0000]    <1>     lea rdx, qword [rbp + fastOutput]
   419 0000063A B849250000          <1>     mov eax, 2549h
   420 0000063F CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   421 00000641 488D95[746B0000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   422 00000648 B83B250000          <1>     mov eax, 253Bh
   423 0000064D CD41                <1>     int 41h ;Hook int 3Bh
   424                              <1> .ci0:
   425 0000064F B401                <1>     mov ah, 01      ;Get buffer status
   426 00000651 CD36                <1>     int 36h
   427 00000653 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   428 00000655 30E4                <1>     xor ah, ah
   429 00000657 CD36                <1>     int 36h ;Read key to flush from buffer
   430 00000659 EBF4                <1>     jmp short .ci0
   431                              <1> .ci1:
   432 0000065B B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   433 00000660 CD30                <1>     int 30h
   434 00000662 B402                <1>     mov ah, 02h
   435 00000664 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   436 00000666 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   437 00000668 CD30                <1>     int 30h
   438 0000066A B707                <1>     mov bh, 07h     ;Grey/Black attribs
   439 0000066C B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   440 00000671 CD30                <1>     int 30h
   441                              <1> 
   442                              <1>     ;Save ptr to ConHdr in Sysvars
   443 00000673 488D85[81680000]    <1>     lea rax, qword [rbp + conHdr]
   444 0000067A 6448890425-         <1>     mov qword fs:[vConPtr], rax
   444 0000067F [57C00300]          <1>
   445                              <1> 
   446                              <1>     ;Fix the ext ESC function handler address
   447 00000683 488D85[AA280000]    <1>     lea rax, qword [rbp + editKeys]
   448 0000068A 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   448 0000068F [5A000000]          <1>
   449                              <1> 
   450                              <1> ;CLOCK init prock
   451                              <1> ;Set the time and date using the RTC (if present)
   452                              <1> clkInit:
   453                              <1>    ;Save ptr to ClkHdr in Sysvars first
   454 00000693 488D85[E7680000]    <1>     lea rax, qword [rbp + clkHdr]
   455 0000069A 6448890425-         <1>     mov qword fs:[clockPtr], rax
   455 0000069F [4FC00300]          <1>
   456                              <1> ;CH - Hours, in BCD
   457                              <1> ;CL - Minutes, in BCD
   458                              <1> ;DH - Seconds, in BCD
   459 000006A3 B402                <1>     mov ah, 02  ;Read RTC Time
   460 000006A5 CD3A                <1>     int 3Ah
   461 000006A7 7271                <1>     jc .clkEnd  ;if error, just exit
   462                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   463 000006A9 0FB6C5              <1>     movzx eax, ch   ;Hours
   464 000006AC E84D000000          <1>     call .bcd2Bin
   465 000006B1 88C5                <1>     mov ch, al
   466 000006B3 0FB6C1              <1>     movzx eax, cl     ;Mins
   467 000006B6 E843000000          <1>     call .bcd2Bin
   468 000006BB 88C1                <1>     mov cl, al
   469 000006BD 0FB6C6              <1>     movzx eax, dh   ;Seconds
   470 000006C0 E839000000          <1>     call .bcd2Bin
   471 000006C5 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   472 000006C7 89C2                <1>     mov edx, eax
   473 000006C9 B42D                <1>     mov ah, 2Dh ;DOS Set Time
   474 000006CB CD41                <1>     int 41h
   475                              <1> ;Now get the date from RTC
   476                              <1> ;CL - Year, in BCD
   477                              <1> ;DH - Month, in BCD
   478                              <1> ;DL - Day, in BCD
   479 000006CD B404                <1>     mov ah, 04  ;Read RTC Date
   480 000006CF CD3A                <1>     int 3Ah
   481 000006D1 7247                <1>     jc .clkEnd
   482                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   483 000006D3 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   484 000006D6 E823000000          <1>     call .bcd2Bin
   485 000006DB 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   486 000006DE 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   487 000006E4 0FB6C6              <1>     movzx eax, dh   ;Get Months
   488 000006E7 E812000000          <1>     call .bcd2Bin
   489 000006EC 88C6                <1>     mov dh, al  
   490 000006EE 0FB6C2              <1>     movzx eax, dl   ;Get day
   491 000006F1 E808000000          <1>     call .bcd2Bin
   492 000006F6 88C2                <1>     mov dl, al
   493 000006F8 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   494 000006FA CD41                <1>     int 41h
   495 000006FC EB1C                <1>     jmp short .clkEnd
   496                              <1> .bcd2Bin:
   497                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   498 000006FE 51                  <1>     push rcx
   499 000006FF 89C1                <1>     mov ecx, eax
   500 00000701 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   501 00000706 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   502 0000070C 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   503 0000070F C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   504                              <1> .b2blp:
   505 00000712 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   506 00000714 FFC9                <1>     dec ecx
   507 00000716 75FA                <1>     jnz .b2blp
   508                              <1> .b2bexit:
   509 00000718 59                  <1>     pop rcx
   510 00000719 C3                  <1>     ret
   511                              <1> .clkEnd:
   512                              <1> ;------------------------------------------------;
   513                              <1> ;         Link DOS to temporary Buffer           ;
   514                              <1> ;------------------------------------------------;
   515                              <1> tempBufferInit:
   516 0000071A 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   517 00000721 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   517 00000726 [61C00300]          <1>
   518 0000072A 31C0                <1>     xor eax, eax
   519 0000072C 48FFC8              <1>     dec rax
   520 0000072F 48AB                <1>     stosq   ;.nextBufPtr, end of list
   521 00000731 AA                  <1>     stosb   ;.driveNumber, Free entry
   522 00000732 48FFC0              <1>     inc rax
   523 00000735 AA                  <1>     stosb   ;.bufferFlags, No flags
   524                              <1> ;------------------------------------------------;
   525                              <1> ;         Init msd driver, create DPB            ;
   526                              <1> ;------------------------------------------------;
   527                              <1> storageInits:
   528                              <1> ;First save dpb pointer in sysvars
   529 00000736 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   530 0000073D 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   530 00000742 [3FC00300]          <1>
   531                              <1> ;Open Mass Storage
   532 00000746 E8EF090000          <1>     call diskInit
   533 0000074B 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   534 0000074E 648A0425[7BC00300]  <1>     mov al, byte fs:[numPhysVol]
   535 00000756 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   536 00000758 0F844E080000        <1>     jz errorInit
   537 0000075E 488D95[5E720000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   538 00000765 30C9                <1>     xor cl, cl  ;Clear counter
   539 00000767 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   539 0000076C [3FC00300]          <1>
   540                              <1> .si0:   
   541 00000770 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   542 00000773 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   543 00000775 CD41                <1>     int 41h
   544                              <1> ;Add other data to DPB
   545 00000777 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   546 0000077A 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   547 0000077D 50                  <1>     push rax
   548 0000077E 488D87[09690000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   549 00000785 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   550 00000789 58                  <1>     pop rax
   551 0000078A FEC1                <1>     inc cl
   552 0000078C 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   553 0000078E 7416                <1>     je .si1
   554 00000790 50                  <1>     push rax
   555 00000791 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   556 00000795 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   557 00000799 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   558 0000079C 58                  <1>     pop rax
   559 0000079D 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   560 000007A4 EBCA                <1>     jmp short .si0
   561                              <1> .si1:
   562                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   563 000007A6 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   564 000007AE 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   565                              <1> ;------------------------------------------------;
   566                              <1> ;          Find largest sector size              ;
   567                              <1> ;------------------------------------------------;
   568                              <1> sectorSizeSearch:
   569                              <1> ;Done by reading BPB's for each drive
   570 000007B1 488D9D[5E720000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   571                              <1>     
   572                              <1>     ;Go thru each block individually
   573 000007B8 31C0                <1>     xor eax, eax
   574 000007BA 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   575                              <1> .findLargest:
   576 000007BD 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   577 000007C1 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   578 000007C6 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   579 000007CD 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   580 000007D0 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   581 000007D3 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   582 000007D5 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   582 000007DA [5FC00300]          <1>
   583                              <1> ;------------------------------------------------;
   584                              <1> ;                CDS array inits                 ;
   585                              <1> ;------------------------------------------------;
   586 000007DE B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   587 000007E3 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   588 000007EA E802000000          <1>     call makeCDSArray
   589 000007EF EB50                <1>     jmp short initialCDSWritten ;Go past the function
   590                              <1> makeCDSArray:
   591                              <1> ;Input: ecx = Size of array
   592                              <1> ;       rdi = Pointer to the start of the CDS array
   593                              <1> ;Ouput: rdi = first byte past the end of the table
   594 000007F1 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   594 000007F6 [69C00300]          <1>
   595 000007FA 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   595 000007FF [3FC00300]          <1>
   596 00000803 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   597                              <1> .tempCDS:
   598 00000808 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   599 0000080A 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   600 0000080E C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   601 00000815 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   602 0000081B 31D2                <1>     xor edx, edx    ;Use edx for flags
   603 0000081D 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   604 00000824 7409                <1>     je .skipValidCDS
   605 00000826 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   606 0000082B 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   607                              <1> .skipValidCDS:
   608 0000082F 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   609 00000833 FFC0                <1>     inc eax ;Increment the drive letter
   610 00000835 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   611 0000083C FFC9                <1>     dec ecx
   612 0000083E 75C8                <1>     jnz .tempCDS
   613 00000840 C3                  <1>     ret
   614                              <1> initialCDSWritten:
   615                              <1> ;------------------------------------------------;
   616                              <1> ;     Set up general PSP areas and DOS vars      ;
   617                              <1> ;------------------------------------------------;
   618                              <1> ;Additional DOS Vars init and fixups
   619 00000841 64C60425[ECC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   619 00000849 FF                  <1>
   620 0000084A 64C60425[B4C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   620 00000852 2F                  <1>
   621 00000853 488DBD[D1010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   622 0000085A 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapaddr], rdi ;Store in country table
   622 0000085F [2E000000]          <1>
   623                              <1> 
   624                              <1> ;Server Table setup
   625 00000863 488D3D(DB030000)    <1>     lea rdi, serverDispTbl  ;Get pointer to table
   626 0000086A 48893D(59DA0300)    <1>     mov qword [serverDispTblPtr], rdi   ;Store to use
   627                              <1> 
   628                              <1> ;Set network machine name to... nothing!
   629 00000871 488DBD[B9C30300]    <1>     lea rdi, qword [rbp + machineName]
   630 00000878 B910000000          <1>     mov ecx, 10h    ;16 chars long
   631 0000087D B020                <1>     mov al, SPC ;Space char
   632 0000087F F3AA                <1>     rep stosb   ;Fill with space chars
   633                              <1> 
   634                              <1> 
   635                              <1> ;Patch Data Table init
   636 00000881 488DBD[C9C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   637 00000888 488D85[E8600000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   638 0000088F 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   639 00000891 488D85[F2600000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   640 00000898 48AB                <1>     stosq
   641 0000089A 488D85[FC600000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   642 000008A1 48AB                <1>     stosq
   643 000008A3 488D85[06610000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   644 000008AA 48AB                <1>     stosq
   645                              <1> 
   646                              <1> ;Initial PSP Init
   647 000008AC 488D1D4DF8FFFF      <1>     lea rbx, qword [tempPSP]
   648 000008B3 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   648 000008B8 [02C40300]          <1>
   649 000008BC 53                  <1>     push rbx
   650 000008BD 4881C380000000      <1>     add rbx, psp.dta
   651 000008C4 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   651 000008C9 [FAC30300]          <1>
   652 000008CD 5B                  <1>     pop rbx
   653 000008CE 66C703CD40          <1>     mov word [rbx + psp.return], 040CDh ;DOS return function
   654 000008D3 66C74350CD41        <1>     mov word [rbx + psp.unixEntry], 041CDh  ;Int 41h!
   655 000008D9 C64352CB            <1>     mov byte [rbx + psp.unixEntry + 2], 0CBh    ;Return!
   656 000008DD 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   657 000008E5 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   658 000008E9 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   659 000008ED 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   660 000008F1 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   660 000008FA FF                  <1>
   661 000008FB 48AB                <1>     stosq   ;8 bytes
   662 000008FD 31C0                <1>     xor eax, eax
   663 000008FF 50                  <1>     push rax    ;Save 0 on the stack
   664 00000900 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   665 00000903 48AB                <1>     stosq   ;16 bytes
   666 00000905 AB                  <1>     stosd   ;20 bytes
   667 00000906 58                  <1>     pop rax ;Get 0 back
   668 00000907 4889433E            <1>     mov qword [rbx + psp.envPtr], rax    ;No environment
   669 0000090B 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   670 0000090F C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   671 00000913 4889DA              <1>     mov rdx, rbx
   672 00000916 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   673 0000091B CD41                <1>     int 41h
   674 0000091D 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   675 00000921 B843350000          <1>     mov eax, 3543h
   676 00000926 CD41                <1>     int 41h
   677 00000928 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   678 0000092C B844350000          <1>     mov eax, 3544h
   679 00000931 CD41                <1>     int 41h
   680 00000933 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   681                              <1> 
   682 00000937 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   683 0000093C 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   684 00000940 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   685                              <1> ;------------------------------------------------;
   686                              <1> ;          Default File Handle Creation          ;
   687                              <1> ;                                                ;
   688                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   689                              <1> ;------------------------------------------------;
   690                              <1> defaultFileHandles:
   691                              <1> ;Fill in the default file table entries
   692 00000942 488D9D[1AC10300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   693 00000949 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   694 00000950 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   695 00000956 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   695 0000095B [47C00300]          <1>
   696 0000095F 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   696 00000968 20                  <1>
   697                              <1> ;GOTO FIRST FILE 
   698 00000969 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   699                              <1> ;Write AUX
   700 00000970 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   701 00000975 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   702 0000097B C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   703 0000097F C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   704                              <1>     ;No EOF when reading from the device
   705 00000983 488B85[A3680000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   706 0000098A 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   707                              <1>     ;Ignore disk related fields and Date/Time of open
   708 0000098E 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   709                              <1>     ;11 chars in 8.3 name
   710 00000992 488D35BD060000      <1>     lea rsi, auxName
   711 00000999 B903000000          <1>     mov ecx, 3
   712 0000099E F3A4                <1>     rep movsb   ;Move the three bytes
   713 000009A0 4889D0              <1>     mov rax, rdx
   714 000009A3 48AB                <1>     stosq   ;Eight spaces left to print
   715 000009A5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   715 000009AA [02C40300]          <1>
   716 000009AE 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   717                              <1> ;GOTO NEXT ENTRY
   718 000009B2 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   719                              <1>     ;Write CON
   720 000009B9 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   721 000009BE 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   722 000009C4 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   723 000009C8 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   724                              <1>     ;No EOF when reading from the device
   725 000009CC 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   725 000009D1 [57C00300]          <1>
   726 000009D5 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   727                              <1>     ;Ignore disk related fields and Date/Time of open
   728 000009D9 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   729                              <1>     ;11 chars in 8.3 name
   730 000009DD 488D356E060000      <1>     lea rsi, conName
   731 000009E4 B903000000          <1>     mov ecx, 3
   732 000009E9 F3A4                <1>     rep movsb   ;Move the three bytes
   733 000009EB 4889D0              <1>     mov rax, rdx
   734 000009EE 48AB                <1>     stosq   ;Eight spaces left to print
   735 000009F0 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   735 000009F5 [02C40300]          <1>
   736 000009F9 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   737                              <1> ;GOTO NEXT ENTRY
   738 000009FD 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   739                              <1> ;Write PRN
   740 00000A04 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   741 00000A09 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   742 00000A0F C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   743 00000A13 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   744                              <1>     ;Want EOF when reading from to the device
   745 00000A17 488B85[C5680000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   746 00000A1E 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   747                              <1>     ;Ignore disk related fields and Date/Time of open
   748 00000A22 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   749                              <1>     ;11 chars in 8.3 name
   750 00000A26 488D352D060000      <1>     lea rsi, prnName
   751 00000A2D B903000000          <1>     mov ecx, 3
   752 00000A32 F3A4                <1>     rep movsb   ;Move the three bytes
   753 00000A34 4889D0              <1>     mov rax, rdx
   754 00000A37 48AB                <1>     stosq   ;Eight spaces left to print
   755 00000A39 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   755 00000A3E [02C40300]          <1>
   756 00000A42 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   757                              <1> ;Zero word 0 of entry 4 and 5
   758 00000A46 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   759 00000A4D 31C0                <1>     xor eax, eax
   760                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   761                              <1>     ; which is ok as these are empty entries, ready to be used)
   762 00000A4F 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   763 00000A51 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   764 00000A58 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   765                              <1> ;------------------------------------------------;
   766                              <1> ;               Setup Share Hooks                ;
   767                              <1> ;------------------------------------------------;
   768 00000A5A 488DBD[A2C00300]    <1>     lea rdi, qword [rbp + shareHooks]
   769 00000A61 488D9D[44670000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   770 00000A68 488D85[3E670000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   771 00000A6F 48AB                <1>     stosq   ;Store bad for marker
   772 00000A71 4893                <1>     xchg rax, rbx
   773 00000A73 48AB                <1>     stosq   ;Store good for open
   774 00000A75 48AB                <1>     stosq   ;Store good for close
   775 00000A77 4893                <1>     xchg rax, rbx
   776                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   777 00000A79 B905000000          <1>     mov ecx, 5
   778 00000A7E F348AB              <1>     rep stosq
   779 00000A81 4893                <1>     xchg rax, rbx
   780 00000A83 48AB                <1>     stosq   ;Store good for check file lock exists
   781 00000A85 4893                <1>     xchg rax, rbx
   782                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   783 00000A87 B903000000          <1>     mov ecx, 3
   784 00000A8C F348AB              <1>     rep stosq
   785 00000A8F 4893                <1>     xchg rax, rbx
   786 00000A91 48AB                <1>     stosq   ;Store good for close dup file share
   787 00000A93 4893                <1>     xchg rax, rbx
   788 00000A95 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   789 00000A97 48AB                <1>     stosq   ;Store bad for update dir information
   790                              <1> ;------------------------------------------------;
   791                              <1> ;             Print Welcome Message              ;
   792                              <1> ;------------------------------------------------;
   793 00000A99 488D152C050000      <1>     lea rdx, strtmsg
   794 00000AA0 B409                <1>     mov ah, 09h
   795 00000AA2 CD41                <1>     int 41h    
   796                              <1> ;------------------------------------------------;
   797                              <1> ;               Load CONFIG.SYS                  ;
   798                              <1> ;------------------------------------------------;
   799                              <1> ;Setup stackframe, workout base 
   800 00000AA4 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   801                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   802 00000AAB 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   803 00000AAF 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   804 00000AB5 7421                <1>     je setupFrame   ;If so, jump
   805 00000AB7 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   806 00000ABA 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   807 00000ABE 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   808 00000AC4 7412                <1>     je setupFrame   ;If so, jump
   809 00000AC6 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   810 00000AC9 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   811 00000ACD 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   812 00000AD3 7403                <1>     je setupFrame   ;If so, jump
   813 00000AD5 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   814                              <1> setupFrame:
   815 00000AD8 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   816 00000ADF 55                  <1>     push rbp
   817 00000AE0 4889E5              <1>     mov rbp, rsp
   818 00000AE3 4881EC20000000      <1>     sub rsp, cfgFrame_size
   819 00000AEA 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   820 00000AEE C645F81E            <1>     mov byte [rbp - cfgFrame.newBuffers], buffersDefault
   821 00000AF2 C645F714            <1>     mov byte [rbp - cfgFrame.newSFTVal], filesDefault
   822 00000AF6 C645F604            <1>     mov byte [rbp - cfgFrame.newFCBSVal], fcbsDefault
   823 00000AFA C645F500            <1>     mov byte [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   824 00000AFE C645F405            <1>     mov byte [rbp - cfgFrame.newLastdrive], lastDriveDeflt
   825                              <1> 
   826 00000B02 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   827 00000B0A A880                <1>     test al, 80h    ;Was boot drive hard disk?
   828 00000B0C 7406                <1>     jz notHDD
   829                              <1> ;Set Current Drive to C:
   830 00000B0E B202                <1>     mov dl, 2
   831 00000B10 B40E                <1>     mov ah, 0Eh ;Select C: Drive
   832 00000B12 CD41                <1>     int 41h
   833                              <1> notHDD:
   834 00000B14 488D1543050000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   835 00000B1B B43D                <1>     mov ah, 3Dh ;Open file for reading
   836 00000B1D B000                <1>     mov al, ReadAccess
   837 00000B1F CD41                <1>     int 41h
   838 00000B21 7200                <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   839                              <1> 
   840                              <1> ;------------------------------------------------;
   841                              <1> ;              Process CONFIG.SYS                ;
   842                              <1> ;------------------------------------------------;
   843                              <1> ;Create a stack frame with the following order.
   844                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   845                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   846                              <1> ; New SFT value.            Default = 20, Min = 5, Max = 254
   847                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   848                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   849                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   850                              <1> ;------------------------------------------------;
   851                              <1> ;   Setup Final Data Areas With Overrides from   ;
   852                              <1> ;                  CONFIG.SYS                    ;
   853                              <1> ;------------------------------------------------;
   854                              <1> ;Add additional buffers. Start from tmpBufHdr
   855                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
   856                              <1> ;Add additional FCBS.
   857                              <1> ;Create a larger CDS if needed.
   858                              <1> noCfg:
   859                              <1> ;Start with buffers:
   860 00000B23 0FB64DF8            <1>     movzx ecx, byte [rbp - cfgFrame.newBuffers]    ;Get new buffers size
   861 00000B27 64880C25[7DC00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
   862                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
   863 00000B2F 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
   863 00000B34 [5FC00300]          <1>
   864 00000B38 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
   865                              <1>     ;Each buffer has no flags, drive number must be -1
   866 00000B3E 488B7DE8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
   867 00000B42 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
   867 00000B47 [61C00300]          <1>
   868 00000B4B 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
   869 00000B4E 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
   870 00000B50 67E325              <1>     jecxz .lastBuffer
   871                              <1> .bufferLoop:
   872 00000B53 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
   873 00000B56 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
   874 00000B59 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   875 00000B5F 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   876 00000B63 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   877 00000B66 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   878 00000B69 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   879 00000B6D 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   880 00000B71 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
   881 00000B74 FFC9                <1>     dec ecx
   882 00000B76 75DB                <1>     jnz .bufferLoop
   883                              <1> .lastBuffer:
   884 00000B78 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
   885 00000B7B 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   886 00000B82 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   887 00000B88 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   888 00000B8C 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   889 00000B8F 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   890 00000B92 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   891 00000B96 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   892 00000B9A 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   893                              <1> 
   894                              <1> ;Now build a new SFT header for the number of files specified by user
   895 00000B9E 0FB64DF7            <1>     movzx ecx, byte [rbp - cfgFrame.newSFTVal]
   896 00000BA2 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
   897 00000BA8 7430                <1>     je .skipSFT
   898 00000BAA 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
   898 00000BAF [47C00300]          <1>
   899 00000BB3 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
   900 00000BB6 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
   901 00000BBA 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
   902 00000BBE 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
   903 00000BC5 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
   904 00000BCC B84F000000          <1>     mov eax, sft_size
   905 00000BD1 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   906 00000BD3 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   907 00000BD6 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   908                              <1> .skipSFT:
   909                              <1> ;FCBS at rdi
   910 00000BDA 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
   910 00000BDF [71C00300]          <1>
   911 00000BE3 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
   912 00000BEA 0FB64DF6            <1>     movzx ecx, byte [rbp - cfgFrame.newFCBSVal]
   913 00000BEE 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
   914 00000BF2 B84F000000          <1>     mov eax, sft_size
   915 00000BF7 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   916 00000BF9 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   917 00000BFC 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   918 00000C00 0FB64DF5            <1>     movzx ecx, byte [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
   919 00000C04 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
   919 00000C09 [79C00300]          <1>
   920                              <1> ;And CDS now
   921 00000C0D 0FB64DF4            <1>     movzx ecx, byte [rbp - cfgFrame.newLastdrive]
   922 00000C11 64880C25[7CC00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
   923 00000C19 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
   923 00000C1E [69C00300]          <1>
   924 00000C22 E8CAFBFFFF          <1>     call makeCDSArray
   925 00000C27 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   926                              <1> 
   927                              <1> ;Computation of new space is complete, now work out how many bytes this is
   928 00000C2B 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
   929 00000C2E 5D                  <1>     pop rbp
   930 00000C2F 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
   931 00000C36 4829DF              <1>     sub rdi, rbx    ;Gives difference now
   932 00000C39 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
   933 00000C3D C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   934                              <1> ;Resize DOS allocation before loading COMMAND.COM
   935 00000C40 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   935 00000C45 [37C00300]          <1>
   936 00000C49 4981C010000000      <1>     add r8, mcb.program
   937 00000C50 B44A                <1>     mov ah, 4Ah
   938 00000C52 CD41                <1>     int 41h
   939                              <1>     
   940                              <1>     %if DEBUG && ALLOCTEST
   941                              <1> ;Test Allocation, Growth and Deallocation
   942                              <1>     mov r15, qword fs:[currentPSP]
   943                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   944                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   945                              <1>     mov ah, 48h ;Allocate
   946                              <1>     int 41h
   947                              <1> 
   948                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   949                              <1>     mov r8, rax ;Move the pointer to r8
   950                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   951                              <1>     mov ah, 4Ah
   952                              <1>     int 41h
   953                              <1> 
   954                              <1>     mov ah, 49h ;Free r8
   955                              <1>     int 41h
   956                              <1>     mov qword fs:[currentPSP], r15
   957                              <1>     %endif
   958                              <1> 
   959                              <1>     %if ENDSTATUS
   960                              <1> debugFinal:
   961                              <1>     ;Print system state
   962 00000C54 55                  <1>     push rbp    ;Only rbp really matters here
   963 00000C55 4989E8              <1>     mov r8, rbp
   964                              <1> 
   965 00000C58 488D2DD0020000      <1>     lea rbp, .msg2
   966 00000C5F 4D8D88[C5040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   967 00000C66 41FFD1              <1>     call r9
   968                              <1> 
   969 00000C69 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   970 00000C70 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   970 00000C75 [08C00300]          <1>
   971                              <1> 
   972 00000C79 4D8D88[00080000]    <1>     lea r9, qword [r8 + overlayQword]
   973 00000C80 41FFD1              <1>     call r9
   974                              <1> 
   975 00000C83 4881C31B000000      <1>     add rbx, 19+8
   976 00000C8A 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   976 00000C8F [00C00300]          <1>
   977 00000C93 41FFD1              <1>     call r9
   978                              <1> 
   979 00000C96 4881C31B000000      <1>     add rbx, 19+8
   980 00000C9D 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   980 00000CA2 [37C00300]          <1>
   981 00000CA6 41FFD1              <1>     call r9
   982                              <1> 
   983 00000CA9 4881C31C000000      <1>     add rbx, 20+8
   984 00000CB0 4D8D88[BD070000]    <1>     lea r9, qword [r8 + overlayDword]
   985 00000CB7 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   986 00000CBF 41FFD1              <1>     call r9
   987                              <1> 
   988 00000CC2 4881C312000000      <1>     add rbx, 10+8
   989 00000CC9 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   990 00000CD1 41FFD1              <1>     call r9
   991                              <1> 
   992 00000CD4 4881C312000000      <1>     add rbx, 10+8
   993 00000CDB 64488B0425-         <1>     mov rax, qword fs:[longMem]
   993 00000CE0 [1BC00300]          <1>
   994 00000CE4 4D8D88[00080000]    <1>     lea r9, qword [r8 + overlayQword]
   995 00000CEB 41FFD1              <1>     call r9
   996                              <1> 
   997 00000CEE 4881C31B000000      <1>     add rbx, 19+8
   998 00000CF5 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   998 00000CFA [3FC00300]          <1>
   999 00000CFE 41FFD1              <1>     call r9
  1000                              <1> 
  1001 00000D01 4881C31B000000      <1>     add rbx, 19+8
  1002 00000D08 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
  1002 00000D0D [47C00300]          <1>
  1003 00000D11 41FFD1              <1>     call r9
  1004                              <1> 
  1005 00000D14 4881C31B000000      <1>     add rbx, 19+8
  1006 00000D1B 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
  1006 00000D20 [61C00300]          <1>
  1007 00000D24 41FFD1              <1>     call r9
  1008                              <1> 
  1009 00000D27 4881C31B000000      <1>     add rbx, 19+8
  1010 00000D2E 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
  1010 00000D33 [69C00300]          <1>
  1011 00000D37 41FFD1              <1>     call r9
  1012                              <1> 
  1013 00000D3A 4D8D88[4B070000]    <1>     lea r9, qword [r8 + overlayByte]
  1014                              <1> 
  1015 00000D41 4881C32C000000      <1>     add rbx, 25+19
  1016 00000D48 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
  1016 00000D4E [7BC00300]          <1>
  1017 00000D52 41FFD1              <1>     call r9
  1018                              <1> 
  1019 00000D55 4881C31E000000      <1>     add rbx, 30
  1020 00000D5C 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
  1020 00000D62 [12C00300]          <1>
  1021 00000D66 41FFD1              <1>     call r9
  1022                              <1> 
  1023 00000D69 4881C31E000000      <1>     add rbx, 30
  1024 00000D70 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
  1024 00000D76 [11C00300]          <1>
  1025 00000D7A 41FFD1              <1>     call r9
  1026                              <1> 
  1027 00000D7D 4881C310000000      <1>     add rbx, 16
  1028 00000D84 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
  1028 00000D8A [10C00300]          <1>
  1029 00000D8E 0441                <1>     add al, "A"
  1030 00000D90 8803                <1>     mov byte [rbx], al
  1031                              <1> 
  1032 00000D92 488D2D10000000      <1>     lea rbp, .msg
  1033 00000D99 4D8D88[C5040000]    <1>     lea r9, qword [r8 + debPrintNullString]
  1034 00000DA0 41FFD1              <1>     call r9
  1035 00000DA3 5D                  <1>     pop rbp
  1036 00000DA4 E99E010000          <1>     jmp l1
  1037 00000DA9 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1037 00000DB2 206261736520464646- <1>
  1037 00000DBB 464646464646464646- <1>
  1037 00000DC4 46464646680A0D      <1>
  1038 00000DCB 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1038 00000DD4 464646464646464646- <1>
  1038 00000DDD 464646464646680A0D  <1>
  1039 00000DE6 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1039 00000DEF 464646464646464646- <1>
  1039 00000DF8 46464646464668200A- <1>
  1039 00000E01 0D                  <1>
  1040 00000E02 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
  1040 00000E0B 464646464646466820  <1>
  1041 00000E14 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
  1041 00000E1D 464646464646466820  <1>
  1042 00000E26 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1042 00000E2F 464646464646464646- <1>
  1042 00000E38 464646464646680A0D  <1>
  1043 00000E41 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1043 00000E4A 464646464646464646- <1>
  1043 00000E53 464646464646680A0D  <1>
  1044 00000E5C 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1044 00000E65 464646464646464646- <1>
  1044 00000E6E 464646464646680A0D  <1>
  1045 00000E77 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1045 00000E80 464646464646464646- <1>
  1045 00000E89 464646464646680A0D  <1>
  1046 00000E92 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1046 00000E9B 464646464646464646- <1>
  1046 00000EA4 464646464646680A0D  <1>
  1047 00000EAD 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1047 00000EB6 204C6F676963616C20- <1>
  1047 00000EBF 447269766573204646- <1>
  1047 00000EC8 680A0D              <1>
  1048 00000ECB 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1048 00000ED4 204669786564204472- <1>
  1048 00000EDD 697665732020204646- <1>
  1048 00000EE6 680A0D              <1>
  1049 00000EE9 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1049 00000EF2 2052656D6F7661626C- <1>
  1049 00000EFB 652044727673204646- <1>
  1049 00000F04 680A0D              <1>
  1050 00000F07 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
  1050 00000F10 65205A3A0A0D        <1>
  1051 00000F16 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1051 00000F1F 4F4D4D414E442E434F- <1>
  1051 00000F28 4D2E2E2E0A0D00      <1>
  1052 00000F2F 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1052 00000F38 626F6F742073756D6D- <1>
  1052 00000F41 6172790A0D00        <1>
  1053                              <1>     %endif
  1054                              <1> l1:
  1055                              <1>     ;Load COMMAND.COM
  1056                              <1>     ;Get currentPSP ptr
  1057 00000F47 B462                <1>     mov ah, 62h ;Get current PSP ptr in rdx
  1058 00000F49 CD41                <1>     int 41h
  1059 00000F4B B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1060 00000F4D CD41                <1>     int 41h
  1061 00000F4F 0441                <1>     add al, "A"
  1062 00000F51 880512010000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1063 00000F57 488D1D1A010000      <1>     lea rbx, cmdBlock
  1064 00000F5E 488D425C            <1>     lea rax, qword [rdx + psp.fcb1]
  1065 00000F62 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1066 00000F66 488D426C            <1>     lea rax, qword [rdx + psp.fcb2]
  1067 00000F6A 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1068 00000F6E 488D15F4000000      <1>     lea rdx, cmdLine
  1069 00000F75 48895308            <1>     mov qword [rbx + execProg.pCmdLine], rdx    ;Store command line here
  1070 00000F79 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1071 00000F7E CD41                <1>     int 41h
  1072 00000F80 488D15A6000000      <1>     lea rdx, badCom
  1073 00000F87 B409                <1>     mov ah, 09h ;Print message
  1074 00000F89 CD41                <1>     int 41h
  1075 00000F8B E92A000000          <1>     jmp errorInit.ei0
  1076                              <1>     
  1077                              <1> ;--------------------------------
  1078                              <1> ;       PROCS FOR SYSINIT       :
  1079                              <1> ;--------------------------------
  1080                              <1> adjustDrvHdr:
  1081                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1082                              <1> ;       rbp = Ptr to the start of the DOS segment
  1083                              <1> ;Output: rsi = EA of next header in DOS segment
  1084 00000F90 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1085 00000F94 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1086 00000F98 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1087 00000F9F 740A                <1>     je .exit
  1088 00000FA1 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1089 00000FA4 4881C622000000      <1>     add rsi, drvHdr_size
  1090                              <1> .exit:
  1091 00000FAB C3                  <1>     ret
  1092                              <1> errorInit:
  1093                              <1> ;If a critical error occurs during sysinit, fail through here
  1094                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1095 00000FAC 488D2D49000000      <1>     lea rbp, hltmsg
  1096 00000FB3 B804130000          <1>     mov eax, 1304h
  1097 00000FB8 CD30                <1>     int 30h
  1098                              <1>     ;cli ;Clear interrupts
  1099                              <1>     ;mov al, -1
  1100                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1101                              <1>     ;out dx, al      ;Mask all lines
  1102                              <1>     ;mov dx, 21h     ;PIC1 data
  1103                              <1>     ;out dx, al      ;Mask all lines
  1104                              <1> .ei0:
  1105 00000FBA F4                  <1>     hlt
  1106 00000FBB F390                <1>     pause
  1107 00000FBD EBFB                <1>     jmp short .ei0
  1108                              <1> noCmdCom:
  1109 00000FBF 488D1567000000      <1>     lea rdx, badCom
  1110 00000FC6 B409                <1>     mov ah, 09h
  1111 00000FC8 CD41                <1>     int 41h
  1112 00000FCA EBEE                <1>     jmp short errorInit.ei0
  1113                              <1> ;--------------------------------
  1114                              <1> ;       DATA FOR SYSINIT        :
  1115                              <1> ;--------------------------------
  1116 00000FCC 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1116 00000FD5 5343502F444F532E2E- <1>
  1116 00000FDE 2E0A0D24            <1>
  1117 00000FE2 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1117 00000FEB 6C6F636174696F6E20- <1>
  1117 00000FF4 4572726F720A0D00    <1>
  1118 00000FFC 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1118 00001005 7469616C6973696E67- <1>
  1118 0000100E 20534350444F532E53- <1>
  1118 00001017 59532E205379737465- <1>
  1118 00001020 6D2068616C74696E67- <1>
  1118 00001029 2E2E2E00            <1>
  1119 0000102D 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1119 00001036 7373696E6720436F6D- <1>
  1119 0000103F 6D616E6420696E7465- <1>
  1119 00001048 727072657465720A0D- <1>
  1119 00001051 24                  <1>
  1120 00001052 434F4E00            <1> conName db "CON",0
  1121 00001056 41555800            <1> auxName db "AUX",0
  1122 0000105A 50524E00            <1> prnName db "PRN",0
  1123                              <1> 
  1124 0000105E 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1124 00001067 5300                <1>
  1125 00001069 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0
  1125 00001072 442E434F4D00        <1>
  1126                              <1> cmdBlock:
  1127                              <1>     istruc execProg
  1128 00001078 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Keep at 0 to "copy" DOS's environment ptr
  1129 00001080 0000000000000000    <1>     at execProg.pCmdLine,   dq 0
  1130 00001088 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1131 00001090 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1132                              <1>     iend
  1133                              <1> 
  1134                              <1> intData:
  1135 00001098 [6F4E000000000000]  <1>     dq terminateProcess ;Int 40h
  1136 000010A0 [605F000000000000]  <1>     dq functionDispatch ;Int 41h
  1137 000010A8 [AC0F000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1138 000010B0 [B860000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1139 000010B8 [A358000000000000]  <1>     dq dosDefCritErrHdlr 
  1140 000010C0 [7359000000000000]  <1>     dq absDiskRead      ;Int 45h
  1141 000010C8 [5459000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1142 000010D0 [764E000000000000]  <1>     dq terminateRes     ;Int 47h
  1143 000010D8 [B860000000000000]  <1>     dq defaultIretq     ;Int 48h
  1144 000010E0 [B860000000000000]  <1>     dq defaultIretq     ;Int 49h
  1145 000010E8 [B860000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1146 000010F0 [B860000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1147 000010F8 [B860000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1148 00001100 [B860000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1149 00001108 [B860000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1150 00001110 [FD66000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1151                              <1> nData:
  1152 00001118 [8168000000000000]  <1>     dq conHdr
  1153 00001120 0480                <1>     dw 08004h
  1154 00001122 [296A000000000000]  <1>     dq nulStrat
  1155 0000112A [2F6A000000000000]  <1>     dq nulIntr
  1156 00001132 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1157                              <1> 
  1158                              <1> diskInit:
  1159                              <1>     ;We create a function to deal with BPB parsing etc
  1160                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1161                              <1>     ;   They dont have to be bootable
  1162                              <1>     ;Then go back and look for other partitions partitions. 
  1163                              <1>     ;   Add each other primary or logical ptn (until max)
  1164                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1165                              <1>     ;Use r8 as device counter
  1166 0000113A 488DBD[86720000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1167 00001141 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1167 00001149 00                  <1>
  1168 0000114A 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1169 00001150 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1169 00001159 00                  <1>
  1170 0000115A B280                <1>     mov dl, 80h ;Start with HDD 0
  1171                              <1> .primary:
  1172 0000115C 64803C25[7BC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1172 00001164 03                  <1>
  1173 00001165 0F84AB000000        <1>     je .remInit
  1174 0000116B 31C9                <1>     xor ecx, ecx    ;Sector 0
  1175 0000116D E871010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1176 00001172 0F8289000000        <1>     jc .primaryEpilog
  1177                              <1>     ;Here, check MBR or BPB
  1178 00001178 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1179 00001181 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1180                              <1>     ;Now check if BPB or MBR
  1181 00001183 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1182 00001185 8A6302              <1>     mov ah, byte [rbx + 2]
  1183 00001188 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1184 0000118C 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1185                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1186                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1187 0000118E 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1188 00001195 B104                <1>     mov cl, 4
  1189                              <1> .checkPrimary:
  1190 00001197 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1191 0000119A 3C01                <1>     cmp al, 01
  1192 0000119C 7421                <1>     je .primaryFound
  1193 0000119E 3C04                <1>     cmp al, 04
  1194 000011A0 741D                <1>     je .primaryFound
  1195 000011A2 3C06                <1>     cmp al, 06
  1196 000011A4 7419                <1>     je .primaryFound
  1197 000011A6 3C0B                <1>     cmp al, 0Bh
  1198 000011A8 7415                <1>     je .primaryFound
  1199 000011AA 3C0C                <1>     cmp al, 0Ch
  1200 000011AC 7411                <1>     je .primaryFound
  1201 000011AE 3C0E                <1>     cmp al, 0Eh
  1202 000011B0 740D                <1>     je .primaryFound
  1203 000011B2 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1204 000011B9 FEC9                <1>     dec cl
  1205 000011BB 7444                <1>     jz .primaryEpilog
  1206 000011BD EBD8                <1>     jmp short .checkPrimary
  1207                              <1> .primaryFound:
  1208                              <1>     ;Copy the first sector of this partition into memory
  1209 000011BF 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1210 000011C2 E81C010000          <1>     call .initReadSector
  1211 000011C7 7238                <1>     jc .primaryEpilog
  1212                              <1>     ;Now verify this is a BPB
  1213 000011C9 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1214 000011CB 8A6302              <1>     mov ah, byte [rbx + 2]
  1215 000011CE 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1216 000011D2 752D                <1>     jne .primaryEpilog   ;If not, skip
  1217                              <1>     ;Now copy data to internal tables
  1218 000011D4 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1219 000011D7 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1220 000011DC 57                  <1>     push rdi
  1221 000011DD F348A5              <1>     rep movsq   ;Copy the BPB
  1222 000011E0 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1223                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1224 000011E1 4A8D9C05[54720000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1225                              <1>     ;Add device count to rbx to point to correct entry
  1226 000011E9 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1227 000011EB 4A8D9CC5[5E720000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1228 000011F3 488933              <1>     mov qword [rbx], rsi
  1229 000011F6 49FFC0              <1>     inc r8  ;Goto next logical drive
  1230 000011F9 64FE0425[7BC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1231                              <1> .primaryEpilog:
  1232 00001201 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1233 00001203 88D6                <1>     mov dh, dl
  1234 00001205 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1235 00001208 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1236 00001210 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1237                              <1> .extended:
  1238                              <1> ;We have gone through all the devices once
  1239                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1240                              <1>     ;je .remInit ;If yes, get removable devices
  1241                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1242                              <1>     ;xor ecx, ecx    ;Get MBR back
  1243                              <1>     ;call .initReadSector
  1244                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1245                              <1> .remInit:
  1246                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1247                              <1> ; for some reason the removable drives stop working or dont exist.
  1248                              <1> ;This forces the hard drives to start at C:
  1249 00001216 53                  <1>     push rbx
  1250 00001217 488D9D[86720000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBblks] ;Get default drive A block ptr
  1251 0000121E 48899D[5E720000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl], rbx  ;Store in ptrs table
  1252 00001225 4881C378000000      <1>     add rbx, bpbEx_size ;Goto next ptr
  1253 0000122C 48899D[66720000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl + 8], rbx  ;Store next pointer
  1254 00001233 5B                  <1>     pop rbx
  1255                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1256 00001234 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1257 00001237 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1258 00001239 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1259                              <1>     ;rdi points to the space for the subsequent bpb's
  1260 0000123C 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1260 00001244 00                  <1>
  1261 00001245 750A                <1>     jnz .removables
  1262 00001247 64800425[7BC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1262 0000124F 02                  <1>
  1263 00001250 C3                  <1>     ret ;and return!
  1264                              <1> .removables:
  1265 00001251 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1266 00001253 E88B000000          <1>     call .initReadSector
  1267 00001258 7238                <1>     jc .removableEpilogue   ;Goto next device
  1268                              <1>     ;Now verify this is a BPB
  1269 0000125A 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1270 0000125C 8A6302              <1>     mov ah, byte [rbx + 2]
  1271 0000125F 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1272 00001263 752D                <1>     jne .removableEpilogue   ;If not, skip
  1273                              <1>     ;Now copy data to internal tables
  1274 00001265 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1275 00001268 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1276 0000126D 57                  <1>     push rdi
  1277 0000126E F348A5              <1>     rep movsq   ;Copy the BPB
  1278 00001271 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1279                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1280 00001272 4A8D9C05[54720000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1281                              <1>     ;Add device count to rbx to point to correct entry
  1282 0000127A 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1283 0000127C 4A8D9CC5[5E720000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1284 00001284 488933              <1>     mov qword [rbx], rsi
  1285 00001287 49FFC0              <1>     inc r8  ;Goto next logical drive
  1286 0000128A 64FE0425[7BC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1287                              <1> .removableEpilogue:
  1288 00001292 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1289 00001294 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1290 0000129C 7412                <1>     je .end
  1291 0000129E 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1292 000012A5 7403                <1>     je .re0
  1293 000012A7 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1294                              <1> .re0:
  1295 000012AA 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1296 000012AE 72A1                <1>     jb .removables
  1297                              <1> .end:
  1298 000012B0 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1298 000012B8 01                  <1>
  1299 000012B9 7401                <1>     je .singleRemDev
  1300 000012BB C3                  <1>     ret
  1301                              <1> .singleRemDev:
  1302                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1303 000012BC 488D9D[54720000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1304 000012C3 8A95[54720000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1305 000012C9 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1306 000012CC 488D9D[5E720000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1307 000012D3 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1308 000012D6 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1309 000012DA 64FE0425[7BC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1310 000012E2 C3                  <1>     ret
  1311                              <1> .initReadSector:
  1312                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1313 000012E3 B482                <1>     mov ah, 82h ;Read
  1314 000012E5 B001                <1>     mov al, 1   ;One sector
  1315 000012E7 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1316 000012EE CD33                <1>     int 33h
  1317 000012F0 C3                  <1>     ret
    16                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    17                                  %include "./Source/BSS/dosSeg.asm"
    18                              <1> ;This file contains the main DOS data segment
    19                              <1> dosAPT: ;Additional Page tables
    20 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    21                              <1> dosDataArea:
    22 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    23 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    24 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    25 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    26 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    27 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    28 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    29 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    30                              <1> ;Above is the system stats
    31                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM SHARE TO NUMJOINDRV
    32                              <1> ;Both below variables can be edited with Int 41h AX=440Bh
    33 0003C023 ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    34 0003C025 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    35 0003C027 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    36 0003C02F ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    37                              <1>     ;   A value of 0 means no chars buffered.
    38 0003C037 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    39                              <1> sysVarsPtr:
    40 0003C03F ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    41 0003C047 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    42 0003C04F ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    43                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    44 0003C057 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    45                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    46 0003C05F ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    47 0003C061 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    48 0003C069 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    49 0003C071 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    50 0003C079 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    51                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    52 0003C07B ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    53 0003C07C ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    54 0003C07D ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    55 0003C07E <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    56 0003C0A0 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    57                              <1> ;Additional internal variables
    58 0003C0A1 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    59                              <1>     ;PLEASE DO NOT TOUCH MAXHNDLS!!!
    60                              <1>     ;Share hook functions here
    61                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
    62                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
    63                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
    64                              <1> 
    65                              <1>     ;Note to programmer - Please adjust as necessary:
    66                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
    67                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
    68                              <1>     ;Those suffixed with a ? have their future in question.
    69                              <1>     ;Those suffixed with a / are done partially wrt MSDOS, because SCPDOS does
    70                              <1>     ; not open handles for actions such as file rename etc.
    71                              <1> shareHooks:
    72 0003C0A2 ????????????????    <1>     markerShare resq 1  ;Marker Share hook,                             unused
    73 0003C0AA ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
    74 0003C0B2 ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
    75 0003C0BA ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
    76 0003C0C2 ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
    77 0003C0CA ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
    78 0003C0D2 ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
    79 0003C0DA ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
    80 0003C0E2 ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
    81 0003C0EA ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
    82 0003C0F2 ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
    83 0003C0FA ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
    84 0003C102 ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
    85 0003C10A ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. UNUSED?
    86 0003C112 ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE. 
    87                              <1> ;Create SFT header and corresponding array of five default sft entries
    88 0003C11A <res Ah>            <1>     firstSftHeader  resb sfth_size
    89 0003C124 <res 4Fh>           <1>     firstSft    resb sft_size
    90 0003C173 <res 4Fh>           <1>     secondSft   resb sft_size
    91 0003C1C2 <res 4Fh>           <1>     thirdSft    resb sft_size
    92 0003C211 <res 4Fh>           <1>     fourthSft   resb sft_size
    93 0003C260 <res 4Fh>           <1>     fifthSft    resb sft_size
    94                              <1> 
    95                              <1> ;Virtual CONsole Buffers
    96 0003C2AF ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    97                              <1>     ;Only incremented when CON device runs vCon
    98                              <1> vConBuf:    ;Proper buffer symbol
    99 0003C2B0 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   100 0003C2B1 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   101                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   102 0003C331 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   103 0003C3B1 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   104                              <1> 
   105 0003C3B2 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   106 0003C3B3 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   107 0003C3B4 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   108 0003C3B5 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   109                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   110                              <1> 
   111 0003C3B6 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   112                              <1> ;Server stuff. Default to all zeros (blank)
   113 0003C3B7 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   114                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   115 0003C3B8 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
   116 0003C3B9 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
   117                              <1> ;Swappable Data Area
   118 0003C3C9 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   119 0003C3E9 ??                  <1>                 resb 1  ;Alignment byte
   120                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   121 0003C3EA ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   122 0003C3EB ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   123 0003C3EC ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   124 0003C3ED ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   125 0003C3EE ????                <1>     errorExCde  resw 1  ;Extended Error Code
   126 0003C3F0 ??                  <1>     errorAction resb 1  ;Suggested action for error  
   127 0003C3F1 ??                  <1>     errorClass  resb 1  ;Error Class
   128 0003C3F2 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   129 0003C3FA ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   130 0003C402 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   131                              <1> 
   132 0003C40A ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   133 0003C412 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   134                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   135                              <1>     ;Lower byte: User Specified
   136 0003C414 ??                  <1>     currentDrv  resb 1  ;Default drive x
   137 0003C415 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   138                              <1> ;SDA, needs to be replaced between processes
   139                              <1> sdaMainSwap:
   140 0003C416 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   141 0003C41E ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   142 0003C426 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   143 0003C428 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   144 0003C430 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   145 0003C438 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   146 0003C440 ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   147 0003C442 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   148 0003C44A ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   149 0003C44B ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   150 0003C44C ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   151                              <1> 
   152 0003C44D ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   153 0003C455 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   154 0003C45D ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   155 0003C465 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   156 0003C46D ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   157                              <1> ;The below flag tells DOS to print ^C in the termination function
   158 0003C46E ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   159 0003C46F ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   160                              <1> ;Time stuff
   161                              <1> ;Read the below two as a word
   162 0003C470 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   163 0003C471 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   164 0003C472 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   165 0003C473 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   166 0003C475 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   167                              <1> 
   168 0003C476 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   169 0003C477 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   170 0003C478 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   171                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   172                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   173                              <1> ; without forcing to re-build the whole primary request block.
   174                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   175                              <1> ; with secondary char output going through the secondary header
   176                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   177                              <1> ; for output)
   178                              <1> ;ioReqPkt is the largest possible packet
   179 0003C479 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   180 0003C4A3 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   181 0003C4CD <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   182 0003C4F7 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   183                              <1> ;Swappable Buffers
   184 0003C4F8 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   185                              <1>     ;We add an additional byte to save ah too
   186 0003C4FE ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   187 0003C500 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   188 0003C580 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   189 0003C600 ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   190 0003C608 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   191 0003C610 ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   192                              <1> ;Misc bookkeeping flags and vars
   193 0003C611 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   194 0003C63C <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   195 0003C65C <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   196 0003C6B7 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   197 0003C6C3 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   198 0003C6CF ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   199                              <1> 
   200 0003C6D7 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   201 0003C6D8 ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   202 0003C6D9 ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   203 0003C6DA ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   204 0003C6DB ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   205 0003C6DC ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   206 0003C6DD ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   207 0003C6DE ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write, read/write/share error reporting
   208 0003C6DF ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   209 0003C6E0 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   210                              <1> 
   211 0003C6E1 ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   212 0003C6E2 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   213 0003C6E3 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   214 0003C6E4 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   215 0003C6E5 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   216 0003C6E6 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   217 0003C6E7 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   218                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   219                              <1> workingDD:  ;Create a symbol for the working device driver too
   220 0003C6E8 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   221 0003C6F0 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   222 0003C6F8 ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   223                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   224                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   225 0003C700 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   226 0003C708 ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   227 0003C710 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   228 0003C718 ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   229 0003C71A ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   230 0003C71C ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   231                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   232                              <1> ; and 32 byte offset into the sector for directory
   233 0003C724 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   234                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   235                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   236 0003C72C ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   237                              <1> ;***************************************************|
   238                              <1> ; Needs to be set up before any file access         |
   239                              <1> ; These vars keep track of file access properties   |
   240                              <1> ;   and must be used only for such purposes.        |
   241                              <1> ;***************************************************|
   242 0003C72E ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   243 0003C732 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   244                              <1> 
   245 0003C736 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   246 0003C73A ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   247 0003C73B ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   248                              <1> 
   249 0003C743 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   250 0003C745 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   251                              <1> ;***************************************************|
   252 0003C749 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   253 0003C74D ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   254 0003C751 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   255 0003C752 ????????            <1>     bytesAppend resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   256 0003C756 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   257 0003C75A ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   258                              <1> ;Directory stuff
   259 0003C75E ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   260 0003C762 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   261 0003C766 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   262 0003C768 ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   263                              <1> ;Error DPB 
   264 0003C76C ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   265 0003C774 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   266                              <1>     
   267 0003C775 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   268 0003C7A0 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   269                              <1> ;Stacks and scratch SFT
   270 0003C7C0 <res 528h>          <1>     critStack   resq 165
   271 0003CCE8 ????????????????    <1>     critStakTop resq 1
   272                              <1> 
   273 0003CCF0 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   274                              <1> 
   275 0003CD3F <res 638h>          <1>     AuxStack    resq 199
   276 0003D377 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   277 0003D37F <res 638h>          <1>     DiskStack   resq 199
   278 0003D9B7 ????????????????    <1>     DiskStakTop resq 1
   279                              <1> 
   280 0003D9BF ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   281 0003D9C0 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   282                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   283 0003D9C1 <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   284 0003DA31 <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   285                              <1>     sdaLen      equ     $ - sda 
   286                              <1>     sdaMSLen    equ     $ - sdaMainSwap
   287                              <1> 
   288                              <1> ;Additional variables NOT in the SDA
   289 0003DA59 ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   290 0003DA61 ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   291 0003DA62 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   292                              <1>     ;for saving the current header when quickly doing a second request
   293                              <1> 
   294 0003DA8C ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   295 0003DA8D ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   296                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   297                              <1> inExtASCII:
   298 0003DA8F ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   299 0003DA90 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   300                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   301                              <1>     ; copy of the date/time record
   302                              <1> 
   303                              <1>     dSegLen     equ     $
    18                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    19                                  %define currSegVBase section.resSeg.vstart
    20                                  %include "./Source/Data/staticData.asm"
    21                              <1> 
    22                              <1> ;-----------------------------------:
    23                              <1> ;       Static Data Variables       :
    24                              <1> ;-----------------------------------:
    25 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    26 00000001 02                  <1> dosMinor    db 02h      ;.02
    27 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    27 0000000B 535953              <1>
    28 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    28 00000017 535953              <1>
    29 0000001A 1400                <1> maxHndls    dw 20    ;Initially hardcoded 20, will be made changable soon
    30                              <1> ;Use the idea of having a JFT valid byte in the PSP to reuse PSP as ptrToNewJFT
    31                              <1> ;At that point, maxHndls will be removed
    32                              <1> ;-----------------------------------:
    33                              <1> ;        Static Data Tables         :
    34                              <1> ;-----------------------------------:
    35                              <1> ctryTbl:
    36                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
    37 0000001C 0100                <1>     dw 1            
    38 0000001E 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
    39 00000023 2C00                <1>     db ",",0
    40 00000025 2E00                <1>     db ".",0
    41 00000027 2D00                <1>     db "-",0
    42 00000029 3A00                <1>     db ":",0
    43 0000002B 00                  <1>     db 0
    44 0000002C 02                  <1>     db 2 
    45 0000002D 00                  <1>     db 0 
    46 0000002E 0000000000000000    <1>     dq 0 
    47 00000036 2C00                <1>     db ",",0    
    48 00000038 000000000000000000- <1>     db 0,0,0,0,0,0,0,0,0,0
    48 00000041 00                  <1>
    49                              <1> 
    50                              <1> ;IO Char table
    51                              <1> ;This table has Request header length, command code and error flags
    52                              <1> ; as a packed DWORD entry
    53                              <1> ioRqCmdErrTbl:
    54                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    55                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    56 00000042 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    57 00000046 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    58 0000004A 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    59 0000004E 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    60 00000052 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    61 00000056 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    66                              <1> ; wish to install their own custom logic.
    67 0000005A 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    68 00000062 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    69 00000063 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    70                              <1> ;Extended ASCII keys with special meanings
    71 00000064 3B                  <1> extKeyTbl   db eF1
    72 00000065 9227                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    73 00000067 3C                  <1>             db eF2
    74 00000068 8427                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    75 0000006A 3D                  <1>             db eF3
    76 0000006B 8B27                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    77 0000006D 3E                  <1>             db eF4
    78 0000006E C027                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    79 00000070 3F                  <1>             db eF5
    80 00000071 0528                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    81 00000073 40                  <1>             db eF6
    82 00000074 1B28                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    83 00000076 41                  <1>             db eF7
    84 00000077 2228                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    85 00000079 4B                  <1>             db eCursL
    86 0000007A E926                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    87 0000007C 4D                  <1>             db eCursR
    88 0000007D 9227                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    89 0000007F 52                  <1>             db eIns
    90 00000080 2D28                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    91 00000082 53                  <1>             db eDel
    92 00000083 3428                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    93                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    94                              <1> 
    95                              <1> ;When counting the number of days, first compute the number of years since
    96                              <1> ; 1980 and your year. 
    97                              <1> ;Then, using the table below, find the number of leap years between 1980
    98                              <1> ; and (YourYear - 1). 
    99                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   100                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   101                              <1> ;
   102                              <1> ;Use the months table to get the number of days in a normal month as leap 
   103                              <1> ; years are added using the previous comment.
   104                              <1> 
   105                              <1> ;This table is the number of days in the month
   106                              <1> ;The function which updates the days in Feb writes the number to this table
   107                              <1> monthsTbl:  
   108 00000085 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   108 0000008E 1F1E1F              <1>
   109                              <1> 
   110                              <1> ;Error tables
   111                              <1> errXlatTbl:
   112                              <1> ;Each entry is n bytes long, defined as
   113                              <1> ; Byte 0      : DOS function number for which translation will occur
   114                              <1> ; Byte 1      : Length of the table entry - 2
   115                              <1> ; Bytes n - 3 : Acceptable Error codes
   116                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   117                              <1> ;The table is terminated with a single -1 byte
   118                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   119                              <1> ; only on entry to a disk function
   120 00000091 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   121 00000095 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   122 0000009A 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   123 000000A0 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   124 000000A4 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   125 000000AA 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   126 000000B1 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   127 000000B4 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   128 000000B8 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   129 000000BC 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   130 000000C1 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   131 000000C5 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   132 000000CB 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   133 000000D2 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   134 000000D6 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   135 000000DA 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   136 000000DD 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   137 000000E1 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   138 000000E5 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   139 000000EA 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   140 000000F2 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   141 000000F4 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   142 000000F9 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   143 000000FC 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   144 00000102 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   145 00000106 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   146 00000109 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   147 0000010F 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   148 00000116 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   149 0000011C 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   150 00000120 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   151 00000124 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   152 00000127 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   153 0000012C FF                  <1>     db -1   ;End Of Table marker
   154                              <1> 
   155                              <1> 
   156                              <1> extErrTbl:
   157                              <1> ;This table contains the default values for how to respond
   158                              <1> ; to particular errors. Fields with -1 need to be filled in before
   159                              <1> ; setting variables using this table.
   160                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   161                              <1> ; Byte 0: Extended Error Code as a byte
   162                              <1> ; Byte 1: Error Class
   163                              <1> ; Byte 2: Error Suggested Action
   164                              <1> ; Byte 3: Error Locus
   165                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   166                              <1> ;
   167                              <1> ;Error 01: Invalid function number
   168 0000012D 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   169                              <1> ;Error 02: File not found
   170 00000131 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   171                              <1> ;Error 03: Path not found
   172 00000135 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   173                              <1> ;Error 04: Too many open handles, and no handles are left
   174 00000139 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   175                              <1> ;Error 05: Access being denied
   176 0000013D 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   177                              <1> ;Error 06: Invalid File handle being provided
   178 00000141 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   179                              <1> ;Error 07: MCB chain destroyed
   180 00000145 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   181                              <1> ;Error 08: No Memory remaining
   182 00000149 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   183                              <1> ;Error 09: Invalid MCB block Address
   184 0000014D 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   185                              <1> ;Error 0A: Bad Environment block
   186 00000151 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   187                              <1> ;Error 0B: Data provided in a bad format
   188 00000155 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   189                              <1> ;Error 0C: Access Code Invalid
   190 00000159 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   191                              <1> ;Error 0D: Error due to Invalid Data provided
   192 0000015D 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   193                              <1> ;Error 0F: Error due to a bad drive letter being provided
   194 00000161 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   195                              <1> ;Error 10: Error due to attempting to delete the CWD
   196 00000165 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   197                              <1> ;Error 11: Error due to a unknown device being used
   198 00000169 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   199                              <1> ;Error 12: No more file handles available
   200 0000016D 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   201                              <1> ;Error 50: Network request not supported
   202 00000171 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   203                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   204 00000175 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   205                              <1> ;Error 21: File Locking Violation
   206 00000179 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   207                              <1> ;Error 54: Too many levels of redirection error
   208 0000017D 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   209                              <1> ;Error 56: Bad resource password provided
   210 00000181 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   211                              <1> ;Error 52: Directory already exists
   212 00000185 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   213                              <1> ;Error 32: Network request not supported by DOS
   214 00000189 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   215                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   216 0000018D 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   217                              <1> ;Error 57: Bad parameter in request
   218 00000191 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   219                              <1> ;Error 53: Fail was returned from Int 44h
   220 00000195 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   221                              <1> ;Error 24: Sharing Buffer Full
   222 00000199 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   223 0000019D FFFFFFFF            <1>     dd -1   ;End of table signature
   224                              <1> 
   225                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   226 000001A1 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   226 000001AA 090A0B0C0D0E0F      <1>
   227 000001B1 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   227 000001BA 191A1B1C1D1E1F      <1>
   228 000001C1 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   228 000001CA 3D3E3F5B5C5D7C      <1>
   229                              <1> badDirNameCharL equ $ - badDirNameChar
   230                              <1> ;The chars * ? . \ / need to always be handled separately
   231                              <1> 
   232                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   233 000001D1 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   233 000001DA 4545494949          <1>
   234 000001DF 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   234 000001E8 5559999A9B          <1>
   235 000001ED 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   235 000001F6 A5A6A7A8            <1>
   236 000001FA A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   236 00000203 B2B3B4              <1>
   237 00000206 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   237 0000020F BEBFC0              <1>
   238 00000212 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   238 0000021B CACBCC              <1>
   239 0000021E CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   239 00000227 D6D7D8              <1>
   240 0000022A D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   240 00000233 E2E3E4              <1>
   241 00000236 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   241 0000023F EEEFF0              <1>
   242 00000242 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   242 0000024B FAFBFC              <1>
   243 0000024E FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   244                              <1> 
   245                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   246 00000251 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   246 0000025A F0F6F6              <1>
   247 0000025D F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   247 00000266 F6F6F6              <1>
   248 00000269 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   248 00000272 FFF6FF              <1>
   249 00000275 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   249 0000027E FFFEF6              <1>
   250 00000281 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   250 0000028A FFF4F4              <1>
   251 0000028D F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   251 00000296 FFFFFF              <1>
   252 00000299 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   252 000002A2 FFFFFF              <1>
   253 000002A5 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   253 000002AE F6FFFF              <1>
   254 000002B1 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   254 000002BA FFFFFF              <1>
   255 000002BD FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   255 000002C6 FFFFFF              <1>
   256 000002C9 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    21                                  %include "./Source/Data/dispTbl.asm"
    22                              <1> ;Kernel Dispatch Function Table
    23                              <1> 
    24                              <1> kDispTbl:
    25 000002D1 BF4C                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    26 000002D3 181F                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    27 000002D5 251F                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    28 000002D7 E21F                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    29 000002D9 0B20                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    30 000002DB 1320                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    31 000002DD 2B20                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    32 000002DF 5E20                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    33 000002E1 8320                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    34 000002E3 E220                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    35 000002E5 9523                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    36 000002E7 F120                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    37 000002E9 FD20                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    38 000002EB 725F                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    39 000002ED A45F                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    40 000002EF 332B                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    41 000002F1 3D2B                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    42 000002F3 D128                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    43 000002F5 8A29                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    44 000002F7 112A                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    45 000002F9 472B                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    46 000002FB 512B                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    47 000002FD 5B2B                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    48 000002FF 402A                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    49 00000301 2D62                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    50 00000303 BD5F                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    51 00000305 FE2A                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    52 00000307 C45F                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    53 00000309 C65F                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    54 0000030B 2D62                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    55 0000030D 2D62                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    56 0000030F 6460                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    57 00000311 2D62                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    58 00000313 652B                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    59 00000315 6F2B                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    60 00000317 AB2A                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    61 00000319 792B                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    62 0000031B 0F60                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    63 0000031D CB4B                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    64 0000031F 832B                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    65 00000321 8D2B                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    66 00000323 242B                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    67 00000325 0B26                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    68 00000327 3226                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    69 00000329 3826                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    70 0000032B 5926                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    71 0000032D 4160                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    72 0000032F 112B                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    73 00000331 4F60                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    74 00000333 914C                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    75 00000335 6660                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    76 00000337 215F                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    77 00000339 9E60                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    78 0000033B AF60                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    79 0000033D C060                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    80 0000033F 0254                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    81 00000341 2B54                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    82 00000343 8B16                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    83 00000345 BB18                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    84 00000347 8D1A                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    85 00000349 822D                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    86 0000034B 932D                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    87 0000034D BD2E                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    88 0000034F FC2E                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    89 00000351 372F                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    90 00000353 432F                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    91 00000355 A82F                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    92 00000357 1730                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    93 00000359 D645                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    94 0000035B FF30                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    95 0000035D 3D31                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    96 0000035F 551B                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    97 00000361 4746                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    98 00000363 7148                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    99 00000365 7949                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
   100 00000367 204E                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   101 00000369 C14C                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   102 0000036B 0461                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   103 0000036D 5D31                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   104 0000036F C831                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   105 00000371 4F5F                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   106 00000373 585F                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   107 00000375 1261                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   108 00000377 2361                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   109 00000379 FD61                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   110 0000037B B84B                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   111 0000037D F831                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   112 0000037F 8132                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   113 00000381 174B                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   114 00000383 0462                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   115 00000385 C932                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   116 00000387 9133                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   117 00000389 CB33                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   118 0000038B 2E62                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   119 0000038D EF63                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   120 0000038F F063                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   121 00000391 CE1B                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   122 00000393 2D62                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   123 00000395 615F                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   124 00000397 2D62                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   125 00000399 6A5F                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   126 0000039B 5A54                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   127 0000039D 5A54                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   128 0000039F 3734                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   129 000003A1 A533                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   130 000003A3 2D62                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   131                              <1> kDispTblL  equ $ - kDispTbl 
   132                              <1> 
   133                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   134 000003A5 8063                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   135 000003A7 D93A                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   136 000003A9 E358                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   137 000003AB 8363                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   138 000003AD 0B5A                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   139 000003AF 531E                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   140 000003B1 F653                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   141 000003B3 E904                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   142 000003B5 F344                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   143 000003B7 1B05                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   144 000003B9 6664                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   145 000003BB 5961                <1>     dw noOp - mDispTbl  ;AX=120Bh, Signal Sharing Violation to User
   146 000003BD 5961                <1>     dw noOp - mDispTbl  ;AX=120Ch, Open devce and set SFT owner
   147 000003BF EA27                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   148 000003C1 2905                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   149 000003C3 4305                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   150 000003C5 5105                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   151 000003C7 5C5A                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   152 000003C9 3E5A                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   153 000003CB 175A                <1>     dw uppercaseChar - mDispTbl ;AX=1213h
   154 000003CD 8A5B                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   155 000003CF 6405                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   156 000003D1 0144                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   157 000003D3 D959                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   158 000003D5 F158                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   159 000003D7 7E59                <1>     dw getCDS - mDispTbl    ;AX=1219h
   160 000003D9 F50F                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   161                              <1> mDispTblL   equ     $ - mDispTbl
   162                              <1> 
   163                              <1> serverDispTbl:  ;Server Dispatch functions
   164 000003DB 0B                  <1>     db 0Bh  ;Number of entries
   165 000003DC 6B61                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   166 000003DE BD61                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   167 000003E0 1662                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   168 000003E2 2762                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   169 000003E4 2F62                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   170 000003E6 3762                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   171 000003E8 5262                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   172 000003EA 7C62                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   173 000003EC 7C62                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   174 000003EE 7C62                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   175 000003F0 8962                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
    22                                  %include "./Source/Debug/debug.asm"
    23                              <1> ;This file contains debugging macros, procs and strings
    24                              <1> ; that we can use to output to COM1 bypassing the operating system.
    25                              <1> ;A serial terminal must be connected for this to work.
    26                              <1> 
    27                              <1> ;Variables and equates
    28                              <1> 
    29 000003F2 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    30                              <1> 
    31 000003FA 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    31 00000403 39414243444546      <1>
    32                              <1> ;Common procedures
    33                              <1> debMakeDebuggerRespond:
    34 0000040A 488D2D26000000      <1>     lea rbp, .msg
    35 00000411 E8AF000000          <1>     call debPrintNullString
    36 00000416 B900001000          <1>     mov ecx, 100000h
    37                              <1> .waiting:
    38 0000041B FFC9                <1>     dec ecx
    39 0000041D 740C                <1>     jz .timeout
    40 0000041F B402                <1>     mov ah, 02h ;Blocking recieve!
    41 00000421 31D2                <1>     xor edx, edx
    42 00000423 CD34                <1>     int 34h
    43 00000425 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    44 00000428 75F1                <1>     jnz .waiting
    45 0000042A C3                  <1>     ret
    46                              <1> .timeout:
    47 0000042B 488D2D47000000      <1>     lea rbp, .msg2
    48 00000432 E98E000000          <1>     jmp debPrintNullString
    49 00000437 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    49 00000440 6B6579206174207468- <1>
    49 00000449 65207465726D696E61- <1>
    49 00000452 6C20746F20636F6E74- <1>
    49 0000045B 696E7565206F722077- <1>
    49 00000464 61697420666F722074- <1>
    49 0000046D 696D656F75742E2E2E- <1>
    49 00000476 0A0D00              <1>
    50 00000479 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    50 00000482 436F6E74696E75696E- <1>
    50 0000048B 672E2E2E0A0D00      <1>
    51                              <1> debPrintHexByte:
    52                              <1> ;Print the hex byte in al as a hex value
    53 00000492 52                  <1>     push rdx
    54 00000493 53                  <1>     push rbx
    55 00000494 50                  <1>     push rax
    56                              <1> 
    57 00000495 88C2                <1>     mov dl, al           ;save byte in dl
    58 00000497 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    59 0000049B 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    60 000004A0 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    61 000004A4 E80C000000          <1>     call .wrchar
    62 000004A9 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    63 000004AC E804000000          <1>     call .wrchar
    64                              <1> 
    65 000004B1 58                  <1>     pop rax
    66 000004B2 5B                  <1>     pop rbx
    67 000004B3 5A                  <1>     pop rdx
    68 000004B4 C3                  <1>     ret
    69                              <1> .wrchar:
    70 000004B5 6687DB              <1>     xchg bx, bx
    71 000004B8 488D1D3BFFFFFF      <1>     lea rbx, debascii
    72 000004BF D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    73 000004C0 B401                <1>     mov ah, 01h
    74 000004C2 CD34                <1>     int 34h  ;print char
    75 000004C4 C3                  <1>     ret
    76                              <1> 
    77                              <1> debPrintNullString:
    78                              <1> ;Print a null terminated string pointed to by rbp
    79 000004C5 56                  <1>     push rsi
    80 000004C6 50                  <1>     push rax
    81 000004C7 52                  <1>     push rdx
    82 000004C8 31D2                <1>     xor edx, edx    ;Select COM1
    83 000004CA 4889EE              <1>     mov rsi, rbp
    84                              <1> .getChar:
    85 000004CD AC                  <1>     lodsb
    86 000004CE 84C0                <1>     test al, al
    87 000004D0 7406                <1>     jz .exit
    88 000004D2 B401                <1>     mov ah, 01h
    89 000004D4 CD34                <1>     int 34h
    90 000004D6 EBF5                <1>     jmp short .getChar
    91                              <1> .exit:
    92 000004D8 5A                  <1>     pop rdx
    93 000004D9 58                  <1>     pop rax
    94 000004DA 5E                  <1>     pop rsi
    95 000004DB C3                  <1>     ret
    96                              <1> 
    97                              <1> debPrintDOSStack:
    98                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    99                              <1> ;Shows me which function, and parameters passed and returned
   100 000004DC 488D2DA5010000      <1>     lea rbp, .a1
   101 000004E3 E8DDFFFFFF          <1>     call debPrintNullString
   102 000004E8 488B15(5DC40300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   103 000004EF 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   104 000004F6 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   105 000004F9 E802030000          <1>     call overlayQword
   106 000004FE 4881C316000000      <1>     add rbx, 22
   107 00000505 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   108 00000509 E8F2020000          <1>     call overlayQword
   109 0000050E 4881C316000000      <1>     add rbx, 22
   110 00000515 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   111 00000519 E8E2020000          <1>     call overlayQword
   112 0000051E 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   113 00000525 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   114 00000529 E8D2020000          <1>     call overlayQword
   115 0000052E 4881C316000000      <1>     add rbx, 22 
   116 00000535 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   117 00000539 E8C2020000          <1>     call overlayQword
   118 0000053E 4881C316000000      <1>     add rbx, 22
   119 00000545 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   120 00000549 E8B2020000          <1>     call overlayQword
   121 0000054E 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   122 00000555 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   123 00000559 E8A2020000          <1>     call overlayQword
   124 0000055E 4881C316000000      <1>     add rbx, 22
   125 00000565 488B05(5DC40300)    <1>     mov rax, qword [oldRSP]
   126 0000056C 480560000000        <1>     add rax, callerFrame_size
   127 00000572 E889020000          <1>     call overlayQword
   128 00000577 4881C316000000      <1>     add rbx, 22
   129 0000057E 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   130 00000582 E879020000          <1>     call overlayQword
   131 00000587 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   132 0000058E 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   133 00000592 E869020000          <1>     call overlayQword
   134 00000597 488D2D06000000      <1>     lea rbp, .a0
   135 0000059E E822FFFFFF          <1>     call debPrintNullString
   136 000005A3 C3                  <1>     ret
   137                              <1> 
   138 000005A4 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   138 000005AD 303030303030303030- <1>
   138 000005B6 30306820            <1>
   139 000005BA 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   139 000005C3 303030303030303030- <1>
   139 000005CC 30306820            <1>
   140 000005D0 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   140 000005D9 303030303030303030- <1>
   140 000005E2 30306820            <1>
   141 000005E6 0A0D                <1>     db  0Ah,0Dh
   142 000005E8 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   142 000005F1 303030303030303030- <1>
   142 000005FA 30306820            <1>
   143 000005FE 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   143 00000607 303030303030303030- <1>
   143 00000610 30306820            <1>
   144 00000614 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   144 0000061D 303030303030303030- <1>
   144 00000626 30306820            <1>
   145 0000062A 0A0D                <1>     db 0Ah, 0Dh
   146 0000062C 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   146 00000635 303030303030303030- <1>
   146 0000063E 30306820            <1>
   147 00000642 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   147 0000064B 303030303030303030- <1>
   147 00000654 30306820            <1>
   148 00000658 7269703D3030303030- <1>     db "rip=0000000000000000h"
   148 00000661 303030303030303030- <1>
   148 0000066A 303068              <1>
   149 0000066D 0A0D                <1>     db 0Ah, 0Dh
   150 0000066F 666C673D3030303030- <1>     db "flg=0000000000000000h "
   150 00000678 303030303030303030- <1>
   150 00000681 30306820            <1>
   151 00000685 0A0D00              <1>     db 0Ah,0Dh,0
   152 00000688 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   152 00000691 206F6E20496E742034- <1>
   152 0000069A 316820737461636B0A- <1>
   152 000006A3 0D00                <1>
   153                              <1> 
   154                              <1> debDPBptr:
   155                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   156 000006A5 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   157 000006AC 4889E8              <1>     mov rax, rbp
   158 000006AF E84C010000          <1>     call overlayQword
   159 000006B4 488D2D06000000      <1>     lea rbp, .dpb
   160 000006BB E805FEFFFF          <1>     call debPrintNullString
   161 000006C0 C3                  <1>     ret
   162                              <1> .dpb: 
   163 000006C1 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   163 000006CA 203030303030303030- <1>
   163 000006D3 303030303030303068- <1>
   163 000006DC 200A0D00            <1>
   164                              <1> 
   165                              <1> debDPBBPBptr:
   166                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   167                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   168 000006E0 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   169 000006E7 4889E8              <1>     mov rax, rbp
   170 000006EA E811010000          <1>     call overlayQword
   171 000006EF 4881C321000000      <1>     add rbx, 33
   172 000006F6 4889F0              <1>     mov rax, rsi
   173 000006F9 E802010000          <1>     call overlayQword
   174 000006FE 488D2D06000000      <1>     lea rbp, .dpb
   175 00000705 E8BBFDFFFF          <1>     call debPrintNullString
   176 0000070A C3                  <1>     ret
   177                              <1> .dpb: 
   178 0000070B 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   178 00000714 203030303030303030- <1>
   178 0000071D 303030303030303068- <1>
   178 00000726 2066726F6D20        <1>
   179 0000072C 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   179 00000735 203030303030303030- <1>
   179 0000073E 303030303030303068- <1>
   179 00000747 200A0D00            <1>
   180                              <1> overlayByte:
   181                              <1>     ;Called with number in rax
   182                              <1>     ;pointer to START of 16 byte space for number in rbx
   183 0000074B 53                  <1>     push rbx
   184 0000074C 51                  <1>     push rcx
   185 0000074D 52                  <1>     push rdx
   186 0000074E 55                  <1>     push rbp
   187 0000074F 4889DD              <1>     mov rbp, rbx
   188 00000752 4889C2              <1>     mov rdx, rax
   189 00000755 48FFC5              <1>     inc rbp ;Go to end of number
   190                              <1> 
   191 00000758 488D1D9BFCFFFF      <1>     lea rbx, debascii
   192 0000075F 88D0                <1>     mov al, dl  ;Go low nybble first
   193 00000761 240F                <1>     and al, 0Fh
   194 00000763 D7                  <1>     xlatb
   195 00000764 884500              <1>     mov byte [rbp], al
   196 00000767 48FFCD              <1>     dec rbp ;Go down one char pos
   197 0000076A 88D0                <1>     mov al, dl
   198 0000076C 24F0                <1>     and al, 0F0h    ;Hi nybble next
   199 0000076E C0E804              <1>     shr al, 4   ;Shift hi nybble low
   200 00000771 D7                  <1>     xlatb
   201 00000772 884500              <1>     mov byte [rbp], al  ;Store char
   202                              <1> 
   203 00000775 5D                  <1>     pop rbp
   204 00000776 5A                  <1>     pop rdx
   205 00000777 59                  <1>     pop rcx
   206 00000778 5B                  <1>     pop rbx
   207 00000779 C3                  <1>     ret
   208                              <1> 
   209                              <1> overlayWord:
   210                              <1>     ;Called with number in rax
   211                              <1>     ;pointer to START of 16 byte space for number in rbx
   212 0000077A 53                  <1>     push rbx
   213 0000077B 51                  <1>     push rcx
   214 0000077C 52                  <1>     push rdx
   215 0000077D 55                  <1>     push rbp
   216 0000077E 4889DD              <1>     mov rbp, rbx
   217 00000781 4889C2              <1>     mov rdx, rax
   218 00000784 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   219 0000078B B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   220 00000790 488D1D63FCFFFF      <1>     lea rbx, debascii
   221                              <1> .ow0:
   222 00000797 88D0                <1>     mov al, dl  ;Go low nybble first
   223 00000799 240F                <1>     and al, 0Fh
   224 0000079B D7                  <1>     xlatb
   225 0000079C 884500              <1>     mov byte [rbp], al
   226 0000079F 48FFCD              <1>     dec rbp ;Go down one char pos
   227 000007A2 88D0                <1>     mov al, dl
   228 000007A4 24F0                <1>     and al, 0F0h    ;Hi nybble next
   229 000007A6 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   230 000007A9 D7                  <1>     xlatb
   231 000007AA 884500              <1>     mov byte [rbp], al  ;Store char
   232 000007AD 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   233 000007B1 48FFCD              <1>     dec rbp
   234 000007B4 FFC9                <1>     dec ecx
   235 000007B6 75DF                <1>     jnz .ow0
   236 000007B8 5D                  <1>     pop rbp
   237 000007B9 5A                  <1>     pop rdx
   238 000007BA 59                  <1>     pop rcx
   239 000007BB 5B                  <1>     pop rbx
   240 000007BC C3                  <1>     ret
   241                              <1> 
   242                              <1> overlayDword:
   243                              <1>     ;Called with number in rax
   244                              <1>     ;pointer to START of 16 byte space for number in rbx
   245 000007BD 53                  <1>     push rbx
   246 000007BE 51                  <1>     push rcx
   247 000007BF 52                  <1>     push rdx
   248 000007C0 55                  <1>     push rbp
   249 000007C1 4889DD              <1>     mov rbp, rbx
   250 000007C4 4889C2              <1>     mov rdx, rax
   251 000007C7 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   252 000007CE B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   253 000007D3 488D1D20FCFFFF      <1>     lea rbx, debascii
   254                              <1> .od0:
   255 000007DA 88D0                <1>     mov al, dl  ;Go low nybble first
   256 000007DC 240F                <1>     and al, 0Fh
   257 000007DE D7                  <1>     xlatb
   258 000007DF 884500              <1>     mov byte [rbp], al
   259 000007E2 48FFCD              <1>     dec rbp ;Go down one char pos
   260 000007E5 88D0                <1>     mov al, dl
   261 000007E7 24F0                <1>     and al, 0F0h    ;Hi nybble next
   262 000007E9 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   263 000007EC D7                  <1>     xlatb
   264 000007ED 884500              <1>     mov byte [rbp], al  ;Store char
   265 000007F0 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   266 000007F4 48FFCD              <1>     dec rbp
   267 000007F7 FFC9                <1>     dec ecx
   268 000007F9 75DF                <1>     jnz .od0
   269 000007FB 5D                  <1>     pop rbp
   270 000007FC 5A                  <1>     pop rdx
   271 000007FD 59                  <1>     pop rcx
   272 000007FE 5B                  <1>     pop rbx
   273 000007FF C3                  <1>     ret
   274                              <1> 
   275                              <1> overlayQword:
   276                              <1>     ;Called with number in rax
   277                              <1>     ;pointer to START of 16 byte space for number in rbx
   278 00000800 53                  <1>     push rbx
   279 00000801 51                  <1>     push rcx
   280 00000802 52                  <1>     push rdx
   281 00000803 55                  <1>     push rbp
   282 00000804 4889DD              <1>     mov rbp, rbx
   283 00000807 4889C2              <1>     mov rdx, rax
   284 0000080A 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   285 00000811 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   286 00000816 488D1DDDFBFFFF      <1>     lea rbx, debascii
   287                              <1> .oq0:
   288 0000081D 88D0                <1>     mov al, dl  ;Go low nybble first
   289 0000081F 240F                <1>     and al, 0Fh
   290 00000821 D7                  <1>     xlatb
   291 00000822 884500              <1>     mov byte [rbp], al
   292 00000825 48FFCD              <1>     dec rbp ;Go down one char pos
   293 00000828 88D0                <1>     mov al, dl
   294 0000082A 24F0                <1>     and al, 0F0h    ;Hi nybble next
   295 0000082C C0E804              <1>     shr al, 4   ;Shift hi nybble low
   296 0000082F D7                  <1>     xlatb
   297 00000830 884500              <1>     mov byte [rbp], al  ;Store char
   298 00000833 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   299 00000837 48FFCD              <1>     dec rbp
   300 0000083A FFC9                <1>     dec ecx
   301 0000083C 75DF                <1>     jnz .oq0
   302 0000083E 5D                  <1>     pop rbp
   303 0000083F 5A                  <1>     pop rdx
   304 00000840 59                  <1>     pop rcx
   305 00000841 5B                  <1>     pop rbx
   306 00000842 C3                  <1>     ret
   307                              <1> 
   308                              <1> debPrintFunctionName:
   309                              <1> ;Prints the DOS function that has been entered
   310                              <1> ;Entered with ah = Function number
   311 00000843 88E0                <1>     mov al, ah  ;Get dos function number
   312 00000845 488D1DAEFBFFFF      <1>     lea rbx, debascii
   313 0000084C 488D1535000000      <1>     lea rdx, .number
   314 00000853 24F0                <1>     and al, 0F0h    ;Get high nybble first
   315 00000855 C0E804              <1>     shr al, 4
   316 00000858 D7                  <1>     xlatb
   317 00000859 8802                <1>     mov byte [rdx], al
   318 0000085B 88E0                <1>     mov al, ah
   319 0000085D 240F                <1>     and al, 0Fh
   320 0000085F D7                  <1>     xlatb
   321 00000860 884201              <1>     mov byte [rdx + 1], al
   322 00000863 488D2D06000000      <1>     lea rbp, .dosString
   323 0000086A E856FCFFFF          <1>     call debPrintNullString
   324 0000086F C3                  <1>     ret
   325 00000870 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   325 00000879 696F6E20496E742034- <1>
   325 00000882 31682F41483D        <1>
   326 00000888 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   327                              <1> 
   328                              <1> ;----------------:
   329                              <1> ;!!!! MACROS !!!!:
   330                              <1> ;----------------:
   331                              <1> ;Insert macro when entering a debug block
   332                              <1> %macro debugEnterM 0
   333                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   334                              <1>     mov rsp, debStackTop
   335                              <1> ;Push all registers except rsp on stack
   336                              <1>     push rax
   337                              <1>     push rbx
   338                              <1>     push rcx
   339                              <1>     push rdx
   340                              <1>     push rsi
   341                              <1>     push rdi
   342                              <1>     push rbp
   343                              <1>     push r8
   344                              <1>     push r9
   345                              <1>     push r10
   346                              <1>     push r11
   347                              <1>     push r12
   348                              <1>     push r13
   349                              <1>     push r14
   350                              <1>     push r15
   351                              <1>     pushfq
   352                              <1> %endmacro
   353                              <1> ;Insert macro when exiting a debug block
   354                              <1> %macro debugExitM 0
   355                              <1>     popfq
   356                              <1>     pop r15
   357                              <1>     pop r14
   358                              <1>     pop r13
   359                              <1>     pop r12
   360                              <1>     pop r11
   361                              <1>     pop r10
   362                              <1>     pop r9
   363                              <1>     pop r8
   364                              <1>     pop rbp
   365                              <1>     pop rdi
   366                              <1>     pop rsi
   367                              <1>     pop rdx
   368                              <1>     pop rcx
   369                              <1>     pop rbx
   370                              <1>     pop rax
   371                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   372                              <1> %endmacro
    23                                  %include "./Source/Kernel/FAT/buffun.asm"
    24                              <1> ;This file contains FAT disk buffer related functions that
    25                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    26                              <1> ;----------------------------------------------------
    27                              <1> ;           Externally referenced functions         :
    28                              <1> ;----------------------------------------------------
    29                              <1> 
    30                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    31                              <1> ;Sets the buffer in rdi to the head of the chain
    32                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    33                              <1> ;Output: Buffer header set to the head of the chain
    34 0000088E 48393D(61C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    35 00000895 7428                <1>     je .exit
    36 00000897 56                  <1>     push rsi
    37 00000898 488B35(61C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    38                              <1> .mainlp:
    39 0000089F 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    40 000008A2 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    41 000008A4 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    42 000008A7 EBF6                <1>     jmp short .mainlp
    43                              <1> .fnd:
    44 000008A9 57                  <1>     push rdi
    45 000008AA 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    46 000008AD 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    47 000008B0 5F                  <1>     pop rdi ;Get original buf back
    48 000008B1 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    49 000008B4 488735(61C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    50 000008BB 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    51 000008BE 5E                  <1>     pop rsi
    52                              <1> .exit:
    53                              <1>     return
    18                              <2> %%_ret:
    19 000008BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    56                              <1> ;1 External reference
    57                              <1> ;Input: rdi = Buffer header to flush and free
    58 000008C0 E844000000          <1>     call flushBuffer
    59 000008C5 7206                <1>     jc .exit
    60                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    61 000008C7 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    62                              <1> .exit:
    63                              <1>     return
    18                              <2> %%_ret:
    19 000008CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    66                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    67                              <1> ;Output: rdi = First disk buffer
    68 000008CE 488B3D(61C00300)    <1>     mov rdi, [bufHeadPtr]
    69 000008D5 57                  <1>     push rdi
    70                              <1> .lp:
    71 000008D6 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    72 000008DA 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    73 000008DD 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    74 000008E4 75F0                <1>     jne .lp
    75 000008E6 5F                  <1>     pop rdi
    76                              <1>     return
    18                              <2> %%_ret:
    19 000008E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    77                              <1> 
    78                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    79                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    80                              <1> ; second buffer in the chain in rdi
    81                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    82                              <1> ;Output: rdi = Second buffer in the chain
    83 000008E8 52                  <1>     push rdx
    84 000008E9 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    85 000008EC E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    86 000008F1 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    87 000008F4 5A                  <1>     pop rdx
    88                              <1>     return
    18                              <2> %%_ret:
    19 000008F5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    91                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    92                              <1> ;Input: rdi = Buffer header to start searching at
    93                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    94                              <1> ;        ZF=ZE => No unreferenced buffer found
    95 000008F6 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    96 000008FA 750C                <1>     jnz .exit
    97 000008FC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    98 000008FF 4881FFFFFFFFFF      <1>     cmp rdi, -1
    99 00000906 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
   100                              <1> .exit:
   101                              <1>     return
    18                              <2> %%_ret:
    19 00000908 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   102                              <1> 
   103                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   104                              <1> ;Flushes the data in a sector buffer to disk!
   105                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   106                              <1> ;Exit:  CF=NC : Success
   107                              <1> ;       CF=CY : Fail, terminate the request
   108                              <1> ;First make request to device driver
   109 00000909 50                  <1>     push rax
   110 0000090A 53                  <1>     push rbx
   111 0000090B 51                  <1>     push rcx
   112 0000090C 52                  <1>     push rdx
   113 0000090D 56                  <1>     push rsi
   114 0000090E 55                  <1>     push rbp
   115                              <1> ;If the buffer is freed, skip flushing to avoid issues
   116 0000090F 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   117 00000913 7454                <1>     je .fbFreeExit  ;If it is free exit
   118 00000915 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   119 00000919 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   120                              <1> .fbRequest0:
   121 0000091B BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   122 00000920 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   123 00000924 7406                <1>     jz .fbRequest1
   124 00000926 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   125                              <1> .fbRequest1:
   126 0000092C 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   127 0000092F B901000000          <1>     mov ecx, 1  ;One sector to copy
   128 00000934 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   129 00000938 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   130 0000093C 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   131 00000940 E8EF510000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   132 00000945 E886500000          <1>     call absDiskDriverCall    ;Make Driver Request
   133 0000094A 7525                <1>     jnz .fbFail
   134                              <1> ;Now check if the buffer was a FAT, to write additional copies
   135 0000094C F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   136 00000950 7417                <1>     jz .fbFreeExit  ;If not, exit
   137 00000952 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   138 00000955 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   139 00000957 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   140 0000095A 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   141 0000095E E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   142                              <1> .fbFreeExit1:
   143 00000963 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   144 00000966 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   145                              <1> .fbFreeExit:
   146 00000969 F8                  <1>     clc
   147                              <1> .fbExitFail:
   148 0000096A 5D                  <1>     pop rbp
   149 0000096B 5E                  <1>     pop rsi
   150 0000096C 5A                  <1>     pop rdx
   151 0000096D 59                  <1>     pop rcx
   152 0000096E 5B                  <1>     pop rbx
   153 0000096F 58                  <1>     pop rax
   154                              <1>     return
    18                              <2> %%_ret:
    19 00000970 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> .fbFail:
   156                              <1> ;Enter here only if the request failed
   157 00000971 FFCE                <1>     dec esi
   158 00000973 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   159                              <1> ;Request failed thrice, critical error call
   160 00000975 C605(4AC40300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   161 0000097C E8B14D0000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   162 00000981 3C01                <1>     cmp al, critRetry
   163 00000983 7496                <1>     je .fbRequest0
   164                              <1>     ;Else we fail (Ignore=Fail here)
   165 00000985 F9                  <1>     stc ;Set error flag to indicate fail
   166 00000986 E9DFFFFFFF          <1>     jmp .fbExitFail
   167                              <1> 
   168                              <1> testDirtyBufferForDrive:    ;External linkage
   169                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   170                              <1> ;Input: al = Drive number (0 based)
   171                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   172                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   173 0000098B 53                  <1>     push rbx
   174 0000098C 488B1D(61C00300)    <1>     mov rbx, qword [bufHeadPtr]
   175                              <1> .tdbfdCheckBuffer:
   176 00000993 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   177 00000996 7509                <1>     jne .tdbfdGotoNextBuffer
   178 00000998 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   179 0000099C 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   180 0000099E F9                  <1>     stc ;Else dirty buffer found, set carry flag
   181                              <1> .tdbfdExit:
   182 0000099F 5B                  <1>     pop rbx
   183                              <1>     return
    18                              <2> %%_ret:
    19 000009A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   184                              <1> .tdbfdGotoNextBuffer:
   185 000009A1 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   186 000009A4 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   187 000009AB 74F2                <1>     je .tdbfdExit
   188 000009AD EBE4                <1>     jmp short .tdbfdCheckBuffer
   189                              <1> 
   190                              <1> 
   191                              <1> cancelWriteThroughBuffers:  ;External linkage
   192                              <1> ; Frees all buffers for the workingDPB
   193                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   194                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   195                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   196                              <1> ; to have a drive number of -1, thus freeing it
   197                              <1> ;Given DPB is in rbp
   198 000009AF 53                  <1>     push rbx
   199 000009B0 488B1D(61C00300)    <1>     mov rbx, qword [bufHeadPtr]
   200                              <1> .i0:
   201 000009B7 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   202 000009BB 7506                <1>     jne .i1 ;If no, skip freeing
   203 000009BD 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   204                              <1> .i1:
   205 000009C3 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   206 000009C6 4881FBFFFFFFFF      <1>     cmp rbx, -1
   207 000009CD 75E8                <1>     jne .i0
   208                              <1> .exit:
   209 000009CF 5B                  <1>     pop rbx
   210                              <1>     return
    18                              <2> %%_ret:
    19 000009D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   211                              <1> 
   212                              <1> writeThroughBuffers: ;External linkage
   213                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   214                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   215                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   216 000009D1 50                  <1>     push rax
   217 000009D2 57                  <1>     push rdi
   218 000009D3 488B05(E8C60300)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   219 000009DA 488B3D(61C00300)    <1>     mov rdi, qword [bufHeadPtr]
   220                              <1> .mainLp:
   221 000009E1 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   222 000009E8 7416                <1>     je .exit   
   223 000009EA 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   224 000009EE 750B                <1>     jne .nextBuffer
   225 000009F0 E814FFFFFF          <1>     call flushBuffer    ;Flush this buffer if it on dpb we want
   226 000009F5 7209                <1>     jc .exit  ;If something went wrong, exit
   227 000009F7 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   228                              <1> .nextBuffer:
   229 000009FB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   230 000009FE EBE1                <1>     jmp short .mainLp
   231                              <1> .exit:
   232 00000A00 5F                  <1>     pop rdi
   233 00000A01 58                  <1>     pop rax
   234                              <1>     return
    18                              <2> %%_ret:
    19 00000A02 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   235                              <1> 
   236                              <1> markBufferDirty:
   237 00000A03 55                  <1>     push rbp
   238 00000A04 9C                  <1>     pushfq
   239 00000A05 488B2D(1CC70300)    <1>     mov rbp, qword [currBuff]
   240 00000A0C 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   241 00000A10 9D                  <1>     popfq
   242 00000A11 5D                  <1>     pop rbp
   243                              <1>     return
    18                              <2> %%_ret:
    19 00000A12 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> 
   245                              <1> 
   246                              <1> getBuffer: ;Internal Linkage ONLY
   247                              <1> ;
   248                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   249                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   250                              <1> ;Flushes if not in disk change mode. 
   251                              <1> ;If in disk change mode, will check to see if the selected buffer 
   252                              <1> ; has data referring a device using the same DPB as we are changing.
   253                              <1> ; If it is, skip flushing, if not, flush first!
   254                              <1> ;
   255                              <1> ;This function will return a pointer to the desired data sector OR 
   256                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   257                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   258                              <1> ;Entry: rax = Sector to read
   259                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   260                              <1> ;       rsi = DPB to use for transaction
   261                              <1> ;Exit:  CF=NC => 
   262                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   263                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   264 00000A13 51                  <1>     push rcx
   265 00000A14 52                  <1>     push rdx
   266 00000A15 56                  <1>     push rsi
   267 00000A16 57                  <1>     push rdi
   268 00000A17 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   269 00000A19 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   270 00000A1E 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   271 00000A25 7418                <1>     je .rbReadNewSector
   272 00000A27 48893D(1CC70300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   273 00000A2E 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer ;Only set if in buf chain
   274                              <1> .rbExit:
   275 00000A32 F8                  <1>     clc
   276                              <1> .rbExitNoFlag:
   277 00000A33 5F                  <1>     pop rdi
   278 00000A34 5E                  <1>     pop rsi
   279 00000A35 5A                  <1>     pop rdx
   280 00000A36 59                  <1>     pop rcx
   281 00000A37 488B1D(1CC70300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   282                              <1>     return
    18                              <2> %%_ret:
    19 00000A3E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> .rbReadNewSector:
   284 00000A3F E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   285 00000A44 803D(BFD90300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   286 00000A4B 7506                <1>     jne .flush  ;We are not, flush buffer
   287 00000A4D 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   288 00000A51 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   289                              <1> .flush:
   290 00000A53 E868FEFFFF          <1>     call flushAndFreeBuffer
   291 00000A58 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   292                              <1> .skipFlush:
   293                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   294                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   295                              <1>     ; is no longer owned by that File so we mark the owner as none
   296 00000A5A 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   297 00000A62 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   298 00000A65 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   299 00000A68 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   300 00000A6C 80F902              <1>     cmp cl, fatBuffer
   301 00000A6F B201                <1>     mov dl, 1   ;Default values if not fat buffer
   302 00000A71 7503                <1>     jne .rbNonFATbuffer
   303 00000A73 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   304                              <1> .rbNonFATbuffer:
   305 00000A76 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   306 00000A79 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   307 00000A7C 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   308 00000A7F 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   309 00000A83 C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   310 00000A87 E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   311 00000A8C 72A5                <1>     jc .rbExitNoFlag
   312 00000A8E EBA2                <1>     jmp short .rbExit
   313                              <1> 
   314                              <1> readSectorBuffer:   ;Internal Linkage
   315                              <1> ;Reads a sector into a built sector buffer
   316                              <1> ;Entry: rdi = Pointer to buffer header
   317                              <1> ;Exit:  CF=NC : Success
   318                              <1> ;       CF=CY : Fail, terminate the request
   319                              <1> ;       rbx pointing to buffer header
   320                              <1> ;First make request to device driver
   321 00000A90 50                  <1>     push rax
   322 00000A91 53                  <1>     push rbx
   323 00000A92 51                  <1>     push rcx
   324 00000A93 52                  <1>     push rdx
   325 00000A94 56                  <1>     push rsi
   326 00000A95 55                  <1>     push rbp
   327                              <1> .rsRequest0:
   328 00000A96 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   329 00000A9B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   330 00000A9F 7406                <1>     jz .rsRequest1
   331 00000AA1 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   332                              <1> .rsRequest1:
   333 00000AA7 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   334 00000AAA B901000000          <1>     mov ecx, 1  ;One sector to copy
   335 00000AAF 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   336 00000AB3 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   337 00000AB7 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   338 00000ABB E87F500000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   339 00000AC0 E80B4F0000          <1>     call absDiskDriverCall    ;Make Driver Request
   340 00000AC5 7508                <1>     jnz .rsFail
   341                              <1> .rsExit:
   342 00000AC7 F8                  <1>     clc
   343                              <1> .rsExitFail:
   344 00000AC8 5D                  <1>     pop rbp
   345 00000AC9 5E                  <1>     pop rsi
   346 00000ACA 5A                  <1>     pop rdx
   347 00000ACB 59                  <1>     pop rcx
   348 00000ACC 5B                  <1>     pop rbx
   349 00000ACD 58                  <1>     pop rax
   350                              <1>     return
    18                              <2> %%_ret:
    19 00000ACE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   351                              <1> .rsFail:
   352                              <1> ;Enter here only if the request failed
   353 00000ACF FFCE                <1>     dec esi
   354 00000AD1 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   355                              <1> ;Request failed thrice, critical error call
   356                              <1> ;First free the buffer if we failed to read data into it 
   357 00000AD3 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   358 00000AD7 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   359 00000ADD C605(4AC40300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   360 00000AE4 E8494C0000          <1>     call diskDevErr
   361 00000AE9 3C01                <1>     cmp al, critRetry
   362 00000AEB 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   363 00000AED 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   364 00000AF1 EBA3                <1>     jmp short .rsRequest0
   365                              <1> .fail:
   366 00000AF3 F9                  <1>     stc ;Set error flag to indicate fail
   367 00000AF4 E9CFFFFFFF          <1>     jmp .rsExitFail
   368                              <1>     
   369                              <1> findLRUBuffer: ;Internal Linkage
   370                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   371                              <1> ; in rbx and the currBuff variable
   372                              <1> ;Input: Nothing
   373                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   374                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   375 00000AF9 52                  <1>     push rdx
   376 00000AFA 488B3D(61C00300)    <1>     mov rdi, qword [bufHeadPtr]
   377 00000B01 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   378 00000B05 7436                <1>     je .flbExit 
   379 00000B07 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   380 00000B0E 742D                <1>     je .flbExit
   381                              <1> .flbWalk:
   382 00000B10 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   383 00000B13 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   384 00000B16 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   385 00000B1A 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   386 00000B1C 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   387 00000B23 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   388 00000B25 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   389                              <1> .flbHeadLink:
   390 00000B2C 488B15(61C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   391 00000B33 48893D(61C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   392 00000B3A 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   393                              <1> .flbExit:
   394 00000B3D 5A                  <1>     pop rdx
   395 00000B3E 48893D(1CC70300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   396                              <1>     return
    18                              <2> %%_ret:
    19 00000B45 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   397                              <1> .flbFreeLink:
   398 00000B46 51                  <1>     push rcx
   399 00000B47 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   400 00000B4A 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   401 00000B4D 59                  <1>     pop rcx
   402 00000B4E EBDC                <1>     jmp short .flbHeadLink
   403                              <1> 
   404                              <1> findSectorInBuffer:     ;Internal linkage
   405                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   406                              <1> ;If the sector is not in a buffer, returns with a -1
   407                              <1> ;Input: rax = Sector number
   408                              <1> ;       dl = Drive number
   409                              <1> ;Output: rdi = Buffer hdr pointer or -1
   410 00000B50 488B3D(61C00300)    <1>     mov rdi, qword [bufHeadPtr]
   411                              <1> .fsiCheckBuffer:
   412 00000B57 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   413 00000B5A 7507                <1>     jne .fsiGotoNextBuffer
   414 00000B5C 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   415 00000B60 7501                <1>     jne .fsiGotoNextBuffer
   416                              <1> .fsiExit:
   417                              <1>     return
    18                              <2> %%_ret:
    19 00000B62 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   418                              <1> .fsiGotoNextBuffer:
   419 00000B63 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   420 00000B66 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   421 00000B6D 74F3                <1>     je .fsiExit
   422 00000B6F EBE6                <1>     jmp short .fsiCheckBuffer
   423                              <1> 
   424                              <1> ;-----------------------------------------------------------------------------
   425                              <1> ;SPECIAL BUFFER FUNCTIONS
   426                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   427                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   428                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   429                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   430                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   431                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   432                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   433                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   434                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   435                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   436                              <1> ;-----------------------------------------------------------------------------
   437                              <1> getBufForDataNoFile:
   438                              <1> ;Returns a buffer to use for disk data in rbx
   439                              <1> ;Requires a File Handle.
   440                              <1> ;Input: [workingDPB] = DPB to transact on
   441                              <1> ;       rax = Sector to transfer
   442                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   443 00000B71 51                  <1>     push rcx
   444 00000B72 B108                <1>     mov cl, dataBuffer
   445 00000B74 56                  <1>     push rsi
   446 00000B75 57                  <1>     push rdi
   447 00000B76 488B35(E8C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   448 00000B7D E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   449 00000B82 725F                <1>     jc getBufCommon.exit
   450 00000B84 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   451 00000B8C EB55                <1>     jmp short getBufCommon.exit
   452                              <1> getBufForDirNoFile:
   453                              <1> ;Returns a buffer to use for disk dir data in rbx
   454                              <1> ;Requires a File Handle.
   455                              <1> ;Input: [workingDPB] = DPB to transact on
   456                              <1> ;       rax = Sector to transfer
   457                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   458 00000B8E 51                  <1>     push rcx
   459 00000B8F B104                <1>     mov cl, dirBuffer
   460 00000B91 56                  <1>     push rsi
   461 00000B92 57                  <1>     push rdi
   462 00000B93 488B35(E8C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   463 00000B9A E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   464 00000B9F 7242                <1>     jc getBufCommon.exit
   465 00000BA1 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   466 00000BA9 EB38                <1>     jmp short getBufCommon.exit
   467                              <1> getBufForFat:
   468                              <1> ;Returns a buffer to use for fat data in rbx
   469                              <1> ;Input: [workingDPB] = DPB to transact on
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 00000BAB 51                  <1>     push rcx
   473 00000BAC B102                <1>     mov cl, fatBuffer
   474 00000BAE EB03                <1>     jmp short getBufCommon2
   475                              <1> getBufForDOS:
   476                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   477                              <1> ;Input: [workingDPB] = DPB to transact on
   478                              <1> ;       rax = Sector to transfer
   479                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   480 00000BB0 51                  <1>     push rcx
   481 00000BB1 B101                <1>     mov cl, dosBuffer
   482                              <1> getBufCommon2:
   483 00000BB3 56                  <1>     push rsi
   484 00000BB4 57                  <1>     push rdi    ;Push rdi to preserve it
   485 00000BB5 488B35(E8C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   486 00000BBC EB15                <1>     jmp short getBufCommon.makeReq
   487                              <1> getBufForDir:
   488                              <1> ;Returns a buffer to use for disk directory data in rbx
   489                              <1> ;Input: [currentSFT] = File to manipulate
   490                              <1> ;       rax = Sector to transfer
   491                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   492 00000BBE 51                  <1>     push rcx
   493 00000BBF B104                <1>     mov cl, dirBuffer
   494 00000BC1 EB03                <1>     jmp short getBufCommon
   495                              <1> getBufForData:
   496                              <1> ;Returns a buffer to use for disk data in rbx
   497                              <1> ;Requires a File Handle.
   498                              <1> ;Input: [currentSFT] = File to manipulate
   499                              <1> ;       rax = Sector to transfer
   500                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   501 00000BC3 51                  <1>     push rcx
   502 00000BC4 B108                <1>     mov cl, dataBuffer
   503                              <1> getBufCommon:
   504 00000BC6 56                  <1>     push rsi
   505 00000BC7 57                  <1>     push rdi
   506 00000BC8 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
   507 00000BCF 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   508                              <1> .makeReq:
   509 00000BD3 E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   510 00000BD8 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   511                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   512                              <1>     ; flushed to the file!
   513                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   514                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   515                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   516 00000BDA F6C103              <1>     test cl, dosBuffer | fatBuffer
   517 00000BDD 7504                <1>     jnz .exit
   518 00000BDF 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   519                              <1> .exit:
   520 00000BE3 5F                  <1>     pop rdi
   521 00000BE4 5E                  <1>     pop rsi
   522 00000BE5 59                  <1>     pop rcx
   523                              <1>     return
    18                              <2> %%_ret:
    19 00000BE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> flushFile:
   526                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   527                              <1> ; FAT/DOS buffers to flush
   528                              <1> ; We flush and free, and set to head of chain before continuing to search
   529                              <1> ;Input: rdi = is the file (sft) we wish to flush
   530                              <1> ;Output: CF=NC => All ok
   531                              <1> ;        CF=CY => A sector failed, exit. 
   532 00000BE7 57                  <1>     push rdi
   533 00000BE8 56                  <1>     push rsi
   534                              <1>     ;First check if the file has been written to?
   535 00000BE9 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   536 00000BEF 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   537 00000BF1 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   538 00000BF4 488B3D(61C00300)    <1>     mov rdi, qword [bufHeadPtr]
   539                              <1> .ffLoop:
   540 00000BFB 4881FFFFFFFFFF      <1>     cmp rdi, -1
   541 00000C02 741B                <1>     je .exit
   542 00000C04 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   543 00000C08 751E                <1>     jnz .found  ;Flush if either bit is set
   544 00000C0A 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   545 00000C12 7414                <1>     je .found
   546 00000C14 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   547 00000C18 740E                <1>     je .found
   548 00000C1A 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   549 00000C1D EBDC                <1>     jmp short .ffLoop
   550                              <1> .exit:
   551                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   552 00000C1F 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   553                              <1> .exitNoFlush:
   554 00000C25 5E                  <1>     pop rsi
   555 00000C26 5F                  <1>     pop rdi
   556                              <1>     return
    18                              <2> %%_ret:
    19 00000C27 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   557                              <1> .found:
   558                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   559                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   560 00000C28 E893FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   561 00000C2D 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   562                              <1>     ;If the sector has been successfully flushed, then it
   563                              <1>     ; is no longer owned by that File so we mark the owner as none
   564 00000C2F 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   565 00000C37 E8ACFCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   566 00000C3C EBBD                <1>     jmp short .ffLoop
    24                                  %include "./Source/Kernel/FAT/fat.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;       File System routines        :
    27                              <1> ;-----------------------------------:
    28                              <1> getFATtype:
    29                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    30                              <1> ;Entry: rbp = DPB to ascertain FAT
    31                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    32 00000C3E 53                  <1>     push rbx
    33 00000C3F 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    34 00000C42 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    35 00000C47 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    36 00000C4D 730F                <1>     jae .exit
    37 00000C4F FFC9                <1>     dec ecx     ;FAT 12 marker
    38 00000C51 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    39 00000C57 7205                <1>     jb .exit
    40 00000C59 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    41                              <1> .exit:
    42 00000C5E 5B                  <1>     pop rbx
    43                              <1>     return
    18                              <2> %%_ret:
    19 00000C5F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    44                              <1> 
    45                              <1> clust2FATEntry:
    46                              <1> ;Converts a cluster number to a offset in the FAT
    47                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    48                              <1> ;        eax = Cluster number to look for
    49                              <1> ;Exit:   eax = Sector on disk of FAT 
    50                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    51                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    52 00000C60 53                  <1>     push rbx
    53 00000C61 55                  <1>     push rbp
    54 00000C62 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
    55 00000C69 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    56 00000C6C 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    57 00000C72 731E                <1>     jae .fat32
    58 00000C74 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    59 00000C7A 7209                <1>     jb .fat12
    60                              <1> ;FAT16
    61 00000C7C D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    62 00000C7E 6801000000          <1>     push qword 1
    63 00000C83 EB15                <1>     jmp short .common
    64                              <1> .fat12:
    65 00000C85 89C1                <1>     mov ecx, eax    ;ecx = eax
    66 00000C87 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    67 00000C89 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    68 00000C8B 6800000000          <1>     push qword 0
    69 00000C90 EB08                <1>     jmp short .common
    70                              <1> .fat32:
    71 00000C92 6802000000          <1>     push qword 2
    72 00000C97 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    73                              <1> .common:
    74                              <1> ;eax has the FAToffset
    75 00000C9A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    76 00000C9E 31D2                <1>     xor edx, edx    ;edx = 0
    77 00000CA0 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    78 00000CA2 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    79 00000CA6 01D8                <1>     add eax, ebx
    80 00000CA8 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    81 00000CA9 5D                  <1>     pop rbp
    82 00000CAA 5B                  <1>     pop rbx
    83                              <1>     return
    18                              <2> %%_ret:
    19 00000CAB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> 
    85                              <1> getStartSectorOfCluster:
    86                              <1> ;Input: eax = Cluster Number
    87                              <1> ;       rbp = dpb pointer
    88                              <1> ;Output: rax = Starting Sector number for cluster
    89                              <1> ;Gives the data sector we are at in the current cluster
    90                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    91 00000CAC 51                  <1>     push rcx
    92 00000CAD 09C0                <1>     or eax, eax ;Zero upper dword
    93 00000CAF 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    94                              <1> .fat32Root:
    95 00000CB1 482D02000000        <1>     sub rax, 2
    96 00000CB7 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    97 00000CBA 48D3E0              <1>     shl rax, cl
    98 00000CBD 31C9                <1>     xor ecx, ecx
    99 00000CBF 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   100 00000CC2 4801C8              <1>     add rax, rcx
   101                              <1>     ;rax now has the first sector of the current cluster
   102 00000CC5 59                  <1>     pop rcx
   103                              <1>     return
    18                              <2> %%_ret:
    19 00000CC6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> .rootDir:
   105 00000CC7 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   106 00000CCA E86FFFFFFF          <1>     call getFATtype
   107 00000CCF 81F902000000        <1>     cmp ecx, 2
   108 00000CD5 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   109                              <1>     ;Else rax has the first sector of the Root Dir
   110 00000CD7 59                  <1>     pop rcx
   111                              <1>     return
    18                              <2> %%_ret:
    19 00000CD8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   112                              <1> 
   113                              <1> 
   114                              <1> getLastClusterInChain:
   115                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   116                              <1> ;Input: eax = Cluster to start searching at
   117                              <1> ;Output: eax = Last cluster in chain
   118                              <1> ;If input eax = 0, output eax = 0
   119 00000CD9 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   120                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CDB 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   121 00000CDD 53                  <1>     push rbx
   122                              <1> .lp:
   123 00000CDE 89C3                <1>     mov ebx, eax
   124 00000CE0 E8A1010000          <1>     call readFAT
   125 00000CE5 7209                <1>     jc .exit
   126 00000CE7 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   127 00000CEC 75F0                <1>     jne .lp
   128 00000CEE 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   129                              <1> .exit: 
   130 00000CF0 5B                  <1>     pop rbx
   131                              <1>     return
    18                              <2> %%_ret:
    19 00000CF1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   132                              <1> 
   133                              <1> getNumberOfClustersInChain:
   134                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   135                              <1> ;Input: eax = Cluster to start searching at
   136                              <1> ;Output: eax = Number of clusters in the chain
   137                              <1> ;If input eax = 0, output eax = 0
   138 00000CF2 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   139                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CF4 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   140 00000CF6 51                  <1>     push rcx
   141 00000CF7 31C9                <1>     xor ecx, ecx
   142                              <1> .lp:
   143 00000CF9 FFC1                <1>     inc ecx
   144 00000CFB E886010000          <1>     call readFAT
   145 00000D00 7209                <1>     jc .exit
   146 00000D02 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   147 00000D07 75F0                <1>     jne .lp
   148 00000D09 89C8                <1>     mov eax, ecx    ;Get the count
   149                              <1> .exit: 
   150 00000D0B 59                  <1>     pop rcx
   151                              <1>     return
    18                              <2> %%_ret:
    19 00000D0C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> 
   153                              <1> getClusterInChain:
   154                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   155                              <1> ;If an EOC is encountered, then ecx will not be 
   156                              <1> ;Input: eax = Start Cluster to start searching from
   157                              <1> ;       ecx = Number of clusters to go forwards by;
   158                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   159                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   160                              <1> ;Also usual CF babble.
   161 00000D0D 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   162                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000D0F 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   163 00000D11 53                  <1>     push rbx
   164 00000D12 67E30F              <1>     jecxz .exit
   165                              <1> .lp:
   166 00000D15 89C3                <1>     mov ebx, eax
   167 00000D17 E86A010000          <1>     call readFAT
   168 00000D1C 7206                <1>     jc .exit
   169 00000D1E FFC9                <1>     dec ecx
   170 00000D20 75F3                <1>     jnz .lp
   171 00000D22 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   172                              <1> .exit:
   173 00000D24 5B                  <1>     pop rbx
   174                              <1>     return
    18                              <2> %%_ret:
    19 00000D25 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> 
   176                              <1> startNewChain:
   177                              <1> ;Working dpb must be set
   178                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   179                              <1> ;If CF=CY, hard error
   180 00000D26 53                  <1>     push rbx
   181 00000D27 56                  <1>     push rsi
   182 00000D28 E853000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   183 00000D2D 7215                <1>     jc .exit    ;Disk read error?
   184 00000D2F 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   185 00000D34 740E                <1>     je .exit
   186 00000D36 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   187 00000D3B 89C3                <1>     mov ebx, eax
   188 00000D3D E8E3010000          <1>     call writeFAT   ;Propagate the CF 
   189 00000D42 89D8                <1>     mov eax, ebx
   190                              <1> .exit:
   191 00000D44 5E                  <1>     pop rsi
   192 00000D45 5B                  <1>     pop rbx
   193                              <1>     return
    18                              <2> %%_ret:
    19 00000D46 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> allocateClusters:
   196                              <1> ;Working dpb must be set. 
   197                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   198                              <1> ;       ebx = Cluster to link to the new cluster
   199                              <1> ;Output:    
   200                              <1> ;   CF=NC => Complete.
   201                              <1> ;   If eax = -1, then no more free clusters. 
   202                              <1> ;   CF=CY => Hard error, exit
   203                              <1> ; ecx always has number of allocated clusters
   204 00000D47 53                  <1>     push rbx
   205 00000D48 56                  <1>     push rsi
   206 00000D49 51                  <1>     push rcx    ;Save tfr count on stack
   207 00000D4A 67E32B              <1>     jecxz .exit ;Allocating nothing? Exit
   208                              <1> .allocateLoop:
   209 00000D4D E82E000000          <1>     call findFreeCluster
   210 00000D52 7224                <1>     jc .exit
   211 00000D54 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   212 00000D59 741D                <1>     je .exit    ;If the cluster number is -1, return immediately
   213                              <1>     ;eax has first free cluster value to use
   214                              <1>     ;First we link the previous cluster to this cluster
   215 00000D5B BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   216 00000D60 E8C0010000          <1>     call writeFAT   ;Allocate this cluster first
   217 00000D65 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   218                              <1>     ;eax points to this allocated cluster
   219                              <1>     ;ebx points to the previous last cluster
   220 00000D67 89C6                <1>     mov esi, eax    ;New cluster as "value"
   221 00000D69 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   222 00000D6B E8B5010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   223 00000D70 7206                <1>     jc .exit
   224 00000D72 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   225 00000D74 FFC9                <1>     dec ecx ;One less cluster allocated
   226 00000D76 75D5                <1>     jnz .allocateLoop
   227                              <1> .exit:
   228 00000D78 5E                  <1>     pop rsi ;Pop the tfr count into esi
   229 00000D79 F7D9                <1>     neg ecx
   230 00000D7B 01F1                <1>     add ecx, esi
   231 00000D7D 5E                  <1>     pop rsi
   232 00000D7E 5B                  <1>     pop rbx
   233                              <1>     return
    18                              <2> %%_ret:
    19 00000D7F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234                              <1> 
   235                              <1> findFreeCluster:
   236                              <1> ;Walks the FAT to find a free cluster and returns the 
   237                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   238                              <1> ;Works on the workingDPB
   239                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   240 00000D80 53                  <1>     push rbx
   241 00000D81 52                  <1>     push rdx
   242 00000D82 55                  <1>     push rbp
   243 00000D83 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
   244                              <1>     ;Use readFAT
   245                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   246                              <1>     ;If readFAT returns 0 then its a free cluster
   247 00000D8A B802000000          <1>     mov eax, 2  ;Start with cluster 2
   248                              <1> .fatLoop:
   249 00000D8F 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   250 00000D91 E8F0000000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   251 00000D96 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   252 00000D98 85C0                <1>     test eax, eax   ;Is this cluster free?
   253 00000D9A 7409                <1>     jz .exit    ;If yes, exit
   254 00000D9C 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   255 00000DA0 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   256 00000DA3 76EA                <1>     jbe .fatLoop
   257                              <1> .exit:
   258 00000DA5 89D8                <1>     mov eax, ebx
   259 00000DA7 F8                  <1>     clc
   260                              <1> .exitFail:      ;Keep carry flag
   261 00000DA8 5D                  <1>     pop rbp
   262 00000DA9 5A                  <1>     pop rdx
   263 00000DAA 5B                  <1>     pop rbx
   264                              <1>     return
    18                              <2> %%_ret:
    19 00000DAB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   265                              <1> 
   266                              <1> findFreeClusterData:
   267                              <1> ;Walks the FAT to find a free cluster and returns the 
   268                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   269                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   270                              <1> ;Works on the workingDPB
   271                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   272 00000DAC 53                  <1>     push rbx
   273 00000DAD 52                  <1>     push rdx
   274 00000DAE 55                  <1>     push rbp
   275 00000DAF 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
   276 00000DB6 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   277                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   278 00000DBA 31D2                <1>     xor edx, edx
   279 00000DBC 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   280 00000DBF FFCA                <1>     dec edx
   281 00000DC1 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   282                              <1>     ;Use readFAT
   283                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   284                              <1>     ;If readFAT returns 0 then its a free cluster
   285 00000DC4 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   286 00000DC9 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   287                              <1> .fatLoop:
   288 00000DCC 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   289 00000DCE E8B3000000          <1>     call readFAT
   290 00000DD3 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   291 00000DD5 85C0                <1>     test eax, eax   ;Is this cluster free?
   292 00000DD7 750C                <1>     jne .fatProceed
   293 00000DD9 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   294 00000DDC 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   295 00000DE3 7410                <1>     je .fatFirst
   296                              <1> .fatProceed:
   297 00000DE5 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   298 00000DE9 39D0                <1>     cmp eax, edx
   299 00000DEB 76DF                <1>     jbe .fatLoop
   300                              <1> .exit:
   301 00000DED 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   302 00000DF0 F8                  <1>     clc
   303                              <1> .exitFail:      ;Keep carry flag
   304 00000DF1 5D                  <1>     pop rbp
   305 00000DF2 5A                  <1>     pop rdx
   306 00000DF3 5B                  <1>     pop rbx
   307                              <1>     return
    18                              <2> %%_ret:
    19 00000DF4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   308                              <1> .fatFirst:
   309 00000DF5 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   310 00000DF8 EBEB                <1>     jmp short .fatProceed
   311                              <1> 
   312                              <1> getNextSectorOfFile:
   313                              <1> ;This function will read the next sector for a file into a buffer.
   314                              <1> ;If the next sector to be read lives in the next cluster, it will update
   315                              <1> ; the vars appropriately
   316                              <1> ;
   317                              <1> ;Input: rbp = dpb pointer
   318                              <1> ;Output:
   319                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   320                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   321                              <1> ;       CF=CY => Critical error occurred and was FAILed
   322                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   323                              <1> ; next cluster and read first sector 
   324                              <1>     ;Check if we need to go to next cluster
   325 00000DFA 8A05(3AC70300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   326 00000E00 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   327 00000E03 7416                <1>     je .gotoNextCluster
   328                              <1>     ;Goto next sector in same cluster
   329 00000E05 FE05(3AC70300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   330 00000E0B 48FF05(3BC70300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   331 00000E12 488B05(3BC70300)    <1>     mov rax, qword [currSectD]
   332                              <1> .exitOK:
   333 00000E19 F8                  <1>     clc
   334                              <1> .exitFail:
   335                              <1>     return
    18                              <2> %%_ret:
    19 00000E1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   336                              <1> .gotoNextCluster:
   337 00000E1B 8B05(32C70300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   338 00000E21 E860000000          <1>     call readFAT
   339 00000E26 72F2                <1>     jc .exitFail
   340                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   341 00000E28 3DFFFFFFFF          <1>     cmp eax, -1
   342 00000E2D 74EA                <1>     je .exitOK
   343                              <1> ;Update the new cluster and sector information
   344 00000E2F 8905(32C70300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   345 00000E35 FF05(2EC70300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   346 00000E3B E86CFEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   347 00000E40 488905(3BC70300)    <1>     mov qword [currSectD], rax  ;Save it
   348 00000E47 C605(3AC70300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   349 00000E4E EBC9                <1>     jmp short .exitOK
   350                              <1> 
   351                              <1> unlinkFAT:
   352                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   353                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   354                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   355                              <1> ; cluster must be set to EOC before this proc is called.
   356                              <1> ;Stops at first invalid cluster number.
   357                              <1> ;
   358                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   359                              <1> ;       rbp = Current DPB to use for disk
   360                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   361                              <1> 
   362 00000E50 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   363 00000E51 56                  <1>     push rsi
   364 00000E52 E80A000000          <1>     call truncateFAT    ;Preserved eax
   365 00000E57 31F6                <1>     xor esi, esi  ;Free first cluster too
   366 00000E59 E8C7000000          <1>     call writeFAT
   367 00000E5E 5E                  <1>     pop rsi
   368 00000E5F 58                  <1>     pop rax
   369                              <1>     return
    18                              <2> %%_ret:
    19 00000E60 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   370                              <1> 
   371                              <1> truncateFAT:
   372                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   373                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   374                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   375                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   376                              <1> ;Stops at first invalid cluster number.
   377                              <1> ;
   378                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   379                              <1> ;       rbp = Current DPB to use for disk
   380                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   381 00000E61 50                  <1>     push rax
   382 00000E62 53                  <1>     push rbx
   383 00000E63 56                  <1>     push rsi
   384 00000E64 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   385                              <1> .lp:
   386 00000E66 E81B000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   387 00000E6B 7215                <1>     jc .exit    ;Error exit
   388 00000E6D 3DFFFFFFFF          <1>     cmp eax, -1 ;End of chain?
   389 00000E72 740E                <1>     je .exit
   390 00000E74 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   391 00000E75 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   392 00000E77 E8A9000000          <1>     call writeFAT
   393 00000E7C 7204                <1>     jc .exit    ;Error exit
   394 00000E7E 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   395 00000E80 EBE4                <1>     jmp short .lp
   396                              <1> .exit:
   397 00000E82 5E                  <1>     pop rsi
   398 00000E83 5B                  <1>     pop rbx
   399 00000E84 58                  <1>     pop rax
   400                              <1>     return
    18                              <2> %%_ret:
    19 00000E85 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   401                              <1> readFAT:
   402                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   403                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   404                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   405                              <1> ;       rbp = DPB
   406                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   407                              <1> ;If carry set, getBuffer failed!
   408 00000E86 53                  <1>     push rbx
   409 00000E87 51                  <1>     push rcx
   410 00000E88 52                  <1>     push rdx
   411 00000E89 57                  <1>     push rdi
   412 00000E8A 55                  <1>     push rbp
   413 00000E8B 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   414 00000E8D E8CEFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   415                              <1>     ;and FAT type in ecx
   416 00000E92 E814FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   417 00000E97 7237                <1>     jc .exitFail
   418                              <1>     ;Check if FAT 12, 16, 32
   419 00000E99 85C9                <1>     test ecx, ecx
   420 00000E9B 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   421 00000E9D F7C101000000        <1>     test ecx, 1
   422 00000EA3 7413                <1>     jz .goToNextClusterFat32
   423                              <1>     ;Here we handle FAT16
   424 00000EA5 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   425 00000EAA 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   426 00000EAF 721E                <1>     jb .exit
   427 00000EB1 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   428 00000EB6 EB17                <1>     jmp short .exit
   429                              <1> .goToNextClusterFat32:
   430 00000EB8 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   431 00000EBC 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   432 00000EC1 7207                <1>     jb .validCluster32   
   433 00000EC3 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   434 00000EC8 EB05                <1>     jmp short .exit
   435                              <1> .validCluster32:
   436 00000ECA 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   437                              <1> .exit:
   438 00000ECF F8                  <1>     clc
   439                              <1> .exitFail:
   440 00000ED0 5D                  <1>     pop rbp
   441 00000ED1 5F                  <1>     pop rdi
   442 00000ED2 5A                  <1>     pop rdx
   443 00000ED3 59                  <1>     pop rcx
   444 00000ED4 5B                  <1>     pop rbx
   445                              <1>     return
    18                              <2> %%_ret:
    19 00000ED5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   446                              <1> .gotoNextClusterFat12:
   447                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   448                              <1> ;eax has the sector number of the FAT
   449                              <1> ;edx has byte offset into the sector
   450                              <1> ;edi has current cluster number
   451                              <1> ;rbx has ptr to buffer header
   452 00000ED6 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   453 00000EDC 742C                <1>     jz .gotoNextClusterFat12Even
   454                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   455 00000EDE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   456 00000EE2 29D1                <1>     sub ecx, edx
   457 00000EE4 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   458 00000EE6 7518                <1>     jnz .gotoNextClusterFat12NoCross
   459                              <1>     ;Boundary cross, build entry properly
   460 00000EE8 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   461 00000EED FFC0                <1>     inc eax ;Get next FAT sector
   462 00000EEF 53                  <1>     push rbx
   463 00000EF0 E8B6FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   464 00000EF5 72D9                <1>     jc .exitFail
   465 00000EF7 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   466 00000EF8 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   467 00000EFB C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   468 00000EFE EB14                <1>     jmp short .checkIfLastFAT12Cluster
   469                              <1> .gotoNextClusterFat12NoCross:
   470 00000F00 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   471 00000F05 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   472 00000F08 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   473                              <1> .gotoNextClusterFat12Even:
   474                              <1>     ;Here the cluster is even and can't cross a sector boundary
   475 00000F0A 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   476 00000F0F 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   477                              <1> .checkIfLastFAT12Cluster:
   478 00000F14 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   479 00000F19 72B4                <1>     jb .exit         ;If so, exit with it in eax
   480 00000F1B B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   481 00000F20 E9AAFFFFFF          <1>     jmp .exit
   482                              <1> 
   483                              <1> writeFAT:
   484                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   485                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   486                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   487                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   488                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   489 00000F25 53                  <1>     push rbx
   490 00000F26 51                  <1>     push rcx
   491 00000F27 52                  <1>     push rdx
   492 00000F28 56                  <1>     push rsi
   493 00000F29 57                  <1>     push rdi
   494 00000F2A 55                  <1>     push rbp
   495 00000F2B 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   496 00000F2D E82EFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   497                              <1>     ;and FAT type in ecx
   498 00000F32 E874FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   499 00000F37 7223                <1>     jc .exitFail
   500                              <1>     ;Check if FAT 12, 16, 32
   501 00000F39 85C9                <1>     test ecx, ecx
   502 00000F3B 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   503 00000F3D F7C101000000        <1>     test ecx, 1
   504 00000F43 7407                <1>     jz .goToNextClusterFat32
   505                              <1>     ;Here we handle FAT16
   506 00000F45 66897C1330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], di ;Store the value
   507 00000F4A EB0A                <1>     jmp short .exit
   508                              <1> .goToNextClusterFat32:
   509 00000F4C 81E7FFFFFF0F        <1>     and edi, 0FFFFFFFh  ;Zero upper nybble
   510 00000F52 897C1330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], edi
   511                              <1> .exit:
   512 00000F56 E8A8FAFFFF          <1>     call markBufferDirty
   513 00000F5B F8                  <1>     clc
   514                              <1> .exitFail:
   515 00000F5C 5D                  <1>     pop rbp
   516 00000F5D 5F                  <1>     pop rdi
   517 00000F5E 5E                  <1>     pop rsi
   518 00000F5F 5A                  <1>     pop rdx
   519 00000F60 59                  <1>     pop rcx
   520 00000F61 5B                  <1>     pop rbx
   521                              <1>     return
    18                              <2> %%_ret:
    19 00000F62 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   522                              <1> .gotoNextClusterFat12:
   523                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   524                              <1> ;eax has the sector number of the FAT
   525                              <1> ;edx has byte offset into the sector
   526                              <1> ;edi has current cluster number
   527                              <1> ;rbx has ptr to buffer header
   528 00000F63 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   529 00000F69 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   530 00000F6F 7445                <1>     jz .gotoNextClusterFat12Even
   531                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   532 00000F71 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   533 00000F75 29D1                <1>     sub ecx, edx
   534 00000F77 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   535 00000F79 752C                <1>     jnz .gotoNextClusterFat12NoCross
   536                              <1>     ;Boundary cross, build entry properly
   537                              <1>     ;Replace the high nybble of the low byte 
   538 00000F7B 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   539 00000F80 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   540 00000F86 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   541 00000F89 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   542 00000F8B C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   543 00000F8E 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   544 00000F92 E86CFAFFFF          <1>     call markBufferDirty
   545 00000F97 FFC0                <1>     inc eax ;Get next FAT sector
   546 00000F99 E80DFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   547 00000F9E 72BC                <1>     jc .exitFail
   548 00000FA0 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   549 00000FA2 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   550 00000FA5 EBAF                <1>     jmp short .exit
   551                              <1> .gotoNextClusterFat12NoCross:
   552 00000FA7 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   553 00000FAC 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   554 00000FB1 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   555 00000FB4 EB0A                <1>     jmp short .fat12common
   556                              <1> .gotoNextClusterFat12Even:
   557                              <1>     ;Here the cluster is even and can't cross a sector boundary
   558 00000FB6 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   559 00000FBB 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   560                              <1> .fat12common:
   561 00000FC0 09F0                <1>     or eax, esi     ;Add the new entry bits
   562 00000FC2 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   563 00000FC7 E98AFFFFFF          <1>     jmp .exit
    25                                  %include "./Source/Kernel/FAT/findfile.asm"
    26                              <1> ;Generic Find First and Find Next functions here
    27                              <1> findNextMain:
    28 00000FCC 488B3D(FAC30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    29 00000FD3 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    30 00000FD6 7408                <1>     jz .notNet
    31 00000FD8 B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    32 00000FDD CD4F                <1>     int 4Fh
    33                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000FDF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    34                              <1> .notNet:
    35 00000FE0 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    36 00000FE2 FEC0                <1>     inc al  ;Convert into 1 based number
    37 00000FE4 E8FF500000          <1>     call dosCrit1Enter
    38 00000FE9 E8CC4C0000          <1>     call setDrive   ;Set CDS and current drive vars
    39 00000FEE 720C                <1>     jc .critError   ;Return error if this fails
    40 00000FF0 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS] 
    41 00000FF7 E8F9490000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    42                              <1> .critError:
    43 00000FFC E8F1500000          <1>     call dosCrit1Exit
    44                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001001 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    45 00001003 E801000000          <1>     call searchMoreDir
    46                              <1>     return
    18                              <2> %%_ret:
    19 00001008 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> searchMoreDir:
    48                              <1> ;The three directory variables are set up from the ffblock. 
    49                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    50                              <1> ;Current DTA is also used to contain the ff block address
    51                              <1> ;All registers can be trashed
    52 00001009 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
    53                              <1>     ;First setup dirClustA and dirSect vars
    54 00001010 488B3D(FAC30300)    <1>     mov rdi, qword [currentDTA]
    55 00001017 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    56 0000101A 8805(DAC60300)      <1>     mov byte [searchAttr], al   ;And save it
    57 00001020 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    58 00001023 8905(62C70300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    59 00001029 8905(5EC70300)      <1>     mov dword [dirClustPar], eax
    60                              <1>     ;Get number of 32 byte entries in a sector
    61 0000102F 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    62                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    63 00001032 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    64                              <1>     ;Now get bytes per cluster
    65 00001035 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    66 00001037 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 0000103B 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    68 0000103F D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 00001041 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 00001043 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 00001045 31D2                <1>     xor edx, edx
    72 00001047 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 00001049 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 0000104B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 0000104F 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 00001051 31D2                <1>     xor edx, edx
    80 00001053 F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster (or root dir)
    82                              <1>     ;edx has byte offset into sector 
    83 00001055 668905(66C70300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 0000105C C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    85 0000105F 8915(68C70300)      <1>     mov dword [dirEntry], edx
    86 00001065 8B05(62C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    87 0000106B 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    88 0000106D 7461                <1>     jz .oldFat
    89                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    90 0000106F 89D9                <1>     mov ecx, ebx
    91 00001071 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    92                              <1> .fatlp:
    93 00001074 E80DFEFFFF          <1>     call readFAT
    94 00001079 3DFFFFFFFF          <1>     cmp eax, -1
    95 0000107E 7464                <1>     je .errorExit
    96 00001080 FFC9                <1>     dec ecx
    97 00001082 75F0                <1>     jnz .fatlp
    98 00001084 8905(62C70300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    99                              <1> .skipFatWalk:
   100 0000108A 488D0597000000      <1>     lea rax, searchDir.nextEp
   101 00001091 50                  <1>     push rax    ;Push the return address onto stack
   102 00001092 8B05(62C70300)      <1>     mov eax, dword [dirClustA]
   103 00001098 E80FFCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   104 0000109D 0FB71D(66C70300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   105 000010A4 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   106                              <1> .common:
   107 000010A7 E804FBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   108 000010AC 0F8211010000        <1>     jc searchDir.hardError
   109 000010B2 E80F010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   110 000010B7 8B05(68C70300)      <1>     mov eax, dword [dirEntry]
   111 000010BD 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   112 000010BF C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   113 000010C2 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   114                              <1>     ;We continue AS IF this entry was bad
   115                              <1>     ;Now setup al as upon normal entry 
   116 000010C5 8A05(DAC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   117 000010CB E95F010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   118                              <1>     ;The return address on the stack will return to the ep's pushed
   119                              <1> .oldFat:
   120                              <1> ;Old FAT 12/16 root dirs fall thru here only
   121 000010D0 488D05D0000000      <1>     lea rax, searchDir.oldNextEP
   122 000010D7 50                  <1>     push rax    ;Push return address onto the stack
   123 000010D8 0FB705(66C70300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   124 000010DF 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   125 000010E2 EBC3                <1>     jmp short .common
   126                              <1> .errorExit:
   127 000010E4 F9                  <1>     stc
   128                              <1>     return
    18                              <2> %%_ret:
    19 000010E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   129                              <1> searchDir:
   130                              <1> ;Called in a level 1 critical section. 
   131                              <1> ;The directory variables are set and fcbName has the pattern to match
   132                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   133                              <1> ;All registers can be trashed
   134                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   135                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   136                              <1> 
   137                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   138                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   139 000010E6 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   140 000010ED 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   141 000010F3 7408                <1>     jz .notNet
   142 000010F5 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   143 000010FA CD4F                <1>     int 4fh
   144                              <1>     return
    18                              <2> %%_ret:
    19 000010FC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> .notNet:
   146 000010FD 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   147 00001104 8B05(62C70300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   148 0000110A 85C0                <1>     test eax, eax
   149 0000110C 747E                <1>     jz .oldRoot
   150 0000110E E899FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   151                              <1> .sectorLoop:
   152 00001113 E898FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   153 00001118 0F82A5000000        <1>     jc .hardError
   154 0000111E E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   155                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   156 00001123 E8B2000000          <1>     call findInBuffer
   157                              <1> .nextEp:
   158                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001128 73D2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   159 0000112A 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   160                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   161                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   162                              <1>     ;IF however, the next cluster is -1, then we return fail
   163 00001130 8B05(62C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   164 00001136 8905(32C70300)      <1>     mov dword [currClustD], eax
   165 0000113C 668B05(66C70300)    <1>     mov ax, word [dirSect]
   166 00001143 8805(3AC70300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   167 00001149 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   168 0000114D 488905(3BC70300)    <1>     mov qword [currSectD], rax  
   169 00001154 C705(2EC70300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   169 0000115C 0000                <1>
   170 0000115E E897FCFFFF          <1>     call getNextSectorOfFile
   171 00001163 725E                <1>     jc .hardError
   172 00001165 3DFFFFFFFF          <1>     cmp eax, -1
   173 0000116A 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   174 0000116C 66FF05(66C70300)    <1>     inc word [dirSect]  ;Goto next sector
   175 00001173 8B05(62C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 00001179 3B05(32C70300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   177 0000117F 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   178 00001181 66C705(66C70300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   178 00001189 00                  <1>
   179 0000118A EB87                <1>     jmp short .sectorLoop 
   180                              <1> 
   181                              <1> .oldRoot:
   182                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   183                              <1> ; one large contiguous cluster.
   184                              <1> ;   ecx = Number of entries per sector
   185                              <1> .oldSectorLp:
   186 0000118C 0FB705(66C70300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   187 00001193 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   188 00001196 E815FAFFFF          <1>     call getBufForDOS
   189 0000119B 7226                <1>     jc .hardError
   190 0000119D E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   191 000011A2 E833000000          <1>     call findInBuffer
   192                              <1> .oldNextEP:
   193                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 000011A7 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000011A9 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   194 000011AA 7413                <1>     jz .fnfError
   195 000011AC 66FF05(66C70300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   196 000011B3 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   197 000011B6 663905(68C70300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   198 000011BD 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   199                              <1> .fnfError:
   200 000011BF B012                <1>     mov al, errNoFil
   201 000011C1 F9                  <1>     stc
   202                              <1>     return
    18                              <2> %%_ret:
    19 000011C2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   203                              <1> .hardError:
   204 000011C3 B0FF                <1>     mov al, -1
   205                              <1>     return
    18                              <2> %%_ret:
    19 000011C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   206                              <1> adjustDosDirBuffer:
   207 000011C6 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   208 000011CA 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   209 000011CE 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   210 000011D2 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   211 000011D6 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   212                              <1>     return
    18                              <2> %%_ret:
    19 000011D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> findInBuffer:
   215                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   216                              <1> ;       rsi = Sector buffer data area
   217                              <1> ;Output: CF=CY => No entries found
   218                              <1> ;        ZF=NE => Keep searching in subsequent directories
   219                              <1> ;        ZF=ZE => End of directory reached early, stop
   220                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   221                              <1> ;        rsi = Points to start of the disk buffer directory entry
   222 000011DA 8A05(DAC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   223 000011E0 E89D000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   224                              <1> .searchMainLp:
   225                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   226 000011E5 8A25(E6C60300)      <1>     mov ah, byte [delChar]
   227 000011EB 803E00              <1>     cmp byte [rsi], 00h
   228 000011EE 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   229 000011F0 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   230 000011F2 750F                <1>     jne .notLookingForEmpty
   231                              <1> .emptySlot:
   232                              <1> ;Here we check if we are looking for an empty directory entry or
   233                              <1> ; we have reached the end of the file (if the first byte is 00h)
   234                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   235 000011F4 3A25(B7C60300)      <1>     cmp ah, byte [fcbName] 
   236                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011FA 74DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   237                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   238 000011FC 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   239 000011FF 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   240 00001201 F9                  <1>     stc
   241                              <1>     return
    18                              <2> %%_ret:
    19 00001202 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> .notLookingForEmpty:
   243 00001203 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   244 00001206 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   245 00001209 803D(4BC40300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   246 00001210 7434                <1>     je .exclusiveDir
   247 00001212 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   248 00001214 7437                <1>     je .volFile ;If so, go here
   249 00001216 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   250 00001219 7414                <1>     je .nextEntry
   251 0000121B 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   252 0000121D 7710                <1>     ja .nextEntry
   253                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   254                              <1> .scanName:
   255 0000121F 56                  <1>     push rsi
   256 00001220 488D3D(B7C60300)    <1>     lea rdi, fcbName ;Goto name template to search for
   257 00001227 E83E000000          <1>     call .nameCompare
   258 0000122C 5E                  <1>     pop rsi
   259 0000122D 7424                <1>     je .searchEntryFound
   260                              <1> .nextEntry:
   261                              <1> ;Go to next entry
   262 0000122F 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   263 00001236 FF05(68C70300)      <1>     inc dword [dirEntry] ;And denote that in variable
   264 0000123C FFC9                <1>     dec ecx
   265 0000123E 75A5                <1>     jnz .searchMainLp
   266                              <1> .badExit:
   267 00001240 31C0                <1>     xor eax, eax
   268 00001242 FFC0                <1>     inc eax ;Clear ZF
   269 00001244 F9                  <1>     stc
   270                              <1>     return
    18                              <2> %%_ret:
    19 00001245 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> .exclusiveDir:
   272                              <1> ;Used when going down a path, dir bit simply need be set
   273 00001246 F6C410              <1>     test ah, dirDirectory
   274 00001249 75D4                <1>     jnz .scanName
   275 0000124B EBE2                <1>     jmp short .nextEntry
   276                              <1> 
   277                              <1> .volFile:
   278 0000124D 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   279 0000124F 74CE                <1>     je .scanName       ;If so, scan the name agrees
   280 00001251 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   281                              <1> 
   282                              <1> .searchEntryFound:
   283                              <1> ;Here a good entry was found!
   284 00001253 56                  <1>     push rsi
   285 00001254 57                  <1>     push rdi
   286 00001255 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   287 00001257 488D3D(3CC60300)    <1>     lea rdi, curDirCopy
   288 0000125E B904000000          <1>     mov ecx, 32/8
   289 00001263 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   290 00001266 5F                  <1>     pop rdi
   291 00001267 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   292 00001268 F8                  <1>     clc
   293                              <1>     return
    18                              <2> %%_ret:
    19 00001269 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> .nameCompare:
   296                              <1> ;Input: rsi = source string
   297                              <1> ;       rdi = string template to compare against
   298                              <1> ;Output: ZF=ZE => Strings are ok
   299                              <1> ;        ZF=NZ => Strings not ok
   300                              <1> ;Accepts wildcards. Trashes al
   301 0000126A 51                  <1>     push rcx
   302 0000126B 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   303                              <1> .ncLp:
   304 0000126D 81F90B000000        <1>     cmp ecx, 11
   305 00001273 740B                <1>     je .ncExit
   306 00001275 FFC1                <1>     inc ecx
   307 00001277 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   308 00001278 74F3                <1>     je .ncLp    ;If equal, keep going
   309 0000127A 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   310 0000127E 74ED                <1>     je .ncLp
   311                              <1> .ncExit:
   312 00001280 59                  <1>     pop rcx
   313                              <1>     return
    18                              <2> %%_ret:
    19 00001281 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   314                              <1> 
   315                              <1> adjustSearchAttr:
   316                              <1> ;Converts the byte to a system only if the bit is set
   317                              <1> ;Input: eax = User selected search mask
   318                              <1> ;Output: eax = Modified search mask
   319 00001282 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   320 00001287 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   321                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000128C 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   322 0000128E B808000000          <1>     mov eax, dirVolumeID
   323                              <1>     return
    18                              <2> %%_ret:
    19 00001293 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> asciiToFCB:
   326                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   327                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   328                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   329                              <1> ;Name is space padded.
   330                              <1> ;Input: rsi = ASCII string buffer
   331                              <1> ;       rdi = FCB name buffer
   332                              <1> ;Output: al = Char that terminated the source string 
   333 00001294 53                  <1>     push rbx    
   334 00001295 57                  <1>     push rdi
   335 00001296 B90B000000          <1>     mov ecx, 11
   336 0000129B B020                <1>     mov al, " "
   337 0000129D F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   338 0000129F 5F                  <1>     pop rdi
   339 000012A0 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   340                              <1> .processName:
   341 000012A3 AC                  <1>     lodsb   ;Get the char in al
   342 000012A4 E8134B0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   343 000012A9 84C0                <1>     test al, al
   344 000012AB 742D                <1>     jz .exit
   345                              <1>     ;Test if the char is valid
   346 000012AD E8404C0000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   347 000012B2 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   348 000012B4 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   349 000012B6 7407                <1>     je .extSpace
   350 000012B8 3C2E                <1>     cmp al, "."
   351 000012BA 740C                <1>     je .ext
   352 000012BC AA                  <1>     stosb   ;Store the char
   353 000012BD EBE4                <1>     jmp short .processName
   354                              <1> .extSpace:
   355                              <1> ;Now we scan for a period in the name
   356 000012BF AC                  <1>     lodsb   ;Get a char and increase rsi
   357 000012C0 84C0                <1>     test al, al
   358 000012C2 7416                <1>     jz .exit
   359 000012C4 3C2E                <1>     cmp al, "."     ;If al is not a period...
   360 000012C6 75F7                <1>     jne .extSpace   ; keep searching
   361                              <1> .ext:
   362 000012C8 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   363                              <1> .processExt:
   364 000012CC AC                  <1>     lodsb
   365 000012CD 84C0                <1>     test al, al
   366 000012CF 7409                <1>     jz .exit
   367 000012D1 3C20                <1>     cmp al, " "
   368 000012D3 7405                <1>     je .exit
   369 000012D5 AA                  <1>     stosb
   370 000012D6 EBF4                <1>     jmp short .processExt
   371                              <1> .exitBadChar:
   372 000012D8 30C0                <1>     xor al, al  ;Return a null terminator
   373                              <1> .exit:
   374 000012DA 5B                  <1>     pop rbx
   375                              <1>     return
    18                              <2> %%_ret:
    19 000012DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   376                              <1> 
   377                              <1> FCBToAsciiz:
   378                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   379                              <1> ;Name is space padded too
   380                              <1> ;Input: rsi = FCB name buffer
   381                              <1> ;       rdi = ASCIIZ string buffer
   382 000012DC B908000000          <1>     mov ecx, 8
   383 000012E1 F3A4                <1>     rep movsb   ;Move the name over
   384                              <1> .scanNameSpace:
   385 000012E3 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   386 000012E7 750D                <1>     jne .ext
   387 000012E9 48FFCF              <1>     dec rdi
   388 000012EC FFC1                <1>     inc ecx
   389 000012EE 81F908000000        <1>     cmp ecx, 8
   390 000012F4 72ED                <1>     jb .scanNameSpace
   391                              <1> .ext:
   392 000012F6 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   393 000012FB 7506                <1>     jne .validExt
   394 000012FD 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   395 00001301 7415                <1>     je .exit
   396                              <1> .validExt:
   397 00001303 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   398 00001305 AA                  <1>     stosb
   399 00001306 B903000000          <1>     mov ecx, 3
   400 0000130B F3A4                <1>     rep movsb   ;Move the three extension chars over
   401                              <1> .scanExtSpace:
   402 0000130D 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   403 00001311 7505                <1>     jne .exit
   404 00001313 48FFCF              <1>     dec rdi
   405 00001316 EBF5                <1>     jmp short .scanExtSpace
   406                              <1> .exit:
   407 00001318 31C0                <1>     xor eax, eax
   408 0000131A AA                  <1>     stosb   ;Store a null at the end
   409                              <1>     return
    18                              <2> %%_ret:
    19 0000131B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   410                              <1> 
   411                              <1> setupFFBlock:
   412                              <1> ;Sets up the find first block for the search
   413                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   414 0000131C 50                  <1>     push rax
   415 0000131D 53                  <1>     push rbx
   416 0000131E 56                  <1>     push rsi
   417 0000131F 57                  <1>     push rdi
   418 00001320 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   419 00001323 8A05(DAC60300)      <1>     mov al, byte [searchAttr]
   420 00001329 243F                <1>     and al, 3Fh ;Clear upper two bits
   421 0000132B 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   422 0000132E 0FB605(E7C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   423 00001335 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   424                              <1>     ;xchg bx, bx
   425 00001337 488D35(B7C60300)    <1>     lea rsi, fcbName
   426 0000133E 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   427 00001342 57                  <1>     push rdi
   428 00001343 48B820202020202020- <1>     mov rax, "        "
   428 0000134C 20                  <1>
   429 0000134D 48AB                <1>     stosq
   430 0000134F 66AB                <1>     stosw
   431 00001351 AA                  <1>     stosb
   432 00001352 5F                  <1>     pop rdi
   433 00001353 48A5                <1>     movsq   ;Move 8 chars
   434 00001355 66A5                <1>     movsw   ;Move 2 chars
   435 00001357 A4                  <1>     movsb   ;Move the final char
   436                              <1> 
   437 00001358 8B05(68C70300)      <1>     mov eax, dword [dirEntry]
   438 0000135E 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   439 00001361 8B05(5EC70300)      <1>     mov eax, dword [dirClustPar]
   440 00001367 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   441 0000136A 8A05(47C60300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   442 00001370 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   443 00001373 8B05(52C60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   444 00001379 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   445 0000137C 8B05(58C60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   446 00001382 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   447 00001385 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   448 00001389 488D35(3CC60300)    <1>     lea rsi, curDirCopy
   449 00001390 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   450                              <1> 
   451 00001395 5F                  <1>     pop rdi
   452 00001396 5E                  <1>     pop rsi
   453 00001397 5B                  <1>     pop rbx
   454 00001398 58                  <1>     pop rax
   455                              <1>     return
    18                              <2> %%_ret:
    19 00001399 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   458                              <1> ;Gets the drive letter for the path in al
   459                              <1> ;Input: rsi = Buffer to process
   460                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   461                              <1> ;       ZF=ZE and al = 0 => Null path
   462                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   463                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   464                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   465 0000139A 30C0                <1>     xor al, al
   466 0000139C 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   467                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000139F 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   468 000013A1 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   469                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013A5 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   470 000013A7 66AD                <1>     lodsw   ;Get first word, rsi += 2
   471                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   472 000013A9 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   473 000013AB 2C60                <1>     sub al, 60h
   474                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013AD 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   475 000013AF B0FF                <1>     mov al, -1  ;Else not a valid drive number
   476                              <1>     return
    18                              <2> %%_ret:
    19 000013B1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   477                              <1> canonicaliseFileName:
   478                              <1> ;Always trying to build and qualify a full pathname
   479                              <1> ;Does getPath without hitting the disk
   480 000013B2 B0FF                <1>     mov al, -1
   481 000013B4 8805(4BC40300)      <1>     mov byte [fileDirFlag], al  
   482 000013BA 8805(DFC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   483 000013C0 48893D(00C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   484 000013C7 FEC0                <1>     inc al  ;make al = 0
   485 000013C9 8805(10C60300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   486 000013CF E84D000000          <1>     call getPath.epAlt
   487                              <1>     retc    ;Return if an error
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013D4 72DB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   488 000013D6 48FFCF              <1>     dec rdi ;Point to what should be the null char
   489 000013D9 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Was the prev char a drive sep?
   490 000013DD 7503                <1>     jne .storeNull
   491 000013DF B05C                <1>     mov al, "\"
   492 000013E1 AA                  <1>     stosb   ;Store the pathsep and increment rdi
   493                              <1> .storeNull:
   494 000013E2 803F00              <1>     cmp byte [rdi], 0   ;Ensure path is null terminated (and clear CF)
   495                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013E5 74CA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   496 000013E7 C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   497                              <1>     return
    18                              <2> %%_ret:
    19 000013EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   498                              <1> 
   499                              <1> getFilePathNoCanon:
   500                              <1> ;Used when the path is constructed internally (as for FCB functions)
   501                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   502 000013EB B0FF                <1>     mov al, -1
   503 000013ED 4889FE              <1>     mov rsi, rdi
   504 000013F0 EB14                <1>     jmp short getPath.noCanon
   505                              <1> getDirPath:
   506 000013F2 30C0                <1>     xor al, al   ;Set to Directory
   507 000013F4 EB02                <1>     jmp short getPath
   508                              <1> getFilePath:
   509 000013F6 B0FF                <1>     mov al, -1  ;Set to File
   510                              <1> getPath:
   511                              <1> ;Determines whether the path is spliced or not and transfers the chars
   512                              <1> ; from the user buffer into an internal buffer, normalising them.
   513                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   514                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   515                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   516                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   517                              <1> ; we let it do its thing and return.
   518                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   519                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   520                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   521                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   522                              <1> ; (converted from using machine name by the net client program).
   523                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   524                              <1> ; was good.
   525                              <1> ;Called with:
   526                              <1> ; rdi = SDA Buffer for filename
   527                              <1> ; rsi = Potentially unqualified filename
   528                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   529 000013F8 50                  <1>     push rax
   530 000013F9 57                  <1>     push rdi
   531 000013FA E8B3FFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   532 000013FF 5F                  <1>     pop rdi
   533 00001400 58                  <1>     pop rax
   534 00001401 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   535                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001404 72E4                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   536                              <1> .noCanon:
   537 00001406 8805(4BC40300)      <1>     mov byte [fileDirFlag], al  
   538 0000140C B0FF                <1>     mov al, -1
   539 0000140E 8805(DFC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   540 00001414 48893D(00C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   541 0000141B 8805(10C60300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   542                              <1> .epAlt:
   543 00001421 C605(E3C60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   544 00001428 C605(E2C60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   545 0000142F F605(E0C60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   546 00001436 7428                <1>     jz .notServer
   547                              <1>     ;In this case, the client network program will have correctly
   548                              <1>     ; substituted the drive letter for the path before making the request.
   549                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   550 00001438 E85DFFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   552                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   553                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   554                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   555                              <1>     ; these requirements.
   556                              <1>     ;When a server request is made, the request can ONLY be for a file on
   557                              <1>     ; a CDS drive.
   558 0000143D FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   559 0000143F 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS]
   560 00001446 50                  <1>     push rax
   561 00001447 E89C4C0000          <1>     call dosCrit1Enter
   562 0000144C E8A4450000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   563 00001451 E89C4C0000          <1>     call dosCrit1Exit
   564 00001456 58                  <1>     pop rax
   565 00001457 0F8382000000        <1>     jnc .driveOk
   566                              <1> .serverExit:
   567 0000145D B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   568                              <1>     return
    18                              <2> %%_ret:
    19 0000145F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   569                              <1> .notServer:
   570                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   571 00001460 48C705(F0C60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   571 00001468 FFFFFF              <1>
   572 0000146B B823110000          <1>     mov eax, 1123h
   573 00001470 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   574                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001472 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   575 00001474 E821FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   576 00001479 9C                  <1>     pushfq  ;Save the flag state on stack
   577 0000147A 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   578 0000147B 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   579 0000147E E82D490000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   580 00001483 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   581 00001485 E826490000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   582 0000148A 7543                <1>     jnz .notNet
   583 0000148C 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   584 0000148E 753F                <1>     jne .notNet
   585 00001490 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   586 00001491 9D                  <1>     popfq
   587 00001492 66AD                <1>     lodsw
   588 00001494 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   589 00001498 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   590                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   591                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   592                              <1> ; redirector Find First Without CDS
   593                              <1> 
   594 0000149A 8A1D(10C60300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   595 000014A0 C605(10C60300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   596 000014A7 53                  <1>     push rbx
   597                              <1> .moveNetChars:
   598 000014A8 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   599 000014A9 E80E490000          <1>     call uppercaseChar  ;Make char in al uppercase
   600 000014AE 84C0                <1>     test al, al
   601 000014B0 740F                <1>     jz .netEnd
   602 000014B2 E8F9480000          <1>     call swapPathSeparator  ;If path sep, swap it
   603 000014B7 AA                  <1>     stosb
   604 000014B8 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   605 000014BA E85C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   606 000014BF EBE7                <1>     jmp short .moveNetChars
   607                              <1> .netEnd:
   608 000014C1 5B                  <1>     pop rbx
   609 000014C2 AA                  <1>     stosb
   610 000014C3 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   611                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000014C5 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   612 000014C7 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   613 000014CC CD4F                <1>     int 4Fh
   614                              <1>     return
    18                              <2> %%_ret:
    19 000014CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   615                              <1> .notNet:
   616                              <1> ;This is the normal case; paths can be relative, or absolute.
   617 000014CF 58                  <1>     pop rax ;Get the drive letter back
   618 000014D0 9D                  <1>     popfq   ;Get the flag state back
   619 000014D1 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   620                              <1> .pnfErr:
   621 000014D3 B003                <1>     mov al, errPnf  ;Null path error
   622 000014D5 F9                  <1>     stc
   623                              <1>     return
    18                              <2> %%_ret:
    19 000014D6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   624                              <1> .notNull:
   625 000014D7 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   626 000014D9 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   627 000014DB B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   628 000014DD F9                  <1>     stc
   629                              <1>     return
    18                              <2> %%_ret:
    19 000014DE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   630                              <1> .driveOk:
   631 000014DF 84C0                <1>     test al, al
   632 000014E1 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   633                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   634 000014E3 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   635 000014E6 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   636 000014E8 50                  <1>     push rax    ;Save the drive letter
   637 000014E9 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   638 000014EA 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   639 000014ED E8BE480000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   640                              <1>     ;If al is a path separator, then this path is absolute.
   641 000014F2 58                  <1>     pop rax ;Get back the drive letter
   642 000014F3 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   643                              <1> .absoPath:
   644                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   645 000014F5 48FFC6              <1>     inc rsi
   646 000014F8 EB1A                <1>     jmp short .commonDir
   647                              <1> .curPath:
   648                              <1> ;This is only jumped to if we are relative the current drive
   649                              <1> ;rsi points to first char in path
   650                              <1> ;If this char is \ or /, then it is an absolute path.
   651 000014FA 8A05(14C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   652 00001500 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   653 00001502 50                  <1>     push rax    ;Save the current drive number
   654 00001503 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   655 00001505 E8A6480000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   656 0000150A 58                  <1>     pop rax ;Get back the current drive number
   657 0000150B 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   658                              <1> .relMain:
   659 0000150D C605(DFC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   660                              <1> .commonDir:
   661                              <1> ;rsi points to the start of the string we will be appending
   662                              <1> ;Fall through now
   663                              <1> pathWalk:
   664                              <1> ;Input: rsi must point to source buffer for path to expand
   665                              <1> ;       rdi must point to a destination buffer
   666                              <1> ;       al must contain the drive 1 based number
   667 00001514 E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   668 00001519 727C                <1>     jc .badDriveExit
   669                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   670                              <1>     ; resolution
   671                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   672 0000151B 4889FB              <1>     mov rbx, rdi
   673                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   674 0000151E 803E00              <1>     cmp byte [rsi], 0
   675 00001521 7512                <1>     jnz .mainlp
   676                              <1>     ;Setup dummy dir data
   677 00001523 31C0                <1>     xor eax, eax
   678 00001525 668905(50C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   679 0000152C 668905(56C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   680 00001533 EB68                <1>     jmp short .exitGood
   681                              <1> .mainlp:
   682 00001535 E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   683 0000153A 84C0                <1>     test al, al
   684 0000153C 7507                <1>     jnz .notFile
   685 0000153E C605(E3C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   686                              <1> .notFile:
   687 00001545 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   688 00001546 E856030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   689 0000154B 58                  <1>     pop rax
   690 0000154C 736B                <1>     jnc .deviceFound
   691 0000154E E816020000          <1>     call searchForPathspec  ;and search the directory
   692 00001553 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   693 00001555 E865020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   694 0000155A 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   695 0000155C 84C0                <1>     test al, al ;Exit if this pathspec was a file
   696 0000155E 743D                <1>     jz .exitGood
   697                              <1>     ;Here I have to take the cluster data from the found directory entry
   698                              <1>     ; and setup the search for the next pathspec portion
   699                              <1>     ;Copy necessary data from the current directory copy
   700 00001560 803D(10C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   701 00001567 74CC                <1>     jz .mainlp
   702 00001569 0FB705(50C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   703 00001570 C1E010              <1>     shl eax, 10h    ;Shift it high
   704 00001573 668B05(56C60300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   705                              <1>     ;eax now has the cluster number of the search
   706 0000157A 8905(62C70300)      <1>     mov dword [dirClustA], eax
   707 00001580 8905(5EC70300)      <1>     mov dword [dirClustPar], eax
   708 00001586 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   709 00001588 8905(68C70300)      <1>     mov dword [dirEntry], eax
   710 0000158E 668905(66C70300)    <1>     mov word [dirSect], ax
   711 00001595 EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   712                              <1> .badDriveExit:
   713 00001597 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   714                              <1>     return
    18                              <2> %%_ret:
    19 0000159C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   715                              <1> .exitGood:
   716 0000159D C605(E2C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   717                              <1> .exit:
   718                              <1>     return
    18                              <2> %%_ret:
    19 000015A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   719                              <1> .checkDev:
   720                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   721                              <1> ; we are in \DEV pseudo dir
   722 000015A5 F605(4CC40300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   723 000015AC 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   724                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   725 000015AE 56                  <1>     push rsi
   726 000015AF 57                  <1>     push rdi
   727 000015B0 E87A020000          <1>     call checkDevPath
   728 000015B5 5F                  <1>     pop rdi
   729 000015B6 5E                  <1>     pop rsi
   730 000015B7 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   731                              <1> .deviceFound:
   732 000015B9 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   733 000015BB C605(E3C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   734 000015C2 C605(E2C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   735 000015C9 EBD9                <1>     jmp short .exit   
   736                              <1> .nodev:
   737 000015CB F9                  <1>     stc
   738 000015CC EBD6                <1>     jmp short .exit
   739                              <1> 
   740                              <1> prepareDir:
   741                              <1> ;Used to transfer the current directory if it is necessary.
   742                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   743                              <1> ; relative
   744                              <1> ;Input: al = 1-based drive letter
   745                              <1> ;Output: rdi = Pointing at where to place chars from source string
   746                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   747 000015CE 56                  <1>     push rsi
   748 000015CF E8144B0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   749 000015D4 E8E1460000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   750 000015D9 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   751 000015DB 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS] 
   752 000015E2 57                  <1>     push rdi    ;Push CDS pointer on stack...
   753 000015E3 E80D440000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   754                              <1> .critExit:
   755 000015E8 E8054B0000          <1>     call dosCrit1Exit
   756 000015ED 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   757 000015EE 724A                <1>     jc .badDriveExit 
   758 000015F0 488B3D(00C60300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   759                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   760                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   761                              <1>     ;   terminating char (\, / or Null)
   762                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   763                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   764 000015F7 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   765 000015FD 753D                <1>     jnz .prepDirJoin
   766 000015FF 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   767 00001605 7556                <1>     jnz .prepDirSubst
   768                              <1> .prepMain:
   769                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   770 00001607 F605(DFC60300)FF    <1>     test byte [spliceFlag], -1
   771 0000160E 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   772                              <1>     ;Else we copy the first two chars only (X:)
   773 00001610 66A5                <1>     movsw  
   774 00001612 B05C                <1>     mov al, "\"
   775 00001614 AA                  <1>     stosb   ;Store the path separator and increment rdi
   776 00001615 31C0                <1>     xor eax, eax    ;Get cluster 0
   777 00001617 EB1B                <1>     jmp short .prepDirExitSkip
   778                              <1> .prepLoop:
   779 00001619 AC                  <1>     lodsb
   780 0000161A 84C0                <1>     test al, al ;If al was null, then we stop
   781 0000161C 7403                <1>     jz .prepDirExit
   782 0000161E AA                  <1>     stosb
   783 0000161F EBF8                <1>     jmp short .prepLoop
   784                              <1> .prepDirExit:
   785 00001621 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   786 00001625 7403                <1>     je .prepDirExitSkipPathsep
   787 00001627 B05C                <1>     mov al, "\"
   788 00001629 AA                  <1>     stosb   ;Store the path separator and increment rdi
   789                              <1> .prepDirExitSkipPathsep:
   790 0000162A 488B35(F0C60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   791 00001631 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   792                              <1> .prepDirExitSkip:
   793 00001634 E837000000          <1>     call .prepSetupDirSearchVars
   794 00001639 F8                  <1>     clc ;Clear carry before exiting
   795                              <1> .badDriveExit:
   796 0000163A 5E                  <1>     pop rsi
   797                              <1>     return
    18                              <2> %%_ret:
    19 0000163B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   798                              <1> .prepDirJoin:
   799 0000163C 51                  <1>     push rcx
   800 0000163D 56                  <1>     push rsi
   801 0000163E 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   802 00001645 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   803                              <1> .prepDirJoin1:
   804 0000164A AC                  <1>     lodsb   ;Get the char
   805 0000164B 84C0                <1>     test al, al ;Null char?
   806 0000164D 740B                <1>     jz .prepDirJoin2
   807 0000164F E85C470000          <1>     call swapPathSeparator
   808 00001654 7404                <1>     jz .prepDirJoin2
   809 00001656 FFC1                <1>     inc ecx ;Accrue length to copy
   810 00001658 EBF0                <1>     jmp short .prepDirJoin1
   811                              <1> .prepDirJoin2:
   812 0000165A 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   813 0000165B EB05                <1>     jmp short .prepDirCopy1
   814                              <1> .prepDirSubst:
   815 0000165D 51                  <1>     push rcx
   816 0000165E 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   817                              <1> .prepDirCopy1:
   818 00001662 F3A4                <1>     rep movsb   ;Copy the string over
   819 00001664 59                  <1>     pop rcx
   820 00001665 F605(DFC60300)FF    <1>     test byte [spliceFlag], -1
   821 0000166C 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   822 0000166E EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   823                              <1> .prepSetupDirSearchVars:
   824                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   825                              <1> ;       rbp = DPB pointer for the device which will do transaction
   826 00001670 51                  <1>     push rcx
   827 00001671 31C9                <1>     xor ecx, ecx
   828 00001673 66890D(66C70300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   829 0000167A 890D(68C70300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   830 00001680 E8B9F5FFFF          <1>     call getFATtype ;Get type of fat
   831 00001685 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   832 0000168B 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   833                              <1>     ;FAT 32 here
   834 0000168D 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   835 0000168F 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   836 00001691 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   837                              <1> .psdsvExit:
   838 00001694 8905(62C70300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   839 0000169A 8905(5EC70300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   840 000016A0 59                  <1>     pop rcx
   841                              <1>     return 
    18                              <2> %%_ret:
    19 000016A1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   842                              <1> 
   843                              <1> copyPathspec:
   844                              <1> ;1) Copies a path portion from the source buffer to the destination
   845                              <1> ;2) Advances rsi to the next null, \ or /
   846                              <1> ;3) Expands all * to ?'s
   847                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   848                              <1> ;    next path separator and rdi pointing to the previous pathsep
   849                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   850                              <1> ;    with rsi moving to path separator
   851                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   852                              <1> ;
   853                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   854                              <1> ;           rdi = Points to where to store it
   855                              <1> ;
   856                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   857                              <1> ;           rdi = First char of next space to store next pathspec
   858                              <1> ;           al = Last char stored (either \ or NULL)
   859                              <1> ;           CF=NC = OK path
   860                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   861                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   862 000016A2 57                  <1>     push rdi    ;Save the pointer into the user buffer
   863 000016A3 C605(6FC40300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   864 000016AA 488D3D(B7C60300)    <1>     lea rdi, fcbName
   865 000016B1 57                  <1>     push rdi
   866 000016B2 B903000000          <1>     mov ecx, 3
   867 000016B7 B820202020          <1>     mov eax, "    " ;Four spaces
   868 000016BC F3AB                <1>     rep stosd   ;Store 12 spaces
   869 000016BE 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   870                              <1> 
   871 000016BF 488D1D(C2C60300)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   872 000016C6 AC                  <1>     lodsb   ;Get first char from user path in al
   873 000016C7 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   874 000016C9 745B                <1>     je .cpsDots
   875 000016CB 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   876                              <1> ;First char is not a dot, so now check if starts with E5h? 
   877                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   878 000016CE 3CE5                <1>     cmp al, 0E5h
   879 000016D0 7506                <1>     jne .cpsMainLoop
   880 000016D2 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   881 000016D5 B005                <1>     mov al, 05h
   882 000016D7 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   883                              <1> .cpsMainLoop:
   884 000016D8 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   885 000016D9 84C0                <1>     test al, al ;Is it the null char?
   886 000016DB 7471                <1>     jz .cpsStore  ;If so, terminate immediately
   887 000016DD E8CE460000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   888 000016E2 746A                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   889 000016E4 3C2E                <1>     cmp al, "." ;Filename extension separator
   890 000016E6 7420                <1>     je .cpsExtension
   891                              <1>     ;If we have space in the filename, we check to see if the next char is *
   892 000016E8 3C2A                <1>     cmp al, "*" ;Wildcard?
   893 000016EA 7430                <1>     je .cpsWildcard
   894 000016EC 3C3F                <1>     cmp al, "?" ;Good wildcard?
   895 000016EE 740C                <1>     je .store
   896 000016F0 E8C7460000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   897 000016F5 E8F8470000          <1>     call checkCharValid ; and check it is a valid char
   898 000016FA 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   899                              <1> .store:
   900 000016FC 4839DF              <1>     cmp rdi, rbx
   901 000016FF 742D                <1>     je .cpsProcessName ;Skip any non-terminating chars
   902 00001701 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   903 00001702 EBD4                <1>     jmp short .cpsMainLoop
   904                              <1> .cpsInvalidChar:
   905 00001704 30C0                <1>     xor al, al
   906 00001706 EB26                <1>     jmp short .cpsProcessName
   907                              <1> .cpsExtension:
   908                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   909 00001708 B903000000          <1>     mov ecx, 3 
   910 0000170D 488D3D(BFC60300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   911 00001714 57                  <1>     push rdi
   912 00001715 B020                <1>     mov al, " "
   913 00001717 F3AA                <1>     rep stosb
   914 00001719 5F                  <1>     pop rdi
   915 0000171A EBBC                <1>     jmp short .cpsMainLoop
   916                              <1> .cpsWildcard:
   917 0000171C B03F                <1>     mov al, "?"
   918                              <1> .cpsWildcardLp:
   919 0000171E AA                  <1>     stosb
   920 0000171F 4839DF              <1>     cmp rdi, rbx
   921 00001722 75FA                <1>     jne .cpsWildcardLp
   922 00001724 EBB2                <1>     jmp short .cpsMainLoop
   923                              <1> 
   924                              <1> .cpsDots:
   925 00001726 AA                  <1>     stosb   ;Store the first dot
   926 00001727 8A06                <1>     mov al, byte [rsi]
   927 00001729 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   928 0000172B 752B                <1>     jne .oneDotResolve
   929 0000172D A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   930                              <1> 
   931                              <1> .cpsProcessName:
   932                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   933 0000172E 84C0                <1>     test al, al 
   934 00001730 741C                <1>     jz .cpsStore
   935 00001732 E879460000          <1>     call swapPathSeparator
   936 00001737 7415                <1>     jz .cpsStore
   937                              <1> .cpsFindTerminator:
   938 00001739 AC                  <1>     lodsb
   939 0000173A 84C0                <1>     test al, al 
   940 0000173C 7410                <1>     jz .cpsStore
   941 0000173E E86D460000          <1>     call swapPathSeparator
   942 00001743 7409                <1>     jz .cpsStore
   943 00001745 E8A8470000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   944 0000174A 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   945                              <1>     ;If we encounter a terminator, convert to 0
   946 0000174C 30C0                <1>     xor al, al
   947                              <1> .cpsStore:
   948 0000174E 488D3D(C2C60300)    <1>     lea rdi, fcbName+11
   949 00001755 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   950 00001756 5F                  <1>     pop rdi
   951                              <1>     return
    18                              <2> %%_ret:
    19 00001757 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   952                              <1> .oneDotResolve:
   953 00001758 488D3D(C2C60300)    <1>     lea rdi, fcbName+11
   954 0000175F AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   955 00001760 5F                  <1>     pop rdi ;rdi points to fresh space
   956 00001761 48FFCF              <1>     dec rdi ;Point to the previous path separator
   957 00001764 AA                  <1>     stosb   ;Store this separator as if it is what we had before
   958                              <1>     return
    18                              <2> %%_ret:
    19 00001765 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   959                              <1> .cpsBadChar:
   960 00001766 30C0                <1>     xor al, al  ;Convert the char to a terminator
   961                              <1>     return
    18                              <2> %%_ret:
    19 00001768 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   962                              <1> 
   963                              <1> searchForPathspec:
   964                              <1>     ;Now search the current directory for this filename
   965                              <1>     ;Find first using SDA ffBlock
   966                              <1>     ;If al = 0, we have final file name or directory name
   967                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   968                              <1>     ;Output: CF=CY => Error occured
   969                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   970                              <1>     ;                 FF block somewhat setup
   971                              <1>     ;Preserves rax, rbx, rsi,  rdi
   972 00001769 50                  <1>     push rax
   973 0000176A 53                  <1>     push rbx
   974 0000176B 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   975 0000176C 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   976 0000176D 0FB61D(4BC40300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   977 00001774 53                  <1>     push rbx    ;and push it onto the stack
   978                              <1> ;Evaluate whether we are searching for a file for a directory
   979 00001775 84C0                <1>     test al, al
   980 00001777 741D                <1>     jz .sfpPNfile
   981                              <1>     ;Fall if subdir
   982 00001779 488D3D(B7C60300)    <1>     lea rdi, fcbName
   983 00001780 B03F                <1>     mov al, "?" ;Search for wildcard
   984 00001782 B90B000000          <1>     mov ecx, 11
   985 00001787 F2AE                <1>     repne scasb
   986 00001789 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   987 0000178B B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   988 0000178D C605(4BC40300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   989 00001794 EB07                <1>     jmp short .sfpPNMain
   990                              <1> .sfpPNfile:
   991                              <1>     ;Here if we are searching for a file or directory as setup by search init
   992 00001796 0FB605(DAC60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   993                              <1> .sfpPNMain:
   994 0000179D 803D(10C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   995 000017A4 7405                <1>     je .sfpPNNoDisk
   996 000017A6 E83BF9FFFF          <1>     call searchDir
   997                              <1> .sfpPNNoDisk:
   998 000017AB 5B                  <1>     pop rbx
   999 000017AC 881D(4BC40300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1000 000017B2 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1001 000017B3 5E                  <1>     pop rsi
  1002 000017B4 5B                  <1>     pop rbx
  1003 000017B5 58                  <1>     pop rax
  1004                              <1>     return
    18                              <2> %%_ret:
    19 000017B6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1005                              <1> .sfpPnf:
  1006 000017B7 B803000000          <1>     mov eax, errPnf
  1007                              <1> .sfpErrExit:
  1008 000017BC F9                  <1>     stc ;Set carry
  1009 000017BD EBEC                <1>     jmp short .sfpPNNoDisk
  1010                              <1> 
  1011                              <1> addPathspecToBuffer:
  1012                              <1> ;Input: fcbName = Qualified pathname portion
  1013                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1014                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1015                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1016                              <1> ;rbx points to the "head of the path"
  1017 000017BF F605(10C60300)FF    <1>     test byte [skipDisk], -1
  1018                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017C6 75EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1019 000017C8 803D(B7C60300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1020 000017CF 741F                <1>     je .aptbPNDots
  1021                              <1>     ;Copy filename over to internal buffer
  1022 000017D1 56                  <1>     push rsi    ;Save source pointer position
  1023 000017D2 488D35(B7C60300)    <1>     lea rsi, fcbName
  1024 000017D9 E8FEFAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1025 000017DE 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1026 000017E1 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1027                              <1> .aptbOkExit:
  1028 000017E2 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1029 000017E5 E8C6450000          <1>     call swapPathSeparator
  1030 000017EA 7402                <1>     jz .aptbPNexit
  1031 000017EC 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1032                              <1> .aptbPNexit:
  1033 000017EE AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1034                              <1>     return
    18                              <2> %%_ret:
    19 000017EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1035                              <1> .aptbPNDots:
  1036                              <1> ;For one dot, we leave rdi where it is
  1037                              <1> ;For two dots, we search backwards for the previous "\"
  1038 000017F0 803D(B8C60300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1039 000017F7 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1040 000017F8 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1041                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017FB 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1042                              <1>     ;Here we have two dots
  1043                              <1>     ;Walk rdi backwards until a \ is found
  1044 000017FD 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1045 00001800 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1046 00001806 7420                <1>     je .aptbPnf
  1047 00001808 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1048 0000180E 7418                <1>     je .aptbPnf
  1049                              <1> .aptbPNDotsLp:
  1050 00001810 48FFCF              <1>     dec rdi
  1051 00001813 803F5C              <1>     cmp byte [rdi], "\"
  1052 00001816 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1053                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1054 00001818 803D(10C60300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1055 0000181F 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1056 00001821 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1057 00001824 7202                <1>     jb .aptbPnf
  1058 00001826 EBBA                <1>     jmp short .aptbOkExit
  1059                              <1> ;.aptbSearchError:
  1060                              <1> ;    mov eax, errFnf
  1061                              <1> ;    jmp short .aptbErrExit
  1062                              <1> .aptbPnf:
  1063 00001828 B803000000          <1>     mov eax, errPnf
  1064                              <1> .aptbErrExit:
  1065 0000182D F9                  <1>     stc ;Set carry
  1066                              <1>     return
    18                              <2> %%_ret:
    19 0000182E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1067                              <1> 
  1068                              <1> checkDevPath:
  1069                              <1> ;Called only if the file/directory was not found on disk.
  1070                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1071                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1072                              <1> ; and check to see if it is a char device. If it is, build a directory
  1073                              <1> ; If it is not, proceed with the request fail.
  1074                              <1> ;
  1075                              <1> ;Input: rsi = Pointer to the next path spec
  1076                              <1> ;Output: CF=NC => Char device found, directory built
  1077                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1078 0000182F 803D(10C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1079                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001836 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1080 00001838 803D(C2C60300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1081 0000183F 7459                <1>     je .notOk                      
  1082                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1083 00001841 50                  <1>     push rax
  1084 00001842 48B844455620202020- <1>     mov rax, "DEV     "
  1084 0000184B 20                  <1>
  1085 0000184C 483905(B7C60300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1086 00001853 58                  <1>     pop rax
  1087 00001854 7544                <1>     jne .notOk
  1088 00001856 813D(BFC60300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1088 0000185E 205C                <1>
  1089 00001860 7538                <1>     jne .notOk
  1090                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1091                              <1>     ; looking for a device driver
  1092                              <1>     ;First append it to rdi 
  1093 00001862 B84445565C          <1>     mov eax, "DEV\" 
  1094 00001867 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1095 00001868 57                  <1>     push rdi
  1096 00001869 488D3D(B7C60300)    <1>     lea rdi, fcbName
  1097 00001870 E81FFAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1098                              <1>     ;Returns in al the terminating char of the source string
  1099 00001875 5F                  <1>     pop rdi
  1100                              <1>     ;If al is a pathsep, fail
  1101 00001876 E835450000          <1>     call swapPathSeparator
  1102 0000187B 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1103 0000187D 30C0                <1>     xor al, al
  1104 0000187F 8805(C2C60300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1105 00001885 53                  <1>     push rbx
  1106 00001886 E844000000          <1>     call checkIfCharDevice
  1107 0000188B 5B                  <1>     pop rbx ;Don't need bh yet
  1108 0000188C 720C                <1>     jc .notOk
  1109 0000188E E86D000000          <1>     call buildCharDir
  1110                              <1>     ;Here the device was determined to be a char device.
  1111                              <1>     ;A dummy directory entry was built for it.
  1112                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1113                              <1>     ; Do not Find Next!
  1114                              <1> .copyName:
  1115 00001893 E844FAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1116 00001898 F8                  <1>     clc
  1117                              <1>     return
    18                              <2> %%_ret:
    19 00001899 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1118                              <1> .notOk:
  1119 0000189A B802000000          <1>     mov eax, errFnf
  1120 0000189F F9                  <1>     stc
  1121                              <1>     return
    18                              <2> %%_ret:
    19 000018A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1122                              <1> .charDevSearch:
  1123 000018A1 53                  <1>     push rbx
  1124 000018A2 E828000000          <1>     call checkIfCharDevice
  1125 000018A7 5B                  <1>     pop rbx ;Dont need bh yet
  1126 000018A8 72F0                <1>     jc .notOk
  1127 000018AA E851000000          <1>     call buildCharDir
  1128 000018AF 803D(C2C60300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1129 000018B6 750C                <1>     jne .cds2
  1130 000018B8 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1131 000018BC 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1132 000018BE 48FFCF              <1>     dec rdi
  1133 000018C1 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1134 000018C3 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1135                              <1> .cds2:
  1136 000018C4 803D(10C60300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1137 000018CB 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1138 000018CD F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1139                              <1>     return
    18                              <2> %%_ret:
    19 000018CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1140                              <1> 
  1141                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1142                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1143                              <1> ; device driver chain. 
  1144                              <1> ;Output: CF=CY if not found
  1145                              <1> ;        CF=NC if found
  1146                              <1> ;           BH = Low byte of the device attribute word
  1147 000018CF 50                  <1>     push rax
  1148 000018D0 57                  <1>     push rdi
  1149 000018D1 488B05(B7C60300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1150 000018D8 488D3D(7EC00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1151                              <1> .checkName:
  1152 000018DF 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1153 000018E3 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1154 000018E5 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1155 000018E8 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1156 000018EA 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1157 000018EE 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1158                              <1> .walkList:
  1159 000018F0 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1160 000018F3 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1161 000018FA 75E3                <1>     jne .checkName  ;If no, rdi points to char device
  1162 000018FC F9                  <1>     stc
  1163                              <1> .exit:
  1164 000018FD 5F                  <1>     pop rdi
  1165 000018FE 58                  <1>     pop rax
  1166                              <1>     return
    18                              <2> %%_ret:
    19 000018FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1167                              <1> 
  1168                              <1> buildCharDir:
  1169                              <1> ;Build a dummy directory entry for the char device in FCBName
  1170                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1171 00001900 803D(10C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1172                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001907 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1173 00001909 50                  <1>     push rax
  1174 0000190A 57                  <1>     push rdi
  1175 0000190B C605(C2C60300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1176 00001912 488D3D(3CC60300)    <1>     lea rdi, curDirCopy
  1177                              <1>     ;Zero the directory copy (32 bytes)
  1178 00001919 50                  <1>     push rax
  1179 0000191A 51                  <1>     push rcx
  1180 0000191B 57                  <1>     push rdi
  1181 0000191C 31C0                <1>     xor eax, eax    ;Zero rax
  1182 0000191E B904000000          <1>     mov ecx, 4
  1183 00001923 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1184 00001926 5F                  <1>     pop rdi
  1185 00001927 59                  <1>     pop rcx
  1186 00001928 58                  <1>     pop rax
  1187 00001929 488B05(B7C60300)    <1>     mov rax, qword [fcbName]
  1188 00001930 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1189 00001933 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1190 00001938 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1191 0000193B C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1192                              <1>     ;Get date and time and set the write time in the directory entry
  1193 0000193F E816110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1194 00001944 E8FC110000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1195 00001949 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1196 0000194C 31C0                <1>     xor eax, eax
  1197 0000194E 5F                  <1>     pop rdi
  1198 0000194F 58                  <1>     pop rax
  1199                              <1>     return
    18                              <2> %%_ret:
    19 00001950 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1200                              <1> 
  1201                              <1> checkFailingComp:
  1202                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1203                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1204                              <1> ;Returns: ZF=ZE => Last path componant
  1205                              <1> ;         ZF=NZ => Not last path componant
  1206 00001951 50                  <1>     push rax
  1207 00001952 8A05(C2C60300)      <1>     mov al, byte [fcbName + 11]
  1208 00001958 84C0                <1>     test al, al
  1209 0000195A 58                  <1>     pop rax
  1210                              <1>     return
    18                              <2> %%_ret:
    19 0000195B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FAT/dirfun.asm"
    27                              <1> ;---------------------------------------------------:
    28                              <1> ;                   KERNEL FUNCTIONS                :
    29                              <1> ;---------------------------------------------------:
    30                              <1> makeDIR:           ;ah = 39h
    31                              <1> ;For make, the path must exist but the final componant must not exist.
    32                              <1> ;Input: rdx = Pointer to ASCIIZ string
    33 0000195C 4889D7              <1>     mov rdi, rdx
    34 0000195F E87F440000          <1>     call strlen
    35 00001964 81F940000000        <1>     cmp ecx, 64
    36 0000196A 7607                <1>     jbe .okLength
    37                              <1> .badPath:
    38 0000196C B003                <1>     mov al, errPnf
    39 0000196E E9C0470000          <1>     jmp extErrExit
    40                              <1> .okLength:
    41 00001973 4889D6              <1>     mov rsi, rdx
    42 00001976 E8D2440000          <1>     call checkPathspecOK
    43 0000197B 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    44                              <1> .pathOk:
    45 0000197D E85D450000          <1>     call scanPathWC
    46 00001982 72E8                <1>     jc .badPath ;Dont allow wildcards
    47                              <1>     ;Path is ok, now proceed
    48 00001984 488D3D(00C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    49 0000198B E862FAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    50                              <1>     ;If the path exists, exit error
    51 00001990 0F839D470000        <1>     jnc extErrExit
    52                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    53 00001996 E8B6FFFFFF          <1>     call checkFailingComp
    54 0000199B 0F8592470000        <1>     jnz extErrExit
    55                              <1>     ;So all is well, the new subdirectories name is in fcbName
    56                              <1>     ;The parent dir's directory entry is in the curDirCopy
    57 000019A1 E883420000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    58                              <1>     ;returns in rdi the working cds ptr
    59 000019A6 7312                <1>     jnc .notNet
    60 000019A8 B803110000          <1>     mov eax, 1103h
    61 000019AD CD4F                <1>     int 4fh
    62 000019AF 0F827E470000        <1>     jc extErrExit
    63 000019B5 E96B470000          <1>     jmp extGoodExit
    64                              <1> .notNet:
    65 000019BA E829470000          <1>     call dosCrit1Enter
    66                              <1>     ;Current dpb ptr is already set
    67                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    68                              <1>     ;First we make a dummy dir in curDirCopy
    69 000019BF 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
    70 000019C6 488D35(B7C60300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    71 000019CD 488D3D(3CC60300)    <1>     lea rdi, curDirCopy
    72 000019D4 48A5                <1>     movsq   ;Copy the name over
    73 000019D6 A5                  <1>     movsd
    74 000019D7 E87E100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    75 000019DC E864110000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    76 000019E1 8905(4AC60300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    77 000019E7 8905(52C60300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    78 000019ED 31C0                <1>     xor eax, eax
    79 000019EF 8905(58C60300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    80 000019F5 C605(47C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    81 000019FC 8B05(5EC70300)      <1>     mov eax, dword [dirClustPar]
    82                              <1> .searchForDirSpace:
    83 00001A02 8905(62C70300)      <1>     mov dword [dirClustA], eax
    84 00001A08 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    85 00001A0A 668905(66C70300)    <1>     mov word [dirSect], ax
    86 00001A11 8905(68C70300)      <1>     mov dword [dirEntry], eax
    87 00001A17 E8BD040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    88 00001A1C 7328                <1>     jnc .dirEntryFnd
    89 00001A1E 813D(5EC70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    89 00001A26 0000                <1>
    90 00001A28 0F844A010000        <1>     je .bad ;Set CF and exit
    91 00001A2E E8E2050000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    92 00001A33 0F823F010000        <1>     jc .bad
    93 00001A39 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    94 00001A3E 0F8434010000        <1>     je .bad
    95                              <1>     ;Else eax = Newly allocated cluster
    96 00001A44 EBBC                <1>     jmp short .searchForDirSpace
    97                              <1> .dirEntryFnd:
    98                              <1> ;rdi points to current directory copy
    99                              <1> ;rsi now points to offset in the buffer to write the entry to
   100                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   101 00001A46 488B1D(1CC70300)    <1>     mov rbx, qword [currBuff]
   102 00001A4D 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   103                              <1>      
   104 00001A51 488905(24C70300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   105 00001A58 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   106 00001A5F 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   107 00001A62 668935(2CC70300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   108                              <1> ;Must now request a cluster and sanitise it
   109 00001A69 E8B8F2FFFF          <1>     call startNewChain  ;Get cluster number in eax
   110 00001A6E 0F8209010000        <1>     jc .badExit
   111 00001A74 E8CF050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   112 00001A79 0F82FE000000        <1>     jc .badExit
   113                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   114 00001A7F 668905(56C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   115 00001A86 C1E810              <1>     shr eax, 10h    ;Get high word low
   116 00001A89 668905(50C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   117 00001A90 488B05(24C70300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   118 00001A97 E8F2F0FFFF          <1>     call getBufForDirNoFile
   119 00001A9C 0F82DB000000        <1>     jc .badExit
   120 00001AA2 0FB705(2CC70300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   121 00001AA9 488D35(3CC60300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   122 00001AB0 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   123 00001AB5 B904000000          <1>     mov ecx, 4
   124 00001ABA F348A5              <1>     rep movsq   ;Copy over the buffered directory
   125 00001ABD E841EFFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   126                              <1>     ;Now need to read in data sector and make two entries . and ..
   127 00001AC2 57                  <1>     push rdi
   128 00001AC3 51                  <1>     push rcx
   129 00001AC4 B90B000000          <1>     mov ecx, 11
   130 00001AC9 488D3D(3CC60300)    <1>     lea rdi, curDirCopy
   131 00001AD0 B020                <1>     mov al, " "
   132 00001AD2 F3AA                <1>     rep stosb
   133 00001AD4 59                  <1>     pop rcx
   134 00001AD5 5F                  <1>     pop rdi
   135 00001AD6 48B82E000000000000- <1>     mov rax, "."
   135 00001ADF 00                  <1>
   136 00001AE0 8805(3CC60300)      <1>     mov byte [curDirCopy], al
   137 00001AE6 0FB705(56C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   138 00001AED 0FB715(50C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   139 00001AF4 C605(47C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   140 00001AFB C1E210              <1>     shl edx, 10h
   141 00001AFE 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   142 00001B00 E8A7F1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   143 00001B05 E884F0FFFF          <1>     call getBufForDirNoFile
   144 00001B0A 7271                <1>     jc .badExit
   145                              <1>     ;rbx has buffer pointer now
   146 00001B0C 488D35(3CC60300)    <1>     lea rsi, curDirCopy
   147 00001B13 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   148 00001B17 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   149 00001B1C F348A5              <1>     rep movsq
   150                              <1>     ;Now create .. entry
   151 00001B1F C605(3DC60300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   152 00001B26 8B05(5EC70300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   153 00001B2C E80DF1FFFF          <1>     call getFATtype
   154 00001B31 81F902000000        <1>     cmp ecx, 2
   155 00001B37 7207                <1>     jb .notFAT32
   156 00001B39 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   157 00001B3C 7502                <1>     jne .notFAT32
   158 00001B3E 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   159                              <1> .notFAT32:
   160 00001B40 668905(56C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   161 00001B47 C1E810              <1>     shr eax, 10h
   162 00001B4A 668905(50C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   163 00001B51 488D35(3CC60300)    <1>     lea rsi, curDirCopy
   164 00001B58 B904000000          <1>     mov ecx, 4
   165 00001B5D F348A5              <1>     rep movsq
   166 00001B60 E89EEEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   167 00001B65 E867EEFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   168 00001B6A 7211                <1>     jc .badExit
   169                              <1> .okExit:
   170                              <1>     ;AND WE ARE DONE!
   171 00001B6C E881450000          <1>     call dosCrit1Exit
   172 00001B71 31C0                <1>     xor eax, eax
   173 00001B73 E9AD450000          <1>     jmp extGoodExit
   174                              <1> .bad:
   175 00001B78 B805000000          <1>     mov eax, errAccDen
   176                              <1> .badExit:
   177 00001B7D E82DEEFFFF          <1>     call cancelWriteThroughBuffers
   178 00001B82 E86B450000          <1>     call dosCrit1Exit
   179 00001B87 E9A7450000          <1>     jmp extErrExit
   180                              <1> 
   181                              <1> removeDIR:         ;ah = 3Ah
   182 00001B8C 4889D7              <1>     mov rdi, rdx
   183 00001B8F E84F420000          <1>     call strlen
   184 00001B94 81F940000000        <1>     cmp ecx, 64
   185 00001B9A 7607                <1>     jbe .okLength
   186                              <1> .badPath:
   187 00001B9C B003                <1>     mov al, errPnf
   188 00001B9E E990450000          <1>     jmp extErrExit
   189                              <1> .okLength:
   190 00001BA3 4889D6              <1>     mov rsi, rdx
   191 00001BA6 E8A2420000          <1>     call checkPathspecOK
   192 00001BAB 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   193                              <1> .pathOk:
   194 00001BAD E82D430000          <1>     call scanPathWC
   195 00001BB2 72E8                <1>     jc .badPath ;Dont allow wildcards
   196                              <1>     ;Path is ok, now proceed
   197 00001BB4 488D3D(00C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   198 00001BBB E832F8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   199 00001BC0 72DA                <1>     jc .badPath    ;Path Doesn't exist
   200 00001BC2 E862400000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   201 00001BC7 7312                <1>     jnc .notNet
   202 00001BC9 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   203 00001BCE CD4F                <1>     int 4fh
   204 00001BD0 0F825D450000        <1>     jc extErrExit
   205 00001BD6 E94A450000          <1>     jmp extGoodExit
   206                              <1> .notNet:
   207 00001BDB E808450000          <1>     call dosCrit1Enter
   208 00001BE0 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
   209                              <1>     ;Now let use check that our directory is not the CDS currentdir
   210 00001BE7 488B35(F0C60300)    <1>     mov rsi, qword [workingCDS]
   211 00001BEE 488D3D(00C50300)    <1>     lea rdi, buffer1
   212 00001BF5 E8E9410000          <1>     call strlen ;Get the length of the full qualified name in ecx
   213 00001BFA 66890D(2CC70300)    <1>     mov word [pathLen], cx
   214 00001C01 E8F4410000          <1>     call strcmp ;Then compare rdi to CDS string
   215 00001C06 750F                <1>     jnz .notEqual
   216 00001C08 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   217 00001C0D E8E0440000          <1>     call dosCrit1Exit
   218 00001C12 E91C450000          <1>     jmp extErrExit
   219                              <1> .notEqual:
   220 00001C17 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   221                              <1>     ;If the given path length is one more than the backslash offset
   222                              <1>     ; due to the terminating null, then the user is trying to delete the 
   223                              <1>     ; root dir. Fail this.
   224 00001C1A 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   225 00001C1E FFC1                <1>     inc ecx
   226 00001C20 663B0D(2CC70300)    <1>     cmp cx, word [pathLen]
   227 00001C27 0F841C010000        <1>     je .accessDenied
   228 00001C2D E8BB020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   229                              <1>     ;for the entry in the sector we are hoping to delete
   230 00001C32 0FB705(50C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   231 00001C39 C1E010              <1>     shl eax, 10h
   232 00001C3C 0FB71D(56C60300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   233 00001C43 09D8                <1>     or eax, ebx
   234 00001C45 8905(5EC70300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   235 00001C4B E85CF0FFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   236 00001C50 E839EFFFFF          <1>     call getBufForDirNoFile
   237 00001C55 0F82F3000000        <1>     jc .exitBad
   238                              <1>     ;rbx points to buffer
   239 00001C5B 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   240 00001C5F 48B82E202020202020- <1>     mov rax, ".       "
   240 00001C68 20                  <1>
   241 00001C69 483906              <1>     cmp qword [rsi], rax
   242 00001C6C 0F85D7000000        <1>     jne .accessDenied
   243 00001C72 B42E                <1>     mov ah, "." ;Screw the partial stall
   244 00001C74 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   245 00001C78 0F85CB000000        <1>     jne .accessDenied
   246 00001C7E 4881C620000000      <1>     add rsi, fatDirEntry_size
   247 00001C85 488D3D(3CC60300)    <1>     lea rdi, curDirCopy
   248 00001C8C B904000000          <1>     mov ecx, 4
   249 00001C91 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   250                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   251                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   252 00001C94 488D3D(B7C60300)    <1>     lea rdi, fcbName
   253 00001C9B B03F                <1>     mov al, "?"
   254 00001C9D B90B000000          <1>     mov ecx, 11
   255 00001CA2 F3AA                <1>     rep stosb   ;Store the pattern to search for
   256 00001CA4 30C0                <1>     xor al, al  ;Store a terminating zero
   257 00001CA6 AA                  <1>     stosb
   258 00001CA7 8B05(5EC70300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   259 00001CAD 50                  <1>     push rax    ;Save on stack temporarily
   260 00001CAE 8905(62C70300)      <1>     mov dword [dirClustA], eax
   261 00001CB4 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   262 00001CB6 668905(66C70300)    <1>     mov word [dirSect], ax
   263 00001CBD C705(68C70300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   263 00001CC5 0000                <1>
   264 00001CC7 C605(DAC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   265 00001CCE 58                  <1>     pop rax
   266 00001CCF E8D8EFFFFF          <1>     call getStartSectorOfCluster
   267 00001CD4 E8D7EEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   268 00001CD9 7273                <1>     jc .exitBad
   269 00001CDB E8E6F4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   270 00001CE0 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   271 00001CE7 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   272 00001CED E831F4FFFF          <1>     call searchDir.rmdirEP
   273 00001CF2 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   274                              <1>     ;Else, this is a empty dir, we can remove it
   275                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   276 00001CF4 488B05(24C70300)    <1>     mov rax, qword [tempSect]
   277 00001CFB E8B0EEFFFF          <1>     call getBufForDOS
   278 00001D00 724C                <1>     jc .exitBad
   279 00001D02 E8BFF4FFFF          <1>     call adjustDosDirBuffer
   280 00001D07 0FB705(2CC70300)    <1>     movzx eax, word [entry]
   281 00001D0E 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   282 00001D12 4801C6              <1>     add rsi, rax    
   283 00001D15 8A05(E6C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   284 00001D1B 8806                <1>     mov byte [rsi], al  ;Store delchar there
   285 00001D1D 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   286 00001D21 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   287 00001D25 E8D9ECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   288 00001D2A C1E210              <1>     shl edx, 10h
   289 00001D2D 09D0                <1>     or eax, edx
   290                              <1>     ;Now remove the FAT chain
   291 00001D2F E81CF1FFFF          <1>     call unlinkFAT
   292 00001D34 7218                <1>     jc .exitBad
   293 00001D36 E896ECFFFF          <1>     call writeThroughBuffers
   294 00001D3B 7211                <1>     jc .exitBad
   295 00001D3D E8B0430000          <1>     call dosCrit1Exit
   296 00001D42 31C0                <1>     xor eax, eax
   297 00001D44 E9DC430000          <1>     jmp extGoodExit
   298                              <1> .accessDenied:
   299 00001D49 B805000000          <1>     mov eax, errAccDen
   300                              <1> .exitBad:
   301 00001D4E E85CECFFFF          <1>     call cancelWriteThroughBuffers
   302 00001D53 F9                  <1>     stc
   303 00001D54 E899430000          <1>     call dosCrit1Exit
   304 00001D59 E9D5430000          <1>     jmp extErrExit
   305                              <1> 
   306                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   307                              <1> ;Input: rdx = Pointer to ASCIIZ string
   308 00001D5E 4889D7              <1>     mov rdi, rdx
   309 00001D61 E87D400000          <1>     call strlen
   310 00001D66 81F940000000        <1>     cmp ecx, 64
   311 00001D6C 7607                <1>     jbe .okLength
   312                              <1> .badPath:
   313 00001D6E B003                <1>     mov al, errPnf
   314 00001D70 E9BE430000          <1>     jmp extErrExit
   315                              <1> .okLength:
   316 00001D75 4889D6              <1>     mov rsi, rdx
   317 00001D78 E8D0400000          <1>     call checkPathspecOK
   318 00001D7D 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   319 00001D7F E8AF410000          <1>     call checkPathNet
   320 00001D84 74E8                <1>     jz .badPath ;Or Net paths
   321                              <1>     ;Path is ok, now proceed
   322 00001D86 488D3D(00C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   323 00001D8D E860F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   324 00001D92 0F829B430000        <1>     jc extErrExit   ;Exit with error code in eax
   325                              <1>     ;The path must've been ok, so now copy the path into the CDS
   326                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   327 00001D98 488B35(F0C60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   328 00001D9F 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   329 00001DA5 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   330 00001DA7 488D3D(5CC60300)    <1>     lea rdi, tmpCDS
   331 00001DAE B95B000000          <1>     mov ecx, cds_size
   332 00001DB3 F3A4                <1>     rep movsb
   333                              <1>     ;If the path is longer than 67, call it an invalid path
   334 00001DB5 488D3D(00C50300)    <1>     lea rdi, buffer1
   335 00001DBC E822400000          <1>     call strlen ;Get the length of this path
   336 00001DC1 81F943000000        <1>     cmp ecx, 67
   337 00001DC7 77A5                <1>     ja .badPath
   338 00001DC9 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   339 00001DCC 488D3D(5CC60300)    <1>     lea rdi, tmpCDS
   340 00001DD3 F3A4                <1>     rep movsb   ;Copy the path over
   341                              <1>     ;Now get the start cluster from the directory copy
   342 00001DD5 0FB715(56C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   343 00001DDC 0FB705(50C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   344 00001DE3 C1E010              <1>     shl eax, 10h
   345 00001DE6 09D0                <1>     or eax, edx ;Add low bits to eax
   346 00001DE8 8905(A9C60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   347 00001DEE 488D35(5CC60300)    <1>     lea rsi, tmpCDS
   348 00001DF5 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS]
   349 00001DFC B95B000000          <1>     mov ecx, cds_size
   350 00001E01 E8E2420000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   351 00001E06 F3A4                <1>     rep movsb
   352 00001E08 E8E5420000          <1>     call dosCrit1Exit
   353 00001E0D 31C0                <1>     xor eax, eax
   354 00001E0F E911430000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   355                              <1> .net:
   356                              <1> ;SDA Vars are setup for this request
   357 00001E14 B805110000          <1>     mov eax, 1105h
   358 00001E19 CD4F                <1>     int 4fh
   359 00001E1B 0F8212430000        <1>     jc extErrExit
   360 00001E21 E9FF420000          <1>     jmp extGoodExit
   361                              <1> getCurrentDIR:     ;ah = 47h
   362                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   363                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   364 00001E26 E8BD420000          <1>     call dosCrit1Enter
   365 00001E2B 88D0                <1>     mov al, dl  ;Move drive number into al
   366 00001E2D E8883E0000          <1>     call setDrive ;Set drive variables if it is valid and NOT join
   367 00001E32 730F                <1>     jnc .okDrive
   368                              <1> .badExit:
   369 00001E34 E8B9420000          <1>     call dosCrit1Exit
   370 00001E39 B80F000000          <1>     mov eax, errBadDrv
   371 00001E3E E9F0420000          <1>     jmp extErrExit
   372                              <1> .okDrive:
   373                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   374 00001E43 56                  <1>     push rsi
   375 00001E44 57                  <1>     push rdi
   376 00001E45 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS ptr in rdi
   377 00001E4C E8A43B0000          <1>     call getDiskDPB
   378 00001E51 5F                  <1>     pop rdi
   379 00001E52 5E                  <1>     pop rsi
   380 00001E53 0F82DA420000        <1>     jc extErrExit
   381                              <1>     ;Here, work needs to be done to ensure that the path built is proper
   382 00001E59 4889F7              <1>     mov rdi, rsi    ;Save destination buffer in rdi
   383 00001E5C 488B35(F0C60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   384 00001E63 31C0                <1>     xor eax, eax
   385 00001E65 FFC8                <1>     dec eax
   386 00001E67 39464D              <1>     cmp dword [rsi + cds.dStartCluster], eax    ;StartCluster != -1 is all ok
   387 00001E6A 7516                <1>     jne .writePathInBuffer
   388 00001E6C FFC0                <1>     inc eax
   389 00001E6E 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set to root dir
   390 00001E71 66817E430000        <1>     cmp word [rsi + cds.wFlags], 0  ;Is this a newly deactivated drive?
   391 00001E77 74BB                <1>     je .badExit ;TEMP, ERROR IF SO (WAS A SUBST DRIVE)
   392                              <1>     ;Here we now add a terminating null at wBackslashOffset
   393 00001E79 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   394 00001E7D C644060100          <1>     mov byte [rsi + rax + 1], 0 ;Store a zero just past the backslash
   395                              <1> .writePathInBuffer:
   396 00001E82 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   397 00001E86 FFC0                <1>     inc eax ;Go past the backslash
   398 00001E88 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   399 00001E8B E8623F0000          <1>     call strcpy
   400 00001E90 E85D420000          <1>     call dosCrit1Exit
   401 00001E95 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   402 00001E9A E986420000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   403                              <1> 
   404                              <1> trueName:          ;ah = 60h, get fully qualified name. Int 4Fh, AX=1221h
   405                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   406 00001E9F E8A93F0000          <1>     call checkPathspecOK    ;This preserves rsi
   407 00001EA4 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   408 00001EA6 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   409                              <1> .badPath:
   410 00001EA8 B803000000          <1>     mov eax, errPnf
   411 00001EAD E981420000          <1>     jmp extErrExit
   412                              <1> .pathspecOk:
   413 00001EB2 57                  <1>     push rdi    ;Save the destination
   414 00001EB3 488D3D(00C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   415 00001EBA E8F3F4FFFF          <1>     call canonicaliseFileName
   416 00001EBF 5F                  <1>     pop rdi
   417 00001EC0 0F826D420000        <1>     jc extErrExit
   418 00001EC6 488D35(00C50300)    <1>     lea rsi, buffer1
   419 00001ECD E8203F0000          <1>     call strcpy
   420 00001ED2 31C0                <1>     xor eax, eax
   421 00001ED4 E94C420000          <1>     jmp extGoodExit
   422                              <1> 
   423                              <1> ;-----------------------------------
   424                              <1> ;    General Directory Routines    :
   425                              <1> ;-----------------------------------
   426                              <1> 
   427                              <1> findFreeDiskDirEntry:
   428                              <1> ;Find a space in the directory we are searching for a directory entry
   429                              <1> ;Accept first entry starting with a 0E5h or 00h
   430                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   431                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   432                              <1> ; be called for CDS's that are NOT net CDS's).
   433                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   434                              <1> ;       Directory vars must be set up for the directory we are searching in
   435                              <1> ;Output: CF=CY => Error, eax has error code
   436                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   437 00001ED9 8A05(E6C60300)      <1>     mov al, byte [delChar]
   438 00001EDF 8805(B7C60300)      <1>     mov byte [fcbName], al
   439 00001EE5 E8FCF1FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   440                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001EEA 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001EEC C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   441                              <1> ;Free entry found, dir variables are set for the free entry. 
   442                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   443                              <1> getDiskDirectoryEntry:
   444                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   445                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   446                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   447                              <1> ;        qword [tempSect] = Disk sector number of directory
   448                              <1> ;        word [entry] = 32 byte offset into sector
   449                              <1> ;        CF=CY => Error, exit 
   450 00001EED 53                  <1>     push rbx
   451 00001EEE 8B05(62C70300)      <1>     mov eax, dword [dirClustA]  
   452                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   453                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   454 00001EF4 0FB71D(66C70300)    <1>     movzx ebx, word [dirSect]
   455 00001EFB 85C0                <1>     test eax, eax
   456 00001EFD 7407                <1>     jz .skipCluster
   457 00001EFF E8A8EDFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   458 00001F04 EB0C                <1>     jmp short .skipOldFat
   459                              <1> .skipCluster:
   460 00001F06 55                  <1>     push rbp
   461 00001F07 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
   462 00001F0E 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   463 00001F11 5D                  <1>     pop rbp
   464                              <1> .skipOldFat:
   465 00001F12 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   466 00001F15 488905(24C70300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   467 00001F1C E88FECFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   468 00001F21 5B                  <1>     pop rbx
   469                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F22 72C8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   470 00001F24 53                  <1>     push rbx
   471 00001F25 488B1D(1CC70300)    <1>     mov rbx, qword [currBuff]
   472 00001F2C E895F2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   473                              <1>     ;Above function gets data buffer ptr in rsi
   474 00001F31 0FB705(66C70300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   475 00001F38 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   476 00001F3C F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   477                              <1>     ; the current sector
   478 00001F3E C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   479 00001F41 8B1D(68C70300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   480 00001F47 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   481 00001F49 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   482 00001F4C 66891D(2CC70300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   483 00001F53 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   484 00001F56 5B                  <1>     pop rbx
   485                              <1>     return
    18                              <2> %%_ret:
    19 00001F57 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   486                              <1> 
   487                              <1> 
   488                              <1> updateDirectoryEntryForFile:    
   489                              <1> ;Updates the directory entry for disk files
   490                              <1> ;Called with:
   491                              <1> ;   [workingDPB] = DPB pointer for the disk device
   492                              <1> ;   [currentSFT] = Current SFT pointer
   493 00001F58 50                  <1>     push rax
   494 00001F59 53                  <1>     push rbx
   495 00001F5A 57                  <1>     push rdi
   496 00001F5B 55                  <1>     push rbp
   497                              <1> 
   498 00001F5C E887410000          <1>     call dosCrit1Enter
   499 00001F61 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
   500 00001F68 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
   501 00001F6F 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   502 00001F75 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   503 00001F7B 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   504 00001F81 751B                <1>     jnz .skipDT
   505                              <1>     ;Get date and time words and add them to the directory entry
   506 00001F83 E8D20A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   507                              <1>     ;Build date and time words
   508 00001F88 E8B80B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   509                              <1>     ;Update SFT fields
   510 00001F8D 66894713            <1>     mov word [rdi + sft.wTime], ax
   511 00001F91 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   512 00001F94 66894715            <1>     mov word [rdi + sft.wDate], ax
   513 00001F98 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   514                              <1> .skipDT:
   515                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   516                              <1> ; we skip all of this
   517 00001F9E 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   518 00001FA4 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   519 00001FA6 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   520 00001FAA E80FECFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   521 00001FAF 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   522                              <1>     ;Now we write the changes to the sector
   523                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   524 00001FB1 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   525 00001FB5 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   526 00001FB9 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   527 00001FBC 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   528 00001FBF 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   529 00001FC2 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   530 00001FC5 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   531 00001FC9 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   532 00001FCD 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   533 00001FD1 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   534 00001FD5 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   535 00001FD9 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   536 00001FDC 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   537 00001FE0 C1E810              <1>     shr eax, 10h
   538 00001FE3 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   539                              <1>     ;Directory sector updated and marked to be flushed to disk!
   540 00001FE7 31C0                <1>     xor eax, eax
   541 00001FE9 FF15(12C10300)      <1>     call qword [updateDirShare]
   542 00001FEF F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   543 00001FF0 E80EEAFFFF          <1>     call markBufferDirty
   544 00001FF5 E8D7E9FFFF          <1>     call writeThroughBuffers
   545 00001FFA 720A                <1>     jc .exitBad
   546                              <1> .exit:
   547 00001FFC E8F1400000          <1>     call dosCrit1Exit
   548 00002001 5D                  <1>     pop rbp
   549 00002002 5F                  <1>     pop rdi
   550 00002003 5B                  <1>     pop rbx
   551 00002004 58                  <1>     pop rax
   552                              <1>     return
    18                              <2> %%_ret:
    19 00002005 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   553                              <1> .exitBad:
   554 00002006 E8A4E9FFFF          <1>     call cancelWriteThroughBuffers
   555 0000200B 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   556 0000200C 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   557 00002012 9D                  <1>     popfq
   558 00002013 EBE7                <1>     jmp short .exit
   559                              <1>     
   560                              <1> growDirectory:
   561                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   562                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   563                              <1> ;                 eax = New Cluster number
   564                              <1> ;               TWO NON CF ERROR CASES.
   565                              <1> ;               If eax = -1 => disk full!
   566                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   567                              <1> ;        CF=CY => Something went wrong. Rip. 
   568 00002015 53                  <1>     push rbx
   569 00002016 51                  <1>     push rcx
   570 00002017 8B05(5EC70300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   571 0000201D 85C0                <1>     test eax, eax
   572 0000201F 7424                <1>     jz .exit
   573 00002021 E8B3ECFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   574 00002026 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   575 00002028 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   576 0000202D E815EDFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   577 00002032 7211                <1>     jc .exit
   578 00002034 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   579 00002036 E84BEEFFFF          <1>     call readFAT
   580 0000203B 7208                <1>     jc .exit
   581 0000203D E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   582 00002042 7201                <1>     jc .exit
   583 00002044 F8                  <1>     clc
   584                              <1> .exit:
   585 00002045 59                  <1>     pop rcx
   586 00002046 5B                  <1>     pop rbx
   587                              <1>     return   
    18                              <2> %%_ret:
    19 00002047 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   588                              <1> sanitiseCluster:
   589                              <1> ;Sanitises the cluster in eax to all zeros
   590                              <1> ;Does not move file pointers
   591                              <1> ;Currently, is only called to sanitise subdirectory clusters
   592                              <1> ;Input: eax = Cluster number
   593                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   594                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   595                              <1> ;        If CF=CY => Error, exit
   596 00002048 50                  <1>     push rax
   597 00002049 53                  <1>     push rbx
   598 0000204A 51                  <1>     push rcx
   599 0000204B 52                  <1>     push rdx
   600 0000204C 56                  <1>     push rsi
   601 0000204D 55                  <1>     push rbp
   602 0000204E 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
   603 00002055 E852ECFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   604 0000205A 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   605 0000205E FFC2                <1>     inc edx ;Make it a count of sectors
   606                              <1> .getSectorInCluster:
   607 00002060 E80CEBFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   608 00002065 721E                <1>     jc .exitBad
   609 00002067 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   610 0000206B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   611 0000206F 31C0                <1>     xor eax, eax
   612 00002071 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   613 00002073 E88BE9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   614                              <1> 
   615 00002078 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   616 0000207A 740A                <1>     jz .exit    ;Jump if we done
   617 0000207C 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   618 00002080 48FFC0              <1>     inc rax ;Goto next sector in cluster
   619 00002083 EBDB                <1>     jmp short .getSectorInCluster
   620                              <1> .exitBad:
   621 00002085 F9                  <1>     stc
   622                              <1> .exit:
   623 00002086 5D                  <1>     pop rbp
   624 00002087 5E                  <1>     pop rsi
   625 00002088 5A                  <1>     pop rdx
   626 00002089 59                  <1>     pop rcx
   627 0000208A 5B                  <1>     pop rbx
   628 0000208B 58                  <1>     pop rax
   629                              <1>     return
    18                              <2> %%_ret:
    19 0000208C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/devio.asm"
    28                              <1> ;This file contains the primitive dev io function, which will be called 
    29                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    30                              <1> ; make requests for device IO.
    31                              <1> 
    32                              <1> mainCharIO:
    33                              <1> ;This is the main IO clearing function for Char IO.
    34                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    35                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    36                              <1> ;
    37                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    38                              <1> ;       ah = {0,..., 5}, a subfunction number
    39                              <1> ;       Function 0: Read Char (drvREAD)
    40                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    41                              <1> ;       Function 2: Write Char (drvWrite)
    42                              <1> ; In the case the below functions are called for Disk/Net files
    43                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    44                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    45                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    46                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    47                              <1> ;
    48                              <1> ; If and only if ah = 02h, al = Char to write to device
    49                              <1> ;
    50                              <1> ;
    51                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    52                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    53                              <1> ;                                           ZF = NZ => Device ready (not busy)
    54                              <1> ;                                               If ND read, AL = Next Char
    55                              <1> ; For Files/Net:
    56                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    57                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    58                              <1> ;           For Read and ND Read:
    59                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    60                              <1> ;               Read returns ^Z on EOF.
    61                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    62                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    63                              <1> ;
    64                              <1> ;All registers preserved EXCEPT for ax and flags
    65                              <1> 
    66                              <1> ;Reference Request Header
    67                              <1> ;Common Section:
    68                              <1> ;    .hdrlen resb 1  ;Length of the request header
    69                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    70                              <1> ;    .cmdcde resb 1  ;Command code
    71                              <1> ;    .status resw 1  ;Status word
    72                              <1> ;    .devptr resq 1  ;Reserved. Unused
    73                              <1> ;Below used by calls 0,1,2,5
    74                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    75                              <1> ;Below used by calls 0,2
    76                              <1> ;    .bufptr resq 1
    77                              <1> ;    .tfrlen resd 1
    78                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    79                              <1> ;    .strtsc resq 1
    80                              <1> ;    .desptr resq 1
    81                              <1> 
    82                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    83 0000208D 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    84 0000208E 488D1D(FEC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    85 00002095 48891D(87C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    86 0000209C 5B                  <1>     pop rbx
    87 0000209D C705(8FC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    87 000020A5 0000                <1>
    88 000020A7 668905(FEC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    89 000020AE 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    90 000020B4 0F85A1000000        <1>     jnz .notChar
    91 000020BA 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    92 000020C0 0F8495000000        <1>     jz .notChar
    93                              <1> ;Char devices only here
    94 000020C6 E806400000          <1>     call dosPushRegs    ;Save context here
    95 000020CB 488D1D70DFFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    96 000020D2 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    97 000020D5 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    98 000020D8 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    99 000020DB 890D(79C40300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
   100                              <1>     ;Now set up cx for status word
   101 000020E1 31C9                <1>     xor ecx, ecx
   102 000020E3 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   103 000020E6 7506                <1>     jne .skipBsySet
   104 000020E8 81C900020000        <1>     or ecx, drvBsyStatus
   105                              <1> .skipBsySet:
   106 000020EE 66870D(7CC40300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   107                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   108 000020F5 488D1D(79C40300)    <1>     lea rbx, secdReqHdr
   109 000020FC E8A6370000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   110 00002101 668B3D(7CC40300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   111 00002108 F7C700800000        <1>     test edi, drvErrStatus
   112 0000210E 752D                <1>     jnz .error
   113                              <1> .ignoreRet:
   114 00002110 803D(7BC40300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   115 00002117 750C                <1>     jne .notNDRead
   116 00002119 8A05(86C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   117 0000211F 8805(FEC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   118                              <1> .notNDRead:
   119 00002125 8A25(7DC40300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   120 0000212B F6D4                <1>     not ah
   121 0000212D 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   122 00002130 E8853F0000          <1>     call dosPopRegs ;Get back the context
   123 00002135 668B05(FEC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   124                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 0000213C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   125                              <1> .error:
   126                              <1>     ;cl has flags
   127 0000213D 88CC                <1>     mov ah, cl
   128 0000213F E841360000          <1>     call charDevErr
   129 00002144 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   130 00002146 750A                <1>     jne .errorIgnore
   131                              <1>     ;Fallthrough => Retry
   132 00002148 E86D3F0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   133 0000214D E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   134                              <1> .errorIgnore:
   135                              <1>     ;Clear the busy bit in the status word
   136 00002152 8025(7DC40300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   137 00002159 EBB5                <1>     jmp short .ignoreRet
   138                              <1> .notChar:
   139                              <1> ;Just return with ZF=NZ for now
   140 0000215B 50                  <1>     push rax
   141 0000215C 31C0                <1>     xor eax, eax
   142 0000215E FEC0                <1>     inc al
   143 00002160 58                  <1>     pop rax
   144                              <1>     return
    18                              <2> %%_ret:
    19 00002161 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> 
   146                              <1> openSFT:
   147                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   148                              <1> ;Input: rdi = SFT pointer
   149 00002162 E86A3F0000          <1>     call dosPushRegs
   150 00002167 B00D                <1>     mov al, drvOPEN
   151 00002169 EB07                <1>     jmp short openCloseCommon
   152                              <1> closeSFT:
   153                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   154 0000216B E8613F0000          <1>     call dosPushRegs
   155 00002170 B00E                <1>     mov al, drvCLOSE
   156                              <1> openCloseCommon:
   157                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   158 00002172 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   159 00002178 7469                <1>     jz .exit    ;Exit if so
   160 0000217A F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   161 0000217E 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   162 00002182 7512                <1>     jnz .charDev
   163                              <1>     ;Here a disk drive, rdi is a DPB ptr
   164 00002184 803D(B7C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   165 0000218B 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   166 0000218D 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   167 00002190 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   168 00002192 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   169                              <1> .charDev:
   170 00002196 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   171 0000219C 7445                <1>     jz .exit    ;No, exit!
   172 0000219E 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   173 000021A1 488D1D(A3C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   174 000021A8 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   175                              <1> .retryEP:
   176 000021AB 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   177 000021AE C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   178 000021B1 50                  <1>     push rax    ;Save the dword
   179 000021B2 E8F4360000          <1>     call goDriver
   180 000021B7 0FB73D(A6C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   181 000021BE F7C700800000        <1>     test edi, drvErrStatus
   182 000021C4 741C                <1>     jz .exitPop
   183                              <1>     ;Error here, check if char or block drive
   184 000021C6 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   185 000021CC 7404                <1>     jz .blockError
   186                              <1>     ;Char error here
   187 000021CE B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   188 000021D0 EB04                <1>     jmp short .errorCmn
   189                              <1> .blockError:
   190 000021D2 88C8                <1>     mov al, cl  ;Move drive number into al
   191 000021D4 B406                <1>     mov ah, critData    ;Data on block dev error
   192                              <1> .errorCmn:
   193                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   194 000021D6 E8AA350000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   195 000021DB B001                <1>     mov al, critRetry   ;al returns user response
   196 000021DD 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   197 000021DF 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   198 000021E0 EBC9                <1>     jmp short .retryEP  ;Reset
   199                              <1> .exitPop:
   200 000021E2 58                  <1>     pop rax    
   201                              <1> .exit:
   202 000021E3 E8D23E0000          <1>     call dosPopRegs
   203                              <1>     return
    18                              <2> %%_ret:
    19 000021E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    29                              <1> ;-----------------------------------------------------------------------:
    30                              <1> ;                  DOS default char functions live here                 :
    31                              <1> ;                                                                       :
    32                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    33                              <1> ;                                                                       :
    34                              <1> ;Rules for the naming of the DOS functions                              :
    35                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    36                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    37                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    38                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    39                              <1> ;                                                                       :
    40                              <1> ;-----------------------------------------------------------------------:
    41                              <1> 
    42                              <1> charIn_BE:     ;ah = 01h
    43                              <1> ;Return char that has been read and echoed in al
    44 000021E9 E866010000          <1>     call charIn_B
    45 000021EE 50                  <1>     push rax
    46 000021EF E804000000          <1>     call charOut_B.in    ;Output it to screen
    47 000021F4 58                  <1>     pop rax
    48                              <1>     return
    18                              <2> %%_ret:
    19 000021F5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    49                              <1> 
    50                              <1> charOut_B:       ;ah = 02h
    51                              <1> ;Bspace is regular cursor left, does not insert a blank
    52 000021F6 88D0                <1>     mov al, dl
    53                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    54 000021F8 3C20                <1>     cmp al, asciiCaret
    55 000021FA 7277                <1>     jb .control
    56 000021FC 3C7F                <1>     cmp al, DEL ;DEL char?
    57 000021FE 7406                <1>     je .skipCurs
    58 00002200 FE05(AFC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    59                              <1> .skipCurs:
    60 00002206 FE05(B5C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    61 0000220C 8025(B5C30300)03    <1>     and byte [vConErr], 3
    62 00002213 56                  <1>     push rsi
    63 00002214 7507                <1>     jnz .skipErrorCheck
    64 00002216 50                  <1>     push rax
    65 00002217 E884020000          <1>     call vConCtrlCheck
    66 0000221C 58                  <1>     pop rax
    67                              <1> .skipErrorCheck:
    68 0000221D E80C020000          <1>     call outputOnStdout
    69 00002222 5E                  <1>     pop rsi
    70 00002223 F605(B2C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    71                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000222A 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    72 0000222C 53                  <1>     push rbx
    73 0000222D 56                  <1>     push rsi
    74 0000222E BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    75 00002233 E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    76 00002238 7236                <1>     jc .exitPrintEcho
    77                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    78 0000223A 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    79 0000223E F7C300800000        <1>     test ebx, devRedirDev
    80 00002244 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    81 00002246 F7C380000000        <1>     test ebx, devCharDev
    82 0000224C 7422                <1>     jz .exitPrintEcho
    83 0000224E BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    84 00002253 E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    85 00002258 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    86 0000225A 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    87 00002260 7407                <1>     jz .netSpool
    88 00002262 E8FB010000          <1>     call outputOnSFT
    89 00002267 EB07                <1>     jmp short .exitPrintEcho
    90                              <1> .netSpool:
    91 00002269 C605(B2C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    92                              <1> .exitPrintEcho:
    93 00002270 5E                  <1>     pop rsi
    94 00002271 5B                  <1>     pop rbx
    95                              <1>     return
    18                              <2> %%_ret:
    19 00002272 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    96                              <1> .control:
    97 00002273 3C0D                <1>     cmp al, CR
    98 00002275 7425                <1>     je .newline
    99 00002277 3C08                <1>     cmp al, BSP
   100 00002279 742D                <1>     je .back
   101 0000227B 3C09                <1>     cmp al, TAB
   102 0000227D 7587                <1>     jne .skipCurs   ;Treat as normal
   103                              <1>     ;TAB key here
   104                              <1> .tab:
   105 0000227F 51                  <1>     push rcx
   106 00002280 0FB60D(AFC20300)    <1>     movzx ecx, byte [vConCursPos]
   107 00002287 80C9F8              <1>     or cl, ~7
   108 0000228A F6D9                <1>     neg cl
   109 0000228C 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   110                              <1> .tabloop:
   111 0000228F B020                <1>     mov al, SPC
   112 00002291 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   113 00002296 FEC9                <1>     dec cl
   114 00002298 75F5                <1>     jnz .tabloop
   115                              <1> .stopTab:
   116 0000229A 59                  <1>     pop rcx
   117                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 0000229B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   118                              <1> .newline:
   119 0000229C C605(AFC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   120 000022A3 E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   121                              <1> .back:
   122 000022A8 FE0D(AFC20300)      <1>     dec byte [vConCursPos]
   123 000022AE E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   124                              <1> 
   125                              <1> auxIn_B:        ;ah = 03h
   126 000022B3 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   127 000022B8 BB03000000          <1>     mov ebx, 3
   128 000022BD E8A5020000          <1>     call getCharDevSFT
   129                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000022C2 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   130                              <1> .auxloop:
   131 000022C4 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   132 000022C6 E8C2FDFFFF          <1>     call mainCharIO
   133 000022CB 7408                <1>     jz .signalLoop
   134 000022CD 30E4                <1>     xor ah, ah  ;Read the char in
   135 000022CF E8B9FDFFFF          <1>     call mainCharIO
   136                              <1>     return
    18                              <2> %%_ret:
    19 000022D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   137                              <1> .signalLoop:
   138 000022D5 E8A3010000          <1>     call callInt48h
   139 000022DA EBE8                <1>     jmp short .auxloop
   140                              <1> 
   141                              <1> auxOut_B:       ;ah = 04h
   142 000022DC 53                  <1>     push rbx
   143 000022DD BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   144 000022E2 EB06                <1>     jmp short auxOutCmn
   145                              <1> prnOut_B:       ;ah = 05h
   146 000022E4 53                  <1>     push rbx
   147 000022E5 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   148                              <1> auxOutCmn: ;Auxilliary output device common 
   149 000022EA 88D0                <1>     mov al, dl  ;Get the char into al
   150 000022EC 50                  <1>     push rax
   151 000022ED E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   152 000022F2 58                  <1>     pop rax
   153 000022F3 56                  <1>     push rsi
   154 000022F4 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   155 000022F9 5E                  <1>     pop rsi
   156 000022FA 5B                  <1>     pop rbx
   157                              <1>     return
    18                              <2> %%_ret:
    19 000022FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> directConIO:    ;ah = 06h
   160 000022FC 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   161 000022FE 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   162 00002300 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   163                              <1> ;Here is the read char direct function
   164 00002306 31DB                <1>     xor ebx, ebx    
   165 00002308 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   166                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000230D 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   167 0000230F 488B2D(5DC40300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   168 00002316 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   169 00002318 E870FDFFFF          <1>     call mainCharIO
   170 0000231D E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   171 00002322 7507                <1>     jnz .readChar
   172 00002324 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   173 00002328 30C0                <1>     xor al, al  ;Set caller return code to 0
   174                              <1>     return
    18                              <2> %%_ret:
    19 0000232A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> .readChar:
   176 0000232B 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   177                              <1>     ;Fallthrough here to get the char at STDIN
   178                              <1> charIn:         ;ah = 07h
   179                              <1> ;Return char in al from STDIN without waiting
   180 0000232F 31DB                <1>     xor ebx, ebx
   181 00002331 E831020000          <1>     call getCharDevSFT
   182                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002336 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   183 00002338 B401                <1>     mov ah, 01  ;ND read for char
   184 0000233A E84EFDFFFF          <1>     call mainCharIO
   185 0000233F 750B                <1>     jnz .getChar
   186 00002341 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   187 00002343 CD4A                <1>     int 4Ah
   188 00002345 E833010000          <1>     call callInt48h
   189 0000234A EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   190                              <1> .getChar:
   191                              <1>     ;Get the char in al and exit
   192 0000234C 30E4                <1>     xor ah, ah
   193 0000234E E83AFDFFFF          <1>     call mainCharIO
   194                              <1>     return
    18                              <2> %%_ret:
    19 00002353 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   195                              <1> charIn_B:       ;ah = 08h
   196                              <1> ;Return char in al from STDIN
   197 00002354 56                  <1>     push rsi
   198                              <1> .readAgain:
   199 00002355 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   200                              <1>     ;Also sets rsi to point to the device SFT for 
   201 0000235A 7543                <1>     jnz .pullChar
   202 0000235C 803D(C0D90300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   203 00002363 7507                <1>     jne .skiplookahead
   204 00002365 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   205 00002367 E821FDFFFF          <1>     call mainCharIO
   206                              <1> .skiplookahead:
   207 0000236C B484                <1>     mov ah, 84h
   208 0000236E CD4A                <1>     int 4ah ;Multitasking keyboard loop
   209 00002370 66813D(90DA0300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   209 00002378 FF                  <1>
   210 00002379 751B                <1>     jne .skipClockRead
   211 0000237B E8513D0000          <1>     call dosPushRegs
   212 00002380 F8                  <1>     clc ;Clear CF, write primary header to backup
   213 00002381 E882000000          <1>     call swapPrimaryHeader
   214 00002386 E8CF060000          <1>     call readDateTimeRecord
   215 0000238B F9                  <1>     stc ;Set CF, write backup to primary header
   216 0000238C E877000000          <1>     call swapPrimaryHeader
   217 00002391 E8243D0000          <1>     call dosPopRegs
   218                              <1> .skipClockRead:
   219 00002396 66FF05(90DA0300)    <1>     inc word [keybTicks]
   220 0000239D EBB6                <1>     jmp short .readAgain
   221                              <1> .pullChar:
   222 0000239F 30E4                <1>     xor ah, ah
   223 000023A1 E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   224 000023A6 5E                  <1>     pop rsi
   225 000023A7 3C00                <1>     cmp al, NUL ;Is this the null char?
   226 000023A9 7507                <1>     jne .exit
   227                              <1>     ;We are mid extended ascii, prevent printer toggling
   228 000023AB C605(8FDA0300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   229                              <1> .exit:
   230                              <1>     return
    18                              <2> %%_ret:
    19 000023B2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> printString_B:      ;ah = 09h
   233 000023B3 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   234                              <1> .ps0:
   235 000023B6 AC                  <1>     lodsb   ;Get char in al and inc rsi
   236 000023B7 3C24                <1>     cmp al, "$" ;End of string char?
   237                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000023B9 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   238 000023BB E838FEFFFF          <1>     call charOut_B.in
   239 000023C0 EBF4                <1>     jmp short .ps0
   240                              <1> 
   241                              <1> checkStdinStatus:  ;ah = 0Bh
   242                              <1> ;Returns the status of the driver controlling vCon
   243 000023C2 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   244 000023C7 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   245                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000023C9 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   246 000023CB FEC8                <1>     dec al  ;Set al to -1 if char available
   247                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 000023CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   248                              <1> clearbuffDoFunc:   ;ah = 0Ch
   249                              <1> ;Clears any buffers and issues a console read command (the command in al)
   250                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   251 000023CE 50                  <1>     push rax
   252 000023CF 52                  <1>     push rdx
   253 000023D0 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   254 000023D2 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   255 000023D7 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   256 000023D9 B404                <1>     mov ah, 04h ;Flush input buffers
   257 000023DB E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   258                              <1> .skipFlush:
   259 000023E0 5A                  <1>     pop rdx
   260 000023E1 58                  <1>     pop rax
   261 000023E2 88C4                <1>     mov ah, al  ;Move function number into ah
   262 000023E4 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   263 000023E6 7507                <1>     jne .others
   264 000023E8 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   265 000023EB 7412                <1>     jz .bad ;Yes, exit
   266 000023ED EB13                <1>     jmp short .callFunction ;Else, call function in ah
   267                              <1> .others:
   268 000023EF 3C01                <1>     cmp al, 01h
   269 000023F1 740F                <1>     je .callFunction
   270 000023F3 3C07                <1>     cmp al, 07h
   271 000023F5 740B                <1>     je .callFunction
   272 000023F7 3C08                <1>     cmp al, 08h
   273 000023F9 7407                <1>     je .callFunction
   274 000023FB 3C0A                <1>     cmp al, 0Ah
   275 000023FD 7403                <1>     je .callFunction
   276                              <1> .bad:
   277 000023FF 30C0                <1>     xor al, al
   278                              <1>     return
    18                              <2> %%_ret:
    19 00002401 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   279                              <1> .callFunction:
   280 00002402 FA                  <1>     cli ;Prepare to swap stack pointer
   281                              <1>     ;The below address avoids "properly" reentering DOS
   282                              <1>     ;We simply reuse the function dispatch aspect. 
   283                              <1>     ;this means we dont trash the caller's register frame 
   284 00002403 E9E13B0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   285                              <1> ;------------------------
   286                              <1> ;  Primitive functions  :
   287                              <1> ;------------------------
   288                              <1> swapPrimaryHeader:
   289                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   290                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   291 00002408 56                  <1>     push rsi
   292 00002409 57                  <1>     push rdi
   293 0000240A 51                  <1>     push rcx
   294 0000240B 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   294 00002414 00                  <1>
   295 00002415 488D35(A3C40300)    <1>     lea rsi, primReqHdr
   296 0000241C 488D3D(62DA0300)    <1>     lea rdi, bkupReqHdr
   297 00002423 7303                <1>     jnc .read
   298 00002425 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   299                              <1> .read:
   300 00002428 F3A4                <1>     rep movsb   ;Swap
   301 0000242A 59                  <1>     pop rcx
   302 0000242B 5F                  <1>     pop rdi
   303 0000242C 5E                  <1>     pop rsi
   304                              <1>     return
    18                              <2> %%_ret:
    19 0000242D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> outputOnStdout:
   306                              <1> ;Input: al = Char to output
   307                              <1> ;Output: CF=CY, all good
   308 0000242E 53                  <1>     push rbx
   309 0000242F BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   310 00002434 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   311 00002439 7217                <1>     jc .exit
   312 0000243B 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   313 00002441 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   314 00002443 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   315 00002447 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   316 0000244D 7405                <1>     jz .notCharDevOrFast
   317 0000244F CD49                <1>     int 49h ;Fast output
   318                              <1> .exitOk:
   319 00002451 F8                  <1>     clc
   320                              <1> .exit:
   321 00002452 5B                  <1>     pop rbx
   322                              <1>     return
    18                              <2> %%_ret:
    19 00002453 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> .notCharDevOrFast:
   324 00002454 E809000000          <1>     call outputOnSFT
   325 00002459 5B                  <1>     pop rbx
   326                              <1>     return
    18                              <2> %%_ret:
    19 0000245A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   327                              <1> 
   328                              <1> outputToHandle:
   329                              <1> ;Char to output must be in al
   330 0000245B E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   331                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002460 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   332                              <1> outputOnSFT:
   333                              <1> ;Output char in al to SFT in rsi
   334                              <1> ;Waits until device is not busy to send char.
   335                              <1> ;Calls int 48h if device busy
   336 00002462 50                  <1>     push rax
   337 00002463 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   338 00002465 E823FCFFFF          <1>     call mainCharIO
   339 0000246A 58                  <1>     pop rax
   340 0000246B 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   341 0000246D B402                <1>     mov ah, 02h ;Output char in al
   342 0000246F E819FCFFFF          <1>     call mainCharIO
   343 00002474 F8                  <1>     clc
   344                              <1>     return
    18                              <2> %%_ret:
    19 00002475 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> .signalLoop:
   346 00002476 E802000000          <1>     call callInt48h
   347 0000247B EBE5                <1>     jmp short outputOnSFT
   348                              <1> 
   349                              <1> callInt48h:
   350                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   351 0000247D 9C                  <1>     pushfq
   352 0000247E F605(77C40300)FF    <1>     test byte [int48Flag], -1
   353 00002485 7417                <1>     jz .exit    ;If zero, not safe
   354 00002487 F605(EAC30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   355 0000248E 750E                <1>     jnz .exit
   356                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   357 00002490 FF35(77C40300)      <1>     push qword [int48Flag] 
   358 00002496 CD48                <1>     int 48h
   359 00002498 8F05(77C40300)      <1>     pop qword [int48Flag]    ;Return original value
   360                              <1> .exit:
   361 0000249E 9D                  <1>     popfq
   362                              <1>     return
    18                              <2> %%_ret:
    19 0000249F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> 
   365                              <1> vConCtrlCheck:
   366                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   367                              <1> ; the processing. 
   368                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   369                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   370                              <1> ;
   371                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   372                              <1> ;^S will pause screen processing until another key is processed by vCon input
   373                              <1> ;^P will toggle the printer echo feature of the vConsole
   374                              <1> ;
   375                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   376                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   377                              <1> ;
   378                              <1> ;Output: 
   379                              <1> ;   CF=CY : Error
   380                              <1> ;   CF=NC : ...
   381                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   382                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   383 000024A0 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   384 000024A5 53                  <1>     push rbx
   385 000024A6 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   386 000024A8 E8BA000000          <1>     call getCharDevSFT
   387 000024AD 5B                  <1>     pop rbx
   388                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000024AE 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   389 000024B0 B401                <1>     mov ah, 01  ;Non destructively read CON
   390 000024B2 E8D6FBFFFF          <1>     call mainCharIO
   391 000024B7 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   392                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   393 000024B9 3C13                <1>     cmp al, DC3 ;^S ?
   394 000024BB 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   395 000024BD 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   396 000024BF E8C9FBFFFF          <1>     call mainCharIO
   397 000024C4 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   398                              <1> .checkPrintOrExit:
   399 000024C9 3C10                <1>     cmp al, DLE ;Do we have ^P?
   400 000024CB 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   401 000024CD 3C03                <1>     cmp al, ETX ;Do we have ^C?
   402 000024CF 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   403                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   404                              <1>     return 
    18                              <2> %%_ret:
    19 000024D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   405                              <1> .printToggle:
   406 000024D2 F615(B2C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   407 000024D8 53                  <1>     push rbx
   408 000024D9 BB04000000          <1>     mov ebx, 4  ;PRN handle
   409 000024DE E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   410 000024E3 5B                  <1>     pop rbx
   411                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000024E4 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   412 000024E6 57                  <1>     push rdi
   413 000024E7 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   414 000024EA 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   415 000024F0 741D                <1>     jz .notNet
   416 000024F2 50                  <1>     push rax
   417 000024F3 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   418 000024F8 CD4F                <1>     int 4Fh
   419 000024FA 58                  <1>     pop rax
   420 000024FB 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   421                              <1>     ;If something went wrong, turn off echo
   422 000024FD C605(B2C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   423 00002504 50                  <1>     push rax
   424 00002505 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   425 0000250A CD4F                <1>     int 4Fh
   426 0000250C 58                  <1>     pop rax
   427 0000250D EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   428                              <1> .notNet:
   429                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   430                              <1> ; 0Dh or 0Eh
   431 0000250F 803D(B2C30300)00    <1>     cmp byte [printEcho], 00
   432 00002516 7507                <1>     jnz .echoOn
   433 00002518 E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   434 0000251D EB05                <1>     jmp short .printExit
   435                              <1> .echoOn:
   436 0000251F E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   437                              <1> .printExit:
   438 00002524 5F                  <1>     pop rdi
   439                              <1>     return
    18                              <2> %%_ret:
    19 00002525 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   440                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   441 00002526 E852FFFFFF          <1>     call callInt48h
   442                              <1> .waitNextChar:   ;Here get next char
   443 0000252B B401                <1>     mov ah, 01h ;ND read
   444 0000252D E85BFBFFFF          <1>     call mainCharIO
   445 00002532 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   446                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   447 00002534 53                  <1>     push rbx
   448 00002535 31DB                <1>     xor ebx, ebx
   449 00002537 E82B000000          <1>     call getCharDevSFT
   450 0000253C 5B                  <1>     pop rbx
   451                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000253D 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   452 0000253F 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   453 00002541 E847FBFFFF          <1>     call mainCharIO
   454 00002546 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   455 00002548 7514                <1>     jnz .checkBreak2
   456 0000254A 803D(8FDA0300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   457 00002551 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   458 00002557 C605(8FDA0300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   459                              <1> .checkBreak2:
   460 0000255E 3C03                <1>     cmp al, ETX
   461                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002560 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   462 00002562 E9D7320000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   463                              <1> 
   464                              <1> 
   465                              <1> getCharDevSFT:
   466                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   467                              <1> ;Input: bx = zero extended handle number
   468                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   469                              <1> ;        CF=CY => al = Error code, abort operation
   470 00002567 F605(76C40300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   471 0000256E 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   472                              <1> .getSFT:
   473 00002570 57                  <1>     push rdi
   474 00002571 E8B3220000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   475 00002576 4889FE              <1>     mov rsi, rdi
   476 00002579 5F                  <1>     pop rdi
   477                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 0000257A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   478                              <1> .swap:
   479                              <1> ;workingSFT is only set for CON calls
   480 0000257B 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   481 00002581 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   482 00002583 488B35(00C70300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   483 0000258A F8                  <1>     clc
   484                              <1>     return
    18                              <2> %%_ret:
    19 0000258B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> ;------------------------
   487                              <1> ;   Utility functions   :
   488                              <1> ;------------------------
   489                              <1> printCaretASCII:
   490                              <1> ;Input: al = Char to print with a caret
   491                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   492                              <1> ;First check if the char should be careted, and then print normally if so
   493 0000258C 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   494 0000258E 0F8364FCFFFF        <1>     jae charOut_B.in
   495 00002594 3C09                <1>     cmp al, TAB
   496 00002596 0F845CFCFFFF        <1>     je charOut_B.in
   497 0000259C 3C15                <1>     cmp al, NAK
   498 0000259E 0F8454FCFFFF        <1>     je charOut_B.in
   499 000025A4 3C14                <1>     cmp al, DC4
   500 000025A6 0F844CFCFFFF        <1>     je charOut_B.in
   501 000025AC 50                  <1>     push rax
   502 000025AD B05E                <1>     mov al, "^" ;Get caret in place
   503 000025AF E844FCFFFF          <1>     call charOut_B.in
   504 000025B4 58                  <1>     pop rax
   505 000025B5 0440                <1>     add al, "@" ;Turn into an ASCII Char
   506 000025B7 E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   507                              <1> printCRLF:
   508 000025BC B00D                <1>     mov al, CR
   509 000025BE E835FCFFFF          <1>     call charOut_B.in
   510 000025C3 B00A                <1>     mov al, LF
   511 000025C5 E92EFCFFFF          <1>     jmp charOut_B.in
   512                              <1> 
   513                              <1> checkBreak:
   514                              <1> ;Reads bytes from CON if there are any bytes to read and 
   515                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   516 000025CA 803D(EBC30300)01    <1>     cmp byte [inDOS], 1
   517                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000025D1 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   518                              <1> ;Returns in al the keystroke that is available IF one is available
   519                              <1> ; or al=0 if no keystroke available
   520 000025D3 53                  <1>     push rbx
   521 000025D4 56                  <1>     push rsi
   522 000025D5 488B35(57C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   523                              <1>     ;Place command code and a zero status word at the same time
   524 000025DC C705(CFC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   524 000025E4 0000                <1>
   525                              <1>     ;Place the packet size in the hdrlen field
   526 000025E6 C605(CDC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   527 000025ED 488D1D(CDC40300)    <1>     lea rbx, critReqHdr
   528 000025F4 E8B2320000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   529                              <1>     ;Check if the busy bit is set (No keystroke available)
   530 000025F9 66F705(D0C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   530 00002601 02                  <1>
   531 00002602 7405                <1>     jz .charFound
   532                              <1> .exit:
   533 00002604 30C0                <1>     xor al, al
   534 00002606 5E                  <1>     pop rsi
   535 00002607 5B                  <1>     pop rbx
   536                              <1>     return
    18                              <2> %%_ret:
    19 00002608 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   537                              <1> .charFound:
   538                              <1> ;Keystroke available, proceed
   539 00002609 8A05(DAC40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   540 0000260F 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   541 00002611 75F1                <1>     jne .exit   ;If not equal exit
   542                              <1> ;Now we pull the char out of the buffer
   543 00002613 C705(CFC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   543 0000261B 0000                <1>
   544 0000261D C605(CDC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   545                              <1>     ;Place pointers and number of chars
   546 00002624 C705(E3C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   546 0000262C 0000                <1>
   547                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   548 0000262E 488D05(DAC40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   549 00002635 488905(DBC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   550 0000263C E86A320000          <1>     call goDriver   ;RSI and RBX as before
   551 00002641 E9F8310000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   552                              <1> 
   553                              <1> vConSwapDriver:
   554                              <1> ;Sets up the vCon to use the alternative SFT pointer
   555 00002646 57                  <1>     push rdi
   556 00002647 C605(76C40300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   557 0000264E 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   558 00002655 48893D(00C70300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   559 0000265C 5F                  <1>     pop rdi
   560                              <1>     return
    18                              <2> %%_ret:
    19 0000265D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   561                              <1> 
   562                              <1> vConRetDriver:
   563                              <1> ;Returns the original driver (sets flag down)
   564 0000265E C605(76C40300)00    <1>     mov byte [vConDrvSwp], 0
   565                              <1>     return
    18                              <2> %%_ret:
    19 00002665 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   566                              <1> 
   567                              <1> ;--------------------------------------------------
   568                              <1> ;      Main Keyboard Buffered Input Function      :
   569                              <1> ;--------------------------------------------------
   570                              <1> buffCharInput_BE:  ;ah = 0Ah
   571                              <1> ;Buffer pointer in rdx
   572                              <1> ; byte [rdx + 0], buffer length
   573                              <1> ; byte [rdx + 1], number of chars in buffer
   574                              <1> ; byte [rdx + 2], buffer start
   575                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   576                              <1> ;Register use
   577                              <1> ; dh = Char offset in internal buffer
   578                              <1> ; dl = Buffer length
   579                              <1> ; bh = Char offset in user buffer
   580                              <1> ; bl = Number of chars already in the buffer
   581                              <1> ; rdi = Internal buffer
   582                              <1> ; rsi = User buffer
   583 00002666 4889D6              <1>     mov rsi, rdx
   584 00002669 66AD                <1>     lodsw   ;Get buffer metadata in ax
   585 0000266B 84C0                <1>     test al, al
   586                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000266D 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   587 0000266F 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   588 00002672 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   589 00002674 7606                <1>     jbe .avoidcheck
   590 00002676 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   591 0000267A 7402                <1>     je .functionKeyOk
   592                              <1> .avoidcheck:
   593 0000267C 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   594                              <1> .functionKeyOk:
   595 0000267E 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   596 00002681 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   597                              <1> .breakEP:
   598 00002683 8A05(AFC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   599 00002689 8805(B0C20300)      <1>     mov byte [vConCurCnt], al
   600 0000268F 56                  <1>     push rsi    ;Push user buffer address
   601 00002690 488D3D(B1C20300)    <1>     lea rdi, vConBuffer
   602 00002697 C605(E1C60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   603                              <1> .mainLoop:
   604 0000269E E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   605 000026A3 3C0A                <1>     cmp al, LF
   606 000026A5 7505                <1>     jne .checkControlChars
   607                              <1> .mainLoop2:
   608 000026A7 E8A8FCFFFF          <1>     call charIn_B
   609                              <1> .checkControlChars:
   610 000026AC 3C06                <1>     cmp al, ACK
   611 000026AE 74F7                <1>     je .mainLoop2   ;Get another char
   612 000026B0 3A05ACD9FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   613 000026B6 0F8426010000        <1>     je .escape
   614 000026BC 3C7F                <1>     cmp al, DEL
   615 000026BE 0F8489000000        <1>     je .delete
   616 000026C4 3C08                <1>     cmp al, BSP
   617 000026C6 0F8481000000        <1>     je .delete
   618 000026CC 3C17                <1>     cmp al, ETB
   619                              <1>     ;Add space for patched jump instructions
   620 000026CE 9090909090          <1>     db 5 dup (90h)  ;NOP
   621 000026D3 3C15                <1>     cmp al, NAK
   622 000026D5 9090909090          <1>     db 5 dup (90h)
   623 000026DA 3C0D                <1>     cmp al, CR
   624 000026DC 744C                <1>     je .carriageReturn
   625 000026DE 3C0A                <1>     cmp al, LF
   626 000026E0 7461                <1>     je .lineFeed
   627 000026E2 3A057BD9FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   628 000026E8 7429                <1>     je .break
   629                              <1> .checkIfCanInsert:
   630 000026EA 38D6                <1>     cmp dh, dl
   631 000026EC 731C                <1>     jae .bufOflw
   632 000026EE AA                  <1>     stosb   ;Store the byte and increment rdi!
   633 000026EF FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   634 000026F1 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   635 000026F6 803D(E1C60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   636 000026FD 75A8                <1>     jne .mainLoop2
   637                              <1>     ;IF not in insert mode, we fall here
   638                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   639                              <1>     ; or insert chars if needed.
   640 000026FF 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   641 00002701 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   642 00002703 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   643 00002706 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   644 00002708 EB9D                <1>     jmp short .mainLoop2
   645                              <1> .bufOflw:
   646                              <1> ;Buffer overflow
   647 0000270A B007                <1>     mov al, BEL ;Sound the bell
   648 0000270C E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   649 00002711 EB94                <1>     jmp short .mainLoop2
   650                              <1> .break:
   651                              <1> ;Break, Place a "\", and do a CRLF
   652 00002713 B05C                <1>     mov al, "\"
   653 00002715 E8DEFAFFFF          <1>     call charOut_B.in
   654 0000271A 5E                  <1>     pop rsi ;Realign stack
   655                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   656 0000271B E89CFEFFFF          <1>     call printCRLF
   657                              <1>     ;Align to next tabstop
   658 00002720 E85AFBFFFF          <1>     call charOut_B.tab
   659 00002725 E959FFFFFF          <1>     jmp .breakEP
   660                              <1> .carriageReturn:
   661 0000272A AA                  <1>     stosb
   662 0000272B E8C8FAFFFF          <1>     call charOut_B.in
   663 00002730 5F                  <1>     pop rdi ;User buffer address was pushed 
   664 00002731 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   665 00002734 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   666                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   667 00002736 488D35(B1C20300)    <1>     lea rsi, vConBuffer
   668 0000273D 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   669 00002740 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   670                              <1>     return
    18                              <2> %%_ret:
    19 00002742 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   671                              <1> .lineFeed:
   672 00002743 E874FEFFFF          <1>     call printCRLF
   673 00002748 E95AFFFFFF          <1>     jmp .mainLoop2
   674                              <1> .delete:
   675 0000274D E805000000          <1>     call .removeChar
   676 00002752 E950FFFFFF          <1>     jmp .mainLoop2
   677                              <1> .removeChar:
   678 00002757 84F6                <1>     test dh, dh ;Is char count 0?
   679 00002759 741C                <1>     jz .normalChar   ;If so, skip going back!
   680 0000275B E868000000          <1>     call .vConErase
   681 00002760 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   682 00002762 3C20                <1>     cmp al, SPC
   683 00002764 7311                <1>     jae .normalChar
   684 00002766 3C09                <1>     cmp al, TAB
   685 00002768 7420                <1>     je .eraTab
   686 0000276A 3C15                <1>     cmp al, NAK
   687 0000276C 7409                <1>     je .normalChar
   688 0000276E 3C14                <1>     cmp al, DC4
   689 00002770 7405                <1>     je .normalChar
   690 00002772 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   691                              <1> .normalChar:
   692 00002777 803D(E1C60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   693                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000277E 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   694 00002780 84FF                <1>     test bh, bh ;Beginning of user buffer?
   695                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002782 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   696 00002784 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   697 00002787 FECF                <1>     dec bh
   698                              <1>     return
    18                              <2> %%_ret:
    19 00002789 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   699                              <1> .eraTab:
   700                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   701                              <1> ; up to a tab stop worth of space chars printed
   702 0000278A 57                  <1>     push rdi
   703 0000278B 48FFCF              <1>     dec rdi
   704 0000278E FD                  <1>     std ;Go backwards
   705 0000278F 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   706 00002792 B020                <1>     mov al, SPC
   707 00002794 53                  <1>     push rbx
   708 00002795 BB07000000          <1>     mov ebx, 7
   709 0000279A 67E30D              <1>     jecxz .onTabstop
   710                              <1> .scanString:
   711 0000279D AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   712 0000279E 7608                <1>     jbe .notChar    ;No, skip handling
   713 000027A0 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   714 000027A4 740A                <1>     je .tabChar
   715 000027A6 FECB                <1>     dec bl
   716                              <1> .notChar:
   717 000027A8 E2F3                <1>     loop .scanString
   718                              <1> .onTabstop:
   719 000027AA 2A1D(B0C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   720                              <1> .tabChar:
   721 000027B0 28F3                <1>     sub bl, dh  ;Same on tabstop
   722 000027B2 00D9                <1>     add cl, bl
   723 000027B4 80E107              <1>     and cl, 7
   724 000027B7 5B                  <1>     pop rbx
   725 000027B8 5F                  <1>     pop rdi
   726 000027B9 FC                  <1>     cld
   727 000027BA 74BB                <1>     jz .normalChar
   728                              <1>     ;Now erase all the spaces placed on the vCon
   729                              <1> .vConDelTab:
   730 000027BC E80C000000          <1>     call .vConEraseNoDec
   731 000027C1 E2F9                <1>     loop .vConDelTab
   732 000027C3 E9AFFFFFFF          <1>     jmp .normalChar
   733                              <1> .vConErase:
   734                              <1> ;Erase the char on the vCon
   735                              <1> ;Return through the output function
   736 000027C8 48FFCF              <1>     dec rdi ;Go back a space in the 
   737 000027CB FECE                <1>     dec dh  ;Decrement char count in the buffer
   738                              <1> .vConEraseNoDec:
   739 000027CD B008                <1>     mov al, BSP ;Move cursor back
   740 000027CF E824FAFFFF          <1>     call charOut_B.in
   741 000027D4 B020                <1>     mov al, SPC ;Replace with a space
   742 000027D6 E81DFAFFFF          <1>     call charOut_B.in
   743 000027DB B008                <1>     mov al, BSP ;Move cursor back again
   744 000027DD E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   745                              <1> .escape:
   746                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   747                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   748                              <1> ; including the function keys.
   749 000027E2 FF2572D8FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   750                              <1> .f2:
   751 000027E8 E846000000          <1>     call .fCommon2
   752 000027ED EB0C                <1>     jmp short .fCommon
   753                              <1> .f3:
   754 000027EF 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   755 000027F2 28F9                <1>     sub cl, bh  ;Sub our current position
   756 000027F4 EB05                <1>     jmp short .fCommon
   757                              <1> .f1:
   758 000027F6 B901000000          <1>     mov ecx, 1  ;Get one char
   759                              <1> .fCommon:
   760 000027FB C605(E1C60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   761 00002802 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   762 00002804 0F849DFEFFFF        <1>     je .mainLoop2
   763 0000280A 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   764 0000280C 0F8495FEFFFF        <1>     je .mainLoop2
   765                              <1>     ;Else, copy byte by byte, and retain char in al
   766 00002812 AC                  <1>     lodsb
   767 00002813 AA                  <1>     stosb
   768 00002814 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   769 00002819 FEC7                <1>     inc bh
   770 0000281B FEC6                <1>     inc dh
   771 0000281D E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   772 0000281F E983FEFFFF          <1>     jmp .mainLoop2
   773                              <1> .f4:
   774 00002824 E80A000000          <1>     call .fCommon2
   775 00002829 4801CE              <1>     add rsi, rcx
   776 0000282C 00CF                <1>     add bh, cl
   777 0000282E E974FEFFFF          <1>     jmp .mainLoop2
   778                              <1> .fCommon2:
   779 00002833 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   780 00002838 3A0524D8FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   781 0000283E 750B                <1>     jne .fnotEscape
   782                              <1>     ;Get another char if they typed escape and force it in the buffer
   783                              <1>     ; Do not return to caller
   784 00002840 E80FFBFFFF          <1>     call charIn_B
   785                              <1> .fforceExit:
   786 00002845 59                  <1>     pop rcx ;Get original return address from stack
   787 00002846 E95CFEFFFF          <1>     jmp .mainLoop2
   788                              <1> .fnotEscape:
   789 0000284B 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   790 0000284E 28F9                <1>     sub cl, bh
   791 00002850 74F3                <1>     jz .fforceExit
   792 00002852 FFC9                <1>     dec ecx
   793 00002854 74EF                <1>     jz .fforceExit
   794 00002856 57                  <1>     push rdi
   795 00002857 4889F7              <1>     mov rdi, rsi
   796 0000285A 48FFC7              <1>     inc rdi
   797 0000285D F2AE                <1>     repne scasb ;Search for the char to start printing from
   798 0000285F 5F                  <1>     pop rdi
   799 00002860 75E3                <1>     jne .fforceExit ;If char not found, return
   800 00002862 F6D1                <1>     not cl
   801 00002864 00D9                <1>     add cl, bl
   802 00002866 28F9                <1>     sub cl, bh
   803                              <1>     return
    18                              <2> %%_ret:
    19 00002868 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   804                              <1> .f5:
   805 00002869 B040                <1>     mov al, "@"
   806 0000286B E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   807 00002870 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   808 00002871 57                  <1>     push rdi
   809 00002872 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   810 00002877 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   811 00002878 88F3                <1>     mov bl, dh
   812 0000287A E99CFEFFFF          <1>     jmp .breakAlt
   813                              <1> .f6:
   814                              <1> ;If the user wants to insert a EOF, they can use F6
   815 0000287F B01A                <1>     mov al, EOF
   816 00002881 E964FEFFFF          <1>     jmp .checkIfCanInsert
   817                              <1> .f7:
   818                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   819 00002886 8A05D6D7FFFF        <1>     mov al, byte [extESC]
   820 0000288C E959FEFFFF          <1>     jmp .checkIfCanInsert
   821                              <1> .toggleIns:
   822 00002891 F615(E1C60300)      <1>     not byte [vConInsert]   ;Toggle
   823                              <1>     return
    18                              <2> %%_ret:
    19 00002897 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   824                              <1> .eDel:
   825 00002898 38DF                <1>     cmp bh, bl
   826 0000289A 0F8407FEFFFF        <1>     je .mainLoop2
   827 000028A0 FEC7                <1>     inc bh
   828 000028A2 48FFC6              <1>     inc rsi
   829 000028A5 E9FDFDFFFF          <1>     jmp .mainLoop2
   830                              <1> 
   831                              <1> editKeys:
   832                              <1> ;Our Default Extended keys handler
   833 000028AA E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   834 000028AF B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   835 000028B4 57                  <1>     push rdi    ;Preserve rdi
   836 000028B5 488D3DA8D7FFFF      <1>     lea rdi, extKeyTbl
   837 000028BC 57                  <1>     push rdi
   838                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   839                              <1>     ; offset of function from extKeyTbl
   840                              <1> .lp:
   841 000028BD AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   842 000028BE 7411                <1>     je .charFound
   843 000028C0 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   844 000028C2 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   845 000028C8 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   846 000028CF EBEC                <1>     jmp short .lp
   847                              <1> .charFound:
   848 000028D1 59                  <1>     pop rcx ;Pop back the effective address of the table
   849 000028D2 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   850 000028D6 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   851 000028D9 5F                  <1>     pop rdi
   852 000028DA FFE1                <1>     jmp rcx
    29                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    30                              <1> ;Major kernel date time functions and subroutines
    31                              <1> 
    32                              <1> getDate:           ;ah = 2Ah
    33 000028DC E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    34 000028E1 E8B0330000          <1>     call getUserRegs
    35 000028E6 668B15(70C40300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    36                              <1> ;    mov dh, byte [monthOfYear]
    37 000028ED 0FB60D(72C40300)    <1>     movzx ecx, byte [years]
    38 000028F4 8A05(75C40300)      <1>     mov al, byte [dayOfWeek]
    39 000028FA 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    40 000028FE 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    41                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002902 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                              <1> setDate:           ;ah = 2Bh
    43                              <1> ;	CX = year (1980-2099)
    44                              <1> ;   DH = month (1-12)
    45                              <1> ;	DL = day (1-31)
    46 00002903 E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    47                              <1>     return
    18                              <2> %%_ret:
    19 00002908 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> getTime:           ;ah = 2Ch
    49 00002909 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    50 0000290E E883330000          <1>     call getUserRegs
    51 00002913 668B0D(FAC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    52 0000291A 668B15(FCC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    53 00002921 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    54 00002925 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    55                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002929 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    56                              <1> setTime:           ;ah = 2Dh
    57                              <1> ;   CH = hour (0-23)
    58                              <1> ;	CL = minutes (0-59)
    59                              <1> ;	DH = seconds (0-59)
    60                              <1> ;	DL = hundredths (0-99)
    61 0000292A 80FD17              <1>     cmp ch, 23
    62 0000292D 7749                <1>     ja .exitBad
    63 0000292F 80F93B              <1>     cmp cl, 59
    64 00002932 7744                <1>     ja .exitBad
    65 00002934 80FE3B              <1>     cmp dh, 59
    66 00002937 773F                <1>     ja .exitBad
    67 00002939 80FA63              <1>     cmp dl, 99
    68 0000293C 773A                <1>     ja .exitBad
    69                              <1> ;Now we read date (updating internal count if necessary)
    70 0000293E E817010000          <1>     call readDateTimeRecord
    71 00002943 488D1D(F8C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    72 0000294A 0FB705(73C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    73 00002951 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    74 00002954 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    75 00002958 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    76 0000295C B906000000          <1>     mov ecx, 6
    77 00002961 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    78 00002964 E8CB310000          <1>     call primReqWriteSetup   ;rbx now points to request header
    79 00002969 488B35(4FC00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    80 00002970 E8362F0000          <1>     call goDriver
    81 00002975 30C0                <1>     xor al, al
    82                              <1>     return
    18                              <2> %%_ret:
    19 00002977 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> .exitBad:
    84 00002978 B0FF                <1>     mov al, -1
    85                              <1>     return
    18                              <2> %%_ret:
    19 0000297A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> ;------------------------
    87                              <1> ;   Utility functions   :
    88                              <1> ;------------------------
    89                              <1> writeDate:
    90 0000297B 6681F97800          <1>     cmp cx, 120
    91 00002980 0F83D1000000        <1>     jae .exitBad
    92 00002986 80FE0C              <1>     cmp dh, 12
    93 00002989 0F87C8000000        <1>     ja .exitBad
    94 0000298F 80FA1F              <1>     cmp dl, 31
    95 00002992 0F87BF000000        <1>     ja .exitBad
    96 00002998 668915(70C40300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    97                              <1>     ;mov byte [monthOfYear], dh
    98 0000299F 880D(72C40300)      <1>     mov byte [years], cl    ;Save the years count
    99 000029A5 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
   100 000029AA 88CD                <1>     mov ch, cl ;Get years count in ch
   101 000029AC C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   102 000029AF 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   103 000029B2 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   104 000029B5 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   105 000029BA F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   106                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   107 000029BC 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   108 000029BF 67E316              <1>     jecxz .addDay    ;Skip adding years
   109 000029C2 056E010000          <1>     add eax, 366    ;First add for a leap year
   110                              <1> .addYears:
   111 000029C7 FFC9                <1>     dec ecx
   112 000029C9 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   113 000029CC 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   114 000029D1 EBF4                <1>     jmp short .addYears
   115                              <1> .addLeap:
   116 000029D3 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   117                              <1> .addDay:
   118 000029D8 89C2                <1>     mov edx, eax    ;Save this number in edx
   119                              <1>     ;Now to add day offset
   120 000029DA 0FB60D(71C40300)    <1>     movzx ecx, byte [monthOfYear]
   121 000029E1 488D359DD6FFFF      <1>     lea rsi, monthsTbl
   122                              <1> .addDaysInMonth:
   123 000029E8 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   124 000029EA 67E308              <1>     jecxz .addMonthOffset
   125 000029ED AC                  <1>     lodsb   ;Get the number of days in the month in al
   126 000029EE 0FB6C0              <1>     movzx eax, al
   127 000029F1 01C2                <1>     add edx, eax
   128 000029F3 EBF3                <1>     jmp short .addDaysInMonth
   129                              <1> .addMonthOffset:
   130 000029F5 0FB60D(70C40300)    <1>     movzx ecx, byte [dayOfMonth]
   131 000029FC FFC9                <1>     dec ecx
   132 000029FE 01CA                <1>     add edx, ecx    ;Add month offset
   133                              <1>     ;edx has the number of days since 01/01/1980
   134 00002A00 668915(73C40300)    <1>     mov word [daysOffset], dx   ;Store!
   135                              <1> ;Now read and then write CLOCKrecrd
   136 00002A07 488D1D(F8C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   137 00002A0E B906000000          <1>     mov ecx, 6
   138 00002A13 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   139 00002A16 E824310000          <1>     call primReqReadSetup   ;rbx now points to request header
   140 00002A1B 488B35(4FC00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   141 00002A22 E8842E0000          <1>     call goDriver
   142                              <1> ;Now we change daycount and write it back
   143 00002A27 0FB705(73C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   144 00002A2E 488D1D(F8C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   145 00002A35 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   146 00002A38 B906000000          <1>     mov ecx, 6
   147 00002A3D 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   148 00002A40 E8EF300000          <1>     call primReqWriteSetup   ;rbx now points to request header
   149 00002A45 488B35(4FC00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   150 00002A4C E85A2E0000          <1>     call goDriver
   151 00002A51 E8AE000000          <1>     call setDayofWeek
   152                              <1>     return
    18                              <2> %%_ret:
    19 00002A56 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> .exitBad:
   154 00002A57 B0FF                <1>     mov al, -1
   155                              <1>     return
    18                              <2> %%_ret:
    19 00002A59 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> 
   157                              <1> readDateTimeRecord:
   158                              <1> ;Will read the clock using the primary request header
   159                              <1> ;Preserves all regs except eax and flags
   160 00002A5A 53                  <1>     push rbx
   161 00002A5B 51                  <1>     push rcx
   162 00002A5C 52                  <1>     push rdx
   163 00002A5D 56                  <1>     push rsi
   164 00002A5E 55                  <1>     push rbp
   165                              <1> 
   166 00002A5F 66C705(90DA0300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   166 00002A67 00                  <1>
   167 00002A68 488D1D(F8C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   168 00002A6F B906000000          <1>     mov ecx, 6
   169 00002A74 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   170                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   171                              <1> ; rbx = Data storage buffer ptr
   172                              <1> ; ecx = Number of sectors to transfer
   173                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   174 00002A77 E8C3300000          <1>     call primReqReadSetup   ;rbx now points to request header
   175 00002A7C 488B35(4FC00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   176 00002A83 E8232E0000          <1>     call goDriver
   177 00002A88 0FB705(F8C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   178                              <1> ;Here we have:  ax = Days since 1/1/1980
   179                              <1> ;Updates the internal date fields
   180                              <1> ;Internal time fields are in the clock record
   181                              <1> ;So now we check if the number of days since 1980 are the same.
   182                              <1> ;If so, we can skip updating.
   183 00002A8F 663B05(73C40300)    <1>     cmp ax, word [daysOffset]
   184 00002A96 7466                <1>     je .exit    ;Return if equal
   185 00002A98 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   186 00002A9D 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   187 00002A9F 668905(73C40300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   188                              <1>     ;Now want to update years, month and day fields
   189                              <1>     ;ax has the number of days since 01/01/1980
   190                              <1>     ;Get days in a 4 year period
   191 00002AA6 BBB5050000          <1>     mov ebx, 365*4 + 1
   192 00002AAB 31D2                <1>     xor edx, edx
   193 00002AAD 89D1                <1>     mov ecx, edx  ;Zero ecx
   194 00002AAF F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   195                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   196                              <1>     ;edx has offset into current 4 year bunch
   197 00002AB1 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   198 00002AB6 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   199 00002AB8 7210                <1>     jb .foundBunch
   200 00002ABA 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   201 00002ABC FFC1                <1>     inc ecx
   202 00002ABE FFCB                <1>     dec ebx ;Number of days in a normal year
   203                              <1> .findBunch:
   204 00002AC0 39DA                <1>     cmp edx, ebx
   205 00002AC2 7206                <1>     jb .foundBunch
   206 00002AC4 29DA                <1>     sub edx, ebx
   207 00002AC6 FFC1                <1>     inc ecx
   208 00002AC8 EBF6                <1>     jmp short .findBunch
   209                              <1> .foundBunch:
   210                              <1>     ;If ecx = 0, february has 29 days!
   211                              <1>     ;eax has number of four year bunches elapsed since 1980
   212 00002ACA C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   213 00002ACD 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   214                              <1>     ;ecx now has the number of years since 1980
   215 00002ACF E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   216                              <1> ;edx has number of days into the year we are in
   217                              <1> ;eax has number of days in Feb for this year
   218 00002AD4 488D35AAD5FFFF      <1>     lea rsi, monthsTbl
   219 00002ADB 31C9                <1>     xor ecx, ecx    ;Use as month counter
   220                              <1> .monthSearch:
   221 00002ADD FFC1                <1>     inc ecx ;Start from 1
   222 00002ADF AC                  <1>     lodsb   ;Get value in al and inc rsi
   223 00002AE0 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   224 00002AE3 39C2                <1>     cmp edx, eax
   225 00002AE5 7204                <1>     jb .monthFound
   226 00002AE7 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   227 00002AE9 EBF2                <1>     jmp short .monthSearch
   228                              <1> .monthFound:
   229                              <1>     ;cl has the month (01h-0Ch)
   230                              <1>     ;dl has the day of the month - 1
   231 00002AEB FFC2                <1>     inc edx
   232 00002AED 880D(71C40300)      <1>     mov byte [monthOfYear], cl
   233 00002AF3 8815(70C40300)      <1>     mov byte [dayOfMonth], dl
   234 00002AF9 E806000000          <1>     call setDayofWeek
   235                              <1> .exit:
   236 00002AFE 5D                  <1>     pop rbp
   237 00002AFF 5E                  <1>     pop rsi
   238 00002B00 5A                  <1>     pop rdx
   239 00002B01 59                  <1>     pop rcx
   240 00002B02 5B                  <1>     pop rbx
   241                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 00002B03 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> 
   243                              <1> setDayofWeek:
   244                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   245 00002B04 0FB705(73C40300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   246 00002B0B 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   247                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   248 00002B10 31D2                <1>     xor edx, edx
   249 00002B12 B907000000          <1>     mov ecx, 7   
   250 00002B17 F7F1                <1>     div ecx  ;Get remainder in dl
   251 00002B19 8815(75C40300)      <1>     mov byte [dayOfWeek], dl
   252                              <1> ;Set ZF to indicate all ok
   253 00002B1F 31C0                <1>     xor eax, eax
   254                              <1>     return
    18                              <2> %%_ret:
    19 00002B21 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   255                              <1> 
   256                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   257                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   258                              <1> ;Input: cl = Year - 1980
   259                              <1> ;Output: al = Number of days in February
   260 00002B22 880D(72C40300)      <1>     mov byte [years], cl    ;Save this figure
   261 00002B28 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   262 00002B2B 51                  <1>     push rcx
   263 00002B2C 57                  <1>     push rdi
   264 00002B2D B81C000000          <1>     mov eax, 28  ;Usual days in february
   265 00002B32 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   266 00002B37 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   267 00002B3A 488D3D45D5FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   268 00002B41 AA                  <1>     stosb   ;Store the word in rdi
   269 00002B42 5F                  <1>     pop rdi
   270 00002B43 59                  <1>     pop rcx
   271                              <1>     return
    18                              <2> %%_ret:
    19 00002B44 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   272                              <1> 
   273                              <1> getDirDTwords:
   274                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   275                              <1> ; High word of eax = Date
   276                              <1> ; Low word of eax = Time
   277                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   278                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   279                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   280                              <1> 
   281                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   282                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   283                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   284                              <1> ;Preserves all registers except eax
   285 00002B45 53                  <1>     push rbx
   286 00002B46 0FB61D(FDC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   287 00002B4D D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   288 00002B4F 89D8                <1>     mov eax, ebx
   289 00002B51 0FB61D(FAC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   290 00002B58 C1E305              <1>     shl ebx, 5
   291 00002B5B 09D8                <1>     or eax, ebx
   292 00002B5D 0FB61D(FBC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   293 00002B64 C1E30B              <1>     shl ebx, 11
   294 00002B67 09D8                <1>     or eax, ebx
   295 00002B69 0FB61D(70C40300)    <1>     movzx ebx, byte [dayOfMonth]
   296 00002B70 C1E310              <1>     shl ebx, 16
   297 00002B73 09D8                <1>     or eax, ebx
   298 00002B75 0FB61D(71C40300)    <1>     movzx ebx, byte [monthOfYear]
   299 00002B7C C1E315              <1>     shl ebx, 21
   300 00002B7F 09D8                <1>     or eax, ebx
   301 00002B81 0FB61D(72C40300)    <1>     movzx ebx, byte [years]
   302 00002B88 C1E319              <1>     shl ebx, 25
   303 00002B8B 09D8                <1>     or eax, ebx
   304 00002B8D 5B                  <1>     pop rbx
   305                              <1>     return
    18                              <2> %%_ret:
    19 00002B8E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   306                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   307                              <1> ;Returns edx = time
   308                              <1> ;        eax = date
   309                              <1> ; Formally ax and dx but we clear the upper words
   310 00002B8F E8C6FEFFFF          <1>     call readDateTimeRecord
   311 00002B94 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   312 00002B99 31D2                <1>     xor edx, edx
   313 00002B9B 6689C2              <1>     mov dx, ax  ;Save time
   314 00002B9E C1E810              <1>     shr eax, 10h    ;Get date into rax
   315                              <1>     return
    18                              <2> %%_ret:
    19 00002BA1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    31                              <1> ;FCB functions.
    32                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
    33                              <1> ;On FAT 32 volumes things are a bit more restricted.
    34                              <1> 
    35                              <1> ;The following functions ARE currently supported for general FAT 32 files:
    36                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
    37                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
    38                              <1> ;   parseFilename       (I mean, this function is useful anyway)
    39                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    40                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    41                              <1> ;   findNextFileFCB     (ditto the above)
    42                              <1> 
    43                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    44                              <1> ;   openFCB
    45                              <1> ;   closeFCB
    46                              <1> ;   createFCB
    47                              <1> ;   randomReadFCB
    48                              <1> ;   randomWriteFCB
    49                              <1> ;   randBlockReadFCB
    50                              <1> ;   randBlockWriteFCB
    51                              <1> ;   sequentialReadFCB
    52                              <1> ;   sequentialWriteFCB
    53                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    54                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    55                              <1> 
    56                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    57                              <1> ;Reading and Writing to the Volume label will silently return ok.
    58                              <1> ;Volume labels will be editable by being created/opened/closed.
    59                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    60                              <1> ; root directory always.
    61                              <1> 
    62                              <1> findFirstFileFCB:  ;ah = 11h
    63                              <1> ;Input: rdx -> FCB
    64 00002BA2 488915(F8C60300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    65 00002BA9 4889D6              <1>     mov rsi, rdx
    66 00002BAC 803EFF              <1>     cmp byte [rsi], -1
    67 00002BAF 7407                <1>     je .notExt1
    68 00002BB1 4881C607000000      <1>     add rsi, exFcb.driveNum
    69                              <1> .notExt1:
    70 00002BB8 0FB606              <1>     movzx eax, byte [rsi]
    71 00002BBB 50                  <1>     push rax    ;Push on stack the drive number
    72 00002BBC 488D3D(00C50300)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    73 00002BC3 E804030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    74 00002BC8 7306                <1>     jnc .fcbOk
    75 00002BCA 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    76 00002BCB E943350000          <1>     jmp fcbErrExit
    77                              <1> .fcbOk:
    78 00002BD0 488D3D(00C50300)    <1>     lea rdi, buffer1
    79 00002BD7 E80FE8FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    80 00002BDC 7306                <1>     jnc .fileFound
    81 00002BDE 5B                  <1>     pop rbx
    82 00002BDF E92F350000          <1>     jmp fcbErrExit
    83                              <1> .fileFound:
    84                              <1> ;Now we build an FFBlock internally
    85 00002BE4 488D3D(11C60300)    <1>     lea rdi, dosffblock
    86 00002BEB 57                  <1>     push rdi
    87 00002BEC E82BE7FFFF          <1>     call setupFFBlock
    88 00002BF1 5E                  <1>     pop rsi
    89                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    90 00002BF2 488B3D(F8C60300)    <1>     mov rdi, qword [workingFCB]
    91 00002BF9 F605(D9C60300)FF    <1>     test byte [extFCBFlag], -1
    92 00002C00 7407                <1>     jz .notExt2
    93 00002C02 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    94                              <1> .notExt2:
    95 00002C09 5B                  <1>     pop rbx ;Get back the drive number in bl
    96 00002C0A 85DB                <1>     test ebx, ebx
    97 00002C0C 7509                <1>     jnz .notCurrentDrive
    98 00002C0E 0FB61D(14C40300)    <1>     movzx ebx, byte [currentDrv]
    99 00002C15 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
   100                              <1> .notCurrentDrive:
   101 00002C17 AC                  <1>     lodsb   ;Get search drive from FFBlock in al
   102 00002C18 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
   103 00002C1B B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
   104 00002C20 A5                  <1>     movsd
   105 00002C21 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
   106 00002C22 488B3D(FAC30300)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
   107 00002C29 488D35(3CC60300)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
   108 00002C30 F605(D9C60300)FF    <1>     test byte [extFCBFlag], -1
   109 00002C37 7412                <1>     jz .notExt3
   110 00002C39 B8FFFFFFFF          <1>     mov eax, -1
   111 00002C3E AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
   112 00002C3F FFC0                <1>     inc eax ;Make it zero
   113 00002C41 AB                  <1>     stosd
   114 00002C42 AA                  <1>     stosb   ;Store 5 bytes of zero
   115 00002C43 0FB605(DAC60300)    <1>     movzx eax, byte [searchAttr]
   116 00002C4A AA                  <1>     stosb   ;Store the search attributes
   117                              <1> .notExt3:
   118 00002C4B 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
   119 00002C4D AA                  <1>     stosb
   120 00002C4E B904000000          <1>     mov ecx, fatDirEntry_size/8
   121 00002C53 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
   122 00002C56 E9B5340000          <1>     jmp fcbGoodExit
   123                              <1>     
   124                              <1> findNextFileFCB:   ;ah = 12h
   125 00002C5B 488915(F8C60300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
   126 00002C62 C605(D9C60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
   127 00002C69 C605(DAC60300)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
   128 00002C70 4889D6              <1>     mov rsi, rdx
   129                              <1> 
   130 00002C73 803EFF              <1>     cmp byte [rsi], -1
   131 00002C76 7514                <1>     jne .notExt
   132 00002C78 FE0D(D9C60300)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   133 00002C7E 4881C606000000      <1>     add rsi, exFcb.attribute
   134 00002C85 AC                  <1>     lodsb   ;Get search attr in al
   135 00002C86 8805(DAC60300)      <1>     mov byte [searchAttr], al
   136                              <1> .notExt:
   137                              <1>     ;rsi points to drive letter
   138 00002C8C 488D3D(11C60300)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   139 00002C93 31C0                <1>     xor eax, eax
   140 00002C95 AC                  <1>     lodsb   ;Get the FCB drive letter
   141 00002C96 50                  <1>     push rax    ;Push drive letter on the stack
   142 00002C97 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   143 00002C9A AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   144 00002C9B B905000000          <1>     mov ecx, 5
   145 00002CA0 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   146 00002CA2 FF35(FAC30300)      <1>     push qword [currentDTA] ;Save original currentDTA
   147 00002CA8 488D3D(11C60300)    <1>     lea rdi, dosffblock
   148 00002CAF 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   149 00002CB0 8F05(FAC30300)      <1>     pop qword [currentDTA]
   150 00002CB6 E811E3FFFF          <1>     call findNextMain
   151 00002CBB 8F05(FAC30300)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   152 00002CC1 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   153 00002CC7 488B3D(F8C60300)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   154 00002CCE F607FF              <1>     test byte [rdi], -1
   155 00002CD1 7407                <1>     jz .notExt2
   156 00002CD3 4881C707000000      <1>     add rdi, exFcb.driveNum
   157                              <1> .notExt2:
   158 00002CDA 5B                  <1>     pop rbx ;Get the drive letter back into bl
   159 00002CDB 881F                <1>     mov byte [rdi], bl
   160 00002CDD E931340000          <1>     jmp fcbErrExit  ;And exit bad
   161                              <1> 
   162                              <1> deleteFileFCB:     ;ah = 13h
   163 00002CE2 488D3D(00C50300)    <1>     lea rdi, buffer1
   164 00002CE9 57                  <1>     push rdi
   165 00002CEA E8DD010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   166 00002CEF 5F                  <1>     pop rdi ;Point rdi to the canonised path
   167 00002CF0 0F821D340000        <1>     jc fcbErrExit
   168 00002CF6 E8F0E6FFFF          <1>     call getFilePathNoCanon ;Get the file
   169 00002CFB 0F8212340000        <1>     jc fcbErrExit
   170 00002D01 E8110D0000          <1>     call outerDeleteMain
   171 00002D06 0F8207340000        <1>     jc fcbErrExit
   172 00002D0C E9FF330000          <1>     jmp fcbGoodExit
   173                              <1> 
   174                              <1> renameFileFCB:     ;ah = 17h
   175                              <1> ;Input: rdx -> User FCB
   176 00002D11 488915(F8C60300)    <1>     mov qword [workingFCB], rdx
   177                              <1>     ;First we get the drive letter 
   178 00002D18 4889D6              <1>     mov rsi, rdx
   179 00002D1B 803EFF              <1>     cmp byte [rsi], -1
   180 00002D1E 7507                <1>     jne .notExt
   181 00002D20 4881C607000000      <1>     add rsi, exFcb.driveNum
   182                              <1> .notExt:
   183 00002D27 31C0                <1>     xor eax, eax
   184 00002D29 AC                  <1>     lodsb
   185 00002D2A 50                  <1>     push rax    ;Push the drive letter on the stack for now
   186 00002D2B 488D3D(00C50300)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   187 00002D32 E895010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   188 00002D37 723D                <1>     jc .badPop
   189 00002D39 FF35(00C60300)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   190 00002D3F 8F05(08C60300)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   191 00002D45 58                  <1>     pop rax ;Get drive letter back
   192 00002D46 488D3D(80C50300)    <1>     lea rdi, buffer2
   193 00002D4D E84E010000          <1>     call fcbInitName2
   194 00002D52 7223                <1>     jc short .bad
   195 00002D54 488B05(08C60300)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   196 00002D5B 488705(00C60300)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   197 00002D62 488905(08C60300)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   198 00002D69 E8DE090000          <1>     call renameMain
   199 00002D6E 0F839C330000        <1>     jnc fcbGoodExit
   200 00002D74 EB01                <1>     jmp short .bad
   201                              <1> .badPop:
   202 00002D76 5B                  <1>     pop rbx ;Pop drive number off stack
   203                              <1> .bad:
   204 00002D77 E997330000          <1>     jmp fcbErrExit
   205                              <1> 
   206                              <1> getFileSizeFCB:    ;ah = 23h
   207                              <1> ;This function which can be used to test existance of file without opening it 
   208                              <1> ;Input: rdx -> FCB
   209 00002D7C 488915(F8C60300)    <1>     mov qword [workingFCB], rdx
   210 00002D83 488D3D(00C50300)    <1>     lea rdi, buffer1
   211 00002D8A 57                  <1>     push rdi
   212 00002D8B E83C010000          <1>     call fcbInitRoutine
   213 00002D90 5F                  <1>     pop rdi
   214 00002D91 0F827C330000        <1>     jc fcbErrExit
   215 00002D97 E84FE6FFFF          <1>     call getFilePathNoCanon
   216 00002D9C 0F8271330000        <1>     jc fcbErrExit
   217 00002DA2 8B05(58C60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   218                              <1>     ;Now we gotta set up FCB randRecrd Field
   219 00002DA8 488B35(F8C60300)    <1>     mov rsi, qword [workingFCB]
   220 00002DAF 803EFF              <1>     cmp byte [rsi], -1
   221 00002DB2 7507                <1>     jne .notExtended
   222 00002DB4 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   223                              <1> .notExtended:
   224                              <1> ;rsi points to the drive number now
   225 00002DBB 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   226 00002DBF F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   227 00002DC1 85D2                <1>     test edx, edx
   228 00002DC3 7402                <1>     jz .noRemainder
   229 00002DC5 FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   230                              <1> .noRemainder:
   231 00002DC7 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   232 00002DCA E941330000          <1>     jmp fcbGoodExit
   233                              <1> 
   234                              <1> setDTA:            ;ah = 1Ah, Always can be used
   235                              <1> ;Called with:
   236                              <1> ;   rdx = Pointer to the new default DTA
   237 00002DCF 488B1D(5DC40300)    <1>     mov rbx, qword [oldRSP]
   238 00002DD6 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   239 00002DDA 488915(FAC30300)    <1>     mov qword [currentDTA], rdx
   240 00002DE1 C3                  <1>     ret
   241                              <1> 
   242                              <1> getDTA:            ;ah = 2Fh, Always can be used
   243 00002DE2 488B15(5DC40300)    <1>     mov rdx, qword [oldRSP]
   244 00002DE9 488B1D(FAC30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   245 00002DF0 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   246                              <1>     return
    18                              <2> %%_ret:
    19 00002DF4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1>     
   248                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   249                              <1> ;Input:
   250                              <1> ;rsi points to a command line to parse
   251                              <1> ;rdi points to a future unopened FCB
   252                              <1> ;al = parsing control bits. 
   253                              <1> ; al[0] = If set, leading filename separators are scanned off
   254                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   255                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   256                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   257                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   258                              <1> ;        al = 1 => Wildcards found
   259                              <1> ;        al = -1 => Drive specifier invalid
   260                              <1> ;rsi -> to the first char past the parsed filename
   261                              <1> ;rdi -> First byte of the FCB 
   262                              <1> 
   263 00002DF5 E872010000          <1>     call parseNameToFCB
   264 00002DFA 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   265 00002DFB E8962E0000          <1>     call getUserRegs
   266 00002E00 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   267                              <1>     return  ;al now contains dl, the signature, special unique return type
    18                              <2> %%_ret:
    19 00002E03 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   268                              <1> 
   269                              <1> ;=================================================================
   270                              <1> ;=================================================================
   271                              <1> ;These functions CHECK the Volume type and fail if the volume is 
   272                              <1> ; not compatible.
   273                              <1> ;=================================================================
   274                              <1> ;=================================================================
   275                              <1> openFileFCB:       ;ah = 0Fh
   276 00002E04 B805000000          <1>     mov eax, errAccDen
   277 00002E09 E905330000          <1>     jmp fcbErrExit
   278                              <1> closeFileFCB:      ;ah = 10h
   279 00002E0E B805000000          <1>     mov eax, errAccDen
   280 00002E13 E9FB320000          <1>     jmp fcbErrExit
   281                              <1> sequentialReadFCB: ;ah = 14h
   282 00002E18 B805000000          <1>     mov eax, errAccDen
   283 00002E1D E9F1320000          <1>     jmp fcbErrExit
   284                              <1> sequentialWriteFCB:;ah = 15h
   285 00002E22 B805000000          <1>     mov eax, errAccDen
   286 00002E27 E9E7320000          <1>     jmp fcbErrExit
   287                              <1> createFileFCB:     ;ah = 16h
   288 00002E2C B805000000          <1>     mov eax, errAccDen
   289 00002E31 E9DD320000          <1>     jmp fcbErrExit
   290                              <1> randomReadFCB:     ;ah = 21h
   291 00002E36 B805000000          <1>     mov eax, errAccDen
   292 00002E3B E9D3320000          <1>     jmp fcbErrExit
   293                              <1> randomWriteFCB:    ;ah = 22h
   294 00002E40 B805000000          <1>     mov eax, errAccDen
   295 00002E45 E9C9320000          <1>     jmp fcbErrExit
   296                              <1> setRelRecordFCB:   ;ah = 24h
   297 00002E4A B805000000          <1>     mov eax, errAccDen
   298 00002E4F E9BF320000          <1>     jmp fcbErrExit
   299                              <1> randBlockReadFCB:  ;ah = 27h
   300 00002E54 B805000000          <1>     mov eax, errAccDen
   301 00002E59 E9B5320000          <1>     jmp fcbErrExit
   302                              <1> randBlockWriteFCB: ;ah = 28h
   303 00002E5E B805000000          <1>     mov eax, errAccDen
   304 00002E63 E9AB320000          <1>     jmp fcbErrExit
   305                              <1> 
   306                              <1> 
   307                              <1> ;--------------------------------
   308                              <1> ;  Common FCB related Routines  :
   309                              <1> ;--------------------------------
   310                              <1> fcbCheckDriveType:
   311                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   312                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   313                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   314                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   315                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   316                              <1> ;If a net CDS, automatic fail (for now).
   317 00002E68 C605(D7C60300)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   318 00002E6F 51                  <1>     push rcx
   319 00002E70 57                  <1>     push rdi
   320 00002E71 55                  <1>     push rbp
   321 00002E72 9C                  <1>     pushfq
   322 00002E73 F605(47C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   323 00002E7A 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   324 00002E7C E8A82D0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   325 00002E81 7218                <1>     jc .exit
   326                              <1>     ;rdi has cds ptr now
   327 00002E83 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   328 00002E87 E8B2DDFFFF          <1>     call getFATtype
   329 00002E8C 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   330 00002E92 7707                <1>     ja .exit
   331                              <1> .okToGo:
   332 00002E94 C605(D7C60300)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   333                              <1> .exit:
   334 00002E9B 9D                  <1>     popfq
   335 00002E9C 5D                  <1>     pop rbp
   336 00002E9D 5F                  <1>     pop rdi
   337 00002E9E 59                  <1>     pop rcx
   338                              <1>     return
    18                              <2> %%_ret:
    19 00002E9F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> fcbInitName2:
   340                              <1> ;Must be called after fcbInitRoutine has been run once
   341                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   342                              <1> ;       rdx -> UserFCB
   343                              <1> ;       eax[0] = Drive number (0 based)
   344 00002EA0 55                  <1>     push rbp
   345 00002EA1 4889E5              <1>     mov rbp, rsp
   346 00002EA4 4881EC0F000000      <1>     sub rsp, 15
   347 00002EAB 57                  <1>     push rdi
   348 00002EAC 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   349 00002EB0 4889D6              <1>     mov rsi, rdx
   350 00002EB3 F605(D9C60300)FF    <1>     test byte [extFCBFlag], -1
   351 00002EBA 7407                <1>     jz .notExtended
   352 00002EBC 4881C607000000      <1>     add rsi, exFcb.driveNum
   353                              <1> .notExtended:
   354                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   355 00002EC3 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   356 00002ECA EB36                <1>     jmp short fcbInitRoutine.rename2EP
   357                              <1> fcbInitRoutine:
   358                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   359                              <1> ;Input: rdx -> User FCB
   360                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   361 00002ECC 55                  <1>     push rbp
   362 00002ECD 4889E5              <1>     mov rbp, rsp
   363 00002ED0 4881EC0F000000      <1>     sub rsp, 15    ;Make 15 char space on stack
   364                              <1>     ;This space is used to store X:FILENAME.EXT,0
   365 00002ED7 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   366 00002ED8 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   367 00002EDC C605(D9C60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   368 00002EE3 C605(DAC60300)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   369 00002EEA E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   370 00002EEF 7410                <1>     jz .notExtended
   371 00002EF1 C605(D9C60300)FF    <1>     mov byte [extFCBFlag], -1
   372 00002EF8 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   373 00002EFB 8805(DAC60300)      <1>     mov byte [searchAttr], al
   374                              <1> .notExtended:
   375 00002F01 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   376                              <1> .rename2EP:
   377 00002F02 E81C2E0000          <1>     call getCDS ;Get the CDS (preserves rdi)
   378 00002F07 723F                <1>     jc .badDisk
   379 00002F09 E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   380 00002F0E 488D1D3CD3FFFF      <1>     lea rbx, asciiCharProperties
   381 00002F15 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   382 00002F1A 56                  <1>     push rsi    ;rsi -> fcb.filename
   383                              <1> .nameCharCheck:
   384 00002F1B AC                  <1>     lodsb   ;Get the char in al
   385 00002F1C D7                  <1>     xlatb   ;Get the char signature in al
   386 00002F1D A808                <1>     test al, 8
   387 00002F1F 7427                <1>     jz .badDisk
   388 00002F21 FFC9                <1>     dec ecx
   389 00002F23 75F6                <1>     jnz .nameCharCheck
   390 00002F25 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   391 00002F26 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   392 00002F29 E8AEE3FFFF          <1>     call FCBToAsciiz
   393 00002F2E 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   394 00002F2F 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   395 00002F32 7414                <1>     je .badDisk
   396 00002F34 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   397 00002F38 55                  <1>     push rbp
   398 00002F39 E874E4FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename
   399 00002F3E 5D                  <1>     pop rbp
   400 00002F3F 7207                <1>     jc .badDisk
   401 00002F41 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   402 00002F46 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   403                              <1> .badDisk:
   404 00002F48 B003                <1>     mov al, errPnf  ;DOS does this... so will I
   405 00002F4A F9                  <1>     stc
   406                              <1> .jiggleStack:
   407 00002F4B 4889EC              <1>     mov rsp, rbp
   408 00002F4E 5D                  <1>     pop rbp
   409                              <1> .exit:
   410                              <1>     return
    18                              <2> %%_ret:
    19 00002F4F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> storeZeroBasedDriveNumber:
   413                              <1> ;Input: al => 0 based drive letter
   414                              <1> ;       rdi -> Points to buffer to store the X: in
   415 00002F50 FEC0                <1>     inc al
   416                              <1> storeOneBasedDriveNumber:
   417                              <1> ;Input: al => 1 based drive letter
   418                              <1> ;       rdi -> Points to buffer to store the X: in
   419 00002F52 0440                <1>     add al, "@"
   420 00002F54 B43A                <1>     mov ah, ":"
   421 00002F56 66AB                <1>     stosw
   422                              <1>     return
    18                              <2> %%_ret:
    19 00002F58 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   423                              <1> 
   424                              <1> isFCBExtended:
   425                              <1> ;Input: rdx = FCB ptr
   426                              <1> ;Output: rsi -> Drive letter of FCB
   427                              <1> ;        rdx -> FCB first byte
   428                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   429 00002F59 4889D6              <1>     mov rsi, rdx
   430 00002F5C 803EFF              <1>     cmp byte [rsi], -1
   431 00002F5F 7507                <1>     jne .notExtended
   432 00002F61 4881C607000000      <1>     add rsi, exFcb.driveNum
   433                              <1> .notExtended:
   434 00002F68 4839F2              <1>     cmp rdx, rsi
   435                              <1>     return
    18                              <2> %%_ret:
    19 00002F6B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   436                              <1> 
   437                              <1> parseNameToFCB:
   438                              <1> ;rsi points to a command line to parse
   439                              <1> ;rdi points to a future unopened FCB
   440                              <1> ;al = parsing control bits. 
   441                              <1> ; al[0] = If set, leading filename separators are scanned off
   442                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   443                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   444                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   445                              <1> ;
   446                              <1> ;Separators include : . ; , = + TAB SPACE
   447                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   448                              <1> 
   449 00002F6C C605(6FC40300)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   450 00002F73 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   451 00002F75 A802                <1>     test al, 2  ;Set drive letter>
   452 00002F77 7402                <1>     jz .skipDriveLetter
   453 00002F79 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   454                              <1> .skipDriveLetter:
   455 00002F7B 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   456 00002F7E B908000000          <1>     mov ecx, 8  ;Copy Filename
   457 00002F83 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   458 00002F85 93                  <1>     xchg eax, ebx
   459 00002F86 B020                <1>     mov al, " " ;Clear the field
   460 00002F88 7405                <1>     jz .clearFilenameField
   461 00002F8A 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   462 00002F8D 31C9                <1>     xor ecx, ecx
   463                              <1> .clearFilenameField:
   464 00002F8F F3AA                <1>     rep stosb
   465 00002F91 B903000000          <1>     mov ecx, 3
   466 00002F96 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   467 00002F99 7405                <1>     jz .clearExtensionField
   468 00002F9B 4801CF              <1>     add rdi, rcx
   469 00002F9E 31C9                <1>     xor ecx, ecx
   470                              <1> .clearExtensionField:
   471 00002FA0 F3AA                <1>     rep stosb
   472 00002FA2 91                  <1>     xchg eax, ecx
   473 00002FA3 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   474 00002FA4 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   475 00002FAB F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   476 00002FAE 740F                <1>     jz .dontScanOff
   477 00002FB0 E8502F0000          <1>     call skipSpacesAndTabs
   478 00002FB5 E8572F0000          <1>     call isCharDelimType
   479 00002FBA 7508                <1>     jnz .skipIfDelim
   480 00002FBC 48FFC6              <1>     inc rsi
   481                              <1> .dontScanOff:
   482 00002FBF E8412F0000          <1>     call skipSpacesAndTabs  ;Skip a char
   483                              <1> .skipIfDelim:
   484 00002FC4 E8F22D0000          <1>     call uppercaseCharAtPtr 
   485 00002FC9 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   486 00002FCB 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   487 00002FCE 7519                <1>     jne .skipSettingDriveLetter
   488 00002FD0 48FFC6              <1>     inc rsi ;Goto next char
   489 00002FD3 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   490 00002FD5 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   491 00002FD7 50                  <1>     push rax    ;Save the 1 based drive letter
   492 00002FD8 E8DD2C0000          <1>     call setDrive   ;Verifies if this drive letter is valid
   493 00002FDD 58                  <1>     pop rax
   494 00002FDE 7302                <1>     jnc .validDriveLetter
   495                              <1> .invalidDriveLetter:
   496 00002FE0 B2FF                <1>     mov dl, -1
   497                              <1> .validDriveLetter:
   498 00002FE2 AA                  <1>     stosb
   499 00002FE3 48FFC6              <1>     inc rsi ;Align pointers...
   500 00002FE6 48FFCF              <1>     dec rdi 
   501                              <1> .skipSettingDriveLetter:
   502 00002FE9 48FFCE              <1>     dec rsi
   503 00002FEC 48FFC7              <1>     inc rdi
   504                              <1>     
   505                              <1> getFCBFilename:
   506                              <1> ;Input: rsi points to first char of filename
   507                              <1> ;       rdi points to storage buffer for filename
   508                              <1> ;       dl contains the signature if drive invalid
   509                              <1> ;Output:
   510                              <1> ;       Fields filled
   511                              <1> ;       al = Return signature
   512 00002FEF B908000000          <1>     mov ecx, 8
   513 00002FF4 E815000000          <1>     call getFCBNameField
   514 00002FF9 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   515 00002FFC 750D                <1>     jne .noExt
   516 00002FFE B903000000          <1>     mov ecx, 3
   517 00003003 48FFC6              <1>     inc rsi ;Skip this char
   518 00003006 E814000000          <1>     call forceFCBNameField
   519                              <1> .noExt:
   520 0000300B 88D0                <1>     mov al, dl  ;Store the return signature
   521                              <1>     return
    18                              <2> %%_ret:
    19 0000300D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   522                              <1> 
   523                              <1> getFCBNameField:
   524                              <1> ;Checks if the field is appropriate before copying it
   525 0000300E E8A82D0000          <1>     call uppercaseCharAtPtr
   526 00003013 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   527 00003015 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   528 00003018 48FFCE              <1>     dec rsi ;Point to previous char
   529                              <1>     return
    18                              <2> %%_ret:
    19 0000301B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> .okName:
   531 0000301C 48FFCE              <1>     dec rsi ;Go back now a char
   532                              <1> forceFCBNameField:
   533                              <1> ;Forcefully copies the name from rsi to rdi
   534 0000301F E8972D0000          <1>     call uppercaseCharAtPtr
   535 00003024 7226                <1>     jc .terminatingSpace
   536 00003026 750D                <1>     jnz .notSep
   537 00003028 F605(6FC40300)FF    <1>     test byte [fcbSpaceOk], -1
   538 0000302F 741B                <1>     jz .terminatingSpace
   539 00003031 3C20                <1>     cmp al, " "
   540 00003033 7517                <1>     jne .terminatingSpace
   541                              <1> .notSep:
   542 00003035 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   543 00003038 FFC9                <1>     dec ecx
   544 0000303A 3C2A                <1>     cmp al, "*" ;Big wildcard?
   545 0000303C 7504                <1>     jne .notBigWildcard
   546 0000303E B03F                <1>     mov al, "?"
   547 00003040 F3AA                <1>     rep stosb
   548                              <1> .notBigWildcard:
   549 00003042 AA                  <1>     stosb   ;Stores the uppercased char
   550 00003043 3C3F                <1>     cmp al, "?"
   551 00003045 75D8                <1>     jne forceFCBNameField
   552 00003047 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   553 0000304A EBD3                <1>     jmp short forceFCBNameField
   554                              <1> .terminatingSpace:
   555 0000304C B020                <1>     mov al, " "
   556 0000304E AA                  <1>     stosb
   557 0000304F 48FFCE              <1>     dec rsi ;Point to this trailing space
   558                              <1>     return
    18                              <2> %%_ret:
    19 00003052 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    32                              <1> ;-----------------------------------:
    33                              <1> ;    File Handle Kernel routines    :
    34                              <1> ;-----------------------------------:
    35                              <1> 
    36                              <1> createFileHdl:     ;ah = 3Ch, handle function
    37                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    38                              <1> ;       rdx = Ptr to ASCIZ filename to create
    39                              <1> ;Output: CF=CY => ax = File handle
    40                              <1> ;        CF=NC => al = Error code
    41 00003053 51                  <1>     push rcx    ;Save file attributes on stack
    42 00003054 488D0D5C0B0000      <1>     lea rcx, createMain
    43 0000305B C605(DAC60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
    44 00003062 EB1D                <1>     jmp short openFileHdl.openCommon
    45                              <1> openFileHdl:       ;ah = 3Dh, handle function
    46                              <1> ;Input: al = Open mode, to open file with
    47                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    48                              <1> ;If called from 5D00h, cl = File attributes too
    49                              <1> ;Output: CF=CY => ax = File handle
    50                              <1> ;        CF=NC => al = Error code
    51 00003064 BB16000000          <1>     mov ebx, dirInclusive
    52 00003069 F605(E0C60300)FF    <1>     test byte [dosInvoke], -1
    53 00003070 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    54 00003073 880D(DAC60300)      <1>     mov byte [searchAttr], cl
    55 00003079 488D0D510A0000      <1>     lea rcx, openMain  
    56 00003080 50                  <1>     push rax    ;Save open mode on stack
    57                              <1> .openCommon:
    58 00003081 4889D6              <1>     mov rsi, rdx
    59 00003084 E8C42D0000          <1>     call checkPathspecOK
    60 00003089 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    61                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    62 0000308B 58                  <1>     pop rax
    63 0000308C B803000000          <1>     mov eax, errPnf
    64 00003091 E99D300000          <1>     jmp extErrExit
    65                              <1> .pathOk:
    66 00003096 E84D300000          <1>     call dosCrit1Enter
    67 0000309B E8A7160000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    68 000030A0 E84D300000          <1>     call dosCrit1Exit
    69 000030A5 0F82AF000000        <1>     jc .exitBad
    70                              <1>     ;Now save variables
    71 000030AB E8D0150000          <1>     call setCurrentSFT
    72 000030B0 66891D(18C70300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    73 000030B7 E83D170000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    74 000030BC 0F8298000000        <1>     jc .exitBad
    75 000030C2 66891D(1AC70300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    76 000030C9 48893D(08C70300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    77 000030D0 0FB71D(18C70300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    78 000030D7 881F                <1>     mov byte [rdi], bl  ;And open the file
    79                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    80 000030D9 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    81 000030DC 488D3D(00C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    82 000030E3 51                  <1>     push rcx    ;Save the procedure to call on stack
    83 000030E4 E80DE3FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    84 000030E9 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    85 000030EA 488D05E0090000      <1>     lea rax, openMain   ;Get EA for open procedure
    86 000030F1 488B35(10C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    87 000030F8 7319                <1>     jnc .proceedCall
    88                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    89                              <1> ;                              For Create New, Bad but handled later.
    90                              <1> ;If CF=CY => Path doesnt all exist:
    91                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    92                              <1> ;Now we check if we are creating or opening.
    93 000030FA 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    94 000030FD 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    95 000030FF F605(E3C60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    96 00003106 750B                <1>     jnz .proceedCall    ;If so, proceed.
    97                              <1> .badPathspec:
    98 00003108 58                  <1>     pop rax
    99 00003109 B802000000          <1>     mov eax, errFnf
   100 0000310E E957000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
   101                              <1> .proceedCall:
   102                              <1> ;If the pathspec exists, recall that for create, we truncate.
   103 00003113 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
   104 00003115 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
   105 00003118 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
   106 00003119 750B                <1>     jne .callProc   ;Jump if we are creating
   107                              <1>     ;al means openmode here
   108 0000311B A880                <1>     test al, 80h    ;No Inherit bit set?
   109 0000311D 7407                <1>     jz .callProc
   110 0000311F 247F                <1>     and al, 7Fh     ;Clear this bit
   111 00003121 B900100000          <1>     mov ecx, devNoInherit
   112                              <1> .callProc:
   113 00003126 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   114 0000312C 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   115 00003132 51                  <1>     push rcx    ;Save the device word 
   116 00003133 FFD3                <1>     call rbx    ;Enter with open mode in 
   117 00003135 59                  <1>     pop rcx
   118 00003136 488B35(10C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   119 0000313D 722B                <1>     jc .exitBad2
   120 0000313F 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   121 00003144 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   122 00003148 0FB705(1AC70300)    <1>     movzx eax, word [currentHdl]
   123 0000314F FF15(02C10300)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   124 00003155 E9CB2F0000          <1>     jmp extGoodExit ;Save ax and return OK
   125                              <1> .exitBad:
   126 0000315A FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   127 0000315B 5B                  <1>     pop rbx ;Pop the word from the stack
   128 0000315C 66C705(18C70300)FF- <1>     mov word [currentNdx], -1
   128 00003164 FF                  <1>
   129 00003165 E9C92F0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   130                              <1> .exitBad2:
   131                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   132 0000316A 488B35(08C70300)    <1>     mov rsi, qword [curHdlPtr]
   133 00003171 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   134 00003174 488B35(10C70300)    <1>     mov rsi, qword [currentSFT]
   135 0000317B 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   136 00003180 66C705(18C70300)FF- <1>     mov word [currentNdx], -1
   136 00003188 FF                  <1>
   137 00003189 E9A52F0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   138                              <1> 
   139                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   140                              <1> ;Input: bx = file handle to close
   141 0000318E E87C160000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   142 00003193 0F829A2F0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   143 00003199 E8E2140000          <1>     call setCurrentSFT  ;Set this as the current SFT
   144                              <1>     ;Check count to see if we need to check share mode
   145 0000319E 31C0                <1>     xor eax, eax    ;Preset ax to 0
   146 000031A0 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   147 000031A5 7406                <1>     je .skipShareCheck
   148                              <1>     ;Now check sharing mode
   149 000031A7 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   150 000031AB 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   151                              <1> .skipShareCheck:
   152 000031AD 50                  <1>     push rax    ;Save the share mode on stack
   153 000031AE E8CB0C0000          <1>     call closeMain  ;Call close main!
   154 000031B3 58                  <1>     pop rax 
   155 000031B4 0F82792F0000        <1>     jc extErrExit   ;If an error, exit through error exit
   156 000031BA 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   157 000031BC 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   158 000031BE E818160000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   159 000031C3 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   160                              <1> .exitOk:
   161 000031C6 31C0                <1>     xor eax, eax    ;Return value
   162 000031C8 E9582F0000          <1>     jmp extGoodExit
   163                              <1> 
   164                              <1> readFileHdl:       ;ah = 3Fh, handle function
   165 000031CD 488D35310D0000      <1>     lea rsi, readBytes
   166                              <1> .common:
   167 000031D4 E836160000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   168 000031D9 0F82542F0000        <1>     jc extErrExit   ;Error code in al and exit
   169 000031DF E89C140000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   170 000031E4 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   171 000031E6 FF35(FAC30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   172 000031EC 488915(FAC30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   173 000031F3 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   174 000031F5 8F05(FAC30300)      <1>     pop qword [currentDTA]
   175 000031FB 0F82322F0000        <1>     jc extErrExit   ;Error code in al and exit
   176 00003201 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   177 00003203 E9142F0000          <1>     jmp extGoodExit2    ;and exit!
   178                              <1> 
   179                              <1> writeFileHdl:      ;ah = 40h, handle function
   180 00003208 488D35F30F0000      <1>     lea rsi, writeBytes
   181 0000320F E9C0FFFFFF          <1>     jmp readFileHdl.common
   182                              <1> 
   183                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   184                              <1> ;Here don't allow malformed chars unless it is a network CDS
   185 00003214 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   186 00003219 F605(E0C60300)FF    <1>     test byte [dosInvoke], -1
   187 00003220 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   188 00003223 880D(DAC60300)      <1>     mov byte [searchAttr], cl
   189 00003229 4889D6              <1>     mov rsi, rdx
   190 0000322C E81C2C0000          <1>     call checkPathspecOK
   191 00003231 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   192 00003233 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   193                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   194 00003235 F605(E0C60300)FF    <1>     test byte [dosInvoke], -1
   195 0000323C 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   196                              <1> .badPath:
   197 0000323E B803000000          <1>     mov eax, errPnf
   198 00003243 E9EB2E0000          <1>     jmp extErrExit
   199                              <1> .pathOk:
   200 00003248 488D3D(00C50300)    <1>     lea rdi, buffer1
   201 0000324F 52                  <1>     push rdx
   202 00003250 E8A1E1FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   203 00003255 5A                  <1>     pop rdx
   204 00003256 0F82D72E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   205                              <1>     ;In the case of a wildcard, recall this will return the first file
   206 0000325C 803D(E2C60300)FF    <1>     cmp byte [fileExist], -1
   207 00003263 0F85CA2E0000        <1>     jnz extErrExit
   208 00003269 E8A9070000          <1>     call outerDeleteMain
   209 0000326E 0F82BF2E0000        <1>     jc extErrExit
   210 00003274 E9AC2E0000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   213                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   214 00003279 E891150000          <1>     call getSFTPtr
   215 0000327E 0F82AF2E0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   216 00003284 3C03                <1>     cmp al, 3
   217 00003286 720A                <1>     jb .validFunction
   218 00003288 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   219 0000328D E9A12E0000          <1>     jmp extErrExit
   220                              <1> .validFunction:
   221 00003292 3C01                <1>     cmp al, 1
   222 00003294 7718                <1>     ja .seekend
   223 00003296 7203                <1>     jb .seekset
   224                              <1> ;Here we are at seekcur, seek from current (signed)
   225 00003298 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   226                              <1> .seekset:
   227                              <1> ;Seek from the start (unsigned)
   228 0000329B 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   229 0000329E E8F3290000          <1>     call getUserRegs    ;Get user regs in rsi
   230 000032A3 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   231                              <1> .seekExit:
   232 000032A6 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   233 000032A9 E96E2E0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   234                              <1> .seekend:
   235                              <1> ;Here we are at seekend, seek from end (signed)
   236 000032AE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   237 000032B4 7505                <1>     jnz .netCheck
   238                              <1> .proceedDisk:
   239 000032B6 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   240 000032B9 EBE0                <1>     jmp short .seekset
   241                              <1> .netCheck:
   242 000032BB 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   243 000032C1 75F3                <1>     jnz .proceedDisk
   244 000032C3 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   245                              <1>     ;Check it's share mode
   246 000032C7 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   247 000032CC 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   248 000032D1 7407                <1>     je .netSeek
   249 000032D3 3D30000000          <1>     cmp eax, denyReadShare
   250 000032D8 75DC                <1>     jne .proceedDisk
   251                              <1> .netSeek:
   252 000032DA B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   253 000032DF CD4F                <1>     int 4Fh
   254 000032E1 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   255 000032E3 E94B2E0000          <1>     jmp extErrExit
   256                              <1> 
   257                              <1> 
   258                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   259 000032E8 3C01                <1>     cmp al, 1
   260 000032EA 760A                <1>     jbe .subFuncOk
   261 000032EC B801000000          <1>     mov eax, errInvFnc
   262 000032F1 E93D2E0000          <1>     jmp extErrExit
   263                              <1> .subFuncOk:
   264 000032F6 4889D6              <1>     mov rsi, rdx
   265 000032F9 89C3                <1>     mov ebx, eax    ;Store function code in bl
   266 000032FB 53                  <1>     push rbx
   267 000032FC 51                  <1>     push rcx
   268 000032FD E84B2B0000          <1>     call checkPathspecOK
   269 00003302 730C                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   270                              <1> .badPath:
   271 00003304 59                  <1>     pop rcx
   272 00003305 5B                  <1>     pop rbx
   273 00003306 B803000000          <1>     mov eax, errPnf
   274 0000330B E9232E0000          <1>     jmp extErrExit
   275                              <1> .pathOk:
   276 00003310 E81E2C0000          <1>     call checkPathNet 
   277 00003315 74ED                <1>     jz .badPath ;Or Net paths
   278 00003317 E8C32B0000          <1>     call scanPathWC
   279 0000331C 72E6                <1>     jc .badPath ;Dont allow wildcards
   280 0000331E 488D3D(00C50300)    <1>     lea rdi, buffer1
   281 00003325 52                  <1>     push rdx
   282 00003326 C605(DAC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   283 0000332D E8C4E0FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   284 00003332 5A                  <1>     pop rdx
   285 00003333 59                  <1>     pop rcx
   286 00003334 5B                  <1>     pop rbx
   287 00003335 0F82F82D0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   288                              <1>     ;In the case of a wildcard, recall this will return the first file
   289 0000333B 803D(E2C60300)FF    <1>     cmp byte [fileExist], -1
   290 00003342 0F85EB2D0000        <1>     jnz extErrExit
   291                              <1> 
   292 00003348 E8DC280000          <1>     call testCDSNet
   293 0000334D 730C                <1>     jnc .notNet
   294 0000334F 750A                <1>     jnz .notNet ;This type of net ok
   295 00003351 B805000000          <1>     mov eax, errAccDen
   296 00003356 E9D82D0000          <1>     jmp extErrExit
   297                              <1> .notNet:
   298 0000335B 84DB                <1>     test bl, bl
   299 0000335D 7526                <1>     jnz .setAttribs
   300                              <1>     ;Get attribs here
   301 0000335F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   302 00003365 7412                <1>     jz .getDiskAttribs
   303 00003367 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   304 0000336C CD4F                <1>     int 4Fh
   305 0000336E 0F82BF2D0000        <1>     jc extErrExit
   306 00003374 E9AC2D0000          <1>     jmp extGoodExit
   307                              <1> .getDiskAttribs:
   308 00003379 0FB605(47C60300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   309 00003380 E9A02D0000          <1>     jmp extGoodExit
   310                              <1> .setAttribs:
   311                              <1>     ;Set attribs here
   312 00003385 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   313 0000338B 7417                <1>     jz .setDiskAttribs
   314 0000338D 0FB7C9              <1>     movzx ecx, cx
   315 00003390 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   316 00003391 B80E110000          <1>     mov eax, 110Eh
   317 00003396 CD4F                <1>     int 4Fh
   318 00003398 59                  <1>     pop rcx
   319 00003399 0F82942D0000        <1>     jc extErrExit
   320 0000339F E9812D0000          <1>     jmp extGoodExit
   321                              <1> .setDiskAttribs:
   322 000033A4 E844EBFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   323 000033A9 0F82842D0000        <1>     jc extErrExit
   324 000033AF F6C118              <1>     test cl, dirVolumeID | dirDirectory
   325 000033B2 740A                <1>     jz .set
   326 000033B4 B805000000          <1>     mov eax, errAccDen
   327 000033B9 E9752D0000          <1>     jmp extErrExit
   328                              <1> .set:
   329 000033BE 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   330 000033C1 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   331 000033C4 08E9                <1>     or cl, ch
   332 000033C6 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   333 000033C9 31C0                <1>     xor eax, eax
   334 000033CB E9552D0000          <1>     jmp extGoodExit
   335                              <1> 
   336                              <1> 
   337                              <1> duplicateHandle:   ;ah = 45h, handle function
   338                              <1> ;Input: bx = Handle to duplicate
   339                              <1> ;Output: If ok then ax = New handle
   340 000033D0 E87E140000          <1>     call findFreeJFTSpace    ;First find a free space in the JFT
   341 000033D5 0F82582D0000        <1>     jc extErrExit   ;Exit if no space
   342                              <1>     ;rsi points to the free space
   343                              <1> .duplicateCommon:
   344 000033DB E8FB130000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   345 000033E0 4887F7              <1>     xchg rsi, rdi
   346 000033E3 AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   347 000033E4 AA                  <1>     stosb
   348 000033E5 48FFCE              <1>     dec rsi
   349 000033E8 48FFCF              <1>     dec rdi
   350                              <1>     ;rdi now points to new position
   351                              <1>     ;rsi points to old position
   352                              <1>     ;al has SFT ndx
   353 000033EB 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   354 000033EE 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   355 000033F1 E8B0130000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   356 000033F6 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   357                              <1>     ;Now we must return in ax the entry in the JFT 
   358 000033F9 488B3D(02C40300)    <1>     mov rdi, qword [currentPSP]
   359 00003400 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   360 00003404 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   361 00003407 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   362 00003409 E9172D0000          <1>     jmp extGoodExit
   363                              <1> 
   364                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   365                              <1> ;Input: bx = Handle to duplicate
   366                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   367                              <1>     ;First we close cx
   368 0000340E 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   369 00003410 53                  <1>     push rbx
   370 00003411 51                  <1>     push rcx
   371 00003412 E877FDFFFF          <1>     call closeFileHdl   ;Close handle 
   372 00003417 59                  <1>     pop rcx
   373 00003418 5B                  <1>     pop rbx
   374                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00003419 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 0000341B C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   375                              <1>     ;Else, close was ok, lets duplicate now
   376 0000341C E8BA130000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   377 00003421 0F820C2D0000        <1>     jc extErrExit   ;Return bad with error code in al
   378 00003427 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   379 00003429 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   380 0000342C EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   381                              <1> 
   382                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   383                              <1> ;Input: cx = Search Attributes, cl only used
   384                              <1> ;       rdx = Ptr to path to file to look for
   385                              <1> ;       al = Document as needing to be 0 for now
   386                              <1> ;Return:
   387                              <1> ;Data in the DTA or error through AX with CF=CY
   388                              <1> ;CAVEATS!
   389                              <1> ;DTA:attribFnd = 40h => Char dev
   390                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   391 0000342E 880D(DAC60300)      <1>     mov byte [searchAttr], cl
   392 00003434 4889D6              <1>     mov rsi, rdx
   393 00003437 E8112A0000          <1>     call checkPathspecOK
   394 0000343C 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   395 0000343E 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   396                              <1> .badPath:
   397 00003440 B803000000          <1>     mov eax, errPnf
   398 00003445 E9E92C0000          <1>     jmp extErrExit
   399                              <1> .pathspecOk:
   400 0000344A FF35(FAC30300)      <1>     push qword [currentDTA]
   401 00003450 488D3D(11C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   402 00003457 48893D(FAC30300)    <1>     mov qword [currentDTA], rdi
   403 0000345E 488D3D(00C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   404 00003465 E88CDFFFFF          <1>     call getFilePath
   405                              <1> .findfileExit:
   406 0000346A 8F05(FAC30300)      <1>     pop qword [currentDTA]
   407 00003470 0F82BD2C0000        <1>     jc extErrExit
   408 00003476 488D3D(11C60300)    <1>     lea rdi, dosffblock
   409 0000347D 57                  <1>     push rdi
   410 0000347E E899DEFFFF          <1>     call setupFFBlock
   411 00003483 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   412 00003484 488B3D(FAC30300)    <1>     mov rdi, qword [currentDTA]
   413 0000348B B92B000000          <1>     mov ecx, ffBlock_size
   414 00003490 F3A4                <1>     rep movsb   ;Copy the whole block. 
   415                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   416 00003492 31C0                <1>     xor eax, eax    ;Return value
   417 00003494 E98C2C0000          <1>     jmp extGoodExit ;Exit well
   418                              <1> 
   419                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   420                              <1> ;Input: DTA has the find first block from the previous search
   421 00003499 488B35(FAC30300)    <1>     mov rsi, qword [currentDTA]
   422 000034A0 488D3D(11C60300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   423 000034A7 B92B000000          <1>     mov ecx, ffBlock_size
   424 000034AC F3A4                <1>     rep movsb
   425 000034AE FF35(FAC30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   426 000034B4 488D3D(11C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   427 000034BB 48893D(FAC30300)    <1>     mov qword [currentDTA], rdi
   428 000034C2 E805DBFFFF          <1>     call findNextMain
   429 000034C7 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   430                              <1> 
   431                              <1> renameFile:        ;ah = 56h
   432                              <1> ;Input: rsi -> Filespec to rename
   433                              <1> ;       rdi -> New filespec
   434                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   435 000034C9 BB16000000          <1>     mov ebx, dirInclusive
   436 000034CE F605(E0C60300)FF    <1>     test byte [dosInvoke], -1
   437 000034D5 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   438 000034D8 880D(DAC60300)      <1>     mov byte [searchAttr], cl
   439                              <1>     ;Step 0, verify both paths provided are valid
   440 000034DE E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   441 000034E3 7249                <1>     jc .pnfError
   442 000034E5 56                  <1>     push rsi
   443 000034E6 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   444 000034E9 E84A000000          <1>     call .renamePathCheck
   445 000034EE 5E                  <1>     pop rsi
   446 000034EF 723D                <1>     jc .pnfError
   447                              <1>     ;Now we canonicalise the filenames to make life easy
   448 000034F1 56                  <1>     push rsi
   449 000034F2 4889FE              <1>     mov rsi, rdi
   450 000034F5 488D3D(80C50300)    <1>     lea rdi, buffer2
   451 000034FC E8B1DEFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   452 00003501 5E                  <1>     pop rsi
   453 00003502 722A                <1>     jc .pnfError
   454                              <1>     ;Now test if first file exists.
   455 00003504 FF35(00C60300)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   456 0000350A 8F05(08C60300)      <1>     pop qword [fname2Ptr]
   457 00003510 488D3D(00C50300)    <1>     lea rdi, buffer1
   458 00003517 E896DEFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   459 0000351C 7210                <1>     jc .pnfError  
   460                              <1> 
   461 0000351E E829020000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   462 00003523 0F820A2C0000        <1>     jc extErrExit
   463 00003529 E9F72B0000          <1>     jmp extGoodExit
   464                              <1> .pnfError:
   465 0000352E B803000000          <1>     mov eax, errPnf
   466 00003533 E9FB2B0000          <1>     jmp extErrExit
   467                              <1> .renamePathCheck:
   468                              <1> ;Checks if the pathspec in rsi is OK
   469 00003538 56                  <1>     push rsi
   470 00003539 57                  <1>     push rdi
   471 0000353A E80E290000          <1>     call checkPathspecOK
   472 0000353F 5F                  <1>     pop rdi
   473 00003540 5E                  <1>     pop rsi
   474 00003541 730D                <1>     jnc .pathOk     ;Path ok 
   475 00003543 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   476                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   477 00003545 F605(E0C60300)FF    <1>     test byte [dosInvoke], -1
   478 0000354C 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   479                              <1> .badPath:
   480 0000354E F9                  <1>     stc
   481                              <1>     return
    18                              <2> %%_ret:
    19 0000354F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   482                              <1> .pathOk:
   483 00003550 F8                  <1>     clc
   484                              <1>     return
    18                              <2> %%_ret:
    19 00003551 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> getSetFileDateTime:;ah = 57h
   487 00003552 3C01                <1>     cmp al, 1
   488 00003554 760A                <1>     jbe .oksubfun
   489 00003556 B801000000          <1>     mov eax, errInvFnc
   490 0000355B E9D32B0000          <1>     jmp extErrExit
   491                              <1> .oksubfun:
   492 00003560 E8AA120000          <1>     call getSFTPtr  ;Preserves al unless error returned
   493 00003565 0F82C82B0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   494 0000356B 3C01                <1>     cmp al, 1
   495 0000356D 741C                <1>     je .setTimeDate
   496                              <1>     ;Here we get the Time/Date
   497 0000356F 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   498 00003573 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   499 00003577 E81A270000          <1>     call getUserRegs
   500 0000357C 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   501 00003580 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   502 00003584 31C0                <1>     xor eax, eax
   503 00003586 E99A2B0000          <1>     jmp extGoodExit
   504                              <1> .setTimeDate:
   505                              <1>     ;Here we set the Time/Date
   506 0000358B 66894F13            <1>     mov word [rdi + sft.wTime], cx
   507 0000358F 66895715            <1>     mov word [rdi + sft.wDate], dx
   508 00003593 31C0                <1>     xor eax, eax
   509 00003595 E98B2B0000          <1>     jmp extGoodExit
   510                              <1> 
   511                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   512                              <1> ;Uses the clock to do it's bidding
   513                              <1> ;cx = file attribute 
   514                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   515                              <1> ;       filename
   516 0000359A 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   517 0000359F 740A                <1>     jz .validAttribs
   518 000035A1 B805000000          <1>     mov eax, errAccDen
   519 000035A6 E9882B0000          <1>     jmp extErrExit
   520                              <1> .validAttribs:
   521 000035AB 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   522 000035AF 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   523 000035B2 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   524 000035B7 31C0                <1>     xor eax, eax
   525 000035B9 4889D7              <1>     mov rdi, rdx
   526 000035BC F3AE                <1>     rep scasb
   527 000035BE 85C9                <1>     test ecx, ecx
   528 000035C0 750A                <1>     jnz .nullFnd
   529                              <1>     ;Bad path
   530 000035C2 B803000000          <1>     mov eax, errPnf
   531 000035C7 E9672B0000          <1>     jmp extErrExit
   532                              <1> .nullFnd:
   533 000035CC 48FFCF              <1>     dec rdi
   534 000035CF 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   535 000035D3 E8D8270000          <1>     call swapPathSeparator
   536 000035D8 7403                <1>     jz .pathsepFnd
   537                              <1>     ;If no pathsep found, force one at rdi
   538 000035DA B05C                <1>     mov al, "\"
   539 000035DC AA                  <1>     stosb
   540                              <1> .pathsepFnd:
   541 000035DD 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   542                              <1> .fileCreateLoop:
   543 000035E0 55                  <1>     push rbp
   544 000035E1 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   545 000035E6 5D                  <1>     pop rbp
   546 000035E7 0FB7C1              <1>     movzx eax, cx
   547 000035EA 0FB7D2              <1>     movzx edx, dx
   548 000035ED C1E010              <1>     shl eax, 10h
   549 000035F0 09D0                <1>     or eax, edx  ;Add the bits of dx too
   550 000035F2 E831000000          <1>     call .writeNybbles
   551 000035F7 31C0                <1>     xor eax, eax
   552 000035F9 AA                  <1>     stosb   ;Store terminating null
   553 000035FA 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   554 000035FD 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   555 00003600 55                  <1>     push rbp
   556 00003601 E85C000000          <1>     call createNewFile
   557 00003606 5D                  <1>     pop rbp
   558 00003607 0F83182B0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   559 0000360D 0FB705(EEC30300)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   560 00003614 3D05000000          <1>     cmp eax, errAccDen
   561 00003619 74C5                <1>     je .fileCreateLoop
   562 0000361B 3D50000000          <1>     cmp eax, errFilExist
   563 00003620 74BE                <1>     je .fileCreateLoop
   564 00003622 F9                  <1>     stc
   565 00003623 E90B2B0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   566                              <1> .writeNybbles:
   567                              <1> ;Write the nybbles of eax at rdi
   568 00003628 B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   569                              <1> .wnLp:
   570 0000362D C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   571 00003630 50                  <1>     push rax
   572 00003631 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   573 00003636 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   574 0000363B 3D39000000          <1>     cmp eax, '9'
   575 00003640 7605                <1>     jbe .notExtDigit
   576 00003642 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   577                              <1> .notExtDigit:
   578 00003647 AA                  <1>     stosb   ;Store the digit
   579 00003648 58                  <1>     pop rax
   580 00003649 FFC9                <1>     dec ecx
   581 0000364B 75E0                <1>     jnz .wnLp
   582                              <1>     return
    18                              <2> %%_ret:
    19 0000364D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   583                              <1> 
   584                              <1> .uniqueTimeGet:
   585 0000364E E807F4FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   586 00003653 668B0D(FAC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   587 0000365A 668B15(FCC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   588                              <1>     return
    18                              <2> %%_ret:
    19 00003661 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   589                              <1> 
   590                              <1> createNewFile:     ;ah = 5Bh
   591 00003662 51                  <1>     push rcx    ;Save file attributes on stack
   592 00003663 488D0D3A050000      <1>     lea rcx, createNewMain
   593 0000366A C605(DAC60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   594 00003671 E90BFAFFFF          <1>     jmp openFileHdl.openCommon
   595                              <1> 
   596                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   597                              <1>     ;Input: bx = File to flush
   598 00003676 E894110000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   599 0000367B 0F82B22A0000        <1>     jc extErrExit
   600 00003681 E8FA0F0000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   601                              <1>     ;Now we check if the device is a char, disk or net file and commit
   602 00003686 E882000000          <1>     call commitMain
   603 0000368B 0F82A22A0000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   604                              <1> .exitOk:
   605 00003691 30C0                <1>     xor al, al
   606 00003693 E8FE250000          <1>     call getUserRegs
   607 00003698 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   608                              <1>     return
    18                              <2> %%_ret:
    19 0000369B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> 
   610                              <1> lockUnlockFile:    ;ah = 5Ch
   611                              <1> ;ah = 5Ch
   612                              <1> ;al = subfunction
   613                              <1> ;       00h lock region of file
   614                              <1> ;       01h unlock region of file
   615                              <1> ;ebx = file handle
   616                              <1> ;ecx = start offset of region within file
   617                              <1> ;edi = length of region in bytes
   618 0000369C 3C01                <1>     cmp al, 1
   619 0000369E 7757                <1>     ja .badFunction
   620 000036A0 57                  <1>     push rdi
   621 000036A1 E883110000          <1>     call derefSFTPtr
   622 000036A6 730B                <1>     jnc .validHdl
   623 000036A8 58                  <1>     pop rax ;Discard the qword on the stack
   624 000036A9 B806000000          <1>     mov eax, errBadHdl
   625 000036AE E9802A0000          <1>     jmp extErrExit
   626                              <1> .validHdl:
   627 000036B3 84C0                <1>     test al, al ;Check if al = 0
   628 000036B5 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   629 000036B6 7424                <1>     jz .lockFileRegion
   630 000036B8 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   631 000036BE 740B                <1>     jz .unlockShare ;Jump if a local file only
   632 000036C0 50                  <1>     push rax
   633 000036C1 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   634 000036C6 CD4F                <1>     int 4Fh
   635 000036C8 5B                  <1>     pop rbx
   636 000036C9 EB06                <1>     jmp short .exitSelect
   637                              <1> .unlockShare:
   638 000036CB FF15(DAC00300)      <1>     call qword [unlockFileShare]    ;Call share hook
   639                              <1> .exitSelect:
   640 000036D1 0F825C2A0000        <1>     jc extErrExit
   641 000036D7 E9492A0000          <1>     jmp extGoodExit
   642                              <1> .lockFileRegion:
   643 000036DC 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   644 000036E2 740B                <1>     jz .lockShare   ;Jump if a local file only
   645 000036E4 50                  <1>     push rax
   646 000036E5 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   647 000036EA CD4F                <1>     int 4Fh
   648 000036EC 5B                  <1>     pop rbx
   649 000036ED EBE2                <1>     jmp short .exitSelect
   650                              <1> .lockShare:
   651 000036EF FF15(D2C00300)      <1>     call qword [lockFileShare]  ;Call share hook
   652 000036F5 EBDA                <1>     jmp short .exitSelect
   653                              <1> .badFunction:
   654 000036F7 B801000000          <1>     mov eax, errInvFnc
   655 000036FC 668905(EEC30300)    <1>     mov word [errorExCde], ax
   656 00003703 E92B2A0000          <1>     jmp extErrExit
   657                              <1> ;STUB FUNCTIONS
   658                              <1> setHandleCount:    ;ah = 67h
   659 00003708 E9262A0000          <1>     jmp extErrExit
   660                              <1> 
   661                              <1> ;-----------------------------------:
   662                              <1> ;       Main File IO Routines       :
   663                              <1> ;-----------------------------------:
   664                              <1> commitMain:
   665                              <1> ;Commits the current SFT 
   666 0000370D E8760F0000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   667 00003712 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   668 00003716 A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   669                              <1>     retnz   ;Return if nothing has been written or a char dev
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 0000371B 7401                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 0000371D C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   670 0000371E 66A90080            <1>     test ax, devRedirDev
   671 00003722 7508                <1>     jnz .notNet
   672                              <1>     ;Commit file net redir call and exit
   673 00003724 B807110000          <1>     mov eax, 1107h
   674 00003729 CD4F                <1>     int 4Fh
   675                              <1>     return  ;Propagate CF and AL if needed due to error
    18                              <2> %%_ret:
    19 0000372B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   676                              <1> .notNet:
   677 0000372C E8B7290000          <1>     call dosCrit1Enter
   678 00003731 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   679 00003735 E8E7240000          <1>     call setWorkingDPB
   680 0000373A E819E8FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   681 0000373F 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   682 00003741 E8A1D4FFFF          <1>     call flushFile  ;Now the file gets flushed
   683                              <1> .exit:
   684                              <1> ;Propagate CF and AL if needed due to error
   685 00003746 E8A7290000          <1>     call dosCrit1Exit
   686                              <1>     return
    18                              <2> %%_ret:
    19 0000374B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   687                              <1> renameMain:
   688                              <1> ;Now, creates a special find first block for the source file
   689                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   690                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   691                              <1> ; block. 
   692                              <1> ;Then we search for that file name specifically (again), replacing 
   693                              <1> ; the filename portion of the destination buffer. If it exists or the 
   694                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   695                              <1> ; the new directory entry and delete the original file. 
   696                              <1> ;Input:
   697                              <1> ; filenamePtr1 -> Source path + filename pattern
   698                              <1> ; filenamePtr2 -> New path + filename pattern
   699                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   700 0000374C 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS]
   701 00003753 E8D1240000          <1>     call testCDSNet ;CF=CY => Not net
   702 00003758 7208                <1>     jc .notNet
   703 0000375A B811110000          <1>     mov eax, 1111h
   704 0000375F CD4F                <1>     int 4Fh
   705                              <1>     return
    18                              <2> %%_ret:
    19 00003761 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   706                              <1> .notNet:
   707                              <1> ;First check if both drives are on the same disk
   708 00003762 8A05(00C50300)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   709 00003768 8A25(80C50300)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   710 0000376E 38E0                <1>     cmp al, ah
   711 00003770 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   712 00003772 B811000000          <1>     mov eax, errDevUnk
   713 00003777 F9                  <1>     stc
   714                              <1>     return
    18                              <2> %%_ret:
    19 00003778 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   715                              <1> .sameDrive:
   716                              <1> ;Now we check if either pathsepc is simply X:\,0
   717                              <1> ; If they are, return fail as we cannot rename the root dir
   718 00003779 E86A290000          <1>     call dosCrit1Enter
   719 0000377E 8B05(00C50300)      <1>     mov eax, dword [buffer1]
   720 00003784 30C0                <1>     xor al, al
   721 00003786 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   722 0000378B 750B                <1>     jne .checkpath2
   723                              <1> .accDen:
   724 0000378D B805000000          <1>     mov eax, errAccDen
   725 00003792 F9                  <1>     stc
   726 00003793 E9F4010000          <1>     jmp .exit2
   727                              <1> .checkpath2:
   728 00003798 8B05(80C50300)      <1>     mov eax, dword [buffer2]
   729 0000379E 30C0                <1>     xor al, al
   730 000037A0 3D003A5C00          <1>     cmp eax, 005C3A00h
   731 000037A5 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   732                              <1> ;Now we find first the source file
   733 000037A7 488B35(00C60300)    <1>     mov rsi, qword [fname1Ptr]
   734 000037AE 4889F7              <1>     mov rdi, rsi
   735 000037B1 E840DCFFFF          <1>     call getFilePath    ;Now hit the disk to search for the file
   736 000037B6 0F82D0010000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   737 000037BC 488D35(3CC60300)    <1>     lea rsi, curDirCopy
   738 000037C3 488D3D(A0C70300)    <1>     lea rdi, renameDir
   739 000037CA B904000000          <1>     mov ecx, fatDirEntry_size/8
   740 000037CF F348A5              <1>     rep movsq   ;Copy directory over
   741 000037D2 488D3D(75C70300)    <1>     lea rdi, renameFFBlk
   742 000037D9 E83EDBFFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   743                              <1> 
   744                              <1>     ;Now we use the destination filename pattern to build the new filename
   745 000037DE 488B3D(08C60300)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   746 000037E5 31C0                <1>     xor eax, eax
   747 000037E7 B943000000          <1>     mov ecx, 67
   748 000037EC F3AE                <1>     rep scasb   ;Find the null terminator of the destination path
   749                              <1> .findPattern:
   750 000037EE 48FFCF              <1>     dec rdi
   751 000037F1 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   752 000037F4 75F8                <1>     jne .findPattern
   753                              <1> ;rdi points to the pathseparator
   754 000037F6 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   755 000037F7 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   756                              <1>     ;Now check if the parent directory exists for the destination
   757 000037F8 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   758 000037F9 FF35(00C60300)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   759 000037FF 488D35(80C50300)    <1>     lea rsi, buffer2
   760 00003806 4889F7              <1>     mov rdi, rsi
   761 00003809 E8E4DBFFFF          <1>     call getDirPath ;We are searching for a directory ONLY
   762 0000380E 8F05(00C60300)      <1>     pop qword [fname1Ptr]
   763 00003814 5F                  <1>     pop rdi
   764 00003815 0F827C010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
   765 0000381B C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
   766                              <1>     ;rdi now points to the first char of the pattern
   767 0000381F 4889FE              <1>     mov rsi, rdi
   768 00003822 488D3D(C3C60300)    <1>     lea rdi, wcdFcbName
   769 00003829 E866DAFFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
   770                              <1>     ;Ensure the destination pattern is not all question marks
   771 0000382E 813D(C3C60300)3F3F- <1>     cmp dword [wcdFcbName], "????"
   771 00003836 3F3F                <1>
   772 00003838 7524                <1>     jne .validRenPattern
   773 0000383A 813D(C7C60300)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
   773 00003842 3F3F                <1>
   774 00003844 7518                <1>     jne .validRenPattern
   775 00003846 66813D(CBC60300)3F- <1>     cmp word [wcdFcbName + 8], "??"
   775 0000384E 3F                  <1>
   776 0000384F 750D                <1>     jne .validRenPattern
   777 00003851 803D(CDC60300)3F    <1>     cmp byte [wcdFcbName + 10], "?"
   778 00003858 0F8434010000        <1>     je .bad ;Access denied buddy ol' pal
   779                              <1> .validRenPattern:
   780                              <1>     ;curDirCopy has information for the destination directory file we will 
   781                              <1>     ; write to. The cluster points to the directory file itself to search in
   782                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
   783 0000385E E879010000          <1>     call .makeNewName   ;Make new fname in fcbName from asciizname in renFFblk
   784 00003863 488D35(B7C60300)    <1>     lea rsi, fcbName
   785 0000386A 488D3D(A0C70300)    <1>     lea rdi, renameDir
   786 00003871 B90B000000          <1>     mov ecx, 11
   787 00003876 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
   788 00003878 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
   789 00003879 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
   790 0000387A 48BE-               <1>     mov rsi, fcbName
   790 0000387C [B7C6030000000000]  <1>
   791 00003884 E853DAFFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
   792 00003889 488B35(08C60300)    <1>     mov rsi, qword [fname2Ptr]
   793 00003890 4889F7              <1>     mov rdi, rsi
   794 00003893 E85EDBFFFF          <1>     call getFilePath    ;This must be a non-existant file
   795 00003898 0F83F9000000        <1>     jnc .badExit   ;If the file exists, then error
   796 0000389E 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
   797 000038A3 0F85EE000000        <1>     jne .badExit
   798                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
   799 000038A9 0FB715(50C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   800 000038B0 0FB705(56C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   801 000038B7 C1E210              <1>     shl edx, 10h
   802 000038BA 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
   803 000038BC E8DF000000          <1>     call .searchForDirSpace
   804 000038C1 0F82CB000000        <1>     jc .bad
   805                              <1> ;dir Entry found, rsi points to space in buffer
   806 000038C7 4889F7              <1>     mov rdi, rsi
   807 000038CA 488D35(A0C70300)    <1>     lea rsi, renameDir
   808 000038D1 B904000000          <1>     mov ecx, fatDirEntry_size/8
   809 000038D6 F348A5              <1>     rep movsq   ;Copy dir over
   810 000038D9 E825D1FFFF          <1>     call markBufferDirty ;Mark buffer as written to now
   811                              <1> ;Now we delete the original directory entry
   812 000038DE 8B05(82C70300)      <1>     mov eax, dword [renameFFBlk + ffBlock.dirOffset]
   813 000038E4 C1E005              <1>     shl eax, 5  ;Turn into byte offset
   814 000038E7 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
   815 000038EE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   816 000038F2 F7F1                <1>     div ecx ;Turn byte in clust offset into sec in clust offset and byte offset
   817 000038F4 668905(66C70300)    <1>     mov word [dirSect], ax
   818 000038FB C1EA05              <1>     shr edx, 5  ;Turn into 32 byte offset
   819 000038FE 8915(68C70300)      <1>     mov dword [dirEntry], edx
   820 00003904 8B05(86C70300)      <1>     mov eax, dword [renameFFBlk + ffBlock.parDirClus]
   821 0000390A E89DD3FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   822 0000390F 0FB715(66C70300)    <1>     movzx edx, word [dirSect]
   823 00003916 4801D0              <1>     add rax, rdx
   824                              <1>     ;rax now has the sector number to read in
   825 00003919 E870D2FFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   826 0000391E 7272                <1>     jc .bad
   827 00003920 8B15(68C70300)      <1>     mov edx, dword [dirEntry]   ;Get the dir entry
   828 00003926 C1E205              <1>     shl edx, 5  ;Get as byte offset
   829 00003929 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;rsi points to old dir
   830 0000392E 0FB605(E6C60300)    <1>     movzx eax, byte [delChar]
   831 00003935 8806                <1>     mov byte [rsi], al  ;Store the del char there
   832 00003937 E8C7D0FFFF          <1>     call markBufferDirty ;Mark buffer as written to now
   833                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
   834                              <1>     ;If it does, we find next. If not, we exit
   835 0000393C B03F                <1>     mov al, "?"
   836 0000393E 488B3D(00C60300)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
   837 00003945 E899240000          <1>     call strlen ;Get in rcx to get the length of the string
   838 0000394A F3AE                <1>     rep scasb
   839 0000394C 67E335              <1>     jecxz .exit  ;If source name has no wildcards, exit
   840 0000394F B90B000000          <1>     mov ecx, 11
   841 00003954 8D3D(C3C60300)      <1>     lea edi, wcdFcbName
   842 0000395A F3AE                <1>     rep scasb
   843 0000395C 67E325              <1>     jecxz .exit
   844                              <1>     ;Here we gotta do a find next now!
   845 0000395F FF35(FAC30300)      <1>     push qword [currentDTA]
   846 00003965 488D3D(75C70300)    <1>     lea rdi, renameFFBlk
   847 0000396C 48893D(FAC30300)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
   848 00003973 E854D6FFFF          <1>     call findNextMain
   849 00003978 8F05(FAC30300)      <1>     pop qword [currentDTA]
   850 0000397E 0F83DAFEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
   851                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
   852                              <1> .exit:
   853 00003984 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
   854 00003985 E847D0FFFF          <1>     call writeThroughBuffers
   855 0000398A 720B                <1>     jc .badExit
   856                              <1> .exit2: ;Bad exit before we push qword on stack 
   857 0000398C E861270000          <1>     call dosCrit1Exit
   858                              <1>     return
    18                              <2> %%_ret:
    19 00003991 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   859                              <1> .bad:
   860 00003992 B805000000          <1>     mov eax, errAccDen  ;Temp return code
   861                              <1> .badExit:
   862 00003997 E813D0FFFF          <1>     call cancelWriteThroughBuffers
   863 0000399C F9                  <1>     stc
   864 0000399D 5F                  <1>     pop rdi
   865 0000399E EBEC                <1>     jmp short .exit2
   866                              <1> 
   867                              <1> .searchForDirSpace:
   868                              <1> ;Input: eax = First directory to search 
   869 000039A0 8905(62C70300)      <1>     mov dword [dirClustA], eax
   870 000039A6 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   871 000039A8 668905(66C70300)    <1>     mov word [dirSect], ax
   872 000039AF 8905(68C70300)      <1>     mov dword [dirEntry], eax
   873 000039B5 E81FE5FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   874 000039BA 731C                <1>     jnc .dirEntryFnd
   875 000039BC 813D(5EC70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   875 000039C4 0000                <1>
   876 000039C6 7412                <1>     je .searchBad ;Set CF and exit
   877 000039C8 E848E6FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   878 000039CD 720B                <1>     jc .searchBad
   879 000039CF 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   880 000039D4 7404                <1>     je .searchBad
   881                              <1>     ;Else eax = Newly allocated cluster
   882 000039D6 EBC8                <1>     jmp short .searchForDirSpace
   883                              <1> .dirEntryFnd:
   884 000039D8 F8                  <1>     clc
   885                              <1>     return
    18                              <2> %%_ret:
    19 000039D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   886                              <1> .searchBad:
   887 000039DA F9                  <1>     stc
   888                              <1>     return
    18                              <2> %%_ret:
    19 000039DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   889                              <1> 
   890                              <1> .makeNewName:
   891                              <1> ;Copy old filename as initial pattern into fcbName
   892                              <1> ;Then copies wcfcb letter by letter unless a ? is encountered
   893 000039DC 51                  <1>     push rcx
   894 000039DD 56                  <1>     push rsi
   895 000039DE 57                  <1>     push rdi
   896 000039DF 488D35(A0C70300)    <1>     lea rsi, renameDir  ;Copy the source filename over
   897 000039E6 488D3D(B7C60300)    <1>     lea rdi, fcbName
   898 000039ED 57                  <1>     push rdi    ;Preserve this as the destination for copy
   899 000039EE B90B000000          <1>     mov ecx, 11
   900 000039F3 F3A4                <1>     rep movsb
   901 000039F5 5F                  <1>     pop rdi
   902 000039F6 488D35(C3C60300)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
   903                              <1> .mnnLp:
   904 000039FD AC                  <1>     lodsb
   905 000039FE 3C3F                <1>     cmp al, "?" ;Is it a wc?
   906 00003A00 7404                <1>     je .mnnWC   ;Skip overriding this char
   907 00003A02 AA                  <1>     stosb   ;Store new char and go forwards by one
   908 00003A03 48FFCF              <1>     dec rdi ;Now go back by one
   909                              <1> .mnnWC:
   910 00003A06 48FFC7              <1>     inc rdi ;Goto next letter
   911 00003A09 FFC1                <1>     inc ecx
   912 00003A0B 81F90B000000        <1>     cmp ecx, 11
   913 00003A11 75EA                <1>     jne .mnnLp
   914 00003A13 5F                  <1>     pop rdi
   915 00003A14 5E                  <1>     pop rsi
   916 00003A15 59                  <1>     pop rcx
   917                              <1>     return  ;Return new filename in fcbName
    18                              <2> %%_ret:
    19 00003A16 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   918                              <1> 
   919                              <1> outerDeleteMain:
   920                              <1> ;Internal current dir must be populated with dir entry
   921                              <1> ; and internal DOS directory variables now point to this entry.
   922                              <1> ;Checks if the file is a char device or read only.
   923                              <1> ;Input: curDirCopy must has dir for the file to be deleted
   924                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
   925                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
   926                              <1> ;         CF=NC => File deleted
   927 00003A17 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS]
   928 00003A1E E806220000          <1>     call testCDSNet ;CF=CY => Not net
   929 00003A23 7208                <1>     jc .notNet
   930 00003A25 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
   931 00003A2A CD4F                <1>     int 4Fh
   932                              <1>     return
    18                              <2> %%_ret:
    19 00003A2C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   933                              <1> .notNet:
   934 00003A2D B805000000          <1>     mov eax, errAccDen  
   935 00003A32 F605(47C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   936 00003A39 7551                <1>     jnz .exitBad  ;Can't delete a char dev
   937 00003A3B F605(47C60300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
   938 00003A42 7548                <1>     jnz .exitBad  ;Can't delete a read only file
   939 00003A44 E845000000          <1>     call deleteMain
   940 00003A49 7241                <1>     jc .exitBad
   941                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
   942 00003A4B B03F                <1>     mov al, "?"
   943 00003A4D 488D3D(B7C60300)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
   944 00003A54 B90B000000          <1>     mov ecx, 11
   945 00003A59 F3AE                <1>     rep scasb   ;Scan for the wildcard char
   946 00003A5B 85C9                <1>     test ecx, ecx    ;If ecx != 0, then a wildcard found, we delete more
   947 00003A5D 7502                <1>     jnz .serverWCloop   ;This is not possible if entered via 21/41h
   948 00003A5F F8                  <1>     clc
   949                              <1>     return  ;Return ok!
    18                              <2> %%_ret:
    19 00003A60 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   950                              <1> .serverWCloop:
   951 00003A61 FF35(FAC30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   952 00003A67 488D3D(11C60300)    <1>     lea rdi, dosffblock
   953 00003A6E 57                  <1>     push rdi    ;Push this address onto the stack
   954 00003A6F E8A8D8FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
   955 00003A74 8F05(FAC30300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
   956 00003A7A E84DD5FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
   957 00003A7F 8F05(FAC30300)      <1>     pop qword [currentDTA]
   958 00003A85 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
   959 00003A8A 73D5                <1>     jnc .serverWCloop     
   960                              <1> ;Stop as soon as an error occurs
   961                              <1> .exitBad:
   962 00003A8C F9                  <1>     stc
   963                              <1>     return
    18                              <2> %%_ret:
    19 00003A8D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   964                              <1> 
   965                              <1> deleteMain:
   966                              <1> ;Now unlink FAT chain and then clear directory entry
   967                              <1> ;Get the start cluster of this file
   968                              <1> ;Input:
   969                              <1> ; The file must have NOT be read-only.
   970                              <1> ; If the CDS is NOT a net cds then the following must hold:
   971                              <1> ;     - curDirCopy must be filled with the file directory information
   972                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
   973                              <1> ;Output: CF=NC => Success, 
   974                              <1> ; If not net CDS:
   975                              <1> ;   rsi keeps pointing to directory entry.
   976                              <1> ;   al = First char of the file that was deleted.
   977                              <1> ;        CF=CY => Error
   978                              <1> ;The dir buffer must be marked as referenced once we are done with it
   979 00003A8E 52                  <1>     push rdx
   980 00003A8F 0FB715(56C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   981 00003A96 0FB705(50C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   982 00003A9D C1E010              <1>     shl eax, 10h
   983 00003AA0 09D0                <1>     or eax, edx ;Add low bits to eax
   984 00003AA2 5A                  <1>     pop rdx
   985 00003AA3 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
   986 00003AA5 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
   987 00003AA7 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
   988 00003AAE E89DD3FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
   989 00003AB3 7216                <1>     jc .exitBad
   990                              <1> .skipUnlink:
   991                              <1>     ;Now replace the first char of the directory to 0E5h
   992                              <1>     ;Get the disk directory in a buffer to manipulate the entry
   993 00003AB5 E833E4FFFF          <1>     call getDiskDirectoryEntry
   994 00003ABA 720F                <1>     jc .exitBad
   995 00003ABC 8A05(E6C60300)      <1>     mov al, byte [delChar]
   996 00003AC2 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
   997                              <1>     ;CF must be clear
   998 00003AC4 E808CFFFFF          <1>     call writeThroughBuffers
   999                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003AC9 73C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1000                              <1> .exitBad:
  1001 00003ACB E8DFCEFFFF          <1>     call cancelWriteThroughBuffers
  1002                              <1>     return
    18                              <2> %%_ret:
    19 00003AD0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1003                              <1> 
  1004                              <1> openMain:
  1005                              <1> ;Input: ax (formally al) = Open mode
  1006                              <1> ;       [currentSFT] = SFT we are building
  1007                              <1> ;       [workingCDS] = CDS of drive to access
  1008                              <1> ;       [workingDPB] = DPB of drive to access
  1009                              <1> ;Ouput: CF=CY => Error, eax has error code
  1010 00003AD1 E89A000000          <1>     call .setOpenMode
  1011                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003AD6 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1012 00003AD8 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  1013 00003ADF 488B35(F0C60300)    <1>     mov rsi, qword [workingCDS]
  1014 00003AE6 30E4                <1>     xor ah, ah  ;al has the access mode
  1015 00003AE8 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1016 00003AEC 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1017 00003AF3 750A                <1>     jne .notNet
  1018                              <1> .redirOpen:
  1019 00003AF5 50                  <1>     push rax    ;Push open mode onto stack
  1020 00003AF6 B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
  1021 00003AFB CD4F                <1>     int 4Fh
  1022 00003AFD 58                  <1>     pop rax
  1023                              <1>     return
    18                              <2> %%_ret:
    19 00003AFE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1024                              <1> .notNet:
  1025 00003AFF 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1026 00003B05 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1027 00003B07 E8DC250000          <1>     call dosCrit1Enter
  1028 00003B0C C605(E5C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1029 00003B13 C605(E6C60300)E5    <1>     mov byte [delChar], 0E5h
  1030 00003B1A E81A010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1031                              <1> .openShareLoop:
  1032                              <1> ;Now we attempt to register the file with SHARE
  1033 00003B1F 0FB70D(23C00300)    <1>     movzx ecx, word [shareCount]    
  1034                              <1> .openShareTryAgain: 
  1035 00003B26 51                  <1>     push rcx
  1036 00003B27 E81A2C0000          <1>     call openShareCallWrapper
  1037 00003B2C 59                  <1>     pop rcx
  1038 00003B2D 731D                <1>     jnc .fileSharedOk
  1039 00003B2F E83C2C0000          <1>     call shareRetryCountdown
  1040 00003B34 FFC9                <1>     dec ecx
  1041 00003B36 75EE                <1>     jnz .openShareTryAgain
  1042 00003B38 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  1043 00003B3F E84F2C0000          <1>     call shareCheckOpenViolation
  1044 00003B44 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1045 00003B46 E8A7250000          <1>     call dosCrit1Exit   ;Else we error out
  1046                              <1>     return
    18                              <2> %%_ret:
    19 00003B4B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1047                              <1> .fileSharedOk:
  1048 00003B4C B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1049 00003B51 E8320B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1050 00003B56 FF15(12C10300)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1051 00003B5C E891250000          <1>     call dosCrit1Exit
  1052 00003B61 E8220B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1053 00003B66 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1054                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003B6C 74DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1055 00003B6E F9                  <1>     stc ;FCB opened files are not allowed anymore, this shouldnt exist anymore
  1056                              <1>     return
    18                              <2> %%_ret:
    19 00003B6F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1057                              <1> .setOpenMode:
  1058                              <1> ;Input: al = Open mode for the file open
  1059 00003B70 8805(DBC60300)      <1>     mov byte [fileOpenMd], al
  1060 00003B76 53                  <1>     push rbx
  1061 00003B77 88C3                <1>     mov bl, al
  1062 00003B79 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1063 00003B7C 803D(E0C60300)FF    <1>     cmp byte [dosInvoke], -1    
  1064 00003B83 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1065 00003B85 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1066 00003B88 7405                <1>     je .s2
  1067                              <1> .s1:
  1068 00003B8A 80FB40              <1>     cmp bl, denyNoneShare
  1069 00003B8D 770D                <1>     ja .somBad
  1070                              <1> .s2:
  1071 00003B8F 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1072 00003B91 80E30F              <1>     and bl, 0Fh
  1073 00003B94 80FB02              <1>     cmp bl, RWAccess
  1074 00003B97 7703                <1>     ja .somBad
  1075 00003B99 5B                  <1>     pop rbx
  1076 00003B9A F8                  <1>     clc
  1077                              <1>     return
    18                              <2> %%_ret:
    19 00003B9B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1078                              <1> .somBad:
  1079 00003B9C 5B                  <1>     pop rbx
  1080 00003B9D B80C000000          <1>     mov eax, errAccCde
  1081 00003BA2 F9                  <1>     stc
  1082                              <1>     return
    18                              <2> %%_ret:
    19 00003BA3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1083                              <1> createNewMain:
  1084                              <1> ;Input: ax (formally al) = File attributes
  1085                              <1> ;       [currentSFT] = SFT we are building
  1086                              <1> ;       [workingCDS] = CDS of drive to access
  1087                              <1> ;       [workingDPB] = DPB of drive to access
  1088 00003BA4 0FB6C0              <1>     movzx eax, al
  1089 00003BA7 F605(E2C60300)FF    <1>     test byte [fileExist], -1
  1090 00003BAE 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1091 00003BB0 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1092 00003BB5 F9                  <1>     stc
  1093                              <1>     return
    18                              <2> %%_ret:
    19 00003BB6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1094                              <1> createMain:
  1095                              <1> ;Input: ax (formally al) = File attributes
  1096                              <1> ;       [currentSFT] = SFT we are building
  1097                              <1> ;       [workingCDS] = CDS of drive to access
  1098                              <1> ;       [workingDPB] = DPB of drive to access
  1099 00003BB7 0FB6C0              <1>     movzx eax, al
  1100                              <1> .createNewEP:
  1101 00003BBA A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1102 00003BBC 750A                <1>     jnz .invalidAttrib
  1103 00003BBE A808                <1>     test al, dirVolumeID
  1104 00003BC0 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1105 00003BC2 0C20                <1>     or al, dirArchive   ;Set archive bit
  1106 00003BC4 A810                <1>     test al, dirDirectory   
  1107 00003BC6 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1108                              <1> .invalidAttrib:
  1109 00003BC8 B805000000          <1>     mov eax, errAccDen
  1110 00003BCD F9                  <1>     stc
  1111                              <1>     return
    18                              <2> %%_ret:
    19 00003BCE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1112                              <1> .validAttr:
  1113 00003BCF 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  1114 00003BD6 488B35(F0C60300)    <1>     mov rsi, qword [workingCDS]
  1115 00003BDD 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1116 00003BE4 750A                <1>     jne .diskFile
  1117 00003BE6 50                  <1>     push rax    ;Save the new attributes
  1118 00003BE7 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1119 00003BEC CD4F                <1>     int 4Fh
  1120 00003BEE 5B                  <1>     pop rbx
  1121                              <1>     return
    18                              <2> %%_ret:
    19 00003BEF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1122                              <1> .diskFile:
  1123 00003BF0 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1124 00003BF6 740A                <1>     jz .hardFile
  1125 00003BF8 50                  <1>     push rax    ;Save the new attributes
  1126 00003BF9 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1127 00003BFE CD4F                <1>     int 4Fh
  1128 00003C00 5B                  <1>     pop rbx
  1129                              <1>     return
    18                              <2> %%_ret:
    19 00003C01 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1130                              <1> .hardFile:
  1131 00003C02 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1132 00003C08 C605(E5C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1133 00003C0F C605(E6C60300)E5    <1>     mov byte [delChar], 0E5h
  1134 00003C16 E8CD240000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1135 00003C1B 50                  <1>     push rax    ;Save the file attributes on stack
  1136 00003C1C B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1137 00003C21 E813000000          <1>     call buildSFTEntry
  1138 00003C26 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1139 00003C27 B802000000          <1>     mov eax, 2
  1140 00003C2C FF15(12C10300)      <1>     call qword [updateDirShare]
  1141 00003C32 F8                  <1>     clc ;Always clear the CF flag here updateDir defaults to CF=CY
  1142 00003C33 E8BA240000          <1>     call dosCrit1Exit
  1143                              <1>     return
    18                              <2> %%_ret:
    19 00003C38 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1144                              <1> buildSFTEntry:
  1145                              <1> ;Called in a critical section.
  1146                              <1> ;Input: al = Open mode
  1147                              <1> ;       STACK: File attributes if creating a file
  1148                              <1> ;       [currentSFT] = SFT we are building
  1149                              <1> ;       [workingCDS] = CDS of drive to access
  1150                              <1> ;       [workingDPB] = DPB of drive to access
  1151                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1152                              <1> ;
  1153                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1154                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1155                              <1> ;        If CF=CY: - Return fail
  1156                              <1> ;
  1157                              <1> ;
  1158                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1159                              <1> ;   If not, create disk entry.
  1160                              <1> ;Check if the device was a char device by checking curDirCopy.
  1161                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1162                              <1> 
  1163                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1164                              <1> ; to start of file fields of the SFT
  1165 00003C39 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1166 00003C3A 4889E5              <1>     mov rbp, rsp
  1167 00003C3D 488B35(10C70300)    <1>     mov rsi, qword [currentSFT]
  1168                              <1> ;Set the open mode
  1169 00003C44 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1170                              <1> ;Get current time
  1171 00003C48 E80DEEFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1172 00003C4D E8F3EEFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1173 00003C52 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1174                              <1> ;Set current Owner
  1175 00003C55 488B05(02C40300)    <1>     mov rax, qword [currentPSP]
  1176 00003C5C 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1177                              <1> ;Set file pointer to first byte
  1178 00003C60 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1179                              <1> ;Common fields set
  1180 00003C67 F605(E5C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1181 00003C6E 0F847C010000        <1>     jz .openProc
  1182                              <1>     ;Here if Creating a file.
  1183 00003C74 F605(47C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1184 00003C7B 0F8578010000        <1>     jnz .charDev
  1185 00003C81 F605(E2C60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1186 00003C88 0F84AB000000        <1>     jz .createFile
  1187                              <1>     ;Here disk file exists, so recreating the file.
  1188 00003C8E E8FBFDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1189                              <1>     ;al has the char for the filename
  1190                              <1>     ;Sets vars for the sector/offset into the sector
  1191 00003C93 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  1192 00003C9A 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1193 00003C9C 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1194                              <1>     ;al has file attributes.
  1195 00003CA0 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1196 00003CA2 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1197 00003CA5 31C0                <1>     xor eax, eax
  1198                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1199 00003CA7 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1200 00003CAB 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1201 00003CAF 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1202 00003CB2 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1203 00003CB5 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1204 00003CB8 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1205                              <1> 
  1206 00003CBB 57                  <1>     push rdi    ;Save SFT pointer
  1207 00003CBC 488D3D(3CC60300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1208 00003CC3 B920000000          <1>     mov ecx, fatDirEntry_size
  1209 00003CC8 F3A4                <1>     rep movsb
  1210 00003CCA E834CDFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1211 00003CCF 5F                  <1>     pop rdi
  1212                              <1> .createCommon:  ;rdi must point to the current SFT 
  1213                              <1>     ;Now populate the remaining SFT fields 
  1214 00003CD0 488D35(3CC60300)    <1>     lea rsi, curDirCopy
  1215 00003CD7 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1216 00003CDA 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1217 00003CDD 488B05(24C70300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1218 00003CE4 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1219 00003CE8 0FB705(2CC70300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1220 00003CEF C0E805              <1>     shr al, 5   ;Divide by 5 to get directory entry number
  1221 00003CF2 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1222 00003CF5 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1223 00003CF8 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1224 00003CFB 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1225 00003CFF 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1226 00003D03 C1E210              <1>     shl edx, 10h
  1227 00003D06 09D0                <1>     or eax, edx
  1228 00003D08 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1229                              <1> 
  1230 00003D0B 31C0                <1>     xor eax, eax
  1231                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1232 00003D0D 8A05(E7C60300)      <1>     mov al, byte [workingDrv]
  1233 00003D13 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1234 00003D15 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1235 00003D19 488B05(E8C60300)    <1>     mov rax, qword [workingDPB]
  1236 00003D20 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1237                              <1>     ;Last thing, copy the filename over
  1238                              <1>     ;Now save the name
  1239                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1240 00003D24 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1241 00003D28 488D35(3CC60300)    <1>     lea rsi, curDirCopy
  1242 00003D2F 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1243 00003D31 66A5                <1>     movsw
  1244 00003D33 A4                  <1>     movsb
  1245                              <1>     ;SFT filled, now we open on the driver if it supports it
  1246 00003D34 E905010000          <1>     jmp .openDriver
  1247                              <1> .createFile:
  1248                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1249                              <1>     ;rsi points to current sda entry
  1250 00003D39 488D3D(3CC60300)    <1>     lea rdi, curDirCopy
  1251                              <1>     ;Clear out the dir entry
  1252 00003D40 57                  <1>     push rdi
  1253 00003D41 B904000000          <1>     mov ecx, 4
  1254 00003D46 31C0                <1>     xor eax, eax
  1255 00003D48 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1256 00003D4B 5F                  <1>     pop rdi
  1257                              <1>     ;Copy the FCB name over    
  1258 00003D4C 56                  <1>     push rsi
  1259 00003D4D 57                  <1>     push rdi
  1260 00003D4E B90B000000          <1>     mov ecx, 11
  1261 00003D53 488D35(B7C60300)    <1>     lea rsi, fcbName
  1262 00003D5A F3A4                <1>     rep movsb   ;Move over the FCB name
  1263 00003D5C 5F                  <1>     pop rdi
  1264 00003D5D 5E                  <1>     pop rsi
  1265                              <1> 
  1266 00003D5E 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1267                              <1>     ;al has file attributes.
  1268 00003D62 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1269 00003D64 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1270 00003D67 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1271 00003D6A 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1272 00003D6D 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1273 00003D70 8B05(5EC70300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1274                              <1> .searchForDirSpace:
  1275 00003D76 8905(62C70300)      <1>     mov dword [dirClustA], eax
  1276 00003D7C 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1277 00003D7E 668905(66C70300)    <1>     mov word [dirSect], ax
  1278 00003D85 8905(68C70300)      <1>     mov dword [dirEntry], eax
  1279 00003D8B 57                  <1>     push rdi
  1280 00003D8C E848E1FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1281 00003D91 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1282 00003D92 7328                <1>     jnc .dirEntryFnd
  1283 00003D94 813D(5EC70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1283 00003D9C 0000                <1>
  1284 00003D9E 0F84D2000000        <1>     je .bad ;Set CF and exit
  1285 00003DA4 E86CE2FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1286 00003DA9 0F82BE000000        <1>     jc .exit
  1287 00003DAF 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1288 00003DB4 0F84BC000000        <1>     je .bad
  1289                              <1>     ;Else eax = Newly allocated cluster
  1290 00003DBA EBBA                <1>     jmp short .searchForDirSpace
  1291                              <1> .dirEntryFnd:
  1292 00003DBC 4887FE              <1>     xchg rdi, rsi
  1293 00003DBF B904000000          <1>     mov ecx, 4
  1294 00003DC4 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1295 00003DC7 E837CCFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1296 00003DCC 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  1297 00003DD3 E9F8FEFFFF          <1>     jmp .createCommon
  1298                              <1> .open:
  1299                              <1> ;curdircopy has a copy of the disk file directory
  1300                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1301 00003DD8 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  1302 00003DDF 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1303                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1304 00003DE6 E802E1FFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1305 00003DEB E9E0FEFFFF          <1>     jmp .createCommon
  1306                              <1> .openProc:
  1307                              <1>     ;Here if Opening a file.
  1308 00003DF0 F605(47C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1309 00003DF7 74DF                <1>     jz .open
  1310                              <1> .charDev:
  1311 00003DF9 488B05(3CC60300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1312 00003E00 E840210000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1313 00003E05 7307                <1>     jnc .notBadCharDevName
  1314 00003E07 B805000000          <1>     mov eax, errAccDen
  1315 00003E0C EB5F                <1>     jmp short .exit ;CF already set
  1316                              <1> .notBadCharDevName:
  1317 00003E0E 488B35(10C70300)    <1>     mov rsi, qword [currentSFT]
  1318 00003E15 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1319 00003E19 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1320 00003E1D 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1321 00003E20 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1322 00003E23 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1323 00003E27 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1324 00003E2E 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1325 00003E32 B820202020          <1>     mov eax, "    "
  1326 00003E37 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1327 00003E3B 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1328                              <1> .openDriver:
  1329 00003E3E 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  1330 00003E45 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the ptr here
  1331 00003E49 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1332 00003E4F 7508                <1>     jnz .charDevOpen
  1333 00003E51 0FB64601            <1>     movzx eax, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1334 00003E55 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1335                              <1> .charDevOpen:
  1336 00003E59 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1337 00003E5F 740C                <1>     jz .exit  ;If not, immediately jump to exit, all is well
  1338                              <1>     ;rsi has device driver ptr for device, make request
  1339 00003E61 53                  <1>     push rbx
  1340 00003E62 E8841D0000          <1>     call primReqOpenSetup  ;rbx gets header ptr, rsi has driver ptr
  1341 00003E67 E83F1A0000          <1>     call goDriver   ;Make request
  1342 00003E6C 5B                  <1>     pop rbx
  1343                              <1> .exit:
  1344 00003E6D E85FCBFFFF          <1>     call writeThroughBuffers
  1345 00003E72 7202                <1>     jc .bad
  1346 00003E74 5D                  <1>     pop rbp
  1347                              <1>     return
    18                              <2> %%_ret:
    19 00003E75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1348                              <1> .bad:
  1349 00003E76 E834CBFFFF          <1>     call cancelWriteThroughBuffers
  1350 00003E7B F9                  <1>     stc
  1351 00003E7C 5D                  <1>     pop rbp
  1352                              <1>     return
    18                              <2> %%_ret:
    19 00003E7D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1353                              <1> closeMain: ;Int 4Fh AX=1201h
  1354                              <1> ;Gets the directory entry for a file
  1355                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1356                              <1> ;If CF=CY on return: Error, return error with al = error code
  1357                              <1> ;Preserve all regs except eax and rdi
  1358                              <1> ; If CF=NC on return: eax = Unknown
  1359                              <1> ;                     rdi = current SFT ptr
  1360 00003E7E 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1361 00003E85 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1362 00003E8B 7408                <1>     jz .physical
  1363                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1364 00003E8D B806110000          <1>     mov eax, 1106h  ;Make request
  1365 00003E92 CD4F                <1>     int 4Fh ;Beep!
  1366                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 00003E94 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1367                              <1> .physical:  
  1368                              <1> ; We make a request to the dev dir to close the device
  1369                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1370 00003E95 E84E220000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1371 00003E9A 53                  <1>     push rbx
  1372 00003E9B 56                  <1>     push rsi
  1373 00003E9C 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1374 00003EA0 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1375 00003EA6 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1376                              <1>     ;rsi has DPB pointer here
  1377                              <1>     ;rdi has the SFT pointer
  1378 00003EA8 55                  <1>     push rbp
  1379 00003EA9 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1380 00003EAC E8701D0000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1381 00003EB1 E8A2E0FFFF          <1>     call updateDirectoryEntryForFile
  1382 00003EB6 5D                  <1>     pop rbp
  1383                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1384 00003EB7 723F                <1>     jc .exit
  1385 00003EB9 E829CDFFFF          <1>     call flushFile
  1386 00003EBE 7238                <1>     jc .exit    ;If something went wrong, exit
  1387 00003EC0 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1388 00003EC4 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1389                              <1> .charClose:
  1390                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1391                              <1>     ;We now decrement handle count in SFT structure
  1392 00003EC8 E8CB090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1393 00003ECD 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1394 00003ED0 7503                <1>     jnz .driverClose
  1395 00003ED2 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1396                              <1> .driverClose:
  1397 00003ED5 50                  <1>     push rax
  1398 00003ED6 51                  <1>     push rcx
  1399 00003ED7 E871280000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1400 00003EDC 59                  <1>     pop rcx
  1401 00003EDD 58                  <1>     pop rax
  1402 00003EDE 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1403                              <1>     ;and if the device is a disk device, cl will have the unit number
  1404                              <1>     ;We first check if the driver supports oper/close requests
  1405 00003EDF 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1406 00003EE5 7511                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
  1407                              <1>     ;rsi has device driver ptr for device, make request
  1408 00003EE7 E8041D0000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
  1409 00003EEC E8BA190000          <1>     call goDriver   ;Make request
  1410                              <1>     ;Don't check the status here, as we are simply informing the driver 
  1411                              <1>     ; of an operation. Nothing should be able to go wrong. 
  1412                              <1>     ;Functionally, an ignore if anything does go wrong.
  1413 00003EF1 E8DBCAFFFF          <1>     call writeThroughBuffers
  1414 00003EF6 7305                <1>     jnc short .exitOk
  1415                              <1> .exit:
  1416 00003EF8 E8B2CAFFFF          <1>     call cancelWriteThroughBuffers
  1417                              <1> .exitOk:
  1418 00003EFD 5E                  <1>     pop rsi
  1419 00003EFE 5B                  <1>     pop rbx
  1420 00003EFF E8EE210000          <1>     call dosCrit1Exit
  1421                              <1>     return
    18                              <2> %%_ret:
    19 00003F04 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1422                              <1> 
  1423                              <1> readBytes:
  1424                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1425                              <1> ;Input: ecx = Number of bytes to read
  1426                              <1> ;Output: ecx = Number of bytes read
  1427                              <1> ;Number of bytes read 
  1428                              <1> ;If CF=CY, return with error code in ax
  1429 00003F05 E87E070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1430 00003F0A 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1431 00003F0E 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1432 00003F10 3C01                <1>     cmp al, WriteAccess
  1433 00003F12 7509                <1>     jne .readable
  1434 00003F14 B805000000          <1>     mov eax, errAccDen
  1435 00003F19 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1436 00003F1B F9                  <1>     stc
  1437                              <1>     return
    18                              <2> %%_ret:
    19 00003F1C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1438                              <1> .readable:
  1439 00003F1D E8A7070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1440 00003F22 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1441 00003F25 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1442 00003F2B 740A                <1>     jz .notRedir
  1443 00003F2D B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1444 00003F32 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1445                              <1>     return 
    18                              <2> %%_ret:
    19 00003F34 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1446                              <1> .exitOk:
  1447 00003F35 F8                  <1>     clc
  1448                              <1>     return 
    18                              <2> %%_ret:
    19 00003F36 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1449                              <1> .notRedir:
  1450 00003F37 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1451 00003F3D 7510                <1>     jnz readCharDev
  1452 00003F3F E8A4210000          <1>     call dosCrit1Enter
  1453 00003F44 E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1454 00003F49 E8A4210000          <1>     call dosCrit1Exit
  1455                              <1>     return 
    18                              <2> %%_ret:
    19 00003F4E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1456                              <1> readCharDev:
  1457                              <1> ;rdi points to sft for char dev to read
  1458                              <1> ;ecx has the number of bytes to transfer
  1459                              <1> ;Vars have been set up and DTA has the transfer address
  1460                              <1> ;Returns in ecx, the actual bytes transferred
  1461                              <1> ;If CF=CY, return with error code in ax
  1462 00003F4F C605(EDC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1463 00003F56 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1464 00003F5A 488B3D(FAC30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1465 00003F61 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1466 00003F64 0F848C020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1467 00003F6A F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1468 00003F6D 7407                <1>     jz .notNul
  1469                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1470                              <1>     ;NUL never transfers bytes 
  1471 00003F6F 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1472 00003F71 E980020000          <1>     jmp readExitOk    ;Goto exit
  1473                              <1> .notNul:
  1474 00003F76 F6C320              <1>     test bl, charDevBinary
  1475 00003F79 0F857F000000        <1>     jnz .binary
  1476                              <1>     ;Here if the device is in ASCII mode
  1477 00003F7F F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1478 00003F82 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1479                              <1> .consoleInput:
  1480                              <1>     ;Console input here
  1481 00003F88 E8B9E6FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1482                              <1>     ;Get current offset into buffer (if one exists)
  1483 00003F8D 488B35(2FC00300)    <1>     mov rsi, qword [vConHdlOff]
  1484 00003F94 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1485 00003F97 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1486 00003F99 803D(31C30300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1487 00003FA0 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1488                              <1>     ;Else, reset the buffer
  1489 00003FA2 66C705(31C30300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1489 00003FAA FF                  <1>
  1490                              <1> .oldBuf:
  1491                              <1> ;Preserve the dta and number of chars to tfr
  1492 00003FAB 51                  <1>     push rcx
  1493 00003FAC 57                  <1>     push rdi
  1494 00003FAD 488D15(31C30300)    <1>     lea rdx, vConInBuf
  1495 00003FB4 E8ADE6FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1496 00003FB9 5F                  <1>     pop rdi
  1497 00003FBA 59                  <1>     pop rcx
  1498 00003FBB 488D35(33C30300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1499 00003FC2 803E1A              <1>     cmp byte [rsi], EOF
  1500 00003FC5 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1501 00003FC7 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1502 00003FCA B00A                <1>     mov al, LF
  1503 00003FCC E827E2FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1504 00003FD1 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1505 00003FD3 EB18                <1>     jmp short .exit
  1506                              <1> .tfrBuf:
  1507 00003FD5 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1508 00003FD6 AA                  <1>     stosb
  1509 00003FD7 3C0D                <1>     cmp al, CR 
  1510 00003FD9 7503                <1>     jne .noCRLF
  1511 00003FDB C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1512                              <1> .noCRLF:
  1513 00003FDE 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1514 00003FE0 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1515 00003FE2 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1516                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1517 00003FE4 E80FE2FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1518 00003FE9 31F6                <1>     xor esi, esi
  1519 00003FEB 0C01                <1>     or al, 1    ;Set ZF = NZ
  1520                              <1> .exit:
  1521 00003FED E86CE6FFFF          <1>     call vConRetDriver
  1522 00003FF2 488935(2FC00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1523 00003FF9 E9F8010000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1524                              <1> 
  1525                              <1> .binary:
  1526                              <1>     ;Setup registers for transfer
  1527 00003FFE 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1528 00004001 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1529                              <1>     ;ecx has the number of bytes to transfer directly
  1530 00004004 E8361B0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1531 00004009 488B35(E8C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1532 00004010 E896180000          <1>     call goDriver   ;Make the request
  1533 00004015 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1534 00004018 0FB73D(A6C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1535 0000401F F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1536 00004025 7422                <1>     jz .binNoError
  1537                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1538 00004027 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1539 00004029 E857170000          <1>     call charDevErr   ;ah = has part of the error 
  1540                              <1>     ;al now has the response
  1541 0000402E 3C00                <1>     cmp al, critIgnore
  1542 00004030 7417                <1>     je .binNoError ;Simply proceed as normal
  1543 00004032 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1544 00004035 3C03                <1>     cmp al, critFail
  1545 00004037 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1546                              <1>     ;Fallthrough here for fail!
  1547                              <1> .failExit:
  1548 00004039 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  1549 00004040 31C9                <1>     xor ecx, ecx
  1550 00004042 B805000000          <1>     mov eax, errAccDen
  1551 00004047 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1552                              <1>     return
    18                              <2> %%_ret:
    19 00004048 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1553                              <1> .binNoError:
  1554                              <1>     ;Get number of bytes transferred into 
  1555 00004049 8B05(B9C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1556 0000404F F7D8                <1>     neg eax ;make it into -eax
  1557 00004051 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1558                              <1>     ;ecx now has bytes left to transfer
  1559 00004055 50                  <1>     push rax    ;Save value on stack
  1560 00004056 31C0                <1>     xor eax, eax ;Set ZF
  1561 00004058 FFC0                <1>     inc eax ;Clear ZF
  1562 0000405A 58                  <1>     pop rax ;Get back the original value
  1563 0000405B E996010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1564                              <1> .generalASCII:
  1565                              <1>     ;ecx has bytes to transfer here
  1566                              <1>     ;Setup registers for transfer
  1567 00004060 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1568 00004063 51                  <1>     push rcx
  1569 00004064 B901000000          <1>     mov ecx, 1  ;Get one char
  1570 00004069 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1571 0000406C E8CE1A0000          <1>     call primReqReadSetup   ;Setup request
  1572 00004071 59                  <1>     pop rcx
  1573                              <1>     ;rbx now has request header ptr
  1574 00004072 488B35(E8C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1575                              <1> .asciiReadChar:
  1576 00004079 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1577 0000407C E849E5FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1578 00004081 E825180000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1579 00004086 0FB73D(A6C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1580 0000408D F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1581 00004093 741E                <1>     jz .asciiNoError
  1582 00004095 E8EB160000          <1>     call charDevErr    ;Call Int 44h
  1583                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1584 0000409A C705(B9C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1584 000040A2 0000                <1>
  1585 000040A4 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1586 000040A7 3C03                <1>     cmp al, critFail
  1587 000040A9 748E                <1>     je .failExit
  1588 000040AB 3C01                <1>     cmp al, critRetry
  1589 000040AD 74CA                <1>     je .asciiReadChar
  1590                              <1>     ;Ignore here, pretend NULL CHAR was read
  1591 000040AF 30C0                <1>     xor al, al
  1592 000040B1 EB15                <1>     jmp short .asciiIgnoreEP
  1593                              <1> .asciiNoError:
  1594                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1595                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1596                              <1> ;Preserve RBX, RSI
  1597                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1598 000040B3 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1599 000040B6 813D(B9C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1599 000040BE 0000                <1>
  1600 000040C0 0F8530010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1601 000040C6 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1602                              <1> .asciiIgnoreEP:
  1603 000040C8 48FF05(B1C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1604 000040CF 48FFC7              <1>     inc rdi ;Also advance register pointer
  1605 000040D2 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1606 000040D4 0F841C010000        <1>     je readExitOk
  1607 000040DA 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1608 000040DC E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1609                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1610 000040DE FEC0                <1>     inc al  ;make ZF=NZ
  1611 000040E0 E911010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1612                              <1> 
  1613                              <1> readDiskFile:
  1614                              <1> ;rdi = Current SFT
  1615                              <1> ;rbp = WorkingDPB
  1616                              <1> ;ecx = Bytes to transfer
  1617 000040E5 C605(EDC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1618 000040EC C605(DEC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1619                              <1>     ;We have the following vars setup:
  1620                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1621                              <1>     ;currClustF
  1622                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1623                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1624 000040F3 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1625 000040F6 85D2                <1>     test edx, edx
  1626 000040F8 0F84F8000000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1627 000040FE 8B15(2EC70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1628 00004104 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1629 00004107 8905(32C70300)      <1>     mov dword [currClustD], eax
  1630 0000410D 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1631 0000410F 0F84E1000000        <1>     jz readExitOk
  1632 00004115 8B0D(56C70300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1633                              <1>     ;Check if we have opened a volume label (should never happen)
  1634 0000411B 66F747020800        <1>     test word [rdi + sft.wOpenMode], volumeLabel    ;If we try read from vollbl
  1635 00004121 7407                <1>     jz .shareCheck
  1636 00004123 B805000000          <1>     mov eax, errAccDen
  1637 00004128 F9                  <1>     stc
  1638                              <1>     return
    18                              <2> %%_ret:
    19 00004129 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1639                              <1> .shareCheck:
  1640                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1641 0000412A E825260000          <1>     call retryShareIODelay
  1642 0000412F 7308                <1>     jnc .shareOk
  1643 00004131 E81F270000          <1>     call shareCheckReadLockViolation
  1644 00004136 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1645                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    18                              <2> %%_ret:
    19 00004138 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1646                              <1> .shareOk:
  1647 00004139 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1648 0000413B 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1649 0000413D 741E                <1>     jz .skipWalk
  1650                              <1> .goToCurrentCluster:
  1651 0000413F 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1652 00004144 0F84AC000000        <1>     je readExitOk ;Exit with no bytes transferred
  1653 0000414A 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
  1654 0000414C E835CDFFFF          <1>     call readFAT    ;Get in eax the next cluster
  1655 00004151 0F8290000000        <1>     jc .badExit   ;This can only return Fail
  1656 00004157 FFCA                <1>     dec edx ;Decrement counter
  1657 00004159 75E4                <1>     jnz .goToCurrentCluster
  1658                              <1> ;Now we fall out with ebx = Current cluster
  1659 0000415B 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
  1660                              <1> .skipWalk:
  1661 0000415D E84ACBFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1662                              <1>     ;Now we add the offset to this
  1663 00004162 0FB61D(3AC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1664 00004169 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1665 0000416C 488905(3BC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1666                              <1> ;Main
  1667                              <1> .mainRead:
  1668 00004173 E84BCAFFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1669 00004178 726D                <1>     jc .badExit
  1670 0000417A 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1671 0000417E 0FB71D(43C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1672 00004185 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1673                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1674                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1675 00004188 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1676 0000418B 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1677 0000418E 8B1D(5AC70300)      <1>     mov ebx, dword [tfrCntr]
  1678 00004194 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1679 00004196 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1680 00004199 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1681 0000419D 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1682 0000419F 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1683 000041A2 57                  <1>     push rdi
  1684 000041A3 488B3D(FAC30300)    <1>     mov rdi, qword [currentDTA]
  1685 000041AA 51                  <1>     push rcx
  1686 000041AB F3A4                <1>     rep movsb
  1687 000041AD 59                  <1>     pop rcx
  1688 000041AE 010D(45C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1689 000041B4 290D(5AC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1690 000041BA 48893D(FAC30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1691 000041C1 5F                  <1>     pop rdi
  1692 000041C2 8B0D(5AC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1693 000041C8 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1694 000041CA 742A                <1>     jz readExitOk ;Exit if so!
  1695 000041CC E829CCFFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1696 000041D1 7214                <1>     jc .badExit
  1697                              <1>     ;If ZF=ZE then CurrClustF has last cluster
  1698 000041D3 7421                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1699                              <1>     ;Else repeat
  1700                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1701 000041D5 66C705(43C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1701 000041DD 00                  <1>
  1702 000041DE 488B05(3BC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1703 000041E5 EB8C                <1>     jmp short .mainRead
  1704                              <1> .badExit:
  1705                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1706                              <1>     ; we need to update the SFT before returning
  1707 000041E7 8B0D(5AC70300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1708 000041ED 30C0                <1>     xor al, al  ;Set ZF flag
  1709 000041EF E802000000          <1>     call readExitOk   ;We call this
  1710 000041F4 F9                  <1>     stc ;All calls which end up here return Fail!
  1711 000041F5 C3                  <1>     ret
  1712                              <1> 
  1713                              <1> readExitOk:
  1714                              <1> ;Input: ecx = Number of bytes left to transfer!
  1715                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1716 000041F6 890D(5AC70300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1717                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  1718                              <1>     ;jnz .skipbitClear
  1719                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  1720                              <1>     ;The disk transfer must've flushed by now. 
  1721                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  1722                              <1> .skipbitClear:  ;Or skip that entirely
  1723 000041FC E88F040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1724                              <1>     return 
    18                              <2> %%_ret:
    19 00004201 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1725                              <1> 
  1726                              <1> writeBytes:
  1727                              <1> ;Writes the bytes from the user buffer
  1728                              <1> ;Input: ecx = Bytes to xfr
  1729                              <1> ;Returns number of bytes written in ecx
  1730 00004202 E881040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1731 00004207 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1732 0000420B 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1733 0000420D 3C00                <1>     cmp al, ReadAccess
  1734 0000420F 7509                <1>     jne .writeable
  1735                              <1> .noWrite:
  1736 00004211 B805000000          <1>     mov eax, errAccDen
  1737 00004216 31C9                <1>     xor ecx, ecx
  1738 00004218 F9                  <1>     stc
  1739 00004219 C3                  <1>     ret
  1740                              <1> .writeable:
  1741 0000421A 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1742 00004220 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1743 00004222 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1744 00004226 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1745                              <1> .skipAttribCheck:
  1746 00004228 E89C040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1747 0000422D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1748 00004233 7408                <1>     jz .notRedir
  1749 00004235 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1750 0000423A CD4F                <1>     int 4Fh
  1751                              <1>     return
    18                              <2> %%_ret:
    19 0000423C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1752                              <1> .notRedir:
  1753 0000423D 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1754 00004243 7510                <1>     jnz writeCharDev
  1755 00004245 E89E1E0000          <1>     call dosCrit1Enter
  1756 0000424A E84C010000          <1>     call writeDiskFile
  1757 0000424F E89E1E0000          <1>     call dosCrit1Exit
  1758                              <1>     return
    18                              <2> %%_ret:
    19 00004254 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1759                              <1> writeCharDev:
  1760 00004255 C605(EDC30300)04    <1>     mov byte [errorLocus], eLocChr
  1761                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1762 0000425C 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1763 00004262 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1764                              <1>     ;If ecx = 0, we exit
  1765 00004266 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1766 00004268 85C9                <1>     test ecx, ecx
  1767 0000426A 0F84E3030000        <1>     jz writeExit
  1768 00004270 488B1D(FAC30300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1769 00004277 4889DF              <1>     mov rdi, rbx
  1770 0000427A 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1771 0000427C A820                <1>     test al, charDevBinary
  1772 0000427E 744A                <1>     jz .asciiDev
  1773                              <1> ;Write binary transfer here
  1774                              <1> .binaryLp:
  1775 00004280 31C0                <1>     xor eax, eax
  1776 00004282 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1777 00004285 E8AA180000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1778 0000428A 488B35(10C70300)    <1>     mov rsi, qword [currentSFT]
  1779 00004291 E811160000          <1>     call goDriverChar
  1780 00004296 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1781 00004299 B487                <1>     mov ah, critCharDev | critData | critWrite
  1782 0000429B 0FB73D(A6C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1783 000042A2 F7C700800000        <1>     test edi, drvErrStatus
  1784 000042A8 7415                <1>     jz .binXfrOk
  1785 000042AA E8D6140000          <1>     call charDevErr ;Invoke Int 44h
  1786 000042AF 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1787 000042B2 3C00                <1>     cmp al, critIgnore
  1788 000042B4 7409                <1>     je .binXfrOk
  1789 000042B6 3C01                <1>     cmp al, critRetry
  1790 000042B8 74C6                <1>     je .binaryLp
  1791 000042BA E9D5000000          <1>     jmp .exitFail
  1792                              <1> .binXfrOk:
  1793 000042BF 8B05(B9C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1794 000042C5 E989030000          <1>     jmp writeExit   ;Exit oki with # bytes xfrd in eax
  1795                              <1> .asciiDev:
  1796 000042CA A802                <1>     test al, charDevConOut
  1797 000042CC 0F859E000000        <1>     jnz .conDev
  1798 000042D2 A804                <1>     test al, charDevNulDev
  1799 000042D4 0F858F000000        <1>     jnz .nulDev
  1800                              <1>     ;Here we transfer for a generic character device in ascii mode
  1801 000042DA 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1802 000042DC 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1803 000042DF 0F846E030000        <1>     je writeExit
  1804 000042E5 51                  <1>     push rcx
  1805 000042E6 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1806 000042EB 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1807 000042EE E841180000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1808 000042F3 59                  <1>     pop rcx
  1809 000042F4 488B35(10C70300)    <1>     mov rsi, qword [currentSFT]
  1810 000042FB 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1811                              <1> .asciiLp:
  1812 000042FF E8C6E2FFFF          <1>     call checkBreak
  1813 00004304 E8A2150000          <1>     call goDriver
  1814 00004309 57                  <1>     push rdi
  1815 0000430A B487                <1>     mov ah, critCharDev | critData | critWrite
  1816 0000430C 0FB73D(A6C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1817 00004313 F7C700800000        <1>     test edi, drvErrStatus
  1818 00004319 741D                <1>     jz .asciiNoError
  1819 0000431B E865140000          <1>     call charDevErr ;Invoke Int 44h
  1820 00004320 5F                  <1>     pop rdi
  1821 00004321 C705(B9C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1821 00004329 0000                <1>
  1822 0000432B 3C01                <1>     cmp al, critRetry
  1823 0000432D 74D0                <1>     je .asciiLp
  1824 0000432F 3C00                <1>     cmp al, critIgnore
  1825 00004331 7412                <1>     je .ignoreEp
  1826 00004333 E95C000000          <1>     jmp .exitFail
  1827                              <1> .asciiNoError:
  1828 00004338 5F                  <1>     pop rdi
  1829 00004339 813D(B9C40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1829 00004341 0000                <1>
  1830 00004343 741D                <1>     je .bytesXfrdOk
  1831                              <1> .ignoreEp:
  1832 00004345 FFC2                <1>     inc edx ;One more char has been xfrd
  1833 00004347 FF05(B1C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1834 0000434D 48FFC7              <1>     inc rdi ;And our copy... 
  1835 00004350 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1836 00004353 740D                <1>     je .bytesXfrdOk
  1837 00004355 66C705(A6C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1837 0000435D 00                  <1>
  1838 0000435E FFC9                <1>     dec ecx
  1839 00004360 759D                <1>     jnz .asciiLp
  1840                              <1> .bytesXfrdOk:
  1841 00004362 89D0                <1>     mov eax, edx
  1842 00004364 E9EA020000          <1>     jmp writeExit
  1843                              <1> .nulDev:
  1844 00004369 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1845 0000436B E9E3020000          <1>     jmp writeExit
  1846                              <1> .conDev:
  1847 00004370 E8D1E2FFFF          <1>     call vConSwapDriver
  1848 00004375 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1849 00004378 51                  <1>     push rcx
  1850                              <1> .conDevLp:
  1851 00004379 AC                  <1>     lodsb
  1852 0000437A 3C1A                <1>     cmp al, EOF
  1853 0000437C 7409                <1>     je .conDevExit
  1854 0000437E E875DEFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  1855 00004383 FFC9                <1>     dec ecx
  1856 00004385 75F2                <1>     jnz .conDevLp
  1857                              <1> .conDevExit:
  1858 00004387 58                  <1>     pop rax ;Get initial ecx back into eax
  1859 00004388 29C8                <1>     sub eax, ecx
  1860 0000438A E8CFE2FFFF          <1>     call vConRetDriver
  1861 0000438F E9BF020000          <1>     jmp writeExit   ;Input: eax = bytes xfrd
  1862                              <1> .exitFail:
  1863 00004394 B805000000          <1>     mov eax, errAccDen
  1864 00004399 F9                  <1>     stc
  1865                              <1>     return
    18                              <2> %%_ret:
    19 0000439A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1866                              <1> writeDiskFile:
  1867                              <1>     ;rdi has SFT ptr
  1868 0000439B 8B0D(56C70300)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  1869 000043A1 C605(EDC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  1870 000043A8 C605(DEC60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  1871 000043AF 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  1872 000043B5 0F856A020000        <1>     jnz .badExit
  1873 000043BB 85C9                <1>     test ecx, ecx
  1874 000043BD 7505                <1>     jnz .nonZeroWrite
  1875 000043BF B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  1876                              <1> .nonZeroWrite:
  1877                              <1>     ;Now do share check here
  1878 000043C4 E88B230000          <1>     call retryShareIODelay
  1879 000043C9 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  1880 000043CB E87C240000          <1>     call shareCheckWriteLockViolation
  1881 000043D0 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  1882                              <1>     return  ;Else return with CF=CY
    18                              <2> %%_ret:
    19 000043D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1883                              <1> .proceedWithWrite:
  1884 000043D3 31DB                <1>     xor ebx, ebx
  1885 000043D5 891D(52C70300)      <1>     mov dword [bytesAppend], ebx ;Reset the appending counter
  1886 000043DB 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  1887                              <1>     ;If the start cluster is 0, we create a new cluster chain
  1888 000043DE 85C0                <1>     test eax, eax
  1889 000043E0 7520                <1>     jnz .notStart
  1890 000043E2 E83FC9FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  1891 000043E7 0F821F020000        <1>     jc .exitPrepHardErr
  1892 000043ED 3DFFFFFFFF          <1>     cmp eax, -1
  1893 000043F2 0F8434020000        <1>     je .exitPrep
  1894                              <1>     ;Now eax has the first cluster of chain
  1895 000043F8 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  1896 000043FB C605(51C70300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  1897                              <1> .notStart:
  1898 00004402 E8D2C8FFFF          <1>     call getLastClusterInChain  ;to get the current last cluster in the file
  1899 00004407 8905(4DC70300)      <1>     mov dword [lastClustA], eax
  1900 0000440D E8E0C8FFFF          <1>     call getNumberOfClustersInChain ;Gets number of clusters
  1901 00004412 FFC8                <1>     dec eax ;Turn into an offset of clusters in file
  1902 00004414 8905(49C70300)      <1>     mov dword [lastClust], eax
  1903                              <1>     ;Get the disk cluster of the file (currClustD)
  1904 0000441A 8B0D(2EC70300)      <1>     mov ecx, dword [currClustF]
  1905 00004420 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1906 00004423 E8E5C8FFFF          <1>     call getClusterInChain  ;Returns in eax the disk cluster value
  1907 00004428 0F82F7010000        <1>     jc .badExit
  1908                              <1>     ;ecx has the number of clusters we need to extend the allocation by.
  1909 0000442E 67E36A              <1>     jecxz .skipExtension
  1910 00004431 E876C9FFFF          <1>     call findFreeClusterData    ;This updates the dpb to have free cluster data
  1911 00004436 0F82E9010000        <1>     jc .badExit
  1912 0000443C 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters
  1913 00004441 0F84FF010000        <1>     je .noByteExit
  1914 00004447 394D31              <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], ecx
  1915 0000444A 0F82F6010000        <1>     jb .noByteExit    ;If dNumberOfFreeClusters < ecx, exit
  1916                              <1>     ;Enough to extend by ecx amount
  1917 00004450 8B1D(4DC70300)      <1>     mov ebx, dword [lastClustA] ;Get the last disk cluster of the file
  1918 00004456 E8ECC8FFFF          <1>     call allocateClusters   ;Extend by ecx clusters
  1919 0000445B 0F82C4010000        <1>     jc .badExit
  1920 00004461 010D(49C70300)      <1>     add dword [lastClust], ecx  
  1921 00004467 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1922 0000446A 8B0D(49C70300)      <1>     mov ecx, dword [lastClust]
  1923 00004470 E898C8FFFF          <1>     call getClusterInChain
  1924 00004475 0F82AA010000        <1>     jc .badExit
  1925                              <1>     ;eax has the last cluster on disk
  1926 0000447B 8905(4DC70300)      <1>     mov dword [lastClustA], eax
  1927                              <1>     ;Now we must extend the filesize in the SFT
  1928 00004481 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1929 00004484 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1930 00004487 31C0                <1>     xor eax, eax
  1931 00004489 8505(56C70300)      <1>     test dword [tfrLen], eax
  1932 0000448F 0F84BE010000        <1>     jz writeExit    ;If we were extending the file, we are done
  1933 00004495 8B05(4DC70300)      <1>     mov eax, dword [lastClustA] ;Get the absolute last cluster
  1934                              <1> .skipExtension:
  1935 0000449B 8905(32C70300)      <1>     mov dword [currClustD], eax ;Now eax has the currClustD value
  1936                              <1>     ;Get the disk sector too
  1937 000044A1 E806C8FFFF          <1>     call getStartSectorOfCluster
  1938 000044A6 0FB61D(3AC70300)    <1>     movzx ebx, byte [currSectC] ;Add the in cluster sector offset
  1939 000044AD 01D8                <1>     add eax, ebx    ;Add the offset to eax
  1940 000044AF 8905(3BC70300)      <1>     mov dword [currSectD], eax 
  1941                              <1>     ;If tfrLen = 0, we truncate to current file pointer position, rounding up
  1942                              <1>     ; clusterwise!
  1943 000044B5 8B0D(56C70300)      <1>     mov ecx, dword [tfrLen] ;Get the number of bytes to transfer in ecx
  1944 000044BB 85C9                <1>     test ecx, ecx
  1945 000044BD 0F8433010000        <1>     jz .truncate
  1946                              <1>     ;Here we write proper data to the disk file
  1947                              <1> .writeLoop:
  1948 000044C3 0FB705(43C70300)    <1>     movzx eax, word [currByteS] ;Get bytewise sector offset
  1949 000044CA 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  1950 000044CE 29C1                <1>     sub ecx, eax    ;Get bytes left to fill this sector in ecx
  1951 000044D0 8B05(5AC70300)      <1>     mov eax, dword [tfrCntr] ;Get # bytes left to transfer
  1952 000044D6 6639C1              <1>     cmp cx, ax  ;Is # of bytes leftto tfr less than bytes left in sector?
  1953 000044D9 660F47C8            <1>     cmova cx, ax    ;If yes, swap
  1954 000044DD 66890D(2CC70300)    <1>     mov word [sectTfr], cx  ;Save this value in the var
  1955 000044E4 0FB605(3AC70300)    <1>     movzx eax, byte [currSectC] ;Get sector offset in cluster
  1956 000044EB 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
  1957 000044EE 0F8689000000        <1>     jbe .stayInCluster
  1958                              <1>     ;Get next Cluster information here
  1959 000044F4 8B05(32C70300)      <1>     mov eax, dword [currClustD] ;Get disk cluster
  1960 000044FA 3B05(4DC70300)      <1>     cmp eax, dword [lastClustA] ;Is this the last sector?
  1961 00004500 7543                <1>     jne .nextCluster
  1962                              <1>     ;Growing the file
  1963 00004502 C605(51C70300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true
  1964 00004509 B901000000          <1>     mov ecx, 1  ;Request 1 cluster
  1965 0000450E 89C3                <1>     mov ebx, eax    ;Save the last cluster number in eax
  1966 00004510 E832C8FFFF          <1>     call allocateClusters
  1967 00004515 0F82F1000000        <1>     jc .exitPrepHardErr
  1968 0000451B 3DFFFFFFFF          <1>     cmp eax, -1 ;If eax = -1 then disk full condition
  1969 00004520 0F8206010000        <1>     jc .exitPrep
  1970 00004526 89D8                <1>     mov eax, ebx    ;ebx is preserved
  1971 00004528 E859C9FFFF          <1>     call readFAT    ;Goto next cluster now, return in eax next cluster
  1972 0000452D 0F82D9000000        <1>     jc .exitPrepHardErr
  1973 00004533 FF05(49C70300)      <1>     inc dword [lastClust]
  1974 00004539 8905(4DC70300)      <1>     mov dword [lastClustA], eax ;Now eax is the new last cluster
  1975 0000453F 8B05(32C70300)      <1>     mov eax, dword [currClustD] ;Get the old last cluster
  1976                              <1>     ;eax now has the old last sector
  1977                              <1> .nextCluster:
  1978                              <1>     ;eax has old disk cluster information
  1979 00004545 E83CC9FFFF          <1>     call readFAT    ;Get the next disk cluster in eax
  1980 0000454A 0F82BC000000        <1>     jc .exitPrepHardErr
  1981 00004550 8905(32C70300)      <1>     mov dword [currClustD], eax
  1982 00004556 FF05(2EC70300)      <1>     inc dword [currClustF]
  1983 0000455C E84BC7FFFF          <1>     call getStartSectorOfCluster
  1984 00004561 488905(3BC70300)    <1>     mov qword [currSectD], rax
  1985 00004568 FF05(36C70300)      <1>     inc dword [currSectF]
  1986 0000456E 31C0                <1>     xor eax, eax
  1987 00004570 8805(3AC70300)      <1>     mov byte [currSectC], al  ;Sector zero in cluster
  1988 00004576 668905(43C70300)    <1>     mov word [currByteS], ax  ;And byte zero of this sector in the cluster
  1989                              <1> .stayInCluster:
  1990 0000457D 488B05(3BC70300)    <1>     mov rax, qword [currSectD]  ;Get disk sector
  1991 00004584 E83AC6FFFF          <1>     call getBufForData
  1992 00004589 0F827D000000        <1>     jc .exitPrepHardErr
  1993                              <1>     ;rbx points to disk buffer header
  1994 0000458F 0FB705(43C70300)    <1>     movzx eax, word [currByteS] 
  1995 00004596 488D5C0330          <1>     lea rbx, qword [rbx + bufferHdr.dataarea + rax] ;In sector offset
  1996                              <1>     ;rbx points to the current byte to write at
  1997 0000459B 57                  <1>     push rdi
  1998 0000459C 56                  <1>     push rsi
  1999 0000459D 4889DF              <1>     mov rdi, rbx    ;The sector is the destination of the write
  2000 000045A0 488B35(FAC30300)    <1>     mov rsi, qword [currentDTA] ;Get the user buffer as the source
  2001 000045A7 0FB70D(2CC70300)    <1>     movzx ecx, word [sectTfr]   ;Get # of bytes to write
  2002 000045AE F3A4                <1>     rep movsb   ;Move over cx number of bytes
  2003 000045B0 488935(FAC30300)    <1>     mov qword [currentDTA], rsi ;Update currentDTA
  2004 000045B7 5E                  <1>     pop rsi
  2005 000045B8 5F                  <1>     pop rdi
  2006 000045B9 E845C4FFFF          <1>     call markBufferDirty
  2007 000045BE 0FB70D(2CC70300)    <1>     movzx ecx, word [sectTfr]
  2008 000045C5 F605(51C70300)FF    <1>     test byte [fileGrowing], -1
  2009 000045CC 7406                <1>     jz .notGrowing
  2010 000045CE 010D(52C70300)      <1>     add dword [bytesAppend], ecx
  2011                              <1> .notGrowing:
  2012 000045D4 290D(5AC70300)      <1>     sub dword [tfrCntr], ecx
  2013 000045DA 7450                <1>     jz .exitPrep
  2014 000045DC 31C0                <1>     xor eax, eax
  2015 000045DE 668905(43C70300)    <1>     mov word [currByteS], ax    ;Start of the next sector
  2016 000045E5 010D(45C70300)      <1>     add dword [currByteF], ecx  ;Goto the next sector in the file
  2017 000045EB FE05(3AC70300)      <1>     inc byte [currSectC]    ;Increment sector in cluster now
  2018 000045F1 E9CDFEFFFF          <1>     jmp .writeLoop
  2019                              <1> 
  2020                              <1> .truncate:
  2021                              <1> ;We must free the chain from currClustD
  2022 000045F6 8B05(32C70300)      <1>     mov eax, dword [currClustD]
  2023 000045FC E860C8FFFF          <1>     call truncateFAT    ;Truncate from the current cluster
  2024 00004601 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2025 00004604 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2026 00004607 E93A000000          <1>     jmp .noByteExit ;Exit ok!
  2027                              <1> .exitPrepHardErr:
  2028 0000460C 50                  <1>     push rax    ;Save error code
  2029 0000460D E81A000000          <1>     call .exitPrep
  2030 00004612 58                  <1>     pop rax
  2031                              <1> .badExitHard:    ;AL has error code already
  2032 00004613 E897C3FFFF          <1>     call cancelWriteThroughBuffers
  2033 00004618 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2034 0000461D FF15(12C10300)      <1>     call qword [updateDirShare]
  2035 00004623 F9                  <1>     stc
  2036                              <1>     return
    18                              <2> %%_ret:
    19 00004624 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2037                              <1> .badExit:
  2038                              <1> ;Might need to do some weird stuff later. Leave for now
  2039 00004625 B805000000          <1>     mov eax, errAccDen
  2040 0000462A EBE7                <1>     jmp short .badExitHard
  2041                              <1> 
  2042                              <1> .exitPrep:
  2043 0000462C 8B0D(52C70300)      <1>     mov ecx, dword [bytesAppend]
  2044 00004632 014F17              <1>     add dword [rdi + sft.dFileSize], ecx    ;Add these bytes to the filesize
  2045 00004635 8B05(56C70300)      <1>     mov eax, dword [tfrLen]
  2046 0000463B 2B05(5AC70300)      <1>     sub eax, dword [tfrCntr]    ;Subtract by bytes left to tfr
  2047 00004641 E90D000000          <1>     jmp writeExit
  2048                              <1> 
  2049                              <1> .noByteExit:
  2050 00004646 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2051 0000464B FF15(12C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2052 00004651 31C0                <1>     xor eax, eax
  2053                              <1> writeExit:
  2054                              <1> ;Advances the bytes on the file pointer
  2055                              <1> ;eax = Number of bytes transferred  
  2056 00004653 E879C3FFFF          <1>     call writeThroughBuffers
  2057 00004658 72B2                <1>     jc writeDiskFile.exitPrepHardErr
  2058 0000465A 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  2059 00004661 89C1                <1>     mov ecx, eax
  2060 00004663 E801000000          <1>     call .advPtr
  2061                              <1>     return  ;Return to caller, ecx = # bytes xfrd
    18                              <2> %%_ret:
    19 00004668 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2062                              <1> .advPtr:
  2063 00004669 67E307              <1>     jecxz .exit ;If no bytes written, skip updating anything
  2064 0000466C 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2065 00004670 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx
  2066                              <1> .exit:
  2067 00004673 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2068 00004678 FF15(12C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2069 0000467E F8                  <1>     clc
  2070                              <1>     return
    18                              <2> %%_ret:
    19 0000467F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2071                              <1> ;-----------------------------------:
  2072                              <1> ;        File Handle routines       :
  2073                              <1> ;-----------------------------------:
  2074                              <1> 
  2075                              <1> setCurrentSFT:
  2076                              <1> ;Set the pointer in rdi as current SFT 
  2077 00004680 48893D(10C70300)    <1>     mov qword [currentSFT], rdi
  2078                              <1>     return 
    18                              <2> %%_ret:
    19 00004687 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2079                              <1> getCurrentSFT:
  2080                              <1> ;Get the current SFT pointer in rdi
  2081 00004688 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  2082                              <1>     return 
    18                              <2> %%_ret:
    19 0000468F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2083                              <1> updateCurrentSFT:
  2084                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2085                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2086 00004690 57                  <1>     push rdi
  2087 00004691 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
  2088 00004698 8B0D(56C70300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
  2089 0000469E 2B0D(5AC70300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
  2090                              <1>     ;ecx has bytes transferred
  2091 000046A4 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2092 000046AA 751A                <1>     jnz .exit
  2093 000046AC 50                  <1>     push rax
  2094 000046AD 8B05(32C70300)      <1>     mov eax, dword [currClustD]
  2095 000046B3 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2096 000046B6 8B05(2EC70300)      <1>     mov eax, dword [currClustF]
  2097 000046BC 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2098 000046BF 58                  <1>     pop rax
  2099 000046C0 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
  2100 000046C3 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2101                              <1> .exit:
  2102 000046C6 5F                  <1>     pop rdi
  2103 000046C7 F8                  <1>     clc
  2104                              <1>     return 
    18                              <2> %%_ret:
    19 000046C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2105                              <1> setupVarsForTransfer:
  2106                              <1> ;Computes the actual bytes to be transferred and 
  2107                              <1> ; sets up internal variables for the transfer. 
  2108                              <1> ;Works for both reading and writing
  2109                              <1> ;Input: ecx = User desired Bytes to transfer
  2110                              <1> ;       rdi = SFT pointer for the file
  2111                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2112                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2113                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2114                              <1> ;
  2115                              <1> ;Note: Does not account for a FULL disk. When writing,
  2116                              <1> ; if the disk will get full as a result of the write,
  2117                              <1> ; stop at the last byte before the transfer. If the 
  2118                              <1> ; file pointer is past the last free byte, write 0
  2119 000046C9 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2120 000046CD 488935(E8C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2121 000046D4 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2122 000046D7 8905(45C70300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2123 000046DD 890D(56C70300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2124 000046E3 890D(5AC70300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2125 000046E9 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2126 000046EF 7402                <1>     jz setupVarsForDiskTransfer
  2127 000046F1 F8                  <1>     clc
  2128                              <1>     return
    18                              <2> %%_ret:
    19 000046F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2129                              <1> setupVarsForDiskTransfer:
  2130                              <1> ;Extension of the above, but for Disk files only
  2131                              <1> ;Input: ecx = User desired Bytes to transfer
  2132                              <1> ;       rdi = SFT pointer for the file
  2133                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2134                              <1> ;        CF=CY: Error exit
  2135 000046F3 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2136 000046F6 8905(45C70300)      <1>     mov dword [currByteF], eax
  2137 000046FC 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2138                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2139 00004700 48892D(E8C60300)    <1>     mov qword [workingDPB], rbp
  2140 00004707 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2141 0000470A 881D(E7C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2142 00004710 8B05(45C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2143 00004716 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2144 0000471A 31D2                <1>     xor edx, edx    ;Zero rdx
  2145 0000471C F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2146                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2147                              <1>     ;edx has the offset into that sector
  2148 0000471E 8905(36C70300)      <1>     mov dword [currSectF], eax
  2149 00004724 668915(43C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2150 0000472B 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2151 0000472D 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2152 00004730 8805(3AC70300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2153 00004736 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2154 00004738 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2155 0000473B D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2156 0000473D 8915(2EC70300)      <1>     mov dword [currClustF], edx ;Save in var
  2157 00004743 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2158                              <1> .exit:
  2159 00004745 F8                  <1>     clc
  2160                              <1>     return 
    18                              <2> %%_ret:
    19 00004746 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2161                              <1> findFreeSFT:
  2162                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2163                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2164                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2165                              <1> ;        CF=CY => eax = errNhl, error exit
  2166 00004747 31DB                <1>     xor ebx, ebx
  2167                              <1> .mainLp:
  2168 00004749 53                  <1>     push rbx    ;Save the sft ndx
  2169 0000474A E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2170 0000474F 5B                  <1>     pop rbx
  2171 00004750 7307                <1>     jnc .sftExists
  2172 00004752 B804000000          <1>     mov eax, errNhl
  2173 00004757 F9                  <1>     stc
  2174                              <1>     return
    18                              <2> %%_ret:
    19 00004758 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2175                              <1> .sftExists:
  2176 00004759 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2177 0000475E 7427                <1>     je .sftFound
  2178 00004760 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2179 00004765 751C                <1>     jne .gotoNextNdx
  2180                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2181 00004767 53                  <1>     push rbx
  2182 00004768 488B1D(1EC40300)    <1>     mov rbx, qword [serverPSP]
  2183 0000476F 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2184 00004773 750B                <1>     jne .netGoToNextNdx
  2185 00004775 0FB71D(26C40300)    <1>     movzx ebx, word [machineNum]
  2186 0000477C 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2187                              <1> .netGoToNextNdx:
  2188 00004780 5B                  <1>     pop rbx
  2189 00004781 7404                <1>     je .sftFound
  2190                              <1> .gotoNextNdx:
  2191 00004783 FFC3                <1>     inc ebx
  2192 00004785 EBC2                <1>     jmp short .mainLp
  2193                              <1> .sftFound:
  2194 00004787 53                  <1>     push rbx
  2195 00004788 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2196 0000478D 488B1D(1EC40300)    <1>     mov rbx, qword [serverPSP]
  2197 00004794 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2198 00004798 0FB71D(26C40300)    <1>     movzx ebx, word [machineNum]
  2199 0000479F 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2200 000047A3 5B                  <1>     pop rbx
  2201 000047A4 F8                  <1>     clc
  2202                              <1>     return
    18                              <2> %%_ret:
    19 000047A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2203                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2204                              <1> ;Return a pointer to the SFT entry in rdi
  2205                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2206                              <1> ;Output: rdi = SFT pointer
  2207 000047A6 488B3D(47C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2208                              <1> .walk:
  2209 000047AD 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2210 000047B1 7212                <1>     jb .thisTable
  2211 000047B3 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2212 000047B7 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2213 000047BA 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2214 000047C1 75EA                <1>     jne .walk
  2215 000047C3 F9                  <1>     stc
  2216                              <1>     return
    18                              <2> %%_ret:
    19 000047C4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2217                              <1> .thisTable:
  2218 000047C5 50                  <1>     push rax
  2219 000047C6 52                  <1>     push rdx
  2220 000047C7 B84F000000          <1>     mov eax, sft_size
  2221 000047CC F7E3                <1>     mul ebx
  2222 000047CE 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2223 000047D1 5A                  <1>     pop rdx
  2224 000047D2 58                  <1>     pop rax
  2225 000047D3 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2226                              <1>     return
    18                              <2> %%_ret:
    19 000047DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2227                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2228                              <1> ;Return a zero extended value in rdi for the SFT entry
  2229                              <1> ;Input: bx = JFT handle (we zero extend)
  2230                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  2231                              <1> ;        CF=CY => al = Error code, Fail
  2232 000047DB 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2233 000047DE 663B1D35B8FFFF      <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  2234 000047E5 7204                <1>     jb .ok
  2235 000047E7 B006                <1>     mov al, errBadHdl
  2236 000047E9 F9                  <1>     stc
  2237                              <1>     return
    18                              <2> %%_ret:
    19 000047EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2238                              <1> .ok:
  2239 000047EB 488B3D(02C40300)    <1>     mov rdi, qword [currentPSP]
  2240 000047F2 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2241 000047F7 F8                  <1>     clc
  2242                              <1>     return
    18                              <2> %%_ret:
    19 000047F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2243                              <1> findFreeJFTEntry:
  2244                              <1> ;Finds a free JFT entry in the currentPSP.
  2245                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2246                              <1> ;        CF=CY => al=errNhl
  2247 000047F9 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2248                              <1> .searchLp:
  2249 000047FB E8DBFFFFFF          <1>     call getJFTPtr
  2250 00004800 7209                <1>     jc .badExit
  2251 00004802 803FFF              <1>     cmp byte [rdi], -1
  2252                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004805 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2253 00004807 FFC3                <1>     inc ebx
  2254 00004809 EBF0                <1>     jmp short .searchLp
  2255                              <1> .badExit:
  2256 0000480B B004                <1>     mov al, errNhl
  2257 0000480D F9                  <1>     stc
  2258                              <1>     return
    18                              <2> %%_ret:
    19 0000480E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2259                              <1> getSFTPtr:
  2260                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2261                              <1> ;Input: bx = JFT handle
  2262                              <1> ;Output: CF=NC: rdi = SFT pointer
  2263                              <1> ;        CF=CY: Error, ax=Error code
  2264 0000480F E815000000          <1>     call derefSFTPtr
  2265                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004814 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2266 00004816 50                  <1>     push rax
  2267 00004817 0FB705(26C40300)    <1>     movzx eax, word [machineNum]
  2268 0000481E 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2269 00004822 58                  <1>     pop rax
  2270                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004823 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2271 00004825 B006                <1>     mov al, errBadHdl   ;Error code
  2272 00004827 F9                  <1>     stc         ;Reset CF
  2273                              <1>     return
    18                              <2> %%_ret:
    19 00004828 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2274                              <1> 
  2275                              <1> derefSFTPtr:
  2276                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2277                              <1> ;Input: bx = File handle (gets zero extended)
  2278                              <1> ;Output: CF=NC: rdi = SFT pointer
  2279                              <1> ;        CF=CY: Error, ax=Error code
  2280 00004829 E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2281 0000482E 7205                <1>     jb .fail
  2282 00004830 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2283 00004833 7504                <1>     jne .ok
  2284                              <1> .fail:
  2285 00004835 B006                <1>     mov al, errBadHdl
  2286 00004837 F9                  <1>     stc
  2287                              <1>     return
    18                              <2> %%_ret:
    19 00004838 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2288                              <1> .ok:
  2289 00004839 53                  <1>     push rbx    ;Preserve the JFT handle
  2290 0000483A 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2291 0000483D E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2292 00004842 5B                  <1>     pop rbx 
  2293                              <1>     return
    18                              <2> %%_ret:
    19 00004843 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2294                              <1> 
  2295                              <1> getBytesTransferred:
  2296 00004844 8B0D(5AC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2297 0000484A F7D9                <1>     neg ecx ;Multiply by -1
  2298 0000484C 030D(56C70300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2299                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00004852 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2300                              <1> 
  2301                              <1> findFreeJFTSpace:
  2302                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
  2303                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
  2304                              <1> ;Else, a pointer to the free space in rsi and al = -1
  2305 00004853 51                  <1>     push rcx
  2306 00004854 488B35(02C40300)    <1>     mov rsi, qword [currentPSP]
  2307 0000485B 0FB70DB8B7FFFF      <1>     movzx ecx, word [maxHndls]
  2308 00004862 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
  2309                              <1> .search:
  2310 00004866 AC                  <1>     lodsb
  2311 00004867 3CFF                <1>     cmp al, -1
  2312 00004869 7407                <1>     je .exit
  2313 0000486B FFC9                <1>     dec ecx
  2314 0000486D 75F7                <1>     jnz .search
  2315 0000486F B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
  2316 00004871 F9                  <1>     stc ;Set error bit
  2317                              <1> .exit:
  2318 00004872 59                  <1>     pop rcx
  2319                              <1>     return
    18                              <2> %%_ret:
    19 00004873 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2320                              <1> 
  2321                              <1> getSFTndxInheritable:
  2322                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2323                              <1> ;Input: ebx = SFTndx (word)
  2324                              <1> ;Output: 
  2325                              <1> ;   ZF=ZE => Inheritable
  2326                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2327 00004874 57                  <1>     push rdi
  2328 00004875 E82CFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2329 0000487A 7208                <1>     jc .badNdx
  2330 0000487C 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2331 00004882 5F                  <1>     pop rdi
  2332                              <1>     return
    18                              <2> %%_ret:
    19 00004883 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2333                              <1> .badNdx:
  2334 00004884 31FF                <1>     xor edi, edi
  2335 00004886 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2336 00004888 F8                  <1>     clc
  2337 00004889 5F                  <1>     pop rdi
  2338                              <1>     return
    18                              <2> %%_ret:
    19 0000488A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2339                              <1> 
  2340                              <1> incrementOpenCount:
  2341                              <1> ;Given a SFTndx, this function will increment it's open count
  2342                              <1> ;Output:
  2343                              <1> ;   CF=NC => sftndx ok, count incremented
  2344                              <1> ;   CF=CY => Bad ndx
  2345 0000488B 57                  <1>     push rdi
  2346 0000488C E815FFFFFF          <1>     call getSFTPtrfromSFTNdx
  2347 00004891 7203                <1>     jc .exit
  2348 00004893 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2349                              <1> .exit:
  2350 00004896 5F                  <1>     pop rdi
  2351                              <1>     return
    18                              <2> %%_ret:
    19 00004897 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2352                              <1> 
  2353                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2354                              <1> ;Input: rdi = SFT pointer
  2355                              <1> ;Output: ax = Original wNumHandles count
  2356 00004898 9C                  <1>     pushfq
  2357 00004899 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2358 0000489C FFC8                <1>     dec eax     ;Decrement count
  2359 0000489E 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2360 000048A0 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2361                              <1> .exit:
  2362 000048A2 9D                  <1>     popfq
  2363 000048A3 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2364                              <1>     return
    18                              <2> %%_ret:
    19 000048A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    33                              <1> ioctrl:            ;ah = 44h, handle function
    34                              <1> ;Possible subfunctions
    35                              <1> ;al = 00h => Get Handle Information word in dx  x
    36                              <1> ;al = 01h => Set Handle Information word        x
    37                              <1> ;al = 02h => Read from Char device              
    38                              <1> ;al = 03h => Write to Char device               
    39                              <1> ;al = 04h => Read from Block device             
    40                              <1> ;al = 05h => Write to Block device              
    41                              <1> ;al = 06h => Get input status                   
    42                              <1> ;al = 07h => Get output status                  
    43                              <1> ;al = 08h => Is a block device removable?       
    44                              <1> ;al = 09h => Is a logical device local or remote?   
    45                              <1> ;al = 0Ah => Is a handle to a local or remote file? 
    46                              <1> ;al = 0Bh => Change sharing retry count 
    47                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    48                              <1> ;al = 0Dh => Block device Generic IOCTL request     
    49                              <1> ;al = 0Eh => Get logical device                 
    50                              <1> ;al = 0Fh => Set logical device  
    51 000048A7 E87DFFFFFF          <1>     call derefSFTPtr
    52 000048AC 730A                <1>     jnc .handleOk
    53 000048AE B806000000          <1>     mov eax, errBadHdl
    54 000048B3 E97B180000          <1>     jmp extErrExit
    55                              <1> .handleOk:
    56                              <1> ;Now rdi has ptr to SFT handle               
    57 000048B8 84C0                <1>     test al, al
    58 000048BA 7443                <1>     jz .getDevWord
    59 000048BC 3C01                <1>     cmp al, 1
    60 000048BE 744F                <1>     je .setDevWord
    61 000048C0 3C02                <1>     cmp al, 2
    62 000048C2 744F                <1>     je .readCharDev
    63 000048C4 3C03                <1>     cmp al, 3
    64 000048C6 744B                <1>     je .writeCharDev
    65 000048C8 3C04                <1>     cmp al, 4
    66 000048CA 7447                <1>     je .readBlockDev
    67 000048CC 3C05                <1>     cmp al, 5
    68 000048CE 7443                <1>     je .writeBlockDev
    69 000048D0 3C06                <1>     cmp al, 6
    70 000048D2 743F                <1>     je .getInputStatus
    71 000048D4 3C07                <1>     cmp al, 7
    72 000048D6 743B                <1>     je .getOutputStatus
    73 000048D8 3C08                <1>     cmp al, 8
    74 000048DA 7437                <1>     je .isRemdev
    75 000048DC 3C09                <1>     cmp al, 9
    76 000048DE 7433                <1>     je .isDevLocal
    77 000048E0 3C0A                <1>     cmp al, 0Ah
    78 000048E2 742F                <1>     je .isHdlLocal
    79 000048E4 3C0B                <1>     cmp al, 0Bh
    80 000048E6 742B                <1>     je .setSharingCount
    81 000048E8 3C0C                <1>     cmp al, 0Ch
    82 000048EA 740C                <1>     je .invalidFunction ;Change Codepage, reserved for now
    83 000048EC 3C0D                <1>     cmp al, 0Dh
    84 000048EE 7423                <1>     je .genericDevIOCTL
    85 000048F0 3C0E                <1>     cmp al, 0Eh
    86 000048F2 741F                <1>     je .getDrvLogicalDevice
    87 000048F4 3C0F                <1>     cmp al, 0Fh
    88 000048F6 741B                <1>     je .setDrvLogicalDevice
    89                              <1> .invalidFunction:
    90 000048F8 B001                <1>     mov al, errInvFnc
    91 000048FA E934180000          <1>     jmp extErrExit
    92                              <1> .getDevWord:
    93                              <1> ;Input: bx = File Handle
    94 000048FF 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    95 00004903 30C0                <1>     xor al, al
    96 00004905 E88C130000          <1>     call getUserRegs
    97 0000490A 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    98                              <1>     return
    18                              <2> %%_ret:
    19 0000490E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    99                              <1> .setDevWord:
   100                              <1> ;Input: bx = File Handle
   101                              <1> ;       dl = Low byte of Device information word 
   102 0000490F 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
   103                              <1>     return
    18                              <2> %%_ret:
    19 00004912 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> .readCharDev:
   105                              <1> .writeCharDev:
   106                              <1> .readBlockDev:
   107                              <1> .writeBlockDev:
   108                              <1> .getInputStatus:
   109                              <1> .getOutputStatus:
   110                              <1> .isRemdev:
   111                              <1> .isDevLocal:
   112                              <1> .isHdlLocal:
   113                              <1> .setSharingCount:
   114                              <1> .genericDevIOCTL:
   115                              <1> .getDrvLogicalDevice:
   116                              <1> .setDrvLogicalDevice:
   117 00004913 E91B180000          <1>     jmp extErrExit
    33                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    34                              <1> ;Memory related functions
    35                              <1> 
    36                              <1> ;-----------------------------------:
    37                              <1> ;  Memory related Kernel routines   :
    38                              <1> ;-----------------------------------:
    39                              <1> allocateMemory:    ;ah = 48h
    40                              <1> ;Input: ebx = Number of paragraphs requested
    41                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    42                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    43 00004918 E8CB170000          <1>     call dosCrit1Enter
    44 0000491D 31D2                <1>     xor edx, edx
    45                              <1>     ;Clear the pointers
    46 0000491F 488915(28C40300)    <1>     mov qword [firstMCB], rdx
    47 00004926 488915(30C40300)    <1>     mov qword [bestMCB], rdx
    48 0000492D 488915(38C40300)    <1>     mov qword [lastMCB], rdx
    49 00004934 31ED                <1>     xor ebp, ebp    
    50 00004936 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    51 00004938 488B35(37C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    52                              <1> .walk:
    53 0000493F 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    54 00004942 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    55 00004945 7409                <1>     je .walk1
    56 00004947 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    57 0000494A 0F850B050000        <1>     jne badMCBChain
    58                              <1> .walk1:
    59                              <1>     ;Here if valid but not the last block
    60 00004950 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    61 00004958 0F8582000000        <1>     jne .walk2
    62                              <1>     ;Here we consolidate adjacent free blocks if there are any
    63                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    64                              <1>     ;End consolidation at first non free block or at last block in chain
    65 0000495E 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    66 00004961 744A                <1>     je .det0    ;Determine if this block is useful
    67 00004963 31C9                <1>     xor ecx, ecx
    68 00004965 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    69 00004968 4881C610000000      <1>     add rsi, mcb.program
    70                              <1> .cons0:
    71 0000496F 48C1E104            <1>     shl rcx, 4
    72 00004973 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    73 00004976 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    74 00004979 7409                <1>     je .cons1
    75 0000497B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    76 0000497E 0F85D7040000        <1>     jne badMCBChain 
    77                              <1> .cons1:
    78 00004984 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    79 0000498C 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    80                              <1>     ;Here rsi, points to a free block, add it to rdi
    81 0000498E 31C9                <1>     xor ecx, ecx
    82 00004990 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    83 00004993 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    84 00004999 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    85 0000499C 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    86 0000499E 31D2                <1>     xor edx, edx
    87 000049A0 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    88 000049A3 48895608            <1>     mov qword [rsi + 8], rdx
    89 000049A7 3C5A                <1>     cmp al, mcbMarkEnd
    90 000049A9 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    91                              <1>     ;Here we deal with if the block was the last one 
    92 000049AB 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    93                              <1> .det0:  ;Now determine if pointer in rdi is useful
    94 000049AD 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    95                              <1> ;ebx must be less than the arena size for the arena to be useful!
    96 000049B0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    97 000049B3 39D9                <1>     cmp ecx, ebx
    98 000049B5 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    99 000049B7 488935(38C40300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
   100 000049BE 488B05(28C40300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   101 000049C5 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   102 000049C8 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   103 000049CA 488935(28C40300)    <1>     mov qword [firstMCB], rsi
   104                              <1> .det1:
   105                              <1>     ;Now test for best fit.
   106 000049D1 29D9                <1>     sub ecx, ebx    ;Block - ebx
   107 000049D3 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   108 000049D5 7209                <1>     jb .walk2
   109 000049D7 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   110 000049D9 488935(30C40300)    <1>     mov qword [bestMCB], rsi
   111                              <1> .walk2:
   112 000049E0 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   113 000049E3 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   114 000049E5 31C9                <1>     xor ecx, ecx
   115 000049E7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   116 000049EA 48C1E104            <1>     shl rcx, 4
   117 000049EE 4881C610000000      <1>     add rsi, mcb.program
   118 000049F5 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   119 000049F8 E942FFFFFF          <1>     jmp .walk
   120                              <1> .allocate:
   121                              <1>     ;Allocation fails IF the pointer is the null pointer
   122 000049FD 803D(B6C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   123 00004A04 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   124                              <1>     ;Fall thru if last fit
   125 00004A06 488B35(38C40300)    <1>     mov rsi, qword [lastMCB]
   126 00004A0D 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   127 00004A10 0F84D8000000        <1>     jz .allocFail
   128 00004A16 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   129 00004A18 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   130 00004A1B 31C9                <1>     xor ecx, ecx
   131 00004A1D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   132 00004A20 29D9                <1>     sub ecx, ebx
   133 00004A22 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   134 00004A28 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   135 00004A2B 48C1E104            <1>     shl rcx, 4
   136 00004A2F 4881C610000000      <1>     add rsi, mcb.program
   137 00004A36 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   138 00004A39 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   139 00004A3B 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   140 00004A3E 488B15(02C40300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   141 00004A45 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   142 00004A49 488B15(5DC40300)    <1>     mov rdx, qword [oldRSP]
   143 00004A50 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   144 00004A57 4889F0              <1>     mov rax, rsi
   145 00004A5A 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   146 00004A5D 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 00004A61 E8C8030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 00004A66 E887160000          <1>     call dosCrit1Exit
   149                              <1>     return
    18                              <2> %%_ret:
    19 00004A6B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   150                              <1> .bfCommon:
   151 00004A6C 488B35(28C40300)    <1>     mov rsi, qword [firstMCB]
   152 00004A73 803D(B6C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   153 00004A7A 480F4435(30C40300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   154 00004A82 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   155 00004A85 7467                <1>     jz .allocFail
   156 00004A87 8A06                <1>     mov al, byte [rsi + mcb.marker]
   157 00004A89 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   158 00004A8C 31C9                <1>     xor ecx, ecx
   159 00004A8E 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   160 00004A91 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   161 00004A93 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   162 00004A99 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   163 00004A9C 488B15(02C40300)    <1>     mov rdx, qword [currentPSP]
   164 00004AA3 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   165 00004AA7 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   166 00004AAA 4881C610000000      <1>     add rsi, mcb.program
   167 00004AB1 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   168 00004AB7 48C1E304            <1>     shl rbx, 4
   169 00004ABB 4801DE              <1>     add rsi, rbx
   170 00004ABE 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   171 00004AC0 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   172 00004AC8 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   173 00004ACB 488B15(5DC40300)    <1>     mov rdx, qword [oldRSP]
   174 00004AD2 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   175 00004AD9 4889F8              <1>     mov rax, rdi
   176 00004ADC 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   177 00004ADF 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   178 00004AE3 E846030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   179 00004AE8 E805160000          <1>     call dosCrit1Exit
   180                              <1>     return
    18                              <2> %%_ret:
    19 00004AED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   181                              <1> .allocFail:
   182                              <1>     ;Walk the MCB chain to determine the biggest block size
   183 00004AEE 488B35(37C00300)    <1>     mov rsi, [mcbChainPtr]
   184 00004AF5 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   185                              <1> .af0:
   186 00004AF7 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   187 00004AFA 7409                <1>     je .af1
   188 00004AFC 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   189 00004AFF 0F8556030000        <1>     jne badMCBChain
   190                              <1> .af1:
   191 00004B05 31C9                <1>     xor ecx, ecx
   192 00004B07 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   193 00004B0A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   194 00004B12 7505                <1>     jne .af2
   195 00004B14 39D9                <1>     cmp ecx, ebx
   196 00004B16 0F47D9              <1>     cmova ebx, ecx
   197                              <1> .af2:
   198 00004B19 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   199 00004B1C 7410                <1>     je .afExit
   200 00004B1E 48C1E104            <1>     shl rcx, 4
   201 00004B22 4881C610000000      <1>     add rsi, mcb.program
   202 00004B29 4801CE              <1>     add rsi, rcx
   203 00004B2C EBD7                <1>     jmp short .af1
   204                              <1> .afExit:
   205 00004B2E B808000000          <1>     mov eax, errNoMem
   206 00004B33 488B15(5DC40300)    <1>     mov rdx, qword [oldRSP]
   207 00004B3A 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   208 00004B3D E91B030000          <1>     jmp mcbErrHdlr
   209                              <1> freeMemory:        ;ah = 49h
   210                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   211                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   212                              <1> ;Always skip the first block as this is the anchor for DOS
   213 00004B42 E8A1150000          <1>     call dosCrit1Enter
   214 00004B47 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   215 00004B4E 31C9                <1>     xor ecx, ecx
   216 00004B50 488B35(37C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   217 00004B57 4889F7              <1>     mov rdi, rsi
   218 00004B5A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 00004B5D 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   220 00004B61 4881C610000000      <1>     add rsi, mcb.program
   221 00004B68 4801CE              <1>     add rsi, rcx    ;Go to next block
   222                              <1> .mainLoop:
   223 00004B6B 31C9                <1>     xor ecx, ecx
   224 00004B6D 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   225 00004B70 7409                <1>     je .valid
   226 00004B72 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   227 00004B75 0F85E0020000        <1>     jne badMCBChain
   228                              <1> .valid:
   229 00004B7B 4939F0              <1>     cmp r8, rsi
   230 00004B7E 741C                <1>     je .blockFound
   231                              <1>     ;Not valid, check if last block in chain
   232 00004B80 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   233 00004B83 0F84A5000000        <1>     je .blockError
   234 00004B89 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   235 00004B8C 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   236 00004B90 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   237 00004B97 4801CE              <1>     add rsi, rcx    ;Go to next block
   238 00004B9A EBCF                <1>     jmp short .mainLoop
   239                              <1> .blockFound:
   240                              <1>     ;If hole, error.
   241                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   242 00004B9C 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   243 00004BA4 0F8484000000        <1>     je .blockError
   244 00004BAA 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   245 00004BB2 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   246 00004BBA 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   247                              <1>     ;It is, let it absorb this space
   248 00004BBC 31C9                <1>     xor ecx, ecx
   249 00004BBE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   250 00004BC1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   251 00004BC7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   252                              <1>     ;Replace block marker
   253 00004BCA 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   254 00004BCC 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   255 00004BCE 31C9                <1>     xor ecx, ecx
   256 00004BD0 48890E              <1>     mov qword [rsi], rcx
   257 00004BD3 48894E08            <1>     mov qword [rsi + 8], rcx
   258 00004BD7 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   259                              <1> .blockFoundCheckFollowing:
   260                              <1>     ;First check if we are the last block in chain
   261 00004BDA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   262 00004BDD 7439                <1>     je .blockFoundExit  ;If yes, exit!
   263 00004BDF 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   264 00004BE2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   265 00004BE5 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   266 00004BE9 4881C110000000      <1>     add rcx, mcb.program
   267 00004BF0 4801CE              <1>     add rsi, rcx    ;Go to next block
   268 00004BF3 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   269 00004BFB 751B                <1>     jne .blockFoundExit ;If not free, exit
   270                              <1>     ;If free, absorb into block pointed to by rdi
   271 00004BFD 31C9                <1>     xor ecx, ecx
   272 00004BFF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   273 00004C02 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   274 00004C08 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   275                              <1>     ;Replace block marker
   276 00004C0B 8A06                <1>     mov al, byte [rsi + mcb.marker]
   277 00004C0D 8807                <1>     mov byte [rdi + mcb.marker], al
   278 00004C0F 31C9                <1>     xor ecx, ecx
   279 00004C11 48890E              <1>     mov qword [rsi], rcx
   280 00004C14 48894E08            <1>     mov qword [rsi + 8], rcx
   281                              <1> .blockFoundExit:
   282 00004C18 E811020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   283 00004C1D E8D0140000          <1>     call dosCrit1Exit
   284 00004C22 488B1D(5DC40300)    <1>     mov rbx, qword [oldRSP]
   285 00004C29 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   286                              <1>     return
    18                              <2> %%_ret:
    19 00004C2D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   287                              <1> .blockError:
   288 00004C2E C605(ECC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   289 00004C35 B809000000          <1>     mov eax, errMemAddr
   290 00004C3A E8F4140000          <1>     call extErrExit ;Error thru the unified error handler
   291 00004C3F E8EA010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   292 00004C44 E8A9140000          <1>     call dosCrit1Exit
   293                              <1>     return
    18                              <2> %%_ret:
    19 00004C49 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   294                              <1> reallocMemory:     ;ah = 4Ah
   295                              <1> ;Input: r8 = address of the block to be realloc'ed
   296                              <1> ;       ebx = How many paras this block should contain after realloc. 
   297                              <1> ;               If ebx = 0, jump to free memory
   298 00004C4A E899140000          <1>     call dosCrit1Enter
   299 00004C4F 85DB                <1>     test ebx, ebx
   300 00004C51 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   301 00004C57 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   302 00004C5E 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   303 00004C61 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   304 00004C64 7409                <1>     je .ctn
   305 00004C66 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   306 00004C69 0F856F010000        <1>     jne .badAddrGiven
   307                              <1> .ctn:
   308                              <1>     ;Provided block is valid and not a hole
   309                              <1>     ;Check if Growth or Shrink
   310 00004C6F 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   311 00004C77 74B5                <1>     je freeMemory.blockError
   312 00004C79 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   313 00004C7C 31C9                <1>     xor ecx, ecx
   314 00004C7E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   315 00004C81 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   316 00004C83 0F8791000000        <1>     ja .growth
   317 00004C89 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   318                              <1> ;We can always shrink
   319 00004C8F 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   320 00004C91 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   321 00004C97 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   322 00004C9A 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   323 00004CA0 48C1E304            <1>     shl rbx, 4
   324 00004CA4 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   325 00004CAB 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   326 00004CAE 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   327 00004CB0 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   328 00004CB3 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   329 00004CB5 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   330 00004CBD 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   331 00004CC0 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   332 00004CC2 0F84E6000000        <1>     je .exit
   333                              <1> ;Else, now see if the block following is also free and absorb it
   334 00004CC8 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   335 00004CCB 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   336 00004CCF 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   337 00004CD6 4801CE              <1>     add rsi, rcx    ;Goto next arena
   338 00004CD9 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   339 00004CDC 7409                <1>     je .shrinkAbsorb
   340 00004CDE 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   341 00004CE1 0F8574010000        <1>     jne badMCBChain
   342                              <1> .shrinkAbsorb:
   343 00004CE7 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   344 00004CEF 0F85B9000000        <1>     jne .exit
   345                              <1>     ;It is free, absorb it
   346 00004CF5 8A06                <1>     mov al, byte [rsi + mcb.marker]
   347 00004CF7 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   348 00004CF9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   349 00004CFC 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   350 00004CFF 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   351 00004D02 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   352 00004D05 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   353 00004D09 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   354 00004D0C 31C9                <1>     xor ecx, ecx
   355                              <1>     ;Clear absorbed MCB
   356 00004D0E 48890E              <1>     mov qword [rsi], rcx
   357 00004D11 48894E08            <1>     mov qword [rsi + 8], rcx
   358 00004D15 E994000000          <1>     jmp .exit
   359                              <1> .growth:
   360                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   361 00004D1A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   362 00004D1D 0F84A5000000        <1>     je .notEnuffMem
   363                              <1> ;Now check the following space is free. If not, not enuff mem err
   364 00004D23 31C9                <1>     xor ecx, ecx
   365 00004D25 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   366 00004D28 48C1E104            <1>     shl rcx, 4
   367 00004D2C 4889F7              <1>     mov rdi, rsi    
   368 00004D2F 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   369 00004D36 4801CE              <1>     add rsi, rcx
   370 00004D39 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   371 00004D3C 7409                <1>     je .growthOK
   372 00004D3E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   373 00004D41 0F8514010000        <1>     jne badMCBChain
   374                              <1> .growthOK:
   375                              <1>     ;rdi points to block we are growing
   376 00004D47 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   377 00004D4F 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   378                              <1>     ;rsi must own all memory up to the next owned arena
   379 00004D51 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   380 00004D53 31C9                <1>     xor ecx, ecx
   381 00004D55 31D2                <1>     xor edx, edx
   382 00004D57 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   383 00004D5A 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   384 00004D60 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   385 00004D63 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   386 00004D65 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   387 00004D67 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   388 00004D6A 775E                <1>     ja .notEnuffMem1
   389 00004D6C 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   390 00004D6E 81FA01000000        <1>     cmp edx, 1
   391 00004D74 744E                <1>     je .notEnuffMem2
   392 00004D76 31C9                <1>     xor ecx, ecx
   393 00004D78 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   394 00004D7B 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   395 00004D7F 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   396 00004D82 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   397 00004D85 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   398 00004D8C 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   399 00004D90 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   400 00004D93 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   401 00004D97 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   402                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   403                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   404 00004D99 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   405 00004D9B 7411                <1>     jz .exit
   406 00004D9D 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   407 00004DA3 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   408 00004DA6 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   409                              <1> .exit:
   410 00004DAE E87B000000          <1>     call verifyIntegrityOfMCBChain
   411 00004DB3 E83A130000          <1>     call dosCrit1Exit
   412 00004DB8 488B1D(5DC40300)    <1>     mov rbx, qword [oldRSP]
   413 00004DBF 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   414                              <1>     return
    18                              <2> %%_ret:
    19 00004DC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   415                              <1> .notEnuffMem2:
   416 00004DC4 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   417 00004DC6 EB02                <1>     jmp short .notEnuffMem1
   418                              <1> .notEnuffMem:
   419 00004DC8 31DB                <1>     xor ebx, ebx    ;No space to grow
   420                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   421 00004DCA B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   422 00004DCF 488B15(5DC40300)    <1>     mov rdx, qword [oldRSP]
   423 00004DD6 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   424 00004DD9 E97F000000          <1>     jmp mcbErrHdlr
   425                              <1> .badAddrGiven:
   426 00004DDE B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   427 00004DE3 E975000000          <1>     jmp mcbErrHdlr
   428                              <1> getsetMallocStrat: ;ah = 58h
   429 00004DE8 84C0                <1>     test al, al
   430 00004DEA 741F                <1>     jz .get
   431 00004DEC 3C02                <1>     cmp al, 2
   432 00004DEE 7337                <1>     jae .bad
   433                              <1> ;Set here
   434 00004DF0 488B1D(5DC40300)    <1>     mov rbx, qword [oldRSP]
   435 00004DF7 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   436 00004DFB 8805(B6C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   437 00004E01 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   438 00004E05 E824000000          <1>     call verifyIntegrityOfMCBChain
   439                              <1>     return
    18                              <2> %%_ret:
    19 00004E0A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   440                              <1> .get:
   441 00004E0B 488B1D(5DC40300)    <1>     mov rbx, qword [oldRSP]
   442 00004E12 31C0                <1>     xor eax, eax
   443 00004E14 8A05(B6C30300)      <1>     mov al, byte [allocStrat]
   444 00004E1A 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   445 00004E1D 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   446 00004E21 E808000000          <1>     call verifyIntegrityOfMCBChain
   447                              <1>     return
    18                              <2> %%_ret:
    19 00004E26 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   448                              <1> .bad:
   449 00004E27 B801000000          <1>     mov eax, errInvFnc
   450 00004E2C EB2F                <1>     jmp short mcbErrHdlr
   451                              <1> ;-----------------------------------:
   452                              <1> ;      Memory related routines      :
   453                              <1> ;-----------------------------------:
   454                              <1> verifyIntegrityOfMCBChain:
   455 00004E2E 50                  <1>     push rax
   456 00004E2F 53                  <1>     push rbx
   457 00004E30 488B1D(37C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   458                              <1> .ok:
   459 00004E37 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   460 00004E3A 7408                <1>     je .ok1
   461 00004E3C 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   462 00004E3F 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   463                              <1> .exit:
   464 00004E41 5B                  <1>     pop rbx
   465 00004E42 58                  <1>     pop rax
   466                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00004E43 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   467                              <1> .ok1:
   468 00004E44 31C0                <1>     xor eax, eax
   469 00004E46 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   470 00004E49 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   471 00004E4D 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   472 00004E54 4801C3              <1>     add rbx, rax
   473 00004E57 EBDE                <1>     jmp short .ok
   474                              <1> .bmcbPrep:
   475 00004E59 5B                  <1>     pop rbx ;Pop off the stack first!
   476 00004E5A 58                  <1>     pop rax
   477                              <1> badMCBChain:
   478 00004E5B B007                <1>     mov al, errMCBbad   ;Yikes!
   479                              <1> mcbErrHdlr:
   480                              <1>     ;Jumped to with eax = error code
   481 00004E5D C605(ECC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   482 00004E64 E8CA120000          <1>     call extErrExit ;Error thru the unified error handler
   483 00004E69 3C07                <1>     cmp al, errMCBbad
   484                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004E6B 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   485 00004E6D EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    34                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    35                              <1> ;EXEC and all default terminates are here
    36                              <1> 
    37                              <1> ;========================
    38                              <1> ;   Interrupt handlers
    39                              <1> ;========================
    40                              <1> terminateProcess:   ;Int 40h
    41 00004E6F 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    42 00004E71 E9EA100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    43                              <1> terminateRes:       ;Int 47h
    44                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    45 00004E76 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    46 00004E7C C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    47 00004E7F B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    48 00004E84 E9D7100000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    49                              <1> ;========================
    50                              <1> ;    Int 21h functions
    51                              <1> ;========================
    52                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    53                              <1> ;Input:
    54                              <1> ;rdx = Pointer to new PSP in memory.
    55                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    56                              <1> ;   Officially document that this MUST be paragraph aligned.
    57                              <1> ;rsi = alloc size for new psp block
    58 00004E89 C605(F7C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    59 00004E90 4C8B05(02C40300)    <1>     mov r8, qword [currentPSP]
    60 00004E97 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    61 00004E99 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    62 00004E9A EB0C                <1>     jmp short copyPSP.pspCommon
    63                              <1> copyPSP:      ;ah = 26h
    64                              <1> ;Input:
    65                              <1> ;rdx = Pointer to new PSP in memory.
    66                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    67                              <1> ;   Officially document that this MUST be paragraph aligned.
    68 00004E9C 4C8B05(02C40300)    <1>     mov r8, qword [currentPSP]
    69 00004EA3 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    70 00004EA7 53                  <1>     push rbx    ;Save this value for PSP allocsize
    71                              <1> .pspCommon:
    72 00004EA8 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    73 00004EAF 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    74 00004EB3 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    75                              <1> ;r8 is current PSP, now copy psp to rdx
    76                              <1> ;Preserve rdx and r8 until the end
    77 00004EB7 4C89C6              <1>     mov rsi, r8
    78 00004EBA 4889D7              <1>     mov rdi, rdx
    79 00004EBD B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    80 00004EC2 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    81 00004EC5 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    82 00004ECD F605(F7C40300)FF    <1>     test byte [pspCopyFlg], -1
    83 00004ED4 7449                <1>     jz .copy
    84                              <1>     ;Now reset the parent psp data
    85 00004ED6 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    86 00004EDE 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    87                              <1>     ;Now reset the copied jobFileTable
    88 00004EE2 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    89 00004EE6 0FB70D2DB1FFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    90 00004EED B0FF                <1>     mov al, -1
    91 00004EEF F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    92                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    93 00004EF1 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    94 00004EF5 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    95 00004EF9 0FB70D1AB1FFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    96                              <1> .xfrJFT:
    97 00004F00 67E31C              <1>     jecxz .copy
    98 00004F03 FFC9                <1>     dec ecx
    99 00004F05 AC                  <1>     lodsb   ;Get the SFTndx in al
   100 00004F06 0FB6D8              <1>     movzx ebx, al
   101 00004F09 53                  <1>     push rbx
   102 00004F0A E865F9FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   103 00004F0F 58                  <1>     pop rax
   104 00004F10 7508                <1>     jnz .badJFT
   105 00004F12 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   106 00004F13 E873F9FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   107 00004F18 EBE6                <1>     jmp short .xfrJFT
   108                              <1> .badJFT:
   109 00004F1A 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   110 00004F1D EBE1                <1>     jmp short .xfrJFT 
   111                              <1> .copy:
   112 00004F1F C605(F7C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   113 00004F26 58                  <1>     pop rax ;Pop the allocsize back into rax
   114 00004F27 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   115                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   116 00004F2A 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   117 00004F2E B042                <1>     mov al, 42h
   118 00004F30 E8530D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   119 00004F35 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   120 00004F38 48AB                <1>     stosq   ;Move rdi to next entry and store
   121 00004F3A B043                <1>     mov al, 43h
   122 00004F3C E8470D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   123 00004F41 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   124 00004F44 48AB                <1>     stosq   ;Move rdi to next entry and store
   125 00004F46 B044                <1>     mov al, 44h
   126 00004F48 E83B0D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   127 00004F4D 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   128 00004F50 48AB                <1>     stosq   ;Move rdi to next entry and store
   129                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   130 00004F52 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   131 00004F57 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   132 00004F5D C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
   133                              <1>     return
    18                              <2> %%_ret:
    19 00004F61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   134                              <1> 
   135                              <1> terminateStayRes:  ;ah = 31h
   136                              <1> ;Input: al  = Error code
   137                              <1> ;       edx = Number of paragraphs to keep resident
   138 00004F62 C605(E4C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   139                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   140 00004F69 81FA06000000        <1>     cmp edx, 6
   141 00004F6F 7305                <1>     jae .aboveMinimum
   142 00004F71 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   143                              <1> .aboveMinimum:
   144                              <1> ;Now we setup a call to Realloc 
   145                              <1> ;Setup regs with: 
   146                              <1> ;   r8 = address of the block to be realloc'ed
   147                              <1> ;   ebx = How many paras this block should contain after realloc.
   148 00004F76 4C8B05(02C40300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   149 00004F7D 89D3                <1>     mov ebx, edx
   150 00004F7F 50                  <1>     push rax    ;Preserve errorlevel across call
   151 00004F80 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   152 00004F81 E8C4FCFFFF          <1>     call reallocMemory
   153 00004F86 5B                  <1>     pop rbx
   154 00004F87 58                  <1>     pop rax
   155 00004F88 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   156 00004F8A 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   157                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   158 00004F8E EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   159                              <1> 
   160                              <1> simpleTerminate:   ;ah = 00h
   161 00004F90 31C0                <1>     xor eax, eax    ;Just fall through as normal
   162                              <1> terminateClean:    ;ah = 4Ch, EXIT
   163                              <1> ;Here we must:
   164                              <1> ;0) Build errorlevel and adjust variables accordingly
   165                              <1> ;1) Call Network Termination hook.
   166                              <1> ;2) Check if the program is it's own parent. If so, return.
   167                              <1> ;3) Swap the console back to the original driver if it is swapped.
   168                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   169                              <1> ;4) Free all file handles associated to the current process.
   170                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   171                              <1> ;5) Free all memory blocks that have the signature of current PSP
   172                              <1> ;6) Set current PSP to parent PSP
   173                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   174                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   175                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   176                              <1> ;10) Exit all critical sections.
   177                              <1> ;
   178                              <1> ; Step 0
   179                              <1> ;For now, just adjust error level in var
   180 00004F92 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   181 00004F94 8625(E4C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   182 00004F9A F605(6EC40300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   183 00004FA1 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   184 00004FA3 C605(E4C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   185                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   186 00004FAA 8A25(E4C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   187                              <1> .storeELvl:
   188 00004FB0 668905(12C40300)    <1>     mov word [errorLevel], ax   ;Store word
   189                              <1>     
   190                              <1> ; Step 1 Tell network a process is terminating
   191 00004FB7 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   192 00004FBC 4C8B05(02C40300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   193 00004FC3 CD4F                <1>     int 4Fh
   194                              <1> 
   195                              <1> ; Step 2
   196                              <1> .step1:
   197 00004FC5 488B3D(02C40300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   198 00004FCC 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   199 00004FCF 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   200 00004FD3 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   201                              <1>     ;rete            ;If it is, simply return (al has errorLevel)
   202 00004FD6 0F84D7000000        <1>     je .exit
   203                              <1> ; Step 3
   204 00004FDC E87DD6FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   205                              <1> ; Step 3.5
   206 00004FE1 803D(E4C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   207 00004FE8 0F8497000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   208                              <1> ; Step 4
   209 00004FEE 803D(E4C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   210 00004FF5 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   211 00004FF7 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   212 00004FFC CD4F                <1>     int 4Fh
   213                              <1> .skipAbortNetClose:
   214 00004FFE FF15(C2C00300)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   215 00005004 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   216 0000500B 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   217 0000500E 0FB70D05B0FFFF      <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   218                              <1> .s4lp:
   219 00005015 AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   220 00005016 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   221 00005018 7429                <1>     je .step5
   222 0000501A 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   223                              <1>     ;Replace with a call to close the handle eventually
   224 0000501D 57                  <1>     push rdi
   225 0000501E E806F8FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   226 00005023 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   227 00005025 FF35(10C70300)      <1>     push qword [currentSFT]
   228 0000502B E850F6FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   229 00005030 E849EEFFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   230                              <1>     ;closeMain also flushes all sectors associated to the file
   231                              <1>     ;Ignore errors, simply keep closing files
   232 00005035 8F05(10C70300)      <1>     pop qword [currentSFT]
   233                              <1> .badHdl:
   234 0000503B 5F                  <1>     pop rdi
   235 0000503C B0FF                <1>     mov al, -1
   236 0000503E AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   237 0000503F FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   238 00005041 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   239                              <1> ;Step 5
   240                              <1> .step5:
   241 00005043 488B1D(02C40300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   242                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   243                              <1>     ; with the currentPSP signature and free them.
   244 0000504A 488B35(37C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   245                              <1> .s5lp:  ;And walk the chain
   246                              <1> ;First verify the address in rsi is a valid mcb
   247 00005051 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   248 00005053 80F94D              <1>     cmp cl, mcbMarkCtn
   249 00005056 7405                <1>     je .checkToFree
   250 00005058 80F95A              <1>     cmp cl, mcbMarkEnd
   251 0000505B 7528                <1>     jne .step6  ;Something wrong so stop freeing
   252                              <1> .checkToFree:
   253 0000505D 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   254 00005061 750F                <1>     jne .noFree
   255 00005063 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   256 00005067 53                  <1>     push rbx
   257 00005068 51                  <1>     push rcx
   258 00005069 56                  <1>     push rsi
   259 0000506A E8D3FAFFFF          <1>     call freeMemory ;Free this memory block
   260 0000506F 5E                  <1>     pop rsi
   261 00005070 59                  <1>     pop rcx
   262 00005071 5B                  <1>     pop rbx
   263                              <1>     ;If an error occured, the internal vars will be set.
   264                              <1> .noFree:
   265 00005072 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   266 00005075 740E                <1>     je .step6   ;Skip if we are
   267 00005077 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   268 0000507A 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   269 0000507E 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   270 00005083 EBCC                <1>     jmp short .s5lp
   271                              <1> ;Step 6
   272                              <1> .step6:
   273 00005085 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   274 00005089 488905(02C40300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   275                              <1> ;Step 7
   276                              <1>     ;rbx points to current PSP, the old parent task
   277                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   278 00005090 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   279 00005094 B044                <1>     mov al, 44h
   280 00005096 E845120000          <1>     call setIntVector
   281 0000509B 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   282 0000509F B043                <1>     mov al, 43h
   283 000050A1 E83A120000          <1>     call setIntVector
   284 000050A6 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   285 000050AA B042                <1>     mov al, 42h
   286 000050AC 52                  <1>     push rdx
   287 000050AD E82E120000          <1>     call setIntVector
   288 000050B2 5A                  <1>     pop rdx
   289                              <1> ;Step 8
   290                              <1> .exit:
   291 000050B3 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   292 000050B5 CD4A                <1>     int 4ah
   293                              <1> 
   294 000050B7 FA                  <1>     cli
   295 000050B8 488B1D(02C40300)    <1>     mov rbx, qword [currentPSP]
   296 000050BF 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   297                              <1>     ;Make the parent register frame the current one
   298                              <1>     ;Make RSP point to user stack from parent entry to exec
   299 000050C3 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   300                              <1> 
   301 000050C7 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   302 000050CC 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   303                              <1> 
   304 000050D5 C605(78C40300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   305 000050DC C605(EBC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   306 000050E3 C605(ECC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   307 000050EA E8CB0F0000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   308                              <1>     
   309 000050EF 48CF                <1>     iretq   ;and return to address that was in rdx
    35                                  %include "./Source/Kernel/MemExec/exec.asm"
    36                              <1> 
    37                              <1> 
    38                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    39                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    40                              <1> ;       rbx = Ptr to the parameter block used for loading
    41                              <1> ;       al = Subfunction:
    42                              <1> ;            00h = Load Program and transfer control to it
    43                              <1> ;            01h = Load Program but do not transfer ctrl to it
    44                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    45                              <1> ;      Reserved for future expansion:
    46                              <1> ;            04h = Load in background execution mode (PE only)
    47                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    48                              <1> ;               function but in 16-bit mode. 
    49                              <1> ;
    50                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    51                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    52                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    53                              <1> 
    54                              <1> ;If AL = 0 :
    55                              <1> ;            Load Child Program and Xfr control to it
    56                              <1> ; rbx ------>   |-------------------------------|
    57                              <1> ;               |   Ptr to Environment Block    |
    58                              <1> ;               |                               |
    59                              <1> ;               | Can be 0 => Get pointer to    |
    60                              <1> ;               | parent Environment Block      |
    61                              <1> ;               |-------------------------------|
    62                              <1> ;               |   Ptr to Command Line to be   |
    63                              <1> ;               |   placed at PSP + 80h         |
    64                              <1> ;               |-------------------------------|
    65                              <1> ;               |   Ptr to first default FCB    |
    66                              <1> ;               |      to copy to PSP.fcb1      |
    67                              <1> ;               |                               |
    68                              <1> ;               | Should be used to parse the   |
    69                              <1> ;               |  first two command line args  |
    70                              <1> ;               |-------------------------------|
    71                              <1> ;               |   Ptr to second default FCB   |
    72                              <1> ;               |      to copy to PSP.fcb2      |
    73                              <1> ;               |-------------------------------|
    74                              <1> ;
    75                              <1> ;If AL = 1 :
    76                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    77                              <1> ; rbx ------>   |-------------------------------|
    78                              <1> ;               |         AS IN AL=00H          |
    79                              <1> ;               |-------------------------------|
    80                              <1> ;               |     Initial Value of RSP      |
    81                              <1> ;               |       on program launch       |
    82                              <1> ;               |                               |
    83                              <1> ;               |     This is returned to the   |
    84                              <1> ;               |         caller by DOS         |
    85                              <1> ;               |-------------------------------|
    86                              <1> ;               |     Initial Value of RIP      |
    87                              <1> ;               |       on program launch       |
    88                              <1> ;               |                               |
    89                              <1> ;               |     This is returned to the   |
    90                              <1> ;               |         caller by DOS         |
    91                              <1> ;               |-------------------------------|
    92                              <1> ;
    93                              <1> ;                      !!Important Note!!
    94                              <1> ;   The block pointed to by rbx must reserve the space for 
    95                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    96                              <1> ;
    97                              <1> ;If AL = 3 :
    98                              <1> ;                      Load program overlay
    99                              <1> ; rbx ------>   |-------------------------------|
   100                              <1> ;               |  Pointer to the byte in the   |
   101                              <1> ;               |  prog space to start writing  |
   102                              <1> ;               |        the overlay at         |
   103                              <1> ;               |-------------------------------|
   104                              <1> ;               | DWORD offset from the base of |
   105                              <1> ;               |  the program to the location  |
   106                              <1> ;               |  the overlay is being loaded  |
   107                              <1> ;               |              in               |
   108                              <1> ;               |  (Called a Relocation Factor) |
   109                              <1> ;               |     Only FOR EXE Overlays     |
   110                              <1> ;               |        for CODE fixups        |
   111                              <1> ;               |  For COM, Current PSP + 100h  |
   112                              <1> ;               |      assumed to suffice       |
   113                              <1> ;               |-------------------------------|
   114                              <1> ;
   115                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   116                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   117                              <1> ;
   118                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   119 000050F1 55                  <1>     push rbp
   120 000050F2 4889E5              <1>     mov rbp, rsp
   121 000050F5 4881EC70000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   122                              <1>     ;Clear up the pointers on the stack frame
   123 000050FC 31C0                <1>     xor eax, eax
   124 000050FE 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   125 00005102 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax
   126 00005106 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   127 0000510A 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   128 0000510E 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   129                              <1> 
   130                              <1> 
   131 00005112 3C03                <1>     cmp al, execOverlay
   132 00005114 7615                <1>     jbe .validSubfunction
   133                              <1> .badSubFunction:
   134 00005116 B801000000          <1>     mov eax, errInvFnc
   135 0000511B C605(EDC30300)01    <1>     mov byte [errorLocus], eLocUnk
   136                              <1> .badExit:
   137 00005122 4889EC              <1>     mov rsp, rbp
   138 00005125 5D                  <1>     pop rbp
   139 00005126 E908100000          <1>     jmp extErrExit
   140                              <1> 
   141                              <1> .validSubfunction:
   142 0000512B 3C02                <1>     cmp al, execInvld
   143 0000512D 74E7                <1>     je .badSubFunction
   144                              <1>     ;Save registers for each function call
   145 0000512F 48895DD8            <1>     mov qword [rbp - execFrame.pParam], rbx
   146 00005133 488955D0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   147 00005137 0FB6C0              <1>     movzx eax, al
   148 0000513A 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   149 0000513E 4889D7              <1>     mov rdi, rdx
   150 00005141 E89D0C0000          <1>     call strlen ;Get string length in cx
   151 00005146 66894DE0            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   152                              <1>     ;Now open the file we wanna yeet to
   153 0000514A 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   154 0000514C 55                  <1>     push rbp    ;Preserve local frame ptr
   155 0000514D E812DFFFFF          <1>     call openFileHdl
   156 00005152 5D                  <1>     pop rbp
   157 00005153 72CD                <1>     jc .badExit ;Exit preserving error code in al
   158                              <1>     ;Now ax has the file handle
   159 00005155 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   160 00005159 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   161 0000515C E8C8F6FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   162 00005161 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   163 00005165 F7C280000000        <1>     test edx, devCharDev
   164 0000516B 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   165 0000516D B002                <1>     mov al, errFnf
   166 0000516F E9E3040000          <1>     jmp .cleanAndFail
   167                              <1> .validDiskFile:
   168 00005174 31C0                <1>     xor eax, eax
   169 00005176 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   170 0000517A 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   171 0000517E 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   172 00005182 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   173 00005188 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   174 0000518C 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   175 0000518F 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   176 00005192 7514                <1>     jnz .copyEnvironmentBlock
   177 00005194 488B35(02C40300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   178 0000519B 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   179 0000519F 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   180 000051A3 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   181 000051A6 746D                <1>     jz .loadProgram
   182                              <1> .copyEnvironmentBlock:
   183 000051A8 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   184                              <1>     ;Get the length of the environment
   185 000051AB B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   186 000051B0 31C0                <1>     xor eax, eax
   187 000051B2 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   188                              <1> .envVerifyLp:
   189 000051B5 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   190 000051B7 7531                <1>     jnz .invalidEnvironmentError
   191 000051B9 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   192 000051BC FFC9                <1>     dec ecx
   193 000051BE AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   194 000051BF 75F4                <1>     jnz .envVerifyLp
   195                              <1> 
   196 000051C1 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   197 000051C4 57                  <1>     push rdi     ;Save the length of the environment block
   198 000051C5 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   199 000051CB 0FB75DE0            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   200 000051CF 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   201 000051D1 89FB                <1>     mov ebx, edi
   202 000051D3 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   203 000051D6 55                  <1>     push rbp
   204 000051D7 E83CF7FFFF          <1>     call allocateMemory
   205 000051DC 5D                  <1>     pop rbp
   206 000051DD 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   207 000051DE 7314                <1>     jnc .copyEnvironment
   208                              <1>     ;Fall thru if not enuff memory
   209                              <1> .insufficientMemory:
   210 000051E0 B808000000          <1>     mov eax, errNoMem
   211 000051E5 E96D040000          <1>     jmp .cleanAndFail
   212                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   213 000051EA B80A000000          <1>     mov eax, errBadEnv
   214 000051EF E963040000          <1>     jmp .cleanAndFail
   215                              <1> 
   216                              <1> .copyEnvironment:
   217                              <1>     ;rax has the ptr to allocated memory block
   218                              <1>     ;rcx has the number of chars to copy from the source env block
   219 000051F4 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   220 000051F7 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   221 000051FB 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   222 000051FF 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   223 00005202 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   224 00005204 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   225 00005209 66AB                <1>     stosw       ;Away you go!
   226 0000520B 488B75D0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   227 0000520F 0FB74DE0            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   228 00005213 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   229                              <1> ;Done with the environment... more or less
   230                              <1> .loadProgram:
   231 00005215 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   232 0000521A 488D15(C1D90300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   233 00005221 E84D040000          <1>     call .readDataFromHdl
   234 00005226 0F8226040000        <1>     jc .badFmtErr
   235 0000522C 85C0                <1>     test eax, eax   ;Were zero bytes read?
   236 0000522E 0F841E040000        <1>     jz .badFmtErr
   237 00005234 3D40000000          <1>     cmp eax, imageDosHdr_size
   238 00005239 0F8272020000        <1>     jb .loadCom
   239                              <1> 
   240 0000523F 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   241 00005244 740B                <1>     je .proceedEXE
   242 00005246 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   243 0000524B 0F8560020000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   244                              <1> .proceedEXE:
   245                              <1>     ;Now we need to read e_lfanew
   246 00005251 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   247 00005252 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   248 00005255 8955A8              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   249 00005258 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   250 0000525A 30C0                <1>     xor al, al  ;Set file pointer from start of file
   251 0000525C 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   252 00005260 E814E0FFFF          <1>     call lseekHdl   ;Move to that position in the file
   253                              <1> 
   254 00005265 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   255 00005266 B914000000          <1>     mov ecx, imageFileHeader_size
   256 0000526B E803040000          <1>     call .readDataFromHdl       ;Now read the COFF header
   257 00005270 85C0                <1>     test eax, eax   ;Were zero bytes read?
   258 00005272 0F84DA030000        <1>     jz .badFmtErr
   259 00005278 3D14000000          <1>     cmp eax, imageFileHeader_size
   260 0000527D 0F82CF030000        <1>     jb .badFmtErr
   261                              <1>     ;So now rdx points to the imageFileHeader
   262 00005283 66813A6486          <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   263 00005288 0F85C4030000        <1>     jne .badFmtErr
   264 0000528E 66817A107000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   265 00005294 0F82B8030000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   266                              <1>     ;Now save the number of sections in the the file
   267 0000529A 0FB74202            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   268 0000529E 85C0                <1>     test eax, eax   ;If this is 0, what?
   269 000052A0 0F84AC030000        <1>     jz .badFmtErr
   270 000052A6 668945A0            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   271                              <1> 
   272                              <1>     ;Now load Optional header, file ptr points to it so all good!
   273 000052AA B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   274                              <1>     ;rdx points to exeHdrSpace
   275 000052AF E8BF030000          <1>     call .readDataFromHdl
   276 000052B4 85C0                <1>     test eax, eax   ;Were zero bytes read?
   277 000052B6 0F8496030000        <1>     jz .badFmtErr
   278 000052BC 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   279 000052C1 0F828B030000        <1>     jb .badFmtErr
   280                              <1>     ;Now File Ptr points to data dirs, not an issue
   281 000052C7 81459870000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   282                              <1>     ;We load the program in, one section at a time, reading section headers in
   283                              <1>     ; one at a time to the section header internal buffer.
   284 000052CE 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   285 000052D2 744B                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   286 000052D4 8B1D(F9D90300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   287 000052DA 488B05(09DA0300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   288 000052E1 4885C0              <1>     test rax, rax
   289 000052E4 750A                <1>     jnz .notDefaultStackAlloc
   290 000052E6 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   290 000052EF 00                  <1>
   291                              <1> .notDefaultStackAlloc:
   292 000052F0 01C3                <1>     add ebx, eax    ;Add stack allocation
   293 000052F2 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   294 000052F8 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   295 000052FB 81C30B000000        <1>     add ebx, 11
   296 00005301 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   297 00005304 E80FF6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   298 00005309 0F82D1FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   299 0000530F 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   300 00005313 480500010000        <1>     add rax, psp_size
   301 00005319 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   302 0000531D EB0B                <1>     jmp short .exeProceed1
   303                              <1> .exeOvlySkipAlloc:
   304 0000531F 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   305 00005323 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   306 00005326 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   307                              <1> .exeProceed1:
   308                              <1>     ;So now copy one section at a time, read section header in
   309                              <1>     ;File pointer points to the directory table, so skip that
   310 0000532A 8B15(2DDA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   311 00005330 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   312 00005336 0F8216030000        <1>     jb .badFmtErr
   313 0000533C FFCA                <1>     dec edx ;Decrement by 1 to make into a 0 based offset
   314                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   315 0000533E C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   316 00005341 31C9                <1>     xor ecx, ecx
   317 00005343 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   318 00005347 B001                <1>     mov al, 1   ;Move handle forwards from current position
   319 00005349 E82BDFFFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   320                              <1>     ;eax has pointer location after adjustment
   321 0000534E 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   322                              <1>     ;File now points to start of Section headers. Read first header in.
   323                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   324 00005351 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   325 00005355 0FB74DA0            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   326                              <1> .loadLp:
   327 00005359 51                  <1>     push rcx    ;Save # of segments left on stack
   328 0000535A 57                  <1>     push rdi    ;Save the current buffer ptr here
   329 0000535B B928000000          <1>     mov ecx, imageSectionHdr_size
   330 00005360 488D15(31DA0300)    <1>     lea rdx, sectHdr    ;Read section headers here
   331 00005367 E807030000          <1>     call .readDataFromHdl
   332 0000536C 5F                  <1>     pop rdi
   333 0000536D 59                  <1>     pop rcx
   334 0000536E 85C0                <1>     test eax, eax
   335 00005370 0F84DC020000        <1>     jz .badFmtErr
   336 00005376 3D28000000          <1>     cmp eax, imageSectionHdr_size
   337 0000537B 0F85D1020000        <1>     jne .badFmtErr
   338                              <1>     ;File ptr moved forwards to next section header
   339 00005381 81459828000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   340                              <1>     ;Section header read, now we load section into memory
   341                              <1>     ;Move file ptr to data location
   342 00005388 8B15(45DA0300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   343 0000538E 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   344 00005392 31C0                <1>     xor eax, eax    ;Seek from start of file
   345 00005394 51                  <1>     push rcx
   346 00005395 57                  <1>     push rdi
   347 00005396 E8DEDEFFFF          <1>     call lseekHdl
   348 0000539B 5F                  <1>     pop rdi
   349 0000539C 59                  <1>     pop rcx
   350                              <1> 
   351 0000539D 51                  <1>     push rcx
   352 0000539E 57                  <1>     push rdi    ;Save current buffer offset
   353 0000539F 8B0D(41DA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   354 000053A5 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   355 000053A8 E8C6020000          <1>     call .readDataFromHdl
   356 000053AD 5F                  <1>     pop rdi
   357 000053AE 59                  <1>     pop rcx
   358 000053AF 0F829D020000        <1>     jc .badFmtErr
   359 000053B5 85C0                <1>     test eax, eax
   360 000053B7 0F8495020000        <1>     jz .badFmtErr
   361 000053BD 3B05(41DA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   362 000053C3 0F8589020000        <1>     jne .badFmtErr
   363                              <1>     ;Data read ok, now fill in any zeros needed
   364 000053C9 8B05(41DA0300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   365 000053CF 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   366 000053D2 3B05(39DA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   367 000053D8 730E                <1>     jae .skipPadding
   368 000053DA 51                  <1>     push rcx
   369 000053DB 8B0D(39DA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   370 000053E1 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   371                              <1>     ;rdi points to pad space
   372 000053E3 31C0                <1>     xor eax, eax
   373 000053E5 F3AA                <1>     rep stosb   ;Pad that many zeros
   374 000053E7 59                  <1>     pop rcx
   375                              <1> .skipPadding:
   376 000053E8 FFC9                <1>     dec ecx ;Decrement our section counter
   377 000053EA 7419                <1>     jz .doExeFixups
   378                              <1>     ;Read next section header in here
   379 000053EC 51                  <1>     push rcx
   380 000053ED 57                  <1>     push rdi
   381 000053EE 30C0                <1>     xor al, al  ;Move rel start of file
   382 000053F0 8B5598              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   383 000053F3 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   384 000053F7 31C9                <1>     xor ecx, ecx
   385 000053F9 E87BDEFFFF          <1>     call lseekHdl
   386 000053FE 5F                  <1>     pop rdi
   387 000053FF 59                  <1>     pop rcx
   388 00005400 E954FFFFFF          <1>     jmp .loadLp
   389                              <1> .doExeFixups:
   390                              <1> ;Here we fixup addresses as needed
   391                              <1> ;Program Entrypoint is saved in the header structure in the SDA
   392                              <1> ;Move File pointer to COFF header Coff + optional header sizes
   393                              <1> ;We look only for .reloc segment. We have it in memory too so use it to make 
   394                              <1> ; fixups. Zero the in memory image of reloc segment once we are done with it. 
   395                              <1> ;We checked that .reloc exists so all ok
   396 00005405 8B15(2DDA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   397 0000540B 8B55A8              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   398 0000540E 81C2AC000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   399                              <1>     ;eax now points to position in file of direcotry entry for reloc
   400 00005414 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   401 00005418 31C0                <1>     xor eax, eax
   402 0000541A E85ADEFFFF          <1>     call lseekHdl   ;Move handle there in file
   403 0000541F 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   404 00005422 B908000000          <1>     mov ecx, imageDataDirectory_size
   405                              <1>     ;Read 8 bytes into sectHdr space
   406 00005427 488D15(31DA0300)    <1>     lea rdx, sectHdr
   407 0000542E E840020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   408                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   409 00005433 8B35(31DA0300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   410 00005439 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   411 0000543B 0F840F010000        <1>     jz .buildChildPSP   ;... including if overlay
   412 00005441 480375B8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   413                              <1>     ;Now rsi points to where in memory the relocation data table is
   414                              <1>     ;Now compute the relocation factor 
   415 00005445 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   416 00005449 482B05(D9D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   417                              <1>     ;The value in rax gives how much to subtract by
   418 00005450 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   419 00005454 7507                <1>     jne .notOverlayReloc
   420 00005456 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   421 0000545A 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   422                              <1> .notOverlayReloc:
   423 0000545D 48894598            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   424 00005461 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   425                              <1>     ;rsi points to relocation data table in memory
   426 00005464 8B0D(35DA0300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   427 0000546A 81F900000000        <1>     cmp ecx, 0    ;If no relocations, skip
   428 00005470 0F84DA000000        <1>     jz .buildChildPSP
   429 00005476 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   430                              <1>     ;rsi points to the first base relocation block. The relocations begin
   431                              <1>     ; after the first block
   432                              <1>     ;ecx has the number of base relocation blocks to process.
   433                              <1> .nextBlock:
   434 0000547A 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   435 0000547B 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   436 0000547D 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   437 00005480 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   438 00005483 D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   439 00005485 67E311              <1>     jecxz .blockDone
   440                              <1> .blockNotDone:
   441 00005488 66AD                <1>     lodsw   ;Get the next page offset word
   442 0000548A 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   443 0000548F 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   444                              <1>     ;rdi points to qword to rebase
   445 00005492 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   446 00005495 FFC9                <1>     dec ecx
   447 00005497 75EF                <1>     jnz .blockNotDone
   448                              <1> .blockDone:
   449 00005499 59                  <1>     pop rcx
   450 0000549A FFC9                <1>     dec ecx
   451 0000549C 75DC                <1>     jnz .nextBlock
   452 0000549E 8B05(D1D90300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   453 000054A4 480345B8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   454 000054A8 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   455 000054AC E99F000000          <1>     jmp .buildChildPSP
   456                              <1> .loadCom:
   457                              <1>     ;File is open here, so just read the file into memory. 
   458                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   459                              <1>     ;Allocate 64Kb of memory, or as much as we can
   460 000054B1 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   461 000054B5 744E                <1>     je .comOverlay
   462 000054B7 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   463 000054BC 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   464 000054BF 55                  <1>     push rbp
   465 000054C0 E853F4FFFF          <1>     call allocateMemory
   466 000054C5 5D                  <1>     pop rbp
   467 000054C6 734A                <1>     jnc .comallocOk
   468 000054C8 3C08                <1>     cmp al, errNoMem
   469 000054CA 0F8587010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   470                              <1>     ;rbx should have the amount available
   471                              <1>     ;We check if this value is psp_size more than filesize
   472 000054D0 53                  <1>     push rbx    ;Save new minimum size
   473 000054D1 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   474 000054D6 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   475 000054DA 31D2                <1>     xor edx, edx    ;Go to end of file
   476 000054DC E898DDFFFF          <1>     call lseekHdl
   477                              <1>     ;eax has file size
   478 000054E1 5B                  <1>     pop rbx ;Get back max alloc size
   479 000054E2 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   480 000054E4 29C2                <1>     sub edx, eax
   481 000054E6 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   482 000054EC 0F82EEFCFFFF        <1>     jb .insufficientMemory   ;Fail
   483 000054F2 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   484 000054F5 E81EF4FFFF          <1>     call allocateMemory
   485 000054FA 0F8257010000        <1>     jc .cleanAndFail
   486 00005500 E90D000000          <1>     jmp .comallocOk
   487                              <1> .comOverlay:
   488                              <1>     ;Here we simply read the file into the buffer provided
   489 00005505 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   490 00005509 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   491 0000550C 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   492 00005510 EB0A                <1>     jmp short .comRead
   493                              <1> .comallocOk:
   494                              <1>     ;rax should point to the first byte
   495 00005512 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   496 00005516 480500010000        <1>     add rax, psp_size
   497                              <1> .comRead:
   498 0000551C 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   499                              <1> 
   500 00005520 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   501 00005525 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   502 00005529 31D2                <1>     xor edx, edx    ;Go to end of file
   503 0000552B E849DDFFFF          <1>     call lseekHdl
   504                              <1>     ;eax has filesize now
   505 00005530 50                  <1>     push rax    ;Save filesize
   506 00005531 31C0                <1>     xor eax, eax    ;Reposition to start of file
   507 00005533 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   508 00005537 31D2                <1>     xor edx, edx    ;Go to start of file
   509 00005539 E83BDDFFFF          <1>     call lseekHdl
   510 0000553E 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   511 0000553F 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   512 00005543 E82B010000          <1>     call .readDataFromHdl   ;Read from the file handle
   513 00005548 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   514 0000554C 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   515                              <1> .buildChildPSP:
   516                              <1>     ;We can close handle now
   517 00005550 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   518 00005554 55                  <1>     push rbp
   519 00005555 E834DCFFFF          <1>     call closeFileHdl   ;Close the file
   520 0000555A 5D                  <1>     pop rbp
   521                              <1> 
   522                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   523 0000555B 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   524 0000555F 0F84CB000000        <1>     je .overlayExit
   525                              <1>     ;Now build the PSP
   526 00005565 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   527 00005568 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   528 0000556C 52                  <1>     push rdx
   529 0000556D 55                  <1>     push rbp
   530 0000556E E816F9FFFF          <1>     call createPSP
   531 00005573 5D                  <1>     pop rbp
   532 00005574 5A                  <1>     pop rdx
   533                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   534 00005575 488915(02C40300)    <1>     mov qword [currentPSP], rdx
   535 0000557C E8670B0000          <1>     call dosCrit1Enter
   536 00005581 E812010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   537                              <1> 
   538 00005586 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   539 0000558D 48893D(FAC30300)    <1>     mov qword [currentDTA], rdi ;and set it!
   540                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   541                              <1>     ; and set FS to point to the PSP
   542 00005594 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   543                              <1> 
   544 00005598 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   545 0000559C B925000000          <1>     mov ecx, fcb_size
   546 000055A1 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   547 000055A5 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   548 000055A7 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   549 000055A9 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   550 000055AD B925000000          <1>     mov ecx, fcb_size
   551 000055B2 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   552 000055B6 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   553 000055B8 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   554 000055BA 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   555 000055BE 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   556 000055C5 B980000000          <1>     mov ecx, 80h
   557 000055CA F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   558                              <1> 
   559 000055CC 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   560 000055CE 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   561                              <1> 
   562                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   563 000055D1 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   564 000055D6 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   565 000055D8 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   566 000055DC 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   567                              <1> 
   568 000055DE E8B3060000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   569 000055E3 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   570 000055E7 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   571 000055EB 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   572 000055EE B042                <1>     mov al, 42h
   573 000055F0 E8EB0C0000          <1>     call setIntVector   ;bx preserved by this call
   574                              <1> 
   575                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   576 000055F5 88D8                <1>     mov al, bl
   577 000055F7 30DB                <1>     xor bl, bl
   578 000055F9 E8BC060000          <1>     call setDrive
   579 000055FE 7302                <1>     jnc .drive1Ok
   580 00005600 B3FF                <1>     mov bl, -1
   581                              <1> .drive1Ok:
   582 00005602 88F8                <1>     mov al, bh
   583 00005604 30FF                <1>     xor bh, bh
   584 00005606 E8AF060000          <1>     call setDrive
   585 0000560B 7302                <1>     jnc .drive2Ok
   586 0000560D B7FF                <1>     mov bh, -1
   587                              <1> .drive2Ok:
   588                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   589                              <1>     ;rdi has pointer to psp
   590 0000560F 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   591                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   592 00005612 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   593 00005617 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   594 0000561B 741C                <1>     je .xfrProgram
   595 0000561D 488B45A8            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   596 00005621 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   597 00005625 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   598 00005629 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   599 0000562D 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   600                              <1> .overlayExit:
   601 00005630 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   602 00005633 5D                  <1>     pop rbp ;Point rsp to the return address
   603 00005634 E9EC0A0000          <1>     jmp extGoodExit ;And return!
   604                              <1> .xfrProgram:
   605 00005639 FA                  <1>     cli
   606 0000563A 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   607 0000563D C605(EBC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   608 00005644 FB                  <1>     sti
   609 00005645 FF75A8              <1>     push qword [rbp - execFrame.pProgEP]
   610 00005648 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   611 0000564B 4989F9              <1>     mov r9, rdi
   612 0000564E 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   613                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 00005651 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   614                              <1> 
   615                              <1> .badFmtErr:
   616 00005652 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   617                              <1> .cleanAndFail:
   618                              <1> ;Close the open file and any open resources and fail
   619 00005657 E82D000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   620 0000565C E8910A0000          <1>     call dosCrit1Exit
   621 00005661 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   622 00005665 50                  <1>     push rax    ;Save error code
   623 00005666 55                  <1>     push rbp
   624 00005667 E822DBFFFF          <1>     call closeFileHdl
   625 0000566C 5D                  <1>     pop rbp
   626 0000566D 58                  <1>     pop rax
   627 0000566E E9AFFAFFFF          <1>     jmp .badExit
   628                              <1> 
   629                              <1> .readDataFromHdl:
   630                              <1> ;Input: bx = File Handle
   631                              <1> ;       ecx = Number of bytes to transfer
   632                              <1> ;       rdx = Ptr to the buffer to use
   633 00005673 E811000000          <1>     call .clearArenaOwner   ;Entering critical section!
   634 00005678 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   635 0000567C 55                  <1>     push rbp
   636 0000567D E84BDBFFFF          <1>     call readFileHdl
   637 00005682 5D                  <1>     pop rbp
   638 00005683 E810000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   639                              <1>     return
    18                              <2> %%_ret:
    19 00005688 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   640                              <1> .clearArenaOwner:
   641 00005689 53                  <1>     push rbx
   642 0000568A 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   643 0000568C E8570A0000          <1>     call dosCrit1Enter
   644 00005691 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   645 00005696 5B                  <1>     pop rbx
   646                              <1>     return
    18                              <2> %%_ret:
    19 00005697 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   647                              <1> .setPSPArenaOwner:
   648                              <1> ;Sets the current PSP as the arena owner
   649 00005698 53                  <1>     push rbx
   650 00005699 488B1D(02C40300)    <1>     mov rbx, qword [currentPSP]
   651 000056A0 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   652 000056A5 E8480A0000          <1>     call dosCrit1Exit
   653 000056AA 5B                  <1>     pop rbx
   654                              <1>     return
    18                              <2> %%_ret:
    19 000056AB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   655                              <1> .setProgOrEnvArenaOwnerToRBX:
   656                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   657 000056AC 9C                  <1>     pushfq
   658 000056AD 50                  <1>     push rax
   659                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   660                              <1>     ;This is because they are set up at separate points in the routine!
   661 000056AE 488B45C0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   662 000056B2 E80C000000          <1>     call .writeArenaHeaderOwner
   663 000056B7 488B45C8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   664 000056BB E803000000          <1>     call .writeArenaHeaderOwner
   665 000056C0 58                  <1>     pop rax
   666 000056C1 9D                  <1>     popfq
   667                              <1>     return
    18                              <2> %%_ret:
    19 000056C2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   668                              <1> .writeArenaHeaderOwner:
   669                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   670                              <1> ;       rbx = Owner ID
   671 000056C3 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   672                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000056C6 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   673 000056C8 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   674 000056CE 48895801            <1>     mov qword [rax + 1], rbx
   675                              <1>     return
    18                              <2> %%_ret:
    19 000056D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                                  %include "./Source/Kernel/Local/local.asm"
    37                              <1> ;Localisation based functions live here
    38                              <1> 
    39                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    40                              <1> ;al = 0 => Get the switch char
    41                              <1> ;al = 1 => Set the switch char to whats in DL
    42                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    43                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    44                              <1> ;       Always returns -1 => /DEV/ optional
    45                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    46                              <1> ;       Input value is ignored
    47 000056D3 3C01                <1>     cmp al, 01
    48 000056D5 740B                <1>     je .setSC
    49 000056D7 7210                <1>     jb .getSC
    50 000056D9 3C03                <1>     cmp al, 03
    51 000056DB 7214                <1>     jb .getDev
    52 000056DD 741C                <1>     je .setDev
    53 000056DF B0FF                <1>     mov al, -1
    54                              <1>     return
    18                              <2> %%_ret:
    19 000056E1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> .setSC:
    56 000056E2 8815(B4C30300)      <1>     mov byte [switchChar], dl
    57                              <1>     return
    18                              <2> %%_ret:
    19 000056E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> .getSC:
    59 000056E9 8A15(B4C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    60 000056EF EB02                <1>     jmp short .getRet
    61                              <1> .getDev:
    62 000056F1 B2FF                <1>     mov dl, -1
    63                              <1> .getRet:
    64 000056F3 E89E050000          <1>     call getUserRegs
    65 000056F8 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    66                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    67                              <1>     return
    18                              <2> %%_ret:
    19 000056FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    68                              <1> 
    69                              <1> 
    70                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    71                              <1> ;Currently only accept subfunction al = 0, current country
    72                              <1> ;AL > 0 => errInvFnc, Subfunction error
    73                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    74 000056FC 84C0                <1>     test al, al
    75 000056FE 740A                <1>     jz .currentCountry
    76                              <1> .invalidFunction:
    77 00005700 B801000000          <1>     mov eax, errInvFnc
    78 00005705 E9290A0000          <1>     jmp extErrExit
    79                              <1> .currentCountry:
    80 0000570A 4881FAFFFFFFFF      <1>     cmp rdx, -1
    81 00005711 74ED                <1>     je .invalidFunction
    82 00005713 488D3502A9FFFF      <1>     lea rsi, ctryTbl
    83 0000571A 4889D7              <1>     mov rdi, rdx
    84 0000571D B926000000          <1>     mov ecx, countryStruc_size
    85 00005722 F3A4                <1>     rep movsb
    86 00005724 31C0                <1>     xor eax, eax
    87 00005726 E9FA090000          <1>     jmp extGoodExit
    88                              <1> 
    89                              <1> 
    90                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    91                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    92 0000572B C3                  <1>     ret
    37                                  %include "./Source/Kernel/ctrlc.asm"
    38                              <1> fullcriticalErrorInvoke:
    39 0000572C B803000000          <1>     mov eax, 03 ;Always fail for now
    40                              <1>     return
    18                              <2> %%_ret:
    19 00005731 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                              <1> 
    42                              <1> diskDevErr:
    43                              <1> ;Called, NOT Jumped to. 
    44                              <1> ;Input: rdi = Disk Buffer pointer
    45                              <1> ;       eax = Status word (Zero Extended)
    46                              <1> ;       rbp = Disk DPB pointer
    47                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    48                              <1> ;Output: al = Int 44h response (0-3)
    49                              <1> ; All other registers preserved
    50 00005732 48893D(F2C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    51 00005739 89C7                <1>     mov edi, eax    ;Store status word in rdi
    52 0000573B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    53 0000573E 8A25(4AC40300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    54 00005744 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    55                              <1>     ;Test for correct buffer data type
    56 00005747 53                  <1>     push rbx    ;Save rbx temporarily
    57 00005748 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    58 0000574B F6C301              <1>     test bl, dosBuffer
    59 0000574E 7505                <1>     jnz .df0
    60 00005750 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    61 00005753 EB17                <1>     jmp short .df3
    62                              <1> .df0:
    63 00005755 F6C302              <1>     test bl, fatBuffer
    64 00005758 7505                <1>     jnz .df1
    65 0000575A 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    66 0000575D EB0D                <1>     jmp short .df3
    67                              <1> .df1:
    68 0000575F F6C304              <1>     test bl, dirBuffer
    69 00005762 7505                <1>     jnz .df2
    70 00005764 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    71 00005767 EB03                <1>     jmp short .df3
    72                              <1> .df2:
    73 00005769 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    74                              <1> .df3:
    75 0000576C 5B                  <1>     pop rbx
    76 0000576D 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    77 00005771 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    78 00005776 488B2D(6CC70300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    79 0000577D 488B3D(F2C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    80                              <1>     return
    18                              <2> %%_ret:
    19 00005784 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    81                              <1> 
    82                              <1> charDevErr:
    83                              <1> ;Called with ah with additional bits
    84 00005785 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    85                              <1> criticalErrorSetup:
    86 00005788 8825(4AC40300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    87 0000578E 48892D(6CC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    88 00005795 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    89                              <1>     ;For now, fall through, but need much work to change it later! 
    90                              <1> 
    91                              <1> 
    92                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    93                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    94                              <1> ; to the critical error handler.
    95                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    96                              <1> ; and with Int44Bitfield set
    97                              <1> ;               AH = Critical Error Bitfield
    98                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    99                              <1> ;               Bit 6 - Reserved
   100                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   101                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   102                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   103                              <1> ;               Bits [2-1] = Affected Disk Error
   104                              <1> ;                     0 0   DOS area
   105                              <1> ;                     0 1   FAT area
   106                              <1> ;                     1 0   Directory area
   107                              <1> ;                     1 1   Data area
   108                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   109                              <1> ;               AL  = Failing drive number if AH[7] = 0
   110                              <1> ;               DIL = Error code for errorMsg
   111                              <1> ;               RSI = EA of Device Header for which device the error occured
   112                              <1> ;Return:
   113                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   114                              <1> ;                  = 1 - Retry the Operation    (Retry)
   115                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   116                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   117                              <1> ; Return response from int 44h in al
   118                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   119                              <1> ; This function will terminate the program if an abort was requested!
   120                              <1> ; This function also destroys RBP
   121 0000579B 803D(EAC30300)01    <1>     cmp byte [critErrFlag], 1
   122 000057A2 7204                <1>     jb .noIntError  ;If not 0, enter
   123 000057A4 B003                <1>     mov al, critFail    ;Else, return Fail always
   124 000057A6 EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   125                              <1> .noIntError:
   126 000057A8 FA                  <1>     cli ;Disable Interrupts
   127 000057A9 FE05(EAC30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   128 000057AF FE0D(EBC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   129 000057B5 488925(42C40300)    <1>     mov qword [xInt44hRSP], rsp
   130 000057BC 488B25(5DC40300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   131 000057C3 31ED                <1>     xor ebp, ebp    ;Always zeroed
   132 000057C5 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   133 000057C7 488B25(42C40300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   134 000057CE C605(EAC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   135 000057D5 FE05(EBC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   136 000057DB FB                  <1>     sti ;Reenable Interrupts
   137                              <1>     ;Now we check that the response given was allowed, and translate if needed
   138                              <1> .checkResponse:
   139 000057DC 3C00                <1>     cmp al, critIgnore
   140 000057DE 7421                <1>     je .checkIgnore
   141 000057E0 3C01                <1>     cmp al, critRetry
   142 000057E2 7428                <1>     je .checkRetry
   143 000057E4 3C03                <1>     cmp al, critFail
   144 000057E6 752F                <1>     jne .abort   ;Must be abort
   145                              <1> .setFail:   ;Here is for fail
   146 000057E8 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   147 000057EA FE05(4CC40300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   148 000057F0 F605(4AC40300)08    <1>     test byte [Int44bitfld], critFailOK
   149 000057F7 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   150                              <1> .exit:
   151 000057F9 C605(ECC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   152                              <1>     return
    18                              <2> %%_ret:
    19 00005800 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> .checkIgnore:
   154 00005801 F605(4AC40300)20    <1>     test byte [Int44bitfld], critIgnorOK
   155 00005808 75EF                <1>     jnz .exit
   156 0000580A EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   157                              <1> .checkRetry:
   158 0000580C F605(4AC40300)10    <1>     test byte [Int44bitfld], critRetryOK
   159 00005813 75E4                <1>     jnz .exit   
   160 00005815 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   161                              <1> .abort:
   162                              <1> ;Prepare to abort. We abort from within!
   163                              <1> ;If a network request requests abort, translate to fail
   164 00005817 803D(E0C60300)FF    <1>     cmp byte [dosInvoke], -1
   165 0000581E 7509                <1>     jne .kill   ;If this is zero, local invokation
   166 00005820 C605(78C40300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   167 00005827 EBD0                <1>     jmp short .exit
   168                              <1> .kill:
   169 00005829 66893D(EEC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   170 00005830 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   171 00005832 C605(E4C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   172 00005839 E96CF7FFFF          <1>     jmp terminateClean.altEP
   173                              <1> 
   174                              <1> ctrlBreakHdlr:
   175 0000583E B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   176 00005840 E847CDFFFF          <1>     call printCaretASCII
   177 00005845 E872CDFFFF          <1>     call printCRLF
   178                              <1>     ;Reset the console back to 0
   179 0000584A C605(76C40300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   180                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   181 00005851 FA                  <1> 	cli
   182 00005852 488B25(5DC40300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   183 00005859 E85C080000          <1> 	call dosPopRegs ;Get user state back
   184 0000585E 488925(0AC40300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   185 00005865 F8                  <1>     clc
   186 00005866 CD43                <1>     int 43h ;Call critical error handler
   187 00005868 FA                  <1>     cli ;Clear interrupts again
   188 00005869 488905(16C40300)    <1>     mov qword [oldRAX], rax ;Save rax
   189 00005870 9C                  <1>     pushfq  ;Get flags in rax
   190 00005871 58                  <1>     pop rax 
   191 00005872 483B25(0AC40300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   192 00005879 750C                <1>     jne .checkCF
   193                              <1> .returnToDOS:
   194 0000587B 488B05(16C40300)    <1>     mov rax, qword [oldRAX]
   195 00005882 E9D9060000          <1>     jmp functionDispatch    ;Goto int 41h
   196                              <1> .checkCF:
   197 00005887 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   198 0000588E A801                <1>     test al, 1  ;CF set?
   199 00005890 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   200 00005892 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   201 00005897 C605(6EC40300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   202 0000589E E9BD060000          <1>     jmp functionDispatch
   203                              <1> 
    38                                  %include "./Source/Kernel/dosPrim.asm"
    39                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    40                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    41                              <1> 
    42                              <1> dosDefCritErrHdlr:
    43                              <1> ;The DOS default critical error handler always returns FAIL
    44 000058A3 B003                <1>     mov al, critFail
    45 000058A5 48CF                <1>     iretq
    46                              <1> goDriverChar:
    47                              <1> ;Shortcut for Char requests, make a driver request
    48                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    49 000058A7 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    50                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    51                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    52                              <1> ;       rbx = Ptr to the request header for the driver call!
    53 000058AB E84C080000          <1>     call dosCrit2Enter
    54 000058B0 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    55 000058B3 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    56 000058B6 E84B080000          <1>     call dosCrit2Exit
    57                              <1>     return
    18                              <2> %%_ret:
    19 000058BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> 
    59                              <1> setupPhysicalDiskRequest:
    60                              <1> ;Ensure that al has valid disk number
    61                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    62                              <1> ;If CF=NC, rbp = DPB ptr.
    63                              <1> ;If CF=CY, exit error
    64 000058BC 84C0                <1>     test al, al
    65 000058BE 723F                <1>     jc .diskError
    66 000058C0 3A05(7CC00300)      <1>     cmp al, byte [lastdrvNum]
    67 000058C6 7337                <1>     jae .diskError
    68 000058C8 50                  <1>     push rax
    69 000058C9 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    70 000058CB E853040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    71 000058D0 58                  <1>     pop rax
    72 000058D1 7235                <1>     jc .error
    73 000058D3 8805(E7C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    74 000058D9 488B2D(F0C60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    75 000058E0 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    76 000058E8 750A                <1>     jnz .netError
    77 000058EA 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    78 000058EE E82E030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    79                              <1>     return
    18                              <2> %%_ret:
    19 000058F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    80                              <1> .netError:
    81 000058F4 66C705(EEC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    81 000058FC 00                  <1>
    82 000058FD EB09                <1>     jmp short .error
    83                              <1> .diskError:
    84 000058FF 66C705(EEC30300)0F- <1>     mov word [errorExCde], errBadDrv
    84 00005907 00                  <1>
    85                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    86 00005908 C605(EDC30300)02    <1>     mov byte [errorLocus], eLocDsk
    87 0000590F C605(F0C30300)07    <1>     mov byte [errorAction], eActRetUsr
    88 00005916 C605(F1C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    89 0000591D F9                  <1>     stc
    90                              <1>     return
    18                              <2> %%_ret:
    19 0000591E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> setupAbsDiskEntry:
    93                              <1> ;Prepares to sets up the CDS and DPB for the request
    94 0000591F FE05(EBC30300)      <1>     inc byte [inDOS]
    95 00005925 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    96 00005926 FC                  <1>     cld ;Set string ops in the right direction
    97 00005927 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    98 0000592C 7223                <1>     jc .exit    ;Error exit
    99 0000592E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
   100 00005935 56                  <1>     push rsi
   101 00005936 50                  <1>     push rax
   102 00005937 488D35(00C50300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   103 0000593E 8806                <1>     mov byte [rsi], al  ;Construct a path
   104 00005940 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   105 00005943 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   106 00005947 F8                  <1>     clc
   107                              <1> ;++++++++++++++++++++++++++++
   108                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   109                              <1> ;Entered with path in rsi (ah=03h)
   110 00005948 B800030000          <1>     mov eax, 0300h  
   111 0000594D CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   112                              <1> ;++++++++++++++++++++++++++++
   113 0000594F 58                  <1>     pop rax
   114 00005950 5E                  <1>     pop rsi
   115                              <1> .exit:
   116 00005951 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   117                              <1>     return
    18                              <2> %%_ret:
    19 00005953 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   118                              <1> 
   119                              <1> absDiskWrite:       ;Int 46h
   120                              <1> ;al = Drive number
   121                              <1> ;rbx = Memory Buffer address to read from
   122                              <1> ;ecx = Number of sectors to write
   123                              <1> ;rdx = Start LBA to write to
   124 00005954 FA                  <1>     cli
   125 00005955 488925(5DC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   126 0000595C 488D25(B7D90300)    <1>     lea rsp, DiskStakTop
   127 00005963 55                  <1>     push rbp
   128 00005964 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   129 00005965 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   130 0000596A 7252                <1>     jc absDiskExit
   131 0000596C E8C3010000          <1>     call primReqWriteSetup
   132 00005971 EB1D                <1>     jmp short absDiskReadWriteCommon
   133                              <1> absDiskRead:        ;Int 45h
   134                              <1> ;al = Drive number
   135                              <1> ;rbx = Memory Buffer address to write to
   136                              <1> ;ecx = Number of sectors to read
   137                              <1> ;rdx = Start LBA to read from
   138 00005973 FA                  <1>     cli 
   139 00005974 488925(5DC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   140 0000597B 488D25(B7D90300)    <1>     lea rsp, DiskStakTop
   141 00005982 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   142 00005983 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   143 00005984 E896FFFFFF          <1>     call setupAbsDiskEntry
   144 00005989 7233                <1>     jc absDiskExit
   145 0000598B E8AF010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   146                              <1> absDiskReadWriteCommon:
   147                              <1> ;Entered with the appropriate function number in ah
   148                              <1> ; and primary request header in rbx
   149 00005990 E83B000000          <1>     call absDiskDriverCall
   150 00005995 7427                <1>     jz absDiskExit  ;Skip error code checking
   151 00005997 8A05(A6C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   152                              <1>     ;DOS uses the following pairs in a table
   153                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   154 0000599D B480                <1>     mov ah, 80h ;Attachment failure
   155 0000599F 3C0C                <1>     cmp al, 0Ch ;Gen error
   156 000059A1 741A                <1>     je .absExit
   157 000059A3 B440                <1>     mov ah, 40h ;Seek error
   158 000059A5 3C06                <1>     cmp al, 06h
   159 000059A7 7414                <1>     je .absExit
   160 000059A9 B408                <1>     mov ah, 08h ;Bad CRC
   161 000059AB 3C04                <1>     cmp al, 04h
   162 000059AD 740E                <1>     je .absExit
   163 000059AF B404                <1>     mov ah, 04h ;Sector not found
   164 000059B1 3C08                <1>     cmp al, 08h
   165 000059B3 7408                <1>     je .absExit
   166 000059B5 30E4                <1>     xor ah, ah  ;Write Protect Violation
   167 000059B7 84C0                <1>     test al, al
   168 000059B9 7402                <1>     je .absExit
   169 000059BB B402                <1>     mov ah, 02h ;Other Error
   170                              <1> .absExit:
   171 000059BD F9                  <1>     stc
   172                              <1> absDiskExit:
   173 000059BE 5B                  <1>     pop rbx
   174 000059BF 5D                  <1>     pop rbp
   175 000059C0 FA                  <1>     cli
   176 000059C1 FE0D(EBC30300)      <1>     dec byte [inDOS]
   177 000059C7 488B25(5DC40300)    <1>     mov rsp, qword [oldRSP]
   178 000059CE FB                  <1>     sti ;Reenable interrupts
   179                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 000059CF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> absDiskDriverCall:
   181                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   182                              <1> ;       rbx = Request header address
   183                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   184                              <1> ;       eax = Status word from request
   185                              <1> ;       ecx = Number of sectors transferred
   186 000059D0 56                  <1>     push rsi
   187                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   188 000059D1 8B0D(B9C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   189                              <1>     ;Prepare for goDriver now
   190 000059D7 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   191 000059DB E8CBFEFFFF          <1>     call goDriver   ;Make request
   192 000059E0 5E                  <1>     pop rsi
   193 000059E1 8B05(B9C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   194 000059E7 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   195 000059E9 0FB705(A6C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   196 000059F0 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   197                              <1>     return
    18                              <2> %%_ret:
    19 000059F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   198                              <1> 
   199                              <1> getDiskDPB:
   200                              <1> ;Gets the disk DPB if the Disk is valid
   201                              <1> ;Otherwise will return a pointer to the drive DPB
   202                              <1> ;Called with rdi pointing to the CDS
   203                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   204 000059F5 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   205 000059F9 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   206 000059FC 8805(E7C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   207 00005A02 E81A020000          <1>     call setWorkingDPB
   208 00005A07 57                  <1>     push rdi    ;Save the CDS ptr
   209 00005A08 E84E000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   210 00005A0D 5F                  <1>     pop rdi
   211 00005A0E 724A                <1>     jc .exitBad ;Preserve CF
   212 00005A10 7547                <1>     jnz .exit
   213                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   214 00005A12 0FB60D(7CC00300)    <1>     movzx ecx, byte [lastdrvNum]
   215 00005A19 31C0                <1>     xor eax, eax
   216 00005A1B 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   217 00005A1E 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   218 00005A22 488B3D(69C00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   219                              <1> .checkCDS:
   220 00005A29 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   221 00005A2F 751D                <1>     jnz .next
   222 00005A31 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi
   223 00005A35 7517                <1>     jne .next
   224 00005A37 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   225 00005A3B 7411                <1>     jz .next    ;IF yes, skip it
   226 00005A3D 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   227                              <1>     ;Subst drives should just fail if the subdir doesnt exist.
   228                              <1>     ;TEMP TEMP: subst will become deactivated and their StartingClust=-1
   229 00005A40 66F747430010        <1>     test word [rdi + cds.wFlags], cdsSubstDrive
   230 00005A46 7406                <1>     jz .next    ;If bit not set, skip this next bit
   231 00005A48 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Clear the flags rendering this drv dead
   232                              <1> .next:
   233 00005A4E 4881C75B000000      <1>     add rdi, cds_size
   234 00005A55 FFC9                <1>     dec ecx
   235 00005A57 75D0                <1>     jnz .checkCDS
   236                              <1> .exit:
   237 00005A59 F8                  <1>     clc
   238                              <1> .exitBad:
   239                              <1>     return
    18                              <2> %%_ret:
    19 00005A5A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> ensureDiskValid:
   242                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   243                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   244                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   245                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   246                              <1> .medChk:
   247 00005A5B E828010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   248                              <1> ;Return in rbx the req hdr address
   249 00005A60 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   250 00005A64 E842FEFFFF          <1>     call goDriver   ;Request!
   251 00005A69 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   252 00005A6D F7C700800000        <1>     test edi, drvErrStatus
   253 00005A73 756B                <1>     jnz .diskDrvCritErrMedChk
   254                              <1> .medChkIgnore:
   255 00005A75 8A05(E7C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   256 00005A7B 30E4                <1>     xor ah, ah
   257 00005A7D 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   258 00005A80 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   259 00005A83 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   260 00005A85 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   261 00005A87 E8FFAEFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   262 00005A8C F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   263 00005A8D 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   264                              <1>     ;ZF=NZ from test for dirty buffers
   265                              <1> .exit:
   266                              <1>     return
    18                              <2> %%_ret:
    19 00005A8F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   267                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   268 00005A90 C605(BFD90300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   269 00005A97 E813AFFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   270                              <1>     ;Get a buffer to read BPB into in rdi
   271 00005A9C 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   272 00005A9E E80DB1FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   273 00005AA3 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   274 00005AA5 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   275                              <1> .repeatEP:
   276 00005AA9 E806010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   277 00005AAE 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   278 00005AB2 E8F4FDFFFF          <1>     call goDriver   ;Request!
   279 00005AB7 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   280 00005ABB A900800000          <1>     test eax, drvErrStatus
   281 00005AC0 755C                <1>     jnz .diskDrvCritErrBPB
   282                              <1>     ;Now rebuild the dpb fields for this drive
   283 00005AC2 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   284 00005AC6 E829090000          <1>     call createDPB
   285                              <1>     ;Adjust the buffer header information
   286 00005ACB 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   287 00005ACE 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   288 00005AD1 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   289 00005AD4 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   290 00005AD7 30E4                <1>     xor ah, ah
   291 00005AD9 8825(BFD90300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   292                              <1>     return
    18                              <2> %%_ret:
    19 00005ADF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> .diskDrvCritErrMedChk:
   294                              <1> ;Critical Errors fall through here
   295                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   296 00005AE0 48893D(F2C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   297 00005AE7 48892D(6CC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   298 00005AEE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   299 00005AF1 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   300 00005AF3 8825(4AC40300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   301 00005AF9 E89DFCFFFF          <1>     call criticalDOSError
   302 00005AFE 488B3D(F2C30300)    <1>     mov rdi, qword [xInt44RDI]
   303 00005B05 488B2D(6CC70300)    <1>     mov rbp, qword [tmpDPBPtr]
   304 00005B0C 3C01                <1>     cmp al, critRetry
   305 00005B0E 0F8447FFFFFF        <1>     je .medChk
   306 00005B14 3C00                <1>     cmp al, critIgnore
   307 00005B16 0F8459FFFFFF        <1>     je .medChkIgnore
   308 00005B1C F9                  <1>     stc ;Set error flag to indicate fail
   309                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00005B1D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   310                              <1> 
   311                              <1> .diskDrvCritErrBPB:
   312                              <1>     ;eax has status word, rbp has dpb ptr
   313                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   314 00005B1E C605(4AC40300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   315 00005B25 E808FCFFFF          <1>     call diskDevErr
   316 00005B2A 3C01                <1>     cmp al, critRetry
   317 00005B2C 0F8477FFFFFF        <1>     je .repeatEP
   318                              <1>     ;Else we fail (Ignore=Fail here)
   319 00005B32 F9                  <1>     stc ;Set error flag to indicate fail
   320                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00005B33 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   322                              <1> ;           Primitive Driver Requests
   323                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   324                              <1> ;First are Disk requests, then Char device requests
   325                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   326                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   327                              <1> 
   328                              <1> primReqWriteSetup:
   329 00005B34 50                  <1>     push rax
   330 00005B35 B408                <1>     mov ah, drvWRITE    ;Command code
   331 00005B37 0225(B3C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   332 00005B3D EB03                <1>     jmp short primReqRWCommon
   333                              <1> primReqReadSetup:
   334 00005B3F 50                  <1>     push rax
   335 00005B40 B404                <1>     mov ah, drvREAD
   336                              <1> primReqRWCommon:
   337                              <1> ;Sets up the IO request packet with:
   338                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   339                              <1> ; rbx = Data storage buffer ptr
   340                              <1> ; ecx = Number of sectors to transfer
   341                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   342                              <1> ; ~~~~ Set by entry function ~~~~ 
   343                              <1> ; ah = Command code
   344                              <1> ; All regs preserved EXCEPT rbx.
   345                              <1> ; Return: rbx = Transfer Address
   346 00005B42 48891D(B1C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   347 00005B49 890D(B9C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   348 00005B4F C605(A3C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   349 00005B56 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   350 00005B5B 8905(A4C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   351 00005B61 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   352 00005B64 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   353                              <1>     ;Disk operations only here!
   354 00005B66 488915(BDC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   355 00005B6D 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   356 00005B70 8805(B0C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   357 00005B76 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   358 00005B79 8805(A4C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   359                              <1> primReqCommonExit:
   360                              <1> ;Returns in rbx the primary request header as these functions
   361                              <1> ; setup the request in the primary request header space
   362 00005B7F 58                  <1>     pop rax
   363 00005B80 488D1D(A3C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   364                              <1>     return
    18                              <2> %%_ret:
    19 00005B87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   365                              <1> 
   366                              <1> primReqMedCheckSetup:
   367                              <1> ;Prepare the diskIO packet for mediacheck
   368                              <1> ;rbp has DPB pointer for device to check media on
   369 00005B88 50                  <1>     push rax
   370 00005B89 C605(A3C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   371 00005B90 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   372 00005B93 8805(B0C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   373 00005B99 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   374 00005B9C 8805(A4C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   375 00005BA2 C605(A5C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   376 00005BA9 66C705(A6C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   376 00005BB1 00                  <1>
   377 00005BB2 EBCB                <1>     jmp short primReqCommonExit
   378                              <1> 
   379                              <1> primReqGetBPBSetup:
   380                              <1> ;rbp has DPB pointer for device
   381                              <1> ;rdi has sector buffer header pointer for transfer
   382 00005BB4 50                  <1>     push rax
   383 00005BB5 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   384 00005BB9 48893D(B1C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   385 00005BC0 C605(A3C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   386 00005BC7 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   387 00005BCA 8805(B0C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   388 00005BD0 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   389 00005BD3 8805(A4C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   390 00005BD9 C605(A5C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   391 00005BE0 66C705(A6C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   391 00005BE8 00                  <1>
   392 00005BE9 EB94                <1>     jmp short primReqCommonExit
   393                              <1> 
   394                              <1> primReqOpenSetup:
   395                              <1> ;al = unit number if a disk device. Undefined otherwise
   396 00005BEB 50                  <1>     push rax
   397 00005BEC B40D                <1>     mov ah, drvOPEN
   398 00005BEE EB03                <1>     jmp short primReqOCcommon
   399                              <1> primReqCloseSetup:
   400                              <1> ;al = unit number if a disk device. Undefined otherwise
   401 00005BF0 50                  <1>     push rax
   402 00005BF1 B40E                <1>     mov ah, drvCLOSE
   403                              <1> primReqOCcommon:
   404 00005BF3 C605(A3C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   405 00005BFA 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   406 00005BFB 8905(A4C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   407                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   408 00005C01 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   409                              <1> 
   410                              <1> secdReqCharIOReq:
   411                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   412                              <1> ;Input:
   413                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   414                              <1> ; ecx = Length of buffer
   415                              <1> ; rdi = Buffer pointer
   416                              <1> ;Output: 
   417                              <1> ; rbx = Transfer Address 
   418 00005C06 488D1D(79C40300)    <1>     lea rbx, secdReqHdr
   419 00005C0D C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   420 00005C10 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   421 00005C13 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   422 00005C19 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   423 00005C1D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   424                              <1>     return
    18                              <2> %%_ret:
    19 00005C20 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   425                              <1> ;If the device which will process this request is a disk device
   426                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   427                              <1> ;Then we will read the appropriate byte from that buffer to the 
   428                              <1> ; singleIOByt buffer.
   429                              <1> ;Such a request will require additional setup with the following fields:
   430                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    39                                  %include "./Source/Kernel/dosUtils.asm"
    40                              <1> ;DOS utility functions 
    41                              <1> 
    42                              <1> ;Basic Drive related Utilities
    43                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    44                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    45                              <1> ; that gets set up)
    46                              <1> 
    47                              <1> setWorkingDPB:
    48                              <1> ;Gets dpb in rbp and saves to workingDPB
    49 00005C21 48892D(E8C60300)    <1>     mov qword [workingDPB], rbp
    50                              <1>     return
    18                              <2> %%_ret:
    19 00005C28 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> testCDSNet:
    53                              <1> ;Checks if the workingCDS is a redirector drive
    54                              <1> ;Returns: CF=NC => Not net
    55                              <1> ;         CF=CY => Network redirector
    56                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    57                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    58                              <1> ;         rdi = workingCDS ptr
    59 00005C29 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS]
    60 00005C30 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    61 00005C37 7409                <1>     je .net
    62 00005C39 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    63 00005C3F 7501                <1>     jnz .net ;Net with CDS
    64                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 00005C41 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> .net:
    66 00005C42 F9                  <1>     stc ;Set Net bit
    67                              <1>     return
    18                              <2> %%_ret:
    19 00005C43 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    68                              <1> 
    69                              <1> getDiskData:
    70                              <1> ;This function returns:
    71                              <1> ;al = sectors per cluster
    72                              <1> ;ah = media ID byte
    73                              <1> ;ebx = total clusters
    74                              <1> ;cx = bytes per sector
    75                              <1> ;edx = number of available clusters
    76                              <1> ;
    77                              <1> ;If CF=CY on exit, al contains the error code
    78 00005C44 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    79 00005C49 7308                <1>     jnc .physical
    80                              <1>     ;Beep a redir request out
    81 00005C4B B80C110000          <1>     mov eax, 110Ch 
    82 00005C50 CD4F                <1>     int 4Fh
    83                              <1>     return
    18                              <2> %%_ret:
    19 00005C52 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> .physical:
    85                              <1> ;Now we must lock the structures
    86 00005C53 C605(EDC30300)02    <1>     mov byte [errorLocus], eLocDsk
    87 00005C5A E889040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    88 00005C5F E891FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    89 00005C64 721C                <1>     jc .exit
    90 00005C66 E841B1FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    91 00005C6B 7215                <1>     jc .exit
    92 00005C6D 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    93 00005C70 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    94 00005C72 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    95 00005C75 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    96 00005C78 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    97 00005C7A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    98 00005C7E 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    99 00005C81 F8                  <1>     clc
   100                              <1> .exit:
   101 00005C82 E86B040000          <1>     call dosCrit1Exit
   102                              <1>     return
    18                              <2> %%_ret:
    19 00005C87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   103                              <1> 
   104                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   105                              <1> ;Input: al = Interrupt number
   106                              <1> ;Output: rbx = Interrupt Vector
   107 00005C88 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   108 00005C89 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   109 00005C8A 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   110 00005C8C B807F00000          <1>     mov eax, 0F007h
   111 00005C91 CD35                <1>     int 35h
   112 00005C93 5A                  <1>     pop rdx
   113 00005C94 58                  <1>     pop rax
   114                              <1>     return
    18                              <2> %%_ret:
    19 00005C95 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   115                              <1> 
   116                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   117                              <1> ;Returns ptr to user regs in rsi
   118 00005C96 488B35(5DC40300)    <1>     mov rsi, qword [oldRSP]
   119                              <1>     return
    18                              <2> %%_ret:
    19 00005C9D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> walkDPBchain:
   122                              <1> ;Called with al = 0 based drive number
   123                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   124 00005C9E 488B35(47C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   125                              <1> .walk:
   126 00005CA5 4881FEFFFFFFFF      <1>     cmp rsi, -1
   127 00005CAC 740A                <1>     je .exitBad
   128 00005CAE 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   129 00005CB0 7407                <1>     je .exit    ;Drive found
   130 00005CB2 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   131 00005CB6 EBED                <1>     jmp short .walk
   132                              <1> .exitBad:
   133 00005CB8 F9                  <1>     stc
   134                              <1> .exit:
   135                              <1>     return
    18                              <2> %%_ret:
    19 00005CB9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> setDrive:   
   137                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   138                              <1> ;Input: al = 1-based drive number
   139                              <1> ;Output: al = 0-based drive number
   140                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   141                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   142                              <1> ;            set.
   143 00005CBA E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   144 00005CBF 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   145 00005CC1 56                  <1>     push rsi
   146 00005CC2 488B35(F0C60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   147 00005CC9 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   148 00005CCF 5E                  <1>     pop rsi
   149 00005CD0 7401                <1>     jz .exit
   150 00005CD2 F9                  <1>     stc
   151                              <1> .exit:
   152                              <1>     return
    18                              <2> %%_ret:
    19 00005CD3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> 
   154                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   155                              <1> ;Allows a redirector or subst/join to build a CDS
   156                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   157                              <1> ; volumes, that are made at system boot.
   158                              <1> ;Input: al = Drive Letter for drive
   159                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   160                              <1> ;Output: rdi = newly filled in workingCDS
   161                              <1> ;CF=NC => CDS valid and has a DPB
   162                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   163 00005CD4 50                  <1>     push rax
   164 00005CD5 2C40                <1>     sub al, "A"-1
   165 00005CD7 3A05(7BC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   166 00005CDD 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   167 00005CE4 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   168 00005CEA 58                  <1>     pop rax
   169 00005CEB 7235                <1>     jb .exit    ;Exit with CF=CY
   170 00005CED 50                  <1>     push rax
   171 00005CEE 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   172 00005CF3 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   173 00005CF5 58                  <1>     pop rax
   174 00005CF6 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   175 00005CFC C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   176 00005D03 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   177 00005D0B 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   178                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   179 00005D11 50                  <1>     push rax
   180 00005D12 56                  <1>     push rsi
   181 00005D13 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   182 00005D15 E884FFFFFF          <1>     call walkDPBchain
   183 00005D1A 7204                <1>     jb .skipSettingDPB
   184 00005D1C 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   185                              <1> .skipSettingDPB:
   186 00005D20 5E                  <1>     pop rsi
   187 00005D21 58                  <1>     pop rax
   188                              <1> .exit:
   189                              <1>     return
    18                              <2> %%_ret:
    19 00005D22 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   190                              <1> 
   191                              <1> getCDS:     ;Int 4Fh AX=1219h
   192                              <1> ;Gets the device DPB and saves it in the DOS variable
   193                              <1> ;This can be called to get CDS for network drives too!
   194                              <1> ;Input: al = 1 based drive number
   195                              <1> ;Sets workingCDS var with the CDS for the device. 
   196                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   197 00005D23 84C0                <1>     test al, al
   198 00005D25 7508                <1>     jnz .skip
   199 00005D27 8A05(14C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   200 00005D2D FEC0                <1>     inc al
   201                              <1> .skip:
   202 00005D2F FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   203 00005D31 56                  <1>     push rsi
   204 00005D32 C605(EDC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   205 00005D39 F605(E0C60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   206 00005D40 7423                <1>     jz .physDrive
   207                              <1>     ;Invokation via 21/5D00
   208 00005D42 50                  <1>     push rax
   209 00005D43 57                  <1>     push rdi
   210 00005D44 488D3D(5CC60300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   211 00005D4B 48893D(F0C60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   212 00005D52 0441                <1>     add al, "A" ;Convert to a drive letter
   213 00005D54 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   214 00005D59 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   215 00005D5F 5F                  <1>     pop rdi
   216 00005D60 58                  <1>     pop rax
   217 00005D61 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   218 00005D63 EB17                <1>     jmp short .exitOk   ;All oki
   219                              <1> .physDrive:
   220 00005D65 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   221 00005D6A 7208                <1>     jc .exitBad
   222 00005D6C 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   223 00005D72 7508                <1>     jnz .exitOk ;Exit with flag cleared
   224                              <1>     ;Else Return to unknown error locus
   225                              <1> .exitBad:
   226 00005D74 C605(EDC30300)01    <1>     mov byte [errorLocus], eLocUnk
   227                              <1> .exitBad1:
   228 00005D7B F9                  <1>     stc
   229                              <1> .exitOk:
   230 00005D7C 5E                  <1>     pop rsi
   231                              <1>     return
    18                              <2> %%_ret:
    19 00005D7D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   234                              <1>     ;Gets the CDS for the current drive in al
   235                              <1>     ;Input: al = Drive number, 0 = A ...
   236                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   237                              <1>     ;        CF=CY => al not valid
   238 00005D7E 3A05(7CC00300)      <1>     cmp al, byte [lastdrvNum]
   239 00005D84 7202                <1>     jb .ctn
   240 00005D86 F9                  <1>     stc 
   241                              <1>     return
    18                              <2> %%_ret:
    19 00005D87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> .ctn:
   243 00005D88 50                  <1>     push rax
   244 00005D89 52                  <1>     push rdx
   245 00005D8A 0FB6C0              <1>     movzx eax, al
   246 00005D8D 48BE5B000000000000- <1>     mov rsi, cds_size
   246 00005D96 00                  <1>
   247 00005D97 31D2                <1>     xor edx, edx
   248 00005D99 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   249 00005D9B 488B35(69C00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   250 00005DA2 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   251 00005DA5 488935(F0C60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   252 00005DAC 5A                  <1>     pop rdx
   253 00005DAD 58                  <1>     pop rax
   254 00005DAE F8                  <1>     clc
   255                              <1>     return
    18                              <2> %%_ret:
    19 00005DAF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> 
   257                              <1> 
   258                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   259                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   260                              <1> ;Input: AL = Char to normalise.
   261                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   262                              <1> ;If path separator, set ZF=ZE
   263 00005DB0 3C5C                <1>     cmp al, "\"
   264 00005DB2 7406                <1>     je .exit
   265 00005DB4 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   266 00005DB6 7502                <1>     jne .exit
   267 00005DB8 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   268                              <1> .exit:
   269                              <1>     return
    18                              <2> %%_ret:
    19 00005DBA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> uppercaseCharAtPtr:
   272                              <1> ;Get the char pointed to by rsi and then fall
   273 00005DBB AC                  <1>     lodsb
   274                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   275                              <1> ;Convert a lowercase char to uppercase
   276                              <1> ; Leave alone uppercase chars and invalid chars
   277                              <1> ;Input: al = Char to convert to uppercase
   278                              <1> ;Output: al = Processed char
   279 00005DBC 53                  <1>     push rbx
   280 00005DBD 3C61                <1>     cmp al, "a"
   281 00005DBF 7214                <1>     jb .exit
   282 00005DC1 3C7A                <1>     cmp al, "z"
   283 00005DC3 7702                <1>     ja .checkExt
   284 00005DC5 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   285                              <1> .checkExt:
   286 00005DC7 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   287 00005DC9 720A                <1>     jb .exit
   288 00005DCB 2C80                <1>     sub al, 80h ;Turn into table offset
   289 00005DCD 488B1D5AA2FFFF      <1>     mov rbx, qword [ctryTbl + countryStruc.mapaddr]    ;Get ptr to extAsciiTable
   290 00005DD4 D7                  <1>     xlatb   ;Get converted extended byte into al
   291                              <1> .exit:
   292 00005DD5 50                  <1>     push rax    ;Save al temporarily
   293 00005DD6 488D1D74A4FFFF      <1>     lea rbx, asciiCharProperties
   294 00005DDD D7                  <1>     xlatb   ;Get the signature in al
   295 00005DDE A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   296 00005DE0 58                  <1>     pop rax
   297 00005DE1 5B                  <1>     pop rbx
   298                              <1>     return
    18                              <2> %%_ret:
    19 00005DE2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   299                              <1> 
   300                              <1> strlen: ;Int 4Fh, AX=1212h
   301                              <1> ;Gets the length of a ASCIIZ string
   302                              <1> ;Input: rdi = Source buffer
   303                              <1> ;Output: ecx = Length of string
   304 00005DE3 50                  <1>     push rax
   305 00005DE4 57                  <1>     push rdi
   306 00005DE5 30C0                <1>     xor al, al
   307 00005DE7 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   308 00005DE9 FFC9                <1>     dec ecx ;rcx = -1
   309 00005DEB F2AE                <1>     repne scasb
   310 00005DED F7D1                <1>     not ecx
   311 00005DEF 5F                  <1>     pop rdi
   312 00005DF0 58                  <1>     pop rax
   313                              <1>     return
    18                              <2> %%_ret:
    19 00005DF1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   314                              <1> 
   315                              <1> strcpy:
   316                              <1> ;Copies a null terminated string from rsi to rdi
   317 00005DF2 AC                  <1>     lodsb
   318 00005DF3 AA                  <1>     stosb
   319 00005DF4 84C0                <1>     test al, al
   320                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005DF6 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   321 00005DF8 EBF8                <1>     jmp short strcpy
   322                              <1> 
   323                              <1> strcmp:
   324                              <1> ;Compares two ASCIIZ strings for equality.
   325                              <1> ;Input: rsi = First string
   326                              <1> ;       rdi = Second string
   327                              <1> ;       ecx = Number of bytes to compare
   328                              <1> ;Output: ZF=ZE => Equal
   329                              <1> ;        ZF=NZ => Not equal
   330 00005DFA 56                  <1>     push rsi
   331 00005DFB 57                  <1>     push rdi
   332 00005DFC F3A6                <1>     repe cmpsb
   333 00005DFE 5F                  <1>     pop rdi
   334 00005DFF 5E                  <1>     pop rsi
   335                              <1>     return
    18                              <2> %%_ret:
    19 00005E00 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   336                              <1> 
   337                              <1> 
   338                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   339                              <1> ;Converts lowercase to uppercase and / to "\"
   340                              <1> ;Input: rsi = Source buffer
   341                              <1> ;       rdi = Buffer to place normalised path
   342 00005E01 50                  <1>     push rax
   343 00005E02 56                  <1>     push rsi
   344 00005E03 57                  <1>     push rdi
   345                              <1> .scan:
   346 00005E04 AC                  <1>     lodsb
   347 00005E05 84C0                <1>     test al, al
   348 00005E07 740D                <1>     jz .exit
   349 00005E09 E8A2FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   350 00005E0E E8A9FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   351 00005E13 AA                  <1>     stosb
   352 00005E14 EBEE                <1>     jmp short .scan
   353                              <1> .exit:
   354 00005E16 5F                  <1>     pop rdi
   355 00005E17 5E                  <1>     pop rsi
   356 00005E18 58                  <1>     pop rax
   357                              <1>     return
    18                              <2> %%_ret:
    19 00005E19 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   358                              <1> 
   359                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   360                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   361                              <1> ;Input: rsi = One ASCIIZ pathname
   362                              <1> ;       rdi = Second ASCIIZ pathname
   363                              <1> ;Return:
   364                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   365 00005E1A 50                  <1>     push rax
   366 00005E1B 56                  <1>     push rsi
   367 00005E1C 57                  <1>     push rdi
   368                              <1> .scan:
   369 00005E1D 8A06                <1>     mov al, byte [rsi]
   370 00005E1F 84C0                <1>     test al, al
   371 00005E21 7424                <1>     jz .endOfString
   372 00005E23 8A27                <1>     mov ah, byte [rdi]
   373 00005E25 E886FFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   374 00005E2A 7410                <1>     jz .pathseps
   375 00005E2C 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   376 00005E30 38E0                <1>     cmp al, ah
   377 00005E32 7515                <1>     jnz .exit
   378                              <1> .nextChar:
   379 00005E34 48FFC6              <1>     inc rsi
   380 00005E37 48FFC7              <1>     inc rdi
   381 00005E3A EBE1                <1>     jmp short .scan
   382                              <1> .pathseps:
   383 00005E3C 86E0                <1>     xchg ah, al
   384 00005E3E E86DFFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   385 00005E43 7504                <1>     jnz .exit
   386 00005E45 EBED                <1>     jmp short .nextChar ;Else get the next chars
   387                              <1> .endOfString:
   388 00005E47 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   389                              <1> .exit:
   390 00005E49 5F                  <1>     pop rdi
   391 00005E4A 5E                  <1>     pop rsi
   392 00005E4B 58                  <1>     pop rax
   393                              <1>     return
    18                              <2> %%_ret:
    19 00005E4C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   394                              <1> checkPathspecOK:
   395                              <1> ;Input:
   396                              <1> ;rsi -> points to a path to verify if it is ok.
   397                              <1> ;Output:
   398                              <1> ;CF=NC => The path is totally clean and ok to use.
   399                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   400                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   401                              <1> ; and depending on method of invokation and caller, may be permissable.
   402                              <1> ;We accept lc and uc characters in this check function.
   403 00005E4D 50                  <1>     push rax
   404 00005E4E 53                  <1>     push rbx    ;Use rbx as the return flag status
   405 00005E4F 56                  <1>     push rsi
   406 00005E50 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   407                              <1> 
   408                              <1>     ;Start by getting the length of the ASCIIZ string.
   409 00005E52 51                  <1>     push rcx
   410 00005E53 57                  <1>     push rdi
   411 00005E54 4889F7              <1>     mov rdi, rsi
   412 00005E57 E887FFFFFF          <1>     call strlen
   413 00005E5C 81F940000000        <1>     cmp ecx, 64    ;Check
   414 00005E62 5F                  <1>     pop rdi
   415 00005E63 59                  <1>     pop rcx
   416 00005E64 776E                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   417                              <1>     ;First we verify if our path is relative or canonical (absolute)
   418 00005E66 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   419 00005E69 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   420 00005E6D 7416                <1>     je .netName
   421 00005E6F 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   422 00005E73 7410                <1>     je .netName
   423 00005E75 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   424 00005E78 7412                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   425                              <1>     ;Here if relative
   426 00005E7A F605(E0C60300)FF    <1>     test byte [dosInvoke], -1
   427 00005E81 7551                <1>     jnz .badExit    ;If this is -1, server invoke.
   428 00005E83 EB1F                <1>     jmp short .okToScan
   429                              <1> .netName:
   430 00005E85 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the \    jmp short .okToScan
   432                              <1> .diskPath:
   433 00005E8C 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   434 00005E93 F605(E0C60300)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   435 00005E9A 7408                <1>     jz .okToScan
   436 00005E9C AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   437 00005E9D E80EFFFFFF          <1>     call swapPathSeparator
   438 00005EA2 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   439                              <1> .okToScan:
   440 00005EA4 AC                  <1>     lodsb   
   441 00005EA5 84C0                <1>     test al, al ;End of path char?
   442 00005EA7 7430                <1>     jz .exit
   443 00005EA9 E802FFFFFF          <1>     call swapPathSeparator
   444 00005EAE 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   445 00005EB0 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   446 00005EB2 7411                <1>     je .wcFound
   447 00005EB4 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   448 00005EB6 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   449                              <1>     ;Else we check that the char in al is an acceptable char
   450 00005EB8 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   451 00005EBA 74E8                <1>     je .okToScan
   452 00005EBC E831000000          <1>     call checkCharValid
   453 00005EC1 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   454 00005EC3 EBDF                <1>     jmp short .okToScan
   455                              <1> .wcFound:
   456 00005EC5 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   457 00005ECA EBD8                <1>     jmp short .okToScan
   458                              <1> .wcCheck:
   459                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   460 00005ECC F7C340000000        <1>     test ebx, 40h
   461 00005ED2 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   462                              <1>     ;Else fall through in error
   463                              <1> .badExit:
   464 00005ED4 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   465                              <1> .exit:
   466 00005ED9 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   467 00005EDA 9D                  <1>     popfq
   468 00005EDB 5E                  <1>     pop rsi
   469 00005EDC 5B                  <1>     pop rbx
   470 00005EDD 58                  <1>     pop rax
   471                              <1>     return
    18                              <2> %%_ret:
    19 00005EDE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   472                              <1> 
   473                              <1> scanPathWC:
   474                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   475                              <1> ; even in the final path componant.
   476                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   477                              <1> ;Output: CF=NC => No wildcards present
   478                              <1> ;        CF=CY => Wildcards found
   479 00005EDF 50                  <1>     push rax
   480 00005EE0 56                  <1>     push rsi
   481                              <1> .scan:
   482 00005EE1 AC                  <1>     lodsb
   483 00005EE2 84C0                <1>     test al, al
   484 00005EE4 7409                <1>     jz .exit
   485 00005EE6 3C3F                <1>     cmp al, "?"
   486 00005EE8 7404                <1>     je .wcFnd
   487 00005EEA 3C2A                <1>     cmp al, "*"
   488 00005EEC 75F3                <1>     jne .scan
   489                              <1> .wcFnd:
   490 00005EEE F9                  <1>     stc
   491                              <1> .exit:
   492 00005EEF 5E                  <1>     pop rsi
   493 00005EF0 58                  <1>     pop rax
   494                              <1>     return
    18                              <2> %%_ret:
    19 00005EF1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   495                              <1> 
   496                              <1> checkCharValid:
   497                              <1> ;If ZF=ZE => Invalid Char
   498                              <1> ;If ZF=NZ => Valid Char
   499 00005EF2 51                  <1>     push rcx
   500 00005EF3 57                  <1>     push rdi
   501 00005EF4 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   502 00005EF9 488D3DA1A2FFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   503 00005F00 F2AE                <1>     repne scasb ;Scan. Stop when equal
   504 00005F02 5F                  <1>     pop rdi
   505 00005F03 59                  <1>     pop rcx
   506                              <1>     return
    18                              <2> %%_ret:
    19 00005F04 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   507                              <1> 
   508                              <1> 
   509                              <1> skipSpacesAndTabs:
   510                              <1> ;Input: rsi -> String 
   511                              <1> ;Output: rsi -> First non Space or Tab type char
   512 00005F05 AC                  <1>     lodsb
   513 00005F06 E815000000          <1>     call isCharSpaceType
   514 00005F0B 74F8                <1>     jz skipSpacesAndTabs
   515 00005F0D 48FFCE              <1>     dec rsi
   516                              <1>     return
    18                              <2> %%_ret:
    19 00005F10 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   517                              <1> 
   518                              <1> isCharDelimType:
   519                              <1> ;Input: al = Char to check properties of
   520                              <1> ;Output:    ZF=NZ => Char not name delimiter
   521                              <1> ;           ZF=ZE => Char delimiter
   522 00005F11 50                  <1>     push rax
   523 00005F12 53                  <1>     push rbx
   524 00005F13 488D1D37A3FFFF      <1>     lea rbx, asciiCharProperties
   525 00005F1A D7                  <1>     xlatb
   526 00005F1B A802                <1>     test al, 2
   527 00005F1D 5B                  <1>     pop rbx
   528 00005F1E 58                  <1>     pop rax
   529                              <1>     return
    18                              <2> %%_ret:
    19 00005F1F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> isCharSpaceType:
   532                              <1> ;Input: al = Char to check properties of
   533                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   534                              <1> ;           ZF=ZE => Char Space or Tab
   535 00005F20 50                  <1>     push rax
   536 00005F21 53                  <1>     push rbx
   537 00005F22 488D1D28A3FFFF      <1>     lea rbx, asciiCharProperties
   538 00005F29 D7                  <1>     xlatb
   539 00005F2A A804                <1>     test al, 4
   540 00005F2C 5B                  <1>     pop rbx
   541 00005F2D 58                  <1>     pop rax
   542                              <1>     return
    18                              <2> %%_ret:
    19 00005F2E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   543                              <1> 
   544                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   545                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   546                              <1> ;Input: rsi = One pointer
   547                              <1> ;       rdi = Second pointer
   548                              <1> ;Output: ZF=ZE if equal
   549                              <1> ;        ZF=NZ if not
   550 00005F2F 4839FE              <1>     cmp rsi, rdi
   551                              <1>     return
    18                              <2> %%_ret:
    19 00005F32 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> checkPathNet:
   554                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   555                              <1> ;Output: ZF=ZE => Path is a net path
   556                              <1> ;        ZF=NZ => Path is not a net path
   557 00005F33 50                  <1>     push rax
   558 00005F34 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   559 00005F37 E874FEFFFF          <1>     call swapPathSeparator
   560 00005F3C 7505                <1>     jnz .exit
   561 00005F3E E86DFEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   562                              <1> .exit:
   563 00005F43 58                  <1>     pop rax
   564                              <1>     return
    18                              <2> %%_ret:
    19 00005F44 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> getCharDevDriverPtr:
   567                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   568                              <1> ;Input: rax = Device Driver name (space padded)
   569                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   570 00005F45 488D3D(7EC00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   571                              <1> .lp:
   572 00005F4C 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   573                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005F50 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   574 00005F52 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   575 00005F55 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   576 00005F5C 75EE                <1>     jne .lp ;If not loop
   577 00005F5E F9                  <1>     stc ;Else bad exit
   578                              <1>     return
    18                              <2> %%_ret:
    19 00005F5F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   579                              <1> 
    40                                  %include "./Source/Kernel/dosMain.asm"
    41                              <1> ;-----------------------------------:
    42                              <1> ;        Main Kernel dispatch       :
    43                              <1> ;            and routines           :
    44                              <1> ;-----------------------------------:
    45                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    46                              <1> ;ah = Function number, all other registers have various meanings
    47                              <1>  %if DEBUG
    48                              <1>     ;Entry function
    49                              <1>     debugEnterM
    50                              <1>     lea rbp, .l0000
    51                              <1>     call debPrintNullString
    52                              <1>     call debPrintFunctionName
    53                              <1>     jmp short .l0001
    54                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    55                              <1> .l0001:    
    56                              <1>     debugExitM
    57                              <1>     %endif
    58 00005F60 FA                  <1>     cli ;Halt external interrupts
    59 00005F61 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    60 00005F62 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    61 00005F65 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    62                              <1>     ;Cherry pick functions
    63 00005F6B 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    64 00005F6E 722C                <1>     jb .fsbegin   ;If below skip these checks
    65 00005F70 0F847C020000        <1>     je ctrlBreakCheck
    66 00005F76 80FC64              <1>     cmp ah, 64h
    67 00005F79 0F84BC020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    68 00005F7F 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    69 00005F81 80FC51              <1>     cmp ah, 51h
    70 00005F84 0F849F020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    71 00005F8A 80FC62              <1>     cmp ah, 62h
    72 00005F8D 0F849F020000        <1>     je getPSPaddr          ;Calls the above function
    73 00005F93 80FC50              <1>     cmp ah, 50h
    74 00005F96 0F8484020000        <1>     je setCurrProcessID
    75                              <1> .fsbegin:
    76 00005F9C E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    77 00005FA1 48891D(65C40300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    78 00005FA8 66C705(26C40300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    78 00005FB0 00                  <1>
    79 00005FB1 488B05(5DC40300)    <1>     mov rax, qword [oldRSP]
    80 00005FB8 488905(4DC40300)    <1>     mov qword [oldoldRSP], rax
    81 00005FBF FE05(EBC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    82 00005FC5 488925(5DC40300)    <1>     mov qword [oldRSP], rsp
    83                              <1> ;Network related variable resetting
    84 00005FCC C605(E0C60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    85                              <1> ;Here, we want to save oldRSP in the callers PSP
    86 00005FD3 803D(EBC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    87 00005FDA 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    88 00005FDC 488B05(02C40300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    89 00005FE3 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    90                              <1> .fsb1:
    91 00005FE7 58                  <1>     pop rax     ;Get old rax back
    92 00005FE8 50                  <1>     push rax    ;and push it back onto the stack
    93                              <1> .abortEP:
    94                              <1> .charFun0CEP:
    95                              <1> .serverEP:
    96 00005FE9 488D25(E8CC0300)    <1>     lea rsp, critStakTop
    97 00005FF0 FB                  <1>     sti         ;Reenable interrupts
    98                              <1> 
    99 00005FF1 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
   100 00005FF3 881D(76C40300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   101 00005FF9 C605(77C40300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   102 00006000 881D(4CC40300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   103 00006006 881D(6DC40300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   104                              <1> 
   105 0000600C 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   106 0000600D 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   107 0000600F D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   108 00006011 488D05B9A2FFFF      <1>     lea rax, kDispTbl
   109 00006018 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   110 0000601B 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   111 0000601F 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   112 00006022 58                  <1>     pop rax
   113                              <1> 
   114 00006023 84E4                <1>     test ah, ah     ;Simple Terminate function?
   115 00006025 741C                <1>     jz .fddiskOp
   116 00006027 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   117 0000602A 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   118 0000602C 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   119 0000602F 7712                <1>     ja .fddiskOp
   120                              <1> ;Char operations here
   121 00006031 F605(EAC30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   122 00006038 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   123 0000603A 488D25(77D30300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   124 00006041 EB40                <1>     jmp short .fdGoToFunction
   125                              <1> .fddiskOp:
   126                              <1>     ;Disk operations go here
   127                              <1>     ;Save rax on entry to a disk funciton
   128 00006043 488905(16C40300)    <1>     mov qword [oldRAX], rax
   129                              <1>     ;Clear up error info
   130 0000604A C605(EDC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   131 00006051 C605(EAC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   132 00006058 C605(ECC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   133                              <1> 
   134 0000605F 50                  <1>     push rax
   135 00006060 B482                <1>     mov ah, 82h ;Cancel all critical section!
   136 00006062 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   137 00006064 58                  <1>     pop rax
   138                              <1> 
   139 00006065 C605(77C40300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   140 0000606C 488D25(B7D90300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   141 00006073 F605(15C40300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   142 0000607A 7407                <1>     jz .fdGoToFunction
   143                              <1> ; HANDLE CTRL+BREAK HERE!
   144 0000607C 50                  <1>     push rax
   145 0000607D E848C5FFFF          <1>     call checkBreak   ; Check for a ^C
   146 00006082 58                  <1>     pop rax
   147                              <1> .fdGoToFunction:
   148 00006083 48871D(65C40300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   149                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   150                              <1>     ;
   151                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   152                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   153                              <1>     ;
   154                              <1>     %if DEBUG && REGS
   155                              <1>     ;Print stack if necessary function
   156                              <1>     debugEnterM
   157                              <1>     call debPrintDOSStack
   158                              <1>     debugExitM
   159                              <1>     %endif
   160 0000608A FF15(65C40300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   161                              <1>     %if DEBUG
   162                              <1>     ;Entry function
   163                              <1>     debugEnterM
   164                              <1>     lea rbp, .l0002
   165                              <1>     call debPrintNullString
   166                              <1>     jmp short .l0003
   167                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   168                              <1> .l0003:    
   169                              <1>     debugExitM
   170                              <1>     %endif
   171                              <1>     %if DEBUG && REGS
   172                              <1>     ;Exit function
   173                              <1>     debugEnterM
   174                              <1>     call debPrintDOSStack
   175                              <1>     debugExitM
   176                              <1>     %endif
   177                              <1> .fdExit:
   178 00006090 FA                  <1>     cli     ;Redisable interrupts
   179 00006091 FE0D(EBC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   180 00006097 488B25(5DC40300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   181 0000609E 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   182 000060A1 488B05(4DC40300)    <1>     mov rax, qword [oldoldRSP]
   183 000060A8 488905(5DC40300)    <1>     mov qword [oldRSP], rax
   184 000060AF E806000000          <1>     call dosPopRegs  ;Pop the frame
   185 000060B4 48CF                <1>     iretq
   186                              <1> .fdExitBad:
   187 000060B6 30C0                <1>     xor al, al
   188                              <1> defaultIretq:
   189 000060B8 48CF                <1>     iretq
   190                              <1> dosPopRegs:
   191 000060BA 8F05(55C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   192 000060C0 58                  <1>     pop rax
   193 000060C1 5B                  <1>     pop rbx
   194 000060C2 59                  <1>     pop rcx
   195 000060C3 5A                  <1>     pop rdx
   196 000060C4 5E                  <1>     pop rsi
   197 000060C5 5F                  <1>     pop rdi
   198 000060C6 5D                  <1>     pop rbp
   199 000060C7 4158                <1>     pop r8
   200 000060C9 4159                <1>     pop r9
   201 000060CB FF25(55C40300)      <1>     jmp qword [dosReturn]
   202                              <1> dosPushRegs:
   203 000060D1 8F05(55C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   204 000060D7 4151                <1>     push r9
   205 000060D9 4150                <1>     push r8
   206 000060DB 55                  <1>     push rbp
   207 000060DC 57                  <1>     push rdi
   208 000060DD 56                  <1>     push rsi
   209 000060DE 52                  <1>     push rdx
   210 000060DF 51                  <1>     push rcx
   211 000060E0 53                  <1>     push rbx
   212 000060E1 50                  <1>     push rax
   213 000060E2 FF25(55C40300)      <1>     jmp qword [dosReturn]
   214                              <1> dosCrit1Enter:
   215                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 000060E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216 000060E9 B801800000          <1>     mov eax, 8001h
   217 000060EE CD4A                <1>     int 4ah
   218 000060F0 58                  <1>     pop rax
   219                              <1>     return
    18                              <2> %%_ret:
    19 000060F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   220                              <1> dosCrit1Exit:
   221                              <1>     return
    18                              <2> %%_ret:
    19 000060F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222 000060F3 B801810000          <1>     mov eax, 8101h
   223 000060F8 CD4A                <1>     int 4ah
   224 000060FA 58                  <1>     pop rax
   225                              <1>     return
    18                              <2> %%_ret:
    19 000060FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   226                              <1> dosCrit2Enter:
   227                              <1>     return
    18                              <2> %%_ret:
    19 000060FC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228 000060FD B802800000          <1>     mov eax, 8002h
   229 00006102 CD4A                <1>     int 4ah
   230 00006104 58                  <1>     pop rax
   231                              <1>     return
    18                              <2> %%_ret:
    19 00006105 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> dosCrit2Exit:
   233                              <1>     return
    18                              <2> %%_ret:
    19 00006106 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234 00006107 B802810000          <1>     mov eax, 8102h
   235 0000610C CD4A                <1>     int 4ah
   236 0000610E 58                  <1>     pop rax
   237                              <1>     return
    18                              <2> %%_ret:
    19 0000610F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> ;FCB specific returns
   240                              <1> fcbGoodExit:
   241                              <1> ;Preserve the carry flag on entry to DOS
   242 00006110 30C0                <1>     xor al, al ;Set return code al = 0
   243                              <1>     return
    18                              <2> %%_ret:
    19 00006112 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> fcbErrExit:
   245                              <1> ;Preserve the carry flag on entry to DOS
   246                              <1> ;Input: eax = Extended error code to store in SDA 
   247 00006113 E836000000          <1>     call xLatError
   248 00006118 B0FF                <1>     mov al, -1  ;Set return code al = -1
   249 0000611A F9                  <1>     stc
   250                              <1>     return
    18                              <2> %%_ret:
    19 0000611B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> ;Handle and General DOS Returns
   253                              <1> ;All good exits destroy AT LEAST ax 
   254                              <1> extGoodExit2:
   255                              <1> ;Good exit with an extended return code in eax
   256 0000611C E875FBFFFF          <1>     call getUserRegs
   257 00006121 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   258 00006123 EB08                <1>     jmp short extGoodExit.extGoodCommon
   259                              <1> extGoodExit:
   260                              <1> ;Good exit
   261                              <1> ;Return code in ax
   262 00006125 E86CFBFFFF          <1>     call getUserRegs
   263 0000612A 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   264                              <1> .extGoodCommon:
   265 0000612D 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   266 00006131 F8                  <1>     clc
   267                              <1>     return
    18                              <2> %%_ret:
    19 00006132 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   268                              <1> extErrExit:
   269                              <1> ;The extended error exit from DOS
   270                              <1> ;Jumped to with AL=Extended error code
   271                              <1> ;Can be called too.
   272                              <1> ;Input: al = Extended error code
   273                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   274                              <1> ;   Returns with: eax = xLat Error
   275                              <1> ;                 rsi = callerFrame
   276 00006133 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   277 00006136 E813000000          <1>     call xLatError
   278 0000613B E891000000          <1>     call checkFail
   279 00006140 E851FBFFFF          <1>     call getUserRegs
   280 00006145 668906              <1>     mov word [rsi + callerFrame.rax], ax
   281 00006148 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   282 0000614C F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   283                              <1>     return
    18                              <2> %%_ret:
    19 0000614D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   284                              <1> xLatError:
   285                              <1> ;Translates the error code given in ax and sets error code in the var
   286                              <1> ; Input: ax = Extended Error Code
   287                              <1> ; Output: ax = Potentially translated Error Code
   288                              <1> ;         [errorExCde] = Original Error Code
   289                              <1> ;Preserves all registers except ax
   290                              <1> ;AH is always returned as 0
   291 0000614E 53                  <1>     push rbx
   292 0000614F 51                  <1>     push rcx
   293 00006150 56                  <1>     push rsi
   294 00006151 668905(EEC30300)    <1>     mov word [errorExCde], ax
   295 00006158 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   296 0000615A 488D35309FFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   297                              <1> .readEntry:
   298 00006161 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   299 00006163 3CFF                <1>     cmp al, -1
   300 00006165 741F                <1>     je .skipXlat
   301 00006167 3A05(17C40300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   302 0000616D 7408                <1>     je .found
   303                              <1>     ;Here, entry not found, goto next entry
   304 0000616F 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   305 00006172 4801C6              <1>     add rsi, rax    ;Goto next entry
   306 00006175 EBEA                <1>     jmp short .readEntry
   307                              <1> .found:
   308                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   309 00006177 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   310                              <1> .mainSearch:
   311 0000617A AC                  <1>     lodsb   ;Get one byte into al
   312 0000617B 38C3                <1>     cmp bl, al  ;Check against the error code
   313 0000617D 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   314 0000617F FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   315 00006181 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   316                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   317 00006183 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   318                              <1> .skipXlat:
   319 00006186 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   320 00006188 5E                  <1>     pop rsi
   321 00006189 59                  <1>     pop rcx
   322 0000618A 5B                  <1>     pop rbx
   323                              <1>     return
    18                              <2> %%_ret:
    19 0000618B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> setErrorVars:
   325                              <1> ;Looks up the error code in the variable and sets the other error vars
   326                              <1> ;Called with the lookup table in rsi
   327                              <1> ;All regs preserved
   328 0000618C 50                  <1>     push rax
   329 0000618D 53                  <1>     push rbx
   330 0000618E 51                  <1>     push rcx
   331 0000618F 56                  <1>     push rsi
   332 00006190 0FB71D(EEC30300)    <1>     movzx ebx, word [errorExCde]
   333 00006197 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   334                              <1> .readEntry:
   335 0000619C AD                  <1>     lodsd   ;Read the dword table entry into eax
   336 0000619D 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   337 000061A2 7428                <1>     je .exit    
   338 000061A4 38D8                <1>     cmp al, bl  ;Compare the error codes
   339 000061A6 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   340 000061A8 D3E8                <1>     shr eax, cl
   341 000061AA 3CFF                <1>     cmp al, -1
   342 000061AC 7406                <1>     je .skipClass
   343 000061AE 8805(F1C30300)      <1>     mov byte [errorClass], al
   344                              <1> .skipClass:
   345 000061B4 D3E8                <1>     shr eax, cl
   346 000061B6 3CFF                <1>     cmp al, -1
   347 000061B8 7406                <1>     je .skipAct
   348 000061BA 8805(F0C30300)      <1>     mov byte [errorAction], al
   349                              <1> .skipAct:
   350 000061C0 D3E8                <1>     shr eax, cl
   351 000061C2 3CFF                <1>     cmp al, -1
   352 000061C4 7406                <1>     je .exit
   353 000061C6 8805(EDC30300)      <1>     mov byte [errorLocus], al
   354                              <1> .exit:
   355 000061CC 5E                  <1>     pop rsi
   356 000061CD 59                  <1>     pop rcx
   357 000061CE 5B                  <1>     pop rbx
   358 000061CF 58                  <1>     pop rax
   359                              <1>     return
    18                              <2> %%_ret:
    19 000061D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   360                              <1> checkFail:
   361                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   362                              <1> ; and swaps the var error code if so
   363 000061D1 803D(4CC40300)00    <1>     cmp byte [Int44Fail], 0
   364 000061D8 7509                <1>     jnz .skipFail
   365 000061DA 66C705(EEC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   365 000061E2 00                  <1>
   366                              <1> .skipFail:
   367 000061E3 56                  <1>     push rsi
   368 000061E4 488D35429FFFFF      <1>     lea rsi, extErrTbl
   369 000061EB E89CFFFFFF          <1>     call setErrorVars
   370 000061F0 5E                  <1>     pop rsi
   371                              <1>     return
    18                              <2> %%_ret:
    19 000061F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   372                              <1> ;========================================:
   373                              <1> ;      Reentrant Kernel Functions        :
   374                              <1> ;========================================:
   375                              <1> ctrlBreakCheck:    ;ah = 33h
   376 000061F2 84C0                <1>     test al, al
   377 000061F4 7508                <1>     jnz .cbcget  ;Get the state or other functions
   378 000061F6 8A15(15C40300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   379 000061FC 48CF                <1>     iretq
   380                              <1> .cbcget:
   381 000061FE 3C02                <1>     cmp al, 02h
   382 00006200 771A                <1>     ja .cbcBad
   383 00006202 740D                <1>     jz .cbcxchg ;Function 2
   384 00006204 52                  <1>     push rdx
   385 00006205 80E201              <1>     and dl, 1   ;Get only the bottom bit
   386 00006208 8815(15C40300)      <1>     mov byte [breakFlag], dl    ;Set the state
   387 0000620E 5A                  <1>     pop rdx
   388 0000620F 48CF                <1>     iretq
   389                              <1> .cbcxchg:
   390 00006211 80E201              <1>     and dl, 1
   391 00006214 8615(15C40300)      <1>     xchg byte [breakFlag], dl
   392 0000621A 48CF                <1>     iretq
   393                              <1> .cbcBad:
   394 0000621C B0FF                <1>     mov al, -1
   395 0000621E 48CF                <1>     iretq
   396                              <1> 
   397                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   398 00006220 48891D(02C40300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   399 00006227 48CF                <1>     iretq
   400                              <1> 
   401                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   402 00006229 488B15(02C40300)    <1>     mov rdx, qword [currentPSP]
   403 00006230 48CF                <1>     iretq
   404                              <1> 
   405                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   406 00006232 488B15(02C40300)    <1>     mov rdx, qword [currentPSP]
   407 00006239 48CF                <1>     iretq
   408                              <1> 
   409                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   410 0000623B 8805(C0D90300)      <1>     mov byte [lookahead], al    
   411 00006241 48CF                <1>     iretq
   412                              <1> 
   413                              <1> ;========================================:
   414                              <1> ;            Kernel Functions            :
   415                              <1> ;========================================:
   416                              <1> diskReset:         ;ah = 0Dh
   417                              <1> ;Flush all dirty buffers to disk
   418 00006243 E8A0FEFFFF          <1>     call dosCrit1Enter
   419 00006248 488B3D(61C00300)    <1>     mov rdi, qword [bufHeadPtr]
   420                              <1> .drCheckBuffer:
   421 0000624F F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   422 00006253 7407                <1>     jz .drGotoNextBuffer
   423                              <1> .drFlushBuffer:
   424 00006255 E866A6FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   425 0000625A 720C                <1>     jc .drExit
   426                              <1> .drGotoNextBuffer:
   427 0000625C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   428 0000625F 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   429 00006266 75E7                <1>     jne .drCheckBuffer
   430                              <1> .drExit:
   431 00006268 E885FEFFFF          <1>     call dosCrit1Exit
   432 0000626D B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   433 00006272 CD4F                <1>     int 4fh
   434                              <1>     return
    18                              <2> %%_ret:
    19 00006274 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> selectDisk:        ;ah = 0Eh
   437                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   438 00006275 88D0                <1>     mov al, dl
   439 00006277 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   440 00006279 E83CFAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   441 0000627E 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   442 00006280 8805(14C40300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   443                              <1> .skipSettingCurrent:
   444 00006286 0FB605(7CC00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   445                              <1>     return
    18                              <2> %%_ret:
    19 0000628D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   448 0000628E 8A05(14C40300)      <1>     mov al, byte [currentDrv]
   449                              <1>     return
    18                              <2> %%_ret:
    19 00006294 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> FATinfoDefault:    ;ah = 1Bh
   452 00006295 30D2                <1>     xor dl, dl
   453                              <1> FATinfoDevice:     ;ah = 1Ch
   454                              <1> ;Input: dl = 1 based drive number
   455                              <1> ;Output:
   456                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   457                              <1> ;cx = bytes per sector
   458                              <1> ;edx = total number of clusters
   459                              <1> ;rbx = Ptr to media ID byte
   460 00006297 88D0                <1>     mov al, dl  ;Move drive number into al
   461 00006299 E885FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   462 0000629E 7307                <1>     jnc .fidCDSFound
   463 000062A0 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   464 000062A5 EB2E                <1>     jmp short .error 
   465                              <1> .fidCDSFound:
   466 000062A7 E898F9FFFF          <1>     call getDiskData
   467 000062AC 7227                <1>     jc .error
   468                              <1> ;Now we have that:
   469                              <1> ;al = sectors per cluster
   470                              <1> ;ah = media ID byte
   471                              <1> ;ebx = total clusters
   472                              <1> ;cx = bytes per sector
   473                              <1> ;edx = number of available clusters
   474 000062AE E8E3F9FFFF          <1>     call getUserRegs
   475 000062B3 8825(74C70300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   476 000062B9 30E4                <1>     xor ah, ah
   477 000062BB 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   478 000062BE 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   479 000062C2 488D1D(74C70300)    <1>     lea rbx, mediaByte
   480 000062C9 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   481 000062CD 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   482                              <1> .badExit:
   483 000062D1 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   484                              <1>     return
    18                              <2> %%_ret:
    19 000062D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   485                              <1> .error:
   486 000062D5 E859FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   487 000062DA 66B8FFFF            <1>     mov ax, -1
   488 000062DE EBF1                <1>     jmp short .badExit
   489                              <1> 
   490                              <1> setIntVector:      ;ah = 25h
   491                              <1> ;Called with:
   492                              <1> ;   rdx = Pointer to interrupt handler
   493                              <1> ;   al = Interrupt number
   494 000062E0 50                  <1>     push rax    ;Preserve all registers in call
   495 000062E1 53                  <1>     push rbx
   496 000062E2 51                  <1>     push rcx
   497 000062E3 52                  <1>     push rdx
   498 000062E4 56                  <1>     push rsi
   499 000062E5 55                  <1>     push rbp
   500 000062E6 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   501 000062E8 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   502                              <1> ;First call to get default BIOS segement selector and attribute word
   503 000062EE 88C3                <1>     mov bl, al  ;Set interrupt number 
   504 000062F0 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   505 000062F5 CD35                <1>     int 35h
   506 000062F7 E89AF9FFFF          <1>     call getUserRegs
   507 000062FC 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   508 00006300 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   509 00006302 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   510                              <1> ;dx preserves the attribute word
   511 00006304 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   512 00006309 CD35                <1>     int 35h
   513 0000630B 5D                  <1>     pop rbp
   514 0000630C 5E                  <1>     pop rsi
   515 0000630D 5A                  <1>     pop rdx
   516 0000630E 59                  <1>     pop rcx
   517 0000630F 5B                  <1>     pop rbx
   518 00006310 58                  <1>     pop rax
   519                              <1>     return
    18                              <2> %%_ret:
    19 00006311 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   522 00006312 8805(B3C30300)      <1>     mov byte [verifyFlag], al
   523 00006318 8025(B3C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   524                              <1>     return
    18                              <2> %%_ret:
    19 0000631F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   525                              <1> getDOSversion:     ;ah = 30h
   526 00006320 E871F9FFFF          <1>     call getUserRegs
   527 00006325 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   528 00006327 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   529 0000632A 668B05CF9CFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   530 00006331 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   531                              <1>     return
    18                              <2> %%_ret:
    19 00006334 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   534                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   535 00006335 30D2                <1>     xor dl, dl
   536                              <1> getDeviceDPBptr:   ;ah = 32h
   537                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   538                              <1> ;On exit: rbx = DPB pointer
   539 00006337 88D0                <1>     mov al, dl
   540 00006339 E8E5F9FFFF          <1>     call getCDS
   541 0000633E 722C                <1>     jc .bad
   542 00006340 488B3D(F0C60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   543 00006347 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   544 0000634D 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   545                              <1>     ;Here ONLY if accessing critical Disk data structures
   546 0000634F E894FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   547 00006354 E89CF6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   548 00006359 E894FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   549 0000635E 720C                <1>     jc .bad
   550 00006360 E831F9FFFF          <1>     call getUserRegs
   551 00006365 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   552 00006369 30C0                <1>     xor al, al
   553                              <1>     return
    18                              <2> %%_ret:
    19 0000636B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   554                              <1> .bad:
   555 0000636C B0FF                <1>     mov al, -1
   556                              <1>     return
    18                              <2> %%_ret:
    19 0000636E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> getInDOSflagPtr:   ;ah = 34h
   559 0000636F 488D15(EBC30300)    <1>     lea rdx, inDOS
   560 00006376 E81BF9FFFF          <1>     call getUserRegs
   561 0000637B 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   562                              <1>     return
    18                              <2> %%_ret:
    19 0000637F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> getIntVector:      ;ah = 35h
   565                              <1> ;Called with:
   566                              <1> ;   al = Interrupt Number
   567                              <1> ;Returns:
   568                              <1> ;   rbx = Pointer to interrupt handler
   569 00006380 E803F9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   570 00006385 E80CF9FFFF          <1>     call getUserRegs
   571 0000638A 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   572 0000638E 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   573                              <1>     return
    18                              <2> %%_ret:
    19 00006390 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> getDiskFreeSpace:  ;ah = 36h
   576                              <1> ;Input: Drive number in dl (0 = Current)
   577                              <1> ;Output:    ax = sectors per cluster
   578                              <1> ;           ebx = number of free clusters
   579                              <1> ;           cx = bytes per sector
   580                              <1> ;           edx = total clusters on drive
   581 00006391 88D0                <1>     mov al, dl
   582 00006393 E88BF9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   583 00006398 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   584                              <1> ;Else, we at an error.
   585                              <1> ;Simply return with CY set and error code in al with extended error info
   586 0000639A B80F000000          <1>     mov eax, errBadDrv
   587 0000639F E88FFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   588                              <1>     ;extErrExit sets rsi to caller regs
   589 000063A4 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   590                              <1>     return
    18                              <2> %%_ret:
    19 000063A9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   591                              <1> .gdfsCDSFound:
   592 000063AA E895F8FFFF          <1>     call getDiskData
   593 000063AF 7219                <1>     jc .error
   594                              <1> ;Now we have that:
   595                              <1> ;al = sectors per cluster
   596                              <1> ;ah = media ID byte
   597                              <1> ;ebx = total clusters
   598                              <1> ;cx = bytes per sector
   599                              <1> ;edx = number of available clusters
   600 000063B1 E8E0F8FFFF          <1>     call getUserRegs
   601 000063B6 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   602 000063B8 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   603 000063BB 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   604 000063BF 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   605 000063C2 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   606                              <1> .badExit:
   607 000063C6 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   608                              <1>     return
    18                              <2> %%_ret:
    19 000063C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> .error:
   610 000063CA E864FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   611 000063CF 66B8FFFF            <1>     mov ax, -1
   612 000063D3 EBF1                <1>     jmp short .badExit
   613                              <1> 
   614                              <1> 
   615                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   616 000063D5 31C0                <1>     xor eax, eax
   617 000063D7 668705(12C40300)    <1>     xchg ax, word [errorLevel]
   618 000063DE E942FDFFFF          <1>     jmp extGoodExit
   619                              <1> 
   620                              <1> getSysVarsPtr:     ;ah = 52h
   621 000063E3 488D15(3FC00300)    <1>     lea rdx, sysVarsPtr
   622 000063EA E8A7F8FFFF          <1>     call getUserRegs
   623 000063EF 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   624                              <1>     return
    18                              <2> %%_ret:
    19 000063F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   625                              <1> 
   626                              <1> 
   627                              <1> ;AH = 53h - CREATE DPB
   628                              <1> createDPB:         ;generates a DPB from a given BPB
   629                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   630                              <1> ;This is done so that the other fields of the DPB can be recycled
   631                              <1> ;Input: rsi = ptr to the BPB
   632                              <1> ;       rbp = ptr to the DPB
   633                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   634                              <1> ;bMediaDescriptor
   635 000063F4 8A4615              <1>     mov al, byte [rsi + bpb.media]
   636 000063F7 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   637                              <1> ;dFirstFreeCluster
   638 000063FA C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   639                              <1> ;dNumberOfFreeClusters
   640 00006401 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   641                              <1> ;wBytesPerSector
   642 00006408 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   643 0000640C 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   644                              <1> ;bMaxSectorInCluster
   645 00006410 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   646 00006413 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   647 00006415 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   648                              <1> ;bSectorsPerClusterShift
   649 00006418 FEC0                <1>     inc al
   650 0000641A 30C9                <1>     xor cl, cl
   651                              <1> .cd2:
   652 0000641C D0E8                <1>     shr al, 1
   653 0000641E 7404                <1>     jz .cd3
   654 00006420 FEC1                <1>     inc cl
   655 00006422 EBF8                <1>     jmp short .cd2
   656                              <1> .cd3:
   657 00006424 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   658                              <1> ;wFAToffset, number of reserved sectors in partition
   659 00006427 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   660 0000642B 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   661                              <1> ;bNumberOfFATs
   662 0000642F 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   663 00006432 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   664                              <1> ;wNumberRootDirEntries
   665                              <1> ;Gets the number of 32 byte entries in the root directory
   666                              <1> ;Only valid for FAT 12/16
   667 00006435 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   668 00006439 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   669                              <1> ;dFATlength, get the FAT length
   670 0000643D 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   671 00006441 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   672 00006444 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   673 00006446 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   674 00006449 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   675                              <1> ;Complex cases below...
   676                              <1> ;dClusterHeapOffset, start sector of the data area
   677 0000644C 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   678 00006450 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   679 00006453 85C0                <1>     test eax, eax
   680 00006455 0F44C3              <1>     cmovz eax, ebx
   681                              <1> ;eax = FATsz
   682 00006458 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   683 0000645C 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   684 0000645F 85DB                <1>     test ebx, ebx
   685 00006461 0F44D9              <1>     cmovz ebx, ecx 
   686                              <1> ;ebx = TotSec
   687 00006464 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   688 00006467 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   689                              <1> .cd4:
   690 00006469 01C2                <1>     add edx, eax
   691 0000646B FEC9                <1>     dec cl
   692 0000646D 75FA                <1>     jnz .cd4
   693 0000646F 89D0                <1>     mov eax, edx    ;Store product in eax
   694 00006471 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   695 00006475 01D0                <1>     add eax, edx
   696                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   697 00006477 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   698 0000647B C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   699 0000647E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   700 00006482 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   701 00006483 89D0                <1>     mov eax, edx
   702 00006485 31D2                <1>     xor edx, edx
   703 00006487 F7F1                <1>     div ecx
   704 00006489 89C2                <1>     mov edx, eax
   705 0000648B 58                  <1>     pop rax
   706 0000648C 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   707                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   708                              <1>     ;aka eax = Start sector of the data area in volume
   709 0000648E 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   710                              <1> ;dClusterCount
   711 00006491 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   712 00006493 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   713 00006495 31D2                <1>     xor edx, edx
   714 00006497 BB01000000          <1>     mov ebx, 1
   715 0000649C 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   716 0000649F D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   717 000064A1 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   718 000064A3 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   719 000064A5 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   720                              <1> ;dFirstUnitOfRootDir
   721 000064A8 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   722 000064AD 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   723 000064B0 770F                <1>     ja .cd5
   724                              <1>     ;Else, we need to find the first sector of the root directory
   725                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   726 000064B2 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   727 000064B6 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   728                              <1> .cd51:
   729 000064BA 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   730 000064BD FFC9                <1>     dec ecx
   731 000064BF 75F9                <1>     jnz .cd51
   732                              <1> .cd5:
   733 000064C1 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   734                              <1> ;Exit epilogue
   735 000064C4 488B1D(5DC40300)    <1>     mov rbx, qword [oldRSP]
   736 000064CB 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   737                              <1>     %if DEBUG && DPBINFO
   738                              <1>     ;Print DPB 
   739                              <1>     debugEnterM
   740                              <1>     push rbp
   741                              <1>     lea rbp, .l0000
   742                              <1>     call debPrintNullString
   743                              <1>     pop rbp
   744                              <1>     call debDPBBPBptr
   745                              <1>     call debMakeDebuggerRespond
   746                              <1>     jmp short .l0001
   747                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   748                              <1> .l0001:
   749                              <1>     debugExitM
   750                              <1>     %endif
   751                              <1>     return
    18                              <2> %%_ret:
    19 000064CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   752                              <1> 
   753                              <1> getVerifySetting:  ;ah = 54h
   754 000064CE 8A05(B3C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   755                              <1>     return
    18                              <2> %%_ret:
    19 000064D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   756                              <1> 
   757                              <1> getExtendedError:  ;ah = 59h
   758 000064D5 E8BCF7FFFF          <1>     call getUserRegs
   759 000064DA 668B05(EEC30300)    <1>     mov ax, word [errorExCde]
   760 000064E1 8A2D(EDC30300)      <1>     mov ch, byte [errorLocus]
   761 000064E7 8A3D(F1C30300)      <1>     mov bh, byte [errorClass]
   762 000064ED 8A1D(F0C30300)      <1>     mov bl, byte [errorAction]
   763 000064F3 668906              <1>     mov word [rsi + callerFrame.rax], ax
   764 000064F6 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   765 000064FA 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   766                              <1>     return
    18                              <2> %%_ret:
    19 000064FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   767                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   768                              <1> noOp:
   769                              <1>     return
    18                              <2> %%_ret:
    19 000064FE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                                  %include "./Source/Kernel/Net/server.asm"
    42                              <1> ;Network functions here
    43                              <1> 
    44                              <1> dosServer:  ;ah = 5Dh
    45                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    46                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    47                              <1> ;   rdx = Pointer to DPL
    48 000064FF 3C07                <1>     cmp al, 07h
    49 00006501 7204                <1>     jb .skip
    50 00006503 3C09                <1>     cmp al, 09h
    51 00006505 7619                <1>     jbe .skip2
    52                              <1> .skip:
    53 00006507 4889D6              <1>     mov rsi, rdx
    54 0000650A 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    55 0000650E 66891D(26C40300)    <1>     mov word [machineNum], bx
    56 00006515 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    57 00006519 48891D(1EC40300)    <1>     mov qword [serverPSP], rbx
    58                              <1> .skip2:
    59 00006520 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    60 00006527 53                  <1>     push rbx
    61 00006528 488B1D(59DA0300)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    62 0000652F 53                  <1>     push rbx    ;Push the table ptr on the stack
    63 00006530 50                  <1>     push rax    ;Push al onto stack as a qword
    64 00006531 E856010000          <1>     call serverFunctionSelect
    65 00006536 B801000000          <1>     mov eax, eLocUnk
    66 0000653B 8805(EDC30300)      <1>     mov byte [errorLocus], al
    67 00006541 E9EDFBFFFF          <1>     jmp extErrExit
    68                              <1> 
    69                              <1> serverDispatch: ;AX=5D00h
    70                              <1> ;Input: rsi points to the DOS parameter list
    71 00006546 58                  <1>     pop rax ;Pop additional return ptr off the stack
    72 00006547 56                  <1>     push rsi    ;Put dpl ptr in rdi
    73 00006548 5F                  <1>     pop rdi
    74 00006549 E848F7FFFF          <1>     call getUserRegs
    75 0000654E 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    76 00006551 56                  <1>     push rsi
    77 00006552 B906000000          <1>     mov ecx, 6
    78 00006557 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    79 0000655A 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    80 00006561 48A5                <1>     movsq   ;Transfer r8...
    81 00006563 48A5                <1>     movsq   ;... and r9
    82 00006565 5E                  <1>     pop rsi
    83 00006566 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    84 00006569 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    85 0000656D 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    86 00006571 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    87 00006575 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    88 00006579 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    89 0000657D 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    90 00006581 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    91 00006585 48891D(65C40300)    <1>     mov qword [oldRBX], rbx
    92 0000658C C605(E0C60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    93 00006593 E951FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    94                              <1> 
    95                              <1> commitAllFilesForProcess:   ;AX=5D01h
    96                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    97                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    98                              <1> ;Thus we check the first two bytes of the current PSP to be CD 40h
    99                              <1> ;If so, we proceed, otherwise, fail with AccDen
   100 00006598 488B1D(02C40300)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
   101 0000659F 66813BCD40          <1>     cmp word [rbx], 40CDh
   102 000065A4 740A                <1>     je .validTask
   103 000065A6 B805000000          <1>     mov eax, errAccDen
   104 000065AB E983FBFFFF          <1>     jmp extErrExit
   105                              <1> .validTask:
   106 000065B0 31DB                <1>     xor ebx, ebx    ;Start from file 0
   107 000065B2 E831FBFFFF          <1>     call dosCrit1Enter
   108                              <1> .mainLoop:
   109                              <1>     ;Now loop through the JFT of the current task committing the files
   110 000065B7 53                  <1>     push rbx
   111 000065B8 E86CE2FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
   112 000065BD 7227                <1>     jc .exit
   113 000065BF 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
   114 000065C4 741B                <1>     je .gotoNextFile
   115 000065C6 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
   116 000065CB 7414                <1>     je .gotoNextFile
   117 000065CD 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
   118 000065D3 750C                <1>     jnz .gotoNextFile
   119 000065D5 48893D(10C70300)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
   120 000065DC E82CD1FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
   121                              <1>     ;If it succeeded, great, cool also if not, keep going!
   122                              <1> .gotoNextFile:
   123 000065E1 5B                  <1>     pop rbx
   124 000065E2 FFC3                <1>     inc ebx
   125 000065E4 EBD1                <1>     jmp short .mainLoop
   126                              <1> .exit:
   127 000065E6 E807FBFFFF          <1>     call dosCrit1Exit
   128 000065EB 5B                  <1>     pop rbx ;Align stack
   129 000065EC E934FBFFFF          <1>     jmp extGoodExit
   130                              <1> 
   131                              <1> closeFilesByName:           ;AX=5D02h
   132 000065F1 FF15(CAC00300)      <1>     call qword [closeNameShare]
   133                              <1> .shareExit: ;Use this symbol if we need a decision to be made
   134                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
   135 000065F7 0F8236FBFFFF        <1>     jc extErrExit
   136                              <1> .shareExitGood:
   137 000065FD E923FBFFFF          <1>     jmp extGoodExit
   138                              <1> 
   139                              <1> closeFilesByComputer:       ;AX=5D03h
   140 00006602 FF15(BAC00300)      <1>     call qword [closeCompShare]
   141 00006608 EBED                <1>     jmp short closeFilesByName.shareExit
   142                              <1> 
   143                              <1> closeFilesByProcess:        ;AX=5D04h
   144 0000660A FF15(C2C00300)      <1>     call qword [closeTaskShare]
   145 00006610 EBE5                <1>     jmp short closeFilesByName.shareExit
   146                              <1> 
   147                              <1> getOpenFileListEntry:       ;AX=5D05h
   148 00006612 FF15(EAC00300)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   149 00006618 72DD                <1>     jc closeFilesByName.shareExitBad
   150 0000661A E877F6FFFF          <1>     call getUserRegs
   151 0000661F 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   152 00006623 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   153                              <1> .shareExit:    ;rcx must be zero extended however to use this
   154 00006627 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   155                              <1> .shareExit2:
   156 0000662B EBD0                <1>     jmp short closeFilesByName.shareExitGood
   157                              <1> 
   158                              <1> getSDAData:                 ;AX=5D06h
   159                              <1> ;Returns:
   160                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   161                              <1> ;   (critical error flag is first byte) (see #01687)
   162                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   163                              <1> ;   rdx = size in bytes of area which must always be swapped
   164 0000662D 488D3D(EAC30300)    <1>     lea rdi, sda
   165 00006634 48B96F160000000000- <1>     mov rcx, sdaLen
   165 0000663D 00                  <1>
   166 0000663E 48BA43160000000000- <1>     mov rdx, sdaMSLen
   166 00006647 00                  <1>
   167 00006648 E849F6FFFF          <1>     call getUserRegs
   168 0000664D 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   169 00006651 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   170 00006655 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   171                              <1> 
   172                              <1> printerRedir:               ;AX=5D07/8/9h
   173 00006657 50                  <1>     push rax
   174 00006658 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   175 0000665D CD4F                <1>     int 4Fh
   176 0000665F 5B                  <1>     pop rbx
   177 00006660 7295                <1>     jc short closeFilesByName.shareExitBad
   178 00006662 EB99                <1>     jmp short  closeFilesByName.shareExitGood
   179                              <1> 
   180                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   181                              <1> ;Input:
   182                              <1> ;   rsi -> DPL
   183 00006664 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   184 00006666 668905(EEC30300)    <1>     mov word [errorExCde], ax
   185 0000666D 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Get rdi as a full ptr
   186 00006671 488905(F2C30300)    <1>     mov qword [xInt44RDI], rax
   187 00006678 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   188 0000667B 668905(F0C30300)    <1>     mov word [errorAction], ax  ;Store action and class together
   189 00006682 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   190 00006685 8825(EDC30300)      <1>     mov byte [errorLocus], ah
   191                              <1>     return  ;Return to the function ptr on the stack (the return function)
    18                              <2> %%_ret:
    19 0000668B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> 
   193                              <1> serverFunctionSelect:
   194                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   195                              <1> ;Second parameter is table address, (BP + 3*8)
   196 0000668C 55                  <1>     push rbp
   197 0000668D 4889E5              <1>     mov rbp, rsp
   198 00006690 53                  <1>     push rbx
   199 00006691 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   200 00006695 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   201 00006698 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   202 0000669B 731E                <1>     jnb .argumentTooBig
   203 0000669D 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx zeroextended
   204 000066A1 C1E302              <1>     shl ebx, 2  ;Convert to word offset
   205 000066A4 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   206 000066A6 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   207 000066A9 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   208 000066AD 48895D10            <1>     mov qword [rbp + 2*8], rbx  ;Store this address as the return address
   209 000066B1 5B                  <1>     pop rbx
   210 000066B2 5D                  <1>     pop rbp
   211 000066B3 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   212                              <1>     return
    18                              <2> %%_ret:
    19 000066BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   213                              <1> .argumentTooBig:
   214 000066BB 5B                  <1>     pop rbx
   215 000066BC 5D                  <1>     pop rbp
   216 000066BD C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   217                              <1> 
   218                              <1> 
   219                              <1> 
   220                              <1> netServices:   ;ah = 5Eh, do nothing
   221                              <1>     return
    18                              <2> %%_ret:
    19 000066C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   223                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   224 000066C1 80FC07              <1>     cmp ah, 07h
   225 000066C4 7419                <1>     je .driveAction
   226 000066C6 80FC08              <1>     cmp ah, 08h
   227 000066C9 7414                <1>     je .driveAction
   228                              <1>     ;Else, use redirector to process request
   229 000066CB 50                  <1>     push rax
   230 000066CC B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   231 000066D1 CD4F                <1>     int 4Fh
   232 000066D3 5B                  <1>     pop rbx
   233                              <1> .badExit:
   234 000066D4 0F8259FAFFFF        <1>     jc extErrExit
   235                              <1> .goodExit:
   236 000066DA E946FAFFFF          <1>     jmp extGoodExit
   237                              <1> .driveAction:
   238                              <1> ;dl must have valid 0-based drive number
   239 000066DF 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   240 000066E1 E898F6FFFF          <1>     call getCDSforDrive
   241 000066E6 72EC                <1>     jc short .badExit
   242                              <1>     ;rsi points to CDS
   243 000066E8 80EA07              <1>     sub dl, 7
   244 000066EB 7408                <1>     jz .enable
   245 000066ED 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   246 000066F3 EBE5                <1>     jmp short .goodExit
   247                              <1> .enable:
   248 000066F5 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   249 000066FB EBDD                <1>     jmp short .goodExit
    42                                  %include "./Source/Kernel/Net/multiplx.asm"
    43                              <1> ;Default multiplexer. Current only installed function is ah=12h
    44                              <1> ;If a ah=11h request is made, we return CF=CY (as intended)
    45                              <1> 
    46                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    47 000066FD 80FC12              <1>     cmp ah, 12h
    48 00006700 751C                <1>     jne .exit       ;Exit if not for us
    49 00006702 3C1B                <1>     cmp al, mDispTblL / 2
    50 00006704 7318                <1>     jae .exit   ;If above or equal, exit
    51 00006706 53                  <1>     push rbx
    52 00006707 51                  <1>     push rcx
    53 00006708 31C9                <1>     xor ecx, ecx
    54 0000670A 488D1D949CFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    55 00006711 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    56 00006713 D1E1                <1>     shl ecx, 1   ;multiply by 2
    57 00006715 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    58 00006718 FFD3                <1>     call rbx
    59 0000671A 59                  <1>     pop rcx
    60 0000671B 5B                  <1>     pop rbx
    61 0000671C 48CF                <1>     iretq
    62                              <1> .exit:
    63 0000671E 804C241001          <1>     or byte [rsp + 8h*2], 1
    64 00006723 48CF                <1>     iretq
    65                              <1> multiplexTest:
    66 00006725 B0FF                <1>     mov al, -1
    67 00006727 C3                  <1>     ret
    68                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    69                              <1> ;Return: r8 = Dos Data Segment Pointer
    70 00006728 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    71                              <1>     return
    18                              <2> %%_ret:
    19 0000672F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    72                              <1> 
    43                                  %include "./Source/Kernel/Net/share.asm"
    44                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
    45                              <1> 
    46                              <1> ;Generic Share Hooks and Wrappers
    47                              <1> shareBadFunction:
    48 00006730 B801000000          <1>     mov eax, errInvFnc
    49 00006735 668905(EEC30300)    <1>     mov word [errorExCde], ax
    50 0000673C F9                  <1>     stc
    51                              <1>     return
    18                              <2> %%_ret:
    19 0000673D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> badDfltShareHook:
    53                              <1> ;Return CF=CY
    54 0000673E E8EDFFFFFF          <1>     call shareBadFunction
    55                              <1>     return
    18                              <2> %%_ret:
    19 00006743 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    56                              <1> goodDfltShareHook:
    57                              <1> ;Return CF=NC
    58 00006744 F8                  <1>     clc
    59                              <1>     return
    18                              <2> %%_ret:
    19 00006745 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> openShareCallWrapper:
    61 00006746 FF15(AAC00300)      <1>     call qword [openShare]
    62                              <1>     return
    18                              <2> %%_ret:
    19 0000674C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    63                              <1> closeShareCallWrapper:
    64 0000674D FF15(B2C00300)      <1>     call qword [closeShare]
    65                              <1>     return
    18                              <2> %%_ret:
    19 00006753 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> retryShareIODelay:
    68                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    69                              <1> ;Called only in readDiskFile and writeDiskFile
    70                              <1> ;Input: rdi -> SFT for current file
    71                              <1> ;       ecx = Length of region from current position in file
    72                              <1> ;Output: If CF=NC, not locked
    73                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    74 00006754 0FB71D(23C00300)    <1>     movzx ebx, word [shareCount]
    75                              <1> .mainLoop:      
    76 0000675B 53                  <1>     push rbx
    77 0000675C FF15(E2C00300)      <1>     call qword [checkFileLockShare]
    78 00006762 5B                  <1>     pop rbx
    79                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006763 73EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    80 00006765 E806000000          <1>     call shareRetryCountdown
    81 0000676A FFCB                <1>     dec ebx
    82 0000676C 75ED                <1>     jnz .mainLoop
    83 0000676E F9                  <1>     stc
    84                              <1>     return
    18                              <2> %%_ret:
    19 0000676F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> shareRetryCountdown:
    87                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    88                              <1> ;Does the retry wait IFF the request was not a server request.
    89 00006770 F605(E0C60300)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    90                              <1>     retnz   ;Exit by default if it is a server call
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006777 75F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    91 00006779 51                  <1>     push rcx
    92 0000677A 0FB70D(25C00300)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    93 00006781 67E30D              <1>     jecxz .exit
    94                              <1> .loopBody:
    95 00006784 51                  <1>     push rcx
    96 00006785 31C9                <1>     xor ecx, ecx
    97                              <1> .mainLoop:
    98 00006787 66FFC9              <1>     dec cx
    99 0000678A 75FB                <1>     jnz .mainLoop
   100 0000678C 59                  <1>     pop rcx
   101 0000678D FFC9                <1>     dec ecx
   102 0000678F 75F3                <1>     jnz .loopBody
   103                              <1> .exit:
   104 00006791 59                  <1>     pop rcx
   105                              <1>     return
    18                              <2> %%_ret:
    19 00006792 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   106                              <1> 
   107                              <1> shareCheckOpenViolation:
   108                              <1> ;Input: rdi -> Locally complete SFT we are opening
   109 00006793 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   110 00006799 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   111 0000679B 50                  <1>     push rax
   112 0000679C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   113 000067A0 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   114 000067A5 58                  <1>     pop rax
   115 000067A6 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   116                              <1> .fcbQuirk:
   117 000067A8 E83B000000          <1>     call shareLockViolationCriticalError
   118                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000067AD 73E3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   119                              <1> .notInCompatMode:
   120 000067AF B820000000          <1>     mov eax, errShrVio
   121 000067B4 F9                  <1>     stc ;Set the flag for error
   122                              <1>     return
    18                              <2> %%_ret:
    19 000067B5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> 
   125                              <1> 
   126                              <1> shareFile:
   127                              <1> ;Once the SFT has been made, here we allocate resoureces within share to
   128                              <1> ; share the file, if it is possible to do so!
   129                              <1> ; This is done by calling the open wrapper
   130 000067B6 51                  <1>     push rcx
   131                              <1> .reloadCounter:
   132 000067B7 0FB70D(23C00300)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
   133                              <1> .keepLooping:
   134 000067BE 488B3D(10C70300)    <1>     mov rdi, qword [currentSFT]
   135 000067C5 31C0                <1>     xor eax, eax
   136 000067C7 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
   137 000067CD 51                  <1>     push rcx
   138 000067CE E873FFFFFF          <1>     call openShareCallWrapper
   139 000067D3 59                  <1>     pop rcx
   140 000067D4 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
   141 000067D6 E895FFFFFF          <1>     call shareRetryCountdown
   142 000067DB FFC9                <1>     dec ecx
   143 000067DD 75DF                <1>     jnz .keepLooping
   144 000067DF E827000000          <1>     call shareCriticalError
   145 000067E4 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   146                              <1> .exit:
   147 000067E6 59                  <1>     pop rcx
   148                              <1>     return
    18                              <2> %%_ret:
    19 000067E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> 
   150                              <1> shareLockViolationCriticalError:
   151                              <1> ;This does NOT force rwFlag to 0.
   152 000067E8 57                  <1>     push rdi
   153 000067E9 C605(4AC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   154 000067F0 B821000000          <1>     mov eax, errLokVio
   155 000067F5 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
   156                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   157 000067FC E82BEFFFFF          <1>     call fullcriticalErrorInvoke
   158 00006801 5F                  <1>     pop rdi
   159 00006802 3D01000000          <1>     cmp eax, critRetry
   160                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006807 74DE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   161 00006809 F9                  <1>     stc
   162                              <1>     return
    18                              <2> %%_ret:
    19 0000680A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> shareCriticalError: ;Int 4Fh AX=120Ah
   165                              <1> ;Used for share Read/Write requests
   166 0000680B 57                  <1>     push rdi
   167 0000680C C605(DEC60300)00    <1>     mov byte [rwFlag], 0    ;Default to read
   168 00006813 C605(4AC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   169 0000681A 488B2D(E8C60300)    <1>     mov rbp, qword [workingDPB]
   170 00006821 BF01000000          <1>     mov edi, 1
   171                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   172 00006826 E801EFFFFF          <1>     call fullcriticalErrorInvoke
   173 0000682B 5F                  <1>     pop rdi
   174 0000682C 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   175                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000682E 74DA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   176 00006830 F9                  <1>     stc
   177                              <1>     return
    18                              <2> %%_ret:
    19 00006831 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   178                              <1> 
   179                              <1> shareReadWriteViolationError:
   180                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
   181 00006832 3C0F                <1>     cmp al, drvBadDskChnge
   182 00006834 7510                <1>     jne .doReq
   183 00006836 50                  <1>     push rax    ;IF a bad disk change, drop the volume descriptor ptr here
   184 00006837 488B05(C5C40300)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume descriptor ptr
   185 0000683E 488905(F2C30300)    <1>     mov qword [xInt44RDI], rax
   186 00006845 58                  <1>     pop rax
   187                              <1> .doReq:
   188 00006846 E8E1EEFFFF          <1>     call fullcriticalErrorInvoke
   189                              <1>     return
    18                              <2> %%_ret:
    19 0000684B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   190                              <1> 
   191                              <1> shareCheckWriteLockViolation:
   192 0000684C C605(DEC60300)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   193 00006853 EB07                <1>     jmp short shareCheckReadLockViolation.common
   194                              <1> shareCheckReadLockViolation:
   195 00006855 C605(DEC60300)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   196                              <1> .common:
   197                              <1> ;Input:
   198                              <1> ;rdi -> SFT for the file we are reading
   199 0000685C 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   200 00006862 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   201 00006864 50                  <1>     push rax
   202 00006865 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   203 00006869 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   204 0000686E 58                  <1>     pop rax
   205 0000686F 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   206                              <1> .fcbQuirk:
   207 00006871 E872FFFFFF          <1>     call shareLockViolationCriticalError
   208                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006876 73D3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   209                              <1> .notInCompatMode:
   210 00006878 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   211 0000687A B821000000          <1>     mov eax, errLokVio
   212 0000687F F9                  <1>     stc ;Set the flag for error
   213                              <1>     return
    18                              <2> %%_ret:
    19 00006880 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    44                                  %include "./Source/Drivers/drvData.asm"
    45                              <1> ;-----------------------------------:
    46                              <1> ;          Driver routines          :
    47                              <1> ;-----------------------------------:
    48                              <1> drivers:
    49                              <1> conHdr:
    50 00006881 [A368000000000000]  <1>     dq auxHdr
    51 00006889 1380                <1>     dw 08013h
    52 0000688B [216A000000000000]  <1>     dq commonStrat
    53 00006893 [306A000000000000]  <1>     dq conDriver
    54 0000689B 434F4E2020202020    <1>     db "CON     "
    55                              <1> auxHdr:
    56 000068A3 [C568000000000000]  <1>     dq prnHdr
    57 000068AB 0080                <1>     dw 08000h
    58 000068AD [216A000000000000]  <1>     dq commonStrat
    59 000068B5 [E56C000000000000]  <1>     dq com1Intr
    60 000068BD 4155582020202020    <1>     db "AUX     "
    61                              <1> prnHdr:
    62 000068C5 [E768000000000000]  <1>     dq clkHdr
    63 000068CD 40A0                <1>     dw 0A040h
    64 000068CF [296A000000000000]  <1>     dq nulStrat
    65 000068D7 [2F6A000000000000]  <1>     dq nulIntr
    66 000068DF 50524E2020202020    <1>     db "PRN     "
    67                              <1> clkHdr:
    68 000068E7 [0969000000000000]  <1>     dq msdHdr
    69 000068EF 0880                <1>     dw 08008h
    70 000068F1 [216A000000000000]  <1>     dq commonStrat
    71 000068F9 [7D6B000000000000]  <1>     dq clkDriver
    72 00006901 434C4F434B242020    <1>     db "CLOCK$  "
    73                              <1> msdHdr:
    74 00006909 [2B69000000000000]  <1>     dq com1Hdr
    75 00006911 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    76 00006913 [216A000000000000]  <1>     dq commonStrat
    77 0000691B [696E000000000000]  <1>     dq msdDriver
    78 00006923 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    79                              <1> com1Hdr:
    80 0000692B [4D69000000000000]  <1>     dq com2Hdr
    81 00006933 0080                <1>     dw 08000h
    82 00006935 [216A000000000000]  <1>     dq commonStrat
    83 0000693D [E56C000000000000]  <1>     dq com1Intr
    84 00006945 434F4D3120202020    <1>     db "COM1    "
    85                              <1> com2Hdr:
    86 0000694D [6F69000000000000]  <1>     dq com3Hdr
    87 00006955 0080                <1>     dw 08000h
    88 00006957 [216A000000000000]  <1>     dq commonStrat
    89 0000695F [EE6C000000000000]  <1>     dq com2Intr
    90 00006967 434F4D3220202020    <1>     db "COM2    "
    91                              <1> com3Hdr:
    92 0000696F [9169000000000000]  <1>     dq com4Hdr
    93 00006977 0080                <1>     dw 08000h
    94 00006979 [216A000000000000]  <1>     dq commonStrat
    95 00006981 [F76C000000000000]  <1>     dq com3Intr
    96 00006989 434F4D3320202020    <1>     db "COM3    "
    97                              <1> com4Hdr:
    98 00006991 [B369000000000000]  <1>     dq lpt1Hdr
    99 00006999 0080                <1>     dw 08000h
   100 0000699B [216A000000000000]  <1>     dq commonStrat
   101 000069A3 [006D000000000000]  <1>     dq com4Intr
   102 000069AB 434F4D3420202020    <1>     db "COM4    "
   103                              <1> lpt1Hdr:
   104 000069B3 [D569000000000000]  <1>     dq lpt2Hdr
   105 000069BB 40A0                <1>     dw 0A040h
   106 000069BD [296A000000000000]  <1>     dq nulStrat
   107 000069C5 [2F6A000000000000]  <1>     dq nulIntr
   108 000069CD 4C50543120202020    <1>     db "LPT1    "
   109                              <1> lpt2Hdr:
   110 000069D5 [F769000000000000]  <1>     dq lpt3Hdr
   111 000069DD 40A0                <1>     dw 0A040h
   112 000069DF [296A000000000000]  <1>     dq nulStrat
   113 000069E7 [2F6A000000000000]  <1>     dq nulIntr
   114 000069EF 4C50543220202020    <1>     db "LPT2    "
   115                              <1> lpt3Hdr:
   116 000069F7 FFFFFFFFFFFFFFFF    <1>     dq -1
   117 000069FF 40A0                <1>     dw 0A040h
   118 00006A01 [296A000000000000]  <1>     dq nulStrat
   119 00006A09 [2F6A000000000000]  <1>     dq nulIntr
   120 00006A11 4C50543320202020    <1>     dq "LPT3    "
   121 00006A19 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    45                                  %include "./Source/Drivers/charDrv.asm"
    46                              <1> commonStrat:
    47                              <1> ;DOS calls this function with rbx=Ptr to request header
    48 00006A21 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    49 00006A28 C3                  <1>     ret
    50                              <1> nulStrat:
    51 00006A29 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    52                              <1> nulIntr:
    53 00006A2F C3                  <1>     ret
    54                              <1> conDriver:
    55 00006A30 50                  <1>     push rax
    56 00006A31 53                  <1>     push rbx
    57 00006A32 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    58 00006A39 B003                <1>     mov al, 03h ;Unknown Command
    59 00006A3B 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    60 00006A3F 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    61                              <1> 
    62 00006A41 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    63 00006A44 3C04                <1>     cmp al, 4
    64 00006A46 7441                <1>     jz .conRead
    65 00006A48 3C05                <1>     cmp al, 5
    66 00006A4A 0F847F000000        <1>     jz .conNondestructiveRead
    67 00006A50 3C06                <1>     cmp al, 6
    68 00006A52 0F84A8000000        <1>     jz .conInputStatus
    69 00006A58 3C07                <1>     cmp al, 7
    70 00006A5A 0F84B0000000        <1>     jz .conFlushInputBuffers
    71 00006A60 3C08                <1>     cmp al, 8
    72 00006A62 0F84CA000000        <1>     jz .conWrite
    73 00006A68 3C09                <1>     cmp al, 9
    74 00006A6A 0F84C2000000        <1>     jz .conWrite
    75 00006A70 3C0A                <1>     cmp al, 0Ah
    76 00006A72 0F84E3000000        <1>     jz .conOutputStatus
    77 00006A78 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    78                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    79 00006A7A B480                <1>     mov ah, 80h ;Set error bit
    80 00006A7C 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    81                              <1> .conExit:
    82 00006A80 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    83 00006A86 5B                  <1>     pop rbx
    84 00006A87 58                  <1>     pop rax
    85 00006A88 C3                  <1>     ret
    86                              <1> .conRead:    ;Function 4
    87 00006A89 B005                <1>     mov al, 05h ;Bad request structure length?
    88 00006A8B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    89 00006A8E 75EA                <1>     jne .conWriteErrorCode
    90                              <1> 
    91 00006A90 57                  <1>     push rdi
    92 00006A91 51                  <1>     push rcx
    93 00006A92 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    94 00006A96 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    95                              <1> .cre1:
    96 00006A98 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    97 00006A9B 741C                <1>     je .cre2
    98 00006A9D 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    99 00006AA4 751A                <1>     jnz .cre3   ;No, get the buffer value
   100 00006AA6 31C0                <1>     xor eax, eax
   101 00006AA8 CD36                <1>     int 36h
   102                              <1> .cre11:
   103 00006AAA AA                  <1>     stosb
   104 00006AAB 84C0                <1>     test al, al ;Was the ascii code stored 0?
   105 00006AAD 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   106 00006AAF 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   107                              <1> .cre12:
   108 00006AB5 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   109 00006AB7 EBDF                <1>     jmp short .cre1
   110                              <1> .cre2:
   111 00006AB9 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   112 00006ABC 59                  <1>     pop rcx
   113 00006ABD 5F                  <1>     pop rdi
   114 00006ABE EBC0                <1>     jmp short .conExit
   115                              <1> .cre3:
   116 00006AC0 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   117 00006AC6 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   118 00006ACD EBDB                <1>     jmp short .cre11
   119                              <1> 
   120                              <1> .conNondestructiveRead:  ;Function 5
   121 00006ACF B005                <1>     mov al, 05h ;Bad request structure length?
   122 00006AD1 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   123 00006AD4 75A4                <1>     jne .conWriteErrorCode
   124 00006AD6 803D8E00000000      <1>     cmp byte [.conBuf], 0
   125 00006ADD 7519                <1>     jnz .cnr2
   126 00006ADF B401                <1>     mov ah, 01h     ;Get key if exists
   127 00006AE1 CD36                <1>     int 36h
   128 00006AE3 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   129                              <1>     ;Keystroke available
   130                              <1> .cnr0:
   131 00006AE5 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   132 00006AE8 E993FFFFFF          <1>     jmp .conExit
   133                              <1> .cnr1: ;No keystroke available
   134 00006AED 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   135 00006AF3 E988FFFFFF          <1>     jmp .conExit
   136                              <1> .cnr2:
   137 00006AF8 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   138 00006AFE EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   139                              <1> 
   140                              <1> .conInputStatus:         ;Function 6
   141 00006B00 B005                <1>     mov al, 05h ;Bad request structure length?
   142 00006B02 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   143 00006B05 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   144 00006B0B E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   145                              <1> 
   146                              <1> .conFlushInputBuffers:   ;Function 7
   147 00006B10 B005                <1>     mov al, 05h ;Bad request structure length?
   148 00006B12 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   149 00006B15 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   150 00006B1B C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   151                              <1> .cfib0:
   152 00006B22 B401                <1>     mov ah, 01      ;Get buffer status
   153 00006B24 CD36                <1>     int 36h
   154 00006B26 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   155 00006B2C 30E4                <1>     xor ah, ah
   156 00006B2E CD36                <1>     int 36h ;Read key to flush from buffer
   157 00006B30 EBF0                <1>     jmp short .cfib0
   158                              <1> 
   159                              <1> .conWrite:   ;Function 8 and 9
   160 00006B32 B005                <1>     mov al, 05h ;Bad request structure length?
   161 00006B34 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   162 00006B37 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   163                              <1> 
   164 00006B3D 56                  <1>     push rsi
   165 00006B3E 51                  <1>     push rcx
   166 00006B3F 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   167 00006B43 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   168                              <1> .cw1: 
   169 00006B45 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   170 00006B48 7407                <1>     je .cw2
   171 00006B4A AC                  <1>     lodsb   ;Get char into al, and inc rsi
   172 00006B4B CD49                <1>     int 49h ;Fast print char
   173 00006B4D FFC1                <1>     inc ecx
   174 00006B4F EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   175                              <1> .cw2:
   176 00006B51 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   177 00006B54 59                  <1>     pop rcx
   178 00006B55 5E                  <1>     pop rsi
   179 00006B56 E925FFFFFF          <1>     jmp .conExit
   180                              <1> .conOutputStatus:   ;Function 0Ah
   181 00006B5B B005                <1>     mov al, 05h ;Bad request structure length?
   182 00006B5D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   183 00006B60 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   184 00006B66 E915FFFFFF          <1>     jmp .conExit
   185                              <1> 
   186 00006B6B 00                  <1> .conBuf db 0    ;Single byte buffer
   187                              <1> fastOutput:         ;This CON driver supports Int 49h
   188                              <1> ;Called with char to transfer in al
   189 00006B6C 50                  <1>     push rax
   190 00006B6D B40E                <1>     mov ah, 0Eh
   191 00006B6F CD30                <1>     int 30h
   192 00006B71 58                  <1>     pop rax
   193 00006B72 48CF                <1>     iretq
   194                              <1> ctrlBreak:
   195                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   196 00006B74 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   197 00006B7B 48CF                <1>     iretq
   198                              <1> 
   199                              <1> clkDriver:
   200 00006B7D 50                  <1>     push rax
   201 00006B7E 53                  <1>     push rbx
   202 00006B7F 51                  <1>     push rcx
   203 00006B80 52                  <1>     push rdx
   204 00006B81 56                  <1>     push rsi
   205 00006B82 55                  <1>     push rbp
   206 00006B83 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   207 00006B8A B003                <1>     mov al, 03h ;Unknown Command
   208 00006B8C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   209 00006B90 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   210                              <1> 
   211 00006B92 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   212 00006B95 3C04                <1>     cmp al, 04h
   213 00006B97 7437                <1>     jz .clkRead
   214 00006B99 3C06                <1>     cmp al, 06h
   215 00006B9B 0F8494000000        <1>     jz .clkInputStatus
   216 00006BA1 3C07                <1>     cmp al, 07h
   217 00006BA3 0F8498000000        <1>     jz .clkFlushInputBuffers
   218 00006BA9 3C08                <1>     cmp al, 08h
   219 00006BAB 0F84A0000000        <1>     jz .clkWrite
   220 00006BB1 3C09                <1>     cmp al, 09h
   221 00006BB3 0F8498000000        <1>     jz .clkWrite
   222 00006BB9 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   223                              <1> .clkNotFunctioning:
   224 00006BBB B002                <1>     mov al, 02h ;Device not ready error
   225                              <1> .clkWriteErrorCode:
   226 00006BBD B480                <1>     mov ah, 80h ;Set error bit
   227 00006BBF 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   228                              <1> .clkExit:
   229 00006BC3 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   230 00006BC9 5D                  <1>     pop rbp
   231 00006BCA 5E                  <1>     pop rsi
   232 00006BCB 5A                  <1>     pop rdx
   233 00006BCC 59                  <1>     pop rcx
   234 00006BCD 5B                  <1>     pop rbx
   235 00006BCE 58                  <1>     pop rax
   236 00006BCF C3                  <1>     ret
   237                              <1> 
   238                              <1> .clkRead:           ;Function 4
   239 00006BD0 B005                <1>     mov al, 05h ;Bad request structure length?
   240 00006BD2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   241 00006BD5 75E6                <1>     jne .clkWriteErrorCode
   242                              <1> 
   243 00006BD7 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   244 00006BDA 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   245 00006BDE 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   246 00006BE5 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   247 00006BE9 30E4                <1>     xor ah, ah
   248 00006BEB CD3A                <1>     int 3Ah         ;Read the system timer
   249 00006BED 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   250 00006BEF 740D                <1>     jz .clkr1       ;Nope, now just time 
   251 00006BF1 30E4                <1>     xor ah, ah
   252                              <1>     ;This works as al should keep count of the # of days passed since last read
   253 00006BF3 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   254 00006BF7 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   255                              <1> .clkr1:
   256 00006BFE 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   257 00006C01 0FB7D2              <1>     movzx edx, dx
   258 00006C04 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   259 00006C06 89D0                <1>     mov eax, edx
   260 00006C08 31D2                <1>     xor edx, edx
   261 00006C0A 89D8                <1>     mov eax, ebx
   262 00006C0C B944040000          <1>     mov ecx, 1092   
   263 00006C11 F7F1                <1>     div ecx
   264 00006C13 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   265 00006C16 89D0                <1>     mov eax, edx    ;Get remainder in eax
   266 00006C18 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   267 00006C1C 31D2                <1>     xor edx, edx
   268 00006C1E B95B000000          <1>     mov ecx, 91 ;5*18.2
   269 00006C23 F7F1                <1>     div ecx
   270 00006C25 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   271 00006C28 89D0                <1>     mov eax, edx    ;Get remainder in eax
   272                              <1>     ;lea eax, dword [eax + 4*eax]
   273                              <1>     ;add eax, edx    ;Essentially multiply by 6
   274 00006C2A 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   275 00006C2D 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   276 00006C30 E98EFFFFFF          <1>     jmp .clkExit
   277                              <1> 
   278                              <1> .clkInputStatus:    ;Function 6
   279                              <1> ;Always return ready
   280 00006C35 B005                <1>     mov al, 05h ;Bad request structure length?
   281 00006C37 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   282 00006C3A 7581                <1>     jne .clkWriteErrorCode
   283 00006C3C E982FFFFFF          <1>     jmp .clkExit
   284                              <1> .clkFlushInputBuffers:  ;Function 7
   285                              <1> ;Always return done immediately
   286 00006C41 B005                <1>     mov al, 05h ;Bad request structure length?
   287 00006C43 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   288 00006C46 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   289 00006C4C E972FFFFFF          <1>     jmp .clkExit
   290                              <1> 
   291                              <1> .clkWrite:          ;Functions 8 and 9
   292 00006C51 B005                <1>     mov al, 05h ;Bad request structure length?
   293 00006C53 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   294 00006C56 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   295                              <1> 
   296 00006C5C 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   297 00006C5F 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   298 00006C63 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   299 00006C67 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   300                              <1> 
   301 00006C6E 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   302 00006C70 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   303 00006C74 B105                <1>     mov cl, 5
   304 00006C76 F6F1                <1>     div cl          ;Divide al by 5
   305 00006C78 30E4                <1>     xor ah, ah      ;Remove the remainder
   306 00006C7A 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   307                              <1> ;Using the decimal part of this formula for the low count
   308                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   309 00006C7C 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   310 00006C7F B912000000          <1>     mov ecx, 18
   311 00006C84 F7E1                <1>     mul ecx  
   312 00006C86 01C3                <1>     add ebx, eax
   313                              <1> 
   314 00006C88 31D2                <1>     xor edx, edx
   315 00006C8A 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   316 00006C8E B944040000          <1>     mov ecx, 1092
   317 00006C93 F7E1                <1>     mul ecx
   318 00006C95 01C3                <1>     add ebx, eax
   319 00006C97 89DA                <1>     mov edx, ebx    ;edx now has low count
   320 00006C99 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   321 00006C9D B401                <1>     mov ah, 01h     ;Set the system time
   322 00006C9F CD3A                <1>     int 3Ah
   323                              <1> 
   324 00006CA1 4889F3              <1>     mov rbx, rsi
   325 00006CA4 E91AFFFFFF          <1>     jmp .clkExit
   326                              <1> 
   327                              <1> .clkBCDtoHex:
   328                              <1> ;Converts a BCD value to a Hex byte
   329                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   330 00006CA9 51                  <1>     push rcx
   331 00006CAA 0FB6C0              <1>     movzx eax, al   ;Zero extend
   332 00006CAD 89C1                <1>     mov ecx, eax    ;Save al in ecx
   333 00006CAF 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   334 00006CB4 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   335 00006CBA C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   336                              <1> .cbth0:
   337 00006CBD 050A000000          <1>     add eax, 10
   338 00006CC2 E2F9                <1>     loop .cbth0
   339 00006CC4 59                  <1>     pop rcx
   340 00006CC5 C3                  <1>     ret
   341                              <1> 
   342                              <1> .clkHexToBCD:
   343                              <1> ;Converts a Hex byte into two BCD digits
   344                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   345 00006CC6 51                  <1>     push rcx
   346 00006CC7 0FB6C0              <1>     movzx eax, al   ;Zero extend
   347 00006CCA 31C9                <1>     xor ecx, ecx
   348                              <1> .chtb0:
   349 00006CCC 3D0A000000          <1>     cmp eax, 10
   350 00006CD1 7209                <1>     jb .chtb1
   351 00006CD3 2D0A000000          <1>     sub eax, 10
   352 00006CD8 FFC1                <1>     inc ecx
   353 00006CDA EBF0                <1>     jmp short .chtb0
   354                              <1> .chtb1:
   355 00006CDC C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   356 00006CDF 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   357 00006CE1 59                  <1>     pop rcx
   358 00006CE2 C3                  <1>     ret
   359 00006CE3 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   360                              <1> 
   361                              <1> ;COM Driver headers and main interrupt strat
   362                              <1> com1Intr:
   363 00006CE5 C6057C01000000      <1>     mov byte [comIntr.comDevice], 0
   364 00006CEC EB19                <1>     jmp short comIntr
   365                              <1> com2Intr:
   366 00006CEE C6057301000001      <1>     mov byte [comIntr.comDevice], 1
   367 00006CF5 EB10                <1>     jmp short comIntr
   368                              <1> com3Intr:
   369 00006CF7 C6056A01000002      <1>     mov byte [comIntr.comDevice], 2
   370 00006CFE EB07                <1>     jmp short comIntr
   371                              <1> com4Intr:
   372 00006D00 C6056101000003      <1>     mov byte [comIntr.comDevice], 3
   373                              <1> comIntr:
   374 00006D07 50                  <1>     push rax
   375 00006D08 53                  <1>     push rbx
   376 00006D09 51                  <1>     push rcx
   377 00006D0A 52                  <1>     push rdx
   378 00006D0B 56                  <1>     push rsi
   379 00006D0C 57                  <1>     push rdi
   380 00006D0D 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   381 00006D14 B003                <1>     mov al, 03h ;Unknown Command
   382 00006D16 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   383 00006D1A 7758                <1>     ja .comWriteErrorCode ;If yes, error!
   384                              <1> 
   385 00006D1C 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   386 00006D1F 3C04                <1>     cmp al, 4   ;Read Character(s)
   387 00006D21 7464                <1>     jz .comRead
   388 00006D23 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   389 00006D25 0F849D000000        <1>     jz .comNondestructiveRead   
   390 00006D2B 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   391 00006D2D 0F8486000000        <1>     jz .comReadInputStatus
   392 00006D33 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   393 00006D35 0F849C000000        <1>     jz .comFlushInputBuffers
   394 00006D3B 3C08                <1>     cmp al, 8
   395 00006D3D 0F84BA000000        <1>     jz .comWrite
   396 00006D43 3C09                <1>     cmp al, 9
   397 00006D45 0F84B2000000        <1>     jz .comWrite
   398 00006D4B 3C0A                <1>     cmp al, 0Ah
   399 00006D4D 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   400 00006D53 EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   401                              <1> .comErrorNoCount:
   402 00006D55 B002                <1>     mov al, 02h ;Unknown device
   403 00006D57 EB1B                <1>     jmp short .comWriteErrorCode
   404                              <1> .comReadError:
   405 00006D59 BA0B000000          <1>     mov edx, 0Bh
   406 00006D5E EB05                <1>     jmp short .comError
   407                              <1> .comWriteError:
   408 00006D60 BA0A000000          <1>     mov edx, 0Ah
   409                              <1> .comError:
   410 00006D65 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   411 00006D68 B902000000          <1>     mov ecx, 02h    ;Unknown device
   412 00006D6D 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   413 00006D6F 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   414 00006D72 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   415                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   416 00006D74 B480                <1>     mov ah, 80h ;Set error bit
   417 00006D76 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   418                              <1> .comExit:
   419 00006D7A 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   420 00006D80 5F                  <1>     pop rdi
   421 00006D81 5E                  <1>     pop rsi
   422 00006D82 5A                  <1>     pop rdx
   423 00006D83 59                  <1>     pop rcx
   424 00006D84 5B                  <1>     pop rbx
   425 00006D85 58                  <1>     pop rax
   426 00006D86 C3                  <1>     ret
   427                              <1> 
   428                              <1> .comRead:
   429 00006D87 B005                <1>     mov al, 05h ;Bad request structure length?
   430 00006D89 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   431 00006D8C 75E6                <1>     jne .comWriteErrorCode
   432 00006D8E 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   433 00006D92 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   434                              <1> .cr1:
   435 00006D94 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   436 00006D97 741B                <1>     je .cre2
   437                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   438 00006D99 B800020000          <1>     mov eax, 0200h    ;Recieve 
   439 00006D9E 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   440 00006DA5 F8                  <1>     clc
   441 00006DA6 CD34                <1>     int 34h ;Recieve Char
   442 00006DA8 72BB                <1>     jc .comError
   443 00006DAA 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   444 00006DAD 74EA                <1>     je .cr11
   445 00006DAF AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   446 00006DB0 FFC1                <1>     inc ecx
   447 00006DB2 EBE0                <1>     jmp short .cr1
   448                              <1> .cre2:
   449 00006DB4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   450 00006DB7 EBC1                <1>     jmp short .comExit
   451                              <1> 
   452                              <1> .comReadInputStatus:
   453 00006DB9 B005                <1>     mov al, 05h ;Bad request structure length?
   454 00006DBB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   455 00006DBE 75B4                <1>     jne .comWriteErrorCode
   456 00006DC0 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   457 00006DC6 EBB2                <1>     jmp short .comExit
   458                              <1> 
   459                              <1> .comNondestructiveRead:
   460                              <1> ;The buffer is always empty for now (no keystroke available)
   461 00006DC8 B005                <1>     mov al, 05h ;Bad request structure length?
   462 00006DCA 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   463 00006DCD 75A5                <1>     jne .comWriteErrorCode
   464 00006DCF 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   465 00006DD5 EBA3                <1>     jmp short .comExit
   466                              <1> 
   467                              <1> .comFlushInputBuffers:
   468 00006DD7 B005                <1>     mov al, 05h ;Bad request structure length?
   469 00006DD9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   470 00006DDC 7596                <1>     jne .comWriteErrorCode
   471                              <1> .cfib0:
   472 00006DDE 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   473 00006DE5 B800020000          <1>     mov eax, 0200h    ;Recieve
   474 00006DEA F8                  <1>     clc
   475 00006DEB CD34                <1>     int 34h
   476 00006DED 0F8262FFFFFF        <1>     jc .comErrorNoCount
   477 00006DF3 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   478 00006DF6 75E6                <1>     jne .cfib0
   479 00006DF8 E97DFFFFFF          <1>     jmp .comExit
   480                              <1> 
   481                              <1> .comWrite:
   482 00006DFD B005                <1>     mov al, 05h ;Bad request structure length?
   483 00006DFF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   484 00006E02 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   485                              <1> 
   486 00006E08 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   487 00006E0C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   488                              <1> .cw1: 
   489 00006E0E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   490 00006E11 7417                <1>     je .cw2
   491 00006E13 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   492 00006E14 B401                <1>     mov ah, 01h ;Move function number into ah
   493 00006E16 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   494 00006E1D F8                  <1>     clc
   495 00006E1E CD34                <1>     int 34h ;Transmit char
   496 00006E20 0F823FFFFFFF        <1>     jc .comError
   497 00006E26 FFC1                <1>     inc ecx
   498 00006E28 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   499                              <1> .cw2:
   500 00006E2A 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   501 00006E2D E948FFFFFF          <1>     jmp .comExit
   502                              <1> 
   503                              <1> .comOutputStatus:
   504                              <1> ;Read MODEM status
   505 00006E32 B005                <1>     mov al, 05h ;Bad request structure length?
   506 00006E34 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   507 00006E37 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   508                              <1> 
   509 00006E3D 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   510 00006E44 B403                <1>     mov ah, 03h     ;Get status
   511 00006E46 F8                  <1>     clc
   512 00006E47 CD34                <1>     int 34h
   513 00006E49 0F8206FFFFFF        <1>     jc .comErrorNoCount
   514 00006E4F 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   515 00006E54 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   516 00006E57 F7D0                <1>     not eax      ;Bitwise inversion
   517 00006E59 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   518 00006E5E 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   519 00006E63 E912FFFFFF          <1>     jmp .comExit
   520 00006E68 00                  <1> .comDevice   db 0
    46                                  %include "./Source/Drivers/diskDrv.asm"
    47                              <1> msdDriver:
    48 00006E69 50                  <1>     push rax
    49 00006E6A 53                  <1>     push rbx
    50 00006E6B 51                  <1>     push rcx
    51 00006E6C 52                  <1>     push rdx
    52 00006E6D 56                  <1>     push rsi
    53 00006E6E 57                  <1>     push rdi
    54 00006E6F 55                  <1>     push rbp
    55 00006E70 4150                <1>     push r8
    56 00006E72 488B1DA0FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    57 00006E79 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    58 00006E7D B003                <1>     mov al, drvBadCmd
    59 00006E7F 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    60 00006E85 B001                <1>     mov al, drvBadUnit 
    61 00006E87 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    62 00006E8B 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    63 00006E91 488D35C6030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    64 00006E98 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    65 00006E9C C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    66 00006E9F 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    67 00006EA3 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    68 00006EA7 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    69 00006EA9 488D0D9A000000      <1>     lea rcx, .msdTable
    70 00006EB0 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    71 00006EB4 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    72 00006EB6 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    73 00006EB8 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    74 00006EBB FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    75                              <1> .msdDriverExit:
    76 00006EBD 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    77 00006EC3 4158                <1>     pop r8
    78 00006EC5 5D                  <1>     pop rbp
    79 00006EC6 5F                  <1>     pop rdi
    80 00006EC7 5E                  <1>     pop rsi
    81 00006EC8 5A                  <1>     pop rdx
    82 00006EC9 59                  <1>     pop rcx
    83 00006ECA 5B                  <1>     pop rbx
    84 00006ECB 58                  <1>     pop rax
    85 00006ECC C3                  <1>     ret
    86                              <1> 
    87                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    88 00006ECD 4889FB              <1>     mov rbx, rdi
    89 00006ED0 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    90 00006ED3 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    91 00006ED5 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    92                              <1> ;Now fall through to general error
    93                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    94 00006ED8 B401                <1>     mov ah, 01h
    95 00006EDA CD33                <1>     int 33h ;Read status of last operation
    96 00006EDC 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    97 00006EDF B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    98 00006EE1 7460                <1>     je .msdWriteErrorCode 
    99 00006EE3 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   100 00006EE5 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   101 00006EE8 7459                <1>     je .msdWriteErrorCode 
   102 00006EEA 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   103 00006EED 7454                <1>     je .msdWriteErrorCode
   104                              <1> ;Device Not Ready
   105 00006EEF B002                <1>     mov al, 02h  ;Device not ready code
   106 00006EF1 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   107 00006EF4 744D                <1>     je .msdWriteErrorCode
   108 00006EF6 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   109 00006EFA 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   110                              <1> ;Write Protected
   111 00006EFE 30C0                <1>     xor al, al
   112 00006F00 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   113 00006F05 743C                <1>     je .msdWriteErrorCode
   114                              <1> ;CRC Error
   115 00006F07 B004                <1>     mov al, 04h     ;CRC error code
   116 00006F09 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   117 00006F0E 7433                <1>     je .msdWriteErrorCode
   118 00006F10 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   119 00006F15 742C                <1>     je .msdWriteErrorCode
   120 00006F17 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   121 00006F1C 7425                <1>     je .msdWriteErrorCode
   122                              <1> ;Seek Error
   123 00006F1E B006                <1>     mov al, 06h     ;Seek error code
   124 00006F20 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   125 00006F23 741E                <1>     je .msdWriteErrorCode
   126                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   127                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   128 00006F25 B007                <1>     mov al, 07h
   129 00006F27 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   130 00006F2A 7417                <1>     je .msdWriteErrorCode
   131                              <1> ;Sector Not Found
   132 00006F2C B008                <1>     mov al, 08h     ;Sector not found code
   133 00006F2E 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   134 00006F31 7410                <1>     je .msdWriteErrorCode
   135                              <1> ;Write faults
   136 00006F33 B00A                <1>     mov al, 0Ah     ;Write fault
   137 00006F35 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   138 00006F38 7409                <1>     je .msdWriteErrorCode
   139                              <1> ;Read faults
   140 00006F3A B00B                <1>     mov al, 0Bh     ;Read fault
   141 00006F3C 80F911              <1>     cmp cl, 11h     ;Read error
   142 00006F3F 7402                <1>     je .msdWriteErrorCode
   143                              <1> ;General Errors
   144 00006F41 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   145                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   146 00006F43 B480                <1>     mov ah, 80h ;Set error bit
   147 00006F45 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   148 00006F49 C3                  <1>     ret ;Return to set done bit
   149                              <1> .msdTable:
   150 00006F4A 0000                <1>     dw 0                            ;Function 0
   151 00006F4C 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   152 00006F4E 9800                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   153 00006F50 F800                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   154 00006F52 0401                <1>     dw .msdRead - .msdTable         ;Function 4
   155 00006F54 0000                <1>     dw 0                            ;Function 5
   156 00006F56 0000                <1>     dw 0                            ;Function 6
   157 00006F58 0000                <1>     dw 0                            ;Function 7
   158 00006F5A 3D01                <1>     dw .msdWrite - .msdTable        ;Function 8
   159 00006F5C 7601                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   160 00006F5E 0000                <1>     dw 0                            ;Function 10
   161 00006F60 0000                <1>     dw 0                            ;Function 11
   162 00006F62 BC01                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   163 00006F64 C801                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   164 00006F66 E301                <1>     dw .msdDevClose - .msdTable     ;Function 14
   165 00006F68 FE01                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   166 00006F6A 0000                <1>     dw 0                            ;Function 16
   167 00006F6C 0000                <1>     dw 0                            ;Function 17
   168 00006F6E 0000                <1>     dw 0                            ;Function 18
   169 00006F70 2902                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   170 00006F72 0000                <1>     dw 0                            ;Function 20
   171 00006F74 0000                <1>     dw 0                            ;Function 21
   172 00006F76 0000                <1>     dw 0                            ;Function 22
   173 00006F78 3502                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   174 00006F7A 4A02                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   175                              <1> 
   176                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   177                              <1> .msdMedChk:          ;Function 1
   178 00006F7C B005                <1>     mov al, 05h ;Bad request structure length
   179 00006F7E 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   180 00006F81 75C0                <1>     jne .msdWriteErrorCode
   181                              <1> 
   182 00006F83 E840020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   183 00006F88 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   184 00006F8A 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   185 00006F8F 488D0DBE020000      <1>     lea rcx, .msdBIOSmap
   186 00006F96 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   187 00006F99 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   188 00006F9C 753F                <1>     jnz .mmcNoChange
   189                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   190 00006F9E B416                <1>     mov ah, 16h 
   191 00006FA0 CD33                <1>     int 33h
   192 00006FA2 0F8230FFFFFF        <1>     jc .msdGenDiskError
   193 00006FA8 80FC80              <1>     cmp ah, 80h
   194 00006FAB 740E                <1>     je .mmcNoChangeLine
   195 00006FAD 80FC86              <1>     cmp ah, 86h
   196 00006FB0 7409                <1>     je .mmcNoChangeLine
   197 00006FB2 84E4                <1>     test ah, ah ;No change?
   198 00006FB4 7427                <1>     jz .mmcNoChange
   199 00006FB6 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   200 00006FB9 750D                <1>     jnz .mmcChange
   201                              <1> ;If nothing, fall through and test manually, should never happen though
   202                              <1> .mmcNoChangeLine:
   203                              <1> ;Now we test Media Descriptor
   204 00006FBB 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   205 00006FC0 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   206 00006FC3 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   207 00006FC6 7410                <1>     je .mmcUnsure
   208                              <1> .mmcChange:
   209 00006FC8 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   210 00006FCC 488D0577020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   211 00006FD3 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   212                              <1>     ;Check here if there were any open handles on the device when it was changed
   213 00006FD7 C3                  <1>     ret
   214                              <1> .mmcUnsure:
   215 00006FD8 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   216 00006FDC C3                  <1>     ret
   217                              <1> .mmcNoChange:
   218 00006FDD C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   219 00006FE1 C3                  <1>     ret
   220                              <1> 
   221                              <1> 
   222                              <1> .msdBuildBPB:        ;Function 2
   223 00006FE2 B005                <1>     mov al, 05h ;Bad request structure length
   224 00006FE4 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   225 00006FE7 0F8556FFFFFF        <1>     jne .msdWriteErrorCode
   226                              <1> 
   227 00006FED 4889DE              <1>     mov rsi, rbx
   228 00006FF0 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   229 00006FF5 488D0D58020000      <1>     lea rcx, .msdBIOSmap
   230 00006FFC 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   231 00006FFF 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   232 00007003 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   233 00007005 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   234 00007008 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   235 0000700D CD33                <1>     int 33h
   236 0000700F 0F82C3FEFFFF        <1>     jc .msdGenDiskError
   237                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   238 00007015 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   239 00007019 7418                <1>     je .mbbpb0
   240 0000701B 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   241 0000701F 7412                <1>     je .mbbpb0
   242 00007021 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   243 00007025 740C                <1>     je .mbbpb0
   244 00007027 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   245 0000702B B007                <1>     mov al, 07h ;Unknown media error code
   246 0000702D 0F8210FFFFFF        <1>     jb .msdWriteErrorCode
   247                              <1> .mbbpb0:
   248 00007033 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   249 00007036 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   250 00007039 B90F000000          <1>     mov ecx, bpbEx_size/8
   251 0000703E F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   252 00007041 C3                  <1>     ret
   253                              <1> .msdIOCTLRead:       ;Function 3, returns done
   254 00007042 B005                <1>     mov al, drvBadDrvReq
   255 00007044 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   256 00007047 0F85F6FEFFFF        <1>     jne .msdWriteErrorCode
   257 0000704D C3                  <1>     ret
   258                              <1> .msdRead:            ;Function 4
   259                              <1> ;Will read one sector at a time.
   260 0000704E B005                <1>     mov al, 05h ;Bad request structure length
   261 00007050 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   262 00007053 0F85EAFEFFFF        <1>     jne .msdWriteErrorCode
   263                              <1> 
   264 00007059 E86A010000          <1>     call .msdCheckDeviceType
   265                              <1> 
   266 0000705E 4889DF              <1>     mov rdi, rbx
   267 00007061 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   268                              <1> .msdr0:
   269 00007063 B682                <1>     mov dh, 82h ;LBA Read Sectors
   270 00007065 E83F010000          <1>     call .msdBlkIOCommon
   271 0000706A 0F825DFEFFFF        <1>     jc .msdIOError
   272 00007070 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   273 00007074 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   274 00007078 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   275 0000707C FFC6                <1>     inc esi
   276 0000707E 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   277 00007081 75E0                <1>     jne .msdr0
   278 00007083 4889FB              <1>     mov rbx, rdi
   279 00007086 C3                  <1>     ret
   280                              <1> .msdWrite:           ;Function 8
   281                              <1> ;Will write one sector at a time.
   282 00007087 B005                <1>     mov al, 05h ;Bad request structure length
   283 00007089 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 0000708C 0F85B1FEFFFF        <1>     jne .msdWriteErrorCode
   285                              <1> 
   286 00007092 E831010000          <1>     call .msdCheckDeviceType
   287                              <1> 
   288 00007097 4889DF              <1>     mov rdi, rbx
   289 0000709A 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   290                              <1> .msdw0:
   291 0000709C B683                <1>     mov dh, 83h ;LBA Write Sectors
   292 0000709E E806010000          <1>     call .msdBlkIOCommon
   293 000070A3 0F8224FEFFFF        <1>     jc .msdIOError
   294 000070A9 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   295 000070AD 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   296 000070B1 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   297 000070B5 FFC6                <1>     inc esi
   298 000070B7 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   299 000070BA 75E0                <1>     jne .msdw0
   300 000070BC 4889FB              <1>     mov rbx, rdi
   301 000070BF C3                  <1>     ret
   302                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   303                              <1> ;Will write one sector at a time and then verify it.
   304 000070C0 B005                <1>     mov al, 05h ;Bad request structure length
   305 000070C2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   306 000070C5 0F8578FEFFFF        <1>     jne .msdWriteErrorCode
   307                              <1> 
   308 000070CB E8F8000000          <1>     call .msdCheckDeviceType
   309                              <1> 
   310 000070D0 4889DF              <1>     mov rdi, rbx
   311 000070D3 31F6                <1>     xor esi, esi  ;Set counter to zero
   312                              <1> .msdwv0:
   313 000070D5 B683                <1>     mov dh, 83h ;LBA Write Sectors
   314 000070D7 E8CD000000          <1>     call .msdBlkIOCommon
   315 000070DC 0F82EBFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   316 000070E2 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   317 000070E4 E8C0000000          <1>     call .msdBlkIOCommon
   318 000070E9 0F82DEFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   319 000070EF 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   320 000070F3 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   321 000070F7 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   322 000070FB FFC6                <1>     inc esi
   323 000070FD 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   324 00007100 75D3                <1>     jne .msdwv0
   325 00007102 4889FB              <1>     mov rbx, rdi
   326 00007105 C3                  <1>     ret
   327                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   328 00007106 B005                <1>     mov al, drvBadDrvReq
   329 00007108 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   330 0000710B 0F8532FEFFFF        <1>     jne .msdWriteErrorCode
   331                              <1> 
   332 00007111 C3                  <1>     ret
   333                              <1> .msdDevOpen:         ;Function 13
   334 00007112 B005                <1>     mov al, drvBadDrvReq
   335 00007114 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   336 00007117 0F8526FEFFFF        <1>     jne .msdWriteErrorCode
   337                              <1> 
   338 0000711D 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   339 00007122 488D0D30010000      <1>     lea rcx, .msdHdlCnt
   340 00007129 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   341 0000712C C3                  <1>     ret
   342                              <1> .msdDevClose:        ;Function 14
   343 0000712D B005                <1>     mov al, drvBadDrvReq
   344 0000712F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   345 00007132 0F850BFEFFFF        <1>     jne .msdWriteErrorCode
   346                              <1> 
   347 00007138 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   348 0000713D 488D0D15010000      <1>     lea rcx, .msdHdlCnt
   349 00007144 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   350 00007147 C3                  <1>     ret
   351                              <1> .msdRemovableMedia:  ;Function 15
   352 00007148 B005                <1>     mov al, drvBadDrvReq
   353 0000714A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   354 0000714D 0F85F0FDFFFF        <1>     jne .msdWriteErrorCode
   355                              <1> 
   356 00007153 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   357 00007158 488D0DF5000000      <1>     lea rcx, .msdBIOSmap
   358 0000715F 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   359 00007162 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   360 00007167 31D2                <1>     xor edx, edx    ;Busy bit clear
   361 00007169 A880                <1>     test al, 80h
   362 0000716B 0F44CA              <1>     cmovz ecx, edx
   363 0000716E 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   364 00007172 C3                  <1>     ret
   365                              <1> .msdGenericIOCTL:    ;Function 19
   366 00007173 B005                <1>     mov al, drvBadDrvReq
   367 00007175 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   368 00007178 0F85C5FDFFFF        <1>     jne .msdWriteErrorCode
   369                              <1> 
   370 0000717E C3                  <1>     ret
   371                              <1> .msdGetLogicalDev:   ;Function 23
   372 0000717F B005                <1>     mov al, drvBadDrvReq
   373 00007181 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   374 00007184 0F85B9FDFFFF        <1>     jne .msdWriteErrorCode
   375                              <1> 
   376 0000718A 8A05C3000000        <1>     mov al, byte [.msdCurDev]
   377 00007190 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   378 00007193 C3                  <1>     ret
   379                              <1> .msdSetLogicalDev:   ;Function 24
   380 00007194 B005                <1>     mov al, drvBadDrvReq
   381 00007196 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   382 00007199 0F85A4FDFFFF        <1>     jne .msdWriteErrorCode
   383                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   384 0000719F 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   385 000071A2 8805AB000000        <1>     mov byte [.msdCurDev], al
   386 000071A8 C3                  <1>     ret
   387                              <1> 
   388                              <1> .msdBlkIOCommon:  ;Does block IO
   389                              <1> ;Called with rdi containing old rbx value and ah with function number
   390                              <1> ;rbp points to bpb
   391                              <1> ;Error handled by caller
   392                              <1> ;Sector count handled by caller
   393                              <1> ;Called with dh = BIOS function number
   394 000071A9 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   395 000071AE 8A90[54720000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   396 000071B4 31C9                <1>     xor ecx, ecx
   397 000071B6 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   398 000071B9 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   399 000071BD 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   400 000071C1 88F4                <1>     mov ah, dh
   401 000071C3 B001                <1>     mov al, 01h ;Do one sector at a time 
   402 000071C5 CD33                <1>     int 33h
   403                              <1>     return
    18                              <2> %%_ret:
    19 000071C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   404                              <1> 
   405                              <1> .msdCheckDeviceType:
   406                              <1> ;If the device numbers dont match but the bpb numbers do, print the message
   407                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   408                              <1> ;Returns ZF=NZ if media number changed!
   409 000071C8 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   410 000071CC 3A0581000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   411                              <1>     rete    ;Exit if equal (ZF=ZE)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000071D2 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   412                              <1> ;If not equal, check they use different BPB's before continuing
   413 000071D4 488D3583000000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
   414 000071DB C1E003              <1>     shl eax, 3
   415 000071DE 488B1406            <1>     mov rdx, qword [rsi + rax]  ;Get the bpbptr of this device too
   416 000071E2 4839D5              <1>     cmp rbp, rdx    ;Is the bpb of the transacting device the same as before?
   417 000071E5 7522                <1>     jne .msdCDTexit ;Exit by setting the new unit number
   418                              <1>     ;Here, device numbers are neq but bpb's are eq. Thus print message
   419 000071E7 C1E803              <1>     shr eax, 3 
   420 000071EA 0441                <1>     add al, "A" ;Convert to a letter
   421 000071EC 880534000000        <1>     mov byte [.msdStrikeLetter], al
   422 000071F2 488D351A000000      <1>     lea rsi, .msdStrike
   423 000071F9 B937000000          <1>     mov ecx, .msdStrikeL
   424                              <1> .msdCDTprintMessage:
   425 000071FE AC                  <1>     lodsb   ;Get the char in al, inc rsi
   426 000071FF CD49                <1>     int 49h ;Print char in al
   427 00007201 FFC9                <1>     dec ecx
   428 00007203 75F9                <1>     jnz .msdCDTprintMessage
   429 00007205 31C0                <1>     xor eax, eax
   430 00007207 CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   431                              <1> .msdCDTexit:
   432 00007209 E891FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   433 0000720E 31C0                <1>     xor eax, eax
   434 00007210 FFC0                <1>     inc eax ;Clear ZF flag (ZF=NZ)
   435 00007212 C3                  <1>     ret
   436                              <1> 
   437 00007213 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   437 0000721C 666F72206472697665- <1>
   437 00007225 20                  <1>
   438 00007226 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   438 0000722F 72696B650D0A616E79- <1>
   438 00007238 206B6579207768656E- <1>
   438 00007241 2072656164790D0A0A  <1>
   439                              <1> .msdStrikeL equ $ - .msdStrike
   440                              <1> 
   441 0000724A 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   442                              <1> ;LASTDRIVE default is 5
   443                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   444                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   445 00007253 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   446                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   447 00007254 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   448 00007259 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   449 0000725E 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   449 00007267 000000000000000000- <1>
   449 00007270 000000000000000000- <1>
   449 00007279 000000000000000000- <1>
   449 00007282 00000000            <1>
   450                              <1> .msdBPBblks  defaultBPB ;Add two default BPB's. If no remdrv, these are used
   450                              <2> .msdBPBblks :
   181 00007286 E9                  <2>  db 0E9h
   182 00007287 00                  <2>  db 00h
   183 00007288 90                  <2>  db 90h
   184 00007289 534350444F537631    <2>  db 'SCPDOSv1'
   185 00007291 0002                <2>  dw 0200h
   186 00007293 01                  <2>  db 01h
   187 00007294 0100                <2>  dw 0001h
   188 00007296 02                  <2>  db 02h
   189 00007297 E000                <2>  dw 00E0h
   190 00007299 400B                <2>  dw 0B40h
   191 0000729B F0                  <2>  db 0F0h
   192 0000729C 0900                <2>  dw 0009h
   193 0000729E 1200                <2>  dw 0012h
   194 000072A0 0200                <2>  dw 0002h
   195 000072A2 00000000            <2>  dd 0
   196 000072A6 00000000            <2>  dd 0
   197 000072AA 00                  <2>  db 00h
   198 000072AB 00                  <2>  db 00h
   199 000072AC 29                  <2>  db 29h
   200 000072AD 00000000            <2>  dd 0
   201 000072B1 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 000072BA 2020                <2>
   202 000072BC 4641543132202020    <2>  db 'FAT12   '
   203 000072C4 000000000000000000- <2>  db 58 dup 0
   203 000072CD 000000000000000000- <2>
   203 000072D6 000000000000000000- <2>
   203 000072DF 000000000000000000- <2>
   203 000072E8 000000000000000000- <2>
   203 000072F1 000000000000000000- <2>
   203 000072FA 00000000            <2>
   451                              <1>              defaultBPB ;If remdrvs found, these are overridden
   181 000072FE E9                  <2>  db 0E9h
   182 000072FF 00                  <2>  db 00h
   183 00007300 90                  <2>  db 90h
   184 00007301 534350444F537631    <2>  db 'SCPDOSv1'
   185 00007309 0002                <2>  dw 0200h
   186 0000730B 01                  <2>  db 01h
   187 0000730C 0100                <2>  dw 0001h
   188 0000730E 02                  <2>  db 02h
   189 0000730F E000                <2>  dw 00E0h
   190 00007311 400B                <2>  dw 0B40h
   191 00007313 F0                  <2>  db 0F0h
   192 00007314 0900                <2>  dw 0009h
   193 00007316 1200                <2>  dw 0012h
   194 00007318 0200                <2>  dw 0002h
   195 0000731A 00000000            <2>  dd 0
   196 0000731E 00000000            <2>  dd 0
   197 00007322 00                  <2>  db 00h
   198 00007323 00                  <2>  db 00h
   199 00007324 29                  <2>  db 29h
   200 00007325 00000000            <2>  dd 0
   201 00007329 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00007332 2020                <2>
   202 00007334 4641543132202020    <2>  db 'FAT12   '
   203 0000733C 000000000000000000- <2>  db 58 dup 0
   203 00007345 000000000000000000- <2>
   203 0000734E 000000000000000000- <2>
   203 00007357 000000000000000000- <2>
   203 00007360 000000000000000000- <2>
   203 00007369 000000000000000000- <2>
   203 00007372 00000000            <2>
   452 00007376 000000000000000000- <1>              db 3*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   452 0000737F 000000000000000000- <1>
   452 00007388 000000000000000000- <1>
   452 00007391 000000000000000000- <1>
   452 0000739A 000000000000000000- <1>
   452 000073A3 000000000000000000- <1>
   452 000073AC 000000000000000000- <1>
   452 000073B5 000000000000000000- <1>
   452 000073BE 000000000000000000- <1>
   452 000073C7 000000000000000000- <1>
   452 000073D0 000000000000000000- <1>
   452 000073D9 000000000000000000- <1>
   452 000073E2 000000000000000000- <1>
   452 000073EB 000000000000000000- <1>
   452 000073F4 000000000000000000- <1>
   452 000073FD 000000000000000000- <1>
   452 00007406 000000000000000000- <1>
   452 0000740F 000000000000000000- <1>
   452 00007418 000000000000000000- <1>
   452 00007421 000000000000000000- <1>
   452 0000742A 000000000000000000- <1>
   452 00007433 000000000000000000- <1>
   452 0000743C 000000000000000000- <1>
   452 00007445 000000000000000000- <1>
   452 0000744E 000000000000000000- <1>
   452 00007457 000000000000000000- <1>
   452 00007460 000000000000000000- <1>
   452 00007469 000000000000000000- <1>
   452 00007472 000000000000000000- <1>
   452 0000747B 000000000000000000- <1>
   452 00007484 000000000000000000- <1>
   452 0000748D 000000000000000000- <1>
   452 00007496 000000000000000000- <1>
   452 0000749F 000000000000000000- <1>
   452 000074A8 000000000000000000- <1>
   452 000074B1 000000000000000000- <1>
   452 000074BA 000000000000000000- <1>
   452 000074C3 000000000000000000- <1>
   452 000074CC 000000000000000000- <1>
   452 000074D5 000000000000000000  <1>
   453                              <1> endptr equ $
    47                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    48                                  ;Paragraph alignment
    49                                  %include "./Source/BSS/dosDynaDataArea.asm"
    50                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    51                              <1> ; the MCB chain!
    52                              <1> ddaStart:
    53 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    54                              <1> 
    55                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
    56                              <1> ;Create DPB chain of first 5 available DPB slots
    57 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
    58 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    59 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    60 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    61 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    62                              <1> 
    63                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    64                              <1> 
    65 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    66                              <1> 
    67 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    68 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    69                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    70                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    71                              <1> dynamicDataAreaLength equ $ - ddaStart
    71          ------------------  <1>  info: assembly required 1+15+2 passes

