     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported (must)
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   138                              <1> 
   139                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   140                              <1> 
   141 00000000 ??????              <1>     .jmpBoot                resb 3 
   142 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   143 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   144 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   145 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   146 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   147 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   148 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   149 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   150 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   151 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   152 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   153 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   154 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   155 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   156 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   157 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   158 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   159 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   160                              <1> 
   161                              <1> endstruc
   162                              <1> 
   163                              <1> struc FSInfo
   164                              <1> 
   165 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   166 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   167 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   168 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   169 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   170 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   171 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   172                              <1> 
   173                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsPhysDrive    equ 4000h   ;CDS initialised 
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> ;Critical Error handling
   169                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> ;------------------------------------------------------------------------;
   198                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   199                              <1> ; to an internal buffer, and then copying it to the specified location
   200                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   201                              <1> ; another request for the same sector from the same device is made, so 
   202                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   203                              <1> ; size, selected according to the largest detected sector size during 
   204                              <1> ; the initial loadup.
   205                              <1> ;
   206                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   207                              <1> ;
   208                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   209                              <1> ;------------------------------------------------------------------------;
   210                              <1> 
   211                              <1> struc bufferHdr
   212 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   213 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> ;Note! A buffer is marked as referenced IF it has been accessed via 
   230                              <1> ; a Read or Write call. 
   231                              <1> ; When a buffer is used temporarily for internal purposes (as when DOS
   232                              <1> ; gives a driver a buffer) and then DOS reads data from that buffer (such as
   233                              <1> ; a BUILD BPB situation), the data is left as unreferenced as the use for that 
   234                              <1> ; buffer goes away before the end of the DOS call, and there is no danger of.
   235                              <1> ; of misbehaviour.
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc fcb
   283                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   284 00000000 ??                  <1>     .driveNum   resb 1
   285 00000001 ????????????????    <1>     .filename   resb 8
   286 00000009 ??????              <1>     .fileext    resb 3
   287 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   288                              <1> ;One block consists of 128 records, of size denoted in the below
   289 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   290 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   291 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   292 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   293 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   294 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   295 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   296 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   297 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   298                              <1>     ;If record size > 64, high byte is ignored.
   299                              <1>     ;Used for random read and write operations to find the right record
   300                              <1> endstruc
   301                              <1> 
   302                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   303 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   304 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   305 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   306 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   307 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   308 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   309 00000016 ????                <1>     .fileTime   resw 1  ;File time
   310 00000018 ????                <1>     .fileDate   resw 1  ;File date
   311 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   312 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc psp
   316 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   317 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   318 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   319 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   320 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   321 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   322 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   323 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   324 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   325 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   326 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   327 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   328 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   329                              <1> ;Extra handle arrays are grouped into a linked list
   330                              <1> ;The below are in the same place as in DOS
   331 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   332 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   333                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   334 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   335 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc clkStruc
   339 00000000 ????                <1>     .dateWord   resw 1
   340 00000002 ??                  <1>     .minutes    resb 1
   341 00000003 ??                  <1>     .hours      resb 1
   342 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   343 00000005 ??                  <1>     .seconds    resb 1
   344                              <1> endstruc
   345                              <1> 
   346                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   347                              <1> ;for a space of 64Gb
   348                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   349                              <1> 
   350                              <1> ;Critical Error AH bitfield equates
   351                              <1> critRead    equ 0h
   352                              <1> critWrite   equ 1h
   353                              <1> critDOS     equ 0h
   354                              <1> critFAT     equ 2h
   355                              <1> critDir     equ 4h
   356                              <1> critData    equ 6h
   357                              <1> critFailOK  equ 8h
   358                              <1> critRetryOK equ 10h
   359                              <1> critIgnorOK equ 20h
   360                              <1> critCharDev equ 80h
   361                              <1> 
   362                              <1> critIgnore  equ 0
   363                              <1> critRetry   equ 1
   364                              <1> critAbort   equ 2
   365                              <1> critFail    equ 3
   366                              <1> 
   367                              <1> ;MISC ASCII control chars
   368                              <1> NUL equ 00h ;^@         | ASCII Null
   369                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   370                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   371                              <1> BEL equ 07h ;^G         | ASCII Bell
   372                              <1> BSP equ 08h ;^H         | ASCII Backspace
   373                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   374                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   375                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   376                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   377                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   378                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   379                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   380                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   381                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   382                              <1> SPC equ 20h ;Printable  | ASCII Space
   383                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   384                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   385                              <1> 
   386                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   387                              <1> ;Extended Ascii Codes
   388                              <1> eF1     equ 3Bh ;F1 second byte
   389                              <1> eF2     equ 3Ch ;F2 second byte
   390                              <1> eF3     equ 3Dh ;F3 second byte
   391                              <1> eF4     equ 3Eh ;F4 second byte
   392                              <1> eF5     equ 3Fh ;F5 second byte
   393                              <1> eF6     equ 40h ;F6 second byte
   394                              <1> eF7     equ 41h ;F7 second byte
   395                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   396                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   397                              <1> eIns    equ 52h ;Insert second byte
   398                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS true
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST true
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %define currSegVBase 0
    13                                  %include "./Source/Sysinit/sysInit.asm"
    14                              <1> ; We arrive here with the following values in the registers.
    15                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    16                              <1> ; dx  = Int 33h boot device number
    17                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    18                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    19 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    20 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    20 0000000B 909090909090909090- <1>
    20 00000014 909090909090909090- <1>
    20 0000001D 909090909090909090- <1>
    20 00000026 909090909090909090- <1>
    20 0000002F 909090909090909090- <1>
    20 00000038 909090909090909090- <1>
    20 00000041 909090909090909090- <1>
    20 0000004A 909090909090909090- <1>
    20 00000053 909090909090909090- <1>
    20 0000005C 909090909090909090- <1>
    20 00000065 909090909090909090- <1>
    20 0000006E 909090909090909090- <1>
    20 00000077 909090909090909090- <1>
    20 00000080 909090909090909090- <1>
    20 00000089 909090909090909090- <1>
    20 00000092 909090909090909090- <1>
    20 0000009B 909090909090909090- <1>
    20 000000A4 909090909090909090- <1>
    20 000000AD 909090909090909090- <1>
    20 000000B6 909090909090909090- <1>
    20 000000BF 909090909090909090- <1>
    20 000000C8 909090909090909090- <1>
    20 000000D1 909090909090909090- <1>
    20 000000DA 909090909090909090- <1>
    20 000000E3 909090909090909090- <1>
    20 000000EC 909090909090909090- <1>
    20 000000F5 909090909090909090- <1>
    20 000000FE 9090                <1>
    21                              <1> ;First move the alignment of the DOSSEG to 4Kb
    22 00000100 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    23 00000101 52                  <1>     push rdx    ;Save dl on stack briefly
    24 00000102 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    25 00000107 0F32                <1>     rdmsr
    26 00000109 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    27 0000010B 48C1E720            <1>     shl rdi, 20h        ;Shift high
    28 0000010F 89C7                <1>     mov edi, eax        ;Get the low dword in
    29 00000111 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    30 00000114 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    31 0000011B 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    32 00000122 89F8                <1>     mov eax, edi
    33 00000124 4889FA              <1>     mov rdx, rdi
    34 00000127 48C1EA20            <1>     shr rdx, 20h
    35 0000012B 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    36 0000012D 5A                  <1>     pop rdx
    37                              <1> ;------------------------------------------------;
    38                              <1> ;              Connect Debugger                  ;
    39                              <1> ;------------------------------------------------;
    40                              <1> %if DEBUG
    41                              <1> ;Only connect if in debug mode
    42                              <1>     mov eax, 0C501h ;Connect debugger
    43                              <1>     int 35h
    44                              <1> %endif
    45                              <1> ;------------------------------------------------;
    46                              <1> ;           Sanitise the data area               ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ; This call initialises ALL fields in the DOS    ;
    49                              <1> ; data area with 0's. Thus any fields, which     ;
    50                              <1> ; need to be initialised with a 0 value, are     ;
    51                              <1> ; initialised for free.                          ;
    52                              <1> ;------------------------------------------------;
    53 0000012E B9[83D80300]        <1>     mov ecx, dSegLen
    54 00000133 30C0                <1>     xor al, al
    55 00000135 57                  <1>     push rdi    ;Temp save rdi on the stack
    56 00000136 F3AA                <1>     rep stosb
    57 00000138 5F                  <1>     pop rdi
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Start saving Basic DOS data           ;
    60                              <1> ;------------------------------------------------;
    61 00000139 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    62                              <1> ;Copy DOS to its final resting place
    63 00000141 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    63 00000146 [00C00300]          <1>
    64 0000014A 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    64 0000014F [08C00300]          <1>
    65 00000153 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    66 00000156 4881C7[83D80300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    67 0000015D 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    68 00000164 B900100000          <1>     mov ecx, 1000h
    69 00000169 F348A5              <1>     rep movsq
    70                              <1> 
    71 0000016C CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    72 0000016E 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    73 00000172 664489C0            <1>     mov ax, r8w
    74 00000176 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    75 0000017E 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    76 00000186 64C60425[69C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    76 0000018E 05                  <1>
    77                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
    78 0000018F 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    78 00000194 [8FC00300]0500      <1>
    79 0000019A 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    79 0000019F [91C00300]1400      <1>
    80 000001A5 64C60425[6AC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    80 000001AD 01                  <1>
    81                              <1>     ;If no detected Int 33h devices, halt 
    82 000001AE 49C1E810            <1>     shr r8, 2*8
    83 000001B2 4584C0              <1>     test r8b, r8b
    84 000001B5 0F848C0A0000        <1>     jz errorInit
    85                              <1> ;------------------------------------------------;
    86                              <1> ;          Add additional page tables            ;
    87                              <1> ;------------------------------------------------;
    88                              <1> ;This will allow for up to 64Gb of addressible space
    89 000001BB 4889EF              <1>     mov rdi, rbp
    90                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    91 000001BE B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    92 000001C3 57                  <1>     push rdi
    93 000001C4 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    93 000001CD 00                  <1>
    94                              <1> pdtLoop:
    95 000001CE 48AB                <1>     stosq
    96 000001D0 480500002000        <1>     add rax, 200000h
    97 000001D6 FFC9                <1>     dec ecx
    98 000001D8 75F4                <1>     jnz pdtLoop
    99 000001DA 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   100                              <1> ;Now we add every 4kb page to the page directory pointer table
   101                              <1> ;15 4kb pages to consider
   102 000001DB 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   103 000001DE 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   104 000001E1 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   105 000001E8 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   106 000001EF B93C000000          <1>     mov ecx, 60
   107 000001F4 480D03000000        <1>     or rax, 3h      ;present and r/w
   108                              <1> pdptLoop:
   109 000001FA 48AB                <1>     stosq
   110 000001FC 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   111 00000202 FFC9                <1>     dec ecx
   112 00000204 75F4                <1>     jnz pdptLoop
   113 00000206 0F20DF              <1>     mov rdi, cr3
   114 00000209 0F22DF              <1>     mov cr3, rdi
   115                              <1> 
   116                              <1> ;------------------------------------------------;
   117                              <1> ;                   MCB inits                    ;
   118                              <1> ;------------------------------------------------;
   119                              <1> mcbInit:
   120 0000020C B820E80000          <1>     mov eax, 0E820h
   121 00000211 CD35                <1>     int 35h
   122                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   123 00000213 E804010000          <1>     call .mcbFindAddress
   124 00000218 7349                <1>     jnc .mcbi1  ;If found, proceed
   125                              <1>     ;Here, we try use E801h
   126 0000021A B801E80000          <1>     mov eax, 0E801h
   127 0000021F CD35                <1>     int 35h
   128 00000221 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   129 00000224 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   130 00000227 85C0                <1>     test eax, eax
   131 00000229 741B                <1>     jz .worst
   132 0000022B C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   133 0000022E C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   134 00000231 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   135 00000239 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   136 00000241 E909010000          <1>     jmp mcbBuild
   137                              <1> .worst:
   138                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   139 00000246 B800002000          <1>     mov eax, 200000h
   140 0000024B 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   140 00000250 [08C00300]          <1>
   141 00000254 29D8                <1>     sub eax, ebx
   142 00000256 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   143 0000025E E9EC000000          <1>     jmp mcbBuild 
   144                              <1> .mcbi1:
   145 00000263 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   146 00000266 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   146 0000026F 00                  <1>
   147 00000270 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   148 00000274 0F85C2000000        <1>     jne .mcbFail
   149 0000027A 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   150                              <1>     ;PCI hole always exists so this value will always be a dword
   151 0000027E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   152 00000286 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   153 00000289 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   154 0000028C 4881FB00000001      <1>     cmp rbx, 1000000h  
   155 00000293 773C                <1>     ja .skipISA
   156                              <1> ;Here we deal with ISA hole issues
   157 00000295 B820E80000          <1>     mov eax, 0E820h
   158 0000029A CD35                <1>     int 35h
   159 0000029C 48B800000001000000- <1>     mov rax, 1000000h
   159 000002A5 00                  <1>
   160 000002A6 E871000000          <1>     call .mcbFindAddress
   161 000002AB 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   162 000002B1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   162 000002BA 00                  <1>
   163 000002BB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   164 000002BF 0F858A000000        <1>     jne mcbBuild  
   165 000002C5 488B5808            <1>     mov rbx, qword [rax + 8]
   166 000002C9 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   167                              <1> .skipISA:
   168 000002D1 B820E80000          <1>     mov eax, 0E820h
   169 000002D6 CD35                <1>     int 35h
   170 000002D8 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   170 000002E1 00                  <1>
   171 000002E2 E835000000          <1>     call .mcbFindAddress
   172 000002E7 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   173 000002E9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   173 000002F2 00                  <1>
   174 000002F3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   175 000002F7 7556                <1>     jne mcbBuild   
   176 000002F9 488B5808            <1>     mov rbx, qword [rax + 8]
   177                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   178 000002FD 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   178 00000306 00                  <1>
   179 00000307 4839CB              <1>     cmp rbx, rcx
   180 0000030A 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   181 0000030E 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   181 00000313 [1BC00300]          <1>
   182 00000317 E933000000          <1>     jmp mcbBuild
   183                              <1> .mcbFindAddress:
   184                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   185                              <1> ;Entry: rax = Address of arena to search for
   186                              <1> ;       rsi = Pointer to memory map
   187                              <1> ;       ecx = Number of 24 byte entries
   188                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   189                              <1> ;       CF=CY : value in rax not found
   190 0000031C 56                  <1>     push rsi
   191 0000031D 51                  <1>     push rcx
   192 0000031E 50                  <1>     push rax
   193                              <1> .mfa0:
   194 0000031F 483B06              <1>     cmp rax, qword [rsi]
   195 00000322 7410                <1>     je .mcbAddressFound
   196 00000324 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   197 0000032B FFC9                <1>     dec ecx
   198 0000032D 79F0                <1>     jns .mfa0
   199                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   200 0000032F 58                  <1>     pop rax
   201 00000330 59                  <1>     pop rcx
   202 00000331 5E                  <1>     pop rsi
   203 00000332 F9                  <1>     stc
   204 00000333 C3                  <1>     ret
   205                              <1> .mcbAddressFound:
   206 00000334 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   207 00000337 59                  <1>     pop rcx ;Pop old rax value off
   208 00000338 59                  <1>     pop rcx
   209 00000339 5E                  <1>     pop rsi
   210 0000033A F8                  <1>     clc
   211 0000033B C3                  <1>     ret
   212                              <1> .mcbFail:
   213 0000033C 488D2D2B090000      <1>     lea rbp, mcbFailmsg
   214 00000343 B804130000          <1>     mov eax, 1304h
   215 00000348 CD30                <1>     int 30h
   216 0000034A E9F8080000          <1>     jmp errorInit
   217                              <1> 
   218                              <1> mcbBuild:
   219                              <1> ;Actually build the MCB chain here
   220                              <1> ;Start by computing the difference between userbase and DOS area
   221                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   222 0000034F 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   222 00000354 [08C00300]          <1>
   223 00000358 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   224 0000035F 56                  <1>     push rsi    ;Save ptr
   225 00000360 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   226 00000367 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   227 0000036A 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   228 00000372 5B                  <1>     pop rbx
   229 00000373 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   230 00000376 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   231 0000037E 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   232 00000386 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   233 00000389 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   234 0000038C 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   234 00000391 [24C00300]          <1>
   235                              <1> 
   236                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   237 00000395 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   237 0000039D 00000000            <1>
   238 000003A1 746E                <1>     jz .skipISA
   239                              <1>     ;Here if an ISA hole exists, place a MCB around it
   240 000003A3 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   241                              <1>     ;Remove one MCB worth of space from alloc
   242 000003AA 31C9                <1>     xor ecx, ecx
   243 000003AC 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   244 000003AF 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   245 000003B5 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   246 000003B8 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   247 000003BB 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   248 000003BE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   249 000003C1 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   250 000003C9 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   250 000003D2 00                  <1>
   251 000003D3 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   252 000003D6 480510000000        <1>     add rax, mcb_size
   253 000003DC 4829C1              <1>     sub rcx, rax    ;Take their difference
   254 000003DF C1E904              <1>     shr ecx, 4
   255 000003E2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   256 000003E5 C1E104              <1>     shl ecx, 4  ;Get bytes again
   257 000003E8 4881C310000000      <1>     add rbx, mcb_size
   258 000003EF 4801CB              <1>     add rbx, rcx
   259                              <1>     ;RBX should now be at 16Mb
   260 000003F2 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   261 000003F5 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   262 000003FD 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   263 00000405 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   264 00000408 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   265 0000040E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   266                              <1> .skipISA:
   267                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   268                              <1>     ;rbx points to a block with "Z" marker
   269 00000411 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   269 00000419 00000000            <1>
   270 0000041D 7470                <1>     jz .exit
   271                              <1>     ;Add PCI hole MCB
   272 0000041F 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 00000426 31C9                <1>     xor ecx, ecx
   275 00000428 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 0000042B 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 00000431 C1E104              <1>     shl ecx, 4  ;Get bytes
   278 00000434 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   279 00000437 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 0000043A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 0000043D 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 00000445 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   282 0000044E 00                  <1>
   283 0000044F 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 00000452 480510000000        <1>     add rax, mcb_size
   285 00000458 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 0000045B C1E904              <1>     shr ecx, 4
   287 0000045E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 00000461 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 00000464 4881C310000000      <1>     add rbx, mcb_size
   290 0000046B 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 4Gb
   292 0000046E C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 00000471 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 00000479 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   294 0000047E [1BC00300]          <1>
   295 00000482 48C1E904            <1>     shr rcx, 4
   296 00000486 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000048C 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .exit:
   299                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   300 0000048F 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   301                              <1> ;------------------------------------------------;
   302                              <1> ;          Kernel inits and adjustments          ;
   303                              <1> ;------------------------------------------------;
   304                              <1> ;Adjust Interrupt Entries Int 40h-49h
   305                              <1> adjInts:
   306 00000496 B340                <1>     mov bl, 40h
   307 00000498 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   308 0000049D CD35                <1>     int 35h
   309 0000049F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   310 000004A4 488D3D38080000      <1>     lea rdi, intData
   311 000004AB 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   312                              <1> .ai0:
   313 000004AD B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   314 000004B2 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   315 000004B5 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   316                              <1> .ai1:
   317 000004B8 CD35                <1>     int 35h
   318 000004BA 4881C708000000      <1>     add rdi, 8
   319 000004C1 FFC1                <1>     inc ecx
   320 000004C3 81F950000000        <1>     cmp ecx, 50h
   321 000004C9 75E2                <1>     jne .ai0
   322                              <1> 
   323                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   324                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   325                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   326                              <1>     %if DEBUG
   327                              <1> debugPopUpMsg:
   328                              <1>     push rbx
   329                              <1>     push rbp
   330                              <1>     push rcx
   331                              <1>     push rdx
   332                              <1>     mov ecx, 53 ;A large number of lines
   333                              <1>     xor edx, edx    ;COM 1
   334                              <1> .cls:
   335                              <1>     mov eax, 010Ah ;Transmit Line feed
   336                              <1>     int 34h
   337                              <1>     dec ecx
   338                              <1>     jnz .cls
   339                              <1>     lea rbx, qword [debPrintNullString + rbp]
   340                              <1>     lea rbp, .msg
   341                              <1>     call rbx
   342                              <1>     jmp short .exit
   343                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   344                              <1> .exit:
   345                              <1>     pop rdx
   346                              <1>     pop rcx
   347                              <1>     pop rbp
   348                              <1>     pop rbx
   349                              <1>     %endif
   350                              <1> 
   351                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   352 000004CB 488D1575070000      <1>     lea rdx, errorInit ;Get segment start address
   353 000004D2 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   354 000004D7 CD41                <1>     int 41h
   355 000004D9 488D1567070000      <1>     lea rdx, errorInit ;Get segment start address
   356 000004E0 B844250000          <1>     mov eax, 2544h
   357 000004E5 CD41                <1>     int 41h
   358                              <1> ;------------------------------------------------;
   359                              <1> ;          Driver Adjustments and inits          ;
   360                              <1> ;------------------------------------------------;
   361                              <1> ;Modify the pointers in nData before putting them in the data area
   362 000004E7 48012D75080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   363 000004EE 48012D78080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   364 000004F5 48012D79080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   365                              <1> ;Copy the Null driver to its location in Sysvars
   366 000004FC B922000000          <1>     mov ecx, drvHdr_size
   367 00000501 488D355B080000      <1>     lea rsi, qword [nData]
   368 00000508 488DBD[6CC00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   369 0000050F F3A4                <1>     rep movsb   
   370                              <1> 
   371                              <1> ;Adjust the addresses in the other driver headers 
   372 00000511 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   372 00000513 [E22F000000000000]  <1>
   373 0000051B B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   374 00000520 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   375                              <1> adjDrivers:
   376 00000524 E80B070000          <1>     call adjustDrvHdr
   377 00000529 E2F9                <1>     loop adjDrivers
   378                              <1> 
   379                              <1> ;Open NUL
   380                              <1> ;NUL opened
   381                              <1> ;Open CON
   382                              <1> conInit:    ;Rather than keeping this resident... do it here
   383                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   384 0000052B 488D95[C9320000]    <1>     lea rdx, qword [rbp + fastOutput]
   385 00000532 B849250000          <1>     mov eax, 2549h
   386 00000537 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   387 00000539 488D95[D1320000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   388 00000540 B83B250000          <1>     mov eax, 253Bh
   389 00000545 CD41                <1>     int 41h ;Hook int 3Bh
   390                              <1> .ci0:
   391 00000547 B401                <1>     mov ah, 01      ;Get buffer status
   392 00000549 CD36                <1>     int 36h
   393 0000054B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   394 0000054D 30E4                <1>     xor ah, ah
   395 0000054F CD36                <1>     int 36h ;Read key to flush from buffer
   396 00000551 EBF4                <1>     jmp short .ci0
   397                              <1> .ci1:
   398 00000553 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   399 00000558 CD30                <1>     int 30h
   400 0000055A B402                <1>     mov ah, 02h
   401 0000055C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   402 0000055E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   403 00000560 CD30                <1>     int 30h
   404 00000562 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   405 00000564 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   406 00000569 CD30                <1>     int 30h
   407                              <1> 
   408                              <1>     ;Save ptr to ConHdr in Sysvars
   409 0000056B 488D85[E22F0000]    <1>     lea rax, qword [rbp + conHdr]
   410 00000572 6448890425-         <1>     mov qword fs:[vConPtr], rax
   410 00000577 [44C00300]          <1>
   411                              <1> 
   412                              <1>     ;Fix the ext ESC function handler address
   413 0000057B 488D85[66150000]    <1>     lea rax, qword [rbp + editKeys]
   414 00000582 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   414 00000587 [59000000]          <1>
   415                              <1> 
   416                              <1> ;CLOCK init prock
   417                              <1> ;Set the time and date using the RTC (if present)
   418                              <1> clkInit:
   419                              <1>    ;Save ptr to ClkHdr in Sysvars first
   420 0000058B 488D85[48300000]    <1>     lea rax, qword [rbp + clkHdr]
   421 00000592 6448890425-         <1>     mov qword fs:[clockPtr], rax
   421 00000597 [3CC00300]          <1>
   422                              <1> ;CH - Hours, in BCD
   423                              <1> ;CL - Minutes, in BCD
   424                              <1> ;DH - Seconds, in BCD
   425 0000059B B402                <1>     mov ah, 02  ;Read RTC Time
   426 0000059D CD3A                <1>     int 3Ah
   427 0000059F 7271                <1>     jc .clkEnd  ;if error, just exit
   428                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   429 000005A1 0FB6C5              <1>     movzx eax, ch   ;Hours
   430 000005A4 E84D000000          <1>     call .bcd2Bin
   431 000005A9 88C5                <1>     mov ch, al
   432 000005AB 0FB6C1              <1>     movzx eax, cl     ;Mins
   433 000005AE E843000000          <1>     call .bcd2Bin
   434 000005B3 88C1                <1>     mov cl, al
   435 000005B5 0FB6C6              <1>     movzx eax, dh   ;Seconds
   436 000005B8 E839000000          <1>     call .bcd2Bin
   437 000005BD 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   438 000005BF 89C2                <1>     mov edx, eax
   439 000005C1 B42D                <1>     mov ah, 2Dh ;DOS Set Time
   440 000005C3 CD41                <1>     int 41h
   441                              <1> ;Now get the date from RTC
   442                              <1> ;CL - Year, in BCD
   443                              <1> ;DH - Month, in BCD
   444                              <1> ;DL - Day, in BCD
   445 000005C5 B404                <1>     mov ah, 04  ;Read RTC Date
   446 000005C7 CD3A                <1>     int 3Ah
   447 000005C9 7247                <1>     jc .clkEnd
   448                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   449 000005CB 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   450 000005CE E823000000          <1>     call .bcd2Bin
   451 000005D3 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   452 000005D6 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   453 000005DC 0FB6C6              <1>     movzx eax, dh   ;Get Months
   454 000005DF E812000000          <1>     call .bcd2Bin
   455 000005E4 88C6                <1>     mov dh, al  
   456 000005E6 0FB6C2              <1>     movzx eax, dl   ;Get day
   457 000005E9 E808000000          <1>     call .bcd2Bin
   458 000005EE 88C2                <1>     mov dl, al
   459 000005F0 B42B                <1>     mov ah, 2Bh ;DOS Set Date
   460 000005F2 CD41                <1>     int 41h
   461 000005F4 EB1C                <1>     jmp short .clkEnd
   462                              <1> .bcd2Bin:
   463                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   464 000005F6 51                  <1>     push rcx
   465 000005F7 89C1                <1>     mov ecx, eax
   466 000005F9 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   467 000005FE 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   468 00000604 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   469 00000607 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   470                              <1> .b2blp:
   471 0000060A 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   472 0000060C FFC9                <1>     dec ecx
   473 0000060E 75FA                <1>     jnz .b2blp
   474                              <1> .b2bexit:
   475 00000610 59                  <1>     pop rcx
   476 00000611 C3                  <1>     ret
   477                              <1> .clkEnd:
   478                              <1> ;------------------------------------------------;
   479                              <1> ;         Link DOS to temporary Buffer           ;
   480                              <1> ;------------------------------------------------;
   481                              <1> tempBufferInit:
   482 00000612 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   483 00000619 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   483 0000061E [4EC00300]          <1>
   484 00000622 31C0                <1>     xor eax, eax
   485 00000624 48FFC8              <1>     dec rax
   486 00000627 48AB                <1>     stosq   ;.nextBufPtr, end of list
   487 00000629 AA                  <1>     stosb   ;.driveNumber, Free entry
   488 0000062A 48FFC0              <1>     inc rax
   489 0000062D AA                  <1>     stosb   ;.bufferFlags, No flags
   490                              <1> ;------------------------------------------------;
   491                              <1> ;         Init msd driver, create DPB            ;
   492                              <1> ;------------------------------------------------;
   493                              <1> storageInits:
   494                              <1> ;First save dpb pointer in sysvars
   495 0000062E 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   496 00000635 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   496 0000063A [2CC00300]          <1>
   497                              <1> ;Open Mass Storage
   498                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   499                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   500                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   501                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   502                              <1>     ;mov al, byte fs:[numPhysVol]
   503                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   504                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   505                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   506                              <1>     ;Check if it returned OK first!
   507                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   508                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   509                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   510                              <1>     ;mov byte fs:[numPhysVol], al
   511                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   512                              <1> 
   513                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   514 0000063E E842070000          <1>     call diskInit
   515 00000643 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   516 00000646 648A0425[68C00300]  <1>     mov al, byte fs:[numPhysVol]
   517 0000064E 488D95[64390000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   518 00000655 30C9                <1>     xor cl, cl  ;Clear counter
   519 00000657 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   519 0000065C [2CC00300]          <1>
   520                              <1> .si0:   
   521 00000660 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   522 00000663 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   523 00000665 CD41                <1>     int 41h
   524                              <1> ;Add other data to DPB
   525 00000667 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   526 0000066A 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   527 0000066D 50                  <1>     push rax
   528 0000066E 488D87[6A300000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   529 00000675 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   530 00000679 58                  <1>     pop rax
   531 0000067A FEC1                <1>     inc cl
   532 0000067C 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   533 0000067E 7416                <1>     je .si1
   534 00000680 50                  <1>     push rax
   535 00000681 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   536 00000685 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   537 00000689 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   538 0000068C 58                  <1>     pop rax
   539 0000068D 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   540 00000694 EBCA                <1>     jmp short .si0
   541                              <1> .si1:
   542                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   543 00000696 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   544 0000069E 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   545                              <1> ;------------------------------------------------;
   546                              <1> ;          Find largest sector size              ;
   547                              <1> ;------------------------------------------------;
   548                              <1> sectorSizeSearch:
   549                              <1> ;Done by reading BPB's for each drive
   550 000006A1 488D9D[64390000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   551                              <1>     
   552                              <1>     ;Go thru each block individually
   553 000006A8 31C0                <1>     xor eax, eax
   554 000006AA 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   555                              <1> .findLargest:
   556 000006AD 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   557 000006B1 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   558 000006B6 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   559 000006BD 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   560 000006C0 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   561 000006C3 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   562 000006C5 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   562 000006CA [4CC00300]          <1>
   563                              <1>     
   564                              <1> ;------------------------------------------------;
   565                              <1> ;                 Temp CDS inits                 ;
   566                              <1> ;------------------------------------------------;
   567                              <1> tempCDS:
   568                              <1> ;Build a temporary CDS for Drive A to use it for booting
   569 000006CE 488DBD[94C50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   570 000006D5 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   570 000006DA [56C00300]          <1>
   571                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   572 000006DE C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   573 000006E4 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   574 000006EA 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   574 000006EF [2CC00300]          <1>
   575 000006F3 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   576 000006F7 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   577                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   578                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   579                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   580                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   581                              <1> ;------------------------------------------------;
   582                              <1> ;     Set up general PSP areas and DOS vars      ;
   583                              <1> ;------------------------------------------------;
   584                              <1> ;Additional DOS Vars init
   585                              <1>     ;xor eax, eax
   586                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   587                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   588                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   589                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   590                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   591                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   592 000006FD 64C60425[65C30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   592 00000705 FF                  <1>
   593                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   594                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   595 00000706 64C60425[2DC30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   595 0000070E 2F                  <1>
   596                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   597                              <1> 
   598                              <1> ;Set network machine name to... nothing!
   599 0000070F 488DBD[32C30300]    <1>     lea rdi, qword [rbp + machineName]
   600 00000716 B910000000          <1>     mov ecx, 10h    ;16 chars long
   601 0000071B B020                <1>     mov al, SPC ;Space char
   602 0000071D F3AA                <1>     rep stosb   ;Fill with space chars
   603                              <1>     ;xor al, al
   604                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   605                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   606                              <1> 
   607                              <1> ;Patch Data Table init
   608 0000071F 488DBD[42C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   609 00000726 488D85[37290000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   610 0000072D 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   611 0000072F 488D85[41290000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   612 00000736 48AB                <1>     stosq
   613 00000738 488D85[4B290000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   614 0000073F 48AB                <1>     stosq
   615 00000741 488D85[55290000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   616 00000748 48AB                <1>     stosq
   617                              <1> 
   618                              <1> ;Initial PSP Init
   619 0000074A 488D1DAFF8FFFF      <1>     lea rbx, qword [tempPSP]
   620 00000751 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   620 00000756 [7BC30300]          <1>
   621 0000075A 53                  <1>     push rbx
   622 0000075B 4881C380000000      <1>     add rbx, psp.dta
   623 00000762 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   623 00000767 [73C30300]          <1>
   624 0000076B 5B                  <1>     pop rbx
   625 0000076C 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   626 00000771 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   627 00000778 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   628 0000077C 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   629 00000780 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   630 00000784 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   631 00000788 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   631 00000791 FF                  <1>
   632 00000792 48AB                <1>     stosq   ;8 bytes
   633 00000794 31C0                <1>     xor eax, eax
   634 00000796 50                  <1>     push rax    ;Save 0 on the stack
   635 00000797 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   636 0000079A 48AB                <1>     stosq   ;16 bytes
   637 0000079C AB                  <1>     stosd   ;20 bytes
   638 0000079D 58                  <1>     pop rax ;Get 0 back
   639 0000079E 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   640 000007A6 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   641 000007AA C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   642 000007AE 4889DA              <1>     mov rdx, rbx
   643 000007B1 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   644 000007B6 CD41                <1>     int 41h
   645 000007B8 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   646 000007BC B843350000          <1>     mov eax, 3543h
   647 000007C1 CD41                <1>     int 41h
   648 000007C3 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   649 000007C7 B844350000          <1>     mov eax, 3544h
   650 000007CC CD41                <1>     int 41h
   651 000007CE 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   652                              <1> 
   653 000007D2 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   654 000007D7 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   655 000007DB F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   656                              <1> ;------------------------------------------------;
   657                              <1> ;          Default File Handle Creation          ;
   658                              <1> ;                                                ;
   659                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   660                              <1> ;------------------------------------------------;
   661                              <1> defaultFileHandles:
   662                              <1> ;Fill in the default file table entries
   663 000007DD 488D9D[93C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   664 000007E4 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   665 000007EB 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   666 000007F1 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   666 000007F6 [34C00300]          <1>
   667 000007FA 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   667 00000803 20                  <1>
   668                              <1> ;GOTO FIRST FILE 
   669 00000804 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   670                              <1> ;Write AUX
   671 0000080B 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   672 00000810 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   673 00000816 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   674 0000081A C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   675                              <1>     ;No EOF when reading from the device
   676 0000081E 488B85[04300000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   677 00000825 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   678                              <1>     ;Ignore disk related fields and Date/Time of open
   679 00000829 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   680                              <1>     ;11 chars in 8.3 name
   681 0000082D 488D3589040000      <1>     lea rsi, auxName
   682 00000834 B903000000          <1>     mov ecx, 3
   683 00000839 F3A4                <1>     rep movsb   ;Move the three bytes
   684 0000083B 4889D0              <1>     mov rax, rdx
   685 0000083E 48AB                <1>     stosq   ;Eight spaces left to print
   686 00000840 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   686 00000845 [7BC30300]          <1>
   687 00000849 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   688                              <1> ;GOTO NEXT ENTRY
   689 0000084D 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   690                              <1>     ;Write CON
   691 00000854 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   692 00000859 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   693 0000085F C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   694 00000863 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   695                              <1>     ;No EOF when reading from the device
   696 00000867 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   696 0000086C [44C00300]          <1>
   697 00000870 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   698                              <1>     ;Ignore disk related fields and Date/Time of open
   699 00000874 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   700                              <1>     ;11 chars in 8.3 name
   701 00000878 488D353A040000      <1>     lea rsi, conName
   702 0000087F B903000000          <1>     mov ecx, 3
   703 00000884 F3A4                <1>     rep movsb   ;Move the three bytes
   704 00000886 4889D0              <1>     mov rax, rdx
   705 00000889 48AB                <1>     stosq   ;Eight spaces left to print
   706 0000088B 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   706 00000890 [7BC30300]          <1>
   707 00000894 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   708                              <1> ;GOTO NEXT ENTRY
   709 00000898 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   710                              <1> ;Write PRN
   711 0000089F 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   712 000008A4 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   713 000008AA C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   714 000008AE C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   715                              <1>     ;Want EOF when reading from to the device
   716 000008B2 488B85[26300000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   717 000008B9 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   718                              <1>     ;Ignore disk related fields and Date/Time of open
   719 000008BD 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   720                              <1>     ;11 chars in 8.3 name
   721 000008C1 488D35F9030000      <1>     lea rsi, prnName
   722 000008C8 B903000000          <1>     mov ecx, 3
   723 000008CD F3A4                <1>     rep movsb   ;Move the three bytes
   724 000008CF 4889D0              <1>     mov rax, rdx
   725 000008D2 48AB                <1>     stosq   ;Eight spaces left to print
   726 000008D4 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   726 000008D9 [7BC30300]          <1>
   727 000008DD 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   728                              <1> ;Zero word 0 of entry 4 and 5
   729 000008E1 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   730 000008E8 31C0                <1>     xor eax, eax
   731                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   732                              <1>     ; which is ok as these are empty entries, ready to be used)
   733 000008EA 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   734 000008EC 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   735 000008F3 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   736                              <1> ;------------------------------------------------;
   737                              <1> ;               Load CONFIG.SYS                  ;
   738                              <1> ;------------------------------------------------;
   739                              <1> ;------------------------------------------------;
   740                              <1> ;              Process CONFIG.SYS                ;
   741                              <1> ;------------------------------------------------;
   742                              <1> ;------------------------------------------------;
   743                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   744                              <1> ;------------------------------------------------;
   745                              <1> ;------------------------------------------------;
   746                              <1> ;   Setup Final Data Areas With Overrides from   ;
   747                              <1> ;                  CONFIG.SYS                    ;
   748                              <1> ;------------------------------------------------;
   749                              <1> ;------------------------------------------------;
   750                              <1> ;           Load Command interpreter             ;
   751                              <1> ;------------------------------------------------;
   752 000008F5 488D155C030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   753 000008FC B409                <1>     mov ah, 09h
   754 000008FE CD41                <1>     int 41h
   755                              <1> ;Resize DOS allocation before loading COMMAND.COM
   756 00000900 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   756 00000905 [24C00300]          <1>
   757 00000909 4981C010000000      <1>     add r8, mcb.program
   758 00000910 BB39110000          <1>     mov ebx, dynamicDataAreaLength
   759 00000915 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   760 00000918 FFC3                <1>     inc ebx
   761 0000091A B44A                <1>     mov ah, 4Ah
   762 0000091C CD41                <1>     int 41h
   763                              <1>     
   764                              <1>     %if DEBUG && ALLOCTEST
   765                              <1> ;Test Allocation, Growth and Deallocation
   766                              <1>     mov r15, qword fs:[currentPSP]
   767                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   768                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   769                              <1>     mov ah, 48h ;Allocate
   770                              <1>     int 41h
   771                              <1> 
   772                              <1>     mov r8, rax ;Move the pointer to r8
   773                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   774                              <1>     mov ah, 4Ah
   775                              <1>     int 41h
   776                              <1> 
   777                              <1>     mov ah, 49h ;Free r8
   778                              <1>     int 41h
   779                              <1>     mov qword fs:[currentPSP], r15
   780                              <1>     %endif
   781                              <1> 
   782                              <1>     %if ENDSTATUS
   783                              <1> debugFinal:
   784                              <1>     ;Print system state
   785 0000091E 55                  <1>     push rbp    ;Only rbp really matters here
   786 0000091F 4989E8              <1>     mov r8, rbp
   787                              <1> 
   788 00000922 488D2DD0020000      <1>     lea rbp, .msg2
   789 00000929 4D8D88[49030000]    <1>     lea r9, qword [r8 + debPrintNullString]
   790 00000930 41FFD1              <1>     call r9
   791                              <1> 
   792 00000933 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   793 0000093A 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   793 0000093F [08C00300]          <1>
   794                              <1> 
   795 00000943 4D8D88[84060000]    <1>     lea r9, qword [r8 + overlayQword]
   796 0000094A 41FFD1              <1>     call r9
   797                              <1> 
   798 0000094D 4881C31B000000      <1>     add rbx, 19+8
   799 00000954 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   799 00000959 [00C00300]          <1>
   800 0000095D 41FFD1              <1>     call r9
   801                              <1> 
   802 00000960 4881C31B000000      <1>     add rbx, 19+8
   803 00000967 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   803 0000096C [24C00300]          <1>
   804 00000970 41FFD1              <1>     call r9
   805                              <1> 
   806 00000973 4881C31C000000      <1>     add rbx, 20+8
   807 0000097A 4D8D88[41060000]    <1>     lea r9, qword [r8 + overlayDword]
   808 00000981 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   809 00000989 41FFD1              <1>     call r9
   810                              <1> 
   811 0000098C 4881C312000000      <1>     add rbx, 10+8
   812 00000993 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   813 0000099B 41FFD1              <1>     call r9
   814                              <1> 
   815 0000099E 4881C312000000      <1>     add rbx, 10+8
   816 000009A5 64488B0425-         <1>     mov rax, qword fs:[longMem]
   816 000009AA [1BC00300]          <1>
   817 000009AE 4D8D88[84060000]    <1>     lea r9, qword [r8 + overlayQword]
   818 000009B5 41FFD1              <1>     call r9
   819                              <1> 
   820 000009B8 4881C31B000000      <1>     add rbx, 19+8
   821 000009BF 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   821 000009C4 [2CC00300]          <1>
   822 000009C8 41FFD1              <1>     call r9
   823                              <1> 
   824 000009CB 4881C31B000000      <1>     add rbx, 19+8
   825 000009D2 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   825 000009D7 [34C00300]          <1>
   826 000009DB 41FFD1              <1>     call r9
   827                              <1> 
   828 000009DE 4881C31B000000      <1>     add rbx, 19+8
   829 000009E5 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   829 000009EA [4EC00300]          <1>
   830 000009EE 41FFD1              <1>     call r9
   831                              <1> 
   832 000009F1 4881C31B000000      <1>     add rbx, 19+8
   833 000009F8 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   833 000009FD [56C00300]          <1>
   834 00000A01 41FFD1              <1>     call r9
   835                              <1> 
   836 00000A04 4D8D88[CF050000]    <1>     lea r9, qword [r8 + overlayByte]
   837                              <1> 
   838 00000A0B 4881C32C000000      <1>     add rbx, 25+19
   839 00000A12 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   839 00000A18 [68C00300]          <1>
   840 00000A1C 41FFD1              <1>     call r9
   841                              <1> 
   842 00000A1F 4881C31E000000      <1>     add rbx, 30
   843 00000A26 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   843 00000A2C [12C00300]          <1>
   844 00000A30 41FFD1              <1>     call r9
   845                              <1> 
   846 00000A33 4881C31E000000      <1>     add rbx, 30
   847 00000A3A 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   847 00000A40 [11C00300]          <1>
   848 00000A44 41FFD1              <1>     call r9
   849                              <1> 
   850 00000A47 4881C310000000      <1>     add rbx, 16
   851 00000A4E 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   851 00000A54 [10C00300]          <1>
   852 00000A58 0441                <1>     add al, "A"
   853 00000A5A 8803                <1>     mov byte [rbx], al
   854                              <1> 
   855 00000A5C 488D2D10000000      <1>     lea rbp, .msg
   856 00000A63 4D8D88[49030000]    <1>     lea r9, qword [r8 + debPrintNullString]
   857 00000A6A 41FFD1              <1>     call r9
   858 00000A6D 5D                  <1>     pop rbp
   859 00000A6E E99E010000          <1>     jmp l1
   860 00000A73 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   860 00000A7C 206261736520464646- <1>
   860 00000A85 464646464646464646- <1>
   860 00000A8E 46464646680A0D      <1>
   861 00000A95 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   861 00000A9E 464646464646464646- <1>
   861 00000AA7 464646464646680A0D  <1>
   862 00000AB0 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   862 00000AB9 464646464646464646- <1>
   862 00000AC2 46464646464668200A- <1>
   862 00000ACB 0D                  <1>
   863 00000ACC 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   863 00000AD5 464646464646466820  <1>
   864 00000ADE 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   864 00000AE7 464646464646466820  <1>
   865 00000AF0 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   865 00000AF9 464646464646464646- <1>
   865 00000B02 464646464646680A0D  <1>
   866 00000B0B 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   866 00000B14 464646464646464646- <1>
   866 00000B1D 464646464646680A0D  <1>
   867 00000B26 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   867 00000B2F 464646464646464646- <1>
   867 00000B38 464646464646680A0D  <1>
   868 00000B41 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   868 00000B4A 464646464646464646- <1>
   868 00000B53 464646464646680A0D  <1>
   869 00000B5C 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   869 00000B65 464646464646464646- <1>
   869 00000B6E 464646464646680A0D  <1>
   870 00000B77 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   870 00000B80 204C6F676963616C20- <1>
   870 00000B89 447269766573204646- <1>
   870 00000B92 680A0D              <1>
   871 00000B95 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   871 00000B9E 204669786564204472- <1>
   871 00000BA7 697665732020204646- <1>
   871 00000BB0 680A0D              <1>
   872 00000BB3 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   872 00000BBC 2052656D6F7661626C- <1>
   872 00000BC5 652044727673204646- <1>
   872 00000BCE 680A0D              <1>
   873 00000BD1 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   873 00000BDA 65205A3A0A0D        <1>
   874 00000BE0 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   874 00000BE9 4F4D4D414E442E434F- <1>
   874 00000BF2 4D2E2E2E0A0D00      <1>
   875 00000BF9 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   875 00000C02 626F6F742073756D6D- <1>
   875 00000C0B 6172790A0D00        <1>
   876                              <1>     %endif
   877                              <1> l1:
   878 00000C11 B402                <1>     mov ah, 02h
   879 00000C13 B20A                <1>     mov dl, 0Ah
   880 00000C15 CD41                <1>     int 41h
   881 00000C17 B409                <1>     mov ah, 09h
   882 00000C19 488D150F000000      <1>     lea rdx, .str
   883 00000C20 CD41                <1>     int 41h
   884 00000C22 488D15E0020000      <1>     lea rdx, tmpBuffer
   885 00000C29 B40A                <1>     mov ah, 0Ah  ;Buffered input
   886 00000C2B CD41                <1>     int 41h
   887 00000C2D EBE2                <1>     jmp short l1
   888 00000C2F 433A5C3E24          <1> .str: db "C:\>$"
   889                              <1> ;l2:
   890                              <1> ;    mov ah, 07h
   891                              <1> ;    int 41h
   892                              <1> ;    cmp al, 42h
   893                              <1> ;    jne l1
   894                              <1> ;l3:
   895                              <1> ;    mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   896                              <1> ;    lea rbx, qword [rbp + secdReqHdr] ;Get the address of this request block
   897                              <1> ;    lea rax, qword [rbp + CLOCKrecrd]
   898                              <1> ;    mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   899                              <1> ;    mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   900                              <1> ;    mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   901                              <1> ;    mov qword [rbx + ioReqPkt.bufptr], rax
   902                              <1> ;    mov dword [rbx + ioReqPkt.tfrlen], 06
   903                              <1> ;    call qword [rbp + clkHdr + drvHdr.strPtr]
   904                              <1> ;    call qword [rbp + clkHdr + drvHdr.intPtr] 
   905                              <1> 
   906                              <1> ;    mov ah, 03h
   907                              <1> ;    xor bh, bh
   908                              <1> ;    int 30h
   909                              <1> ;    xor dl, dl  ;0 column
   910                              <1> ;    mov ah, 02h
   911                              <1> ;    int 30h
   912                              <1> 
   913                              <1> ;    lea rbx, qword [rbp + CLOCKrecrd]
   914                              <1> ;    movzx eax, byte [rbx + clkStruc.hours]
   915                              <1> ;    call .clkHexToBCD
   916                              <1> ;    mov ah, 0Eh
   917                              <1> ;    mov al, ":"
   918                              <1> ;    int 30h
   919                              <1> ;    movzx eax, byte [rbx + clkStruc.minutes]
   920                              <1> ;    call .clkHexToBCD
   921                              <1> ;    mov ah, 0Eh
   922                              <1> ;    mov al, ":"
   923                              <1> ;    int 30h
   924                              <1> ;    movzx eax, byte [rbx + clkStruc.seconds]
   925                              <1> ;    call .clkHexToBCD
   926                              <1> ;    mov ah, 0Eh
   927                              <1> ;    mov al, "."
   928                              <1> ;    int 30h
   929                              <1> ;    movzx eax, byte [rbx + clkStruc.hseconds]
   930                              <1> ;    call .clkHexToBCD
   931                              <1> ;    jmp l1
   932                              <1> ;.clkHexToBCD:
   933                              <1> ;Converts a Hex byte into two BCD digits
   934                              <1> ;Takes input in each nybble of al
   935                              <1> ;    push rbx
   936                              <1> ;    mov rbx, 0Ah  ;Divide by 10
   937                              <1> ;    xor edx, edx
   938                              <1> ;    div rbx
   939                              <1> ;    add dl, '0'
   940                              <1> ;    cmp dl, '9'
   941                              <1> ;    jbe .chtb0
   942                              <1> ;    add dl, 'A'-'0'-10
   943                              <1> ;.chtb0:
   944                              <1> ;    mov cl, dl    ;Save remainder byte
   945                              <1> ;    xor edx, edx
   946                              <1> ;    div rbx
   947                              <1> ;    add dl, '0'
   948                              <1> ;    cmp dl, '9'
   949                              <1> ;    jbe .chtb1
   950                              <1> ;    add dl, 'A'-'0'-10
   951                              <1> ;.chtb1:
   952                              <1> ;    mov ch, dl    ;Save remainder byte
   953                              <1> ;    mov al, ch    ;Get most sig digit into al
   954                              <1> ;    mov ah, 0Eh
   955                              <1> ;    int 30h
   956                              <1> ;    mov al, cl    ;Get least sig digit into al
   957                              <1> ;    mov ah, 0Eh
   958                              <1> ;    int 30h
   959                              <1> ;    pop rbx
   960                              <1> ;    ret
   961                              <1> ;--------------------------------
   962                              <1> ;       PROCS FOR SYSINIT       :
   963                              <1> ;--------------------------------
   964                              <1> adjustDrvHdr:
   965                              <1> ;Input: rsi = Effective address of driver in DOS segment
   966                              <1> ;       rbp = Ptr to the start of the DOS segment
   967                              <1> ;Output: rsi = EA of next header in DOS segment
   968 00000C34 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   969 00000C37 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   970 00000C3B 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   971 00000C3F 4881C622000000      <1>     add rsi, drvHdr_size
   972 00000C46 C3                  <1>     ret
   973                              <1> errorInit:
   974                              <1> ;If a critical error occurs during sysinit, fail through here
   975                              <1> ;Int 42h, 43h and 44h point here during sysinit
   976 00000C47 488D2D3A000000      <1>     lea rbp, hltmsg
   977 00000C4E B804130000          <1>     mov eax, 1304h
   978 00000C53 CD30                <1>     int 30h
   979                              <1>     ;cli ;Clear interrupts
   980                              <1>     ;mov al, -1
   981                              <1>     ;mov dx, 0A1h    ;PIC2 data
   982                              <1>     ;out dx, al      ;Mask all lines
   983                              <1>     ;mov dx, 21h     ;PIC1 data
   984                              <1>     ;out dx, al      ;Mask all lines
   985                              <1> .ei0:
   986 00000C55 F4                  <1>     hlt
   987 00000C56 EBFD                <1>     jmp short .ei0
   988                              <1> ;--------------------------------
   989                              <1> ;       DATA FOR SYSINIT        :
   990                              <1> ;--------------------------------
   991 00000C58 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   991 00000C61 5343502F444F532E2E- <1>
   991 00000C6A 2E0A0D24            <1>
   992 00000C6E 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   992 00000C77 6C6F636174696F6E20- <1>
   992 00000C80 4572726F720A0D00    <1>
   993 00000C88 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   993 00000C91 7469616C6973696E67- <1>
   993 00000C9A 20534350444F532E53- <1>
   993 00000CA3 59532E205379737465- <1>
   993 00000CAC 6D2068616C74696E67- <1>
   993 00000CB5 2E2E2E00            <1>
   994 00000CB9 434F4E00            <1> conName db "CON",0
   995 00000CBD 41555800            <1> auxName db "AUX",0
   996 00000CC1 50524E00            <1> prnName db "PRN",0
   997                              <1> 
   998 00000CC5 003A5C4155544F4558- <1> aexec   db 0,":\AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC (with space for drvletter)
   998 00000CCE 45432E42415400      <1>
   999 00000CD5 003A5C434F4E464947- <1> cfgspec db 0,":\CONFIG.SYS",0 ;ASCIIZ for CONFIG (with space for drive letter)
   999 00000CDE 2E53595300          <1>
  1000                              <1> 
  1001                              <1> intData:
  1002 00000CE3 [DB21000000000000]  <1>     dq terminateProcess ;Int 40h
  1003 00000CEB [AF27000000000000]  <1>     dq functionDispatch ;Int 41h
  1004 00000CF3 [470C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1005 00000CFB [0729000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1006 00000D03 [0723000000000000]  <1>     dq dosDefCritErrHdlr 
  1007 00000D0B [D723000000000000]  <1>     dq absDiskRead      ;Int 45h
  1008 00000D13 [B823000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1009 00000D1B [DD21000000000000]  <1>     dq terminateRes     ;Int 47h
  1010 00000D23 [0729000000000000]  <1>     dq defaultIretq     ;Int 48h
  1011 00000D2B [0729000000000000]  <1>     dq defaultIretq     ;Int 49h
  1012 00000D33 [0729000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1013 00000D3B [0729000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1014 00000D43 [0729000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1015 00000D4B [0729000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1016 00000D53 [0729000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1017 00000D5B [2B2D000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1018                              <1> nData:
  1019 00000D63 [E22F000000000000]  <1>     dq conHdr
  1020 00000D6B 0480                <1>     dw 08004h
  1021 00000D6D [8A31000000000000]  <1>     dq nulStrat
  1022 00000D75 [9031000000000000]  <1>     dq nulIntr
  1023 00000D7D 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1024                              <1> 
  1025                              <1> diskInit:
  1026                              <1>     ;We create a function to deal with BPB parsing etc
  1027                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1028                              <1>     ;   They dont have to be bootable
  1029                              <1>     ;Then go back and look for other partitions partitions. 
  1030                              <1>     ;   Add each other primary or logical ptn (until max)
  1031                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1032                              <1>     ;Use r8 as device counter
  1033 00000D85 488DBD[8C390000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1034 00000D8C 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1034 00000D94 00                  <1>
  1035 00000D95 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1036 00000D9B 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1036 00000DA4 00                  <1>
  1037 00000DA5 B280                <1>     mov dl, 80h ;Start with HDD 0
  1038                              <1> .primary:
  1039 00000DA7 64803C25[68C00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1039 00000DAF 03                  <1>
  1040 00000DB0 0F84AB000000        <1>     je .remInit
  1041 00000DB6 31C9                <1>     xor ecx, ecx    ;Sector 0
  1042 00000DB8 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1043 00000DBD 0F8289000000        <1>     jc .primaryEpilog
  1044                              <1>     ;Here, check MBR or BPB
  1045 00000DC3 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1046 00000DCC 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1047                              <1>     ;Now check if BPB or MBR
  1048 00000DCE 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1049 00000DD0 8A6302              <1>     mov ah, byte [rbx + 2]
  1050 00000DD3 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1051 00000DD7 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1052                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1053                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1054 00000DD9 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1055 00000DE0 B104                <1>     mov cl, 4
  1056                              <1> .checkPrimary:
  1057 00000DE2 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1058 00000DE5 3C01                <1>     cmp al, 01
  1059 00000DE7 7421                <1>     je .primaryFound
  1060 00000DE9 3C04                <1>     cmp al, 04
  1061 00000DEB 741D                <1>     je .primaryFound
  1062 00000DED 3C06                <1>     cmp al, 06
  1063 00000DEF 7419                <1>     je .primaryFound
  1064 00000DF1 3C0B                <1>     cmp al, 0Bh
  1065 00000DF3 7415                <1>     je .primaryFound
  1066 00000DF5 3C0C                <1>     cmp al, 0Ch
  1067 00000DF7 7411                <1>     je .primaryFound
  1068 00000DF9 3C0E                <1>     cmp al, 0Eh
  1069 00000DFB 740D                <1>     je .primaryFound
  1070 00000DFD 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1071 00000E04 FEC9                <1>     dec cl
  1072 00000E06 7444                <1>     jz .primaryEpilog
  1073 00000E08 EBD8                <1>     jmp short .checkPrimary
  1074                              <1> .primaryFound:
  1075                              <1>     ;Copy the first sector of this partition into memory
  1076 00000E0A 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1077 00000E0D E8E9000000          <1>     call .initReadSector
  1078 00000E12 7238                <1>     jc .primaryEpilog
  1079                              <1>     ;Now verify this is a BPB
  1080 00000E14 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1081 00000E16 8A6302              <1>     mov ah, byte [rbx + 2]
  1082 00000E19 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1083 00000E1D 752D                <1>     jne .primaryEpilog   ;If not, skip
  1084                              <1>     ;Now copy data to internal tables
  1085 00000E1F 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1086 00000E22 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1087 00000E27 57                  <1>     push rdi
  1088 00000E28 F348A5              <1>     rep movsq   ;Copy the BPB
  1089 00000E2B 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1090                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1091 00000E2C 4A8D9C05[5A390000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1092                              <1>     ;Add device count to rbx to point to correct entry
  1093 00000E34 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1094 00000E36 4A8D9CC5[64390000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1095 00000E3E 488933              <1>     mov qword [rbx], rsi
  1096 00000E41 49FFC0              <1>     inc r8  ;Goto next logical drive
  1097 00000E44 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1098                              <1> .primaryEpilog:
  1099 00000E4C FEC2                <1>     inc dl  ;Goto next BIOS drive
  1100 00000E4E 88D6                <1>     mov dh, dl
  1101 00000E50 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1102 00000E53 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1103 00000E5B 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1104                              <1> .extended:
  1105                              <1> ;We have gone through all the devices once
  1106                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1107                              <1>     ;je .remInit ;If yes, get removable devices
  1108                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1109                              <1>     ;xor ecx, ecx    ;Get MBR back
  1110                              <1>     ;call .initReadSector
  1111                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1112                              <1> .remInit:
  1113                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1114 00000E61 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1115 00000E64 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1116 00000E66 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1117                              <1>     ;rdi points to the space for the subsequent bpb's
  1118                              <1> .removables:
  1119 00000E69 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1120 00000E6B E88B000000          <1>     call .initReadSector
  1121 00000E70 7238                <1>     jc .removableEpilogue   ;Goto next device
  1122                              <1>     ;Now verify this is a BPB
  1123 00000E72 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1124 00000E74 8A6302              <1>     mov ah, byte [rbx + 2]
  1125 00000E77 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1126 00000E7B 752D                <1>     jne .removableEpilogue   ;If not, skip
  1127                              <1>     ;Now copy data to internal tables
  1128 00000E7D 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1129 00000E80 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1130 00000E85 57                  <1>     push rdi
  1131 00000E86 F348A5              <1>     rep movsq   ;Copy the BPB
  1132 00000E89 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1133                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1134 00000E8A 4A8D9C05[5A390000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1135                              <1>     ;Add device count to rbx to point to correct entry
  1136 00000E92 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1137 00000E94 4A8D9CC5[64390000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1138 00000E9C 488933              <1>     mov qword [rbx], rsi
  1139 00000E9F 49FFC0              <1>     inc r8  ;Goto next logical drive
  1140 00000EA2 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1141                              <1> .removableEpilogue:
  1142 00000EAA FEC2                <1>     inc dl  ;Goto next BIOS device now
  1143 00000EAC 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1144 00000EB4 7412                <1>     je .end
  1145 00000EB6 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1146 00000EBD 7403                <1>     je .re0
  1147 00000EBF 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1148                              <1> .re0:
  1149 00000EC2 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1150 00000EC6 72A1                <1>     jb .removables
  1151                              <1> .end:
  1152 00000EC8 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1152 00000ED0 01                  <1>
  1153 00000ED1 7401                <1>     je .singleRemDev
  1154 00000ED3 C3                  <1>     ret
  1155                              <1> .singleRemDev:
  1156                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1157 00000ED4 488D9D[5A390000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1158 00000EDB 8A95[5A390000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1159 00000EE1 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1160 00000EE4 488D9D[64390000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1161 00000EEB 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1162 00000EEE 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1163 00000EF2 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1164 00000EFA C3                  <1>     ret
  1165                              <1> .initReadSector:
  1166                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1167 00000EFB B482                <1>     mov ah, 82h ;Read
  1168 00000EFD B001                <1>     mov al, 1   ;One sector
  1169 00000EFF 488D9D[39010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1170 00000F06 CD33                <1>     int 33h
  1171 00000F08 C3                  <1>     ret
  1172 00000F09 800000000000000000- <1> tmpBuffer db 80h, 00h, (80h-2) dup (00)
  1172 00000F12 000000000000000000- <1>
  1172 00000F1B 000000000000000000- <1>
  1172 00000F24 000000000000000000- <1>
  1172 00000F2D 000000000000000000- <1>
  1172 00000F36 000000000000000000- <1>
  1172 00000F3F 000000000000000000- <1>
  1172 00000F48 000000000000000000- <1>
  1172 00000F51 000000000000000000- <1>
  1172 00000F5A 000000000000000000- <1>
  1172 00000F63 000000000000000000- <1>
  1172 00000F6C 000000000000000000- <1>
  1172 00000F75 000000000000000000- <1>
  1172 00000F7E 000000000000000000- <1>
  1172 00000F87 0000                <1>
    14                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    15                                  %include "./Source/BSS/dosSeg.asm"
    16                              <1> ;This file contains the main DOS data segment
    17                              <1> dosAPT: ;Additional Page tables
    18 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    19                              <1> dosDataArea:
    20 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    21 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    22 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    23 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    24 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    25 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    26 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    27 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    28                              <1> ;Above is the system stats
    29                              <1> ;Below is the DOS vars
    30 0003C023 ??                  <1>     vConOutOff  resb 1    ;Offset in output buffer to the next char to output
    31                              <1>     ;   A value of 0 means no chars buffered.
    32 0003C024 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    33                              <1> sysVarsPtr:
    34 0003C02C ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    35 0003C034 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    36 0003C03C ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    37                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    38 0003C044 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    39                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    40 0003C04C ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    41 0003C04E ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    42 0003C056 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    43 0003C05E ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    44 0003C066 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    45                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    46 0003C068 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    47 0003C069 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    48 0003C06A ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    49 0003C06B ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    50 0003C06C <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    51                              <1> ;Additional internal variables
    52                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    53 0003C08E ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    54 0003C08F ????                <1>     numFiles    resw 1    ;FILES=5 default
    55 0003C091 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    56                              <1> ;Create SFT header and corresponding array of five default sft entries
    57 0003C093 <res Ah>            <1>     firstSftHeader  resb sfth_size
    58 0003C09D <res 4Fh>           <1>     firstSft    resb sft_size
    59 0003C0EC <res 4Fh>           <1>     secondSft   resb sft_size
    60 0003C13B <res 4Fh>           <1>     thirdSft    resb sft_size
    61 0003C18A <res 4Fh>           <1>     fourthSft   resb sft_size
    62 0003C1D9 <res 4Fh>           <1>     fifthSft    resb sft_size
    63                              <1> 
    64                              <1> ;Virtual CONsole Buffers
    65 0003C228 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    66                              <1>     ;Only incremented when CON device runs vCon
    67                              <1> vConBuf:    ;Proper buffer symbol
    68 0003C229 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    69 0003C22A <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    70                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    71 0003C2AA <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    72 0003C32A ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    73                              <1> 
    74 0003C32B ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    75 0003C32C ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76 0003C32D ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    77 0003C32E ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    78                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    79                              <1> 
    80 0003C32F ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    81                              <1> ;Server stuff. Default to all zeros (blank)
    82 0003C330 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    83                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    84 0003C331 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    85 0003C332 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    86                              <1> ;Swappable Data Area
    87 0003C342 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    88 0003C362 ??                  <1>                 resb 1  ;Alignment byte
    89                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    90 0003C363 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    91 0003C364 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    92 0003C365 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    93 0003C366 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    94 0003C367 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    95 0003C369 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    96 0003C36A ??                  <1>     errorClass  resb 1  ;Error Class
    97 0003C36B ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    98 0003C373 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    99 0003C37B ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   100                              <1> 
   101 0003C383 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   102 0003C38B ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   103 0003C38D ??                  <1>     currentDrv  resb 1  ;Default drive x
   104 0003C38E ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   105                              <1> ;SDA, needs to be replaced between processes
   106                              <1> sdaMainSwap:
   107 0003C38F ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   108 0003C397 ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
   109 0003C39F ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   110 0003C3A1 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   111 0003C3A9 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   112 0003C3B1 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   113                              <1> 
   114 0003C3B9 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   115 0003C3C1 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   116 0003C3C2 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   117                              <1> 
   118 0003C3C3 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   119 0003C3CB ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   120 0003C3D3 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   121 0003C3DB ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   122 0003C3E3 ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   123                              <1> ;The below flag tells DOS to print ^C in the termination function
   124 0003C3E4 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   125                              <1> 
   126                              <1> ;Time stuff
   127                              <1> ;Read the below two as a word
   128 0003C3E5 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   129 0003C3E6 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   130 0003C3E7 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   131 0003C3E8 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   132 0003C3EA ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   133                              <1> 
   134 0003C3EB ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   135 0003C3EC ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   136 0003C3ED ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   137                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   138                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   139                              <1> ; without forcing to re-build the whole primary request block.
   140                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   141                              <1> ; with secondary char output going through the secondary header
   142                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   143                              <1> ; for output)
   144                              <1> ;ioReqPkt is the largest possible packet
   145 0003C3EE <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   146 0003C418 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   147 0003C442 <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   148                              <1> 
   149                              <1> ;Swappable Buffers
   150 0003C46C <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   151 0003C4EC <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   152 0003C56C ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   153                              <1>     ;We add an additional byte to save ah too
   154 0003C572 ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   155                              <1> ;Misc bookkeeping flags and vars
   156                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   157 0003C574 ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   158 0003C575 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   159 0003C576 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   160 0003C577 ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   161 0003C578 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   162 0003C579 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   163                              <1> 
   164 0003C57A ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   165                              <1> 
   166 0003C57B ??                  <1>     workingDrv  resb 1  ;Working drive number
   167                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   168                              <1> workingDD:  ;Create a symbol for the working device driver too
   169 0003C57C ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   170 0003C584 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   171                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   172                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   173 0003C58C ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   174 0003C594 <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   175 0003C5EF ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   176 0003C5F7 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   177 0003C5FF ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   178 0003C601 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   179                              <1> ;Temp vars, used when walking FAT or changing sectors
   180 0003C609 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   181 0003C611 ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   182                              <1> ;***************************************************|
   183                              <1> ; Needs to be set up before any file access         |
   184                              <1> ; These vars keep track of file access properties   |
   185                              <1> ;   and must be used only for such purposes.        |
   186                              <1> ;***************************************************|
   187 0003C613 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   188 0003C617 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   189                              <1> 
   190 0003C61B ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   191                              <1> 
   192 0003C61C ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   193 0003C620 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   194 0003C621 ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   195                              <1> 
   196 0003C629 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   197 0003C62B ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   198                              <1> ;***************************************************|
   199 0003C62F ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   200 0003C633 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   201 0003C637 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   202 0003C63B ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   203 0003C63F ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   204                              <1> ;Directory stuff
   205 0003C643 ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   206 0003C647 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   207 0003C64B ??                  <1>     dirSect     resb 1  ;Sector of current directory
   208 0003C64C ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   209                              <1> ;Error DPB 
   210 0003C64D ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   211                              <1>     
   212                              <1> ;Stacks and scratch SFT
   213 0003C655 <res 528h>          <1>     critStack   resq 165
   214 0003CB7D ????????????????    <1>     critStakTop resq 1
   215                              <1> 
   216 0003CB85 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   217                              <1> 
   218 0003CBD4 <res 638h>          <1>     AuxStack    resq 199
   219 0003D20C ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   220 0003D214 <res 638h>          <1>     DiskStack   resq 199
   221 0003D84C ????????????????    <1>     DiskStakTop resq 1
   222                              <1> 
   223 0003D854 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   224 0003D855 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   225                              <1>     sdaLen      equ     $ - sda 
   226                              <1>     sdaMSLen    equ     $ - sda
   227                              <1> 
   228                              <1> ;Additional variables NOT in the SDA
   229 0003D856 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   230                              <1>     ;for saving the current header when quickly doing a second request
   231                              <1> 
   232                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   233                              <1> inExtASCII:
   234 0003D880 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   235 0003D881 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   236                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   237                              <1>     ; copy of the date/time record
   238                              <1>     dSegLen     equ     $
    16                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    17                                  %define currSegVBase section.resSeg.vstart
    18                                  %include "./Source/Data/staticData.asm"
    19                              <1> 
    20                              <1> ;-----------------------------------:
    21                              <1> ;       Static Data Variables       :
    22                              <1> ;-----------------------------------:
    23 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    24 00000001 01                  <1> dosMinor    db 01h      ;.01
    25 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    25 0000000B 535953              <1>
    26 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    26 00000017 535953              <1>
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;        Static Data Tables         :
    30                              <1> ;-----------------------------------:
    31                              <1> ctryTbl:
    32                              <1> ;Country Table (defaulting to UK)
    33 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    34                              <1>                             ;0 = month day year hh:mm:ss
    35                              <1>                             ;1 = day month year hh:mm:ss
    36                              <1>                             ;2 = year month day hh:mm:ss
    37 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    38 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    39 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    40 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    41 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    42 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    43                              <1>                 ;0 = Symbol leads, without space
    44                              <1>                 ;1 = Symbol follows, without space
    45                              <1>                 ;2 = Symbol leads, one space
    46                              <1>                 ;3 = Symbol follows, one space
    47                              <1>                 ;4 = Symbol replace decimal separator
    48 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    49 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    50 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr)
    51 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    52 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    52 00000040 00                  <1>
    53                              <1> 
    54                              <1> ;IO Char table
    55                              <1> ;This table has Request header length, command code and error flags
    56                              <1> ; as a packed DWORD entry
    57                              <1> ioRqCmdErrTbl:
    58                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    59                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    60 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    61 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    62 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    63 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    64 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    65 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    70                              <1> ; wish to install their own custom logic.
    71 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    72 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    73 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    74                              <1> ;Extended ASCII keys with special meanings
    75 00000063 3B                  <1> extKeyTbl   db eF1
    76 00000064 4F14                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    77 00000066 3C                  <1>             db eF2
    78 00000067 4114                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    79 00000069 3D                  <1>             db eF3
    80 0000006A 4814                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    81 0000006C 3E                  <1>             db eF4
    82 0000006D 7D14                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    83 0000006F 3F                  <1>             db eF5
    84 00000070 C214                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    85 00000072 40                  <1>             db eF6
    86 00000073 D814                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    87 00000075 41                  <1>             db eF7
    88 00000076 DF14                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    89 00000078 4B                  <1>             db eCursL
    90 00000079 A613                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    91 0000007B 4D                  <1>             db eCursR
    92 0000007C 4F14                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    93 0000007E 52                  <1>             db eIns
    94 0000007F EA14                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    95 00000081 53                  <1>             db eDel
    96 00000082 F114                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    97                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    98                              <1> 
    99                              <1> ;When counting the number of days, first compute the number of years since
   100                              <1> ; 1980 and your year. 
   101                              <1> ;Then, using the table below, find the number of leap years between 1980
   102                              <1> ; and (YourYear - 1). 
   103                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   104                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   105                              <1> ;
   106                              <1> ;Use the months table to get the number of days in a normal month as leap 
   107                              <1> ; years are added using the previous comment.
   108                              <1> 
   109                              <1> ;This table is the number of days in the month
   110                              <1> ;The function which updates the days in Feb writes the number to this table
   111                              <1> monthsTbl:  
   112 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   112 0000008D 1F1E1F              <1>
   113                              <1> 
   114                              <1> ;Error tables
   115                              <1> errXlatTbl:
   116                              <1> ;Each entry is n bytes long, defined as
   117                              <1> ; Byte 0      : DOS function number for which translation will occur
   118                              <1> ; Byte 1      : Length of the table entry - 2
   119                              <1> ; Bytes n - 3 : Acceptable Error codes
   120                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   121                              <1> ;The table is terminated with a single -1 byte
   122 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   123 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   124 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   125 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   126 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   127 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   128 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   129 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   130 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   131 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   132 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   133 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   134 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   135 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   136 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   137 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   138 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   139 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   140 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   141 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   142 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   143 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   144 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   145 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   146 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   147 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   148 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   149 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   150 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   151 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   152 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   153 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   154 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   155 0000012B FF                  <1>     db -1   ;End Of Table marker
   156                              <1> 
   157                              <1> 
   158                              <1> extErrTbl:
   159                              <1> ;This table contains the default values for how to respond
   160                              <1> ; to particular errors. Fields with -1 need to be filled in before
   161                              <1> ; setting variables using this table.
   162                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   163                              <1> ; Byte 0: Extended Error Code as a byte
   164                              <1> ; Byte 1: Error Class
   165                              <1> ; Byte 2: Error Suggested Action
   166                              <1> ; Byte 3: Error Locus
   167                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   168                              <1> ;
   169                              <1> ;Error 01: Invalid function number
   170 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   171                              <1> ;Error 02: File not found
   172 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   173                              <1> ;Error 03: Path not found
   174 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   175                              <1> ;Error 04: Too many open handles, and no handles are left
   176 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   177                              <1> ;Error 05: Access being denied
   178 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   179                              <1> ;Error 06: Invalid File handle being provided
   180 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   181                              <1> ;Error 07: MCB chain destroyed
   182 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   183                              <1> ;Error 08: No Memory remaining
   184 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   185                              <1> ;Error 09: Invalid MCB block Address
   186 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   187                              <1> ;Error 0A: Bad Environment block
   188 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   189                              <1> ;Error 0B: Data provided in a bad format
   190 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   191                              <1> ;Error 0C: Access Code Invalid
   192 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   193                              <1> ;Error 0D: Error due to Invalid Data provided
   194 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   195                              <1> ;Error 0F: Error due to a bad drive letter being provided
   196 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   197                              <1> ;Error 10: Error due to attempting to delete the CWD
   198 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   199                              <1> ;Error 11: Error due to a unknown device being used
   200 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   201                              <1> ;Error 12: No more file handles available
   202 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   203                              <1> ;Error 50: Network request not supported
   204 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   205                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   206 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   207                              <1> ;Error 21: File Locking Violation
   208 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   209                              <1> ;Error 54: Too many levels of redirection error
   210 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   211                              <1> ;Error 56: Bad resource password provided
   212 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   213                              <1> ;Error 52: Directory already exists
   214 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   215                              <1> ;Error 32: Network request not supported by DOS
   216 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   217                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   218 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   219                              <1> ;Error 57: Bad parameter in request
   220 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   221                              <1> ;Error 53: Fail was returned from Int 44h
   222 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   223                              <1> ;Error 24: Sharing Buffer Full
   224 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   225 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
    19                                  %include "./Source/Data/dispTbl.asm"
    20                              <1> ;Kernel Dispatch Function Table
    21                              <1> 
    22                              <1> kDispTbl:
    23 000001A0 3F20                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    24 000001A2 0D0D                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    25 000001A4 1A0D                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    26 000001A6 D70D                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    27 000001A8 000E                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    28 000001AA 080E                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    29 000001AC 200E                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    30 000001AE 530E                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    31 000001B0 780E                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    32 000001B2 D70E                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    33 000001B4 8211                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    34 000001B6 E60E                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    35 000001B8 F20E                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    36 000001BA C928                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    37 000001BC EA28                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    38 000001BE 6116                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    39 000001C0 6116                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    40 000001C2 6116                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    41 000001C4 6116                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    42 000001C6 6116                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    43 000001C8 6116                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    44 000001CA 6116                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    45 000001CC 6116                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    46 000001CE 6116                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    47 000001D0 8A2B                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    48 000001D2 0329                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    49 000001D4 6216                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    50 000001D6 0A29                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    51 000001D8 0C29                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    52 000001DA 8A2B                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    53 000001DC 8A2B                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    54 000001DE AD29                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    55 000001E0 8A2B                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    56 000001E2 7516                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    57 000001E4 7516                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    58 000001E6 7516                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    59 000001E8 7516                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    60 000001EA 5C29                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    61 000001EC 8929                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    62 000001EE 7516                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    63 000001F0 7516                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    64 000001F2 7516                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    65 000001F4 F813                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    66 000001F6 1F14                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    67 000001F8 2514                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    68 000001FA 4614                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    69 000001FC 8A29                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    70 000001FE 7616                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    71 00000200 9829                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    72 00000202 4020                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    73 00000204 AF29                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    74 00000206 7E28                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    75 00000208 F529                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    76 0000020A 062A                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    77 0000020C 1B2A                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    78 0000020E 4320                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    79 00000210 6C20                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    80 00000212 A108                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    81 00000214 A108                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    82 00000216 A108                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    83 00000218 8916                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    84 0000021A 8A16                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    85 0000021C 8B16                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    86 0000021E 8C16                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    87 00000220 C316                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    88 00000222 CF16                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    89 00000224 D016                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    90 00000226 3B17                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    91 00000228 3B17                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    92 0000022A 3B17                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    93 0000022C 3B17                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    94 0000022E A108                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    95 00000230 341A                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    96 00000232 511C                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    97 00000234 7A1D                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    98 00000236 4120                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    99 00000238 4220                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   100 0000023A 632A                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   101 0000023C 3B17                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   102 0000023E 3B17                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   103 00000240 AC28                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   104 00000242 B528                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   105 00000244 752A                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   106 00000246 862A                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   107 00000248 582B                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   108 0000024A 5F2B                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   109 0000024C 3B17                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   110 0000024E A108                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   111 00000250 2B1F                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   112 00000252 602B                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   113 00000254 3B17                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   114 00000256 3B17                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   115 00000258 3B17                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   116 0000025A 892B                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   117 0000025C 892B                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   118 0000025E 892B                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   119 00000260 A108                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   120 00000262 8A2B                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   121 00000264 BE28                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   122 00000266 8A2B                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   123 00000268 C728                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   124 0000026A 6C20                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   125 0000026C 6C20                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   126 0000026E 3B17                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   127 00000270 3B17                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   128 00000272 8A2B                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   129                              <1> kDispTblL  equ $ - kDispTbl 
   130                              <1> 
   131                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   132 00000274 D82A                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   133                              <1> mDispTblL   equ     $ - mDispTbl
    20                                  %include "./Source/Debug/debug.asm"
    21                              <1> ;This file contains debugging macros, procs and strings
    22                              <1> ; that we can use to output to COM1 bypassing the operating system.
    23                              <1> ;A serial terminal must be connected for this to work.
    24                              <1> 
    25                              <1> ;Variables and equates
    26                              <1> 
    27 00000276 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    28                              <1> 
    29 0000027E 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    29 00000287 39414243444546      <1>
    30                              <1> ;Common procedures
    31                              <1> debMakeDebuggerRespond:
    32 0000028E 488D2D26000000      <1>     lea rbp, .msg
    33 00000295 E8AF000000          <1>     call debPrintNullString
    34 0000029A B900001000          <1>     mov ecx, 100000h
    35                              <1> .waiting:
    36 0000029F FFC9                <1>     dec ecx
    37 000002A1 740C                <1>     jz .timeout
    38 000002A3 B402                <1>     mov ah, 02h ;Blocking recieve!
    39 000002A5 31D2                <1>     xor edx, edx
    40 000002A7 CD34                <1>     int 34h
    41 000002A9 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    42 000002AC 75F1                <1>     jnz .waiting
    43 000002AE C3                  <1>     ret
    44                              <1> .timeout:
    45 000002AF 488D2D47000000      <1>     lea rbp, .msg2
    46 000002B6 E98E000000          <1>     jmp debPrintNullString
    47 000002BB 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    47 000002C4 6B6579206174207468- <1>
    47 000002CD 65207465726D696E61- <1>
    47 000002D6 6C20746F20636F6E74- <1>
    47 000002DF 696E7565206F722077- <1>
    47 000002E8 61697420666F722074- <1>
    47 000002F1 696D656F75742E2E2E- <1>
    47 000002FA 0A0D00              <1>
    48 000002FD 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    48 00000306 436F6E74696E75696E- <1>
    48 0000030F 672E2E2E0A0D00      <1>
    49                              <1> debPrintHexByte:
    50                              <1> ;Print the hex byte in al as a hex value
    51 00000316 52                  <1>     push rdx
    52 00000317 53                  <1>     push rbx
    53 00000318 50                  <1>     push rax
    54                              <1> 
    55 00000319 88C2                <1>     mov dl, al           ;save byte in dl
    56 0000031B 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    57 0000031F 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    58 00000324 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    59 00000328 E80C000000          <1>     call .wrchar
    60 0000032D 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    61 00000330 E804000000          <1>     call .wrchar
    62                              <1> 
    63 00000335 58                  <1>     pop rax
    64 00000336 5B                  <1>     pop rbx
    65 00000337 5A                  <1>     pop rdx
    66 00000338 C3                  <1>     ret
    67                              <1> .wrchar:
    68 00000339 6687DB              <1>     xchg bx, bx
    69 0000033C 488D1D3BFFFFFF      <1>     lea rbx, debascii
    70 00000343 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    71 00000344 B401                <1>     mov ah, 01h
    72 00000346 CD34                <1>     int 34h  ;print char
    73 00000348 C3                  <1>     ret
    74                              <1> 
    75                              <1> debPrintNullString:
    76                              <1> ;Print a null terminated string pointed to by rbp
    77 00000349 56                  <1>     push rsi
    78 0000034A 50                  <1>     push rax
    79 0000034B 52                  <1>     push rdx
    80 0000034C 31D2                <1>     xor edx, edx    ;Select COM1
    81 0000034E 4889EE              <1>     mov rsi, rbp
    82                              <1> .getChar:
    83 00000351 AC                  <1>     lodsb
    84 00000352 84C0                <1>     test al, al
    85 00000354 7406                <1>     jz .exit
    86 00000356 B401                <1>     mov ah, 01h
    87 00000358 CD34                <1>     int 34h
    88 0000035A EBF5                <1>     jmp short .getChar
    89                              <1> .exit:
    90 0000035C 5A                  <1>     pop rdx
    91 0000035D 58                  <1>     pop rax
    92 0000035E 5E                  <1>     pop rsi
    93 0000035F C3                  <1>     ret
    94                              <1> 
    95                              <1> debPrintDOSStack:
    96                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    97                              <1> ;Shows me which function, and parameters passed and returned
    98 00000360 488D2DA5010000      <1>     lea rbp, .a1
    99 00000367 E8DDFFFFFF          <1>     call debPrintNullString
   100 0000036C 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   101 00000373 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   102 0000037A 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   103 0000037D E802030000          <1>     call overlayQword
   104 00000382 4881C316000000      <1>     add rbx, 22
   105 00000389 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   106 0000038D E8F2020000          <1>     call overlayQword
   107 00000392 4881C316000000      <1>     add rbx, 22
   108 00000399 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   109 0000039D E8E2020000          <1>     call overlayQword
   110 000003A2 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   111 000003A9 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   112 000003AD E8D2020000          <1>     call overlayQword
   113 000003B2 4881C316000000      <1>     add rbx, 22 
   114 000003B9 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   115 000003BD E8C2020000          <1>     call overlayQword
   116 000003C2 4881C316000000      <1>     add rbx, 22
   117 000003C9 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   118 000003CD E8B2020000          <1>     call overlayQword
   119 000003D2 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   120 000003D9 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   121 000003DD E8A2020000          <1>     call overlayQword
   122 000003E2 4881C316000000      <1>     add rbx, 22
   123 000003E9 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
   124 000003F0 480560000000        <1>     add rax, callerFrame_size
   125 000003F6 E889020000          <1>     call overlayQword
   126 000003FB 4881C316000000      <1>     add rbx, 22
   127 00000402 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   128 00000406 E879020000          <1>     call overlayQword
   129 0000040B 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   130 00000412 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   131 00000416 E869020000          <1>     call overlayQword
   132 0000041B 488D2D06000000      <1>     lea rbp, .a0
   133 00000422 E822FFFFFF          <1>     call debPrintNullString
   134 00000427 C3                  <1>     ret
   135                              <1> 
   136 00000428 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   136 00000431 303030303030303030- <1>
   136 0000043A 30306820            <1>
   137 0000043E 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   137 00000447 303030303030303030- <1>
   137 00000450 30306820            <1>
   138 00000454 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   138 0000045D 303030303030303030- <1>
   138 00000466 30306820            <1>
   139 0000046A 0A0D                <1>     db  0Ah,0Dh
   140 0000046C 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   140 00000475 303030303030303030- <1>
   140 0000047E 30306820            <1>
   141 00000482 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   141 0000048B 303030303030303030- <1>
   141 00000494 30306820            <1>
   142 00000498 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   142 000004A1 303030303030303030- <1>
   142 000004AA 30306820            <1>
   143 000004AE 0A0D                <1>     db 0Ah, 0Dh
   144 000004B0 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   144 000004B9 303030303030303030- <1>
   144 000004C2 30306820            <1>
   145 000004C6 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   145 000004CF 303030303030303030- <1>
   145 000004D8 30306820            <1>
   146 000004DC 7269703D3030303030- <1>     db "rip=0000000000000000h"
   146 000004E5 303030303030303030- <1>
   146 000004EE 303068              <1>
   147 000004F1 0A0D                <1>     db 0Ah, 0Dh
   148 000004F3 666C673D3030303030- <1>     db "flg=0000000000000000h "
   148 000004FC 303030303030303030- <1>
   148 00000505 30306820            <1>
   149 00000509 0A0D00              <1>     db 0Ah,0Dh,0
   150 0000050C 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   150 00000515 206F6E20496E742034- <1>
   150 0000051E 316820737461636B0A- <1>
   150 00000527 0D00                <1>
   151                              <1> 
   152                              <1> debDPBptr:
   153                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   154 00000529 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   155 00000530 4889E8              <1>     mov rax, rbp
   156 00000533 E84C010000          <1>     call overlayQword
   157 00000538 488D2D06000000      <1>     lea rbp, .dpb
   158 0000053F E805FEFFFF          <1>     call debPrintNullString
   159 00000544 C3                  <1>     ret
   160                              <1> .dpb: 
   161 00000545 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   161 0000054E 203030303030303030- <1>
   161 00000557 303030303030303068- <1>
   161 00000560 200A0D00            <1>
   162                              <1> 
   163                              <1> debDPBBPBptr:
   164                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   165                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   166 00000564 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   167 0000056B 4889E8              <1>     mov rax, rbp
   168 0000056E E811010000          <1>     call overlayQword
   169 00000573 4881C321000000      <1>     add rbx, 33
   170 0000057A 4889F0              <1>     mov rax, rsi
   171 0000057D E802010000          <1>     call overlayQword
   172 00000582 488D2D06000000      <1>     lea rbp, .dpb
   173 00000589 E8BBFDFFFF          <1>     call debPrintNullString
   174 0000058E C3                  <1>     ret
   175                              <1> .dpb: 
   176 0000058F 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   176 00000598 203030303030303030- <1>
   176 000005A1 303030303030303068- <1>
   176 000005AA 2066726F6D20        <1>
   177 000005B0 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   177 000005B9 203030303030303030- <1>
   177 000005C2 303030303030303068- <1>
   177 000005CB 200A0D00            <1>
   178                              <1> overlayByte:
   179                              <1>     ;Called with number in rax
   180                              <1>     ;pointer to START of 16 byte space for number in rbx
   181 000005CF 53                  <1>     push rbx
   182 000005D0 51                  <1>     push rcx
   183 000005D1 52                  <1>     push rdx
   184 000005D2 55                  <1>     push rbp
   185 000005D3 4889DD              <1>     mov rbp, rbx
   186 000005D6 4889C2              <1>     mov rdx, rax
   187 000005D9 48FFC5              <1>     inc rbp ;Go to end of number
   188                              <1> 
   189 000005DC 488D1D9BFCFFFF      <1>     lea rbx, debascii
   190 000005E3 88D0                <1>     mov al, dl  ;Go low nybble first
   191 000005E5 240F                <1>     and al, 0Fh
   192 000005E7 D7                  <1>     xlatb
   193 000005E8 884500              <1>     mov byte [rbp], al
   194 000005EB 48FFCD              <1>     dec rbp ;Go down one char pos
   195 000005EE 88D0                <1>     mov al, dl
   196 000005F0 24F0                <1>     and al, 0F0h    ;Hi nybble next
   197 000005F2 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   198 000005F5 D7                  <1>     xlatb
   199 000005F6 884500              <1>     mov byte [rbp], al  ;Store char
   200                              <1> 
   201 000005F9 5D                  <1>     pop rbp
   202 000005FA 5A                  <1>     pop rdx
   203 000005FB 59                  <1>     pop rcx
   204 000005FC 5B                  <1>     pop rbx
   205 000005FD C3                  <1>     ret
   206                              <1> 
   207                              <1> overlayWord:
   208                              <1>     ;Called with number in rax
   209                              <1>     ;pointer to START of 16 byte space for number in rbx
   210 000005FE 53                  <1>     push rbx
   211 000005FF 51                  <1>     push rcx
   212 00000600 52                  <1>     push rdx
   213 00000601 55                  <1>     push rbp
   214 00000602 4889DD              <1>     mov rbp, rbx
   215 00000605 4889C2              <1>     mov rdx, rax
   216 00000608 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   217 0000060F B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   218 00000614 488D1D63FCFFFF      <1>     lea rbx, debascii
   219                              <1> .ow0:
   220 0000061B 88D0                <1>     mov al, dl  ;Go low nybble first
   221 0000061D 240F                <1>     and al, 0Fh
   222 0000061F D7                  <1>     xlatb
   223 00000620 884500              <1>     mov byte [rbp], al
   224 00000623 48FFCD              <1>     dec rbp ;Go down one char pos
   225 00000626 88D0                <1>     mov al, dl
   226 00000628 24F0                <1>     and al, 0F0h    ;Hi nybble next
   227 0000062A C0E804              <1>     shr al, 4   ;Shift hi nybble low
   228 0000062D D7                  <1>     xlatb
   229 0000062E 884500              <1>     mov byte [rbp], al  ;Store char
   230 00000631 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   231 00000635 48FFCD              <1>     dec rbp
   232 00000638 FFC9                <1>     dec ecx
   233 0000063A 75DF                <1>     jnz .ow0
   234 0000063C 5D                  <1>     pop rbp
   235 0000063D 5A                  <1>     pop rdx
   236 0000063E 59                  <1>     pop rcx
   237 0000063F 5B                  <1>     pop rbx
   238 00000640 C3                  <1>     ret
   239                              <1> 
   240                              <1> overlayDword:
   241                              <1>     ;Called with number in rax
   242                              <1>     ;pointer to START of 16 byte space for number in rbx
   243 00000641 53                  <1>     push rbx
   244 00000642 51                  <1>     push rcx
   245 00000643 52                  <1>     push rdx
   246 00000644 55                  <1>     push rbp
   247 00000645 4889DD              <1>     mov rbp, rbx
   248 00000648 4889C2              <1>     mov rdx, rax
   249 0000064B 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   250 00000652 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   251 00000657 488D1D20FCFFFF      <1>     lea rbx, debascii
   252                              <1> .od0:
   253 0000065E 88D0                <1>     mov al, dl  ;Go low nybble first
   254 00000660 240F                <1>     and al, 0Fh
   255 00000662 D7                  <1>     xlatb
   256 00000663 884500              <1>     mov byte [rbp], al
   257 00000666 48FFCD              <1>     dec rbp ;Go down one char pos
   258 00000669 88D0                <1>     mov al, dl
   259 0000066B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   260 0000066D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   261 00000670 D7                  <1>     xlatb
   262 00000671 884500              <1>     mov byte [rbp], al  ;Store char
   263 00000674 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   264 00000678 48FFCD              <1>     dec rbp
   265 0000067B FFC9                <1>     dec ecx
   266 0000067D 75DF                <1>     jnz .od0
   267 0000067F 5D                  <1>     pop rbp
   268 00000680 5A                  <1>     pop rdx
   269 00000681 59                  <1>     pop rcx
   270 00000682 5B                  <1>     pop rbx
   271 00000683 C3                  <1>     ret
   272                              <1> 
   273                              <1> overlayQword:
   274                              <1>     ;Called with number in rax
   275                              <1>     ;pointer to START of 16 byte space for number in rbx
   276 00000684 53                  <1>     push rbx
   277 00000685 51                  <1>     push rcx
   278 00000686 52                  <1>     push rdx
   279 00000687 55                  <1>     push rbp
   280 00000688 4889DD              <1>     mov rbp, rbx
   281 0000068B 4889C2              <1>     mov rdx, rax
   282 0000068E 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   283 00000695 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   284 0000069A 488D1DDDFBFFFF      <1>     lea rbx, debascii
   285                              <1> .oq0:
   286 000006A1 88D0                <1>     mov al, dl  ;Go low nybble first
   287 000006A3 240F                <1>     and al, 0Fh
   288 000006A5 D7                  <1>     xlatb
   289 000006A6 884500              <1>     mov byte [rbp], al
   290 000006A9 48FFCD              <1>     dec rbp ;Go down one char pos
   291 000006AC 88D0                <1>     mov al, dl
   292 000006AE 24F0                <1>     and al, 0F0h    ;Hi nybble next
   293 000006B0 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   294 000006B3 D7                  <1>     xlatb
   295 000006B4 884500              <1>     mov byte [rbp], al  ;Store char
   296 000006B7 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   297 000006BB 48FFCD              <1>     dec rbp
   298 000006BE FFC9                <1>     dec ecx
   299 000006C0 75DF                <1>     jnz .oq0
   300 000006C2 5D                  <1>     pop rbp
   301 000006C3 5A                  <1>     pop rdx
   302 000006C4 59                  <1>     pop rcx
   303 000006C5 5B                  <1>     pop rbx
   304 000006C6 C3                  <1>     ret
   305                              <1> 
   306                              <1> debPrintFunctionName:
   307                              <1> ;Prints the DOS function that has been entered
   308                              <1> ;Entered with ah = Function number
   309 000006C7 88E0                <1>     mov al, ah  ;Get dos function number
   310 000006C9 488D1DAEFBFFFF      <1>     lea rbx, debascii
   311 000006D0 488D1535000000      <1>     lea rdx, .number
   312 000006D7 24F0                <1>     and al, 0F0h    ;Get high nybble first
   313 000006D9 C0E804              <1>     shr al, 4
   314 000006DC D7                  <1>     xlatb
   315 000006DD 8802                <1>     mov byte [rdx], al
   316 000006DF 88E0                <1>     mov al, ah
   317 000006E1 240F                <1>     and al, 0Fh
   318 000006E3 D7                  <1>     xlatb
   319 000006E4 884201              <1>     mov byte [rdx + 1], al
   320 000006E7 488D2D06000000      <1>     lea rbp, .dosString
   321 000006EE E856FCFFFF          <1>     call debPrintNullString
   322 000006F3 C3                  <1>     ret
   323 000006F4 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   323 000006FD 696F6E20496E742034- <1>
   323 00000706 31682F41483D        <1>
   324 0000070C 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   325                              <1> 
   326                              <1> ;----------------:
   327                              <1> ;!!!! MACROS !!!!:
   328                              <1> ;----------------:
   329                              <1> ;Insert macro when entering a debug block
   330                              <1> %macro debugEnterM 0
   331                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   332                              <1>     mov rsp, debStackTop
   333                              <1> ;Push all registers except rsp on stack
   334                              <1>     push rax
   335                              <1>     push rbx
   336                              <1>     push rcx
   337                              <1>     push rdx
   338                              <1>     push rsi
   339                              <1>     push rdi
   340                              <1>     push rbp
   341                              <1>     push r8
   342                              <1>     push r9
   343                              <1>     push r10
   344                              <1>     push r11
   345                              <1>     push r12
   346                              <1>     push r13
   347                              <1>     push r14
   348                              <1>     push r15
   349                              <1>     pushfq
   350                              <1> %endmacro
   351                              <1> ;Insert macro when exiting a debug block
   352                              <1> %macro debugExitM 0
   353                              <1>     popfq
   354                              <1>     pop r15
   355                              <1>     pop r14
   356                              <1>     pop r13
   357                              <1>     pop r12
   358                              <1>     pop r11
   359                              <1>     pop r10
   360                              <1>     pop r9
   361                              <1>     pop r8
   362                              <1>     pop rbp
   363                              <1>     pop rdi
   364                              <1>     pop rsi
   365                              <1>     pop rdx
   366                              <1>     pop rcx
   367                              <1>     pop rbx
   368                              <1>     pop rax
   369                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   370                              <1> %endmacro
    21                                  %include "./Source/Kernel/FAT/buffun.asm"
    22                              <1> ;This file contains FAT disk buffer related functions that
    23                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    24                              <1> ;----------------------------------------------------
    25                              <1> ;           Externally referenced functions         :
    26                              <1> ;----------------------------------------------------
    27                              <1> 
    28                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    29                              <1> ;Sets the buffer in rdi to the head of the chain
    30                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    31                              <1> ;Output: Buffer header set to the head of the chain
    32 00000712 48393D(4EC00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    33 00000719 7428                <1>     je .exit
    34 0000071B 56                  <1>     push rsi
    35 0000071C 488B35(4EC00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    36                              <1> .mainlp:
    37 00000723 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    38 00000726 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    39 00000728 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    40 0000072B EBF6                <1>     jmp short .mainlp
    41                              <1> .fnd:
    42 0000072D 57                  <1>     push rdi
    43 0000072E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    44 00000731 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    45 00000734 5F                  <1>     pop rdi ;Get original buf back
    46 00000735 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    47 00000738 488735(4EC00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    48 0000073F 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    49 00000742 5E                  <1>     pop rsi
    50                              <1> .exit:
    51 00000743 C3                  <1>     ret
    52                              <1> 
    53                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h
    54 00000744 E846000000          <1>     call flushBuffer
    55 00000749 7306                <1>     jnc .exit
    56                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    57 0000074B 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    58                              <1> .exit:
    59 00000751 C3                  <1>     ret
    60                              <1> 
    61                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    62                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    63                              <1> ;Output: rdi = First disk buffer
    64 00000752 488B3D(4EC00300)    <1>     mov rdi, [bufHeadPtr]
    65 00000759 57                  <1>     push rdi
    66                              <1> .lp:
    67 0000075A 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    68 0000075E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    69 00000761 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    70 00000768 75F0                <1>     jne .lp
    71 0000076A 5F                  <1>     pop rdi
    72 0000076B C3                  <1>     ret
    73                              <1> 
    74                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    75                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    76                              <1> ; second buffer in the chain in rdi
    77                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    78                              <1> ;Output: rdi = Second buffer in the chain
    79 0000076C E8A1FFFFFF          <1>     call makeBufferMostRecentlyUsed
    80 00000771 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
    81 00000778 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    82 0000077B C3                  <1>     ret
    83                              <1> 
    84                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    85                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    86                              <1> ;Input: rdi = Buffer header to start searching at
    87                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    88                              <1> ;        ZF=ZE => No unreferenced buffer found
    89 0000077C F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    90 00000780 750C                <1>     jnz .exit
    91 00000782 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    92 00000785 4881FFFFFFFFFF      <1>     cmp rdi, -1
    93 0000078C 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    94                              <1> .exit:
    95 0000078E C3                  <1>     ret
    96                              <1> 
    97                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    98                              <1> ;Flushes the data in a sector buffer to disk!
    99                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   100                              <1> ;Exit:  CF=NC : Success
   101                              <1> ;       CF=CY : Fail, terminate the request
   102                              <1> ;First make request to device driver
   103 0000078F 50                  <1>     push rax
   104 00000790 53                  <1>     push rbx
   105 00000791 51                  <1>     push rcx
   106 00000792 52                  <1>     push rdx
   107 00000793 56                  <1>     push rsi
   108 00000794 55                  <1>     push rbp
   109 00000795 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   110 00000799 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   111                              <1> .fbRequest0:
   112 0000079B BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   113 000007A0 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   114 000007A4 7406                <1>     jz .fbRequest1
   115 000007A6 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   116                              <1> .fbRequest1:
   117 000007AC 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   118 000007AF B901000000          <1>     mov ecx, 1  ;One sector to copy
   119 000007B4 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   120 000007B8 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   121 000007BC 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   122 000007C0 E8E01D0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   123 000007C5 E86A1C0000          <1>     call absDiskDriverCall    ;Make Driver Request
   124 000007CA 7525                <1>     jnz .fbFail
   125                              <1> ;Now check if the buffer was a FAT, to write additional copies
   126 000007CC F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   127 000007D0 7417                <1>     jz .fbFreeExit  ;If not, exit
   128 000007D2 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   129 000007D5 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   130 000007D7 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   131 000007DA 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   132 000007DE E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   133                              <1> .fbFreeExit1:
   134 000007E3 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   135 000007E6 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   136                              <1> .fbFreeExit:
   137 000007E9 F8                  <1>     clc
   138                              <1> .fbExitFail:
   139 000007EA 5D                  <1>     pop rbp
   140 000007EB 5E                  <1>     pop rsi
   141 000007EC 5A                  <1>     pop rdx
   142 000007ED 59                  <1>     pop rcx
   143 000007EE 5B                  <1>     pop rbx
   144 000007EF 58                  <1>     pop rax
   145 000007F0 C3                  <1>     ret
   146                              <1> .fbFail:
   147                              <1> ;Enter here only if the request failed
   148 000007F1 FFCE                <1>     dec esi
   149 000007F3 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   150                              <1> ;Request failed thrice, critical error call
   151 000007F5 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   152 000007FC 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   153 00000803 89C7                <1>     mov edi, eax    ;Save status word in di
   154 00000805 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   155 0000080C 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   156 0000080F B419                <1>     mov ah, critWrite | critFailOK | critRetryOK ;Set bits
   157                              <1>     ;Test for correct buffer data type
   158 00000811 F6C401              <1>     test ah, dosBuffer
   159 00000814 7505                <1>     jnz .fbFail0
   160 00000816 80CC00              <1>     or ah, critDOS
   161 00000819 EB14                <1>     jmp short .fbFailMain
   162                              <1> .fbFail0:
   163 0000081B F6C402              <1>     test ah, fatBuffer
   164 0000081E 7504                <1>     jnz .fbFail1
   165 00000820 B402                <1>     mov ah, critFAT
   166 00000822 EB0B                <1>     jmp short .fbFailMain
   167                              <1> .fbFail1:
   168 00000824 F6C404              <1>     test ah, dirBuffer
   169 00000827 7504                <1>     jnz .fbFail2
   170 00000829 B404                <1>     mov ah, critDir
   171 0000082B EB02                <1>     jmp short .fbFailMain
   172                              <1> .fbFail2:
   173                              <1> ;Here it must be a data buffer
   174 0000082D B406                <1>     mov ah, critData
   175                              <1> .fbFailMain:
   176 0000082F 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   177 00000835 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   178 00000839 E8EA190000          <1>     call criticalDOSError   ;Return in al the return code
   179 0000083E 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   180 00000845 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   181 0000084C 3C01                <1>     cmp al, critRetry
   182 0000084E 0F8447FFFFFF        <1>     je .fbRequest0
   183                              <1>     ;Else we fail (Ignore=Fail here)
   184 00000854 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   184 0000085C 00                  <1>
   185 0000085D F9                  <1>     stc ;Set error flag to indicate fail
   186 0000085E E987FFFFFF          <1>     jmp .fbExitFail
   187                              <1> 
   188                              <1> 
   189                              <1> testDirtyBufferForDrive:    ;External linkage
   190                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   191                              <1> ;Input: al = Drive number (0 based)
   192                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   193                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   194 00000863 53                  <1>     push rbx
   195 00000864 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   196                              <1> .tdbfdCheckBuffer:
   197 0000086B 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   198 0000086E 7509                <1>     jne .tdbfdGotoNextBuffer
   199 00000870 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   200 00000874 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   201 00000876 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   202                              <1> .tdbfdExit:
   203 00000877 5B                  <1>     pop rbx
   204 00000878 C3                  <1>     ret
   205                              <1> .tdbfdGotoNextBuffer:
   206 00000879 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   207 0000087C 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   208 00000883 74F2                <1>     je .tdbfdExit
   209 00000885 EBE4                <1>     jmp short .tdbfdCheckBuffer
   210                              <1> 
   211                              <1> freeBuffersForDPB:
   212                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   213                              <1> ; to have a drive number of -1, thus freeing it
   214                              <1> ;Given DPB is in rbp
   215 00000887 53                  <1>     push rbx
   216 00000888 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   217                              <1> .i0:
   218 0000088F 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   219 00000893 7506                <1>     jne .i1 ;If no, skip freeing
   220 00000895 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   221                              <1> .i1:
   222 0000089B 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   223 0000089E 4881FBFFFFFFFF      <1>     cmp rbx, -1
   224 000008A5 75E8                <1>     jne .i0
   225                              <1> .exit:
   226 000008A7 5B                  <1>     pop rbx
   227 000008A8 C3                  <1>     ret
   228                              <1> 
   229                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
   230                              <1> ;
   231                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   232                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   233                              <1> ;Flushes if not in disk change mode. 
   234                              <1> ;If in disk change mode, will check to see if the selected buffer 
   235                              <1> ; has data referring a device using the same DPB as we are changing.
   236                              <1> ; If it is, skip flushing, if not, flush first!
   237                              <1> ;
   238                              <1> ;This function will return a pointer to the desired data sector OR 
   239                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   240                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   241                              <1> ;Entry: rax = Sector to read
   242                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   243                              <1> ;       qword [workingDPB] = DPB to use for transaction
   244                              <1> ;Exit:  CF=NC => 
   245                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   246                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   247 000008A9 51                  <1>     push rcx
   248 000008AA 52                  <1>     push rdx
   249 000008AB 56                  <1>     push rsi
   250 000008AC 57                  <1>     push rdi
   251 000008AD 488B35(7CC50300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   252 000008B4 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   253 000008B6 E865010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   254 000008BB 4881FFFFFFFFFF      <1>     cmp rdi, -1
   255 000008C2 740D                <1>     je .rbReadNewSector
   256                              <1> .rbExit:
   257 000008C4 F8                  <1>     clc
   258                              <1> .rbExitNoFlag:
   259 000008C5 5F                  <1>     pop rdi
   260 000008C6 5E                  <1>     pop rsi
   261 000008C7 5A                  <1>     pop rdx
   262 000008C8 59                  <1>     pop rcx
   263 000008C9 488B1D(01C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   264 000008D0 C3                  <1>     ret
   265                              <1> .rbReadNewSector:
   266 000008D1 E8F3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   267 000008D6 803D(54D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   268 000008DD 7506                <1>     jne .flush  ;We are not, flush buffer
   269 000008DF 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   270 000008E3 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   271                              <1> .flush:
   272 000008E5 E85AFEFFFF          <1>     call flushAndFreeBuffer
   273 000008EA 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   274                              <1> .skipFlush:
   275                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   276 000008EC 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   277 000008EF 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   278 000008F2 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   279 000008F6 80F902              <1>     cmp cl, fatBuffer
   280 000008F9 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   281 000008FB 7503                <1>     jne .rbNonFATbuffer
   282 000008FD 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   283                              <1> .rbNonFATbuffer:
   284 00000900 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   285 00000903 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   286 00000906 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   287 00000909 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   288 0000090D C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   289 00000911 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   290 00000916 EBAD                <1>     jmp short .rbExitNoFlag
   291                              <1> 
   292                              <1> readSectorBuffer:   ;Internal Linkage
   293                              <1> ;Reads a sector into a built sector buffer
   294                              <1> ;Entry: rdi = Pointer to buffer header
   295                              <1> ;Exit:  CF=NC : Success
   296                              <1> ;       CF=CY : Fail, terminate the request
   297                              <1> ;       rbx pointing to buffer header
   298                              <1> ;First make request to device driver
   299 00000918 50                  <1>     push rax
   300 00000919 53                  <1>     push rbx
   301 0000091A 51                  <1>     push rcx
   302 0000091B 52                  <1>     push rdx
   303 0000091C 56                  <1>     push rsi
   304 0000091D 55                  <1>     push rbp
   305                              <1> .rsRequest0:
   306 0000091E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   307 00000923 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   308 00000927 7406                <1>     jz .rsRequest1
   309 00000929 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   310                              <1> .rsRequest1:
   311 0000092F 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   312 00000932 B901000000          <1>     mov ecx, 1  ;One sector to copy
   313 00000937 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   314 0000093B 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   315 0000093F 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   316 00000943 E8681C0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   317 00000948 E8E71A0000          <1>     call absDiskDriverCall    ;Make Driver Request
   318 0000094D 7508                <1>     jnz .rsFail
   319                              <1> .rsExit:
   320 0000094F F8                  <1>     clc
   321                              <1> .rsExitFail:
   322 00000950 5D                  <1>     pop rbp
   323 00000951 5E                  <1>     pop rsi
   324 00000952 5A                  <1>     pop rdx
   325 00000953 59                  <1>     pop rcx
   326 00000954 5B                  <1>     pop rbx
   327 00000955 58                  <1>     pop rax
   328 00000956 C3                  <1>     ret
   329                              <1> .rsFail:
   330                              <1> ;Enter here only if the request failed
   331 00000957 FFCE                <1>     dec esi
   332 00000959 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   333                              <1> ;Request failed thrice, critical error call
   334 0000095B 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   335 00000962 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   336 00000969 89C7                <1>     mov edi, eax    ;Save status word in di
   337 0000096B 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   338 00000972 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   339 00000975 B418                <1>     mov ah, critRead | critFailOK | critRetryOK ;Set bits
   340                              <1>     ;Test for correct buffer data type
   341 00000977 F6C401              <1>     test ah, dosBuffer
   342 0000097A 7505                <1>     jnz .rsFail0
   343 0000097C 80CC00              <1>     or ah, critDOS
   344 0000097F EB14                <1>     jmp short .rsFailMain
   345                              <1> .rsFail0:
   346 00000981 F6C402              <1>     test ah, fatBuffer
   347 00000984 7504                <1>     jnz .rsFail1
   348 00000986 B402                <1>     mov ah, critFAT
   349 00000988 EB0B                <1>     jmp short .rsFailMain
   350                              <1> .rsFail1:
   351 0000098A F6C404              <1>     test ah, dirBuffer
   352 0000098D 7504                <1>     jnz .rsFail2
   353 0000098F B404                <1>     mov ah, critDir
   354 00000991 EB02                <1>     jmp short .rsFailMain
   355                              <1> .rsFail2:
   356                              <1> ;Here it must be a data buffer
   357 00000993 B406                <1>     mov ah, critData
   358                              <1> .rsFailMain:
   359 00000995 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   360 0000099B 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   361 0000099F E884180000          <1>     call criticalDOSError
   362 000009A4 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   363 000009AB 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   364 000009B2 3C01                <1>     cmp al, critRetry
   365 000009B4 0F8464FFFFFF        <1>     je .rsRequest0
   366                              <1>     ;Else we fail (Ignore=Fail here)
   367 000009BA 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   367 000009C2 00                  <1>
   368 000009C3 F9                  <1>     stc ;Set error flag to indicate fail
   369 000009C4 E987FFFFFF          <1>     jmp .rsExitFail
   370                              <1>     
   371                              <1> findLRUBuffer: ;Internal Linkage
   372                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   373                              <1> ; in rbx and the currBuff variable
   374                              <1> ;Input: Nothing
   375                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   376                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   377 000009C9 52                  <1>     push rdx
   378 000009CA 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   379 000009D1 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   380 000009D5 7436                <1>     je .flbExit 
   381 000009D7 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   382 000009DE 742D                <1>     je .flbExit
   383                              <1> .flbWalk:
   384 000009E0 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   385 000009E3 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   386 000009E6 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   387 000009EA 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   388 000009EC 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   389 000009F3 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   390 000009F5 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   391                              <1> .flbHeadLink:
   392 000009FC 488B15(4EC00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   393 00000A03 48893D(4EC00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   394 00000A0A 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   395                              <1> .flbExit:
   396 00000A0D 5A                  <1>     pop rdx
   397 00000A0E 48893D(01C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   398 00000A15 C3                  <1>     ret
   399                              <1> .flbFreeLink:
   400 00000A16 51                  <1>     push rcx
   401 00000A17 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   402 00000A1A 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   403 00000A1D 59                  <1>     pop rcx
   404 00000A1E EBDC                <1>     jmp short .flbHeadLink
   405                              <1> 
   406                              <1> findSectorInBuffer:     ;Internal linkage
   407                              <1> ;Finds the Buffer for a sector
   408                              <1> ;If the sector is not in a buffer, returns with a -1
   409                              <1> ;Input: rax = Sector number
   410                              <1> ;        dl = Drive number
   411                              <1> ;Output: rdi = Buffer hdr pointer or -1
   412 00000A20 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   413                              <1> .fsiCheckBuffer:
   414 00000A27 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   415 00000A2A 7507                <1>     jne .fsiGotoNextBuffer
   416 00000A2C 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   417 00000A30 7501                <1>     jne .fsiGotoNextBuffer
   418                              <1> .fsiExit:
   419 00000A32 C3                  <1>     ret
   420                              <1> .fsiGotoNextBuffer:
   421 00000A33 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   422 00000A36 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   423 00000A3D 74F3                <1>     je .fsiExit
   424 00000A3F EBE6                <1>     jmp short .fsiCheckBuffer
    22                                  %include "./Source/Kernel/FAT/fat.asm"
    23                              <1> ;---------------------------------------------------:
    24                              <1> ;                   KERNEL FUNCTIONS                :
    25                              <1> ;---------------------------------------------------:
    26                              <1> makeDIR:           ;ah = 39h
    27                              <1> removeDIR:         ;ah = 3Ah
    28                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    29                              <1> getCurrentDIR:     ;ah = 47h
    30                              <1> getSetFileDateTime:;ah = 57h
    31                              <1> trueName:          ;ah = 60h, get fully qualified name
    32 00000A41 C3                  <1>     ret
    33                              <1> 
    34                              <1> 
    35                              <1> ;-----------------------------------:
    36                              <1> ;       File System routines        :
    37                              <1> ;-----------------------------------:
    38                              <1> getFATtype:
    39                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    40                              <1> ;Entry: rbp = DPB to ascertain FAT
    41                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    42 00000A42 53                  <1>     push rbx
    43 00000A43 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    44 00000A46 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    45 00000A4B 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    46 00000A51 730F                <1>     jae .exit
    47 00000A53 FFC9                <1>     dec ecx     ;FAT 12 marker
    48 00000A55 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    49 00000A5B 7205                <1>     jb .exit
    50 00000A5D B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    51                              <1> .exit:
    52 00000A62 5B                  <1>     pop rbx
    53 00000A63 C3                  <1>     ret
    54                              <1> 
    55                              <1> clust2FATEntry:
    56                              <1> ;Converts a cluster number to a offset in the FAT
    57                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    58                              <1> ;        eax = Cluster number to look for
    59                              <1> ;Exit:   eax = Sector on disk of FAT 
    60                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    61                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    62 00000A64 53                  <1>     push rbx
    63 00000A65 55                  <1>     push rbp
    64 00000A66 488B2D(7CC50300)    <1>     mov rbp, qword [workingDPB]
    65 00000A6D 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    66 00000A70 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    67 00000A76 731E                <1>     jae .fat32
    68 00000A78 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    69 00000A7E 7209                <1>     jb .fat12
    70                              <1> ;FAT16
    71 00000A80 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    72 00000A82 6801000000          <1>     push qword 1
    73 00000A87 EB15                <1>     jmp short .common
    74                              <1> .fat12:
    75 00000A89 89C1                <1>     mov ecx, eax    ;ecx = eax
    76 00000A8B D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    77 00000A8D 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    78 00000A8F 6800000000          <1>     push qword 0
    79 00000A94 EB08                <1>     jmp short .common
    80                              <1> .fat32:
    81 00000A96 6802000000          <1>     push qword 2
    82 00000A9B C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    83                              <1> .common:
    84                              <1> ;eax has the FAToffset
    85 00000A9E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    86 00000AA2 31D2                <1>     xor edx, edx    ;edx = 0
    87 00000AA4 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    88 00000AA6 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    89 00000AAA 01D8                <1>     add eax, ebx
    90 00000AAC 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    91 00000AAD 5D                  <1>     pop rbp
    92 00000AAE 5B                  <1>     pop rbx
    93 00000AAF C3                  <1>     ret
    94                              <1> 
    95                              <1> getStartSectorOfCluster:
    96                              <1> ;Input: eax = Cluster Number
    97                              <1> ;       rbp = dpb pointer
    98                              <1> ;Output: rax = Starting Sector number for cluster
    99                              <1> ;Gives the data sector we are at in the current cluster
   100                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   101 00000AB0 51                  <1>     push rcx
   102 00000AB1 09C0                <1>     or eax, eax ;Zero upper dword
   103 00000AB3 482D02000000        <1>     sub rax, 2
   104 00000AB9 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   105 00000ABC 48D3E0              <1>     shl rax, cl
   106 00000ABF 31C9                <1>     xor ecx, ecx
   107 00000AC1 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   108 00000AC4 4801C8              <1>     add rax, rcx
   109                              <1>     ;rax now has the first sector of the current cluster
   110 00000AC7 59                  <1>     pop rcx
   111 00000AC8 C3                  <1>     ret
   112                              <1> 
   113                              <1> findFreeCluster:
   114                              <1> ;Walks the FAT to find a free cluster and returns the 
   115                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   116                              <1> ;Works on the workingDPB
   117                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   118 00000AC9 53                  <1>     push rbx
   119 00000ACA 51                  <1>     push rcx
   120 00000ACB 52                  <1>     push rdx
   121 00000ACC 57                  <1>     push rdi
   122 00000ACD 55                  <1>     push rbp
   123 00000ACE 488B2D(7CC50300)    <1>     mov rbp, qword [workingDPB]
   124 00000AD5 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   125 00000AD9 488905(09C60300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   126                              <1> ;Use ebp as sector counter
   127 00000AE0 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   128                              <1> ;Get Sector Size in bytes in ebx
   129 00000AE3 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   130                              <1> ;Get FAT type
   131 00000AE7 E856FFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   132 00000AEC 0F84B6000000        <1>     jz .fat12
   133 00000AF2 F6C101              <1>     test cl, 1
   134 00000AF5 7571                <1>     jnz .fat16
   135                              <1> ;FAT32 proceeds here
   136 00000AF7 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   137 00000AFA 66891D(11C60300)    <1>     mov word [entries], bx
   138                              <1> .fat32Search:
   139 00000B01 B102                <1>     mov cl, fatBuffer
   140 00000B03 488B05(09C60300)    <1>     mov rax, qword [tempSect]
   141 00000B0A E89AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   142 00000B0F 724A                <1>     jc .exitFail
   143 00000B11 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   144 00000B15 31C0                <1>     xor eax, eax
   145 00000B17 0FB70D(11C60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   146 00000B1E F2AF                <1>     repne scasd ;Look for the zero dword 
   147 00000B20 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   148 00000B22 FFCA                <1>     dec edx ;Dec number of sectors left to search
   149 00000B24 743B                <1>     jz .noFreeClusters
   150 00000B26 48FF05(09C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   151 00000B2D EBD2                <1>     jmp short .fat32Search
   152                              <1> .fat32Found:
   153 00000B2F 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   154                              <1> .computeEntry:
   155 00000B35 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   156 00000B3A 488B05(09C60300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   157 00000B41 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   158 00000B44 0FB70D(11C60300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   159 00000B4B 52                  <1>     push rdx
   160 00000B4C 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   161 00000B4F 5A                  <1>     pop rdx
   162                              <1> ;rbx points to current buffer header
   163 00000B50 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   164 00000B54 4829D7              <1>     sub rdi, rdx
   165 00000B57 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   166                              <1> .exit:
   167 00000B5A F8                  <1>     clc
   168                              <1> .exitFail:      ;Keep carry flag
   169 00000B5B 5D                  <1>     pop rbp
   170 00000B5C 5F                  <1>     pop rdi
   171 00000B5D 5A                  <1>     pop rdx
   172 00000B5E 59                  <1>     pop rcx
   173 00000B5F 5B                  <1>     pop rbx
   174 00000B60 C3                  <1>     ret
   175                              <1> .noFreeClusters:
   176 00000B61 B8FFFFFFFF          <1>     mov eax, -1 ;No free cluster marker
   177 00000B66 EBF2                <1>     jmp short .exit
   178                              <1> .fat16:
   179 00000B68 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   180 00000B6A 66891D(11C60300)    <1>     mov word [entries], bx
   181                              <1> .fat16Search:
   182 00000B71 B102                <1>     mov cl, fatBuffer
   183 00000B73 488B05(09C60300)    <1>     mov rax, qword [tempSect]
   184 00000B7A E82AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   185 00000B7F 72DA                <1>     jc .exitFail
   186 00000B81 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   187 00000B85 31C0                <1>     xor eax, eax
   188 00000B87 0FB70D(11C60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   189 00000B8E F266AF              <1>     repne scasw ;Look for the zero word 
   190 00000B91 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   191 00000B93 FFCA                <1>     dec edx ;Dec number of sectors left to search
   192 00000B95 74CA                <1>     jz .noFreeClusters
   193 00000B97 48FF05(09C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   194 00000B9E EBD1                <1>     jmp short .fat16Search
   195                              <1> .fat16Found:
   196 00000BA0 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   197 00000BA6 EB8D                <1>     jmp short .computeEntry
   198                              <1> .fat12:
   199 00000BA8 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   200 00000BAA D1E0                <1>     shl eax, 1  ;Multiply by 2
   201 00000BAC B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   202 00000BB1 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   203 00000BB2 31D2                <1>     xor edx, edx
   204 00000BB4 F7F1                <1>     div ecx
   205 00000BB6 5A                  <1>     pop rdx
   206 00000BB7 668905(11C60300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   207                              <1>     ;The value is rounded down so we can read the next sector for the 
   208                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   209 00000BBE B102                <1>     mov cl, fatBuffer
   210 00000BC0 488B05(09C60300)    <1>     mov rax, qword [tempSect]
   211 00000BC7 E8DDFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   212 00000BCC 728D                <1>     jc .exitFail
   213 00000BCE 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   214                              <1> .fat12SearchNewSector:
   215 00000BD2 0FB70D(11C60300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   216                              <1> .fat12Search:
   217 00000BD9 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   218 00000BDC 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   219 00000BE1 744A                <1>     jz .fat12EntryFound
   220 00000BE3 48FFC7              <1>     inc rdi ;Goto next byte
   221 00000BE6 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   222 00000BE8 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   223 00000BEB C1E804              <1>     shr eax, 4  ;Shift down by 4
   224 00000BEE 743D                <1>     jz .fat12EntryFound
   225 00000BF0 48FFC7              <1>     inc rdi ;Goto next entry
   226 00000BF3 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   227 00000BF5 75E2                <1>     jnz .fat12Search
   228                              <1> ;We arrive here when we are at the last entry in the sector
   229 00000BF7 48FF05(09C60300)    <1>     inc qword [tempSect]    ;Get next Sector
   230 00000BFE 488B05(09C60300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   231 00000C05 B102                <1>     mov cl, fatBuffer
   232 00000C07 E89DFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   233 00000C0C 0F8249FFFFFF        <1>     jc .exitFail
   234 00000C12 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   235 00000C15 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   236 00000C19 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   237 00000C1B C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   238 00000C1E 740D                <1>     jz .fat12EntryFound ;Found a sector!
   239                              <1>     ;Empty cluster not found in sector
   240 00000C20 FFCA                <1>     dec edx ;Decrement sector count
   241 00000C22 0F8439FFFFFF        <1>     jz .noFreeClusters
   242 00000C28 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   243 00000C2B EBA5                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   244                              <1> .fat12EntryFound:
   245 00000C2D E903FFFFFF          <1>     jmp .computeEntry   ;Unnecessary redirection
   246                              <1> 
   247                              <1> getDataSector:
   248                              <1> ;This function will request the sector of data in [currSectD].
   249                              <1> ;This call can only be used for DATA sectors.
   250                              <1> ;Preserves all registers
   251                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   252                              <1> ;        CF=CY => Critical error occurred and was FAILed
   253 00000C32 50                  <1>     push rax
   254 00000C33 53                  <1>     push rbx
   255 00000C34 51                  <1>     push rcx
   256 00000C35 488B05(21C60300)    <1>     mov rax, qword [currSectD]  ;Get the disk sector number to read
   257 00000C3C BB01000000          <1>     mov ebx, dosBuffer
   258 00000C41 B908000000          <1>     mov ecx, dataBuffer 
   259 00000C46 4885C0              <1>     test rax, rax
   260 00000C49 0F44CB              <1>     cmovz ecx, ebx  ;If sector 0, change to DOS buffer
   261                              <1> .getSectorRead:
   262 00000C4C E858FCFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   263 00000C51 59                  <1>     pop rcx
   264 00000C52 5B                  <1>     pop rbx
   265 00000C53 58                  <1>     pop rax
   266 00000C54 C3                  <1>     ret
   267                              <1> 
   268                              <1> getNextSectorOfFile:
   269                              <1> ;This function will read the next sector for a file into a buffer.
   270                              <1> ;If the next sector to be read lives in the next cluster, it will update
   271                              <1> ; the file handle of the file being read/written to the new cluster
   272                              <1> ;
   273                              <1> ;Input: rbp = dpb pointer
   274                              <1> ;Output:
   275                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   276                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File
   277                              <1> ;       CF=CY => Critical error occurred and was FAILed
   278                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   279                              <1> ; next cluster and read first sector 
   280                              <1>     ;Check if we need to go to next cluster
   281 00000C55 8A05(20C60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   282 00000C5B 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   283 00000C5E 7416                <1>     je .gotoNextCluster
   284                              <1>     ;Goto next sector in same cluster
   285 00000C60 FE05(20C60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   286 00000C66 48FF05(21C60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   287 00000C6D 488B05(21C60300)    <1>     mov rax, qword [currSectD]
   288                              <1> .exitOK:
   289 00000C74 F8                  <1>     clc
   290                              <1> .exitFail:
   291 00000C75 C3                  <1>     ret
   292                              <1> .gotoNextCluster:
   293 00000C76 8B05(17C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   294 00000C7C E82A000000          <1>     call walkFAT
   295 00000C81 72F2                <1>     jc .exitFail
   296                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   297 00000C83 3DFFFFFFFF          <1>     cmp eax, -1
   298 00000C88 74EA                <1>     je .exitOK
   299                              <1> ;Update the new cluster and sector information
   300 00000C8A 8905(17C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   301 00000C90 FF05(13C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   302 00000C96 E815FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   303 00000C9B 488905(21C60300)    <1>     mov qword [currSectD], rax  ;Save it
   304 00000CA2 C605(20C60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   305 00000CA9 EBC9                <1>     jmp short .exitOK
   306                              <1> 
   307                              <1> 
   308                              <1> walkFAT:
   309                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   310                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   311                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   312                              <1> ;       rbp = DPB number
   313                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   314                              <1> ;If carry set, getBuffer failed!
   315 00000CAB 53                  <1>     push rbx
   316 00000CAC 51                  <1>     push rcx
   317 00000CAD 52                  <1>     push rdx
   318 00000CAE 57                  <1>     push rdi
   319 00000CAF 55                  <1>     push rbp
   320 00000CB0 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   321 00000CB2 E8ADFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   322                              <1>     ;and FAT type in ecx
   323 00000CB7 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   324 00000CBB 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   325 00000CBD 51                  <1>     push rcx    ;Move FAT signature onto stack
   326 00000CBE B102                <1>     mov cl, fatBuffer
   327 00000CC0 E8E4FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   328 00000CC5 59                  <1>     pop rcx
   329 00000CC6 722D                <1>     jc .exitFail
   330                              <1>     ;Check if FAT 12, 16, 32
   331 00000CC8 85C9                <1>     test ecx, ecx
   332 00000CCA 742F                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   333 00000CCC F7C101000000        <1>     test ecx, 1
   334 00000CD2 7410                <1>     jz .goToNextClusterFat32
   335                              <1>     ;Here we handle FAT16
   336 00000CD4 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   337 00000CD9 663DFFFF            <1>     cmp ax, -1
   338 00000CDD 7515                <1>     jne .exit
   339 00000CDF 0FBEC0              <1>     movsx eax, al
   340 00000CE2 EB10                <1>     jmp short .exit
   341                              <1> .goToNextClusterFat32:
   342 00000CE4 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   343 00000CE8 3DFFFFFFFF          <1>     cmp eax, -1
   344 00000CED 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   345 00000CEF 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   346                              <1> .exit:
   347 00000CF4 F8                  <1>     clc
   348                              <1> .exitFail:
   349 00000CF5 5D                  <1>     pop rbp
   350 00000CF6 5F                  <1>     pop rdi
   351 00000CF7 5A                  <1>     pop rdx
   352 00000CF8 59                  <1>     pop rcx
   353 00000CF9 5B                  <1>     pop rbx
   354 00000CFA C3                  <1>     ret
   355                              <1> .gotoNextClusterFat12:
   356                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   357                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   358                              <1> 
   359 00000CFB 57                  <1>     push rdi    ;Save the cluster number on the stack
   360 00000CFC 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   361 00000CFF FFC0                <1>     inc eax ;Get next sector
   362 00000D01 B102                <1>     mov cl, fatBuffer
   363 00000D03 E8A1FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   364 00000D08 59                  <1>     pop rcx ;Return the cluster number in rcx
   365 00000D09 72EA                <1>     jc .exitFail
   366                              <1>     ;rdi has first buffer header, rbx has second buffer header
   367                              <1>     ;rdx has offset into first header for entry
   368 00000D0B F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   369 00000D11 7422                <1>     jz .gotoNextClusterFat12Even
   370                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   371 00000D13 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   372 00000D17 29D0                <1>     sub eax, edx
   373 00000D19 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   374 00000D1B 750E                <1>     jnz .gotoNextClusterFat12NoCross
   375                              <1>     ;Boundary cross, build entry properly
   376 00000D1D 31C0                <1>     xor eax, eax
   377 00000D1F 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   378 00000D23 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   379 00000D26 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   380 00000D29 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   381                              <1> .gotoNextClusterFat12NoCross:
   382 00000D2B 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   383 00000D30 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   384 00000D33 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   385                              <1> .gotoNextClusterFat12Even:
   386                              <1>     ;Here the cluster is even and can't cross a sector boundary
   387 00000D35 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   388 00000D3A 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   389                              <1> .checkIfLastFAT12Cluster:
   390 00000D3F 663DFF0F            <1>     cmp ax, 0FFFh
   391 00000D43 75AF                <1>     jne .exit
   392 00000D45 B8FFFFFFFF          <1>     mov eax, -1
   393 00000D4A E9A5FFFFFF          <1>     jmp .exit
    23                                  %include "./Source/Kernel/FAT/findfile.asm"
    24                              <1> ;Generic Find First and Find Next functions here
    25                              <1> 
    26                              <1> genericFindFirst:
    27 00000D4F C3                  <1>     ret
    28                              <1> genericFindNext:
    29 00000D50 C3                  <1>     ret
    24                                  %include "./Source/Kernel/FileIO/devio.asm"
    25                              <1> ;This file contains the primitive dev io function, which will be called 
    26                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    27                              <1> ; make requests for device IO.
    28                              <1> 
    29                              <1> mainCharIO:
    30                              <1> ;This is the main IO clearing function for Char IO.
    31                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    32                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    33                              <1> ;
    34                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    35                              <1> ;       ah = {0,..., 5}, a subfunction number
    36                              <1> ;       Function 0: Read Char (drvREAD)
    37                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    38                              <1> ;       Function 2: Write Char (drvWrite)
    39                              <1> ; In the case the below functions are called for Disk/Net files
    40                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    41                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    42                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    43                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    44                              <1> ;
    45                              <1> ; If and only if ah = 02h, al = Char to write to device
    46                              <1> ;
    47                              <1> ;
    48                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    49                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    50                              <1> ;                                           ZF = NZ => Device ready (not busy)
    51                              <1> ;                                               If ND read, AL = Next Char
    52                              <1> ; For Files/Net:
    53                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    54                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    55                              <1> ;           For Read and ND Read:
    56                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    57                              <1> ;               Read returns ^Z on EOF.
    58                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    59                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    60                              <1> ;
    61                              <1> ;All registers preserved EXCEPT for ax and flags
    62                              <1> 
    63                              <1> ;Reference Request Header
    64                              <1> ;Common Section:
    65                              <1> ;    .hdrlen resb 1  ;Length of the request header
    66                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    67                              <1> ;    .cmdcde resb 1  ;Command code
    68                              <1> ;    .status resw 1  ;Status word
    69                              <1> ;    .devptr resq 1  ;Reserved. Unused
    70                              <1> ;Below used by calls 0,1,2,5
    71                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    72                              <1> ;Below used by calls 0,2
    73                              <1> ;    .bufptr resq 1
    74                              <1> ;    .tfrlen resd 1
    75                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    76                              <1> ;    .strtsc resq 1
    77                              <1> ;    .desptr resq 1
    78                              <1> 
    79                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    80 00000D51 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    81 00000D52 488D1D(72C50300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    82 00000D59 48891D(FCC30300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    83 00000D60 5B                  <1>     pop rbx
    84 00000D61 C705(04C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    84 00000D69 0000                <1>
    85 00000D6B 668905(72C50300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    86 00000D72 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    87 00000D78 0F85A1000000        <1>     jnz .notChar
    88 00000D7E 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    89 00000D84 0F8495000000        <1>     jz .notChar
    90                              <1> ;Char devices only here
    91 00000D8A E8911B0000          <1>     call dosPushRegs    ;Save context here
    92 00000D8F 488D1DABF2FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    93 00000D96 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    94 00000D99 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    95 00000D9C 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    96 00000D9F 890D(EEC30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    97                              <1>     ;Now set up cx for status word
    98 00000DA5 31C9                <1>     xor ecx, ecx
    99 00000DA7 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   100 00000DAA 7506                <1>     jne .skipBsySet
   101 00000DAC 81C900020000        <1>     or ecx, drvBsyStatus
   102                              <1> .skipBsySet:
   103 00000DB2 66870D(F1C30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   104                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   105 00000DB9 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   106 00000DC0 E846150000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   107 00000DC5 668B3D(F1C30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   108 00000DCC F7C700800000        <1>     test edi, drvErrStatus
   109 00000DD2 752D                <1>     jnz .error
   110                              <1> .ignoreRet:
   111 00000DD4 803D(F0C30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   112 00000DDB 750C                <1>     jne .notNDRead
   113 00000DDD 8A05(FBC30300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   114 00000DE3 8805(72C50300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   115                              <1> .notNDRead:
   116 00000DE9 8A25(F2C30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   117 00000DEF F6D4                <1>     not ah
   118 00000DF1 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   119 00000DF4 E8101B0000          <1>     call dosPopRegs ;Get back the context
   120 00000DF9 668B05(72C50300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   121                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00000E00 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   122                              <1> .error:
   123                              <1>     ;cl has flags
   124 00000E01 88CC                <1>     mov ah, cl
   125 00000E03 E80A140000          <1>     call charDevErr
   126 00000E08 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   127 00000E0A 750A                <1>     jne .errorIgnore
   128                              <1>     ;Fallthrough => Retry
   129 00000E0C E8F81A0000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   130 00000E11 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   131                              <1> .errorIgnore:
   132                              <1>     ;Clear the busy bit in the status word
   133 00000E16 8025(F2C30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   134 00000E1D EBB5                <1>     jmp short .ignoreRet
   135                              <1> .notChar:
   136                              <1> ;Just return with ZF=NZ for now
   137 00000E1F 50                  <1>     push rax
   138 00000E20 31C0                <1>     xor eax, eax
   139 00000E22 FEC0                <1>     inc al
   140 00000E24 58                  <1>     pop rax
   141                              <1>     return
    18                              <2> %%_ret:
    19 00000E25 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> openSFT:
   144                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   145                              <1> ;Input: rdi = SFT pointer
   146 00000E26 E8F51A0000          <1>     call dosPushRegs
   147 00000E2B B00D                <1>     mov al, drvOPEN
   148 00000E2D EB07                <1>     jmp short openCloseCommon
   149                              <1> closeSFT:
   150                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   151 00000E2F E8EC1A0000          <1>     call dosPushRegs
   152 00000E34 B00E                <1>     mov al, drvCLOSE
   153                              <1> openCloseCommon:
   154                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   155 00000E36 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   156 00000E3C 7469                <1>     jz .exit    ;Exit if so
   157 00000E3E F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   158 00000E42 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   159 00000E46 7512                <1>     jnz .charDev
   160                              <1>     ;Here a disk drive, rdi is a DPB ptr
   161 00000E48 803D(30C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   162 00000E4F 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   163 00000E51 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   164 00000E54 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   165 00000E56 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   166                              <1> .charDev:
   167 00000E5A 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   168 00000E60 7445                <1>     jz .exit    ;No, exit!
   169 00000E62 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   170 00000E65 488D1D(18C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   171 00000E6C 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   172                              <1> .retryEP:
   173 00000E6F 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   174 00000E72 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   175 00000E75 50                  <1>     push rax    ;Save the dword
   176 00000E76 E894140000          <1>     call goDriver
   177 00000E7B 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   178 00000E82 F7C700800000        <1>     test edi, drvErrStatus
   179 00000E88 741C                <1>     jz .exitPop
   180                              <1>     ;Error here, check if char or block drive
   181 00000E8A 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   182 00000E90 7404                <1>     jz .blockError
   183                              <1>     ;Char error here
   184 00000E92 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   185 00000E94 EB04                <1>     jmp short .errorCmn
   186                              <1> .blockError:
   187 00000E96 88C8                <1>     mov al, cl  ;Move drive number into al
   188 00000E98 B406                <1>     mov ah, critData    ;Data on block dev error
   189                              <1> .errorCmn:
   190                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   191 00000E9A E873130000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   192 00000E9F B001                <1>     mov al, critRetry   ;al returns user response
   193 00000EA1 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   194 00000EA3 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   195 00000EA4 EBC9                <1>     jmp short .retryEP  ;Reset
   196                              <1> .exitPop:
   197 00000EA6 58                  <1>     pop rax    
   198                              <1> .exit:
   199 00000EA7 E85D1A0000          <1>     call dosPopRegs
   200                              <1>     return
    18                              <2> %%_ret:
    19 00000EAC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    26                              <1> ;-----------------------------------------------------------------------:
    27                              <1> ;                  DOS default char functions live here                 :
    28                              <1> ;                                                                       :
    29                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    30                              <1> ;                                                                       :
    31                              <1> ;Rules for the naming of the DOS functions                              :
    32                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    33                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    34                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    35                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    36                              <1> ;                                                                       :
    37                              <1> ;-----------------------------------------------------------------------:
    38                              <1> 
    39                              <1> charIn_BE:     ;ah = 01h
    40                              <1> ;Return char that has been read and echoed in al
    41 00000EAD E866010000          <1>     call charIn_B
    42 00000EB2 50                  <1>     push rax
    43 00000EB3 E804000000          <1>     call charOut_B.in    ;Output it to screen
    44 00000EB8 58                  <1>     pop rax
    45                              <1>     return
    18                              <2> %%_ret:
    19 00000EB9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> 
    47                              <1> charOut_B:       ;ah = 02h
    48                              <1> ;Bspace is regular cursor left, does not insert a blank
    49 00000EBA 88D0                <1>     mov al, dl
    50                              <1> .in:  ;Internal function Entry Point, with char in al
    51 00000EBC 3C20                <1>     cmp al, asciiCaret
    52 00000EBE 7277                <1>     jb .control
    53 00000EC0 3C7F                <1>     cmp al, DEL ;DEL char?
    54 00000EC2 7406                <1>     je .skipCurs
    55 00000EC4 FE05(28C20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    56                              <1> .skipCurs:
    57 00000ECA FE05(2EC30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    58 00000ED0 8025(2EC30300)03    <1>     and byte [vConErr], 3
    59 00000ED7 56                  <1>     push rsi
    60 00000ED8 7507                <1>     jnz .skipErrorCheck
    61 00000EDA 50                  <1>     push rax
    62 00000EDB E884020000          <1>     call vConCtrlCheck
    63 00000EE0 58                  <1>     pop rax
    64                              <1> .skipErrorCheck:
    65 00000EE1 E80C020000          <1>     call outputOnStdout
    66 00000EE6 5E                  <1>     pop rsi
    67 00000EE7 F605(2BC30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    68                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000EEE 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    69 00000EF0 53                  <1>     push rbx
    70 00000EF1 56                  <1>     push rsi
    71 00000EF2 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    72 00000EF7 E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    73 00000EFC 7236                <1>     jc .exitPrintEcho
    74                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    75 00000EFE 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    76 00000F02 F7C300800000        <1>     test ebx, devRedirDev
    77 00000F08 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    78 00000F0A F7C380000000        <1>     test ebx, devCharDev
    79 00000F10 7422                <1>     jz .exitPrintEcho
    80 00000F12 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    81 00000F17 E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    82 00000F1C 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    83 00000F1E 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    84 00000F24 7407                <1>     jz .netSpool
    85 00000F26 E8FB010000          <1>     call outputOnSFT
    86 00000F2B EB07                <1>     jmp short .exitPrintEcho
    87                              <1> .netSpool:
    88 00000F2D C605(2BC30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    89                              <1> .exitPrintEcho:
    90 00000F34 5E                  <1>     pop rsi
    91 00000F35 5B                  <1>     pop rbx
    92                              <1>     return
    18                              <2> %%_ret:
    19 00000F36 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    93                              <1> .control:
    94 00000F37 3C0D                <1>     cmp al, CR
    95 00000F39 7425                <1>     je .newline
    96 00000F3B 3C08                <1>     cmp al, BSP
    97 00000F3D 742D                <1>     je .back
    98 00000F3F 3C09                <1>     cmp al, TAB
    99 00000F41 7587                <1>     jne .skipCurs   ;Treat as normal
   100                              <1>     ;TAB key here
   101                              <1> .tab:
   102 00000F43 51                  <1>     push rcx
   103 00000F44 0FB60D(28C20300)    <1>     movzx ecx, byte [vConCursPos]
   104 00000F4B 80C9F8              <1>     or cl, ~7
   105 00000F4E F6D9                <1>     neg cl
   106 00000F50 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   107                              <1> .tabloop:
   108 00000F53 B020                <1>     mov al, SPC
   109 00000F55 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   110 00000F5A FEC9                <1>     dec cl
   111 00000F5C 75F5                <1>     jnz .tabloop
   112                              <1> .stopTab:
   113 00000F5E 59                  <1>     pop rcx
   114                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00000F5F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   115                              <1> .newline:
   116 00000F60 C605(28C20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   117 00000F67 E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   118                              <1> .back:
   119 00000F6C FE0D(28C20300)      <1>     dec byte [vConCursPos]
   120 00000F72 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   121                              <1> 
   122                              <1> auxIn_B:        ;ah = 03h
   123 00000F77 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   124 00000F7C BB03000000          <1>     mov ebx, 3
   125 00000F81 E8A5020000          <1>     call getCharDevSFT
   126                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F86 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   127                              <1> .auxloop:
   128 00000F88 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   129 00000F8A E8C2FDFFFF          <1>     call mainCharIO
   130 00000F8F 7408                <1>     jz .signalLoop
   131 00000F91 30E4                <1>     xor ah, ah  ;Read the char in
   132 00000F93 E8B9FDFFFF          <1>     call mainCharIO
   133                              <1>     return
    18                              <2> %%_ret:
    19 00000F98 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   134                              <1> .signalLoop:
   135 00000F99 E8A3010000          <1>     call callInt48h
   136 00000F9E EBE8                <1>     jmp short .auxloop
   137                              <1> 
   138                              <1> auxOut_B:       ;ah = 04h
   139 00000FA0 53                  <1>     push rbx
   140 00000FA1 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   141 00000FA6 EB06                <1>     jmp short auxOutCmn
   142                              <1> prnOut_B:       ;ah = 05h
   143 00000FA8 53                  <1>     push rbx
   144 00000FA9 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   145                              <1> auxOutCmn: ;Auxilliary output device common 
   146 00000FAE 88D0                <1>     mov al, dl  ;Get the char into al
   147 00000FB0 50                  <1>     push rax
   148 00000FB1 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   149 00000FB6 58                  <1>     pop rax
   150 00000FB7 56                  <1>     push rsi
   151 00000FB8 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   152 00000FBD 5E                  <1>     pop rsi
   153 00000FBE 5B                  <1>     pop rbx
   154                              <1>     return
    18                              <2> %%_ret:
    19 00000FBF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> directConIO:    ;ah = 06h
   157 00000FC0 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   158 00000FC2 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   159 00000FC4 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   160                              <1> ;Here is the read char direct function
   161 00000FCA 31DB                <1>     xor ebx, ebx    
   162 00000FCC E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   163                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FD1 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   164 00000FD3 488B2D(D3C30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   165 00000FDA B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   166 00000FDC E870FDFFFF          <1>     call mainCharIO
   167 00000FE1 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   168 00000FE6 7507                <1>     jnz .readChar
   169 00000FE8 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   170 00000FEC 30C0                <1>     xor al, al  ;Set caller return code to 0
   171                              <1>     return
    18                              <2> %%_ret:
    19 00000FEE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   172                              <1> .readChar:
   173 00000FEF 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   174                              <1>     ;Fallthrough here to get the char at STDIN
   175                              <1> charIn:         ;ah = 07h
   176                              <1> ;Return char in al from STDIN without waiting
   177 00000FF3 31DB                <1>     xor ebx, ebx
   178 00000FF5 E831020000          <1>     call getCharDevSFT
   179                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FFA 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   180 00000FFC B401                <1>     mov ah, 01  ;ND read for char
   181 00000FFE E84EFDFFFF          <1>     call mainCharIO
   182 00001003 750B                <1>     jnz .getChar
   183 00001005 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   184 00001007 CD4A                <1>     int 4Ah
   185 00001009 E833010000          <1>     call callInt48h
   186 0000100E EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   187                              <1> .getChar:
   188                              <1>     ;Get the char in al and exit
   189 00001010 30E4                <1>     xor ah, ah
   190 00001012 E83AFDFFFF          <1>     call mainCharIO
   191                              <1>     return
    18                              <2> %%_ret:
    19 00001017 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> charIn_B:       ;ah = 08h
   193                              <1> ;Return char in al from STDIN
   194 00001018 56                  <1>     push rsi
   195                              <1> .readAgain:
   196 00001019 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   197                              <1>     ;Also sets rsi to point to the device SFT for 
   198 0000101E 7543                <1>     jnz .pullChar
   199 00001020 803D(55D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   200 00001027 7507                <1>     jne .skiplookahead
   201 00001029 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   202 0000102B E821FDFFFF          <1>     call mainCharIO
   203                              <1> .skiplookahead:
   204 00001030 B484                <1>     mov ah, 84h
   205 00001032 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   206 00001034 66813D(81D80300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   206 0000103C FF                  <1>
   207 0000103D 751B                <1>     jne .skipClockRead
   208 0000103F E8DC180000          <1>     call dosPushRegs
   209 00001044 F8                  <1>     clc ;Clear CF, write primary header to backup
   210 00001045 E882000000          <1>     call swapPrimaryHeader
   211 0000104A E8C7060000          <1>     call readDateTimeRecord
   212 0000104F F9                  <1>     stc ;Set CF, write backup to primary header
   213 00001050 E877000000          <1>     call swapPrimaryHeader
   214 00001055 E8AF180000          <1>     call dosPopRegs
   215                              <1> .skipClockRead:
   216 0000105A 66FF05(81D80300)    <1>     inc word [keybTicks]
   217 00001061 EBB6                <1>     jmp short .readAgain
   218                              <1> .pullChar:
   219 00001063 30E4                <1>     xor ah, ah
   220 00001065 E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   221 0000106A 5E                  <1>     pop rsi
   222 0000106B 3C00                <1>     cmp al, NUL ;Is this the null char?
   223 0000106D 7507                <1>     jne .exit
   224                              <1>     ;We are mid extended ascii, prevent printer toggling
   225 0000106F C605(80D80300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   226                              <1> .exit:
   227                              <1>     return
    18                              <2> %%_ret:
    19 00001076 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228                              <1> 
   229                              <1> printString_B:      ;ah = 09h
   230 00001077 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   231                              <1> .ps0:
   232 0000107A AC                  <1>     lodsb   ;Get char in al and inc rsi
   233 0000107B 3C24                <1>     cmp al, "$" ;End of string char?
   234                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000107D 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   235 0000107F E838FEFFFF          <1>     call charOut_B.in
   236 00001084 EBF4                <1>     jmp short .ps0
   237                              <1> 
   238                              <1> checkStdinStatus:  ;ah = 0Bh
   239                              <1> ;Returns the status of the driver controlling vCon
   240 00001086 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   241 0000108B B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   242                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000108D 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   243 0000108F FEC8                <1>     dec al  ;Set al to -1 if char available
   244                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00001091 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   245                              <1> clearbuffDoFunc:   ;ah = 0Ch
   246                              <1> ;Clears any buffers and issues a console read command (the command in al)
   247                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   248 00001092 50                  <1>     push rax
   249 00001093 52                  <1>     push rdx
   250 00001094 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   251 00001096 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   252 0000109B 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   253 0000109D B404                <1>     mov ah, 04h ;Flush input buffers
   254 0000109F E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   255                              <1> .skipFlush:
   256 000010A4 5A                  <1>     pop rdx
   257 000010A5 58                  <1>     pop rax
   258 000010A6 88C4                <1>     mov ah, al  ;Move function number into ah
   259 000010A8 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   260 000010AA 7507                <1>     jne .others
   261 000010AC 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   262 000010AF 7412                <1>     jz .bad ;Yes, exit
   263 000010B1 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   264                              <1> .others:
   265 000010B3 3C01                <1>     cmp al, 01h
   266 000010B5 740F                <1>     je .callFunction
   267 000010B7 3C07                <1>     cmp al, 07h
   268 000010B9 740B                <1>     je .callFunction
   269 000010BB 3C08                <1>     cmp al, 08h
   270 000010BD 7407                <1>     je .callFunction
   271 000010BF 3C0A                <1>     cmp al, 0Ah
   272 000010C1 7403                <1>     je .callFunction
   273                              <1> .bad:
   274 000010C3 30C0                <1>     xor al, al
   275                              <1>     return
    18                              <2> %%_ret:
    19 000010C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   276                              <1> .callFunction:
   277 000010C6 FA                  <1>     cli ;Prepare to swap stack pointer
   278                              <1>     ;The below address avoids "properly" reentering DOS
   279                              <1>     ;We simply reuse the function dispatch aspect and 
   280                              <1>     ; return the stack pointer to the top.
   281 000010C7 E96C170000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   282                              <1> ;------------------------
   283                              <1> ;  Primitive functions  :
   284                              <1> ;------------------------
   285                              <1> swapPrimaryHeader:
   286                              <1> ;Will swap the primary header to the backup or vice-versa, depending on
   287                              <1> ; CF. CF = NC, write to backup, CF=CY, read from backup
   288 000010CC 56                  <1>     push rsi
   289 000010CD 57                  <1>     push rdi
   290 000010CE 51                  <1>     push rcx
   291 000010CF 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   291 000010D8 00                  <1>
   292 000010D9 488D35(18C40300)    <1>     lea rsi, primReqHdr
   293 000010E0 488D3D(56D80300)    <1>     lea rdi, bkupReqHdr
   294 000010E7 7303                <1>     jnc .read
   295 000010E9 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   296                              <1> .read:
   297 000010EC F3A4                <1>     rep movsb   ;Swap
   298 000010EE 59                  <1>     pop rcx
   299 000010EF 5F                  <1>     pop rdi
   300 000010F0 5E                  <1>     pop rsi
   301                              <1>     return
    18                              <2> %%_ret:
    19 000010F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   302                              <1> outputOnStdout:
   303                              <1> ;Input: al = Char to output
   304                              <1> ;Output: CF=CY, all good
   305 000010F2 53                  <1>     push rbx
   306 000010F3 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   307 000010F8 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   308 000010FD 7217                <1>     jc .exit
   309 000010FF 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   310 00001105 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   311 00001107 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   312 0000110B 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   313 00001111 7405                <1>     jz .notCharDevOrFast
   314 00001113 CD49                <1>     int 49h ;Fast output
   315                              <1> .exitOk:
   316 00001115 F8                  <1>     clc
   317                              <1> .exit:
   318 00001116 5B                  <1>     pop rbx
   319                              <1>     return
    18                              <2> %%_ret:
    19 00001117 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   320                              <1> .notCharDevOrFast:
   321 00001118 E809000000          <1>     call outputOnSFT
   322 0000111D 5B                  <1>     pop rbx
   323                              <1>     return
    18                              <2> %%_ret:
    19 0000111E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> outputToHandle:
   326                              <1> ;Char to output must be in al
   327 0000111F E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   328                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001124 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   329                              <1> outputOnSFT:
   330                              <1> ;Output char in al to SFT in rsi
   331                              <1> ;Waits until device is not busy to send char.
   332                              <1> ;Calls int 48h if device busy
   333 00001126 50                  <1>     push rax
   334 00001127 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   335 00001129 E823FCFFFF          <1>     call mainCharIO
   336 0000112E 58                  <1>     pop rax
   337 0000112F 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   338 00001131 B402                <1>     mov ah, 02h ;Output char in al
   339 00001133 E819FCFFFF          <1>     call mainCharIO
   340 00001138 F8                  <1>     clc
   341                              <1>     return
    18                              <2> %%_ret:
    19 00001139 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   342                              <1> .signalLoop:
   343 0000113A E802000000          <1>     call callInt48h
   344 0000113F EBE5                <1>     jmp short outputOnSFT
   345                              <1> 
   346                              <1> callInt48h:
   347                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   348 00001141 9C                  <1>     pushfq
   349 00001142 F605(ECC30300)FF    <1>     test byte [int48Flag], -1
   350 00001149 7417                <1>     jz .exit    ;If zero, not safe
   351 0000114B F605(63C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   352 00001152 750E                <1>     jnz .exit
   353                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   354 00001154 FF35(ECC30300)      <1>     push qword [int48Flag] 
   355 0000115A CD48                <1>     int 48h
   356 0000115C 8F05(ECC30300)      <1>     pop qword [int48Flag]    ;Return original value
   357                              <1> .exit:
   358 00001162 9D                  <1>     popfq
   359                              <1>     return
    18                              <2> %%_ret:
    19 00001163 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> 
   362                              <1> vConCtrlCheck:
   363                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   364                              <1> ; the processing. 
   365                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   366                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   367                              <1> ;
   368                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   369                              <1> ;^S will pause screen processing until another key is processed by vCon input
   370                              <1> ;^P will toggle the printer echo feature of the vConsole
   371                              <1> ;
   372                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   373                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   374                              <1> ;
   375                              <1> ;Output: 
   376                              <1> ;   CF=CY : Error
   377                              <1> ;   CF=NC : ...
   378                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   379                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   380 00001164 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   381 00001169 53                  <1>     push rbx
   382 0000116A 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   383 0000116C E8BA000000          <1>     call getCharDevSFT
   384 00001171 5B                  <1>     pop rbx
   385                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001172 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   386 00001174 B401                <1>     mov ah, 01  ;Non destructively read CON
   387 00001176 E8D6FBFFFF          <1>     call mainCharIO
   388 0000117B 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   389                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   390 0000117D 3C13                <1>     cmp al, DC3 ;^S ?
   391 0000117F 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   392 00001181 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   393 00001183 E8C9FBFFFF          <1>     call mainCharIO
   394 00001188 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   395                              <1> .checkPrintOrExit:
   396 0000118D 3C10                <1>     cmp al, DLE ;Do we have ^P?
   397 0000118F 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   398 00001191 3C03                <1>     cmp al, ETX ;Do we have ^C?
   399 00001193 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   400                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   401                              <1>     return 
    18                              <2> %%_ret:
    19 00001195 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   402                              <1> .printToggle:
   403 00001196 F615(2BC30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   404 0000119C 53                  <1>     push rbx
   405 0000119D BB04000000          <1>     mov ebx, 4  ;PRN handle
   406 000011A2 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   407 000011A7 5B                  <1>     pop rbx
   408                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011A8 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   409 000011AA 57                  <1>     push rdi
   410 000011AB 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   411 000011AE 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   412 000011B4 741D                <1>     jz .notNet
   413 000011B6 50                  <1>     push rax
   414 000011B7 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   415 000011BC CD4F                <1>     int 4Fh
   416 000011BE 58                  <1>     pop rax
   417 000011BF 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   418                              <1>     ;If something went wrong, turn off echo
   419 000011C1 C605(2BC30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   420 000011C8 50                  <1>     push rax
   421 000011C9 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   422 000011CE CD4F                <1>     int 4Fh
   423 000011D0 58                  <1>     pop rax
   424 000011D1 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   425                              <1> .notNet:
   426                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   427                              <1> ; 0Dh or 0Eh
   428 000011D3 803D(2BC30300)00    <1>     cmp byte [printEcho], 00
   429 000011DA 7507                <1>     jnz .echoOn
   430 000011DC E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   431 000011E1 EB05                <1>     jmp short .printExit
   432                              <1> .echoOn:
   433 000011E3 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   434                              <1> .printExit:
   435 000011E8 5F                  <1>     pop rdi
   436                              <1>     return
    18                              <2> %%_ret:
    19 000011E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   437                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   438 000011EA E852FFFFFF          <1>     call callInt48h
   439                              <1> .waitNextChar:   ;Here get next char
   440 000011EF B401                <1>     mov ah, 01h ;ND read
   441 000011F1 E85BFBFFFF          <1>     call mainCharIO
   442 000011F6 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   443                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   444 000011F8 53                  <1>     push rbx
   445 000011F9 31DB                <1>     xor ebx, ebx
   446 000011FB E82B000000          <1>     call getCharDevSFT
   447 00001200 5B                  <1>     pop rbx
   448                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001201 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   449 00001203 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   450 00001205 E847FBFFFF          <1>     call mainCharIO
   451 0000120A 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   452 0000120C 7514                <1>     jnz .checkBreak2
   453 0000120E 803D(80D80300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   454 00001215 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   455 0000121B C605(80D80300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   456                              <1> .checkBreak2:
   457 00001222 3C03                <1>     cmp al, ETX
   458                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001224 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   459 00001226 E977100000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   460                              <1> 
   461                              <1> 
   462                              <1> getCharDevSFT:
   463                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   464                              <1> ;Input: bx = zero extended handle number
   465                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   466                              <1> ;        CF=CY => al = Error code, abort operation
   467 0000122B F605(EBC30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   468 00001232 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   469                              <1> .getSFT:
   470 00001234 57                  <1>     push rdi
   471 00001235 E853090000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   472 0000123A 4889FE              <1>     mov rsi, rdi
   473 0000123D 5F                  <1>     pop rdi
   474                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 0000123E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   475                              <1> .swap:
   476                              <1> ;workingSFT is only set for CON calls
   477 0000123F 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   478 00001245 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   479 00001247 488B35(8CC50300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   480 0000124E F8                  <1>     clc
   481                              <1>     return
    18                              <2> %%_ret:
    19 0000124F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> ;------------------------
   484                              <1> ;   Utility functions   :
   485                              <1> ;------------------------
   486                              <1> printCaretASCII:
   487                              <1> ;Input: al = Char to print with a caret
   488                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   489                              <1> ;First check if the char should be careted, and then print normally if so
   490 00001250 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   491 00001252 0F8364FCFFFF        <1>     jae charOut_B.in
   492 00001258 3C09                <1>     cmp al, TAB
   493 0000125A 0F845CFCFFFF        <1>     je charOut_B.in
   494 00001260 3C15                <1>     cmp al, NAK
   495 00001262 0F8454FCFFFF        <1>     je charOut_B.in
   496 00001268 3C14                <1>     cmp al, DC4
   497 0000126A 0F844CFCFFFF        <1>     je charOut_B.in
   498 00001270 50                  <1>     push rax
   499 00001271 B05E                <1>     mov al, "^" ;Get caret in place
   500 00001273 E844FCFFFF          <1>     call charOut_B.in
   501 00001278 58                  <1>     pop rax
   502 00001279 0440                <1>     add al, "@" ;Turn into an ASCII Char
   503 0000127B E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   504                              <1> printCRLF:
   505 00001280 B00D                <1>     mov al, CR
   506 00001282 E835FCFFFF          <1>     call charOut_B.in
   507 00001287 B00A                <1>     mov al, LF
   508 00001289 E92EFCFFFF          <1>     jmp charOut_B.in
   509                              <1> 
   510                              <1> checkBreak:
   511                              <1> ;Reads bytes from CON if there are any bytes to read and 
   512                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   513 0000128E 803D(64C30300)01    <1>     cmp byte [inDOS], 1
   514                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001295 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   515                              <1> ;Returns in al the keystroke that is available IF one is available
   516                              <1> ; or al=0 if no keystroke available
   517 00001297 53                  <1>     push rbx
   518 00001298 56                  <1>     push rsi
   519 00001299 488B35(44C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   520                              <1>     ;Place command code and a zero status word at the same time
   521 000012A0 C705(44C40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   521 000012A8 0000                <1>
   522                              <1>     ;Place the packet size in the hdrlen field
   523 000012AA C605(42C40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   524 000012B1 488D1D(42C40300)    <1>     lea rbx, critReqHdr
   525 000012B8 E852100000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   526                              <1>     ;Check if the busy bit is set (No keystroke available)
   527 000012BD 66F705(45C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   527 000012C5 02                  <1>
   528 000012C6 7405                <1>     jz .charFound
   529                              <1> .exit:
   530 000012C8 30C0                <1>     xor al, al
   531 000012CA 5E                  <1>     pop rsi
   532 000012CB 5B                  <1>     pop rbx
   533                              <1>     return
    18                              <2> %%_ret:
    19 000012CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   534                              <1> .charFound:
   535                              <1> ;Keystroke available, proceed
   536 000012CD 8A05(4FC40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   537 000012D3 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   538 000012D5 75F1                <1>     jne .exit   ;If not equal exit
   539                              <1> ;Now we pull the char out of the buffer
   540 000012D7 C705(44C40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   540 000012DF 0000                <1>
   541 000012E1 C605(42C40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   542                              <1>     ;Place pointers and number of chars
   543 000012E8 C705(58C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   543 000012F0 0000                <1>
   544                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   545 000012F2 488D05(4FC40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   546 000012F9 488905(50C40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   547 00001300 E80A100000          <1>     call goDriver   ;RSI and RBX as before
   548 00001305 E9980F0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   549                              <1> 
   550                              <1> vConSwapDriver:
   551                              <1> ;Sets up the vCon to use the alternative SFT pointer
   552 0000130A 57                  <1>     push rdi
   553 0000130B C605(EBC30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   554 00001312 488B3D(F7C50300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   555 00001319 48893D(8CC50300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   556 00001320 5F                  <1>     pop rdi
   557                              <1>     return
    18                              <2> %%_ret:
    19 00001321 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> ;--------------------------------------------------
   560                              <1> ;      Main Keyboard Buffered Input Function      :
   561                              <1> ;--------------------------------------------------
   562                              <1> buffCharInput_BE:  ;ah = 0Ah
   563                              <1> ;Buffer pointer in rdx
   564                              <1> ; byte [rdx + 0], buffer length
   565                              <1> ; byte [rdx + 1], number of chars in buffer
   566                              <1> ; byte [rdx + 2], buffer start
   567                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   568                              <1> ;Register use
   569                              <1> ; dh = Char offset in internal buffer
   570                              <1> ; dl = Buffer length
   571                              <1> ; bh = Char offset in user buffer
   572                              <1> ; bl = Number of chars already in the buffer
   573                              <1> ; rdi = Internal buffer
   574                              <1> ; rsi = User buffer
   575 00001322 4889D6              <1>     mov rsi, rdx
   576 00001325 66AD                <1>     lodsw   ;Get buffer metadata in ax
   577 00001327 84C0                <1>     test al, al
   578                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001329 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   579 0000132B 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   580 0000132E 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   581 00001330 7606                <1>     jbe .avoidcheck
   582 00001332 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   583 00001336 7402                <1>     je .functionKeyOk
   584                              <1> .avoidcheck:
   585 00001338 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   586                              <1> .functionKeyOk:
   587 0000133A 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   588 0000133D FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   589                              <1> .breakEP:
   590 0000133F 8A05(28C20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   591 00001345 8805(29C20300)      <1>     mov byte [vConCurCnt], al
   592 0000134B 56                  <1>     push rsi    ;Push user buffer address
   593 0000134C 488D3D(2AC20300)    <1>     lea rdi, vConBuffer
   594 00001353 C605(7AC50300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   595                              <1> .mainLoop:
   596 0000135A E8B9FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   597 0000135F 3C0A                <1>     cmp al, LF
   598 00001361 7505                <1>     jne .checkControlChars
   599                              <1> .mainLoop2:
   600 00001363 E8B0FCFFFF          <1>     call charIn_B
   601                              <1> .checkControlChars:
   602 00001368 3C06                <1>     cmp al, ACK
   603 0000136A 74F7                <1>     je .mainLoop2   ;Get another char
   604 0000136C 3A05EFECFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   605 00001372 0F8426010000        <1>     je .escape
   606 00001378 3C7F                <1>     cmp al, DEL
   607 0000137A 0F8489000000        <1>     je .delete
   608 00001380 3C08                <1>     cmp al, BSP
   609 00001382 0F8481000000        <1>     je .delete
   610 00001388 3C17                <1>     cmp al, ETB
   611                              <1>     ;Add space for patched jump instructions
   612 0000138A 9090909090          <1>     db 5 dup (90h)  ;NOP
   613 0000138F 3C15                <1>     cmp al, NAK
   614 00001391 9090909090          <1>     db 5 dup (90h)
   615 00001396 3C0D                <1>     cmp al, CR
   616 00001398 744C                <1>     je .carriageReturn
   617 0000139A 3C0A                <1>     cmp al, LF
   618 0000139C 7461                <1>     je .lineFeed
   619 0000139E 3A05BEECFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   620 000013A4 7429                <1>     je .break
   621                              <1> .checkIfCanInsert:
   622 000013A6 38D6                <1>     cmp dh, dl
   623 000013A8 731C                <1>     jae .bufOflw
   624 000013AA AA                  <1>     stosb   ;Store the byte and increment rdi!
   625 000013AB FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   626 000013AD E89EFEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   627 000013B2 803D(7AC50300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   628 000013B9 75A8                <1>     jne .mainLoop2
   629                              <1>     ;IF not in insert mode, we fall here
   630                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   631                              <1>     ; or insert chars if needed.
   632 000013BB 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   633 000013BD 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   634 000013BF 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   635 000013C2 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   636 000013C4 EB9D                <1>     jmp short .mainLoop2
   637                              <1> .bufOflw:
   638                              <1> ;Buffer overflow
   639 000013C6 B007                <1>     mov al, BEL ;Sound the bell
   640 000013C8 E8EFFAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   641 000013CD EB94                <1>     jmp short .mainLoop2
   642                              <1> .break:
   643                              <1> ;Break, Place a "\", and do a CRLF
   644 000013CF B05C                <1>     mov al, "\"
   645 000013D1 E8E6FAFFFF          <1>     call charOut_B.in
   646 000013D6 5E                  <1>     pop rsi ;Realign stack
   647                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   648 000013D7 E8A4FEFFFF          <1>     call printCRLF
   649                              <1>     ;Align to next tabstop
   650 000013DC E862FBFFFF          <1>     call charOut_B.tab
   651 000013E1 E959FFFFFF          <1>     jmp .breakEP
   652                              <1> .carriageReturn:
   653 000013E6 AA                  <1>     stosb
   654 000013E7 E8D0FAFFFF          <1>     call charOut_B.in
   655 000013EC 5F                  <1>     pop rdi ;User buffer address was pushed 
   656 000013ED 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   657 000013F0 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   658                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   659 000013F2 488D35(2AC20300)    <1>     lea rsi, vConBuffer
   660 000013F9 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   661 000013FC F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   662                              <1>     return
    18                              <2> %%_ret:
    19 000013FE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   663                              <1> .lineFeed:
   664 000013FF E87CFEFFFF          <1>     call printCRLF
   665 00001404 E95AFFFFFF          <1>     jmp .mainLoop2
   666                              <1> .delete:
   667 00001409 E805000000          <1>     call .removeChar
   668 0000140E E950FFFFFF          <1>     jmp .mainLoop2
   669                              <1> .removeChar:
   670 00001413 84F6                <1>     test dh, dh ;Is char count 0?
   671 00001415 741C                <1>     jz .normalChar   ;If so, skip going back!
   672 00001417 E868000000          <1>     call .vConErase
   673 0000141C 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   674 0000141E 3C20                <1>     cmp al, SPC
   675 00001420 7311                <1>     jae .normalChar
   676 00001422 3C09                <1>     cmp al, TAB
   677 00001424 7420                <1>     je .eraTab
   678 00001426 3C15                <1>     cmp al, NAK
   679 00001428 7409                <1>     je .normalChar
   680 0000142A 3C14                <1>     cmp al, DC4
   681 0000142C 7405                <1>     je .normalChar
   682 0000142E E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   683                              <1> .normalChar:
   684 00001433 803D(7AC50300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   685                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000143A 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   686 0000143C 84FF                <1>     test bh, bh ;Beginning of user buffer?
   687                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000143E 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   688 00001440 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   689 00001443 FECF                <1>     dec bh
   690                              <1>     return
    18                              <2> %%_ret:
    19 00001445 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   691                              <1> .eraTab:
   692                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   693                              <1> ; up to a tab stop worth of space chars printed
   694 00001446 57                  <1>     push rdi
   695 00001447 48FFCF              <1>     dec rdi
   696 0000144A FD                  <1>     std ;Go backwards
   697 0000144B 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   698 0000144E B020                <1>     mov al, SPC
   699 00001450 53                  <1>     push rbx
   700 00001451 BB07000000          <1>     mov ebx, 7
   701 00001456 67E30D              <1>     jecxz .onTabstop
   702                              <1> .scanString:
   703 00001459 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   704 0000145A 7608                <1>     jbe .notChar    ;No, skip handling
   705 0000145C 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   706 00001460 740A                <1>     je .tabChar
   707 00001462 FECB                <1>     dec bl
   708                              <1> .notChar:
   709 00001464 E2F3                <1>     loop .scanString
   710                              <1> .onTabstop:
   711 00001466 2A1D(29C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   712                              <1> .tabChar:
   713 0000146C 28F3                <1>     sub bl, dh  ;Same on tabstop
   714 0000146E 00D9                <1>     add cl, bl
   715 00001470 80E107              <1>     and cl, 7
   716 00001473 5B                  <1>     pop rbx
   717 00001474 5F                  <1>     pop rdi
   718 00001475 FC                  <1>     cld
   719 00001476 74BB                <1>     jz .normalChar
   720                              <1>     ;Now erase all the spaces placed on the vCon
   721                              <1> .vConDelTab:
   722 00001478 E80C000000          <1>     call .vConEraseNoDec
   723 0000147D E2F9                <1>     loop .vConDelTab
   724 0000147F E9AFFFFFFF          <1>     jmp .normalChar
   725                              <1> .vConErase:
   726                              <1> ;Erase the char on the vCon
   727                              <1> ;Return through the output function
   728 00001484 48FFCF              <1>     dec rdi ;Go back a space in the 
   729 00001487 FECE                <1>     dec dh  ;Decrement char count in the buffer
   730                              <1> .vConEraseNoDec:
   731 00001489 B008                <1>     mov al, BSP ;Move cursor back
   732 0000148B E82CFAFFFF          <1>     call charOut_B.in
   733 00001490 B020                <1>     mov al, SPC ;Replace with a space
   734 00001492 E825FAFFFF          <1>     call charOut_B.in
   735 00001497 B008                <1>     mov al, BSP ;Move cursor back again
   736 00001499 E91EFAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   737                              <1> .escape:
   738                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   739                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   740                              <1> ; including the function keys.
   741 0000149E FF25B5EBFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   742                              <1> .f2:
   743 000014A4 E846000000          <1>     call .fCommon2
   744 000014A9 EB0C                <1>     jmp short .fCommon
   745                              <1> .f3:
   746 000014AB 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   747 000014AE 28F9                <1>     sub cl, bh  ;Sub our current position
   748 000014B0 EB05                <1>     jmp short .fCommon
   749                              <1> .f1:
   750 000014B2 B901000000          <1>     mov ecx, 1  ;Get one char
   751                              <1> .fCommon:
   752 000014B7 C605(7AC50300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   753 000014BE 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   754 000014C0 0F849DFEFFFF        <1>     je .mainLoop2
   755 000014C6 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   756 000014C8 0F8495FEFFFF        <1>     je .mainLoop2
   757                              <1>     ;Else, copy byte by byte, and retain char in al
   758 000014CE AC                  <1>     lodsb
   759 000014CF AA                  <1>     stosb
   760 000014D0 E87BFDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   761 000014D5 FEC7                <1>     inc bh
   762 000014D7 FEC6                <1>     inc dh
   763 000014D9 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   764 000014DB E983FEFFFF          <1>     jmp .mainLoop2
   765                              <1> .f4:
   766 000014E0 E80A000000          <1>     call .fCommon2
   767 000014E5 4801CE              <1>     add rsi, rcx
   768 000014E8 00CF                <1>     add bh, cl
   769 000014EA E974FEFFFF          <1>     jmp .mainLoop2
   770                              <1> .fCommon2:
   771 000014EF E824FBFFFF          <1>     call charIn_B   ;Get a char in al
   772 000014F4 3A0567EBFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   773 000014FA 750B                <1>     jne .fnotEscape
   774                              <1>     ;Get another char if they typed escape and force it in the buffer
   775                              <1>     ; Do not return to caller
   776 000014FC E817FBFFFF          <1>     call charIn_B
   777                              <1> .fforceExit:
   778 00001501 59                  <1>     pop rcx ;Get original return address from stack
   779 00001502 E95CFEFFFF          <1>     jmp .mainLoop2
   780                              <1> .fnotEscape:
   781 00001507 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   782 0000150A 28F9                <1>     sub cl, bh
   783 0000150C 74F3                <1>     jz .fforceExit
   784 0000150E FFC9                <1>     dec ecx
   785 00001510 74EF                <1>     jz .fforceExit
   786 00001512 57                  <1>     push rdi
   787 00001513 4889F7              <1>     mov rdi, rsi
   788 00001516 48FFC7              <1>     inc rdi
   789 00001519 F2AE                <1>     repne scasb ;Search for the char to start printing from
   790 0000151B 5F                  <1>     pop rdi
   791 0000151C 75E3                <1>     jne .fforceExit ;If char not found, return
   792 0000151E F6D1                <1>     not cl
   793 00001520 00D9                <1>     add cl, bl
   794 00001522 28F9                <1>     sub cl, bh
   795                              <1>     return
    18                              <2> %%_ret:
    19 00001524 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   796                              <1> .f5:
   797 00001525 B040                <1>     mov al, "@"
   798 00001527 E890F9FFFF          <1>     call charOut_B.in   ;Print the char
   799 0000152C 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   800 0000152D 57                  <1>     push rdi
   801 0000152E E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   802 00001533 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   803 00001534 88F3                <1>     mov bl, dh
   804 00001536 E99CFEFFFF          <1>     jmp .breakAlt
   805                              <1> .f6:
   806                              <1> ;If the user wants to insert a EOF, they can use F6
   807 0000153B B01A                <1>     mov al, EOF
   808 0000153D E964FEFFFF          <1>     jmp .checkIfCanInsert
   809                              <1> .f7:
   810                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   811 00001542 8A0519EBFFFF        <1>     mov al, byte [extESC]
   812 00001548 E959FEFFFF          <1>     jmp .checkIfCanInsert
   813                              <1> .toggleIns:
   814 0000154D F615(7AC50300)      <1>     not byte [vConInsert]   ;Toggle
   815                              <1>     return
    18                              <2> %%_ret:
    19 00001553 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   816                              <1> .eDel:
   817 00001554 38DF                <1>     cmp bh, bl
   818 00001556 0F8407FEFFFF        <1>     je .mainLoop2
   819 0000155C FEC7                <1>     inc bh
   820 0000155E 48FFC6              <1>     inc rsi
   821 00001561 E9FDFDFFFF          <1>     jmp .mainLoop2
   822                              <1> 
   823                              <1> editKeys:
   824                              <1> ;Our Default Extended keys handler
   825 00001566 E8ADFAFFFF          <1>     call charIn_B   ;Get the next char in al
   826 0000156B B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   827 00001570 57                  <1>     push rdi    ;Preserve rdi
   828 00001571 488D3DEBEAFFFF      <1>     lea rdi, extKeyTbl
   829 00001578 57                  <1>     push rdi
   830                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   831                              <1>     ; offset of function from extKeyTbl
   832                              <1> .lp:
   833 00001579 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   834 0000157A 7411                <1>     je .charFound
   835 0000157C FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   836 0000157E 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   837 00001584 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   838 0000158B EBEC                <1>     jmp short .lp
   839                              <1> .charFound:
   840 0000158D 59                  <1>     pop rcx ;Pop back the effective address of the table
   841 0000158E 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   842 00001592 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   843 00001595 5F                  <1>     pop rdi
   844 00001596 FFE1                <1>     jmp rcx
    26                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    27                              <1> ;Major kernel date time functions and subroutines
    28                              <1> 
    29                              <1> getDate:           ;ah = 2Ah
    30 00001598 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    31 0000159D E8DD100000          <1>     call getUserRegs
    32 000015A2 668B15(E5C30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    33                              <1> ;    mov dh, byte [monthOfYear]
    34 000015A9 0FB60D(E7C30300)    <1>     movzx ecx, byte [years]
    35 000015B0 8A05(EAC30300)      <1>     mov al, byte [dayOfWeek]
    36 000015B6 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    37 000015BA 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    38                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000015BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                              <1> setDate:           ;ah = 2Bh
    40                              <1> ;	CX = year (1980-2099)
    41                              <1> ;   DH = month (1-12)
    42                              <1> ;	DL = day (1-31)
    43 000015BF E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    44                              <1>     return
    18                              <2> %%_ret:
    19 000015C4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    45                              <1> getTime:           ;ah = 2Ch
    46 000015C5 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    47 000015CA E8B0100000          <1>     call getUserRegs
    48 000015CF 668B0D(6FC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    49 000015D6 668B15(70C50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    50 000015DD 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    51 000015E1 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    52                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000015E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> setTime:           ;ah = 2Dh
    54                              <1> ;   CH = hour (0-23)
    55                              <1> ;	CL = minutes (0-59)
    56                              <1> ;	DH = seconds (0-59)
    57                              <1> ;	DL = hundredths (0-99)
    58 000015E6 80FD17              <1>     cmp ch, 23
    59 000015E9 7749                <1>     ja .exitBad
    60 000015EB 80F93B              <1>     cmp cl, 59
    61 000015EE 7744                <1>     ja .exitBad
    62 000015F0 80FE3B              <1>     cmp dh, 59
    63 000015F3 773F                <1>     ja .exitBad
    64 000015F5 80FA63              <1>     cmp dl, 99
    65 000015F8 773A                <1>     ja .exitBad
    66                              <1> ;Now we read date (updating internal count if necessary)
    67 000015FA E817010000          <1>     call readDateTimeRecord
    68 000015FF 488D1D(6CC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    69 00001606 0FB705(E8C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    70 0000160D 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    71 00001610 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    72 00001614 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    73 00001618 B906000000          <1>     mov ecx, 6
    74 0000161D 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    75 00001620 E8800F0000          <1>     call primReqWriteSetup   ;rbx now points to request header
    76 00001625 488B35(3CC00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    77 0000162C E8DE0C0000          <1>     call goDriver
    78 00001631 30C0                <1>     xor al, al
    79                              <1>     return
    18                              <2> %%_ret:
    19 00001633 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    80                              <1> .exitBad:
    81 00001634 B0FF                <1>     mov al, -1
    82                              <1>     return
    18                              <2> %%_ret:
    19 00001636 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> ;------------------------
    84                              <1> ;   Utility functions   :
    85                              <1> ;------------------------
    86                              <1> writeDate:
    87 00001637 6681F97800          <1>     cmp cx, 120
    88 0000163C 0F83D1000000        <1>     jae .exitBad
    89 00001642 80FE0C              <1>     cmp dh, 12
    90 00001645 0F87C8000000        <1>     ja .exitBad
    91 0000164B 80FA1F              <1>     cmp dl, 31
    92 0000164E 0F87BF000000        <1>     ja .exitBad
    93 00001654 668915(E5C30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    94                              <1>     ;mov byte [monthOfYear], dh
    95 0000165B 880D(E7C30300)      <1>     mov byte [years], cl    ;Save the years count
    96 00001661 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    97 00001666 88CD                <1>     mov ch, cl ;Get years count in ch
    98 00001668 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    99 0000166B 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   100 0000166E 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   101 00001671 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   102 00001676 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   103                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   104 00001678 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   105 0000167B 67E316              <1>     jecxz .addDay    ;Skip adding years
   106 0000167E 056E010000          <1>     add eax, 366    ;First add for a leap year
   107                              <1> .addYears:
   108 00001683 FFC9                <1>     dec ecx
   109 00001685 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   110 00001688 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   111 0000168D EBF4                <1>     jmp short .addYears
   112                              <1> .addLeap:
   113 0000168F 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   114                              <1> .addDay:
   115 00001694 89C2                <1>     mov edx, eax    ;Save this number in edx
   116                              <1>     ;Now to add day offset
   117 00001696 0FB60D(E6C30300)    <1>     movzx ecx, byte [monthOfYear]
   118 0000169D 488D35E0E9FFFF      <1>     lea rsi, monthsTbl
   119                              <1> .addDaysInMonth:
   120 000016A4 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   121 000016A6 67E308              <1>     jecxz .addMonthOffset
   122 000016A9 AC                  <1>     lodsb   ;Get the number of days in the month in al
   123 000016AA 0FB6C0              <1>     movzx eax, al
   124 000016AD 01C2                <1>     add edx, eax
   125 000016AF EBF3                <1>     jmp short .addDaysInMonth
   126                              <1> .addMonthOffset:
   127 000016B1 0FB60D(E5C30300)    <1>     movzx ecx, byte [dayOfMonth]
   128 000016B8 FFC9                <1>     dec ecx
   129 000016BA 01CA                <1>     add edx, ecx    ;Add month offset
   130                              <1>     ;edx has the number of days since 01/01/1980
   131 000016BC 668915(E8C30300)    <1>     mov word [daysOffset], dx   ;Store!
   132                              <1> ;Now read and then write CLOCKrecrd
   133 000016C3 488D1D(6CC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   134 000016CA B906000000          <1>     mov ecx, 6
   135 000016CF 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   136 000016D2 E8D90E0000          <1>     call primReqReadSetup   ;rbx now points to request header
   137 000016D7 488B35(3CC00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   138 000016DE E82C0C0000          <1>     call goDriver
   139                              <1> ;Now we change daycount and write it back
   140 000016E3 0FB705(E8C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   141 000016EA 488D1D(6CC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   142 000016F1 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   143 000016F4 B906000000          <1>     mov ecx, 6
   144 000016F9 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   145 000016FC E8A40E0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   146 00001701 488B35(3CC00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   147 00001708 E8020C0000          <1>     call goDriver
   148 0000170D E8AE000000          <1>     call setDayofWeek
   149                              <1>     return
    18                              <2> %%_ret:
    19 00001712 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   150                              <1> .exitBad:
   151 00001713 B0FF                <1>     mov al, -1
   152                              <1>     return
    18                              <2> %%_ret:
    19 00001715 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> 
   154                              <1> readDateTimeRecord:
   155                              <1> ;Will read the clock using the primary request header
   156                              <1> ;Preserves all regs except eax and flags
   157 00001716 53                  <1>     push rbx
   158 00001717 51                  <1>     push rcx
   159 00001718 52                  <1>     push rdx
   160 00001719 56                  <1>     push rsi
   161 0000171A 55                  <1>     push rbp
   162                              <1> 
   163 0000171B 66C705(81D80300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   163 00001723 00                  <1>
   164 00001724 488D1D(6CC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   165 0000172B B906000000          <1>     mov ecx, 6
   166 00001730 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   167                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   168                              <1> ; rbx = Data storage buffer ptr
   169                              <1> ; ecx = Number of sectors to transfer
   170                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   171 00001733 E8780E0000          <1>     call primReqReadSetup   ;rbx now points to request header
   172 00001738 488B35(3CC00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   173 0000173F E8CB0B0000          <1>     call goDriver
   174 00001744 0FB705(6CC50300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   175                              <1> ;Here we have:  ax = Days since 1/1/1980
   176                              <1> ;Updates the internal date fields
   177                              <1> ;Internal time fields are in the clock record
   178                              <1> ;So now we check if the number of days since 1980 are the same.
   179                              <1> ;If so, we can skip updating.
   180 0000174B 663B05(E8C30300)    <1>     cmp ax, word [daysOffset]
   181 00001752 7466                <1>     je .exit    ;Return if equal
   182 00001754 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   183 00001759 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   184 0000175B 668905(E8C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   185                              <1>     ;Now want to update years, month and day fields
   186                              <1>     ;ax has the number of days since 01/01/1980
   187                              <1>     ;Get days in a 4 year period
   188 00001762 BBB5050000          <1>     mov ebx, 365*4 + 1
   189 00001767 31D2                <1>     xor edx, edx
   190 00001769 89D1                <1>     mov ecx, edx  ;Zero ecx
   191 0000176B F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   192                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   193                              <1>     ;edx has offset into current 4 year bunch
   194 0000176D BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   195 00001772 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   196 00001774 7210                <1>     jb .foundBunch
   197 00001776 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   198 00001778 FFC1                <1>     inc ecx
   199 0000177A FFCB                <1>     dec ebx ;Number of days in a normal year
   200                              <1> .findBunch:
   201 0000177C 39DA                <1>     cmp edx, ebx
   202 0000177E 7206                <1>     jb .foundBunch
   203 00001780 29DA                <1>     sub edx, ebx
   204 00001782 FFC1                <1>     inc ecx
   205 00001784 EBF6                <1>     jmp short .findBunch
   206                              <1> .foundBunch:
   207                              <1>     ;If ecx = 0, february has 29 days!
   208                              <1>     ;eax has number of four year bunches elapsed since 1980
   209 00001786 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   210 00001789 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   211                              <1>     ;ecx now has the number of years since 1980
   212 0000178B E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   213                              <1> ;edx has number of days into the year we are in
   214                              <1> ;eax has number of days in Feb for this year
   215 00001790 488D35EDE8FFFF      <1>     lea rsi, monthsTbl
   216 00001797 31C9                <1>     xor ecx, ecx    ;Use as month counter
   217                              <1> .monthSearch:
   218 00001799 FFC1                <1>     inc ecx ;Start from 1
   219 0000179B AC                  <1>     lodsb   ;Get value in al and inc rsi
   220 0000179C 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   221 0000179F 39C2                <1>     cmp edx, eax
   222 000017A1 7204                <1>     jb .monthFound
   223 000017A3 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   224 000017A5 EBF2                <1>     jmp short .monthSearch
   225                              <1> .monthFound:
   226                              <1>     ;cl has the month (01h-0Ch)
   227                              <1>     ;dl has the day of the month - 1
   228 000017A7 FFC2                <1>     inc edx
   229 000017A9 880D(E6C30300)      <1>     mov byte [monthOfYear], cl
   230 000017AF 8815(E5C30300)      <1>     mov byte [dayOfMonth], dl
   231 000017B5 E806000000          <1>     call setDayofWeek
   232                              <1> .exit:
   233 000017BA 5D                  <1>     pop rbp
   234 000017BB 5E                  <1>     pop rsi
   235 000017BC 5A                  <1>     pop rdx
   236 000017BD 59                  <1>     pop rcx
   237 000017BE 5B                  <1>     pop rbx
   238                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 000017BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> setDayofWeek:
   241                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   242 000017C0 0FB705(E8C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   243 000017C7 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   244                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   245 000017CC 31D2                <1>     xor edx, edx
   246 000017CE B907000000          <1>     mov ecx, 7   
   247 000017D3 F7F1                <1>     div ecx  ;Get remainder in dl
   248 000017D5 8815(EAC30300)      <1>     mov byte [dayOfWeek], dl
   249                              <1> ;Set ZF to indicate all ok
   250 000017DB 31C0                <1>     xor eax, eax
   251                              <1>     return
    18                              <2> %%_ret:
    19 000017DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   254                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   255                              <1> ;Input: cl = Year - 1980
   256                              <1> ;Output: al = Number of days in February
   257 000017DE 880D(E7C30300)      <1>     mov byte [years], cl    ;Save this figure
   258 000017E4 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   259 000017E7 51                  <1>     push rcx
   260 000017E8 57                  <1>     push rdi
   261 000017E9 B81C000000          <1>     mov eax, 28  ;Usual days in february
   262 000017EE B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   263 000017F3 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   264 000017F6 488D3D88E8FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   265 000017FD AA                  <1>     stosb   ;Store the word in rdi
   266 000017FE 5F                  <1>     pop rdi
   267 000017FF 59                  <1>     pop rcx
   268                              <1>     return
    18                              <2> %%_ret:
    19 00001800 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    28                              <1> openFileFCB:       ;ah = 0Fh
    29                              <1> closeFileFCB:      ;ah = 10h
    30                              <1> findFirstFileFCB:  ;ah = 11h
    31                              <1> findNextFileFCB:   ;ah = 12h
    32                              <1> deleteFileFCB:     ;ah = 13h
    33                              <1> sequentialReadFCB: ;ah = 14h
    34                              <1> sequentialWriteFCB:;ah = 15h
    35                              <1> createFileFCB:     ;ah = 16h
    36                              <1> renameFileFCB:     ;ah = 17h
    37 00001801 C3                  <1>     ret
    38                              <1> setDTA:            ;ah = 1Ah
    39                              <1> ;Called with:
    40                              <1> ;   rdx = Pointer to the new default DTA
    41 00001802 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
    42 00001809 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    43 0000180D 488915(73C30300)    <1>     mov qword [currentDTA], rdx
    44 00001814 C3                  <1>     ret
    45                              <1> randomReadFCB:     ;ah = 21h
    46                              <1> randomWriteFCB:    ;ah = 22h
    47                              <1> getFileSizeFCB:    ;ah = 23h
    48                              <1> setRelRecordFCB:   ;ah = 24h
    49                              <1> randBlockReadFCB:  ;ah = 27h
    50                              <1> randBlockWriteFCB: ;ah = 28h
    51                              <1> parseFilenameFCB:  ;ah = 29h
    52 00001815 C3                  <1>     ret
    53                              <1> getDTA:            ;ah = 2Fh
    54 00001816 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
    55 0000181D 488B1D(73C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    56 00001824 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    57 00001828 C3                  <1>     ret
    28                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    29                              <1> ;-----------------------------------:
    30                              <1> ;    File Handle Kernel routines    :
    31                              <1> ;-----------------------------------:
    32                              <1> 
    33                              <1> createFileHdl:     ;ah = 3Ch, handle function
    34                              <1>     return 
    18                              <2> %%_ret:
    19 00001829 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                              <1> openFileHdl:       ;ah = 3Dh, handle function
    36                              <1>     return 
    18                              <2> %%_ret:
    19 0000182A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    37                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    38                              <1>     return 
    18                              <2> %%_ret:
    19 0000182B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                              <1> readFileHdl:       ;ah = 3Fh, handle function
    40 0000182C 488D35A9000000      <1>     lea rsi, readBytes
    41                              <1> .common:
    42 00001833 E83B030000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
    43 00001838 0F8221110000        <1>     jc extErrExit   ;Error code in al and exit
    44 0000183E E823020000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    45 00001843 FF35(73C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    46 00001849 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    47 0000184B 8F05(73C30300)      <1>     pop qword [currentDTA]
    48 00001851 0F8208110000        <1>     jc extErrExit   ;Error code in al and exit
    49 00001857 E8230E0000          <1>     call getUserRegs
    50 0000185C 890E                <1>     mov dword [rsi + callerFrame.rax], ecx  ;Put actual number of bytes tfrd
    51 0000185E 806658FE            <1>     and byte [rsi + callerFrame.flags], 0FEh    ;Clear CF
    52                              <1>     return 
    18                              <2> %%_ret:
    19 00001862 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> writeFileHdl:      ;ah = 40h, handle function
    54 00001863 488D35C8010000      <1>     lea rsi, writeBytes
    55 0000186A E9C4FFFFFF          <1>     jmp readFileHdl.common
    56                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    57                              <1>     return 
    18                              <2> %%_ret:
    19 0000186F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    59                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    60 00001870 E8FE020000          <1>     call getSFTPtr
    61 00001875 7305                <1>     jnc .sftValid
    62                              <1>     ;al (eax) has error code for bad file handle
    63 00001877 E9E3100000          <1>     jmp extErrExit ;Error code and exit
    64                              <1> .sftValid:
    65 0000187C 3C03                <1>     cmp al, 3
    66 0000187E 720A                <1>     jb .validFunction
    67 00001880 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
    68 00001885 E9D5100000          <1>     jmp extErrExit
    69                              <1> .validFunction:
    70 0000188A 3C01                <1>     cmp al, 1
    71 0000188C 7713                <1>     ja .seekend
    72 0000188E 7203                <1>     jb .seekset
    73                              <1> ;Here we are at seekcur, seek from current (signed)
    74 00001890 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    75                              <1> .seekset:
    76                              <1> ;Seek from the start (unsigned)
    77 00001893 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    78 00001896 E8E40D0000          <1>     call getUserRegs    ;Get user regs in rsi
    79 0000189B 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
    80                              <1> .seekExit:
    81 0000189E 30C0                <1>     xor al, al  ;Return OK!
    82                              <1>     return 
    18                              <2> %%_ret:
    19 000018A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> .seekend:
    84                              <1> ;Here we are at seekend, seek from end (signed)
    85 000018A1 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
    86 000018A7 7505                <1>     jnz .netCheck
    87                              <1> .proceedDisk:
    88 000018A9 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
    89 000018AC EBE5                <1>     jmp short .seekset
    90                              <1> .netCheck:
    91 000018AE 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
    92 000018B4 75F3                <1>     jnz .proceedDisk
    93 000018B6 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
    94                              <1>     ;Check it's share mode
    95 000018BA 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
    96 000018BF 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
    97 000018C4 7407                <1>     je .netSeek
    98 000018C6 3D30000000          <1>     cmp eax, denyReadShare
    99 000018CB 75DC                <1>     jne .proceedDisk
   100                              <1> .netSeek:
   101 000018CD B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   102 000018D2 CD4F                <1>     int 4fh
   103 000018D4 73C8                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   104 000018D6 E984100000          <1>     jmp extErrExit
   105                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   106                              <1> ioctrl:            ;ah = 44h, handle function
   107                              <1> duplicateHandle:   ;ah = 45h, handle function
   108                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   109                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   110                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   111                              <1> renameFile:        ;ah = 56h
   112                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   113                              <1> createNewFile:     ;ah = 5Bh
   114                              <1> lockUnlockFile:    ;ah = 5Ch
   115                              <1> setHandleCount:    ;ah = 67h
   116                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   117                              <1>     return 
    18                              <2> %%_ret:
    19 000018DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   118                              <1> ;-----------------------------------:
   119                              <1> ;       Main File IO Routines       :
   120                              <1> ;-----------------------------------:
   121                              <1> readBytes:
   122                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   123                              <1> ;Input: ecx = Number of bytes to read
   124                              <1> ;Output: ecx = Number of bytes read
   125                              <1> ;Number of bytes read 
   126                              <1> ;If CF=CY, return with error code in ax
   127 000018DC E88D010000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   128 000018E1 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   129 000018E5 240F                <1>     and al, 0Fh ;Eliminate except access mode
   130 000018E7 3C01                <1>     cmp al, WriteAccess
   131 000018E9 7509                <1>     jne .readable
   132 000018EB B805000000          <1>     mov eax, errAccDen
   133 000018F0 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   134 000018F2 F9                  <1>     stc
   135                              <1>     return
    18                              <2> %%_ret:
    19 000018F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> .readable:
   137 000018F4 E8B6010000          <1>     call setupVarsForTransfer
   138 000018F9 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   139 000018FC 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   140 00001902 740A                <1>     jz .notRedir
   141 00001904 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   142 00001909 CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   143                              <1>     return 
    18                              <2> %%_ret:
    19 0000190B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .exitOk:
   145 0000190C F8                  <1>     clc
   146                              <1>     return 
    18                              <2> %%_ret:
    19 0000190D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   147                              <1> .notRedir:
   148 0000190E 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   149 00001914 7510                <1>     jnz readCharDev
   150 00001916 E81C100000          <1>     call dosCrit1Enter
   151 0000191B E80B010000          <1>     call readDiskFile
   152 00001920 E81C100000          <1>     call dosCrit1Exit
   153                              <1>     return 
    18                              <2> %%_ret:
    19 00001925 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> readCharDev:
   155                              <1> ;rdi points to sft for char dev to read
   156                              <1> ;ecx has the number of bytes to transfer
   157                              <1> ;Vars have been set up and DTA has the transfer address
   158                              <1> ;Returns in ecx, the actual bytes transferred
   159 00001926 C605(66C30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   160 0000192D 488B3D(73C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   161 00001934 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   162 00001938 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   163 0000193B 0F840E010000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   164 00001941 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   165 00001944 7507                <1>     jnz .notNul
   166                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   167                              <1>     ;NUL never transfers bytes 
   168 00001946 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   169 00001948 E902010000          <1>     jmp rwExitOk    ;Goto exit
   170                              <1> .notNul:
   171 0000194D F6C320              <1>     test bl, charDevBinary
   172 00001950 750A                <1>     jnz .binary
   173                              <1>     ;Here if the device is in ASCII mode
   174 00001952 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   175 00001955 7457                <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   176                              <1> .consoleInput:
   177                              <1>     ;Console input here
   178 00001957 E8AEF9FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   179                              <1>     
   180                              <1> 
   181                              <1> .binary:
   182                              <1>     ;Setup registers for transfer
   183 0000195C 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   184 0000195F 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   185                              <1>     ;ecx has the number of bytes to transfer directly
   186 00001962 E8490C0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   187 00001967 488B35(7CC50300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   188 0000196E E89C090000          <1>     call goDriver   ;Make the request
   189 00001973 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   190 00001976 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   191 0000197D F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   192 00001983 7412                <1>     jz .binNoError
   193                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   194 00001985 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
   195 00001987 E886080000          <1>     call charDevErr   ;ah = has part of the error 
   196                              <1>     ;al now has the response
   197                              <1>     ;Cannot return Abort as Abort returns to command interpreter through DOS
   198 0000198C 3C00                <1>     cmp al, critIgnore
   199 0000198E 7407                <1>     je .binNoError ;Simply proceed as normal
   200 00001990 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   201 00001993 3C03                <1>     cmp al, critFail
   202 00001995 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   203                              <1>     ;Fallthrough here for fail!
   204                              <1> .failExit:
   205                              <1>     
   206                              <1> .binNoError:
   207                              <1>     ;Get number of bytes transferred into 
   208 00001997 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   209 0000199D F7D8                <1>     neg eax ;make it into -eax
   210 0000199F 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   211                              <1>     ;ecx now has bytes left to transfer
   212 000019A3 50                  <1>     push rax    ;Save value on stack
   213 000019A4 31C0                <1>     xor eax, eax ;Set ZF
   214 000019A6 FFC0                <1>     inc eax ;Clear ZF
   215 000019A8 58                  <1>     pop rax ;Get back the original value
   216 000019A9 E9A1000000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   217                              <1> .generalASCII:
   218                              <1>     ;ecx has bytes to transfer here
   219                              <1>     ;Setup registers for transfer
   220 000019AE 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   221 000019B1 51                  <1>     push rcx
   222 000019B2 B901000000          <1>     mov ecx, 1  ;Get one char
   223 000019B7 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   224 000019BA E8F10B0000          <1>     call primReqReadSetup   ;Setup request
   225 000019BF 59                  <1>     pop rcx
   226                              <1>     ;rbx now has request header ptr
   227 000019C0 488B35(7CC50300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   228                              <1> .asciiReadChar:
   229 000019C7 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   230 000019CA E8BFF8FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
   231 000019CF E83B090000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   232 000019D4 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   233 000019DB F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   234 000019E1 741E                <1>     jz .asciiNoError
   235 000019E3 E82A080000          <1>     call charDevErr    ;Call Int 44h
   236                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   237 000019E8 C705(2EC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   237 000019F0 0000                <1>
   238 000019F2 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   239 000019F5 3C03                <1>     cmp al, critFail
   240 000019F7 749E                <1>     je .failExit
   241 000019F9 3C01                <1>     cmp al, critRetry
   242 000019FB 74CA                <1>     je .asciiReadChar
   243                              <1>     ;Ignore here, pretend NULL CHAR was read
   244 000019FD 30C0                <1>     xor al, al
   245 000019FF EB11                <1>     jmp short .asciiIgnoreEP
   246                              <1> .asciiNoError:
   247                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   248                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   249                              <1> ;Preserve RBX, RSI
   250                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   251 00001A01 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   252 00001A04 813D(2EC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   252 00001A0C 0000                <1>
   253 00001A0E 753F                <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   254 00001A10 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   255                              <1> .asciiIgnoreEP:
   256 00001A12 48FF05(26C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   257 00001A19 48FFC7              <1>     inc rdi ;Also advance register pointer
   258 00001A1C 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   259 00001A1E 742F                <1>     je rwExitOk
   260 00001A20 3C0D                <1>     cmp al, CR  ;Was this char CR?
   261 00001A22 E0A3                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   262                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   263 00001A24 FEC0                <1>     inc al  ;make ZF=NZ
   264 00001A26 E924000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   265                              <1>     
   266                              <1> readDiskFile:
   267 00001A2B C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   268                              <1> 
   269                              <1> writeBytes:
   270                              <1> ;Writes the bytes from the user buffer
   271 00001A32 E837000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   272 00001A37 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   273 00001A3B 240F                <1>     and al, 0Fh ;Eliminate except access mode
   274 00001A3D 3C00                <1>     cmp al, ReadAccess
   275 00001A3F 7509                <1>     jne .writeable
   276 00001A41 B805000000          <1>     mov eax, errAccDen
   277 00001A46 31C9                <1>     xor ecx, ecx
   278 00001A48 F9                  <1>     stc
   279 00001A49 C3                  <1>     ret
   280                              <1> .writeable:
   281 00001A4A E860000000          <1>     call setupVarsForTransfer
   282                              <1> 
   283                              <1> rwExitOk:
   284                              <1> ;Input: ecx = Number of bytes left to transfer!
   285                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   286 00001A4F 890D(3FC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   287 00001A55 7509                <1>     jnz .skipbitClear
   288 00001A57 E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   289                              <1>     ;The disk transfer must've flushed by now. 
   290 00001A5C 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokDevNotFlush|charDevNoEOF) ;OR
   291                              <1>     ;Next char dev read should give EOF.
   292                              <1> .skipbitClear:  ;Or skip that entirely
   293 00001A60 E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   294                              <1>     return 
    18                              <2> %%_ret:
    19 00001A65 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> rwExitBad:
   296                              <1> ;-----------------------------------:
   297                              <1> ;        File Handle routines       :
   298                              <1> ;-----------------------------------:
   299                              <1> 
   300                              <1> setCurrentSFT:
   301                              <1> ;Set the pointer in rdi as current SFT 
   302 00001A66 48893D(F7C50300)    <1>     mov qword [currentSFT], rdi
   303                              <1>     return 
    18                              <2> %%_ret:
    19 00001A6D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> getCurrentSFT:
   305                              <1> ;Get the current SFT pointer in rdi
   306 00001A6E 488B3D(F7C50300)    <1>     mov rdi, qword [currentSFT]
   307                              <1>     return 
    18                              <2> %%_ret:
    19 00001A75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   308                              <1> updateCurrentSFT:
   309                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   310                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   311 00001A76 57                  <1>     push rdi
   312 00001A77 488B3D(F7C50300)    <1>     mov rdi, qword [currentSFT]
   313 00001A7E 8B0D(3BC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   314 00001A84 2B0D(3FC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   315                              <1>     ;ecx has bytes transferred
   316 00001A8A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   317 00001A90 751A                <1>     jnz .exit
   318 00001A92 50                  <1>     push rax
   319 00001A93 8B05(17C60300)      <1>     mov eax, dword [currClustD]
   320 00001A99 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   321 00001A9C 8B05(13C60300)      <1>     mov eax, dword [currClustF]
   322 00001AA2 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   323 00001AA5 58                  <1>     pop rax
   324 00001AA6 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   325 00001AA9 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   326                              <1> .exit:
   327 00001AAC 5F                  <1>     pop rdi
   328 00001AAD F8                  <1>     clc
   329                              <1>     return 
    18                              <2> %%_ret:
    19 00001AAE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   330                              <1> setupVarsForTransfer:
   331                              <1> ;Computes the actual bytes to be transferred and 
   332                              <1> ; sets up internal variables for the transfer. 
   333                              <1> ;Works for both reading and writing
   334                              <1> ;Input: ecx = User desired Bytes to transfer
   335                              <1> ;       rdi = SFT pointer for the file
   336                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   337                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   338                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   339                              <1> ;
   340                              <1> ;Note: Does not account for a FULL disk. When writing,
   341                              <1> ; if the disk will get full as a result of the write,
   342                              <1> ; stop at the last byte before the transfer. If the 
   343                              <1> ; file pointer is past the last free byte, write 0
   344 00001AAF 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   345 00001AB3 488935(7CC50300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   346 00001ABA 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   347 00001ABD 8905(2BC60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   348 00001AC3 890D(3BC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   349 00001AC9 890D(3FC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   350 00001ACF 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   351 00001AD5 7402                <1>     jz setupVarsForDiskTransfer
   352 00001AD7 F8                  <1>     clc
   353                              <1>     return ;Else just exit here
    18                              <2> %%_ret:
    19 00001AD8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   354                              <1> setupVarsForDiskTransfer:
   355                              <1> ;Extension of the above, but for Disk files only
   356                              <1> ;Input: ecx = User desired Bytes to transfer
   357                              <1> ;       rdi = SFT pointer for the file
   358                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   359 00001AD9 488B2D(7CC50300)    <1>     mov rbp, qword [workingDPB] ;Get the workingDPB (the same as qPtr)
   360 00001AE0 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   361 00001AE3 881D(7BC50300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   362 00001AE9 8B05(2BC60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   363 00001AEF 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   364 00001AF3 31D2                <1>     xor edx, edx    ;Zero rdx
   365 00001AF5 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   366                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   367                              <1>     ;edx has the offset into that sector
   368 00001AF7 8905(1CC60300)      <1>     mov dword [currSectF], eax
   369 00001AFD 668915(29C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   370 00001B04 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   371 00001B06 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   372 00001B09 8805(20C60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   373 00001B0F 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   374 00001B11 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   375 00001B14 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   376 00001B16 8915(13C60300)      <1>     mov dword [currClustF], edx ;Save in var
   377 00001B1C 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   378 00001B1E F8                  <1>     clc
   379                              <1>     return 
    18                              <2> %%_ret:
    19 00001B1F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   380                              <1> 
   381                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   382                              <1> ;Return a pointer to the SFT entry in rdi
   383                              <1> ;Input: rbx = Valid SFT ndx number (word)
   384                              <1> ;Output: rdi = SFT pointer
   385 00001B20 488B3D(34C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   386                              <1> .walk:
   387 00001B27 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   388 00001B2B 7212                <1>     jb .thisTable
   389 00001B2D 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   390 00001B31 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   391 00001B34 4881FFFFFFFFFF      <1>     cmp rdi, -1
   392 00001B3B 75EA                <1>     jne .walk
   393 00001B3D F9                  <1>     stc
   394                              <1>     return
    18                              <2> %%_ret:
    19 00001B3E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   395                              <1> .thisTable:
   396 00001B3F 50                  <1>     push rax
   397 00001B40 52                  <1>     push rdx
   398 00001B41 B84F000000          <1>     mov eax, sft_size
   399 00001B46 F7E3                <1>     mul ebx
   400 00001B48 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   401 00001B4B 5A                  <1>     pop rdx
   402 00001B4C 58                  <1>     pop rax
   403 00001B4D 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   404                              <1>     return
    18                              <2> %%_ret:
    19 00001B54 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   405                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
   406                              <1> ;Return a zero extended value in rdi for the SFT entry
   407                              <1> ;Input: bx = JFT handle (we zero extend)
   408                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
   409                              <1> ;        CF=CY => al = Error code, Fail
   410 00001B55 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   411 00001B58 663B1D(91C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   412 00001B5F 7204                <1>     jb .ok
   413 00001B61 B006                <1>     mov al, errBadHdl
   414 00001B63 F9                  <1>     stc
   415                              <1>     return
    18                              <2> %%_ret:
    19 00001B64 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   416                              <1> .ok:
   417 00001B65 488B3D(7BC30300)    <1>     mov rdi, qword [currentPSP]
   418 00001B6C 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   419 00001B71 F8                  <1>     clc
   420                              <1>     return
    18                              <2> %%_ret:
    19 00001B72 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   421                              <1> 
   422                              <1> getSFTPtr:
   423                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   424                              <1> ;Input: bx = JFT handle
   425                              <1> ;Output: CF=NC: rdi = SFT pointer
   426                              <1> ;        CF=CY: Error, ax=Error code
   427 00001B73 E815000000          <1>     call derefSFTPtr
   428                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001B78 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   429 00001B7A 50                  <1>     push rax
   430 00001B7B 0FB705(9FC30300)    <1>     movzx eax, word [machineNum]
   431 00001B82 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
   432 00001B86 58                  <1>     pop rax
   433                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001B87 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   434 00001B89 B006                <1>     mov al, errBadHdl   ;Error code
   435 00001B8B F9                  <1>     stc         ;Reset CF
   436                              <1>     return
    18                              <2> %%_ret:
    19 00001B8C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> derefSFTPtr:
   439                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   440                              <1> ;Input: bx = File handle (gets zero extended)
   441                              <1> ;Output: CF=NC: rdi = SFT pointer
   442                              <1> ;        CF=CY: Error, ax=Error code
   443 00001B8D E8C3FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
   444 00001B92 7205                <1>     jb .fail
   445 00001B94 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   446 00001B97 7504                <1>     jne .ok
   447                              <1> .fail:
   448 00001B99 B006                <1>     mov al, errBadHdl
   449 00001B9B F9                  <1>     stc
   450                              <1>     return
    18                              <2> %%_ret:
    19 00001B9C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   451                              <1> .ok:
   452 00001B9D 53                  <1>     push rbx    ;Preserve the JFT handle
   453 00001B9E 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   454 00001BA1 E87AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   455 00001BA6 5B                  <1>     pop rbx 
   456                              <1>     return
    18                              <2> %%_ret:
    19 00001BA7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   457                              <1> 
   458                              <1> getBytesTransferred:
   459 00001BA8 8B0D(3FC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   460 00001BAE F7D9                <1>     neg ecx ;Multiply by -1
   461 00001BB0 030D(3BC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   462                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00001BB6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   463                              <1> 
   464                              <1> readWriteBytesBinary:
   465                              <1> ;Input: ecx = number of bytes to read in Binary mode
   466                              <1> ;       rdi = Points to where in caller buffer to place bytes
   467                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   468                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   469                              <1> ;Preserve rcx so we know how many bytes transferred
   470                              <1> ;Update the currByteA variable
   471                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   472 00001BB7 51                  <1>     push rcx
   473 00001BB8 F605(74C50300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   474 00001BBF 7403                <1>     jz .noSwap
   475 00001BC1 4887FE              <1>     xchg rdi, rsi
   476                              <1> .noSwap:
   477 00001BC4 F3A4                <1>     rep movsb
   478 00001BC6 59                  <1>     pop rcx
   479 00001BC7 010D(2BC60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   480 00001BCD 290D(3FC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   481                              <1>     return
    18                              <2> %%_ret:
    19 00001BD3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    30                              <1> ;Memory related functions
    31                              <1> 
    32                              <1> ;-----------------------------------:
    33                              <1> ;  Memory related Kernel routines   :
    34                              <1> ;-----------------------------------:
    35                              <1> allocateMemory:    ;ah = 48h
    36                              <1> ;Input: ebx = Number of paragraphs requested
    37                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    38                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    39 00001BD4 31D2                <1>     xor edx, edx
    40                              <1>     ;Clear the pointers
    41 00001BD6 488915(A1C30300)    <1>     mov qword [firstMCB], rdx
    42 00001BDD 488915(A9C30300)    <1>     mov qword [bestMCB], rdx
    43 00001BE4 488915(B1C30300)    <1>     mov qword [lastMCB], rdx
    44 00001BEB 31ED                <1>     xor ebp, ebp    
    45 00001BED FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    46 00001BEF 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    47                              <1> .walk:
    48 00001BF6 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    49 00001BF9 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    50 00001BFC 7409                <1>     je .walk1
    51 00001BFE 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    52 00001C01 0F8565050000        <1>     jne memSysHalt
    53                              <1> .walk1:
    54                              <1>     ;Here if valid but not the last block
    55 00001C07 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    56 00001C0F 0F8582000000        <1>     jne .walk2
    57                              <1>     ;Here we consolidate adjacent free blocks if there are any
    58                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    59                              <1>     ;End consolidation at first non free block or at last block in chain
    60 00001C15 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    61 00001C18 744A                <1>     je .det0    ;Determine if this block is useful
    62 00001C1A 31C9                <1>     xor ecx, ecx
    63 00001C1C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    64 00001C1F 4881C610000000      <1>     add rsi, mcb.program
    65                              <1> .cons0:
    66 00001C26 48C1E104            <1>     shl rcx, 4
    67 00001C2A 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    68 00001C2D 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    69 00001C30 7409                <1>     je .cons1
    70 00001C32 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    71 00001C35 0F8531050000        <1>     jne memSysHalt 
    72                              <1> .cons1:
    73 00001C3B 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    74 00001C43 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    75                              <1>     ;Here rsi, points to a free block, add it to rdi
    76 00001C45 31C9                <1>     xor ecx, ecx
    77 00001C47 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    78 00001C4A 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    79 00001C50 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    80 00001C53 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    81 00001C55 31D2                <1>     xor edx, edx
    82 00001C57 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    83 00001C5A 48895608            <1>     mov qword [rsi + 8], rdx
    84 00001C5E 3C5A                <1>     cmp al, mcbMarkEnd
    85 00001C60 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    86                              <1>     ;Here we deal with if the block was the last one 
    87 00001C62 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    88                              <1> .det0:  ;Now determine if pointer in rdi is useful
    89 00001C64 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    90                              <1> ;ebx must be less than the arena size for the arena to be useful!
    91 00001C67 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    92 00001C6A 39D9                <1>     cmp ecx, ebx
    93 00001C6C 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    94 00001C6E 488935(B1C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    95 00001C75 488B05(A1C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    96 00001C7C 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    97 00001C7F 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    98 00001C81 488935(A1C30300)    <1>     mov qword [firstMCB], rsi
    99                              <1> .det1:
   100                              <1>     ;Now test for best fit.
   101 00001C88 29D9                <1>     sub ecx, ebx    ;Block - ebx
   102 00001C8A 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   103 00001C8C 7209                <1>     jb .walk2
   104 00001C8E 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   105 00001C90 488935(A9C30300)    <1>     mov qword [bestMCB], rsi
   106                              <1> .walk2:
   107 00001C97 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   108 00001C9A 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   109 00001C9C 31C9                <1>     xor ecx, ecx
   110 00001C9E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   111 00001CA1 48C1E104            <1>     shl rcx, 4
   112 00001CA5 4881C610000000      <1>     add rsi, mcb.program
   113 00001CAC 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   114 00001CAF E942FFFFFF          <1>     jmp .walk
   115                              <1> .allocate:
   116                              <1>     ;Allocation fails IF the pointer is the null pointer
   117 00001CB4 803D(2FC30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   118 00001CBB 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   119                              <1>     ;Fall thru if last fit
   120 00001CBD 488B35(B1C30300)    <1>     mov rsi, qword [lastMCB]
   121 00001CC4 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   122 00001CC7 0F84CE000000        <1>     jz .allocFail
   123 00001CCD 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   124 00001CCF C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   125 00001CD2 31C9                <1>     xor ecx, ecx
   126 00001CD4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   127 00001CD7 29D9                <1>     sub ecx, ebx
   128 00001CD9 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   129 00001CDF 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   130 00001CE2 48C1E104            <1>     shl rcx, 4
   131 00001CE6 4881C610000000      <1>     add rsi, mcb.program
   132 00001CED 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   133 00001CF0 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   134 00001CF2 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   135 00001CF5 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   136 00001CFC 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   137 00001D00 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   138 00001D07 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   139 00001D0E 4889F0              <1>     mov rax, rsi
   140 00001D11 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   141 00001D14 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   142 00001D18 E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   143 00001D1D C3                  <1>     ret
   144                              <1> .bfCommon:
   145 00001D1E 488B35(A1C30300)    <1>     mov rsi, qword [firstMCB]
   146 00001D25 803D(2FC30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   147 00001D2C 480F4435(A9C30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   148 00001D34 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   149 00001D37 7462                <1>     jz .allocFail
   150 00001D39 8A06                <1>     mov al, byte [rsi + mcb.marker]
   151 00001D3B C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   152 00001D3E 31C9                <1>     xor ecx, ecx
   153 00001D40 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   154 00001D43 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   155 00001D45 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   156 00001D4B 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   157 00001D4E 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   158 00001D55 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   159 00001D59 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   160 00001D5C 4881C610000000      <1>     add rsi, mcb.program
   161 00001D63 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   162 00001D69 48C1E304            <1>     shl rbx, 4
   163 00001D6D 4801DE              <1>     add rsi, rbx
   164 00001D70 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   165 00001D72 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   166 00001D7A 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   167 00001D7D 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   168 00001D84 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   169 00001D8B 4889F8              <1>     mov rax, rdi
   170 00001D8E 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   171 00001D91 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   172 00001D95 E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   173 00001D9A C3                  <1>     ret
   174                              <1> .allocFail:
   175                              <1>     ;Walk the MCB chain to determine the biggest block size
   176 00001D9B 488B35(24C00300)    <1>     mov rsi, [mcbChainPtr]
   177 00001DA2 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   178                              <1> .af0:
   179 00001DA4 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   180 00001DA7 7409                <1>     je .af1
   181 00001DA9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   182 00001DAC 0F85BA030000        <1>     jne memSysHalt
   183                              <1> .af1:
   184 00001DB2 31C9                <1>     xor ecx, ecx
   185 00001DB4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   186 00001DB7 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   187 00001DBF 7505                <1>     jne .af2
   188 00001DC1 39D9                <1>     cmp ecx, ebx
   189 00001DC3 0F47D9              <1>     cmova ebx, ecx
   190                              <1> .af2:
   191 00001DC6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   192 00001DC9 7410                <1>     je .afExit
   193 00001DCB 48C1E104            <1>     shl rcx, 4
   194 00001DCF 4881C610000000      <1>     add rsi, mcb.program
   195 00001DD6 4801CE              <1>     add rsi, rcx
   196 00001DD9 EBD7                <1>     jmp short .af1
   197                              <1> .afExit:
   198 00001DDB B808000000          <1>     mov eax, errNoMem
   199 00001DE0 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   200 00001DE7 8802                <1>     mov byte [rdx + callerFrame.rax], al
   201 00001DE9 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   202 00001DEC 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   203 00001DF0 C3                  <1>     ret
   204                              <1> freeMemory:        ;ah = 49h
   205                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   206                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   207                              <1> ;Always skip the first block as this is the anchor for DOS
   208 00001DF1 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   209 00001DF8 31C9                <1>     xor ecx, ecx
   210 00001DFA 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   211 00001E01 4889F7              <1>     mov rdi, rsi
   212 00001E04 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   213 00001E07 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   214 00001E0B 4881C610000000      <1>     add rsi, mcb.program
   215 00001E12 4801CE              <1>     add rsi, rcx    ;Go to next block
   216                              <1> .mainLoop:
   217 00001E15 31C9                <1>     xor ecx, ecx
   218 00001E17 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   219 00001E1A 7409                <1>     je .valid
   220 00001E1C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   221 00001E1F 0F8547030000        <1>     jne memSysHalt
   222                              <1> .valid:
   223 00001E25 4939F0              <1>     cmp r8, rsi
   224 00001E28 741C                <1>     je .blockFound
   225                              <1>     ;Not valid, check if last block in chain
   226 00001E2A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   227 00001E2D 0F84A0000000        <1>     je .blockNotFound
   228 00001E33 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   229 00001E36 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   230 00001E3A 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   231 00001E41 4801CE              <1>     add rsi, rcx    ;Go to next block
   232 00001E44 EBCF                <1>     jmp short .mainLoop
   233                              <1> .blockFound:
   234                              <1>     ;If hole, error.
   235                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   236 00001E46 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   237 00001E4E 0F8488000000        <1>     je .blockHole
   238 00001E54 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   239 00001E5C 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   240 00001E64 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   241                              <1>     ;It is, let it absorb this space
   242 00001E66 31C9                <1>     xor ecx, ecx
   243 00001E68 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   244 00001E6B 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   245 00001E71 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   246                              <1>     ;Replace block marker
   247 00001E74 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   248 00001E76 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   249 00001E78 31C9                <1>     xor ecx, ecx
   250 00001E7A 48890E              <1>     mov qword [rsi], rcx
   251 00001E7D 48894E08            <1>     mov qword [rsi + 8], rcx
   252 00001E81 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   253                              <1> .blockFoundCheckFollowing:
   254                              <1>     ;First check if we are the last block in chain
   255 00001E84 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   256 00001E87 7439                <1>     je .blockFoundExit  ;If yes, exit!
   257 00001E89 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   258 00001E8C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   259 00001E8F 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   260 00001E93 4881C110000000      <1>     add rcx, mcb.program
   261 00001E9A 4801CE              <1>     add rsi, rcx    ;Go to next block
   262 00001E9D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   263 00001EA5 751B                <1>     jne .blockFoundExit ;If not free, exit
   264                              <1>     ;If free, absorb into block pointed to by rdi
   265 00001EA7 31C9                <1>     xor ecx, ecx
   266 00001EA9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   267 00001EAC 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   268 00001EB2 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   269                              <1>     ;Replace block marker
   270 00001EB5 8A06                <1>     mov al, byte [rsi + mcb.marker]
   271 00001EB7 8807                <1>     mov byte [rdi + mcb.marker], al
   272 00001EB9 31C9                <1>     xor ecx, ecx
   273 00001EBB 48890E              <1>     mov qword [rsi], rcx
   274 00001EBE 48894E08            <1>     mov qword [rsi + 8], rcx
   275                              <1> .blockFoundExit:
   276 00001EC2 E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   277 00001EC7 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   278 00001ECE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   279 00001ED2 C3                  <1>     ret
   280                              <1> .blockNotFound:
   281                              <1>     ;Set CF and error code
   282 00001ED3 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   283 00001EDA EB07                <1>     jmp short .blockError
   284                              <1> .blockHole:
   285                              <1> ;Cannot free a hole! Fail!
   286 00001EDC C605(6AC30300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   287                              <1> .blockError:
   288 00001EE3 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   289 00001EEA C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   290 00001EF1 66C705(67C30300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   290 00001EF9 00                  <1>
   291 00001EFA C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   292 00001F01 B809000000          <1>     mov eax, errMemAddr
   293 00001F06 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   294 00001F0D 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   295 00001F10 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   296 00001F14 E828020000          <1>     call verifyIntegrityOfMCBChain
   297 00001F19 C3                  <1>     ret
   298                              <1> reallocMemory:     ;ah = 4Ah
   299                              <1> ;Input: r8 = address of the block to be realloc'ed
   300                              <1> ;       ebx = How many paras this block should contain after realloc. 
   301                              <1> ;               If ebx = 0, jump to free memory
   302 00001F1A 85DB                <1>     test ebx, ebx
   303 00001F1C 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   304 00001F22 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   305 00001F29 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   306 00001F2C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   307 00001F2F 7409                <1>     je .ctn
   308 00001F31 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   309 00001F34 0F855C010000        <1>     jne .badAddrGiven
   310                              <1> .ctn:
   311                              <1>     ;Provided block is valid and not a hole
   312                              <1>     ;Check if Growth or Shrink
   313 00001F3A 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   314 00001F42 7498                <1>     je freeMemory.blockHole
   315 00001F44 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   316 00001F47 31C9                <1>     xor ecx, ecx
   317 00001F49 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   318 00001F4C 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   319 00001F4E 0F8786000000        <1>     ja .growth
   320 00001F54 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   321                              <1> ;We can always shrink
   322 00001F5A 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   323 00001F5C 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   324 00001F62 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   325 00001F65 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   326 00001F6B 48C1E304            <1>     shl rbx, 4
   327 00001F6F 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   328 00001F76 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   329 00001F79 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   330 00001F7B C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   331 00001F7E 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   332 00001F80 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   333 00001F88 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   334 00001F8B 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   335 00001F8D 0F84DB000000        <1>     je .exit
   336                              <1> ;Else, now see if the block following is also free and absorb it
   337 00001F93 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   338 00001F96 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   339 00001F9A 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   340 00001FA1 4801CE              <1>     add rsi, rcx    ;Goto next arena
   341 00001FA4 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   342 00001FA7 7409                <1>     je .shrinkAbsorb
   343 00001FA9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   344 00001FAC 0F85BA010000        <1>     jne memSysHalt
   345                              <1> .shrinkAbsorb:
   346 00001FB2 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   347 00001FBA 0F85AE000000        <1>     jne .exit
   348                              <1>     ;It is free, absorb it
   349 00001FC0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   350 00001FC3 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   351 00001FC9 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   352 00001FCC 31C9                <1>     xor ecx, ecx
   353                              <1>     ;Clear absorbed MCB
   354 00001FCE 48890E              <1>     mov qword [rsi], rcx
   355 00001FD1 48894E08            <1>     mov qword [rsi + 8], rcx
   356 00001FD5 E994000000          <1>     jmp .exit
   357                              <1> .growth:
   358                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   359 00001FDA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   360 00001FDD 0F84A0000000        <1>     je .notEnuffMem
   361                              <1> ;Now check the following space is free. If not, not enuff mem err
   362 00001FE3 31C9                <1>     xor ecx, ecx
   363 00001FE5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   364 00001FE8 48C1E104            <1>     shl rcx, 4
   365 00001FEC 4889F7              <1>     mov rdi, rsi    
   366 00001FEF 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   367 00001FF6 4801CE              <1>     add rsi, rcx
   368 00001FF9 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   369 00001FFC 7409                <1>     je .growthOK
   370 00001FFE 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   371 00002001 0F8565010000        <1>     jne memSysHalt
   372                              <1> .growthOK:
   373                              <1>     ;rdi points to block we are growing
   374 00002007 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   375 0000200F 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   376                              <1>     ;rsi must own all memory up to the next owned arena
   377 00002011 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   378 00002013 31C9                <1>     xor ecx, ecx
   379 00002015 31D2                <1>     xor edx, edx
   380 00002017 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   381 0000201A 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   382 00002020 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   383 00002023 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   384 00002025 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   385 00002027 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   386 0000202A 7759                <1>     ja .notEnuffMem1
   387 0000202C 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   388 0000202E 81FA01000000        <1>     cmp edx, 1
   389 00002034 7449                <1>     je .notEnuffMem2
   390 00002036 31C9                <1>     xor ecx, ecx
   391 00002038 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   392 0000203B 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   393 0000203F 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   394 00002042 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   395 00002045 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   396 0000204C 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   397 00002050 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   398 00002053 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   399 00002057 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   400                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   401                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   402 00002059 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   403 0000205B 7411                <1>     jz .exit
   404 0000205D 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   405 00002063 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   406 00002066 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   407                              <1> .exit:
   408 0000206E E8CE000000          <1>     call verifyIntegrityOfMCBChain
   409 00002073 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   410 0000207A 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   411 0000207E C3                  <1>     ret
   412                              <1> .notEnuffMem2:
   413 0000207F FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   414 00002081 EB02                <1>     jmp short .notEnuffMem1
   415                              <1> .notEnuffMem:
   416 00002083 31DB                <1>     xor ebx, ebx    ;No space to grow
   417                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   418 00002085 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   419 0000208A 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   420 00002091 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   421 00002094 EB0C                <1>     jmp short .bad
   422                              <1> .badAddrGiven:
   423 00002096 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   424 0000209D B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   425                              <1> .bad:
   426 000020A2 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   427 000020A9 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   428 000020B0 668905(67C30300)    <1>     mov word [errorExCde], ax   ;Error code
   429 000020B7 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   430 000020BE 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   431 000020C1 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   432 000020C5 E877000000          <1>     call verifyIntegrityOfMCBChain
   433 000020CA C3                  <1>     ret
   434                              <1> getsetMallocStrat: ;ah = 58h
   435 000020CB 84C0                <1>     test al, al
   436 000020CD 741F                <1>     jz .get
   437 000020CF 3C02                <1>     cmp al, 2
   438 000020D1 7337                <1>     jae .bad
   439                              <1> ;Set here
   440 000020D3 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   441 000020DA 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   442 000020DE 8805(2FC30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   443 000020E4 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   444 000020E8 E854000000          <1>     call verifyIntegrityOfMCBChain
   445 000020ED C3                  <1>     ret
   446                              <1> .get:
   447 000020EE 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   448 000020F5 31C0                <1>     xor eax, eax
   449 000020F7 8A05(2FC30300)      <1>     mov al, byte [allocStrat]
   450 000020FD 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   451 00002100 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   452 00002104 E838000000          <1>     call verifyIntegrityOfMCBChain
   453 00002109 C3                  <1>     ret
   454                              <1> .bad:
   455 0000210A C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   456 00002111 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   457 00002118 66C705(67C30300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   457 00002120 00                  <1>
   458 00002121 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   459 00002128 B801000000          <1>     mov eax, errInvFnc
   460 0000212D 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   461 00002134 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   462 00002137 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   463 0000213B E801000000          <1>     call verifyIntegrityOfMCBChain
   464 00002140 C3                  <1>     ret
   465                              <1> ;-----------------------------------:
   466                              <1> ;      Memory related routines      :
   467                              <1> ;-----------------------------------:
   468                              <1> verifyIntegrityOfMCBChain:
   469 00002141 50                  <1>     push rax
   470 00002142 53                  <1>     push rbx
   471 00002143 488B1D(24C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   472                              <1> .ok:
   473 0000214A 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   474 0000214D 7408                <1>     je .ok1
   475 0000214F 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   476 00002152 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   477                              <1> .exit:
   478 00002154 5B                  <1>     pop rbx
   479 00002155 58                  <1>     pop rax
   480 00002156 C3                  <1>     ret ;We have reached the end of the chain, return all good!
   481                              <1> .ok1:
   482 00002157 31C0                <1>     xor eax, eax
   483 00002159 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   484 0000215C 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   485 00002160 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   486 00002167 4801C3              <1>     add rbx, rax
   487 0000216A EBDE                <1>     jmp short .ok
   488                              <1> memSysHalt:
   489                              <1> ;Only arrive here if the integrity of the system is not verified
   490                              <1> ;Lock the system
   491 0000216C C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   492 00002173 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   493 0000217A 66C705(67C30300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   493 00002182 00                  <1>
   494 00002183 C605(69C30300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   495 0000218A 488D150E000000      <1>     lea rdx, .sysHltString
   496 00002191 B409                <1>     mov ah, 09h
   497 00002193 CD41                <1>     int 41h
   498                              <1>     ;Only halt IRQ's in production!
   499                              <1>     %if !DEBUG
   500 00002195 FA                  <1>     cli ;Halt interrupts
   501 00002196 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   502 00002198 E6A1                <1>     out 0A1h, al
   503 0000219A E621                <1>     out 021h, al
   504                              <1>     %endif
   505 0000219C F4                  <1>     hlt             ;Halt the system
   506 0000219D EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   507 0000219F 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   507 000021A8 6C6F636174696F6E20- <1>
   507 000021B1 6572726F720D0A      <1>
   508 000021B8 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   508 000021C1 616420434F4D4D414E- <1>
   508 000021CA 442C2073797374656D- <1>
   508 000021D3 2068616C74656424    <1>
    30                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    31                              <1> ;EXEC and all default terminates are here
    32                              <1> 
    33                              <1> ;========================
    34                              <1> ;   Interrupt handlers
    35                              <1> ;========================
    36                              <1> terminateProcess:   ;Int 40h
    37 000021DB 48CF                <1>     iretq
    38                              <1> terminateRes:       ;Int 47h
    39 000021DD 48CF                <1>     iretq
    40                              <1> ;========================
    41                              <1> ;    Int 21h functions
    42                              <1> ;========================
    43                              <1> simpleTerminate:   ;ah = 00h
    44 000021DF C3                  <1>     ret
    45                              <1> terminateStayRes:  ;ah = 31h
    46 000021E0 C3                  <1>     ret
    47                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    48 000021E1 C3                  <1>     ret
    49                              <1> terminateClean:    ;ah = 4Ch, EXIT
    50 000021E2 C3                  <1>     ret
    31                                  %include "./Source/Kernel/Local/Local.asm"
    32                              <1> ;Localisation based functions live here
    33                              <1> 
    34                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    35                              <1> ;al = 0 => Get the switch char
    36                              <1> ;al = 1 => Set the switch char to whats in DL
    37                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    38                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    39                              <1> ;       Always returns -1 => /DEV/ optional
    40                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    41                              <1> ;       Input value is ignored
    42 000021E3 3C01                <1>     cmp al, 01
    43 000021E5 7412                <1>     je .getSC
    44 000021E7 7209                <1>     jb .setSC
    45 000021E9 3C03                <1>     cmp al, 03
    46 000021EB 7214                <1>     jb .getDev
    47 000021ED 741C                <1>     je .setDev
    48 000021EF B0FF                <1>     mov al, -1
    49                              <1>     return
    18                              <2> %%_ret:
    19 000021F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    50                              <1> .setSC:
    51 000021F2 8815(2DC30300)      <1>     mov byte [switchChar], dl
    52                              <1>     return
    18                              <2> %%_ret:
    19 000021F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> .getSC:
    54 000021F9 8A15(2DC30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    55 000021FF EB02                <1>     jmp short .getRet
    56                              <1> .getDev:
    57 00002201 B2FF                <1>     mov dl, -1
    58                              <1> .getRet:
    59 00002203 E877040000          <1>     call getUserRegs
    60 00002208 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    61                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    62                              <1>     return
    18                              <2> %%_ret:
    19 0000220B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> 
    65                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    66                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    67                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    68 0000220C C3                  <1>     ret
    32                                  %include "./Source/Kernel/ctrlc.asm"
    33                              <1> diskErr:
    34 0000220D 80CC00              <1>     or ah, 00h
    35 00002210 EB03                <1>     jmp short criticalErrorSetup
    36                              <1> charDevErr:
    37                              <1> ;Called with ah with additional bits
    38 00002212 80CC38              <1>     or ah, 38h  ;Ignore,Retry,Fail OK
    39                              <1> criticalErrorSetup:
    40 00002215 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    41 0000221B 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    42 00002222 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    43                              <1>     ;For now, fall through, but need much work to change it later! 
    44                              <1> 
    45                              <1> 
    46                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    47                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    48                              <1> ; to the critical error handler.
    49                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    50                              <1> ; and with Int44Bitfield set
    51                              <1> ;               AH = Critical Error Bitfield
    52                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    53                              <1> ;               Bit 6 - Reserved
    54                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    55                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    56                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    57                              <1> ;               Bits [2-1] = Affected Disk Error
    58                              <1> ;                     0 0   DOS area
    59                              <1> ;                     0 1   FAT area
    60                              <1> ;                     1 0   Directory area
    61                              <1> ;                     1 1   Data area
    62                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    63                              <1> ;               AL  = Failing drive number if AH[7] = 0
    64                              <1> ;               DIL = Error code for errorMsg
    65                              <1> ;               RSI = EA of Device Header for which device the error occured
    66                              <1> ;Return:
    67                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    68                              <1> ;                  = 1 - Retry the Operation    (Retry)
    69                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    70                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    71                              <1> ; Return response from int 44h in al
    72                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    73                              <1> ; This function will terminate the program if an abort was requested!
    74                              <1> ; This function also destroys RBP
    75 00002228 803D(63C30300)01    <1>     cmp byte [critErrFlag], 1
    76 0000222F 7204                <1>     jb .noIntError  ;If not 0, enter
    77 00002231 B003                <1>     mov al, critFail    ;Else, return Fail always
    78 00002233 EB34                <1>     jmp short .checkResponse
    79                              <1> .noIntError:
    80 00002235 FA                  <1>     cli ;Disable Interrupts
    81 00002236 FE05(63C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
    82 0000223C FE0D(64C30300)      <1>     dec byte [inDOS]    ;Exiting DOS
    83 00002242 488925(B9C30300)    <1>     mov qword [xInt44hRSP], rsp
    84 00002249 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    85 00002250 31ED                <1>     xor ebp, ebp
    86 00002252 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
    87 00002254 488B25(B9C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    88 0000225B C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    89 00002262 FE05(64C30300)      <1>     inc byte [inDOS]    ;Reenter DOS
    90 00002268 FB                  <1>     sti ;Reenable Interrupts
    91                              <1>     ;Now we check that the response given was allowed, and translate if needed
    92                              <1> .checkResponse:
    93 00002269 3C01                <1>     cmp al, critRetry
    94 0000226B 7217                <1>     jb .checkIgnore
    95 0000226D 7420                <1>     je .checkRetry
    96 0000226F 3C03                <1>     cmp al, critFail
    97 00002271 752F                <1>     jne .abort   ;Must be abort
    98                              <1> ;Here is for fail
    99 00002273 F605(C1C30300)08    <1>     test byte [Int44bitfld], critFailOK
   100 0000227A 7526                <1>     jnz .abort
   101                              <1> .exit:
   102 0000227C C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   103                              <1>     return
    18                              <2> %%_ret:
    19 00002283 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> .checkIgnore:
   105 00002284 F605(C1C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   106 0000228B 75EF                <1>     jnz .exit
   107 0000228D EB09                <1>     jmp short .setFail
   108                              <1> .checkRetry:
   109 0000228F F605(C1C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   110 00002296 75E4                <1>     jnz .exit
   111                              <1> .setFail:
   112 00002298 B003                <1>     mov al, critFail
   113 0000229A FE05(C2C30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   114 000022A0 EBC7                <1>     jmp short .checkResponse    ;Double check if I can return Fail
   115                              <1> .abort:
   116                              <1> ;Prepare to abort. We abort from within!
   117                              <1> ;Currently fall into ^C
   118                              <1> ctrlBreakHdlr:
   119 000022A2 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   120 000022A4 E8A7EFFFFF          <1>     call printCaretASCII
   121 000022A9 E8D2EFFFFF          <1>     call printCRLF
   122                              <1>     ;Reset the console back to 0
   123 000022AE C605(EBC30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   124                              <1> .avoidCON:
   125                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   126 000022B5 FA                  <1> 	cli
   127 000022B6 488B25(D3C30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   128 000022BD E847060000          <1> 	call dosPopRegs ;Get user state back
   129 000022C2 488925(83C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   130 000022C9 F8                  <1>     clc
   131 000022CA CD43                <1>     int 43h ;Call critical error handler
   132 000022CC FA                  <1>     cli ;Clear interrupts again
   133 000022CD 488905(8FC30300)    <1>     mov qword [oldRAX], rax ;Save rax
   134 000022D4 9C                  <1>     pushfq  ;Get flags in rax
   135 000022D5 58                  <1>     pop rax 
   136 000022D6 483B25(83C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   137 000022DD 750C                <1>     jne .checkCF
   138                              <1> .returnToDOS:
   139 000022DF 488B05(8FC30300)    <1>     mov rax, qword [oldRAX]
   140 000022E6 E9C4040000          <1>     jmp functionDispatch    ;Goto int 41h
   141                              <1> .checkCF:
   142 000022EB 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   143 000022F2 A801                <1>     test al, 1  ;CF set?
   144 000022F4 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   145 000022F6 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   146 000022FB C605(E4C30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   147 00002302 E9A8040000          <1>     jmp functionDispatch
   148                              <1> 
    33                                  %include "./Source/Kernel/dosPrim.asm"
    34                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    35                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    36                              <1> 
    37                              <1> dosDefCritErrHdlr:
    38                              <1> ;The DOS default critical error handler always returns FAIL
    39 00002307 B003                <1>     mov al, critFail
    40 00002309 48CF                <1>     iretq
    41                              <1> goDriverChar:
    42                              <1> ;Shortcut for Char requests, make a driver request
    43                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    44 0000230B 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    45                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    46                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    47                              <1> ;       rbx = Ptr to the request header for the driver call!
    48 0000230F E837060000          <1>     call dosCrit2Enter
    49 00002314 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    50 00002317 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    51 0000231A E836060000          <1>     call dosCrit2Exit
    52                              <1>     return
    18                              <2> %%_ret:
    19 0000231F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> setupPhysicalDiskRequest:
    55                              <1> ;Ensure that al has valid disk number
    56                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    57                              <1> ;If CF=NC, rbp = DPB ptr.
    58                              <1> ;If CF=CY, exit error
    59 00002320 84C0                <1>     test al, al
    60 00002322 723F                <1>     jc .diskError
    61 00002324 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
    62 0000232A 7337                <1>     jae .diskError
    63 0000232C 50                  <1>     push rax
    64 0000232D FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    65 0000232F E8D8030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    66 00002334 58                  <1>     pop rax
    67 00002335 7235                <1>     jc .error
    68 00002337 8805(7BC50300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    69 0000233D 488B2D(84C50300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    70 00002344 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    71 0000234C 750A                <1>     jnz .netError
    72 0000234E 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    73 00002352 E820030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    74                              <1>     return
    18                              <2> %%_ret:
    19 00002357 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> .netError:
    76 00002358 66C705(67C30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    76 00002360 00                  <1>
    77 00002361 EB09                <1>     jmp short .error
    78                              <1> .diskError:
    79 00002363 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv
    79 0000236B 00                  <1>
    80                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    81 0000236C C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk
    82 00002373 C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr
    83 0000237A C605(6AC30300)09    <1>     mov byte [errorClass], eClsBadFmt
    84 00002381 F9                  <1>     stc
    85                              <1>     return
    18                              <2> %%_ret:
    19 00002382 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> setupAbsDiskEntry:
    88                              <1> ;Prepares to sets up the CDS and DPB for the request
    89 00002383 FE05(64C30300)      <1>     inc byte [inDOS]
    90 00002389 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    91 0000238A FC                  <1>     cld ;Set string ops in the right direction
    92 0000238B E890FFFFFF          <1>     call setupPhysicalDiskRequest
    93 00002390 7223                <1>     jc .exit    ;Error exit
    94 00002392 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    95 00002399 56                  <1>     push rsi
    96 0000239A 50                  <1>     push rax
    97 0000239B 488D35(6CC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    98 000023A2 8806                <1>     mov byte [rsi], al  ;Construct a path
    99 000023A4 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   100 000023A7 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   101 000023AB F8                  <1>     clc
   102                              <1> ;++++++++++++++++++++++++++++
   103                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   104                              <1> ;Entered with path in rsi (ah=03h)
   105 000023AC B800030000          <1>     mov eax, 0300h  
   106 000023B1 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   107                              <1> ;++++++++++++++++++++++++++++
   108 000023B3 58                  <1>     pop rax
   109 000023B4 5E                  <1>     pop rsi
   110                              <1> .exit:
   111 000023B5 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   112                              <1>     return
    18                              <2> %%_ret:
    19 000023B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> absDiskWrite:       ;Int 46h
   115                              <1> ;al = Drive number
   116                              <1> ;rbx = Memory Buffer address to read from
   117                              <1> ;ecx = Number of sectors to write
   118                              <1> ;rdx = Start LBA to write to
   119 000023B8 FA                  <1>     cli
   120 000023B9 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   121 000023C0 488D25(4CD80300)    <1>     lea rsp, DiskStakTop
   122 000023C7 55                  <1>     push rbp
   123 000023C8 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   124 000023C9 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   125 000023CE 7252                <1>     jc absDiskExit
   126 000023D0 E8D0010000          <1>     call primReqWriteSetup
   127 000023D5 EB1D                <1>     jmp short absDiskReadWriteCommon
   128                              <1> absDiskRead:        ;Int 45h
   129                              <1> ;al = Drive number
   130                              <1> ;rbx = Memory Buffer address to write to
   131                              <1> ;ecx = Number of sectors to read
   132                              <1> ;rdx = Start LBA to read from
   133 000023D7 FA                  <1>     cli 
   134 000023D8 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   135 000023DF 488D25(4CD80300)    <1>     lea rsp, DiskStakTop
   136 000023E6 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   137 000023E7 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   138 000023E8 E896FFFFFF          <1>     call setupAbsDiskEntry
   139 000023ED 7233                <1>     jc absDiskExit
   140 000023EF E8BC010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   141                              <1> absDiskReadWriteCommon:
   142                              <1> ;Entered with the appropriate function number in ah
   143                              <1> ; and primary request header in rbx
   144 000023F4 E83B000000          <1>     call absDiskDriverCall
   145 000023F9 7427                <1>     jz absDiskExit  ;Skip error code checking
   146 000023FB 8A05(1BC40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   147                              <1>     ;DOS uses the following pairs in a table
   148                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   149 00002401 B480                <1>     mov ah, 80h ;Attachment failure
   150 00002403 3C0C                <1>     cmp al, 0Ch ;Gen error
   151 00002405 741A                <1>     je .absExit
   152 00002407 B440                <1>     mov ah, 40h ;Seek error
   153 00002409 3C06                <1>     cmp al, 06h
   154 0000240B 7414                <1>     je .absExit
   155 0000240D B408                <1>     mov ah, 08h ;Bad CRC
   156 0000240F 3C04                <1>     cmp al, 04h
   157 00002411 740E                <1>     je .absExit
   158 00002413 B404                <1>     mov ah, 04h ;Sector not found
   159 00002415 3C08                <1>     cmp al, 08h
   160 00002417 7408                <1>     je .absExit
   161 00002419 30E4                <1>     xor ah, ah  ;Write Protect Violation
   162 0000241B 84C0                <1>     test al, al
   163 0000241D 7402                <1>     je .absExit
   164 0000241F B402                <1>     mov ah, 02h ;Other Error
   165                              <1> .absExit:
   166 00002421 F9                  <1>     stc
   167                              <1> absDiskExit:
   168 00002422 5B                  <1>     pop rbx
   169 00002423 5D                  <1>     pop rbp
   170 00002424 FA                  <1>     cli
   171 00002425 FE0D(64C30300)      <1>     dec byte [inDOS]
   172 0000242B 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]
   173 00002432 FB                  <1>     sti ;Reenable interrupts
   174                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00002433 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> absDiskDriverCall:
   176                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   177                              <1> ;       rbx = Request header address
   178                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   179                              <1> ;       eax = Status word from request
   180                              <1> ;       ecx = Number of sectors transferred
   181 00002434 56                  <1>     push rsi
   182                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   183 00002435 8B0D(2EC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   184                              <1>     ;Prepare for goDriver now
   185 0000243B 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   186 0000243F E8CBFEFFFF          <1>     call goDriver   ;Make request
   187 00002444 5E                  <1>     pop rsi
   188 00002445 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   189 0000244B 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   190 0000244D 0FB705(1BC40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   191 00002454 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   192                              <1>     return
    18                              <2> %%_ret:
    19 00002458 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> getDiskDPB:
   195                              <1> ;Gets the disk DPB if the Disk is physical
   196                              <1> ;Otherwise will return a pointer to the drive DPB
   197                              <1> ;Called with rdi pointing to the CDS
   198                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   199 00002459 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   200 0000245D 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   201 00002460 8805(7BC50300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   202 00002466 E80C020000          <1>     call setWorkingDPB
   203 0000246B 57                  <1>     push rdi    ;Save the CDS ptr
   204 0000246C E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   205 00002471 5F                  <1>     pop rdi
   206 00002472 7234                <1>     jc .exitBad ;Preserve CF
   207 00002474 7531                <1>     jnz .exit
   208                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   209 00002476 8A0D(69C00300)      <1>     mov cl, byte [lastdrvNum]
   210 0000247C 4831C0              <1>     xor rax, rax
   211 0000247F 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   212 00002482 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   213 00002486 488B3D(56C00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   214                              <1> .checkCDS:
   215 0000248D 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   216 00002491 7509                <1>     jne .next
   217 00002493 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   218 00002497 7403                <1>     jz .next    ;IF yes, skip it
   219 00002499 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   220                              <1> .next:
   221 0000249C 4881C75B000000      <1>     add rdi, cds_size
   222 000024A3 FEC9                <1>     dec cl
   223 000024A5 75E6                <1>     jnz .checkCDS
   224                              <1> .exit:
   225 000024A7 F8                  <1>     clc
   226                              <1> .exitBad:
   227                              <1>     return
    18                              <2> %%_ret:
    19 000024A8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228                              <1> 
   229                              <1> ensureDiskValid:
   230                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   231                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   232                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   233                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   234                              <1> .medChk:
   235 000024A9 E84B010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   236                              <1> ;Return in rbx the req hdr address
   237 000024AE 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   238 000024B2 E858FEFFFF          <1>     call goDriver   ;Request!
   239 000024B7 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   240 000024BB F7C700800000        <1>     test edi, drvErrStatus
   241 000024C1 756C                <1>     jnz .diskDrvCritErrMedChk
   242                              <1> .medChkIgnore:
   243 000024C3 8A05(7BC50300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   244 000024C9 30E4                <1>     xor ah, ah
   245 000024CB 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   246 000024CE 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   247 000024D1 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   248 000024D3 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   249 000024D5 E889E3FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   250 000024DA F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   251 000024DB 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   252                              <1>     ;ZF=NZ from test for dirty buffers
   253                              <1> .exit:
   254                              <1>     return
    18                              <2> %%_ret:
    19 000024DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   255                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   256 000024DE C605(54D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   257 000024E5 E89DE3FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   258                              <1>     ;Get a buffer to read BPB into in rdi
   259 000024EA B101                <1>     mov cl, dosBuffer
   260 000024EC 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   261 000024EE E8B6E3FFFF          <1>     call getBuffer ;Get a disk buffer
   262 000024F3 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   263 000024F5 4889DF              <1>     mov rdi, rbx
   264                              <1> .repeatEP:
   265 000024F8 E828010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   266 000024FD 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   267 00002501 E809FEFFFF          <1>     call goDriver   ;Request!
   268 00002506 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   269 0000250A A900800000          <1>     test eax, drvErrStatus
   270 0000250F 755C                <1>     jnz .diskDrvCritErrBPB
   271                              <1>     ;Now rebuild the dpb fields for this drive
   272 00002511 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   273 00002515 E80C070000          <1>     call createDPB  
   274                              <1>     ;Adjust the buffer header information
   275 0000251A 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   276 0000251D 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   277 00002520 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   278 00002523 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   279 00002526 30E4                <1>     xor ah, ah
   280 00002528 8825(54D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   281                              <1>     return
    18                              <2> %%_ret:
    19 0000252E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   282                              <1> .diskDrvCritErrMedChk:
   283                              <1> ;Critical Errors fall through here
   284                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   285 0000252F 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   286 00002536 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   287 0000253D 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   288 00002540 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   289 00002542 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   290 00002548 E8DBFCFFFF          <1>     call criticalDOSError
   291 0000254D 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   292 00002554 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   293 0000255B 3C01                <1>     cmp al, critRetry
   294 0000255D 0F8446FFFFFF        <1>     je .medChk
   295 00002563 3C00                <1>     cmp al, critIgnore
   296 00002565 0F8458FFFFFF        <1>     je .medChkIgnore
   297 0000256B F9                  <1>     stc ;Set error flag to indicate fail
   298                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 0000256C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   299                              <1> 
   300                              <1> .diskDrvCritErrBPB:
   301                              <1>     ;eax has status word, rbp has dpb ptr
   302                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   303 0000256D 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   304 00002574 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   305 0000257B 89C7                <1>     mov edi, eax    ;Transfer the status word over
   306 0000257D 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   307 00002580 B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK ;Set bits
   308 00002582 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   309 00002588 E89BFCFFFF          <1>     call criticalDOSError   ;This function increments the fail flag if fail
   310 0000258D 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   311 00002594 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   312 0000259B 3C01                <1>     cmp al, critRetry
   313 0000259D 0F8455FFFFFF        <1>     je .repeatEP
   314                              <1>     ;Else we fail (Ignore=Fail here)
   315 000025A3 F9                  <1>     stc ;Set error flag to indicate fail
   316                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 000025A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   317                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   318                              <1> ;           Primitive Driver Requests
   319                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   320                              <1> ;First are Disk requests, then Char device requests
   321                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   322                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   323                              <1> 
   324                              <1> primReqWriteSetup:
   325 000025A5 50                  <1>     push rax
   326 000025A6 B408                <1>     mov ah, drvWRITE    ;Command code
   327 000025A8 0225(2CC30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   328 000025AE EB03                <1>     jmp short primReqRWCommon
   329                              <1> primReqReadSetup:
   330 000025B0 50                  <1>     push rax
   331 000025B1 B404                <1>     mov ah, drvREAD
   332                              <1> primReqRWCommon:
   333                              <1> ;Sets up the IO request packet with:
   334                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   335                              <1> ; rbx = Data storage buffer ptr
   336                              <1> ; ecx = Number of sectors to transfer
   337                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   338                              <1> ; ~~~~ Set by entry function ~~~~ 
   339                              <1> ; ah = Command code
   340                              <1> ; All regs preserved EXCEPT rbx.
   341                              <1> ; Return: rbx = Transfer Address
   342 000025B3 48891D(26C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   343 000025BA 890D(2EC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   344 000025C0 C605(18C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   345 000025C7 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   346 000025CC 8905(19C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   347 000025D2 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   348 000025D5 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   349                              <1>     ;Disk operations only here!
   350 000025D7 488915(32C40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   351 000025DE 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   352 000025E1 8805(25C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   353 000025E7 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   354 000025EA 8805(19C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   355                              <1> primReqCommonExit:
   356                              <1> ;Returns in rbx the primary request header as these functions
   357                              <1> ; setup the request in the primary request header space
   358 000025F0 58                  <1>     pop rax
   359 000025F1 488D1D(18C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   360                              <1>     return
    18                              <2> %%_ret:
    19 000025F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   361                              <1> 
   362                              <1> primReqMedCheckSetup:
   363                              <1> ;Prepare the diskIO packet for mediacheck
   364                              <1> ;rbp has DPB pointer for device to check media on
   365 000025F9 50                  <1>     push rax
   366 000025FA C605(18C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   367 00002601 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   368 00002604 8805(25C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   369 0000260A 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   370 0000260D 8805(19C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   371 00002613 C605(1AC40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   372 0000261A 66C705(1BC40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   372 00002622 00                  <1>
   373 00002623 EBCB                <1>     jmp short primReqCommonExit
   374                              <1> 
   375                              <1> primReqGetBPBSetup:
   376                              <1> ;rbp has DPB pointer for device
   377                              <1> ;rdi has sector buffer header pointer for transfer
   378 00002625 50                  <1>     push rax
   379 00002626 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   380 0000262A 48893D(26C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   381 00002631 C605(18C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   382 00002638 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   383 0000263B 8805(25C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   384 00002641 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   385 00002644 8805(19C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   386 0000264A C605(1AC40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   387 00002651 66C705(1BC40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   387 00002659 00                  <1>
   388 0000265A EB94                <1>     jmp short primReqCommonExit
   389                              <1> 
   390                              <1> secdReqCharIOReq:
   391                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   392                              <1> ;Input:
   393                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   394                              <1> ; ecx = Length of buffer
   395                              <1> ; rdi = Buffer pointer
   396                              <1> ;Output: 
   397                              <1> ; rbx = Transfer Address 
   398 0000265C 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   399 00002663 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   400 00002666 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   401 00002669 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   402 0000266F 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   403 00002673 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   404                              <1>     return
    18                              <2> %%_ret:
    19 00002676 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   405                              <1> ;If the device which will process this request is a disk device
   406                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   407                              <1> ;Then we will read the appropriate byte from that buffer to the 
   408                              <1> ; singleIOByt buffer.
   409                              <1> ;Such a request will require additional setup with the following fields:
   410                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    34                                  %include "./Source/Kernel/dosUtils.asm"
    35                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    36                              <1> 
    37                              <1> ;Basic Drive related Utilities
    38                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    39                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    40                              <1> ; that gets set up)
    41                              <1> 
    42                              <1> setWorkingDPB:
    43                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    44 00002677 48892D(7CC50300)    <1>     mov qword [workingDPB], rbp
    45                              <1>     return
    18                              <2> %%_ret:
    19 0000267E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> 
    47                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    48                              <1> ;Returns ptr to user regs in rsi
    49 0000267F 488B35(D3C30300)    <1>     mov rsi, qword [oldRSP]
    50                              <1>     return
    18                              <2> %%_ret:
    19 00002686 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> walkDPBchain:
    53                              <1> ;Called with al = 0 based drive number
    54                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    55 00002687 488B35(34C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    56                              <1> .walk:
    57 0000268E 4881FEFFFFFFFF      <1>     cmp rsi, -1
    58 00002695 740A                <1>     je .exitBad
    59 00002697 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    60 00002699 7407                <1>     je .exit    ;Drive found
    61 0000269B 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    62 0000269F EBED                <1>     jmp short .walk
    63                              <1> .exitBad:
    64 000026A1 F9                  <1>     stc
    65                              <1> .exit:
    66                              <1>     return
    18                              <2> %%_ret:
    19 000026A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> setDrive:   
    68                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    69                              <1> ;Input: al = 1-based drive number
    70                              <1> ;Output: al = 0-based drive number
    71                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
    72                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
    73                              <1> ;            set.
    74 000026A3 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
    75 000026A8 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
    76 000026AA 56                  <1>     push rsi
    77 000026AB 488B35(84C50300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
    78 000026B2 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
    79 000026B8 5E                  <1>     pop rsi
    80 000026B9 7401                <1>     jz .exit
    81 000026BB F9                  <1>     stc
    82                              <1> .exit:
    83                              <1>     return
    18                              <2> %%_ret:
    19 000026BC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> 
    85                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
    86                              <1> ;Allows a redirector or subst/join to build a CDS
    87                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
    88                              <1> ; volumes, that are made at system boot.
    89                              <1> ;Input: al = Drive Letter for drive
    90                              <1> ;       workingCDS = Set to the CDS array slot for the drive
    91                              <1> ;Output: rdi = newly filled in workingCDS
    92                              <1> ;CF=NC => CDS valid and has a DPB
    93                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
    94 000026BD 50                  <1>     push rax
    95 000026BE 2C40                <1>     sub al, "A"-1
    96 000026C0 3A05(68C00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
    97 000026C6 488B3D(84C50300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
    98 000026CD 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
    99 000026D3 58                  <1>     pop rax
   100 000026D4 7235                <1>     jb .exit    ;Exit with CF=CY
   101 000026D6 50                  <1>     push rax
   102 000026D7 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   103 000026DC 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   104 000026DE 58                  <1>     pop rax
   105 000026DF 66814F430040        <1>     or word [rdi + cds.wFlags], cdsPhysDrive    ;Config bit set
   106 000026E5 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   107 000026EC 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   108 000026F4 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   109                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   110 000026FA 50                  <1>     push rax
   111 000026FB 56                  <1>     push rsi
   112 000026FC 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   113 000026FE E884FFFFFF          <1>     call walkDPBchain
   114 00002703 7204                <1>     jb .skipSettingDPB
   115 00002705 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   116                              <1> .skipSettingDPB:
   117 00002709 5E                  <1>     pop rsi
   118 0000270A 58                  <1>     pop rax
   119                              <1> .exit:
   120                              <1>     return
    18                              <2> %%_ret:
    19 0000270B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> getCDS:     ;Int 4Fh AX=1219h
   123                              <1> ;Gets the device DPB and saves it in the DOS variable
   124                              <1> ;This can be called to get CDS for network drives too!
   125                              <1> ;Input: al = 1 based drive number
   126                              <1> ;Sets workingCDS var with the CDS for the device. 
   127                              <1> ;   If device on a network, sets CF
   128                              <1> ;Returns al with 0-based drive number
   129 0000270C 84C0                <1>     test al, al
   130 0000270E 7508                <1>     jnz .skip
   131 00002710 8A05(8DC30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   132 00002716 FEC0                <1>     inc al
   133                              <1> .skip:
   134 00002718 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   135 0000271A 56                  <1>     push rsi
   136 0000271B C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   137 00002722 F605(79C50300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   138 00002729 7423                <1>     jz .physDrive
   139                              <1>     ;Invokation via 21/5D00, not yet fully supported
   140                              <1>     ;If returned with CF=CY, consider it an error for now
   141 0000272B 50                  <1>     push rax
   142 0000272C 57                  <1>     push rdi
   143 0000272D 488D3D(94C50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   144 00002734 48893D(84C50300)    <1>     mov qword [workingCDS], rdi ;Make it current
   145 0000273B 0441                <1>     add al, "A" ;Convert to a drive letter
   146 0000273D E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   147 00002742 66F747430040        <1>     test word [rdi + cds.wFlags], cdsPhysDrive  ;Is the CDS valid?
   148 00002748 5F                  <1>     pop rdi
   149 00002749 58                  <1>     pop rax
   150 0000274A 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   151 0000274C EB17                <1>     jmp short .exitOk   ;All oki
   152                              <1> .physDrive:
   153 0000274E E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   154 00002753 7208                <1>     jc .exitBad
   155 00002755 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   156 0000275B 7508                <1>     jnz .exitOk ;Exit with flag cleared
   157                              <1>     ;Else Return to unknown error locus
   158                              <1> .exitBad:
   159 0000275D C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk
   160                              <1> .exitBad1:
   161 00002764 F9                  <1>     stc
   162                              <1> .exitOk:
   163 00002765 5E                  <1>     pop rsi
   164                              <1>     return
    18                              <2> %%_ret:
    19 00002766 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   165                              <1> 
   166                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   167                              <1>     ;Gets the CDS for the current drive in al
   168                              <1>     ;Input: al = Drive number, 0 = A ...
   169                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   170                              <1>     ;        CF=CY => al not valid
   171 00002767 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
   172 0000276D 7202                <1>     jb .ctn
   173 0000276F F9                  <1>     stc 
   174                              <1>     return
    18                              <2> %%_ret:
    19 00002770 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> .ctn:
   176 00002771 50                  <1>     push rax
   177 00002772 52                  <1>     push rdx
   178 00002773 0FB6C0              <1>     movzx eax, al
   179 00002776 48BE5B000000000000- <1>     mov rsi, cds_size
   179 0000277F 00                  <1>
   180 00002780 31D2                <1>     xor edx, edx
   181 00002782 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
   182 00002784 488D05(56C00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
   183 0000278B 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   184 0000278E 488935(84C50300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   185 00002795 5A                  <1>     pop rdx
   186 00002796 58                  <1>     pop rax
   187 00002797 F8                  <1>     clc
   188                              <1>     return
    18                              <2> %%_ret:
    19 00002798 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   189                              <1> 
   190                              <1> 
   191                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   192                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   193                              <1> ;Input: AL = Char to normalise.
   194                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   195                              <1> ;If path separator, set ZF=ZE
   196 00002799 3C5C                <1>     cmp al, "\"
   197 0000279B 7406                <1>     je .exit
   198 0000279D 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   199 0000279F 7502                <1>     jne .exit
   200 000027A1 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   201                              <1> .exit:
   202                              <1>     return
    18                              <2> %%_ret:
    19 000027A3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   203                              <1> 
   204                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   205                              <1> ;Convert a lowercase char to uppercase
   206                              <1> ; Leave alone uppercase chars and invalid chars
   207                              <1> ;Input: al = Char to convert to uppercase
   208                              <1> ;Output: al = Processed char
   209 000027A4 3C7A                <1>     cmp al, "z"
   210 000027A6 7706                <1>     ja .exit
   211 000027A8 3C61                <1>     cmp al, "a"
   212 000027AA 7202                <1>     jb .exit
   213 000027AC 2C20                <1>     sub al, "a" - "A"   ;Convert the char
   214                              <1> .exit:
   215                              <1>     return
    18                              <2> %%_ret:
    19 000027AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Source/Kernel/dosMain.asm"
    36                              <1> ;-----------------------------------:
    37                              <1> ;        Main Kernel dispatch       :
    38                              <1> ;            and routines           :
    39                              <1> ;-----------------------------------:
    40                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    41                              <1> ;ah = Function number, all other registers have various meanings
    42                              <1>  %if DEBUG
    43                              <1>     ;Entry function
    44                              <1>     debugEnterM
    45                              <1>     lea rbp, .l0000
    46                              <1>     call debPrintNullString
    47                              <1>     call debPrintFunctionName
    48                              <1>     jmp short .l0001
    49                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    50                              <1> .l0001:    
    51                              <1>     debugExitM
    52                              <1>     %endif
    53 000027AF FA                  <1>     cli ;Halt external interrupts
    54 000027B0 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    55 000027B1 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    56 000027B4 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    57                              <1>     ;Cherry pick functions
    58 000027BA 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    59 000027BD 722C                <1>     jb .fsbegin   ;If below skip these checks
    60 000027BF 0F8459020000        <1>     je ctrlBreakCheck
    61 000027C5 80FC64              <1>     cmp ah, 64h
    62 000027C8 0F8499020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    63 000027CE 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    64 000027D0 80FC51              <1>     cmp ah, 51h
    65 000027D3 0F847C020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    66 000027D9 80FC62              <1>     cmp ah, 62h
    67 000027DC 0F847C020000        <1>     je getPSPaddr          ;Calls the above function
    68 000027E2 80FC50              <1>     cmp ah, 50h
    69 000027E5 0F8461020000        <1>     je setCurrProcessID
    70                              <1> .fsbegin:
    71 000027EB E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    72 000027F0 48891D(DBC30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    73 000027F7 66C705(9FC30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    73 000027FF 00                  <1>
    74 00002800 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
    75 00002807 488905(C3C30300)    <1>     mov qword [oldoldRSP], rax
    76 0000280E FE05(64C30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    77 00002814 488925(D3C30300)    <1>     mov qword [oldRSP], rsp
    78                              <1> ;Network related variable resetting
    79 0000281B C605(79C50300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    80                              <1> ;Here, we want to save oldRSP in the callers PSP
    81 00002822 803D(64C30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    82 00002829 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    83 0000282B 488B05(7BC30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    84 00002832 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    85                              <1> .fsb1:
    86 00002836 58                  <1>     pop rax     ;Get old rax back
    87 00002837 50                  <1>     push rax    ;and push it back onto the stack
    88                              <1> .charFun0CEP:
    89 00002838 488D25(7DCB0300)    <1>     lea rsp, critStakTop
    90 0000283F FB                  <1>     sti         ;Reenable interrupts
    91                              <1> 
    92 00002840 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    93 00002842 881D(EBC30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    94 00002848 C605(ECC30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    95 0000284F 881D(C2C30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    96 00002855 881D(E3C30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    97                              <1> 
    98 0000285B 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    99 0000285C 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   100 0000285E D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   101 00002860 488D0539D9FFFF      <1>     lea rax, kDispTbl
   102 00002867 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   103 0000286A 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   104 0000286E 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   105 00002871 58                  <1>     pop rax
   106                              <1> 
   107 00002872 84E4                <1>     test ah, ah     ;Simple Terminate function?
   108 00002874 741C                <1>     jz .fddiskOp
   109 00002876 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   110 00002879 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   111 0000287B 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   112 0000287E 7712                <1>     ja .fddiskOp
   113                              <1> ;Char operations here
   114 00002880 F605(63C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   115 00002887 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   116 00002889 488D25(0CD20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   117 00002890 EB40                <1>     jmp short .fdGoToFunction
   118                              <1> .fddiskOp:
   119                              <1>     ;Disk operations go here
   120                              <1>     ;Save rax on entry to a disk funciton
   121 00002892 488905(8FC30300)    <1>     mov qword [oldRAX], rax
   122                              <1>     ;Clear up error info
   123 00002899 C605(66C30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   124 000028A0 C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   125 000028A7 C605(65C30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   126                              <1> 
   127 000028AE 50                  <1>     push rax
   128 000028AF B482                <1>     mov ah, 82h ;Cancel all critical section!
   129 000028B1 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   130 000028B3 58                  <1>     pop rax
   131                              <1> 
   132 000028B4 C605(ECC30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   133 000028BB 488D25(4CD80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   134 000028C2 F605(8EC30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   135 000028C9 7407                <1>     jz .fdGoToFunction
   136                              <1> ; HANDLE CTRL+BREAK HERE!
   137 000028CB 50                  <1>     push rax
   138 000028CC E8BDE9FFFF          <1>     call checkBreak   ; Check for a ^C
   139 000028D1 58                  <1>     pop rax
   140                              <1> .fdGoToFunction:
   141 000028D2 48871D(DBC30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   142                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   143                              <1>     ;
   144                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   145                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   146                              <1>     ;
   147                              <1>     %if DEBUG && REGS
   148                              <1>     ;Print stack if necessary function
   149                              <1>     debugEnterM
   150                              <1>     call debPrintDOSStack
   151                              <1>     debugExitM
   152                              <1>     %endif
   153 000028D9 FF15(DBC30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   154                              <1>     %if DEBUG
   155                              <1>     ;Entry function
   156                              <1>     debugEnterM
   157                              <1>     lea rbp, .l0002
   158                              <1>     call debPrintNullString
   159                              <1>     jmp short .l0003
   160                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   161                              <1> .l0003:    
   162                              <1>     debugExitM
   163                              <1>     %endif
   164                              <1>     %if DEBUG && REGS
   165                              <1>     ;Exit function
   166                              <1>     debugEnterM
   167                              <1>     call debPrintDOSStack
   168                              <1>     debugExitM
   169                              <1>     %endif
   170                              <1> .fdExit:
   171 000028DF FA                  <1>     cli     ;Redisable interrupts
   172 000028E0 FE0D(64C30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   173 000028E6 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   174 000028ED 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   175 000028F0 488B05(C3C30300)    <1>     mov rax, qword [oldoldRSP]
   176 000028F7 488905(D3C30300)    <1>     mov qword [oldRSP], rax
   177 000028FE E806000000          <1>     call dosPopRegs  ;Pop the frame
   178 00002903 48CF                <1>     iretq
   179                              <1> .fdExitBad:
   180 00002905 30C0                <1>     xor al, al
   181                              <1> defaultIretq:
   182 00002907 48CF                <1>     iretq
   183                              <1> dosPopRegs:
   184 00002909 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   185 0000290F 58                  <1>     pop rax
   186 00002910 5B                  <1>     pop rbx
   187 00002911 59                  <1>     pop rcx
   188 00002912 5A                  <1>     pop rdx
   189 00002913 5E                  <1>     pop rsi
   190 00002914 5F                  <1>     pop rdi
   191 00002915 5D                  <1>     pop rbp
   192 00002916 4158                <1>     pop r8
   193 00002918 4159                <1>     pop r9
   194 0000291A FF25(CBC30300)      <1>     jmp qword [dosReturn]
   195                              <1> dosPushRegs:
   196 00002920 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   197 00002926 4151                <1>     push r9
   198 00002928 4150                <1>     push r8
   199 0000292A 55                  <1>     push rbp
   200 0000292B 57                  <1>     push rdi
   201 0000292C 56                  <1>     push rsi
   202 0000292D 52                  <1>     push rdx
   203 0000292E 51                  <1>     push rcx
   204 0000292F 53                  <1>     push rbx
   205 00002930 50                  <1>     push rax
   206 00002931 FF25(CBC30300)      <1>     jmp qword [dosReturn]
   207                              <1> dosCrit1Enter:
   208                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00002937 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   209 00002938 B801800000          <1>     mov eax, 8001h
   210 0000293D CD4A                <1>     int 4ah
   211 0000293F 58                  <1>     pop rax
   212                              <1>     return
    18                              <2> %%_ret:
    19 00002940 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   213                              <1> dosCrit1Exit:
   214                              <1>     return
    18                              <2> %%_ret:
    19 00002941 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215 00002942 B801810000          <1>     mov eax, 8101h
   216 00002947 CD4A                <1>     int 4ah
   217 00002949 58                  <1>     pop rax
   218                              <1>     return
    18                              <2> %%_ret:
    19 0000294A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   219                              <1> dosCrit2Enter:
   220                              <1>     return
    18                              <2> %%_ret:
    19 0000294B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   221 0000294C B802800000          <1>     mov eax, 8002h
   222 00002951 CD4A                <1>     int 4ah
   223 00002953 58                  <1>     pop rax
   224                              <1>     return
    18                              <2> %%_ret:
    19 00002954 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   225                              <1> dosCrit2Exit:
   226                              <1>     return
    18                              <2> %%_ret:
    19 00002955 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227 00002956 B802810000          <1>     mov eax, 8102h
   228 0000295B CD4A                <1>     int 4ah
   229 0000295D 58                  <1>     pop rax
   230                              <1>     return
    18                              <2> %%_ret:
    19 0000295E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231                              <1> extErrExit:
   232                              <1> ;The extended error exit from DOS
   233                              <1> ;Jumped to with AL=Extended error code
   234                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   235                              <1> ;   Returns with: eax = xLat Error
   236                              <1> ;                 rsi = callerFrame
   237 0000295F 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   238 00002962 E813000000          <1>     call xLatError
   239 00002967 E891000000          <1>     call checkFail
   240 0000296C E80EFDFFFF          <1>     call getUserRegs
   241 00002971 668906              <1>     mov word [rsi + callerFrame.rax], ax
   242 00002974 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   243 00002978 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   244                              <1>     return
    18                              <2> %%_ret:
    19 00002979 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   245                              <1> xLatError:
   246                              <1> ;Translates the error code given in ax and sets error code in the var
   247                              <1> ; Input: ax = Extended Error Code
   248                              <1> ; Output: ax = Potentially translated Error Code
   249                              <1> ;         [errorExCde] = Original Error Code
   250                              <1> ;Preserves all registers except ax
   251                              <1> ;AH is always returned as 0
   252 0000297A 53                  <1>     push rbx
   253 0000297B 51                  <1>     push rcx
   254 0000297C 56                  <1>     push rsi
   255 0000297D 668905(67C30300)    <1>     mov word [errorExCde], ax
   256 00002984 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   257 00002986 488D3503D7FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   258                              <1> .readEntry:
   259 0000298D 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   260 0000298F 3CFF                <1>     cmp al, -1
   261 00002991 741F                <1>     je .skipXlat
   262 00002993 3A05(90C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   263 00002999 7408                <1>     je .found
   264                              <1>     ;Here, entry not found, goto next entry
   265 0000299B 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   266 0000299E 4801C6              <1>     add rsi, rax    ;Goto next entry
   267 000029A1 EBEA                <1>     jmp short .readEntry
   268                              <1> .found:
   269                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   270 000029A3 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   271                              <1> .mainSearch:
   272 000029A6 AC                  <1>     lodsb   ;Get one byte into al
   273 000029A7 38C3                <1>     cmp bl, al  ;Check against the error code
   274 000029A9 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   275 000029AB FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   276 000029AD 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   277                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   278 000029AF 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   279                              <1> .skipXlat:
   280 000029B2 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   281 000029B4 5E                  <1>     pop rsi
   282 000029B5 59                  <1>     pop rcx
   283 000029B6 5B                  <1>     pop rbx
   284                              <1>     return
    18                              <2> %%_ret:
    19 000029B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> setErrorVars:
   286                              <1> ;Looks up the error code in the variable and sets the other error vars
   287                              <1> ;Called with the lookup table in rsi
   288                              <1> ;All regs preserved
   289 000029B8 50                  <1>     push rax
   290 000029B9 53                  <1>     push rbx
   291 000029BA 51                  <1>     push rcx
   292 000029BB 56                  <1>     push rsi
   293 000029BC 0FB71D(67C30300)    <1>     movzx ebx, word [errorExCde]
   294 000029C3 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   295                              <1> .readEntry:
   296 000029C8 AD                  <1>     lodsd   ;Read the dword table entry into eax
   297 000029C9 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   298 000029CE 7428                <1>     je .exit    
   299 000029D0 38D8                <1>     cmp al, bl  ;Compare the error codes
   300 000029D2 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   301 000029D4 D3E8                <1>     shr eax, cl
   302 000029D6 3CFF                <1>     cmp al, -1
   303 000029D8 7406                <1>     je .skipClass
   304 000029DA 8805(6AC30300)      <1>     mov byte [errorClass], al
   305                              <1> .skipClass:
   306 000029E0 D3E8                <1>     shr eax, cl
   307 000029E2 3CFF                <1>     cmp al, -1
   308 000029E4 7406                <1>     je .skipAct
   309 000029E6 8805(69C30300)      <1>     mov byte [errorAction], al
   310                              <1> .skipAct:
   311 000029EC D3E8                <1>     shr eax, cl
   312 000029EE 3CFF                <1>     cmp al, -1
   313 000029F0 7406                <1>     je .exit
   314 000029F2 8805(66C30300)      <1>     mov byte [errorLocus], al
   315                              <1> .exit:
   316 000029F8 5E                  <1>     pop rsi
   317 000029F9 59                  <1>     pop rcx
   318 000029FA 5B                  <1>     pop rbx
   319 000029FB 58                  <1>     pop rax
   320                              <1>     return
    18                              <2> %%_ret:
    19 000029FC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> checkFail:
   322                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   323                              <1> ; and swaps the var error code if so
   324 000029FD 803D(C2C30300)00    <1>     cmp byte [Int44Fail], 0
   325 00002A04 7509                <1>     jnz .skipFail
   326 00002A06 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   326 00002A0E 00                  <1>
   327                              <1> .skipFail:
   328 00002A0F 56                  <1>     push rsi
   329 00002A10 488D3515D7FFFF      <1>     lea rsi, extErrTbl
   330 00002A17 E89CFFFFFF          <1>     call setErrorVars
   331 00002A1C 5E                  <1>     pop rsi
   332                              <1>     return
    18                              <2> %%_ret:
    19 00002A1D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   333                              <1> ;========================================:
   334                              <1> ;      Reentrant Kernel Functions        :
   335                              <1> ;========================================:
   336                              <1> ctrlBreakCheck:    ;ah = 33h
   337 00002A1E 84C0                <1>     test al, al
   338 00002A20 7508                <1>     jnz .cbcget  ;Get the state or other functions
   339 00002A22 8A15(8EC30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   340 00002A28 48CF                <1>     iretq
   341                              <1> .cbcget:
   342 00002A2A 3C02                <1>     cmp al, 02h
   343 00002A2C 771A                <1>     ja .cbcBad
   344 00002A2E 740D                <1>     jz .cbcxchg ;Function 2
   345 00002A30 52                  <1>     push rdx
   346 00002A31 80E201              <1>     and dl, 1   ;Get only the bottom bit
   347 00002A34 8815(8EC30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   348 00002A3A 5A                  <1>     pop rdx
   349 00002A3B 48CF                <1>     iretq
   350                              <1> .cbcxchg:
   351 00002A3D 80E201              <1>     and dl, 1
   352 00002A40 8615(8EC30300)      <1>     xchg byte [breakFlag], dl
   353 00002A46 48CF                <1>     iretq
   354                              <1> .cbcBad:
   355 00002A48 B0FF                <1>     mov al, -1
   356 00002A4A 48CF                <1>     iretq
   357                              <1> 
   358                              <1> 
   359                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   360 00002A4C 48891D(7BC30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   361 00002A53 48CF                <1>     iretq
   362                              <1> 
   363                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   364 00002A55 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   365 00002A5C 48CF                <1>     iretq
   366                              <1> 
   367                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   368 00002A5E 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   369 00002A65 48CF                <1>     iretq
   370                              <1> 
   371                              <1> setDriverLookahead:;ah = 64h, reserved
   372 00002A67 48CF                <1>     iretq
   373                              <1> 
   374                              <1> ;========================================:
   375                              <1> ;            Kernel Functions            :
   376                              <1> ;========================================:
   377                              <1> diskReset:         ;ah = 0Dh
   378                              <1> ;Flush all dirty buffers to disk
   379 00002A69 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   380                              <1> .drCheckBuffer:
   381 00002A70 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   382 00002A74 7407                <1>     jz .drGotoNextBuffer
   383                              <1> .drFlushBuffer:
   384 00002A76 E8C9DCFFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   385 00002A7B 720C                <1>     jc .drExit
   386                              <1> .drGotoNextBuffer:
   387 00002A7D 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   388 00002A80 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   389 00002A87 75E7                <1>     jne .drCheckBuffer
   390                              <1> .drExit:
   391 00002A89 C3                  <1>     ret
   392                              <1> 
   393                              <1> selectDisk:        ;ah = 0Eh
   394                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   395 00002A8A 88D0                <1>     mov al, dl
   396 00002A8C FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   397 00002A8E E810FCFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   398 00002A93 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   399 00002A95 8805(8DC30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   400                              <1> .skipSettingCurrent:
   401 00002A9B 0FB605(69C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   402 00002AA2 C3                  <1>     ret
   403                              <1> 
   404                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   405 00002AA3 8A05(8DC30300)      <1>     mov al, byte [currentDrv]
   406 00002AA9 C3                  <1>     ret
   407                              <1> 
   408                              <1> FATinfoDefault:    ;ah = 1Bh
   409 00002AAA 30D2                <1>     xor dl, dl
   410                              <1> FATinfoDevice:     ;ah = 1Ch
   411                              <1> ;Return in:
   412                              <1> ;   al = Number of sectors per cluster
   413                              <1> ;   edx = Number of clusters
   414                              <1> ;   cx =  Size of a clsuter
   415 00002AAC 84D2                <1>     test dl, dl
   416 00002AAE 7508                <1>     jnz .fidSkipdefault
   417 00002AB0 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   418 00002AB6 FEC2                <1>     inc dl
   419                              <1> .fidSkipdefault:
   420 00002AB8 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   421                              <1> ;Walk the dpb chain manually
   422 00002ABA 88D0                <1>     mov al, dl  ;Move drive number into al
   423 00002ABC E8C6FBFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   424 00002AC1 7317                <1>     jnc .fidDPBFound
   425                              <1> ;Else, we at an error.
   426                              <1> ;Simply return with CY set and error code in al with extended error info
   427 00002AC3 E8B7FBFFFF          <1>     call getUserRegs
   428 00002AC8 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   429 00002AD0 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   430 00002AD5 E985FEFFFF          <1>     jmp extErrExit  ;Exit error
   431                              <1> .fidDPBFound:
   432 00002ADA 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   433 00002ADD FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   434 00002ADF 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   435 00002AE2 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ; Save the value in ecx
   436 00002AE6 488D5E23            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   437 00002AEA E890FBFFFF          <1>     call getUserRegs
   438 00002AEF 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   439 00002AF3 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   440 00002AF7 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   441 00002AFB C3                  <1>     ret
   442                              <1> 
   443                              <1> setIntVector:      ;ah = 25h
   444                              <1> ;Called with:
   445                              <1> ;   rdx = Pointer to interrupt handler
   446                              <1> ;   al = Interrupt number
   447 00002AFC 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   448 00002AFE 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   449                              <1> ;First call to get default BIOS segement selector and attribute word
   450 00002B04 88C3                <1>     mov bl, al  ;Set interrupt number 
   451 00002B06 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   452 00002B0B CD35                <1>     int 35h
   453 00002B0D E86DFBFFFF          <1>     call getUserRegs
   454 00002B12 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   455 00002B16 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   456 00002B18 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   457                              <1> ;dx preserves the attribute word
   458 00002B1A B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   459 00002B1F CD35                <1>     int 35h
   460 00002B21 E859FBFFFF          <1>     call getUserRegs
   461 00002B26 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   462 00002B28 C3                  <1>     ret
   463                              <1> createNewPSP:      ;ah = 26h
   464 00002B29 C3                  <1>     ret
   465                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   466 00002B2A 8805(2CC30300)      <1>     mov byte [verifyFlag], al
   467 00002B30 8025(2CC30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   468 00002B37 C3                  <1>     ret
   469                              <1> getDOSversion:     ;ah = 30h
   470 00002B38 E842FBFFFF          <1>     call getUserRegs
   471 00002B3D 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   472 00002B3F 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   473 00002B42 668B05B7D4FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   474 00002B49 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   475 00002B4C C3                  <1>     ret
   476                              <1> 
   477                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   478                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   479 00002B4D 30D2                <1>     xor dl, dl
   480                              <1> getDeviceDPBptr:   ;ah = 32h
   481                              <1> ;On entry: dl = Drive number
   482                              <1> ;On exit: rbx = DPB pointer
   483 00002B4F 84D2                <1>     test dl, dl
   484 00002B51 7508                <1>     jnz .gddpskipdefault
   485 00002B53 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   486 00002B59 FEC2                <1>     inc dl
   487                              <1> .gddpskipdefault:
   488                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   489 00002B5B FECA                <1>     dec dl
   490 00002B5D 88D0                <1>     mov al, dl
   491 00002B5F E8A8FBFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   492 00002B64 722C                <1>     jc .bad
   493 00002B66 488B3D(84C50300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   494 00002B6D 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   495 00002B73 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   496                              <1>     ;Here ONLY if accessing critical Disk data structures
   497 00002B75 E8BDFDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   498 00002B7A E8DAF8FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   499 00002B7F E8BDFDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   500 00002B84 720C                <1>     jc .bad
   501 00002B86 E8F4FAFFFF          <1>     call getUserRegs
   502 00002B8B 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   503 00002B8F 30C0                <1>     xor al, al
   504 00002B91 C3                  <1>     ret
   505                              <1> .bad:
   506 00002B92 B0FF                <1>     mov al, -1
   507 00002B94 C3                  <1>     ret
   508                              <1> 
   509                              <1> getInDOSflagPtr:   ;ah = 34h
   510 00002B95 488D15(64C30300)    <1>     lea rdx, inDOS
   511 00002B9C E8DEFAFFFF          <1>     call getUserRegs
   512 00002BA1 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   513 00002BA5 C3                  <1>     ret
   514                              <1> getIntVector:      ;ah = 35h
   515                              <1> ;Called with:
   516                              <1> ;   al = Interrupt Number
   517                              <1> ;Returns:
   518                              <1> ;   rbx = Pointer to interrupt handler
   519 00002BA6 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   520 00002BA8 B807F00000          <1>     mov eax, 0F007h
   521 00002BAD CD35                <1>     int 35h
   522 00002BAF E8CBFAFFFF          <1>     call getUserRegs
   523 00002BB4 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   524 00002BB8 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   525 00002BBA C3                  <1>     ret
   526                              <1> 
   527                              <1> getDiskFreeSpace:  ;ah = 36h
   528 00002BBB 84D2                <1>     test dl, dl
   529 00002BBD 7508                <1>     jnz .gdfsSkipdefault
   530 00002BBF 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   531 00002BC5 FEC2                <1>     inc dl
   532                              <1> .gdfsSkipdefault:
   533 00002BC7 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   534 00002BC9 88D0                <1>     mov al, dl
   535 00002BCB E8B7FAFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   536 00002BD0 7310                <1>     jnc .gdfsDPBFound
   537                              <1> ;Else, we at an error.
   538                              <1> ;Simply return with CY set and error code in al with extended error info
   539 00002BD2 B80F000000          <1>     mov eax, errBadDrv
   540 00002BD7 E883FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   541 00002BDC 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   542 00002BE1 C3                  <1>     ret
   543                              <1> .gdfsDPBFound:
   544 00002BE2 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   545 00002BE5 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   546 00002BE7 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   547 00002BEA 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ;Save the value in ecx
   548 00002BEE 8B5E31              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   549 00002BF1 E889FAFFFF          <1>     call getUserRegs
   550 00002BF6 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   551 00002BFA 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   552 00002BFE 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   553 00002C02 C3                  <1>     ret
   554                              <1> 
   555                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   556 00002C03 31C0                <1>     xor eax, eax
   557 00002C05 668705(8BC30300)    <1>     xchg ax, word [errorLevel]
   558 00002C0C E86EFAFFFF          <1>     call getUserRegs
   559 00002C11 668906              <1>     mov word [rsi + callerFrame.rax], ax
   560 00002C14 C3                  <1>     ret
   561                              <1> 
   562                              <1> getSysVarsPtr:     ;ah = 52h
   563 00002C15 488D15(2CC00300)    <1>     lea rdx, sysVarsPtr
   564 00002C1C E85EFAFFFF          <1>     call getUserRegs
   565 00002C21 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   566 00002C25 C3                  <1>     ret
   567                              <1> 
   568                              <1> 
   569                              <1> ;AH = 53h - CREATE DPB
   570                              <1> createDPB:         ;generates a DPB from a given BPB
   571                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   572                              <1> ;This is done so that the other fields of the DPB can be recycled
   573                              <1> ;Input: rsi = ptr to the BPB
   574                              <1> ;       rbp = ptr to the DPB
   575                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   576                              <1> ;bMediaDescriptor
   577 00002C26 8A4615              <1>     mov al, byte [rsi + bpb.media]
   578 00002C29 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   579                              <1> ;dFirstFreeCluster
   580 00002C2C C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   581                              <1> ;dNumberOfFreeClusters
   582 00002C33 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   583                              <1> ;wBytesPerSector
   584 00002C3A 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   585 00002C3E 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   586                              <1> ;bMaxSectorInCluster
   587 00002C42 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   588 00002C45 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   589 00002C47 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   590                              <1> ;bSectorsPerClusterShift
   591 00002C4A FEC0                <1>     inc al
   592 00002C4C 30C9                <1>     xor cl, cl
   593                              <1> .cd2:
   594 00002C4E D0E8                <1>     shr al, 1
   595 00002C50 7404                <1>     jz .cd3
   596 00002C52 FEC1                <1>     inc cl
   597 00002C54 EBF8                <1>     jmp short .cd2
   598                              <1> .cd3:
   599 00002C56 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   600                              <1> ;wFAToffset, number of reserved sectors in partition
   601 00002C59 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   602 00002C5D 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   603                              <1> ;bNumberOfFATs
   604 00002C61 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   605 00002C64 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   606                              <1> ;wNumberRootDirSectors
   607 00002C67 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   608 00002C6B C1E005              <1>     shl eax, 5  ;Multiply by 32
   609 00002C6E 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   610 00002C72 FFC9                <1>     dec ecx
   611 00002C74 01C8                <1>     add eax, ecx
   612 00002C76 31D2                <1>     xor edx, edx    ;Clear for divide
   613 00002C78 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   614 00002C7A 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   615                              <1> ;dFATlength, get the FAT length
   616 00002C7E 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   617 00002C82 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   618 00002C85 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   619 00002C87 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   620 00002C8A 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   621                              <1> ;Complex cases below...
   622                              <1> ;dClusterHeapOffset, start sector of the data area
   623 00002C8D 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   624 00002C91 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   625 00002C94 85C0                <1>     test eax, eax
   626 00002C96 0F44C3              <1>     cmovz eax, ebx
   627                              <1> ;eax = FATsz
   628 00002C99 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   629 00002C9D 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   630 00002CA0 85DB                <1>     test ebx, ebx
   631 00002CA2 0F44D9              <1>     cmovz ebx, ecx 
   632                              <1> ;ebx = TotSec
   633 00002CA5 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   634 00002CA8 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   635                              <1> .cd4:
   636 00002CAA 01C2                <1>     add edx, eax
   637 00002CAC FEC9                <1>     dec cl
   638 00002CAE 75FA                <1>     jnz .cd4
   639 00002CB0 89D0                <1>     mov eax, edx    ;Store product in eax
   640 00002CB2 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   641 00002CB6 01D0                <1>     add eax, edx
   642 00002CB8 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   643 00002CBC 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   644                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   645                              <1>     ;aka eax = Start sector of the data area in volume
   646 00002CBE 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   647                              <1> ;dClusterCount
   648 00002CC1 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   649 00002CC3 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   650 00002CC5 31D2                <1>     xor edx, edx
   651 00002CC7 BB01000000          <1>     mov ebx, 1
   652 00002CCC 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   653 00002CCF D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   654 00002CD1 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   655 00002CD3 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   656 00002CD5 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   657                              <1> ;dFirstUnitOfRootDir
   658 00002CD8 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   659 00002CDD 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   660 00002CE0 7709                <1>     ja .cd5
   661                              <1>     ;Else, we need to find the first sector of the root directory
   662                              <1>     ;Get the start sector of data area in volume 
   663                              <1>     ; and sub the number of sectors in the root directory
   664 00002CE2 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   665 00002CE5 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   666 00002CE9 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   667                              <1> .cd5:
   668 00002CEB 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   669                              <1> ;Exit epilogue
   670 00002CEE 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   671 00002CF5 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   672                              <1>     %if DEBUG && DPBINFO
   673                              <1>     ;Print DPB 
   674                              <1>     debugEnterM
   675                              <1>     push rbp
   676                              <1>     lea rbp, .l0000
   677                              <1>     call debPrintNullString
   678                              <1>     pop rbp
   679                              <1>     call debDPBBPBptr
   680                              <1>     call debMakeDebuggerRespond
   681                              <1>     jmp short .l0001
   682                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   683                              <1> .l0001:
   684                              <1>     debugExitM
   685                              <1>     %endif
   686 00002CF7 C3                  <1>     ret
   687                              <1> 
   688                              <1> getVerifySetting:  ;ah = 54h
   689 00002CF8 8A05(2CC30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   690 00002CFE C3                  <1>     ret
   691                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   692 00002CFF C3                  <1>     ret
   693                              <1> getExtendedError:  ;ah = 59h
   694 00002D00 E87AF9FFFF          <1>     call getUserRegs
   695 00002D05 668B05(67C30300)    <1>     mov ax, word [errorExCde]
   696 00002D0C 8A2D(66C30300)      <1>     mov ch, byte [errorLocus]
   697 00002D12 8A3D(6AC30300)      <1>     mov bh, byte [errorClass]
   698 00002D18 8A1D(69C30300)      <1>     mov bl, byte [errorAction]
   699 00002D1E 668906              <1>     mov word [rsi + callerFrame.rax], ax
   700 00002D21 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   701 00002D25 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   702 00002D28 C3                  <1>     ret
   703                              <1> getCritErrorInfo:  ;ah = 5Dh
   704                              <1> networkServices:   ;ah = 5Eh, do nothing
   705                              <1> networkRedirection:;ah = 5Fh, do nothing
   706 00002D29 C3                  <1>     ret
   707                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   708                              <1> noOp:
   709 00002D2A C3                  <1>     ret
    36                                  %include "./Source/Kernel/multiplx.asm"
    37                              <1> ;Default multiplexer. Current only installed function is ah=12h
    38                              <1> 
    39                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    40 00002D2B 80FC12              <1>     cmp ah, 12h
    41 00002D2E 751A                <1>     jne .exit       ;Exit if not for us
    42 00002D30 3C01                <1>     cmp al, mDispTblL / 2
    43 00002D32 7316                <1>     jae .exit   ;If above or equal, exit
    44 00002D34 53                  <1>     push rbx
    45 00002D35 51                  <1>     push rcx
    46 00002D36 31C9                <1>     xor ecx, ecx
    47 00002D38 488D1D35D5FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    48 00002D3F 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    49 00002D41 D1E1                <1>     shl ecx, 1   ;multiply by 2
    50 00002D43 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    51 00002D46 FFD3                <1>     call rbx
    52 00002D48 59                  <1>     pop rcx
    53 00002D49 5B                  <1>     pop rbx
    54                              <1> .exit:
    55 00002D4A 48CF                <1>     iretq
    56                              <1> multiplexTest:
    57 00002D4C B0FF                <1>     mov al, -1
    58 00002D4E C3                  <1>     ret
    37                                  %include "./Source/Misc/int44h.asm"
    38                              <1> critErrorHandler:   ;Int 44h
    39                              <1> ;User Stack in usage here, must be swapped to before this is called
    40                              <1> ;Entered with:  
    41                              <1> ;               AH = Critical Error Bitfield
    42                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    43                              <1> ;               Bit 6 - Reserved
    44                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    45                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    46                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    47                              <1> ;               Bits [2-1] = Affected Disk Error
    48                              <1> ;                     0 0   DOS area
    49                              <1> ;                     0 1   FAT area
    50                              <1> ;                     1 0   Directory area
    51                              <1> ;                     1 1   Data area
    52                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    53                              <1> ;               AL  = Failing drive number if AH[7] = 0
    54                              <1> ;               DIL = Error code for errorMsg
    55                              <1> ;               RSI = EA of Device Header for which device the error occured
    56                              <1> ;Return:
    57                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    58                              <1> ;                  = 1 - Retry the Operation    (Retry)
    59                              <1> ;                  = 2 - Terminate the Program  (Abort)
    60                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    61 00002D4F 53                  <1>     push rbx
    62 00002D50 51                  <1>     push rcx
    63 00002D51 52                  <1>     push rdx
    64 00002D52 57                  <1>     push rdi
    65 00002D53 56                  <1>     push rsi
    66 00002D54 FC                  <1>     cld         ;Make String ops go forward
    67                              <1> 
    68 00002D55 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    69 00002D58 488D155E020000      <1>     lea rdx, qword [.crlf]
    70 00002D5F B409                <1>     mov ah, 09h ;Print String
    71 00002D61 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    72                              <1> 
    73 00002D63 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    74 00002D69 B90C000000          <1>     mov ecx, 0Ch
    75 00002D6E 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    76 00002D70 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    77 00002D73 480FB7FF            <1>     movzx rdi, di
    78 00002D77 4889FA              <1>     mov rdx, rdi    ;Copy error code
    79 00002D7A 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    80 00002D7E 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    81 00002D81 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    82 00002D84 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    83 00002D8B 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    84 00002D8F B409                <1>     mov ah, 09h ;Print String
    85 00002D91 CD41                <1>     int 41h     ;Call DOS to print first part of message
    86                              <1> 
    87 00002D93 488D1505020000      <1>     lea rdx, qword [.readmsg]
    88 00002D9A 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    89 00002DA1 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    90 00002DA4 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    91 00002DA8 B409                <1>     mov ah, 09h ;Print String
    92 00002DAA CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    93                              <1> 
    94 00002DAC F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    95 00002DAF 0F85DF000000        <1>     jnz .charError
    96                              <1> ;Disk error continues here
    97 00002DB5 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    98 00002DBC B409                <1>     mov ah, 09h
    99 00002DBE CD41                <1>     int 41h
   100 00002DC0 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   101 00002DC2 80C241              <1>     add dl, "A" ;Add ASCII code
   102 00002DC5 B402                <1>     mov ah, 02h ;Print char in dl
   103 00002DC7 CD41                <1>     int 41h
   104                              <1> .userInput:
   105 00002DC9 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   106 00002DD0 B409                <1>     mov ah, 09h
   107 00002DD2 CD41                <1>     int 41h
   108                              <1> ;Abort, Retry, Ignore, Fail is word order
   109                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   110                              <1> .userAbort:
   111                              <1> ;Abort is always an option
   112 00002DD4 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   113 00002DDB B409                <1>     mov ah, 09h
   114 00002DDD CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   115                              <1> .userRetry:
   116 00002DDF F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   117 00002DE2 7416                <1>     jz .userIgnore    ;If clear, dont print message
   118 00002DE4 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   119 00002DEB B409                <1>     mov ah, 09h
   120 00002DED CD41                <1>     int 41h
   121 00002DEF 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   122 00002DF6 B409                <1>     mov ah, 09h
   123 00002DF8 CD41                <1>     int 41h
   124                              <1> .userIgnore:
   125 00002DFA F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   126 00002DFD 7416                <1>     jz .userFail
   127 00002DFF 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   128 00002E06 B409                <1>     mov ah, 09h
   129 00002E08 CD41                <1>     int 41h
   130 00002E0A 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   131 00002E11 B409                <1>     mov ah, 09h
   132 00002E13 CD41                <1>     int 41h
   133                              <1> .userFail:
   134 00002E15 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   135 00002E18 7416                <1>     jz .userMsgEnd
   136 00002E1A 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   137 00002E21 B409                <1>     mov ah, 09h
   138 00002E23 CD41                <1>     int 41h
   139 00002E25 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   140 00002E2C B409                <1>     mov ah, 09h
   141 00002E2E CD41                <1>     int 41h
   142                              <1> .userMsgEnd:
   143 00002E30 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   144 00002E37 B409                <1>     mov ah, 09h
   145 00002E39 CD41                <1>     int 41h
   146                              <1> ;Get user input now 
   147 00002E3B 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   148 00002E3D 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   149 00002E44 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   150 00002E46 CD41                <1>     int 41h ;Get char in al
   151 00002E48 3C61                <1>     cmp al, "a" ;Chack if lowercase
   152 00002E4A 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   153 00002E4C 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   154                              <1> .uip1:
   155 00002E4E AE                  <1>     scasb   ;Compare char to list, offset gives return code
   156 00002E4F 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   157 00002E51 FFC1                <1>     inc ecx
   158 00002E53 81F904000000        <1>     cmp ecx, 4
   159 00002E59 75F3                <1>     jne .uip1
   160 00002E5B E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   161                              <1> .validInput:
   162 00002E60 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   163                              <1> ;Now check if the input is permitted
   164 00002E62 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   165 00002E64 7427                <1>     je .cehExit
   166 00002E66 84C0                <1>     test al, al ;Check if 0 => Ignore
   167 00002E68 740F                <1>     je .viIgnore
   168 00002E6A 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   169 00002E6C 7416                <1>     je .viRetry
   170                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   171 00002E6E F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   172 00002E71 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   173 00002E77 EB14                <1>     jmp short .cehExit
   174                              <1> .viIgnore:
   175 00002E79 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   176 00002E7C 0F8447FFFFFF        <1>     jz .userInput
   177 00002E82 EB09                <1>     jmp short .cehExit
   178                              <1> .viRetry:
   179 00002E84 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   180 00002E87 0F843CFFFFFF        <1>     jz .userInput
   181                              <1> .cehExit:
   182 00002E8D 5E                  <1>     pop rsi
   183 00002E8E 5F                  <1>     pop rdi
   184 00002E8F 5A                  <1>     pop rdx
   185 00002E90 59                  <1>     pop rcx
   186 00002E91 5B                  <1>     pop rbx
   187 00002E92 48CF                <1>     iretq
   188                              <1> .charError:
   189 00002E94 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   190 00002E99 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   191                              <1> .ce1:
   192 00002EA0 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   193 00002EA1 88C2                <1>     mov dl, al  ;Move char into dl
   194 00002EA3 B402                <1>     mov ah, 02h
   195 00002EA5 CD41                <1>     int 41h ;Print char
   196 00002EA7 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   197 00002EA9 E91BFFFFFF          <1>     jmp .userInput
   198                              <1> 
   199                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   200 00002EAE 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   200 00002EB7 746563742024202020  <1>
   201 00002EC0 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   201 00002EC9 6E6974202420202020  <1>
   202 00002ED2 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   202 00002EDB 202420202020202020  <1>
   203 00002EE4 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   203 00002EED 6F6D6D616E64202420  <1>
   204 00002EF6 446174612024202020- <1>             db "Data $            "       ;Error 4
   204 00002EFF 202020202020202020  <1>
   205 00002F08 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   205 00002F11 737420242020202020  <1>
   206 00002F1A 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   206 00002F23 202020202020202020  <1>
   207 00002F2C 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   207 00002F35 656469612024202020  <1>
   208 00002F3E 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   208 00002F47 7420466F756E642024  <1>
   209 00002F50 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   209 00002F59 706572202420202020  <1>
   210 00002F62 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   210 00002F6B 6C7420242020202020  <1>
   211 00002F74 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   211 00002F7D 742024202020202020  <1>
   212 00002F86 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   212 00002F8F 61696C757265202420  <1>
   213                              <1> 
   214 00002F98 64726976652024      <1> .drive      db "drive $"
   215 00002F9F 6572726F7220726561- <1> .readmsg    db "error reading $"
   215 00002FA8 64696E672024        <1>
   216 00002FAE 6572726F7220777269- <1> .writemsg   db "error writing $"
   216 00002FB7 74696E672024        <1>
   217 00002FBD 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   218 00002FC0 41626F727424        <1> .abortmsg   db "Abort$" 
   219 00002FC6 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   220 00002FCD 526574727924        <1> .retrymsg   db "Retry$"
   221 00002FD3 4661696C24          <1> .failmsg    db "Fail$"
   222 00002FD8 2C2024              <1> .betweenMsg db ", $"
   223 00002FDB 3F2024              <1> .endMsg     db "? $"
   224 00002FDE 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    38                                  %include "./Source/Drivers/drvData.asm"
    39                              <1> ;-----------------------------------:
    40                              <1> ;          Driver routines          :
    41                              <1> ;-----------------------------------:
    42                              <1> drivers:
    43                              <1> conHdr:
    44 00002FE2 [0430000000000000]  <1>     dq auxHdr
    45 00002FEA 1308                <1>     dw 0813h
    46 00002FEC [8231000000000000]  <1>     dq commonStrat
    47 00002FF4 [9131000000000000]  <1>     dq conDriver
    48 00002FFC 434F4E2020202020    <1>     db "CON     "
    49                              <1> auxHdr:
    50 00003004 [2630000000000000]  <1>     dq prnHdr
    51 0000300C 0080                <1>     dw 08000h
    52 0000300E [8231000000000000]  <1>     dq commonStrat
    53 00003016 [4234000000000000]  <1>     dq com1Intr
    54 0000301E 4155582020202020    <1>     db "AUX     "
    55                              <1> prnHdr:
    56 00003026 [4830000000000000]  <1>     dq clkHdr
    57 0000302E 40A0                <1>     dw 0A040h
    58 00003030 [8A31000000000000]  <1>     dq nulStrat
    59 00003038 [9031000000000000]  <1>     dq nulIntr
    60 00003040 50524E2020202020    <1>     db "PRN     "
    61                              <1> clkHdr:
    62 00003048 [6A30000000000000]  <1>     dq msdHdr
    63 00003050 0880                <1>     dw 08008h
    64 00003052 [8231000000000000]  <1>     dq commonStrat
    65 0000305A [DA32000000000000]  <1>     dq clkDriver
    66 00003062 434C4F434B242020    <1>     db "CLOCK$  "
    67                              <1> msdHdr:
    68 0000306A [8C30000000000000]  <1>     dq com1Hdr
    69 00003072 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    70 00003074 [8231000000000000]  <1>     dq commonStrat
    71 0000307C [E735000000000000]  <1>     dq msdDriver
    72 00003084 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    73                              <1> com1Hdr:
    74 0000308C [AE30000000000000]  <1>     dq com2Hdr
    75 00003094 0080                <1>     dw 08000h
    76 00003096 [8231000000000000]  <1>     dq commonStrat
    77 0000309E [4234000000000000]  <1>     dq com1Intr
    78 000030A6 434F4D3120202020    <1>     db "COM1    "
    79                              <1> com2Hdr:
    80 000030AE [D030000000000000]  <1>     dq com3Hdr
    81 000030B6 0080                <1>     dw 08000h
    82 000030B8 [8231000000000000]  <1>     dq commonStrat
    83 000030C0 [4B34000000000000]  <1>     dq com2Intr
    84 000030C8 434F4D3220202020    <1>     db "COM2    "
    85                              <1> com3Hdr:
    86 000030D0 [F230000000000000]  <1>     dq com4Hdr
    87 000030D8 0080                <1>     dw 08000h
    88 000030DA [8231000000000000]  <1>     dq commonStrat
    89 000030E2 [5434000000000000]  <1>     dq com3Intr
    90 000030EA 434F4D3320202020    <1>     db "COM3    "
    91                              <1> com4Hdr:
    92 000030F2 [1431000000000000]  <1>     dq lpt1Hdr
    93 000030FA 0080                <1>     dw 08000h
    94 000030FC [8231000000000000]  <1>     dq commonStrat
    95 00003104 [5D34000000000000]  <1>     dq com4Intr
    96 0000310C 434F4D3420202020    <1>     db "COM4    "
    97                              <1> lpt1Hdr:
    98 00003114 [3631000000000000]  <1>     dq lpt2Hdr
    99 0000311C 40A0                <1>     dw 0A040h
   100 0000311E [8A31000000000000]  <1>     dq nulStrat
   101 00003126 [9031000000000000]  <1>     dq nulIntr
   102 0000312E 4C50543120202020    <1>     db "LPT1    "
   103                              <1> lpt2Hdr:
   104 00003136 [5831000000000000]  <1>     dq lpt3Hdr
   105 0000313E 40A0                <1>     dw 0A040h
   106 00003140 [8A31000000000000]  <1>     dq nulStrat
   107 00003148 [9031000000000000]  <1>     dq nulIntr
   108 00003150 4C50543220202020    <1>     db "LPT2    "
   109                              <1> lpt3Hdr:
   110 00003158 FFFFFFFFFFFFFFFF    <1>     dq -1
   111 00003160 40A0                <1>     dw 0A040h
   112 00003162 [8A31000000000000]  <1>     dq nulStrat
   113 0000316A [9031000000000000]  <1>     dq nulIntr
   114 00003172 4C50543320202020    <1>     dq "LPT3    "
   115 0000317A 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    39                                  %include "./Source/Drivers/charDrv.asm"
    40                              <1> commonStrat:
    41                              <1> ;DOS calls this function with rbx=Ptr to request header
    42 00003182 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    43 00003189 C3                  <1>     ret
    44                              <1> nulStrat:
    45 0000318A 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    46                              <1> nulIntr:
    47 00003190 C3                  <1>     ret
    48                              <1> conDriver:
    49 00003191 50                  <1>     push rax
    50 00003192 53                  <1>     push rbx
    51 00003193 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    52 0000319A B003                <1>     mov al, 03h ;Unknown Command
    53 0000319C 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    54 000031A0 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    55                              <1> 
    56 000031A2 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    57 000031A5 3C04                <1>     cmp al, 4
    58 000031A7 743D                <1>     jz .conRead
    59 000031A9 3C05                <1>     cmp al, 5
    60 000031AB 747F                <1>     jz .conNondestructiveRead
    61 000031AD 3C06                <1>     cmp al, 6
    62 000031AF 0F84A8000000        <1>     jz .conInputStatus
    63 000031B5 3C07                <1>     cmp al, 7
    64 000031B7 0F84B0000000        <1>     jz .conFlushInputBuffers
    65 000031BD 3C08                <1>     cmp al, 8
    66 000031BF 0F84CA000000        <1>     jz .conWrite
    67 000031C5 3C09                <1>     cmp al, 9
    68 000031C7 0F84C2000000        <1>     jz .conWrite
    69 000031CD 3C0A                <1>     cmp al, 0Ah
    70 000031CF 0F84E3000000        <1>     jz .conOutputStatus
    71 000031D5 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    72                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    73 000031D7 B480                <1>     mov ah, 80h ;Set error bit
    74 000031D9 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    75                              <1> .conExit:
    76 000031DD 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    77 000031E3 5B                  <1>     pop rbx
    78 000031E4 58                  <1>     pop rax
    79 000031E5 C3                  <1>     ret
    80                              <1> .conRead:    ;Function 4
    81 000031E6 B005                <1>     mov al, 05h ;Bad request structure length?
    82 000031E8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    83 000031EB 75EA                <1>     jne .conWriteErrorCode
    84                              <1> 
    85 000031ED 57                  <1>     push rdi
    86 000031EE 51                  <1>     push rcx
    87 000031EF 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    88 000031F3 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    89                              <1> .cre1:
    90 000031F5 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    91 000031F8 741C                <1>     je .cre2
    92 000031FA 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    93 00003201 751A                <1>     jnz .cre3   ;No, get the buffer value
    94 00003203 31C0                <1>     xor eax, eax
    95 00003205 CD36                <1>     int 36h
    96                              <1> .cre11:
    97 00003207 AA                  <1>     stosb
    98 00003208 84C0                <1>     test al, al ;Was the ascii code stored 0?
    99 0000320A 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   100 0000320C 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   101                              <1> .cre12:
   102 00003212 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   103 00003214 EBDF                <1>     jmp short .cre1
   104                              <1> .cre2:
   105 00003216 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   106 00003219 59                  <1>     pop rcx
   107 0000321A 5F                  <1>     pop rdi
   108 0000321B EBC0                <1>     jmp short .conExit
   109                              <1> .cre3:
   110 0000321D 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   111 00003223 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   112 0000322A EBDB                <1>     jmp short .cre11
   113                              <1> 
   114                              <1> .conNondestructiveRead:  ;Function 5
   115 0000322C B005                <1>     mov al, 05h ;Bad request structure length?
   116 0000322E 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   117 00003231 75A4                <1>     jne .conWriteErrorCode
   118 00003233 803D8E00000000      <1>     cmp byte [.conBuf], 0
   119 0000323A 7519                <1>     jnz .cnr2
   120 0000323C B401                <1>     mov ah, 01h     ;Get key if exists
   121 0000323E CD36                <1>     int 36h
   122 00003240 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   123                              <1>     ;Keystroke available
   124                              <1> .cnr0:
   125 00003242 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   126 00003245 E993FFFFFF          <1>     jmp .conExit
   127                              <1> .cnr1: ;No keystroke available
   128 0000324A 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   129 00003250 E988FFFFFF          <1>     jmp .conExit
   130                              <1> .cnr2:
   131 00003255 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   132 0000325B EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   133                              <1> 
   134                              <1> .conInputStatus:         ;Function 6
   135 0000325D B005                <1>     mov al, 05h ;Bad request structure length?
   136 0000325F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   137 00003262 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   138 00003268 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   139                              <1> 
   140                              <1> .conFlushInputBuffers:   ;Function 7
   141 0000326D B005                <1>     mov al, 05h ;Bad request structure length?
   142 0000326F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   143 00003272 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   144 00003278 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   145                              <1> .cfib0:
   146 0000327F B401                <1>     mov ah, 01      ;Get buffer status
   147 00003281 CD36                <1>     int 36h
   148 00003283 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   149 00003289 30E4                <1>     xor ah, ah
   150 0000328B CD36                <1>     int 36h ;Read key to flush from buffer
   151 0000328D EBF0                <1>     jmp short .cfib0
   152                              <1> 
   153                              <1> .conWrite:   ;Function 8 and 9
   154 0000328F B005                <1>     mov al, 05h ;Bad request structure length?
   155 00003291 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   156 00003294 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   157                              <1> 
   158 0000329A 56                  <1>     push rsi
   159 0000329B 51                  <1>     push rcx
   160 0000329C 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   161 000032A0 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   162                              <1> .cw1: 
   163 000032A2 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   164 000032A5 7407                <1>     je .cw2
   165 000032A7 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   166 000032A8 CD49                <1>     int 49h ;Fast print char
   167 000032AA FFC1                <1>     inc ecx
   168 000032AC EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   169                              <1> .cw2:
   170 000032AE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   171 000032B1 59                  <1>     pop rcx
   172 000032B2 5E                  <1>     pop rsi
   173 000032B3 E925FFFFFF          <1>     jmp .conExit
   174                              <1> .conOutputStatus:   ;Function 0Ah
   175 000032B8 B005                <1>     mov al, 05h ;Bad request structure length?
   176 000032BA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   177 000032BD 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   178 000032C3 E915FFFFFF          <1>     jmp .conExit
   179                              <1> 
   180 000032C8 00                  <1> .conBuf db 0    ;Single byte buffer
   181                              <1> fastOutput:         ;This CON driver supports Int 49h
   182                              <1> ;Called with char to transfer in al
   183 000032C9 50                  <1>     push rax
   184 000032CA B40E                <1>     mov ah, 0Eh
   185 000032CC CD30                <1>     int 30h
   186 000032CE 58                  <1>     pop rax
   187 000032CF 48CF                <1>     iretq
   188                              <1> ctrlBreak:
   189                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   190 000032D1 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   191 000032D8 48CF                <1>     iretq
   192                              <1> 
   193                              <1> clkDriver:
   194 000032DA 50                  <1>     push rax
   195 000032DB 53                  <1>     push rbx
   196 000032DC 51                  <1>     push rcx
   197 000032DD 52                  <1>     push rdx
   198 000032DE 56                  <1>     push rsi
   199 000032DF 55                  <1>     push rbp
   200 000032E0 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   201 000032E7 B003                <1>     mov al, 03h ;Unknown Command
   202 000032E9 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   203 000032ED 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   204                              <1> 
   205 000032EF 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   206 000032F2 3C04                <1>     cmp al, 04h
   207 000032F4 7437                <1>     jz .clkRead
   208 000032F6 3C06                <1>     cmp al, 06h
   209 000032F8 0F8494000000        <1>     jz .clkInputStatus
   210 000032FE 3C07                <1>     cmp al, 07h
   211 00003300 0F8498000000        <1>     jz .clkFlushInputBuffers
   212 00003306 3C08                <1>     cmp al, 08h
   213 00003308 0F84A0000000        <1>     jz .clkWrite
   214 0000330E 3C09                <1>     cmp al, 09h
   215 00003310 0F8498000000        <1>     jz .clkWrite
   216 00003316 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   217                              <1> .clkNotFunctioning:
   218 00003318 B002                <1>     mov al, 02h ;Device not ready error
   219                              <1> .clkWriteErrorCode:
   220 0000331A B480                <1>     mov ah, 80h ;Set error bit
   221 0000331C 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   222                              <1> .clkExit:
   223 00003320 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   224 00003326 5D                  <1>     pop rbp
   225 00003327 5E                  <1>     pop rsi
   226 00003328 5A                  <1>     pop rdx
   227 00003329 59                  <1>     pop rcx
   228 0000332A 5B                  <1>     pop rbx
   229 0000332B 58                  <1>     pop rax
   230 0000332C C3                  <1>     ret
   231                              <1> 
   232                              <1> .clkRead:           ;Function 4
   233 0000332D B005                <1>     mov al, 05h ;Bad request structure length?
   234 0000332F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   235 00003332 75E6                <1>     jne .clkWriteErrorCode
   236                              <1> 
   237 00003334 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   238 00003337 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   239 0000333B 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   240 00003342 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   241 00003346 30E4                <1>     xor ah, ah
   242 00003348 CD3A                <1>     int 3Ah         ;Read the system timer
   243 0000334A 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   244 0000334C 740D                <1>     jz .clkr1       ;Nope, now just time 
   245 0000334E 30E4                <1>     xor ah, ah
   246                              <1>     ;This works as al should keep count of the # of days passed since last read
   247 00003350 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   248 00003354 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   249                              <1> .clkr1:
   250 0000335B 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   251 0000335E 0FB7D2              <1>     movzx edx, dx
   252 00003361 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   253 00003363 89D0                <1>     mov eax, edx
   254 00003365 31D2                <1>     xor edx, edx
   255 00003367 89D8                <1>     mov eax, ebx
   256 00003369 B944040000          <1>     mov ecx, 1092   
   257 0000336E F7F1                <1>     div ecx
   258 00003370 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   259 00003373 89D0                <1>     mov eax, edx    ;Get remainder in eax
   260 00003375 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   261 00003379 31D2                <1>     xor edx, edx
   262 0000337B B95B000000          <1>     mov ecx, 91 ;5*18.2
   263 00003380 F7F1                <1>     div ecx
   264 00003382 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   265 00003385 89D0                <1>     mov eax, edx    ;Get remainder in eax
   266                              <1>     ;lea eax, dword [eax + 4*eax]
   267                              <1>     ;add eax, edx    ;Essentially multiply by 6
   268 00003387 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   269 0000338A 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   270 0000338D E98EFFFFFF          <1>     jmp .clkExit
   271                              <1> 
   272                              <1> .clkInputStatus:    ;Function 6
   273                              <1> ;Always return ready
   274 00003392 B005                <1>     mov al, 05h ;Bad request structure length?
   275 00003394 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   276 00003397 7581                <1>     jne .clkWriteErrorCode
   277 00003399 E982FFFFFF          <1>     jmp .clkExit
   278                              <1> .clkFlushInputBuffers:  ;Function 7
   279                              <1> ;Always return done immediately
   280 0000339E B005                <1>     mov al, 05h ;Bad request structure length?
   281 000033A0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   282 000033A3 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   283 000033A9 E972FFFFFF          <1>     jmp .clkExit
   284                              <1> 
   285                              <1> .clkWrite:          ;Functions 8 and 9
   286 000033AE B005                <1>     mov al, 05h ;Bad request structure length?
   287 000033B0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   288 000033B3 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   289                              <1> 
   290 000033B9 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   291 000033BC 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   292 000033C0 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   293 000033C4 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   294                              <1> 
   295 000033CB 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   296 000033CD 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   297 000033D1 B105                <1>     mov cl, 5
   298 000033D3 F6F1                <1>     div cl          ;Divide al by 5
   299 000033D5 30E4                <1>     xor ah, ah      ;Remove the remainder
   300 000033D7 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   301                              <1> ;Using the decimal part of this formula for the low count
   302                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   303 000033D9 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   304 000033DC B912000000          <1>     mov ecx, 18
   305 000033E1 F7E1                <1>     mul ecx  
   306 000033E3 01C3                <1>     add ebx, eax
   307                              <1> 
   308 000033E5 31D2                <1>     xor edx, edx
   309 000033E7 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   310 000033EB B944040000          <1>     mov ecx, 1092
   311 000033F0 F7E1                <1>     mul ecx
   312 000033F2 01C3                <1>     add ebx, eax
   313 000033F4 89DA                <1>     mov edx, ebx    ;edx now has low count
   314 000033F6 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   315 000033FA B401                <1>     mov ah, 01h     ;Set the system time
   316 000033FC CD3A                <1>     int 3Ah
   317                              <1> 
   318 000033FE 4889F3              <1>     mov rbx, rsi
   319 00003401 E91AFFFFFF          <1>     jmp .clkExit
   320                              <1> 
   321                              <1> .clkBCDtoHex:
   322                              <1> ;Converts a BCD value to a Hex byte
   323                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   324 00003406 51                  <1>     push rcx
   325 00003407 0FB6C0              <1>     movzx eax, al   ;Zero extend
   326 0000340A 89C1                <1>     mov ecx, eax    ;Save al in ecx
   327 0000340C 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   328 00003411 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   329 00003417 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   330                              <1> .cbth0:
   331 0000341A 050A000000          <1>     add eax, 10
   332 0000341F E2F9                <1>     loop .cbth0
   333 00003421 59                  <1>     pop rcx
   334 00003422 C3                  <1>     ret
   335                              <1> 
   336                              <1> .clkHexToBCD:
   337                              <1> ;Converts a Hex byte into two BCD digits
   338                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   339 00003423 51                  <1>     push rcx
   340 00003424 0FB6C0              <1>     movzx eax, al   ;Zero extend
   341 00003427 31C9                <1>     xor ecx, ecx
   342                              <1> .chtb0:
   343 00003429 3D0A000000          <1>     cmp eax, 10
   344 0000342E 7209                <1>     jb .chtb1
   345 00003430 2D0A000000          <1>     sub eax, 10
   346 00003435 FFC1                <1>     inc ecx
   347 00003437 EBF0                <1>     jmp short .chtb0
   348                              <1> .chtb1:
   349 00003439 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   350 0000343C 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   351 0000343E 59                  <1>     pop rcx
   352 0000343F C3                  <1>     ret
   353 00003440 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   354                              <1> 
   355                              <1> ;COM Driver headers and main interrupt strat
   356                              <1> com1Intr:
   357 00003442 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   358 00003449 EB19                <1>     jmp short comIntr
   359                              <1> com2Intr:
   360 0000344B C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   361 00003452 EB10                <1>     jmp short comIntr
   362                              <1> com3Intr:
   363 00003454 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   364 0000345B EB07                <1>     jmp short comIntr
   365                              <1> com4Intr:
   366 0000345D C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   367                              <1> comIntr:
   368 00003464 50                  <1>     push rax
   369 00003465 53                  <1>     push rbx
   370 00003466 51                  <1>     push rcx
   371 00003467 52                  <1>     push rdx
   372 00003468 56                  <1>     push rsi
   373 00003469 57                  <1>     push rdi
   374 0000346A 488B1D09FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   375 00003471 B003                <1>     mov al, 03h ;Unknown Command
   376 00003473 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   377 00003477 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   378                              <1> 
   379 00003479 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   380 0000347C 3C04                <1>     cmp al, 4   ;Read Character(s)
   381 0000347E 7462                <1>     jz .comRead
   382 00003480 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   383 00003482 0F849B000000        <1>     jz .comNondestructiveRead   
   384 00003488 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   385 0000348A 0F8484000000        <1>     jz .comReadInputStatus
   386 00003490 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   387 00003492 0F84B9000000        <1>     jz .comFlushInputBuffers
   388 00003498 3C08                <1>     cmp al, 8
   389 0000349A 0F84DB000000        <1>     jz .comWrite
   390 000034A0 3C09                <1>     cmp al, 9
   391 000034A2 0F84D3000000        <1>     jz .comWrite
   392 000034A8 3C0A                <1>     cmp al, 0Ah
   393 000034AA 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   394 000034B0 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   395                              <1> .comErrorNoCount:
   396 000034B2 B002                <1>     mov al, 02h ;Unknown device
   397 000034B4 EB19                <1>     jmp short .comWriteErrorCode
   398                              <1> .comReadError:
   399 000034B6 BA0B000000          <1>     mov edx, 0Bh
   400                              <1> .comWriteError:
   401 000034BB BA0A000000          <1>     mov edx, 0Ah
   402                              <1> .comError:
   403 000034C0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   404 000034C3 B902000000          <1>     mov ecx, 02h    ;Unknown device
   405 000034C8 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   406 000034CA 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   407 000034CD 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   408                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   409 000034CF B480                <1>     mov ah, 80h ;Set error bit
   410 000034D1 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   411                              <1> .comExit:
   412 000034D5 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   413 000034DB 5F                  <1>     pop rdi
   414 000034DC 5E                  <1>     pop rsi
   415 000034DD 5A                  <1>     pop rdx
   416 000034DE 59                  <1>     pop rcx
   417 000034DF 5B                  <1>     pop rbx
   418 000034E0 58                  <1>     pop rax
   419 000034E1 C3                  <1>     ret
   420                              <1> 
   421                              <1> .comRead:
   422 000034E2 B005                <1>     mov al, 05h ;Bad request structure length?
   423 000034E4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   424 000034E7 75E6                <1>     jne .comWriteErrorCode
   425                              <1> 
   426 000034E9 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   427 000034ED 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   428                              <1> .cr1:
   429 000034EF 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   430 000034F2 741B                <1>     je .cre2
   431                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   432 000034F4 B802000000          <1>     mov eax, 02h    ;Recieve 
   433 000034F9 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   434 000034FF 6698                <1>     cbw     ;Zero extend to upper byte
   435 00003501 CD34                <1>     int 34h ;Recieve Char
   436 00003503 72BB                <1>     jc .comError
   437 00003505 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   438 00003508 74EA                <1>     je .cr11
   439 0000350A AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   440 0000350B FFC1                <1>     inc ecx
   441 0000350D EBE0                <1>     jmp short .cr1
   442                              <1> .cre2:
   443 0000350F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   444 00003512 EBC1                <1>     jmp short .comExit
   445                              <1> 
   446                              <1> .comReadInputStatus:
   447 00003514 B005                <1>     mov al, 05h ;Bad request structure length?
   448 00003516 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   449 00003519 75B4                <1>     jne .comWriteErrorCode
   450 0000351B 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   451 00003521 EBB2                <1>     jmp short .comExit
   452                              <1> 
   453                              <1> .comNondestructiveRead:
   454                              <1> ;Acts like a "read one character if there is one" function
   455 00003523 B005                <1>     mov al, 05h ;Bad request structure length?
   456 00003525 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   457 00003528 75A5                <1>     jne .comWriteErrorCode
   458                              <1> .cndr1:
   459 0000352A B802000000          <1>     mov eax, 02h    ;Recieve 
   460 0000352F 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   461 00003535 6698                <1>     cbw     ;Zero extend to upper byte
   462 00003537 CD34                <1>     int 34h ;Recieve Char
   463 00003539 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   464 0000353F 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   465 00003542 7405                <1>     je .cndr2
   466 00003544 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   467 00003547 EB8C                <1>     jmp short .comExit
   468                              <1> .cndr2:
   469 00003549 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   470 0000354F EB84                <1>     jmp short .comExit
   471                              <1> 
   472                              <1> .comFlushInputBuffers:
   473 00003551 B005                <1>     mov al, 05h ;Bad request structure length?
   474 00003553 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   475 00003556 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   476                              <1> .cfib0:
   477 0000355C 8A1584000000        <1>     mov dl, byte [.comDevice]
   478 00003562 6698                <1>     cbw
   479 00003564 B802000000          <1>     mov eax, 02h    ;Recieve
   480 00003569 CD34                <1>     int 34h
   481 0000356B 0F8241FFFFFF        <1>     jc .comErrorNoCount
   482 00003571 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   483 00003574 75E6                <1>     jne .cfib0
   484 00003576 E95AFFFFFF          <1>     jmp .comExit
   485                              <1> 
   486                              <1> .comWrite:
   487 0000357B B005                <1>     mov al, 05h ;Bad request structure length?
   488 0000357D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   489 00003580 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   490                              <1> 
   491 00003586 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   492 0000358A 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   493                              <1> .cw1: 
   494 0000358C 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   495 0000358F 7417                <1>     je .cw2
   496 00003591 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   497 00003592 B401                <1>     mov ah, 01h ;Move function number into ah
   498 00003594 8A154C000000        <1>     mov dl, byte [.comDevice]
   499 0000359A 6698                <1>     cbw     ;Zero extend to upper byte
   500 0000359C CD34                <1>     int 34h ;Transmit char
   501 0000359E 0F821CFFFFFF        <1>     jc .comError
   502 000035A4 FFC1                <1>     inc ecx
   503 000035A6 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   504                              <1> .cw2:
   505 000035A8 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   506 000035AB E925FFFFFF          <1>     jmp .comExit
   507                              <1> 
   508                              <1> .comOutputStatus:
   509                              <1> ;Read MODEM status
   510 000035B0 B005                <1>     mov al, 05h ;Bad request structure length?
   511 000035B2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   512 000035B5 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   513                              <1> 
   514 000035BB 8A1525000000        <1>     mov dl, byte [.comDevice]
   515 000035C1 6698                <1>     cbw     ;Zero extend to upper byte
   516 000035C3 B403                <1>     mov ah, 03h     ;Get status
   517 000035C5 CD34                <1>     int 34h
   518 000035C7 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   519 000035CD 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   520 000035D2 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   521 000035D5 F7D0                <1>     not eax      ;Bitwise inversion
   522 000035D7 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   523 000035DC 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   524 000035E1 E9EFFEFFFF          <1>     jmp .comExit
   525 000035E6 00                  <1> .comDevice   db 0
    40                                  %include "./Source/Drivers/diskDrv.asm"
    41                              <1> msdDriver:
    42 000035E7 50                  <1>     push rax
    43 000035E8 53                  <1>     push rbx
    44 000035E9 51                  <1>     push rcx
    45 000035EA 52                  <1>     push rdx
    46 000035EB 56                  <1>     push rsi
    47 000035EC 57                  <1>     push rdi
    48 000035ED 55                  <1>     push rbp
    49 000035EE 4150                <1>     push r8
    50 000035F0 488B1D83FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    51 000035F7 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    52 000035FB B003                <1>     mov al, drvBadCmd
    53 000035FD 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    54 00003603 B001                <1>     mov al, drvBadUnit 
    55 00003605 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    56 00003609 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    57 0000360F 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    58 00003616 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    59 0000361A C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    60 0000361D 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    61 00003621 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    62 00003625 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    63 00003627 488D0D9A000000      <1>     lea rcx, .msdTable
    64 0000362E 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    65 00003632 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    66 00003634 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    67 00003636 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    68 00003639 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    69                              <1> .msdDriverExit:
    70 0000363B 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    71 00003641 4158                <1>     pop r8
    72 00003643 5D                  <1>     pop rbp
    73 00003644 5F                  <1>     pop rdi
    74 00003645 5E                  <1>     pop rsi
    75 00003646 5A                  <1>     pop rdx
    76 00003647 59                  <1>     pop rcx
    77 00003648 5B                  <1>     pop rbx
    78 00003649 58                  <1>     pop rax
    79 0000364A C3                  <1>     ret
    80                              <1> 
    81                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    82 0000364B 4889FB              <1>     mov rbx, rdi
    83 0000364E 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    84 00003651 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    85 00003653 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    86                              <1> ;Now fall through to general error
    87                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    88 00003656 B401                <1>     mov ah, 01h
    89 00003658 CD33                <1>     int 33h ;Read status of last operation
    90 0000365A 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    91 0000365D B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    92 0000365F 7460                <1>     je .msdWriteErrorCode 
    93 00003661 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    94 00003663 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    95 00003666 7459                <1>     je .msdWriteErrorCode 
    96 00003668 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    97 0000366B 7454                <1>     je .msdWriteErrorCode
    98                              <1> ;Device Not Ready
    99 0000366D B002                <1>     mov al, 02h  ;Device not ready code
   100 0000366F 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   101 00003672 744D                <1>     je .msdWriteErrorCode
   102 00003674 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   103 00003678 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   104                              <1> ;Write Protected
   105 0000367C 30C0                <1>     xor al, al
   106 0000367E 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   107 00003683 743C                <1>     je .msdWriteErrorCode
   108                              <1> ;CRC Error
   109 00003685 B004                <1>     mov al, 04h     ;CRC error code
   110 00003687 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   111 0000368C 7433                <1>     je .msdWriteErrorCode
   112 0000368E 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   113 00003693 742C                <1>     je .msdWriteErrorCode
   114 00003695 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   115 0000369A 7425                <1>     je .msdWriteErrorCode
   116                              <1> ;Seek Error
   117 0000369C B006                <1>     mov al, 06h     ;Seek error code
   118 0000369E 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   119 000036A1 741E                <1>     je .msdWriteErrorCode
   120                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   121                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   122 000036A3 B007                <1>     mov al, 07h
   123 000036A5 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   124 000036A8 7417                <1>     je .msdWriteErrorCode
   125                              <1> ;Sector Not Found
   126 000036AA B008                <1>     mov al, 08h     ;Sector not found code
   127 000036AC 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   128 000036AF 7410                <1>     je .msdWriteErrorCode
   129                              <1> ;Write faults
   130 000036B1 B00A                <1>     mov al, 0Ah     ;Write fault
   131 000036B3 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   132 000036B6 7409                <1>     je .msdWriteErrorCode
   133                              <1> ;Read faults
   134 000036B8 B00B                <1>     mov al, 0Bh     ;Read fault
   135 000036BA 80F911              <1>     cmp cl, 11h     ;Read error
   136 000036BD 7402                <1>     je .msdWriteErrorCode
   137                              <1> ;General Errors
   138 000036BF B00C                <1>     mov al, 0Ch     ;Everything else is general error
   139                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   140 000036C1 B480                <1>     mov ah, 80h ;Set error bit
   141 000036C3 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   142 000036C7 C3                  <1>     ret ;Return to set done bit
   143                              <1> .msdTable:
   144 000036C8 0000                <1>     dw 0                            ;Function 0
   145 000036CA 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   146 000036CC 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   147 000036CE 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   148 000036D0 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   149 000036D2 0000                <1>     dw 0                            ;Function 5
   150 000036D4 0000                <1>     dw 0                            ;Function 6
   151 000036D6 0000                <1>     dw 0                            ;Function 7
   152 000036D8 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   153 000036DA 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   154 000036DC 0000                <1>     dw 0                            ;Function 10
   155 000036DE 0000                <1>     dw 0                            ;Function 11
   156 000036E0 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   157 000036E2 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   158 000036E4 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   159 000036E6 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   160 000036E8 0000                <1>     dw 0                            ;Function 16
   161 000036EA 0000                <1>     dw 0                            ;Function 17
   162 000036EC 0000                <1>     dw 0                            ;Function 18
   163 000036EE 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   164 000036F0 0000                <1>     dw 0                            ;Function 20
   165 000036F2 0000                <1>     dw 0                            ;Function 21
   166 000036F4 0000                <1>     dw 0                            ;Function 22
   167 000036F6 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   168 000036F8 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   169                              <1> 
   170                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   171                              <1> .msdMedChk:          ;Function 1
   172 000036FA B005                <1>     mov al, 05h ;Bad request structure length
   173 000036FC 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   174 000036FF 75C0                <1>     jne .msdWriteErrorCode
   175                              <1> 
   176 00003701 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   177 00003706 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   178 0000370D 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   179 00003710 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   180 00003713 753F                <1>     jnz .mmcNoChange
   181                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   182 00003715 B416                <1>     mov ah, 16h 
   183 00003717 CD33                <1>     int 33h
   184 00003719 0F8237FFFFFF        <1>     jc .msdGenDiskError
   185 0000371F 80FC80              <1>     cmp ah, 80h
   186 00003722 740E                <1>     je .mmcNoChangeLine
   187 00003724 80FC86              <1>     cmp ah, 86h
   188 00003727 7409                <1>     je .mmcNoChangeLine
   189 00003729 84E4                <1>     test ah, ah ;No change?
   190 0000372B 7427                <1>     jz .mmcNoChange
   191 0000372D F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   192 00003730 750D                <1>     jnz .mmcChange
   193                              <1> ;If nothing, fall through and test manually, should never happen though
   194                              <1> .mmcNoChangeLine:
   195                              <1> ;Now we test Media Descriptor
   196 00003732 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   197 00003737 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   198 0000373A 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   199 0000373D 7410                <1>     je .mmcUnsure
   200                              <1> .mmcChange:
   201 0000373F C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   202 00003743 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   203 0000374A 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   204                              <1>     ;Check here if there were any open handles on the device when it was changed
   205 0000374E C3                  <1>     ret
   206                              <1> .mmcUnsure:
   207 0000374F C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   208 00003753 C3                  <1>     ret
   209                              <1> .mmcNoChange:
   210 00003754 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   211 00003758 C3                  <1>     ret
   212                              <1> 
   213                              <1> 
   214                              <1> .msdBuildBPB:        ;Function 2
   215 00003759 B005                <1>     mov al, 05h ;Bad request structure length
   216 0000375B 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   217 0000375E 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   218                              <1> 
   219 00003764 4889DE              <1>     mov rsi, rbx
   220 00003767 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   221 0000376C 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   222 00003773 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   223 00003776 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   224 0000377A 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   225 0000377C 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   226 0000377F B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   227 00003784 CD33                <1>     int 33h
   228 00003786 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   229                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   230 0000378C 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   231 00003790 7418                <1>     je .mbbpb0
   232 00003792 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   233 00003796 7412                <1>     je .mbbpb0
   234 00003798 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   235 0000379C 740C                <1>     je .mbbpb0
   236 0000379E 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   237 000037A2 B007                <1>     mov al, 07h ;Unknown media error code
   238 000037A4 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   239                              <1> .mbbpb0:
   240 000037AA 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   241 000037AD 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   242 000037B2 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   243 000037B9 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   244 000037BD 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   245 000037C0 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   246 000037C4 B90F000000          <1>     mov ecx, bpbEx_size/8
   247 000037C9 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   248 000037CC C3                  <1>     ret
   249                              <1> .msdIOCTLRead:       ;Function 3, returns done
   250 000037CD B005                <1>     mov al, drvBadDrvReq
   251 000037CF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   252 000037D2 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   253 000037D8 C3                  <1>     ret
   254                              <1> .msdRead:            ;Function 4
   255                              <1> ;Will read one sector at a time.
   256 000037D9 B005                <1>     mov al, 05h ;Bad request structure length
   257 000037DB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   258 000037DE 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   259                              <1> 
   260 000037E4 4889DF              <1>     mov rdi, rbx
   261 000037E7 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   262                              <1> .msdr0:
   263 000037E9 B682                <1>     mov dh, 82h ;LBA Read Sectors
   264 000037EB E841010000          <1>     call .msdBlkIOCommon
   265 000037F0 0F8255FEFFFF        <1>     jc .msdIOError
   266 000037F6 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   267 000037FE 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   268 00003806 FFC6                <1>     inc esi
   269 00003808 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   270 0000380B 75DC                <1>     jne .msdr0
   271 0000380D 4889FB              <1>     mov rbx, rdi
   272 00003810 C3                  <1>     ret
   273                              <1> .msdWrite:           ;Function 8
   274                              <1> ;Will write one sector at a time.
   275 00003811 B005                <1>     mov al, 05h ;Bad request structure length
   276 00003813 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   277 00003816 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   278                              <1> 
   279 0000381C 4889DF              <1>     mov rdi, rbx
   280 0000381F 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   281                              <1> .msdw0:
   282 00003821 B683                <1>     mov dh, 83h ;LBA Write Sectors
   283 00003823 E809010000          <1>     call .msdBlkIOCommon
   284 00003828 0F821DFEFFFF        <1>     jc .msdIOError
   285 0000382E 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   286 00003836 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   287 0000383E FFC6                <1>     inc esi
   288 00003840 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   289 00003843 75DC                <1>     jne .msdw0
   290 00003845 4889FB              <1>     mov rbx, rdi
   291 00003848 C3                  <1>     ret
   292                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   293                              <1> ;Will write one sector at a time and then verify it.
   294 00003849 B005                <1>     mov al, 05h ;Bad request structure length
   295 0000384B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   296 0000384E 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   297                              <1> 
   298 00003854 4889DF              <1>     mov rdi, rbx
   299 00003857 31F6                <1>     xor esi, esi  ;Set counter to zero
   300                              <1> .msdwv0:
   301 00003859 B683                <1>     mov dh, 83h ;LBA Write Sectors
   302 0000385B E8D1000000          <1>     call .msdBlkIOCommon
   303 00003860 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   304 00003866 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   305 00003868 E8C4000000          <1>     call .msdBlkIOCommon
   306 0000386D 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   307 00003873 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   308 0000387B 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   309 00003883 FFC6                <1>     inc esi
   310 00003885 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   311 00003888 75CF                <1>     jne .msdwv0
   312 0000388A 4889FB              <1>     mov rbx, rdi
   313 0000388D C3                  <1>     ret
   314                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   315 0000388E B005                <1>     mov al, drvBadDrvReq
   316 00003890 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   317 00003893 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   318                              <1> 
   319 00003899 C3                  <1>     ret
   320                              <1> .msdDevOpen:         ;Function 13
   321 0000389A B005                <1>     mov al, drvBadDrvReq
   322 0000389C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   323 0000389F 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   324                              <1> 
   325 000038A5 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   326 000038AA 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   327 000038B1 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   328 000038B4 C3                  <1>     ret
   329                              <1> .msdDevClose:        ;Function 14
   330 000038B5 B005                <1>     mov al, drvBadDrvReq
   331 000038B7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   332 000038BA 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   333                              <1> 
   334 000038C0 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   335 000038C5 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   336 000038CC FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   337 000038CF C3                  <1>     ret
   338                              <1> .msdRemovableMedia:  ;Function 15
   339 000038D0 B005                <1>     mov al, drvBadDrvReq
   340 000038D2 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   341 000038D5 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   342                              <1> 
   343 000038DB 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   344 000038E0 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   345 000038E7 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   346 000038EA B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   347 000038EF 31D2                <1>     xor edx, edx    ;Busy bit clear
   348 000038F1 A880                <1>     test al, 80h
   349 000038F3 0F44CA              <1>     cmovz ecx, edx
   350 000038F6 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   351 000038FA C3                  <1>     ret
   352                              <1> .msdGenericIOCTL:    ;Function 19
   353 000038FB B005                <1>     mov al, drvBadDrvReq
   354 000038FD 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   355 00003900 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   356                              <1> 
   357 00003906 C3                  <1>     ret
   358                              <1> .msdGetLogicalDev:   ;Function 23
   359 00003907 B005                <1>     mov al, drvBadDrvReq
   360 00003909 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   361 0000390C 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   362                              <1> 
   363 00003912 8A0541000000        <1>     mov al, byte [.msdCurDev]
   364 00003918 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   365 0000391B C3                  <1>     ret
   366                              <1> .msdSetLogicalDev:   ;Function 24
   367 0000391C B005                <1>     mov al, drvBadDrvReq
   368 0000391E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   369 00003921 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   370                              <1> 
   371 00003927 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   372 0000392A 880529000000        <1>     mov byte [.msdCurDev], al
   373 00003930 C3                  <1>     ret
   374                              <1> 
   375                              <1> .msdBlkIOCommon:  ;Does block IO
   376                              <1> ;Called with rdi containing old rbx value and ah with function number
   377                              <1> ;rbp points to bpb
   378                              <1> ;Error handled by caller
   379                              <1> ;Sector count handled by caller
   380                              <1> ;Called with dh = BIOS function number
   381 00003931 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   382 00003936 8A90[5A390000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   383 0000393C 31C9                <1>     xor ecx, ecx
   384 0000393E 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   385 00003941 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   386 00003945 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   387 00003949 88F4                <1>     mov ah, dh
   388 0000394B B001                <1>     mov al, 01h ;Do one sector at a time 
   389 0000394D CD33                <1>     int 33h
   390 0000394F C3                  <1>     ret
   391                              <1> 
   392 00003950 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   393                              <1> ;LASTDRIVE default is 5
   394                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   395                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   396 00003959 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   397                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   398 0000395A FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   399 0000395F 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   400 00003964 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   400 0000396D 000000000000000000- <1>
   400 00003976 000000000000000000- <1>
   400 0000397F 000000000000000000- <1>
   400 00003988 00000000            <1>
   401 0000398C 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   401 00003995 000000000000000000- <1>
   401 0000399E 000000000000000000- <1>
   401 000039A7 000000000000000000- <1>
   401 000039B0 000000000000000000- <1>
   401 000039B9 000000000000000000- <1>
   401 000039C2 000000000000000000- <1>
   401 000039CB 000000000000000000- <1>
   401 000039D4 000000000000000000- <1>
   401 000039DD 000000000000000000- <1>
   401 000039E6 000000000000000000- <1>
   401 000039EF 000000000000000000- <1>
   401 000039F8 000000000000000000- <1>
   401 00003A01 000000000000000000- <1>
   401 00003A0A 000000000000000000- <1>
   401 00003A13 000000000000000000- <1>
   401 00003A1C 000000000000000000- <1>
   401 00003A25 000000000000000000- <1>
   401 00003A2E 000000000000000000- <1>
   401 00003A37 000000000000000000- <1>
   401 00003A40 000000000000000000- <1>
   401 00003A49 000000000000000000- <1>
   401 00003A52 000000000000000000- <1>
   401 00003A5B 000000000000000000- <1>
   401 00003A64 000000000000000000- <1>
   401 00003A6D 000000000000000000- <1>
   401 00003A76 000000000000000000- <1>
   401 00003A7F 000000000000000000- <1>
   401 00003A88 000000000000000000- <1>
   401 00003A91 000000000000000000- <1>
   401 00003A9A 000000000000000000- <1>
   401 00003AA3 000000000000000000- <1>
   401 00003AAC 000000000000000000- <1>
   401 00003AB5 000000000000000000- <1>
   401 00003ABE 000000000000000000- <1>
   401 00003AC7 000000000000000000- <1>
   401 00003AD0 000000000000000000- <1>
   401 00003AD9 000000000000000000- <1>
   401 00003AE2 000000000000000000- <1>
   401 00003AEB 000000000000000000- <1>
   401 00003AF4 000000000000000000- <1>
   401 00003AFD 000000000000000000- <1>
   401 00003B06 000000000000000000- <1>
   401 00003B0F 000000000000000000- <1>
   401 00003B18 000000000000000000- <1>
   401 00003B21 000000000000000000- <1>
   401 00003B2A 000000000000000000- <1>
   401 00003B33 000000000000000000- <1>
   401 00003B3C 000000000000000000- <1>
   401 00003B45 000000000000000000- <1>
   401 00003B4E 000000000000000000- <1>
   401 00003B57 000000000000000000- <1>
   401 00003B60 000000000000000000- <1>
   401 00003B69 000000000000000000- <1>
   401 00003B72 000000000000000000- <1>
   401 00003B7B 000000000000000000- <1>
   401 00003B84 000000000000000000- <1>
   401 00003B8D 000000000000000000- <1>
   401 00003B96 000000000000000000- <1>
   401 00003B9F 000000000000000000- <1>
   401 00003BA8 000000000000000000- <1>
   401 00003BB1 000000000000000000- <1>
   401 00003BBA 000000000000000000- <1>
   401 00003BC3 000000000000000000- <1>
   401 00003BCC 000000000000000000- <1>
   401 00003BD5 000000000000000000- <1>
   401 00003BDE 000000000000        <1>
   402                              <1> 
   403                              <1> endptr equ $
    41                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    42                                  ;Paragraph alignment
    43                                  %include "./Source/BSS/dosDynaDataArea.asm"
    44                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    45                              <1> ; the MCB chain!
    46                              <1> ddaStart:
    47 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    48                              <1> 
    49                              <1> ;Create DPB chain of first 5 available DPB slots
    50                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    51 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    52 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    53                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    54                              <1> ;Always jettison this space
    55 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    56 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    57 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    58                              <1> 
    59 00000119 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    60 00000139 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    61                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    62                              <1> dynamicDataAreaLength equ $ - ddaStart
    62          ------------------  <1>  info: assembly required 1+6+2 passes

