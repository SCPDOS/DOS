     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> ;Command Code equates
    23                              <1>     drvINIT         equ 0
    24                              <1>     drvMEDCHK       equ 1
    25                              <1>     drvBUILDBPB     equ 2
    26                              <1>     drvIOCTLREAD    equ 3
    27                              <1>     drvREAD         equ 4
    28                              <1>     drvNONDESTREAD  equ 5
    29                              <1>     drvINSTATUS     equ 6
    30                              <1>     drvFLUSHINBUF   equ 7
    31                              <1>     drvWRITE        equ 8
    32                              <1>     drvWRITEVERIFY  equ 9
    33                              <1>     drvOUTSTATUS    equ 10
    34                              <1>     drvFLUSHOUTBUF  equ 11
    35                              <1>     drvIOCTLWRITE   equ 12
    36                              <1>     drvOPEN         equ 13
    37                              <1>     drvCLOSE        equ 14
    38                              <1>     drvREMMEDCHECK  equ 15
    39                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    40                              <1>     drvIOCTL        equ 19
    41                              <1>     drvGETDRVMAP    equ 23
    42                              <1>     drvSETDRVMAP    equ 24
    43                              <1>     
    44                              <1> ;Driver Error equates 
    45                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    46                              <1>     drvBadUnit      equ 1   ;Unknown unit
    47                              <1>     drvNotReady     equ 2   ;Device not ready
    48                              <1>     drvBadCmd       equ 3   ;Unknown command
    49                              <1>     drvCRCErr       equ 4   ;CRC Error
    50                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    51                              <1>     drvBadSeek      equ 6   ;Seek error
    52                              <1>     drvBadMed       equ 7   ;Unknown media
    53                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    54                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    55                              <1>     drvWriteFault   equ 10  ;Write Fault
    56                              <1>     drvReadFault    equ 11  ;Read Fault
    57                              <1>     drvGenFault     equ 12  ;General Fault
    58                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    59                              <1> 
    60                              <1> ;Driver status word status bit meanings
    61                              <1>     drvErrStatus    equ 8000h  
    62                              <1>     drvDonStatus    equ 0100h
    63                              <1>     drvBsyStatus    equ 0200h
    64                              <1> ;Driver structures
    65                              <1> 
    66                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    67                              <1> 
    68                              <1>     .hdrlen resb 1  ;Length of the request header
    69                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    70                              <1>     .cmdcde resb 1  ;Command code
    71                              <1>     .status resw 1  ;Status word
    72                              <1>     .devptr resq 1  ;Device queue pointer field
    73                              <1> 
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> struc drvReqHdr
    77                              <1>     drvReqHdrM
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
    78                              <1> endstruc
    79                              <1> 
    80                              <1> struc initReqPkt  ;Init Request Packet
    81                              <1> 
    82                              <1>     drvReqHdrM   ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
    83 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    84 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    85 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    86 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    87                              <1> 
    88                              <1> endstruc
    89                              <1> 
    90                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    91                              <1> 
    92                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
    93 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    94 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    95 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    96                              <1> 
    97                              <1> endstruc
    98                              <1> 
    99                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   100                              <1> 
   101                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   102 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   103 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   104 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   105                              <1> 
   106                              <1> endstruc
   107                              <1> 
   108                              <1> struc ioReqPkt   ;IO Request Packet
   109                              <1> 
   110                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   111 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   112 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   113 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   114 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   115 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   116                              <1> 
   117                              <1> endstruc
   118                              <1> 
   119                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   120                              <1>     
   121                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   122 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc statusReqPkt   ;Status Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   129                              <1> 
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   135                              <1>      
   136                              <1> endstruc
   137                              <1> 
   138                              <1> struc openReqPkt ;Open Device Request Packet
   139                              <1> 
   140                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   141                              <1>      
   142                              <1> endstruc
   143                              <1> 
   144                              <1> struc closeReqPkt ;Close Device Request Packet
   145                              <1> 
   146                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   147                              <1>      
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   153                              <1>      
   154                              <1> endstruc
   155                              <1> 
   156                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   157                              <1> 
   158                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   159 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   160 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   161 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   162 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   163 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   164                              <1> 
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   168                              <1>     
   169                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   170                              <1> 
   171                              <1> endstruc
   172                              <1> 
   173                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   174                              <1>     
   175                              <1>     drvReqHdrM    ;Common Driver Header Macro
    67                              <2> 
    68 00000000 ??                  <2>  .hdrlen resb 1
    69 00000001 ??                  <2>  .unitnm resb 1
    70 00000002 ??                  <2>  .cmdcde resb 1
    71 00000003 ????                <2>  .status resw 1
    72 00000005 ????????????????    <2>  .devptr resq 1
    73                              <2> 
   176                              <1> 
   177                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    27 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    77                              <1> cdsPhysDrive    equ 4000h   ;CDS initialised 
    78                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    79                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    80                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   144 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   145 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   146 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   147 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   148 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   149 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   150 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   151                              <1> ;                           0 means no record
   152                              <1> endstruc
   153                              <1> ;Open Mode equates
   154                              <1> ;Access modes   Bits[2:0]
   155                              <1> ReadAccess      equ 0h
   156                              <1> WriteAccess     equ 1h
   157                              <1> RWAccess        equ 2h
   158                              <1> ;Bit 3 reserved 0
   159                              <1> ;Sharing modes  Bits[6:4]
   160                              <1> CompatShare     equ 0h
   161                              <1> denyRWShare     equ 10h
   162                              <1> denyWriteShare  equ 20h
   163                              <1> denyReadShare   equ 30h
   164                              <1> denyNoneShare   equ 40h
   165                              <1> ;Bit 7 reserved 0
   166                              <1> ;Bits 8-12 reserved 0
   167                              <1> ;Critical Error handling
   168                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   169                              <1> ;Buffering on writes
   170                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   171                              <1> ;FCB opened file?
   172                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   173                              <1> ;Attribute Byte
   174                              <1> readOnlyFile    equ 1h
   175                              <1> hiddenFile      equ 2h
   176                              <1> systemFile      equ 4h
   177                              <1> volumeLabel     equ 8h
   178                              <1> directoryFile   equ 10h ;Directory entry
   179                              <1> archiveFile     equ 20h
   180                              <1> ;Device Info equates
   181                              <1> ;For a block device, bits [5:0] contain the drive number
   182                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   183                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   184                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   185                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   186                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   187                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   188                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   189                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   190                              <1> devCharDev      equ 80h ;If set, it is a char device!
   191                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   192                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   193                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   194                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   195                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   212 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   213 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   214 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   215 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   216 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   217 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   218 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   219                              <1>     .dataarea:             ;Points to the start of the data area
   220                              <1> endstruc
   221                              <1> ;Buffer Flag equates
   222                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   223                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   224                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   225                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   226                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   227                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   228                              <1> ;Note! A buffer is marked as referenced IF it has been accessed via 
   229                              <1> ; a Read or Write call. 
   230                              <1> ; When a buffer is used temporarily for internal purposes (as when DOS
   231                              <1> ; gives a driver a buffer) and then DOS reads data from that buffer (such as
   232                              <1> ; a BUILD BPB situation), the data is left as unreferenced as the use for that 
   233                              <1> ; buffer goes away before the end of the DOS call, and there is no danger of.
   234                              <1> ; of misbehaviour.
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc fcb
   282                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   283 00000000 ??                  <1>     .driveNum   resb 1
   284 00000001 ????????????????    <1>     .filename   resb 8
   285 00000009 ??????              <1>     .fileext    resb 3
   286 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   287                              <1> ;One block consists of 128 records, of size denoted in the below
   288 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   289 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   290 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   291 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   292 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   293 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   294 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   295 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   296 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   297                              <1>     ;If record size > 64, high byte is ignored.
   298                              <1>     ;Used for random read and write operations to find the right record
   299                              <1> endstruc
   300                              <1> 
   301                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   302 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   303 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   304 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   305 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   306 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   307 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   308 00000016 ????                <1>     .fileTime   resw 1  ;File time
   309 00000018 ????                <1>     .fileDate   resw 1  ;File date
   310 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   311 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   312                              <1> endstruc
   313                              <1> 
   314                              <1> struc psp
   315 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   316 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   317 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   318 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   319 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   320 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   321 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   322 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   323 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   324 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   325 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   326 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   327 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   328                              <1> ;Extra handle arrays are grouped into a linked list
   329                              <1> ;The below are in the same place as in DOS
   330 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   331 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   332                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   333 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   334 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc clkStruc
   338 00000000 ????                <1>     .dateWord   resw 1
   339 00000002 ??                  <1>     .minutes    resb 1
   340 00000003 ??                  <1>     .hours      resb 1
   341 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   342 00000005 ??                  <1>     .seconds    resb 1
   343                              <1> endstruc
   344                              <1> 
   345                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   346                              <1> ;for a space of 64Gb
   347                              <1> dosAPTsize  equ 60*4096
   348                              <1> 
   349                              <1> ;Critical Error AH bitfield equates
   350                              <1> critRead    equ 0h
   351                              <1> critWrite   equ 1h
   352                              <1> critDOS     equ 0h
   353                              <1> critFAT     equ 2h
   354                              <1> critDir     equ 4h
   355                              <1> critData    equ 6h
   356                              <1> critFailOK  equ 8h
   357                              <1> critRetryOK equ 10h
   358                              <1> critIgnorOK equ 20h
   359                              <1> critCharDev equ 80h
   360                              <1> 
   361                              <1> critIgnore  equ 0
   362                              <1> critRetry   equ 1
   363                              <1> critAbort   equ 2
   364                              <1> critFail    equ 3
   365                              <1> 
   366                              <1> ;MISC ASCII control chars
   367                              <1> NUL         equ 00h
   368                              <1> BEL         equ 07h
   369                              <1> BSP         equ 08h
   370                              <1> TAB         equ 09h
   371                              <1> LF          equ 0Ah
   372                              <1> CR          equ 0Dh
   373                              <1> EOF         equ 1Ah
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG false
    16                              <1> %define DPBINFO false
    17                              <1> %define REGS true
    18                              <1> %define ENDSTATUS true
    19                              <1> %define ALLOCTEST true
    20                              <1> 
    21                              <1> 
    22                              <1> ;Use this space as the debug stack
    23                              <1> %define debStackTop 80000h
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;Number 32-33 reserved
    47                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    48                              <1> errNoFCB    equ 35  ;FCB unavailable
    49                              <1> ;Numbers 36-82 reserved
    50                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    51                              <1> errFI44     equ 83  ;Fail on INT 44h
    52                              <1> ;Numbers 84-88 reserved
    53                              <1> ;-----------------------------------------------------------------------------
    54                              <1> ;Error Loci
    55                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    56                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    57                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    58                              <1> eLocChr     equ 4   ;Serial/Character Device error
    59                              <1> eLocMem     equ 5   ;Related to RAM
    60                              <1> ;-----------------------------------------------------------------------------
    61                              <1> ;Error Actions
    62                              <1> eActRet     equ 1   ;Retry
    63                              <1> eActDRet    equ 2   ;Delay then retry
    64                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    65                              <1> eActAbt     equ 4   ;Abort with cleanup
    66                              <1> eActKil     equ 5   ;Abort without cleanup
    67                              <1> eActIgn     equ 6   ;Ignore error
    68                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    69                              <1> ;-----------------------------------------------------------------------------
    70                              <1> ;Error classes
    71                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    72                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    73                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    74                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    75                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    76                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    77                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    78                              <1> eClsNotFnd  equ 8   ;Resource not found
    79                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    80                              <1> eClsLocked  equ 10  ;Resource Locked
    81                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    82                              <1> eClsClash   equ 12  ;Resource already exists!
    83                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  Segment .text align=1   ;Init code
    11                                  %include "./Source/Sysinit/sysInit.asm"
    12                              <1> ; We arrive here with the following values in the registers.
    13                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    14                              <1> ; dx  = Int 33h boot device number
    15                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    16                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    17 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    18 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    18 0000000B 909090909090909090- <1>
    18 00000014 909090909090909090- <1>
    18 0000001D 909090909090909090- <1>
    18 00000026 909090909090909090- <1>
    18 0000002F 909090909090909090- <1>
    18 00000038 909090909090909090- <1>
    18 00000041 909090909090909090- <1>
    18 0000004A 909090909090909090- <1>
    18 00000053 909090909090909090- <1>
    18 0000005C 909090909090909090- <1>
    18 00000065 909090909090909090- <1>
    18 0000006E 909090909090909090- <1>
    18 00000077 909090909090909090- <1>
    18 00000080 909090909090909090- <1>
    18 00000089 909090909090909090- <1>
    18 00000092 909090909090909090- <1>
    18 0000009B 909090909090909090- <1>
    18 000000A4 909090909090909090- <1>
    18 000000AD 909090909090909090- <1>
    18 000000B6 909090909090909090- <1>
    18 000000BF 909090909090909090- <1>
    18 000000C8 909090909090909090- <1>
    18 000000D1 909090909090909090- <1>
    18 000000DA 909090909090909090- <1>
    18 000000E3 909090909090909090- <1>
    18 000000EC 909090909090909090- <1>
    18 000000F5 909090909090909090- <1>
    18 000000FE 9090                <1>
    19                              <1> ;First move the alignment of the DOSSEG to 4Kb
    20 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    21 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    22 00000106 0F32                <1>     rdmsr
    23 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    25 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    26 00000110 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    27 00000113 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    28 0000011A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    29 00000121 89F8                <1>     mov eax, edi
    30 00000123 4889FA              <1>     mov rdx, rdi
    31 00000126 48C1EA20            <1>     shr rdx, 20h
    32 0000012A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    33 0000012C 5A                  <1>     pop rdx
    34                              <1> ;------------------------------------------------;
    35                              <1> ;              Connect Debugger                  ;
    36                              <1> ;------------------------------------------------;
    37                              <1> %if DEBUG
    38                              <1> ;Only connect if in debug mode
    39                              <1>     mov eax, 0C501h ;Connect debugger
    40                              <1>     int 35h
    41                              <1> %endif
    42                              <1> ;------------------------------------------------;
    43                              <1> ;           Sanitise the data area               ;
    44                              <1> ;------------------------------------------------;
    45 0000012D B9[8FD50300]        <1>     mov ecx, dSegLen
    46 00000132 30C0                <1>     xor al, al
    47 00000134 57                  <1>     push rdi    ;Temp save rdi on the stack
    48 00000135 F3AA                <1>     rep stosb
    49 00000137 5F                  <1>     pop rdi
    50                              <1> ;------------------------------------------------;
    51                              <1> ;          Start saving Basic DOS data           ;
    52                              <1> ;------------------------------------------------;
    53 00000138 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    54 00000140 64C60425[E5C00300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
    54 00000148 2F                  <1>
    55                              <1> ;Copy DOS to its final resting place
    56 00000149 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    56 0000014E [00C00300]          <1>
    57 00000152 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    57 00000157 [08C00300]          <1>
    58 0000015B 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    59 0000015E 4881C7[8FD50300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    60 00000165 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    61 0000016C B900100000          <1>     mov ecx, 1000h
    62 00000171 F348A5              <1>     rep movsq
    63                              <1> 
    64 00000174 CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    65 00000176 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    66 0000017A 664489C0            <1>     mov ax, r8w
    67 0000017E 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    68 00000186 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    69 0000018E 64C60425[BCC00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    69 00000196 05                  <1>
    70 00000197 64C60425[BBC00300]- <1>     mov byte fs:[numPhysVol], 0     ;Number of logical drives
    70 0000019F 00                  <1>
    71 000001A0 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    71 000001A5 [E1C00300]0500      <1>
    72 000001AB 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    72 000001B0 [E3C00300]1400      <1>
    73 000001B6 64C60425[BDC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    73 000001BE 01                  <1>
    74                              <1>     ;If no detected Int 33h devices, halt 
    75 000001BF 49C1E810            <1>     shr r8, 2*8
    76 000001C3 4584C0              <1>     test r8b, r8b
    77 000001C6 0F84DC0A0000        <1>     jz errorInit
    78                              <1> ;------------------------------------------------;
    79                              <1> ;          Add additional page tables            ;
    80                              <1> ;------------------------------------------------;
    81                              <1> ;This will allow for up to 64Gb of addressible space
    82 000001CC 4889EF              <1>     mov rdi, rbp
    83                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    84 000001CF B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    85 000001D4 57                  <1>     push rdi
    86 000001D5 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    86 000001DE 00                  <1>
    87                              <1> pdtLoop:
    88 000001DF 48AB                <1>     stosq
    89 000001E1 480500002000        <1>     add rax, 200000h
    90 000001E7 FFC9                <1>     dec ecx
    91 000001E9 75F4                <1>     jnz pdtLoop
    92 000001EB 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    93                              <1> ;Now we add every 4kb page to the page directory pointer table
    94                              <1> ;15 4kb pages to consider
    95 000001EC 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    96 000001EF 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    97 000001F2 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    98 000001F9 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    99 00000200 B93C000000          <1>     mov ecx, 60
   100 00000205 480D03000000        <1>     or rax, 3h      ;present and r/w
   101                              <1> pdptLoop:
   102 0000020B 48AB                <1>     stosq
   103 0000020D 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   104 00000213 FFC9                <1>     dec ecx
   105 00000215 75F4                <1>     jnz pdptLoop
   106 00000217 0F20DF              <1>     mov rdi, cr3
   107 0000021A 0F22DF              <1>     mov cr3, rdi
   108                              <1> 
   109                              <1> ;------------------------------------------------;
   110                              <1> ;                   MCB inits                    ;
   111                              <1> ;------------------------------------------------;
   112                              <1> mcbInit:
   113 0000021D B820E80000          <1>     mov eax, 0E820h
   114 00000222 CD35                <1>     int 35h
   115                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   116 00000224 E808010000          <1>     call .mcbFindAddress
   117 00000229 7349                <1>     jnc .mcbi1  ;If found, proceed
   118                              <1>     ;Here, we try use E801h
   119 0000022B B801E80000          <1>     mov eax, 0E801h
   120 00000230 CD35                <1>     int 35h
   121 00000232 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   122 00000235 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   123 00000238 85C0                <1>     test eax, eax
   124 0000023A 741B                <1>     jz .worst
   125 0000023C C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   126 0000023F C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   127 00000242 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   128 0000024A 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   129 00000252 E927010000          <1>     jmp mcbBuild
   130                              <1> .worst:
   131                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   132 00000257 B800002000          <1>     mov eax, 200000h
   133 0000025C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   133 00000261 [08C00300]          <1>
   134 00000265 29D8                <1>     sub eax, ebx
   135 00000267 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   136 0000026F E90A010000          <1>     jmp mcbBuild 
   137                              <1> .mcbi1:
   138 00000274 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   139 00000277 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   139 00000280 00                  <1>
   140 00000281 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   141 00000285 0F85C6000000        <1>     jne .mcbFail
   142 0000028B 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   143                              <1>     ;PCI hole always exists so this value will always be a dword
   144 0000028F 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   145 00000297 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   146 0000029A 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   147 0000029D 4881FB00000001      <1>     cmp rbx, 1000000h  
   148 000002A4 773C                <1>     ja .skipISA
   149                              <1> ;Here we deal with ISA hole issues
   150 000002A6 B820E80000          <1>     mov eax, 0E820h
   151 000002AB CD35                <1>     int 35h
   152 000002AD 48B800000001000000- <1>     mov rax, 1000000h
   152 000002B6 00                  <1>
   153 000002B7 E875000000          <1>     call .mcbFindAddress
   154 000002BC 0F82BC000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   155 000002C2 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   155 000002CB 00                  <1>
   156 000002CC 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   157 000002D0 0F85A8000000        <1>     jne mcbBuild  
   158 000002D6 488B5808            <1>     mov rbx, qword [rax + 8]
   159 000002DA 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   160                              <1> .skipISA:
   161 000002E2 B820E80000          <1>     mov eax, 0E820h
   162 000002E7 CD35                <1>     int 35h
   163 000002E9 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   163 000002F2 00                  <1>
   164 000002F3 E839000000          <1>     call .mcbFindAddress
   165 000002F8 0F8280000000        <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   166 000002FE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   166 00000307 00                  <1>
   167 00000308 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   168 0000030C 7570                <1>     jne mcbBuild   
   169 0000030E 488B5808            <1>     mov rbx, qword [rax + 8]
   170                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   171 00000312 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   171 0000031B 00                  <1>
   172 0000031C 4839CB              <1>     cmp rbx, rcx
   173 0000031F 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   174 00000323 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   174 00000328 [1BC00300]          <1>
   175 0000032C E94D000000          <1>     jmp mcbBuild
   176                              <1> .mcbFindAddress:
   177                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   178                              <1> ;Entry: rax = Address of arena to search for
   179                              <1> ;       rsi = Pointer to memory map
   180                              <1> ;       ecx = Number of 24 byte entries
   181                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   182                              <1> ;       CF=CY : value in rax not found
   183 00000331 56                  <1>     push rsi
   184 00000332 51                  <1>     push rcx
   185 00000333 50                  <1>     push rax
   186                              <1> .mfa0:
   187 00000334 483B06              <1>     cmp rax, qword [rsi]
   188 00000337 7410                <1>     je .mcbAddressFound
   189 00000339 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   190 00000340 FFC9                <1>     dec ecx
   191 00000342 79F0                <1>     jns .mfa0
   192                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   193 00000344 58                  <1>     pop rax
   194 00000345 59                  <1>     pop rcx
   195 00000346 5E                  <1>     pop rsi
   196 00000347 F9                  <1>     stc
   197 00000348 C3                  <1>     ret
   198                              <1> .mcbAddressFound:
   199 00000349 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   200 0000034C 59                  <1>     pop rcx ;Pop old rax value off
   201 0000034D 59                  <1>     pop rcx
   202 0000034E 5E                  <1>     pop rsi
   203 0000034F F8                  <1>     clc
   204 00000350 C3                  <1>     ret
   205                              <1> .mcbFail:
   206 00000351 488D2D0C000000      <1>     lea rbp, .mcbFailmsg
   207 00000358 B804130000          <1>     mov eax, 1304h
   208 0000035D CD30                <1>     int 30h
   209 0000035F E944090000          <1>     jmp errorInit
   210 00000364 4D656D6F727920416C- <1> .mcbFailmsg: db "Memory Allocation Error",0Ah,0Dh,0
   210 0000036D 6C6F636174696F6E20- <1>
   210 00000376 4572726F720A0D00    <1>
   211                              <1> mcbBuild:
   212                              <1> ;Actually build the MCB chain here
   213                              <1> ;Start by computing the difference between userbase and DOS area
   214                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   215 0000037E 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   215 00000383 [08C00300]          <1>
   216 00000387 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   217 0000038E 56                  <1>     push rsi    ;Save ptr
   218 0000038F 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   219 00000396 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   220 00000399 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   221 000003A1 5B                  <1>     pop rbx
   222 000003A2 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   223 000003A5 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   224 000003AD 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   225 000003B5 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   226 000003B8 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   227 000003BB 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   227 000003C0 [77C00300]          <1>
   228                              <1> 
   229                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   230 000003C4 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   230 000003CC 00000000            <1>
   231 000003D0 746E                <1>     jz .skipISA
   232                              <1>     ;Here if an ISA hole exists, place a MCB around it
   233 000003D2 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   234                              <1>     ;Remove one MCB worth of space from alloc
   235 000003D9 31C9                <1>     xor ecx, ecx
   236 000003DB 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   237 000003DE 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   238 000003E4 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   239 000003E7 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   240 000003EA 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   241 000003ED C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   242 000003F0 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   243 000003F8 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   243 00000401 00                  <1>
   244 00000402 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   245 00000405 480510000000        <1>     add rax, mcb_size
   246 0000040B 4829C1              <1>     sub rcx, rax    ;Take their difference
   247 0000040E C1E904              <1>     shr ecx, 4
   248 00000411 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   249 00000414 C1E104              <1>     shl ecx, 4  ;Get bytes again
   250 00000417 4881C310000000      <1>     add rbx, mcb_size
   251 0000041E 4801CB              <1>     add rbx, rcx
   252                              <1>     ;RBX should now be at 16Mb
   253 00000421 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   254 00000424 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   255 0000042C 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   256 00000434 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   257 00000437 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   258 0000043D 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   259                              <1> .skipISA:
   260                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   261                              <1>     ;rbx points to a block with "Z" marker
   262 00000440 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   262 00000448 00000000            <1>
   263 0000044C 7470                <1>     jz .exit
   264                              <1>     ;Add PCI hole MCB
   265 0000044E 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   266                              <1>     ;Remove one MCB worth of space from alloc
   267 00000455 31C9                <1>     xor ecx, ecx
   268 00000457 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   269 0000045A 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   270 00000460 C1E104              <1>     shl ecx, 4  ;Get bytes
   271 00000463 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   272 00000466 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   273 00000469 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   274 0000046C 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   275 00000474 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   275 0000047D 00                  <1>
   276 0000047E 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   277 00000481 480510000000        <1>     add rax, mcb_size
   278 00000487 4829C1              <1>     sub rcx, rax    ;Take their difference
   279 0000048A C1E904              <1>     shr ecx, 4
   280 0000048D 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   281 00000490 C1E104              <1>     shl ecx, 4  ;Get bytes again
   282 00000493 4881C310000000      <1>     add rbx, mcb_size
   283 0000049A 4801CB              <1>     add rbx, rcx
   284                              <1>     ;RBX should now be at 4Gb
   285 0000049D C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   286 000004A0 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   287 000004A8 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   287 000004AD [1BC00300]          <1>
   288 000004B1 48C1E904            <1>     shr rcx, 4
   289 000004B5 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   290 000004BB 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   291                              <1> .exit:
   292                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   293 000004BE 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   294                              <1> ;------------------------------------------------;
   295                              <1> ;          Kernel inits and adjustments          ;
   296                              <1> ;------------------------------------------------;
   297                              <1> ;Adjust Interrupt Entries Int 40h-49h
   298                              <1> adjInts:
   299 000004C5 B340                <1>     mov bl, 40h
   300 000004C7 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   301 000004CC CD35                <1>     int 35h
   302 000004CE B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   303 000004D3 488D3D32080000      <1>     lea rdi, intData
   304 000004DA 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   305                              <1> .ai0:
   306 000004DC B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   307 000004E1 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   308 000004E4 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   309                              <1> .ai1:
   310 000004E7 CD35                <1>     int 35h
   311 000004E9 4881C708000000      <1>     add rdi, 8
   312 000004F0 FFC1                <1>     inc ecx
   313 000004F2 81F950000000        <1>     cmp ecx, 50h
   314 000004F8 75E2                <1>     jne .ai0
   315                              <1> 
   316                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   317                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   318                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   319                              <1>     %if DEBUG
   320                              <1> debugPopUpMsg:
   321                              <1>     push rbx
   322                              <1>     push rbp
   323                              <1>     push rcx
   324                              <1>     push rdx
   325                              <1>     mov ecx, 53 ;A large number of lines
   326                              <1>     xor edx, edx    ;COM 1
   327                              <1> .cls:
   328                              <1>     mov eax, 010Ah ;Transmit Line feed
   329                              <1>     int 34h
   330                              <1>     dec ecx
   331                              <1>     jnz .cls
   332                              <1>     lea rbx, qword [debPrintNullString + rbp]
   333                              <1>     lea rbp, .msg
   334                              <1>     call rbx
   335                              <1>     jmp short .exit
   336                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   337                              <1> .exit:
   338                              <1>     pop rdx
   339                              <1>     pop rcx
   340                              <1>     pop rbp
   341                              <1>     pop rbx
   342                              <1>     %endif
   343                              <1> 
   344                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   345 000004FA 488D15A7070000      <1>     lea rdx, errorInit ;Get segment start address
   346 00000501 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   347 00000506 CD41                <1>     int 41h
   348 00000508 488D1599070000      <1>     lea rdx, errorInit ;Get segment start address
   349 0000050F B844250000          <1>     mov eax, 2544h
   350 00000514 CD41                <1>     int 41h
   351                              <1> ;------------------------------------------------;
   352                              <1> ;          Driver Adjustments and inits          ;
   353                              <1> ;------------------------------------------------;
   354                              <1> ;Modify the pointers in nData before putting them in the data area
   355 00000516 48012D6F080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   356 0000051D 48012D72080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   357 00000524 48012D73080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   358                              <1> ;Copy the Null driver to its location in Sysvars
   359 0000052B B922000000          <1>     mov ecx, drvHdr_size
   360 00000530 488D3555080000      <1>     lea rsi, qword [nData]
   361 00000537 488DBD[BFC00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   362 0000053E F3A4                <1>     rep movsb   
   363                              <1> 
   364                              <1> ;Adjust the addresses in the other driver headers 
   365 00000540 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   365 00000542 [7824000000000000]  <1>
   366 0000054A B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   367 0000054F 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   368                              <1> adjDrivers:
   369 00000553 E83D070000          <1>     call adjustDrvHdr
   370 00000558 E2F9                <1>     loop adjDrivers
   371                              <1> 
   372                              <1> ;Open NUL
   373                              <1> ;NUL opened
   374                              <1> ;Open CON
   375                              <1> conInit:    ;Rather than keeping this resident... do it here
   376                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   377 0000055A 488D95[5F270000]    <1>     lea rdx, qword [rbp + fastOutput]
   378 00000561 B849250000          <1>     mov eax, 2549h
   379 00000566 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   380 00000568 488D95[67270000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   381 0000056F B83B250000          <1>     mov eax, 253Bh
   382 00000574 CD41                <1>     int 41h ;Hook int 3Bh
   383                              <1> .ci0:
   384 00000576 B401                <1>     mov ah, 01      ;Get buffer status
   385 00000578 CD36                <1>     int 36h
   386 0000057A 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   387 0000057C 30E4                <1>     xor ah, ah
   388 0000057E CD36                <1>     int 36h ;Read key to flush from buffer
   389 00000580 EBF4                <1>     jmp short .ci0
   390                              <1> .ci1:
   391 00000582 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   392 00000587 CD30                <1>     int 30h
   393 00000589 B402                <1>     mov ah, 02h
   394 0000058B 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   395 0000058D 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   396 0000058F CD30                <1>     int 30h
   397 00000591 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   398 00000593 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   399 00000598 CD30                <1>     int 30h
   400                              <1> 
   401                              <1>     ;Save ptr to ConHdr in Sysvars
   402 0000059A 488D85[78240000]    <1>     lea rax, qword [rbp + conHdr]
   403 000005A1 6448890425-         <1>     mov qword fs:[conPtr], rax
   403 000005A6 [97C00300]          <1>
   404                              <1> 
   405                              <1>     ;Save ptr to ClkHdr in Sysvars
   406 000005AA 488D85[DE240000]    <1>     lea rax, qword [rbp + clkHdr]
   407 000005B1 6448890425-         <1>     mov qword fs:[clockPtr], rax
   407 000005B6 [8FC00300]          <1>
   408                              <1> 
   409                              <1> ;------------------------------------------------;
   410                              <1> ;         Link DOS to temporary Buffer           ;
   411                              <1> ;------------------------------------------------;
   412                              <1> tempBufferInit:
   413 000005BA 488DBD[09030000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   414 000005C1 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   414 000005C6 [A1C00300]          <1>
   415 000005CA 31C0                <1>     xor eax, eax
   416 000005CC 48FFC8              <1>     dec rax
   417 000005CF 48AB                <1>     stosq   ;.nextBufPtr, end of list
   418 000005D1 AA                  <1>     stosb   ;.driveNumber, Free entry
   419 000005D2 48FFC0              <1>     inc rax
   420 000005D5 AA                  <1>     stosb   ;.bufferFlags, No flags
   421                              <1> ;------------------------------------------------;
   422                              <1> ;         Init msd driver, create DPB            ;
   423                              <1> ;------------------------------------------------;
   424                              <1> storageInits:
   425                              <1> ;First save dpb pointer in sysvars
   426 000005D6 488D9D[A5010000]    <1>     lea rbx, qword [rbp + firstDPB]
   427 000005DD 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   427 000005E2 [7FC00300]          <1>
   428                              <1> ;Open Mass Storage
   429                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   430                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   431                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   432                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   433                              <1>     ;mov al, byte fs:[numPhysVol]
   434                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   435                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   436                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   437                              <1>     ;Check if it returned OK first!
   438                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   439                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   440                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   441                              <1>     ;mov byte fs:[numPhysVol], al
   442                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   443                              <1> 
   444                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   445 000005E6 E8C3070000          <1>     call diskInit
   446 000005EB 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   447 000005EE 648A0425[BBC00300]  <1>     mov al, byte fs:[numPhysVol]
   448 000005F6 488D95[1F2E0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   449 000005FD 30C9                <1>     xor cl, cl  ;Clear counter
   450 000005FF 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   450 00000604 [7FC00300]          <1>
   451                              <1> .si0:   
   452 00000608 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   453 0000060B B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   454 0000060D CD41                <1>     int 41h
   455                              <1> ;Add other data to DPB
   456 0000060F 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   457 00000612 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   458 00000615 50                  <1>     push rax
   459 00000616 488D87[00250000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   460 0000061D 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   461 00000621 58                  <1>     pop rax
   462 00000622 FEC1                <1>     inc cl
   463 00000624 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   464 00000626 7416                <1>     je .si1
   465 00000628 50                  <1>     push rax
   466 00000629 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   467 0000062D 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   468 00000631 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   469 00000634 58                  <1>     pop rax
   470 00000635 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   471 0000063C EBCA                <1>     jmp short .si0
   472                              <1> .si1:
   473                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   474 0000063E 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   475 00000646 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   476                              <1> ;------------------------------------------------;
   477                              <1> ;          Find largest sector size              ;
   478                              <1> ;------------------------------------------------;
   479                              <1> sectorSizeSearch:
   480                              <1> ;Done by reading BPB's for each drive
   481 00000649 488D9D[1F2E0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   482                              <1>     
   483                              <1>     ;Go thru each block individually
   484 00000650 31C0                <1>     xor eax, eax
   485 00000652 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   486                              <1> .findLargest:
   487 00000655 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   488 00000659 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   489 0000065E 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   490 00000665 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   491 00000668 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   492 0000066B 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   493 0000066D 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   493 00000672 [9FC00300]          <1>
   494                              <1>     
   495                              <1> ;------------------------------------------------;
   496                              <1> ;                 Temp CDS inits                 ;
   497                              <1> ;------------------------------------------------;
   498                              <1> tempCDS:
   499                              <1> ;Build a temporary CDS for Drive A to use it for booting
   500 00000676 488DBD[AE020000]    <1>     lea rdi, qword [rbp + initCDS]
   501 0000067D 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   501 00000682 [A9C00300]          <1>
   502 00000686 B943000000          <1>     mov ecx, 67 ;Buffer length
   503 0000068B 31C0                <1>     xor eax, eax
   504 0000068D 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   505 00000690 F3AA                <1>     rep stosb   ;Zero out the path string
   506 00000692 4889DF              <1>     mov rdi, rbx
   507 00000695 B041                <1>     mov al, "A"
   508 00000697 AA                  <1>     stosb
   509 00000698 B03A                <1>     mov al, ":"
   510 0000069A AA                  <1>     stosb
   511 0000069B B05C                <1>     mov al, "\"
   512 0000069D AA                  <1>     stosb
   513 0000069E 4889DF              <1>     mov rdi, rbx
   514 000006A1 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   515 000006A7 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   515 000006AC [7FC00300]          <1>
   516 000006B0 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   517 000006B4 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   518                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   519                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   520                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   521 000006BA 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   522                              <1> ;------------------------------------------------;
   523                              <1> ;     Set up general PSP areas and DOS vars      ;
   524                              <1> ;------------------------------------------------;
   525                              <1>     ;Additional DOS Vars init
   526 000006BD 31C0                <1>     xor eax, eax
   527 000006BF 64880425[57C10300]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   528 000006C7 64880425[59C10300]  <1>     mov byte fs:[breakFlag], al  ;Break off
   529 000006CF 64880425[5AC10300]  <1>     mov byte fs:[verifyFlag], al ;Write only
   530 000006D7 64880425[58C10300]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   531 000006DF 64880425[2BC10300]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   532 000006E7 64880425[2CC10300]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   533 000006EF 64C60425[2DC10300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   533 000006F7 FF                  <1>
   534 000006F8 6466890425-         <1>     mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   534 000006FD [55C10300]          <1>
   535 00000701 64880425[E6C00300]  <1>     mov byte fs:[allocStrat], al    ;First Fit
   536                              <1> 
   537                              <1>     ;SYSVARS PSP Init
   538 00000709 488D1DF0F8FFFF      <1>     lea rbx, qword [tempPSP]
   539 00000710 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   539 00000715 [43C10300]          <1>
   540 00000719 53                  <1>     push rbx
   541 0000071A 4881C380000000      <1>     add rbx, psp.dta
   542 00000721 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   542 00000726 [3BC10300]          <1>
   543 0000072A 5B                  <1>     pop rbx
   544 0000072B 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   545 00000730 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   546 00000737 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   547 0000073B 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   548 0000073F 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   549 00000743 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   550 00000747 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   550 00000750 00                  <1>
   551 00000751 48AB                <1>     stosq   ;8 bytes
   552 00000753 31C0                <1>     xor eax, eax
   553 00000755 48AB                <1>     stosq   ;16 bytes
   554 00000757 AB                  <1>     stosd   ;20 bytes
   555 00000758 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   556 00000760 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   557 00000764 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   558 00000768 4889DA              <1>     mov rdx, rbx
   559 0000076B B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   560 00000770 CD41                <1>     int 41h
   561 00000772 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   562 00000776 B843350000          <1>     mov eax, 3543h
   563 0000077B CD41                <1>     int 41h
   564 0000077D 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   565 00000781 B844350000          <1>     mov eax, 3544h
   566 00000786 CD41                <1>     int 41h
   567 00000788 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   568                              <1> 
   569 0000078C B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   570 00000791 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   571 00000795 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   572                              <1> ;------------------------------------------------;
   573                              <1> ;          Default File Handle Creation          ;
   574                              <1> ;------------------------------------------------;
   575                              <1> defaultFileHandles:
   576                              <1> ;Fill in the default file table entries
   577 00000797 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   578 0000079E 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   579 000007A5 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   580 000007AB 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   580 000007B0 [87C00300]          <1>
   581                              <1> ;GOTO FIRST FILE 
   582 000007B4 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   583                              <1> ;Write CON
   584 000007BB 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   585 000007C0 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   586 000007C6 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   587 000007CA C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   588                              <1>     ;No EOF when reading from the device
   589 000007CE 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   589 000007D3 [97C00300]          <1>
   590 000007D7 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   591                              <1>     ;Ignore disk related fields and Date/Time of open
   592 000007DB 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   593 000007DF 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   594                              <1>     ;11 chars in 8.3 name
   595 000007E6 48A5                <1>     movsq   ;8 chars
   596 000007E8 66A5                <1>     movsw   ;10 chars
   597 000007EA A4                  <1>     movsb   ;11 chars
   598 000007EB 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   598 000007F0 [43C10300]          <1>
   599 000007F4 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   600                              <1> ;GOTO NEXT ENTRY
   601 000007F8 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   602                              <1> ;Write AUX
   603 000007FF 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   604 00000804 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   605 0000080A C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   606 0000080E C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   607                              <1>     ;No EOF when reading from the device
   608 00000812 488B85[9A240000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   609 00000819 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   610                              <1>     ;Ignore disk related fields and Date/Time of open
   611 0000081D 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   612 00000821 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   613                              <1>     ;11 chars in 8.3 name
   614 00000828 48A5                <1>     movsq   ;8 chars
   615 0000082A 66A5                <1>     movsw   ;10 chars
   616 0000082C A4                  <1>     movsb   ;11 chars
   617 0000082D 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   617 00000832 [43C10300]          <1>
   618 00000836 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   619                              <1> ;GOTO NEXT ENTRY
   620 0000083A 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   621                              <1> ;Write PRN
   622 00000841 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   623 00000846 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   624 0000084C C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   625 00000850 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   626                              <1>     ;Want EOF when reading from to the device
   627 00000854 488B85[BC240000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   628 0000085B 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   629                              <1>     ;Ignore disk related fields and Date/Time of open
   630 0000085F 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   631 00000863 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   632                              <1>     ;11 chars in 8.3 name
   633 0000086A 48A5                <1>     movsq   ;8 chars
   634 0000086C 66A5                <1>     movsw   ;10 chars
   635 0000086E A4                  <1>     movsb   ;11 chars
   636 0000086F 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   636 00000874 [43C10300]          <1>
   637 00000878 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   638 0000087C EB21                <1>     jmp short .dfhExit
   639 0000087E 434F4E202020202020- <1> .dfhCon db "CON        "
   639 00000887 2020                <1>
   640 00000889 415558202020202020- <1> .dfhAux db "AUX        "
   640 00000892 2020                <1>
   641 00000894 50524E202020202020- <1> .dfhPrn db "PRN        "
   641 0000089D 2020                <1>
   642                              <1> .dfhExit:
   643                              <1> ;------------------------------------------------;
   644                              <1> ;               Load CONFIG.SYS                  ;
   645                              <1> ;------------------------------------------------;
   646                              <1> ;------------------------------------------------;
   647                              <1> ;              Process CONFIG.SYS                ;
   648                              <1> ;------------------------------------------------;
   649                              <1> ;------------------------------------------------;
   650                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   651                              <1> ;------------------------------------------------;
   652                              <1> ;------------------------------------------------;
   653                              <1> ;   Setup Final Data Areas With Overrides from   ;
   654                              <1> ;                  CONFIG.SYS                    ;
   655                              <1> ;------------------------------------------------;
   656                              <1> ;------------------------------------------------;
   657                              <1> ;           Load Command interpreter             ;
   658                              <1> ;------------------------------------------------;
   659 0000089F 488D1513040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   660 000008A6 B409                <1>     mov ah, 09h
   661 000008A8 CD41                <1>     int 41h
   662                              <1> ;Resize DOS allocation before loading COMMAND.COM
   663 000008AA 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   663 000008AF [77C00300]          <1>
   664 000008B3 4981C010000000      <1>     add r8, mcb.program
   665 000008BA BB29130000          <1>     mov ebx, dynamicDataAreaLength
   666 000008BF C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   667 000008C2 FFC3                <1>     inc ebx
   668 000008C4 B44A                <1>     mov ah, 4Ah
   669 000008C6 CD41                <1>     int 41h
   670                              <1>     
   671                              <1>     %if DEBUG && ALLOCTEST
   672                              <1> ;Test Allocation, Growth and Deallocation
   673                              <1>     mov r15, qword fs:[currentPSP]
   674                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   675                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   676                              <1>     mov ah, 48h ;Allocate
   677                              <1>     int 41h
   678                              <1> 
   679                              <1>     mov r8, rax ;Move the pointer to r8
   680                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   681                              <1>     mov ah, 4Ah
   682                              <1>     int 41h
   683                              <1> 
   684                              <1>     mov ah, 49h ;Free r8
   685                              <1>     int 41h
   686                              <1>     mov qword fs:[currentPSP], r15
   687                              <1>     %endif
   688                              <1> 
   689                              <1>     %if ENDSTATUS
   690                              <1> debugFinal:
   691                              <1>     ;Print system state
   692 000008C8 55                  <1>     push rbp    ;Only rbp really matters here
   693 000008C9 4989E8              <1>     mov r8, rbp
   694                              <1> 
   695 000008CC 488D2DD0020000      <1>     lea rbp, .msg2
   696 000008D3 4D8D88[C3010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   697 000008DA 41FFD1              <1>     call r9
   698                              <1> 
   699 000008DD 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   700 000008E4 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   700 000008E9 [08C00300]          <1>
   701                              <1> 
   702 000008ED 4D8D88[FE040000]    <1>     lea r9, qword [r8 + overlayQword]
   703 000008F4 41FFD1              <1>     call r9
   704                              <1> 
   705 000008F7 4881C31B000000      <1>     add rbx, 19+8
   706 000008FE 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   706 00000903 [00C00300]          <1>
   707 00000907 41FFD1              <1>     call r9
   708                              <1> 
   709 0000090A 4881C31B000000      <1>     add rbx, 19+8
   710 00000911 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   710 00000916 [77C00300]          <1>
   711 0000091A 41FFD1              <1>     call r9
   712                              <1> 
   713 0000091D 4881C31C000000      <1>     add rbx, 20+8
   714 00000924 4D8D88[BB040000]    <1>     lea r9, qword [r8 + overlayDword]
   715 0000092B 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   716 00000933 41FFD1              <1>     call r9
   717                              <1> 
   718 00000936 4881C312000000      <1>     add rbx, 10+8
   719 0000093D 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   720 00000945 41FFD1              <1>     call r9
   721                              <1> 
   722 00000948 4881C312000000      <1>     add rbx, 10+8
   723 0000094F 64488B0425-         <1>     mov rax, qword fs:[longMem]
   723 00000954 [1BC00300]          <1>
   724 00000958 4D8D88[FE040000]    <1>     lea r9, qword [r8 + overlayQword]
   725 0000095F 41FFD1              <1>     call r9
   726                              <1> 
   727 00000962 4881C31B000000      <1>     add rbx, 19+8
   728 00000969 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   728 0000096E [7FC00300]          <1>
   729 00000972 41FFD1              <1>     call r9
   730                              <1> 
   731 00000975 4881C31B000000      <1>     add rbx, 19+8
   732 0000097C 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   732 00000981 [87C00300]          <1>
   733 00000985 41FFD1              <1>     call r9
   734                              <1> 
   735 00000988 4881C31B000000      <1>     add rbx, 19+8
   736 0000098F 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   736 00000994 [A1C00300]          <1>
   737 00000998 41FFD1              <1>     call r9
   738                              <1> 
   739 0000099B 4881C31B000000      <1>     add rbx, 19+8
   740 000009A2 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   740 000009A7 [A9C00300]          <1>
   741 000009AB 41FFD1              <1>     call r9
   742                              <1> 
   743 000009AE 4D8D88[49040000]    <1>     lea r9, qword [r8 + overlayByte]
   744                              <1> 
   745 000009B5 4881C32C000000      <1>     add rbx, 25+19
   746 000009BC 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   746 000009C2 [BBC00300]          <1>
   747 000009C6 41FFD1              <1>     call r9
   748                              <1> 
   749 000009C9 4881C31E000000      <1>     add rbx, 30
   750 000009D0 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   750 000009D6 [12C00300]          <1>
   751 000009DA 41FFD1              <1>     call r9
   752                              <1> 
   753 000009DD 4881C31E000000      <1>     add rbx, 30
   754 000009E4 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   754 000009EA [11C00300]          <1>
   755 000009EE 41FFD1              <1>     call r9
   756                              <1> 
   757 000009F1 4881C310000000      <1>     add rbx, 16
   758 000009F8 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   758 000009FE [10C00300]          <1>
   759 00000A02 0441                <1>     add al, "A"
   760 00000A04 8803                <1>     mov byte [rbx], al
   761                              <1> 
   762 00000A06 488D2D10000000      <1>     lea rbp, .msg
   763 00000A0D 4D8D88[C3010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   764 00000A14 41FFD1              <1>     call r9
   765 00000A17 5D                  <1>     pop rbp
   766 00000A18 E99E010000          <1>     jmp l1
   767 00000A1D 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   767 00000A26 206261736520464646- <1>
   767 00000A2F 464646464646464646- <1>
   767 00000A38 46464646680A0D      <1>
   768 00000A3F 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   768 00000A48 464646464646464646- <1>
   768 00000A51 464646464646680A0D  <1>
   769 00000A5A 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   769 00000A63 464646464646464646- <1>
   769 00000A6C 46464646464668200A- <1>
   769 00000A75 0D                  <1>
   770 00000A76 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   770 00000A7F 464646464646466820  <1>
   771 00000A88 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   771 00000A91 464646464646466820  <1>
   772 00000A9A 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   772 00000AA3 464646464646464646- <1>
   772 00000AAC 464646464646680A0D  <1>
   773 00000AB5 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   773 00000ABE 464646464646464646- <1>
   773 00000AC7 464646464646680A0D  <1>
   774 00000AD0 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   774 00000AD9 464646464646464646- <1>
   774 00000AE2 464646464646680A0D  <1>
   775 00000AEB 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   775 00000AF4 464646464646464646- <1>
   775 00000AFD 464646464646680A0D  <1>
   776 00000B06 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   776 00000B0F 464646464646464646- <1>
   776 00000B18 464646464646680A0D  <1>
   777 00000B21 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   777 00000B2A 204C6F676963616C20- <1>
   777 00000B33 447269766573204646- <1>
   777 00000B3C 680A0D              <1>
   778 00000B3F 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   778 00000B48 204669786564204472- <1>
   778 00000B51 697665732020204646- <1>
   778 00000B5A 680A0D              <1>
   779 00000B5D 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   779 00000B66 2052656D6F7661626C- <1>
   779 00000B6F 652044727673204646- <1>
   779 00000B78 680A0D              <1>
   780 00000B7B 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   780 00000B84 65205A3A0A0D        <1>
   781 00000B8A 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   781 00000B93 4F4D4D414E442E434F- <1>
   781 00000B9C 4D2E2E2E0A0D00      <1>
   782 00000BA3 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   782 00000BAC 626F6F742073756D6D- <1>
   782 00000BB5 6172790A0D00        <1>
   783                              <1>     %endif
   784                              <1> l1:
   785 00000BBB B401                <1>     mov ah, 01h  ;Write with echo
   786 00000BBD CD41                <1>     int 41h
   787 00000BBF 3C00                <1>     cmp al, 0
   788 00000BC1 7402                <1>     je l2
   789 00000BC3 EBF6                <1>     jmp short l1
   790                              <1> l2:
   791 00000BC5 B407                <1>     mov ah, 07h
   792 00000BC7 CD41                <1>     int 41h
   793 00000BC9 3C42                <1>     cmp al, 42h
   794 00000BCB 75EE                <1>     jne l1
   795                              <1> l3:
   796 00000BCD 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   796 00000BD2 [A8C20300]0000      <1>
   797 00000BD8 488D9D[23C00300]    <1>     lea rbx, qword [rbp + secdReqHdr] ;Get the address of this request block
   798 00000BDF 488D85[A8C20300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   799 00000BE6 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   800 00000BE9 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   801 00000BED 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   802 00000BF3 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   803 00000BF7 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   804 00000BFE FF95[E8240000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   805 00000C04 FF95[F0240000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   806                              <1> 
   807 00000C0A B403                <1>     mov ah, 03h
   808 00000C0C 30FF                <1>     xor bh, bh
   809 00000C0E CD30                <1>     int 30h
   810 00000C10 30D2                <1>     xor dl, dl  ;0 column
   811 00000C12 B402                <1>     mov ah, 02h
   812 00000C14 CD30                <1>     int 30h
   813                              <1> 
   814 00000C16 488D9D[A8C20300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   815 00000C1D 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   816 00000C21 E832000000          <1>     call .clkHexToBCD
   817 00000C26 B40E                <1>     mov ah, 0Eh
   818 00000C28 B03A                <1>     mov al, ":"
   819 00000C2A CD30                <1>     int 30h
   820 00000C2C 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   821 00000C30 E823000000          <1>     call .clkHexToBCD
   822 00000C35 B40E                <1>     mov ah, 0Eh
   823 00000C37 B03A                <1>     mov al, ":"
   824 00000C39 CD30                <1>     int 30h
   825 00000C3B 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   826 00000C3F E814000000          <1>     call .clkHexToBCD
   827 00000C44 B40E                <1>     mov ah, 0Eh
   828 00000C46 B02E                <1>     mov al, "."
   829 00000C48 CD30                <1>     int 30h
   830 00000C4A 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   831 00000C4E E805000000          <1>     call .clkHexToBCD
   832 00000C53 E963FFFFFF          <1>     jmp l1
   833                              <1> .clkHexToBCD:
   834                              <1> ;Converts a Hex byte into two BCD digits
   835                              <1> ;Takes input in each nybble of al
   836 00000C58 53                  <1>     push rbx
   837 00000C59 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   837 00000C62 00                  <1>
   838 00000C63 31D2                <1>     xor edx, edx
   839 00000C65 48F7F3              <1>     div rbx
   840 00000C68 80C230              <1>     add dl, '0'
   841 00000C6B 80FA39              <1>     cmp dl, '9'
   842 00000C6E 7603                <1>     jbe .chtb0
   843 00000C70 80C207              <1>     add dl, 'A'-'0'-10
   844                              <1> .chtb0:
   845 00000C73 88D1                <1>     mov cl, dl    ;Save remainder byte
   846 00000C75 31D2                <1>     xor edx, edx
   847 00000C77 48F7F3              <1>     div rbx
   848 00000C7A 80C230              <1>     add dl, '0'
   849 00000C7D 80FA39              <1>     cmp dl, '9'
   850 00000C80 7603                <1>     jbe .chtb1
   851 00000C82 80C207              <1>     add dl, 'A'-'0'-10
   852                              <1> .chtb1:
   853 00000C85 88D5                <1>     mov ch, dl    ;Save remainder byte
   854                              <1> 
   855 00000C87 88E8                <1>     mov al, ch    ;Get most sig digit into al
   856 00000C89 B40E                <1>     mov ah, 0Eh
   857 00000C8B CD30                <1>     int 30h
   858 00000C8D 88C8                <1>     mov al, cl    ;Get least sig digit into al
   859 00000C8F B40E                <1>     mov ah, 0Eh
   860 00000C91 CD30                <1>     int 30h
   861 00000C93 5B                  <1>     pop rbx
   862 00000C94 C3                  <1>     ret
   863                              <1> ;--------------------------------
   864                              <1> ;       PROCS FOR SYSINIT       :
   865                              <1> ;--------------------------------
   866                              <1> adjustDrvHdr:
   867                              <1> ;Input: rsi = Effective address of driver in DOS segment
   868                              <1> ;       rbp = Ptr to the start of the DOS segment
   869                              <1> ;Output: rsi = EA of next header in DOS segment
   870 00000C95 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   871 00000C98 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   872 00000C9C 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   873 00000CA0 4881C622000000      <1>     add rsi, drvHdr_size
   874 00000CA7 C3                  <1>     ret
   875                              <1> errorInit:
   876                              <1> ;If a critical error occurs during sysinit, fail through here
   877                              <1> ;Int 42h, 43h and 44h point here during sysinit
   878 00000CA8 488D2D20000000      <1>     lea rbp, hltmsg
   879 00000CAF B804130000          <1>     mov eax, 1304h
   880 00000CB4 CD30                <1>     int 30h
   881                              <1>     ;cli ;Clear interrupts
   882                              <1>     ;mov al, -1
   883                              <1>     ;mov dx, 0A1h    ;PIC2 data
   884                              <1>     ;out dx, al      ;Mask all lines
   885                              <1>     ;mov dx, 21h     ;PIC1 data
   886                              <1>     ;out dx, al      ;Mask all lines
   887                              <1> .ei0:
   888 00000CB6 F4                  <1>     hlt
   889 00000CB7 EBFD                <1>     jmp short .ei0
   890                              <1> ;--------------------------------
   891                              <1> ;       DATA FOR SYSINIT        :
   892                              <1> ;--------------------------------
   893 00000CB9 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   893 00000CC2 5343502F444F532E2E- <1>
   893 00000CCB 2E0A0D24            <1>
   894 00000CCF 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   894 00000CD8 7469616C6973696E67- <1>
   894 00000CE1 20534350444F532E53- <1>
   894 00000CEA 59532E205379737465- <1>
   894 00000CF3 6D2068616C74696E67- <1>
   894 00000CFC 2E2E2E00            <1>
   895 00000D00 434F4E00            <1> conName db "CON",0
   896 00000D04 41555800            <1> auxName db "AUX",0
   897 00000D08 50524E00            <1> prnName db "PRN",0
   898                              <1> intData:
   899 00000D0C [4E17000000000000]  <1>     dq terminateProcess ;Int 40h
   900 00000D14 [E51C000000000000]  <1>     dq functionDispatch ;Int 41h
   901 00000D1C [A80C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   902 00000D24 [211E000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   903 00000D2C [4318000000000000]  <1>     dq dosDefCritErrHdlr 
   904 00000D34 [0F19000000000000]  <1>     dq absDiskRead      ;Int 45h
   905 00000D3C [F018000000000000]  <1>     dq absDiskWrite     ;Int 46h
   906 00000D44 [5017000000000000]  <1>     dq terminateRes     ;Int 47h
   907 00000D4C [211E000000000000]  <1>     dq defaultIretq     ;Int 48h
   908 00000D54 [211E000000000000]  <1>     dq defaultIretq     ;Int 49h
   909 00000D5C [211E000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   910 00000D64 [211E000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   911 00000D6C [211E000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   912 00000D74 [211E000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   913 00000D7C [211E000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   914 00000D84 [C121000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   915                              <1> nData:
   916 00000D8C [7824000000000000]  <1>     dq conHdr
   917 00000D94 0480                <1>     dw 08004h
   918 00000D96 [2026000000000000]  <1>     dq nulStrat
   919 00000D9E [2626000000000000]  <1>     dq nulIntr
   920 00000DA6 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   921                              <1> 
   922                              <1> diskInit:
   923                              <1>     ;We create a function to deal with BPB parsing etc
   924                              <1>     ;Start with the first primary partition on each hard disk (until max)
   925                              <1>     ;   They dont have to be bootable
   926                              <1>     ;Then go back and look for other partitions partitions. 
   927                              <1>     ;   Add each other primary or logical ptn (until max)
   928                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   929                              <1>     ;Use r8 as device counter
   930 00000DAE 488DBD[472E0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   931 00000DB5 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   931 00000DBD 00                  <1>
   932 00000DBE 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   933 00000DC4 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   933 00000DCD 00                  <1>
   934 00000DCE B280                <1>     mov dl, 80h ;Start with HDD 0
   935                              <1> .primary:
   936 00000DD0 64803C25[BBC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
   936 00000DD8 03                  <1>
   937 00000DD9 0F84AB000000        <1>     je .remInit
   938 00000DDF 31C9                <1>     xor ecx, ecx    ;Sector 0
   939 00000DE1 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   940 00000DE6 0F8289000000        <1>     jc .primaryEpilog
   941                              <1>     ;Here, check MBR or BPB
   942 00000DEC 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   943 00000DF5 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   944                              <1>     ;Now check if BPB or MBR
   945 00000DF7 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   946 00000DF9 8A6302              <1>     mov ah, byte [rbx + 2]
   947 00000DFC 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   948 00000E00 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   949                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   950                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   951 00000E02 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   952 00000E09 B104                <1>     mov cl, 4
   953                              <1> .checkPrimary:
   954 00000E0B 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   955 00000E0E 3C01                <1>     cmp al, 01
   956 00000E10 7421                <1>     je .primaryFound
   957 00000E12 3C04                <1>     cmp al, 04
   958 00000E14 741D                <1>     je .primaryFound
   959 00000E16 3C06                <1>     cmp al, 06
   960 00000E18 7419                <1>     je .primaryFound
   961 00000E1A 3C0B                <1>     cmp al, 0Bh
   962 00000E1C 7415                <1>     je .primaryFound
   963 00000E1E 3C0C                <1>     cmp al, 0Ch
   964 00000E20 7411                <1>     je .primaryFound
   965 00000E22 3C0E                <1>     cmp al, 0Eh
   966 00000E24 740D                <1>     je .primaryFound
   967 00000E26 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   968 00000E2D FEC9                <1>     dec cl
   969 00000E2F 7444                <1>     jz .primaryEpilog
   970 00000E31 EBD8                <1>     jmp short .checkPrimary
   971                              <1> .primaryFound:
   972                              <1>     ;Copy the first sector of this partition into memory
   973 00000E33 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   974 00000E36 E8E9000000          <1>     call .initReadSector
   975 00000E3B 7238                <1>     jc .primaryEpilog
   976                              <1>     ;Now verify this is a BPB
   977 00000E3D 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   978 00000E3F 8A6302              <1>     mov ah, byte [rbx + 2]
   979 00000E42 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   980 00000E46 752D                <1>     jne .primaryEpilog   ;If not, skip
   981                              <1>     ;Now copy data to internal tables
   982 00000E48 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   983 00000E4B B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   984 00000E50 57                  <1>     push rdi
   985 00000E51 F348A5              <1>     rep movsq   ;Copy the BPB
   986 00000E54 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   987                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   988 00000E55 4A8D9C05[152E0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   989                              <1>     ;Add device count to rbx to point to correct entry
   990 00000E5D 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   991 00000E5F 4A8D9CC5[1F2E0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   992 00000E67 488933              <1>     mov qword [rbx], rsi
   993 00000E6A 49FFC0              <1>     inc r8  ;Goto next logical drive
   994 00000E6D 64FE0425[BBC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
   995                              <1> .primaryEpilog:
   996 00000E75 FEC2                <1>     inc dl  ;Goto next BIOS drive
   997 00000E77 88D6                <1>     mov dh, dl
   998 00000E79 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   999 00000E7C 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1000 00000E84 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1001                              <1> .extended:
  1002                              <1> ;We have gone through all the devices once
  1003                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1004                              <1>     ;je .remInit ;If yes, get removable devices
  1005                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1006                              <1>     ;xor ecx, ecx    ;Get MBR back
  1007                              <1>     ;call .initReadSector
  1008                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1009                              <1> .remInit:
  1010                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1011 00000E8A 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1012 00000E8D 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1013 00000E8F 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1014                              <1>     ;rdi points to the space for the subsequent bpb's
  1015                              <1> .removables:
  1016 00000E92 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1017 00000E94 E88B000000          <1>     call .initReadSector
  1018 00000E99 7238                <1>     jc .removableEpilogue   ;Goto next device
  1019                              <1>     ;Now verify this is a BPB
  1020 00000E9B 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1021 00000E9D 8A6302              <1>     mov ah, byte [rbx + 2]
  1022 00000EA0 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1023 00000EA4 752D                <1>     jne .removableEpilogue   ;If not, skip
  1024                              <1>     ;Now copy data to internal tables
  1025 00000EA6 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1026 00000EA9 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1027 00000EAE 57                  <1>     push rdi
  1028 00000EAF F348A5              <1>     rep movsq   ;Copy the BPB
  1029 00000EB2 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1030                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1031 00000EB3 4A8D9C05[152E0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1032                              <1>     ;Add device count to rbx to point to correct entry
  1033 00000EBB 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1034 00000EBD 4A8D9CC5[1F2E0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1035 00000EC5 488933              <1>     mov qword [rbx], rsi
  1036 00000EC8 49FFC0              <1>     inc r8  ;Goto next logical drive
  1037 00000ECB 64FE0425[BBC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1038                              <1> .removableEpilogue:
  1039 00000ED3 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1040 00000ED5 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1041 00000EDD 7412                <1>     je .end
  1042 00000EDF 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1043 00000EE6 7403                <1>     je .re0
  1044 00000EE8 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1045                              <1> .re0:
  1046 00000EEB 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1047 00000EEF 72A1                <1>     jb .removables
  1048                              <1> .end:
  1049 00000EF1 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1049 00000EF9 01                  <1>
  1050 00000EFA 7401                <1>     je .singleRemDev
  1051 00000EFC C3                  <1>     ret
  1052                              <1> .singleRemDev:
  1053                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1054 00000EFD 488D9D[152E0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1055 00000F04 8A95[152E0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1056 00000F0A 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1057 00000F0D 488D9D[1F2E0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1058 00000F14 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1059 00000F17 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1060 00000F1B 64FE0425[BBC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1061 00000F23 C3                  <1>     ret
  1062                              <1> .initReadSector:
  1063                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1064 00000F24 B482                <1>     mov ah, 82h ;Read
  1065 00000F26 B001                <1>     mov al, 1   ;One sector
  1066 00000F28 488D9D[29030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1067 00000F2F CD33                <1>     int 33h
  1068 00000F31 C3                  <1>     ret
    12                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    13                                  %include "./Source/BSS/dosSeg.asm"
    14                              <1> ;This file contains the main DOS data segment
    15                              <1> dosAPT: ;Additional Page tables
    16 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    17                              <1> dosDataArea:
    18 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    19 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    20 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    21 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    22 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    23 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    24 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    25 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    26                              <1> 
    27                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
    28                              <1> ;A secondary header is present to allow simultaneous echoing to console 
    29                              <1> ; without forcing to re-build the whole primary request block.
    30                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
    31                              <1> ; with secondary char output going through the secondary header
    32                              <1> ;(i.e the char input functions use the primary for main input and secondary 
    33                              <1> ; for output)
    34                              <1> ;ioReqPkt is the largest possible packet
    35 0003C023 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
    36 0003C04D <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
    37 0003C077 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    38                              <1> sysVarsPtr:
    39 0003C07F ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    40 0003C087 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    41 0003C08F ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    42                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    43 0003C097 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    44                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    45 0003C09F ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    46 0003C0A1 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    47 0003C0A9 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    48 0003C0B1 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    49 0003C0B9 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    50                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    51 0003C0BB ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    52 0003C0BC ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    53 0003C0BD ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    54 0003C0BE ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    55 0003C0BF <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    56                              <1> 
    57                              <1> ;Additional internal variables
    58 0003C0E1 ????                <1>     numFiles    resw 1    ;FILES=5 default
    59 0003C0E3 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    60                              <1> 
    61 0003C0E5 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    62 0003C0E6 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    63                              <1> ;Server stuff. Default to all zeros (blank)
    64 0003C0E7 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    65 0003C0E8 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h)     
    66                              <1> ;Swappable Data Area
    67 0003C0F8 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    68 0003C118 ??                  <1>                 resb 1  ;Alignment byte
    69                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    70 0003C119 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
    71 0003C121 ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
    72 0003C129 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
    73 0003C12B ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    74 0003C12C ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    75 0003C12D ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    76 0003C12E ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    77 0003C12F ????                <1>     errorExCde  resw 1  ;Extended Error Code
    78 0003C131 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    79 0003C132 ??                  <1>     errorClass  resb 1  ;Error Class
    80                              <1> 
    81 0003C133 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
    82                              <1> 
    83 0003C13B ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    84 0003C143 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    85 0003C14B ????                <1>     Int44Error  resw 1  ;Saves Error code from request status word
    86 0003C14D ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    87 0003C155 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
    88                              <1> 
    89 0003C157 ??                  <1>     currentDrv  resb 1  ;Default drive x
    90                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    91 0003C158 ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    92                              <1> 
    93 0003C159 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    94 0003C15A ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    95                              <1> ;SDA, needs to be replaced between processes
    96 0003C15B ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
    97 0003C163 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
    98 0003C16B ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
    99 0003C173 ??                  <1>     STDIOuse    resb 1  ;Set if STDIO is being used during current task
   100 0003C174 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   101 0003C17C ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   102 0003C184 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   103 0003C185 ??                  <1>     Int44Fail   resb 1  ;Counts the number of fails that have occured
   104 0003C186 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   105 0003C187 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   106 0003C188 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   107 0003C190 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   108 0003C198 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   109 0003C1A0 ??                  <1>     dosInvoke   resb 1  ;0= Int 41h, -1 = 41h/5D01h
   110 0003C1A1 ??                  <1>     critExit    resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   111                              <1> ;The above flag tells DOS to print ^C in the termination function
   112                              <1> 
   113                              <1> ;Time stuff
   114 0003C1A2 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   115 0003C1A3 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   116 0003C1A4 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
   117 0003C1A5 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   118 0003C1A7 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   119                              <1> 
   120                              <1> ;Buffers
   121 0003C1A8 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   122 0003C228 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   123 0003C2A8 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   124 0003C2AE ??                  <1>     singleIObyt resb 1  ;For single IO byte buffers
   125                              <1> ;Misc bookkeeping flags and vars
   126                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   127 0003C2AF ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   128 0003C2B0 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   129 0003C2B1 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   130 0003C2B2 ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   131 0003C2B3 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   132                              <1> 
   133 0003C2B4 ??                  <1>     workingDrv  resb 1  ;Working drive number
   134                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   135                              <1> workingDD:  ;Create a symbol for the working device driver too
   136 0003C2B5 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   137 0003C2BD ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   138 0003C2C5 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr
   139 0003C2CD <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   140 0003C328 ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   141 0003C330 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   142 0003C338 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   143 0003C33A ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   144                              <1> ;Temp vars, used when walking FAT or changing sectors
   145 0003C342 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   146 0003C34A ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   147                              <1> ;***************************************************|
   148                              <1> ; Needs to be set up before any file access         |
   149                              <1> ; These vars keep track of file access properties   |
   150                              <1> ;   and must be used only for such purposes.        |
   151                              <1> ;***************************************************|
   152 0003C34C ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   153 0003C350 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   154                              <1> 
   155 0003C354 ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   156                              <1> 
   157 0003C355 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   158 0003C359 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   159 0003C35A ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   160                              <1> 
   161 0003C362 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   162 0003C364 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   163                              <1> ;***************************************************|
   164 0003C368 ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   165 0003C36C ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   166 0003C370 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   167 0003C374 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   168 0003C378 ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   169                              <1> ;Directory stuff
   170 0003C37C ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   171 0003C380 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   172 0003C384 ??                  <1>     dirSect     resb 1  ;Sector of current directory
   173 0003C385 ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   174                              <1> ;Error DPB 
   175 0003C386 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   176                              <1>     
   177                              <1> ;Stacks and scratch SFT
   178 0003C38E <res 528h>          <1>     critStack   resq 165
   179 0003C8B6 ????????????????    <1>     critStakTop resq 1
   180                              <1> 
   181 0003C8BE <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   182                              <1> 
   183 0003C90D <res 638h>          <1>     AuxStack    resq 199
   184 0003CF45 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   185 0003CF4D <res 638h>          <1>     DiskStack   resq 199
   186 0003D585 ????????????????    <1>     DiskStakTop resq 1
   187                              <1> 
   188 0003D58D ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   189 0003D58E ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   190                              <1>     dSegLen     equ     $
    14                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    15                                  %include "./Source/Data/staticData.asm"
    16                              <1> 
    17                              <1> ;-----------------------------------:
    18                              <1> ;           Static Data             :
    19                              <1> ;-----------------------------------:
    20 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    21 00000001 01                  <1> dosMinor    db 01h      ;.01
    22 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    22 0000000B 535953              <1>
    23 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    23 00000017 535953              <1>
    16                                  %include "./Source/Data/dispTbl.asm"
    17                              <1> ;Kernel Dispatch Function Table
    18                              <1> 
    19                              <1> kDispTbl:
    20 0000001A 3817                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    21 0000001C B10B                <1>     dw stdinReadEcho - kDispTbl       ;AH = 01H, CHAR IO
    22 0000001E 1E0C                <1>     dw stdoutWrite - kDispTbl         ;AH = 02H, CHAR IO
    23 00000020 570C                <1>     dw stdauxRead - kDispTbl          ;AH = 03H, CHAR IO
    24 00000022 570C                <1>     dw stdauxWrite - kDispTbl         ;AH = 04H, CHAR IO
    25 00000024 570C                <1>     dw stdprnWrite - kDispTbl         ;AH = 05H, CHAR IO
    26 00000026 570C                <1>     dw directCONIO - kDispTbl         ;AH = 06H, CHAR IO
    27 00000028 570C                <1>     dw waitDirectInNoEcho - kDispTbl  ;AH = 07H, CHAR IO
    28 0000002A 900C                <1>     dw waitStdinNoEcho - kDispTbl     ;AH = 08H, CHAR IO
    29 0000002C 910C                <1>     dw printString - kDispTbl         ;AH = 09H, CHAR IO
    30 0000002E D30C                <1>     dw buffStdinInput - kDispTbl      ;AH = 0AH, CHAR IO
    31 00000030 D30C                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    32 00000032 D30C                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    33 00000034 AA1E                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    34 00000036 CB1E                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    35 00000038 640D                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    36 0000003A 640D                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    37 0000003C 640D                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    38 0000003E 640D                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    39 00000040 640D                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    40 00000042 640D                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    41 00000044 640D                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    42 00000046 640D                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    43 00000048 640D                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    44 0000004A A621                <1>     dw return - kDispTbl              ;AH = 18H, RESERVED
    45 0000004C E41E                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    46 0000004E 650D                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    47 00000050 EB1E                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    48 00000052 ED1E                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    49 00000054 A621                <1>     dw return - kDispTbl              ;AH = 1DH, RESERVED
    50 00000056 A621                <1>     dw return - kDispTbl              ;AH = 1EH, RESERVED
    51 00000058 A81F                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    52 0000005A A621                <1>     dw return - kDispTbl              ;AH = 20H, RESERVED
    53 0000005C 780D                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    54 0000005E 780D                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    55 00000060 780D                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    56 00000062 780D                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    57 00000064 571F                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    58 00000066 841F                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    59 00000068 780D                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    60 0000006A 780D                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    61 0000006C 780D                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    62 0000006E 630D                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    63 00000070 630D                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    64 00000072 630D                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    65 00000074 630D                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    66 00000076 851F                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    67 00000078 790D                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    68 0000007A 931F                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    69 0000007C 3917                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    70 0000007E AA1F                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    71 00000080 5F1E                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    72 00000082 F01F                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    73 00000084 0120                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    74 00000086 1620                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    75 00000088 3C17                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    76 0000008A 3C17                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    77 0000008C A108                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    78 0000008E A108                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    79 00000090 A108                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    80 00000092 8C0D                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    81 00000094 8D0D                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    82 00000096 8E0D                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    83 00000098 8F0D                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    84 0000009A C80D                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    85 0000009C D40D                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    86 0000009E D50D                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    87 000000A0 280E                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    88 000000A2 280E                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    89 000000A4 280E                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    90 000000A6 280E                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    91 000000A8 A108                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    92 000000AA 2D11                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    93 000000AC 4A13                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    94 000000AE 7314                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    95 000000B0 3A17                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    96 000000B2 3B17                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    97 000000B4 7F20                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    98 000000B6 280E                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    99 000000B8 280E                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   100 000000BA 8D1E                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   101 000000BC 961E                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   102 000000BE 9120                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   103 000000C0 A220                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   104 000000C2 7421                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   105 000000C4 7B21                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   106 000000C6 280E                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   107 000000C8 A108                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   108 000000CA 2416                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   109 000000CC 7C21                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   110 000000CE 280E                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   111 000000D0 280E                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   112 000000D2 280E                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   113 000000D4 A521                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   114 000000D6 A521                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   115 000000D8 A521                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   116 000000DA A108                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   117 000000DC A621                <1>     dw return - kDispTbl              ;AH = 61H, RESERVED
   118 000000DE 9F1E                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   119 000000E0 A621                <1>     dw return - kDispTbl              ;AH = 63H, RESERVED
   120 000000E2 A81E                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   121 000000E4 3C17                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   122 000000E6 3C17                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   123 000000E8 280E                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   124 000000EA 280E                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   125 000000EC A621                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   126                              <1> kDispTblL  equ $ - kDispTbl 
   127                              <1> 
   128                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   129 000000EE F420                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   130                              <1> mDispTblL   equ     $ - mDispTbl
    17                                  %include "./Source/Debug/debug.asm"
    18                              <1> ;This file contains debugging macros, procs and strings
    19                              <1> ; that we can use to output to COM1 bypassing the operating system.
    20                              <1> ;A serial terminal must be connected for this to work.
    21                              <1> 
    22                              <1> ;Variables and equates
    23                              <1> 
    24 000000F0 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    25                              <1> 
    26 000000F8 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    26 00000101 39414243444546      <1>
    27                              <1> ;Common procedures
    28                              <1> debMakeDebuggerRespond:
    29 00000108 488D2D26000000      <1>     lea rbp, .msg
    30 0000010F E8AF000000          <1>     call debPrintNullString
    31 00000114 B900001000          <1>     mov ecx, 100000h
    32                              <1> .waiting:
    33 00000119 FFC9                <1>     dec ecx
    34 0000011B 740C                <1>     jz .timeout
    35 0000011D B402                <1>     mov ah, 02h ;Blocking recieve!
    36 0000011F 31D2                <1>     xor edx, edx
    37 00000121 CD34                <1>     int 34h
    38 00000123 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    39 00000126 75F1                <1>     jnz .waiting
    40 00000128 C3                  <1>     ret
    41                              <1> .timeout:
    42 00000129 488D2D47000000      <1>     lea rbp, .msg2
    43 00000130 E98E000000          <1>     jmp debPrintNullString
    44 00000135 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    44 0000013E 6B6579206174207468- <1>
    44 00000147 65207465726D696E61- <1>
    44 00000150 6C20746F20636F6E74- <1>
    44 00000159 696E7565206F722077- <1>
    44 00000162 61697420666F722074- <1>
    44 0000016B 696D656F75742E2E2E- <1>
    44 00000174 0A0D00              <1>
    45 00000177 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    45 00000180 436F6E74696E75696E- <1>
    45 00000189 672E2E2E0A0D00      <1>
    46                              <1> debPrintHexByte:
    47                              <1> ;Print the hex byte in al as a hex value
    48 00000190 52                  <1>     push rdx
    49 00000191 53                  <1>     push rbx
    50 00000192 50                  <1>     push rax
    51                              <1> 
    52 00000193 88C2                <1>     mov dl, al           ;save byte in dl
    53 00000195 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    54 00000199 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    55 0000019E 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    56 000001A2 E80C000000          <1>     call .wrchar
    57 000001A7 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    58 000001AA E804000000          <1>     call .wrchar
    59                              <1> 
    60 000001AF 58                  <1>     pop rax
    61 000001B0 5B                  <1>     pop rbx
    62 000001B1 5A                  <1>     pop rdx
    63 000001B2 C3                  <1>     ret
    64                              <1> .wrchar:
    65 000001B3 6687DB              <1>     xchg bx, bx
    66 000001B6 488D1D3BFFFFFF      <1>     lea rbx, debascii
    67 000001BD D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    68 000001BE B401                <1>     mov ah, 01h
    69 000001C0 CD34                <1>     int 34h  ;print char
    70 000001C2 C3                  <1>     ret
    71                              <1> 
    72                              <1> debPrintNullString:
    73                              <1> ;Print a null terminated string pointed to by rbp
    74 000001C3 56                  <1>     push rsi
    75 000001C4 50                  <1>     push rax
    76 000001C5 52                  <1>     push rdx
    77 000001C6 31D2                <1>     xor edx, edx    ;Select COM1
    78 000001C8 4889EE              <1>     mov rsi, rbp
    79                              <1> .getChar:
    80 000001CB AC                  <1>     lodsb
    81 000001CC 84C0                <1>     test al, al
    82 000001CE 7406                <1>     jz .exit
    83 000001D0 B401                <1>     mov ah, 01h
    84 000001D2 CD34                <1>     int 34h
    85 000001D4 EBF5                <1>     jmp short .getChar
    86                              <1> .exit:
    87 000001D6 5A                  <1>     pop rdx
    88 000001D7 58                  <1>     pop rax
    89 000001D8 5E                  <1>     pop rsi
    90 000001D9 C3                  <1>     ret
    91                              <1> 
    92                              <1> debPrintDOSStack:
    93                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    94                              <1> ;Shows me which function, and parameters passed and returned
    95 000001DA 488D2DA5010000      <1>     lea rbp, .a1
    96 000001E1 E8DDFFFFFF          <1>     call debPrintNullString
    97 000001E6 488B15(90C10300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    98 000001ED 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
    99 000001F4 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   100 000001F7 E802030000          <1>     call overlayQword
   101 000001FC 4881C316000000      <1>     add rbx, 22
   102 00000203 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   103 00000207 E8F2020000          <1>     call overlayQword
   104 0000020C 4881C316000000      <1>     add rbx, 22
   105 00000213 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   106 00000217 E8E2020000          <1>     call overlayQword
   107 0000021C 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   108 00000223 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   109 00000227 E8D2020000          <1>     call overlayQword
   110 0000022C 4881C316000000      <1>     add rbx, 22 
   111 00000233 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   112 00000237 E8C2020000          <1>     call overlayQword
   113 0000023C 4881C316000000      <1>     add rbx, 22
   114 00000243 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   115 00000247 E8B2020000          <1>     call overlayQword
   116 0000024C 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   117 00000253 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   118 00000257 E8A2020000          <1>     call overlayQword
   119 0000025C 4881C316000000      <1>     add rbx, 22
   120 00000263 488B05(90C10300)    <1>     mov rax, qword [oldRSP]
   121 0000026A 480560000000        <1>     add rax, callerFrame_size
   122 00000270 E889020000          <1>     call overlayQword
   123 00000275 4881C316000000      <1>     add rbx, 22
   124 0000027C 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   125 00000280 E879020000          <1>     call overlayQword
   126 00000285 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   127 0000028C 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   128 00000290 E869020000          <1>     call overlayQword
   129 00000295 488D2D06000000      <1>     lea rbp, .a0
   130 0000029C E822FFFFFF          <1>     call debPrintNullString
   131 000002A1 C3                  <1>     ret
   132                              <1> 
   133 000002A2 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   133 000002AB 303030303030303030- <1>
   133 000002B4 30306820            <1>
   134 000002B8 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   134 000002C1 303030303030303030- <1>
   134 000002CA 30306820            <1>
   135 000002CE 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   135 000002D7 303030303030303030- <1>
   135 000002E0 30306820            <1>
   136 000002E4 0A0D                <1>     db  0Ah,0Dh
   137 000002E6 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   137 000002EF 303030303030303030- <1>
   137 000002F8 30306820            <1>
   138 000002FC 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   138 00000305 303030303030303030- <1>
   138 0000030E 30306820            <1>
   139 00000312 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   139 0000031B 303030303030303030- <1>
   139 00000324 30306820            <1>
   140 00000328 0A0D                <1>     db 0Ah, 0Dh
   141 0000032A 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   141 00000333 303030303030303030- <1>
   141 0000033C 30306820            <1>
   142 00000340 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   142 00000349 303030303030303030- <1>
   142 00000352 30306820            <1>
   143 00000356 7269703D3030303030- <1>     db "rip=0000000000000000h"
   143 0000035F 303030303030303030- <1>
   143 00000368 303068              <1>
   144 0000036B 0A0D                <1>     db 0Ah, 0Dh
   145 0000036D 666C673D3030303030- <1>     db "flg=0000000000000000h "
   145 00000376 303030303030303030- <1>
   145 0000037F 30306820            <1>
   146 00000383 0A0D00              <1>     db 0Ah,0Dh,0
   147 00000386 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   147 0000038F 206F6E20496E742034- <1>
   147 00000398 316820737461636B0A- <1>
   147 000003A1 0D00                <1>
   148                              <1> 
   149                              <1> debDPBptr:
   150                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   151 000003A3 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   152 000003AA 4889E8              <1>     mov rax, rbp
   153 000003AD E84C010000          <1>     call overlayQword
   154 000003B2 488D2D06000000      <1>     lea rbp, .dpb
   155 000003B9 E805FEFFFF          <1>     call debPrintNullString
   156 000003BE C3                  <1>     ret
   157                              <1> .dpb: 
   158 000003BF 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   158 000003C8 203030303030303030- <1>
   158 000003D1 303030303030303068- <1>
   158 000003DA 200A0D00            <1>
   159                              <1> 
   160                              <1> debDPBBPBptr:
   161                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   162                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   163 000003DE 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   164 000003E5 4889E8              <1>     mov rax, rbp
   165 000003E8 E811010000          <1>     call overlayQword
   166 000003ED 4881C321000000      <1>     add rbx, 33
   167 000003F4 4889F0              <1>     mov rax, rsi
   168 000003F7 E802010000          <1>     call overlayQword
   169 000003FC 488D2D06000000      <1>     lea rbp, .dpb
   170 00000403 E8BBFDFFFF          <1>     call debPrintNullString
   171 00000408 C3                  <1>     ret
   172                              <1> .dpb: 
   173 00000409 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   173 00000412 203030303030303030- <1>
   173 0000041B 303030303030303068- <1>
   173 00000424 2066726F6D20        <1>
   174 0000042A 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   174 00000433 203030303030303030- <1>
   174 0000043C 303030303030303068- <1>
   174 00000445 200A0D00            <1>
   175                              <1> overlayByte:
   176                              <1>     ;Called with number in rax
   177                              <1>     ;pointer to START of 16 byte space for number in rbx
   178 00000449 53                  <1>     push rbx
   179 0000044A 51                  <1>     push rcx
   180 0000044B 52                  <1>     push rdx
   181 0000044C 55                  <1>     push rbp
   182 0000044D 4889DD              <1>     mov rbp, rbx
   183 00000450 4889C2              <1>     mov rdx, rax
   184 00000453 48FFC5              <1>     inc rbp ;Go to end of number
   185                              <1> 
   186 00000456 488D1D9BFCFFFF      <1>     lea rbx, debascii
   187 0000045D 88D0                <1>     mov al, dl  ;Go low nybble first
   188 0000045F 240F                <1>     and al, 0Fh
   189 00000461 D7                  <1>     xlatb
   190 00000462 884500              <1>     mov byte [rbp], al
   191 00000465 48FFCD              <1>     dec rbp ;Go down one char pos
   192 00000468 88D0                <1>     mov al, dl
   193 0000046A 24F0                <1>     and al, 0F0h    ;Hi nybble next
   194 0000046C C0E804              <1>     shr al, 4   ;Shift hi nybble low
   195 0000046F D7                  <1>     xlatb
   196 00000470 884500              <1>     mov byte [rbp], al  ;Store char
   197                              <1> 
   198 00000473 5D                  <1>     pop rbp
   199 00000474 5A                  <1>     pop rdx
   200 00000475 59                  <1>     pop rcx
   201 00000476 5B                  <1>     pop rbx
   202 00000477 C3                  <1>     ret
   203                              <1> 
   204                              <1> overlayWord:
   205                              <1>     ;Called with number in rax
   206                              <1>     ;pointer to START of 16 byte space for number in rbx
   207 00000478 53                  <1>     push rbx
   208 00000479 51                  <1>     push rcx
   209 0000047A 52                  <1>     push rdx
   210 0000047B 55                  <1>     push rbp
   211 0000047C 4889DD              <1>     mov rbp, rbx
   212 0000047F 4889C2              <1>     mov rdx, rax
   213 00000482 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   214 00000489 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   215 0000048E 488D1D63FCFFFF      <1>     lea rbx, debascii
   216                              <1> .ow0:
   217 00000495 88D0                <1>     mov al, dl  ;Go low nybble first
   218 00000497 240F                <1>     and al, 0Fh
   219 00000499 D7                  <1>     xlatb
   220 0000049A 884500              <1>     mov byte [rbp], al
   221 0000049D 48FFCD              <1>     dec rbp ;Go down one char pos
   222 000004A0 88D0                <1>     mov al, dl
   223 000004A2 24F0                <1>     and al, 0F0h    ;Hi nybble next
   224 000004A4 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   225 000004A7 D7                  <1>     xlatb
   226 000004A8 884500              <1>     mov byte [rbp], al  ;Store char
   227 000004AB 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   228 000004AF 48FFCD              <1>     dec rbp
   229 000004B2 FFC9                <1>     dec ecx
   230 000004B4 75DF                <1>     jnz .ow0
   231 000004B6 5D                  <1>     pop rbp
   232 000004B7 5A                  <1>     pop rdx
   233 000004B8 59                  <1>     pop rcx
   234 000004B9 5B                  <1>     pop rbx
   235 000004BA C3                  <1>     ret
   236                              <1> 
   237                              <1> overlayDword:
   238                              <1>     ;Called with number in rax
   239                              <1>     ;pointer to START of 16 byte space for number in rbx
   240 000004BB 53                  <1>     push rbx
   241 000004BC 51                  <1>     push rcx
   242 000004BD 52                  <1>     push rdx
   243 000004BE 55                  <1>     push rbp
   244 000004BF 4889DD              <1>     mov rbp, rbx
   245 000004C2 4889C2              <1>     mov rdx, rax
   246 000004C5 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   247 000004CC B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   248 000004D1 488D1D20FCFFFF      <1>     lea rbx, debascii
   249                              <1> .od0:
   250 000004D8 88D0                <1>     mov al, dl  ;Go low nybble first
   251 000004DA 240F                <1>     and al, 0Fh
   252 000004DC D7                  <1>     xlatb
   253 000004DD 884500              <1>     mov byte [rbp], al
   254 000004E0 48FFCD              <1>     dec rbp ;Go down one char pos
   255 000004E3 88D0                <1>     mov al, dl
   256 000004E5 24F0                <1>     and al, 0F0h    ;Hi nybble next
   257 000004E7 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   258 000004EA D7                  <1>     xlatb
   259 000004EB 884500              <1>     mov byte [rbp], al  ;Store char
   260 000004EE 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   261 000004F2 48FFCD              <1>     dec rbp
   262 000004F5 FFC9                <1>     dec ecx
   263 000004F7 75DF                <1>     jnz .od0
   264 000004F9 5D                  <1>     pop rbp
   265 000004FA 5A                  <1>     pop rdx
   266 000004FB 59                  <1>     pop rcx
   267 000004FC 5B                  <1>     pop rbx
   268 000004FD C3                  <1>     ret
   269                              <1> 
   270                              <1> overlayQword:
   271                              <1>     ;Called with number in rax
   272                              <1>     ;pointer to START of 16 byte space for number in rbx
   273 000004FE 53                  <1>     push rbx
   274 000004FF 51                  <1>     push rcx
   275 00000500 52                  <1>     push rdx
   276 00000501 55                  <1>     push rbp
   277 00000502 4889DD              <1>     mov rbp, rbx
   278 00000505 4889C2              <1>     mov rdx, rax
   279 00000508 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   280 0000050F B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   281 00000514 488D1DDDFBFFFF      <1>     lea rbx, debascii
   282                              <1> .oq0:
   283 0000051B 88D0                <1>     mov al, dl  ;Go low nybble first
   284 0000051D 240F                <1>     and al, 0Fh
   285 0000051F D7                  <1>     xlatb
   286 00000520 884500              <1>     mov byte [rbp], al
   287 00000523 48FFCD              <1>     dec rbp ;Go down one char pos
   288 00000526 88D0                <1>     mov al, dl
   289 00000528 24F0                <1>     and al, 0F0h    ;Hi nybble next
   290 0000052A C0E804              <1>     shr al, 4   ;Shift hi nybble low
   291 0000052D D7                  <1>     xlatb
   292 0000052E 884500              <1>     mov byte [rbp], al  ;Store char
   293 00000531 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   294 00000535 48FFCD              <1>     dec rbp
   295 00000538 FFC9                <1>     dec ecx
   296 0000053A 75DF                <1>     jnz .oq0
   297 0000053C 5D                  <1>     pop rbp
   298 0000053D 5A                  <1>     pop rdx
   299 0000053E 59                  <1>     pop rcx
   300 0000053F 5B                  <1>     pop rbx
   301 00000540 C3                  <1>     ret
   302                              <1> 
   303                              <1> debPrintFunctionName:
   304                              <1> ;Prints the DOS function that has been entered
   305                              <1> ;Entered with ah = Function number
   306 00000541 88E0                <1>     mov al, ah  ;Get dos function number
   307 00000543 488D1DAEFBFFFF      <1>     lea rbx, debascii
   308 0000054A 488D1535000000      <1>     lea rdx, .number
   309 00000551 24F0                <1>     and al, 0F0h    ;Get high nybble first
   310 00000553 C0E804              <1>     shr al, 4
   311 00000556 D7                  <1>     xlatb
   312 00000557 8802                <1>     mov byte [rdx], al
   313 00000559 88E0                <1>     mov al, ah
   314 0000055B 240F                <1>     and al, 0Fh
   315 0000055D D7                  <1>     xlatb
   316 0000055E 884201              <1>     mov byte [rdx + 1], al
   317 00000561 488D2D06000000      <1>     lea rbp, .dosString
   318 00000568 E856FCFFFF          <1>     call debPrintNullString
   319 0000056D C3                  <1>     ret
   320 0000056E 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   320 00000577 696F6E20496E742034- <1>
   320 00000580 31682F41483D        <1>
   321 00000586 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   322                              <1> 
   323                              <1> ;----------------:
   324                              <1> ;!!!! MACROS !!!!:
   325                              <1> ;----------------:
   326                              <1> ;Insert macro when entering a debug block
   327                              <1> %macro debugEnterM 0
   328                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   329                              <1>     mov rsp, debStackTop
   330                              <1> ;Push all registers except rsp on stack
   331                              <1>     push rax
   332                              <1>     push rbx
   333                              <1>     push rcx
   334                              <1>     push rdx
   335                              <1>     push rsi
   336                              <1>     push rdi
   337                              <1>     push rbp
   338                              <1>     push r8
   339                              <1>     push r9
   340                              <1>     push r10
   341                              <1>     push r11
   342                              <1>     push r12
   343                              <1>     push r13
   344                              <1>     push r14
   345                              <1>     push r15
   346                              <1>     pushfq
   347                              <1> %endmacro
   348                              <1> ;Insert macro when exiting a debug block
   349                              <1> %macro debugExitM 0
   350                              <1>     popfq
   351                              <1>     pop r15
   352                              <1>     pop r14
   353                              <1>     pop r13
   354                              <1>     pop r12
   355                              <1>     pop r11
   356                              <1>     pop r10
   357                              <1>     pop r9
   358                              <1>     pop r8
   359                              <1>     pop rbp
   360                              <1>     pop rdi
   361                              <1>     pop rsi
   362                              <1>     pop rdx
   363                              <1>     pop rcx
   364                              <1>     pop rbx
   365                              <1>     pop rax
   366                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   367                              <1> %endmacro
    18                                  %include "./Source/Kernel/FAT/bufferFunctions.asm"
    19                              <1> ;This file contains FAT disk buffer related functions that
    20                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    21                              <1> ;----------------------------------------------------
    22                              <1> ;           Externally referenced functions         :
    23                              <1> ;----------------------------------------------------
    24                              <1> 
    25                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    26                              <1> ;Sets the buffer in rdi to the head of the chain
    27                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    28                              <1> ;Output: Buffer header set to the head of the chain
    29 0000058C 48393D(A1C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    30 00000593 7428                <1>     je .exit
    31 00000595 56                  <1>     push rsi
    32 00000596 488B35(A1C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    33                              <1> .mainlp:
    34 0000059D 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    35 000005A0 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    36 000005A2 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    37 000005A5 EBF6                <1>     jmp short .mainlp
    38                              <1> .fnd:
    39 000005A7 57                  <1>     push rdi
    40 000005A8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    41 000005AB 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    42 000005AE 5F                  <1>     pop rdi ;Get original buf back
    43 000005AF 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    44 000005B2 488735(A1C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    45 000005B9 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    46 000005BC 5E                  <1>     pop rsi
    47                              <1> .exit:
    48 000005BD C3                  <1>     ret
    49                              <1> 
    50                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h
    51 000005BE E846000000          <1>     call flushBuffer
    52 000005C3 7306                <1>     jnc .exit
    53                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    54 000005C5 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    55                              <1> .exit:
    56 000005CB C3                  <1>     ret
    57                              <1> 
    58                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    59                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    60                              <1> ;Output: rdi = First disk buffer
    61 000005CC 488B3D(A1C00300)    <1>     mov rdi, [bufHeadPtr]
    62 000005D3 57                  <1>     push rdi
    63                              <1> .lp:
    64 000005D4 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    65 000005D8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    66 000005DB 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    67 000005E2 75F0                <1>     jne .lp
    68 000005E4 5F                  <1>     pop rdi
    69 000005E5 C3                  <1>     ret
    70                              <1> 
    71                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    72                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    73                              <1> ; second buffer in the chain in rdi
    74                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    75                              <1> ;Output: rdi = Second buffer in the chain
    76 000005E6 E8A1FFFFFF          <1>     call makeBufferMostRecentlyUsed
    77 000005EB 488B3D(A1C00300)    <1>     mov rdi, qword [bufHeadPtr]
    78 000005F2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    79 000005F5 C3                  <1>     ret
    80                              <1> 
    81                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    82                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    83                              <1> ;Input: rdi = Buffer header to start searching at
    84                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    85                              <1> ;        ZF=ZE => No unreferenced buffer found
    86 000005F6 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    87 000005FA 750C                <1>     jnz .exit
    88 000005FC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    89 000005FF 4881FFFFFFFFFF      <1>     cmp rdi, -1
    90 00000606 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    91                              <1> .exit:
    92 00000608 C3                  <1>     ret
    93                              <1> 
    94                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    95                              <1> ;Flushes the data in a sector buffer to disk!
    96                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
    97                              <1> ;Exit:  CF=NC : Success
    98                              <1> ;       CF=CY : Fail, terminate the request
    99                              <1> ;First make request to device driver
   100 00000609 50                  <1>     push rax
   101 0000060A 53                  <1>     push rbx
   102 0000060B 51                  <1>     push rcx
   103 0000060C 52                  <1>     push rdx
   104 0000060D 56                  <1>     push rsi
   105 0000060E 55                  <1>     push rbp
   106 0000060F F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   107 00000613 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   108                              <1> .fbRequest0:
   109 00000615 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   110 0000061A F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   111 0000061E 7406                <1>     jz .fbRequest1
   112 00000620 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   113                              <1> .fbRequest1:
   114 00000626 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   115 00000629 B901000000          <1>     mov ecx, 1  ;One sector to copy
   116 0000062E 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   117 00000632 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   118 00000636 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   119 0000063A E81A150000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   120 0000063F E828130000          <1>     call absDiskDriverCall    ;Make Driver Request
   121 00000644 7525                <1>     jnz .fbFail
   122                              <1> ;Now check if the buffer was a FAT, to write additional copies
   123 00000646 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   124 0000064A 7417                <1>     jz .fbFreeExit  ;If not, exit
   125 0000064C FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   126 0000064F 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   127 00000651 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   128 00000654 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   129 00000658 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   130                              <1> .fbFreeExit1:
   131 0000065D 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   132 00000660 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   133                              <1> .fbFreeExit:
   134 00000663 F8                  <1>     clc
   135                              <1> .fbExitFail:
   136 00000664 5D                  <1>     pop rbp
   137 00000665 5E                  <1>     pop rsi
   138 00000666 5A                  <1>     pop rdx
   139 00000667 59                  <1>     pop rcx
   140 00000668 5B                  <1>     pop rbx
   141 00000669 58                  <1>     pop rax
   142 0000066A C3                  <1>     ret
   143                              <1> .fbFail:
   144                              <1> ;Enter here only if the request failed
   145 0000066B FFCE                <1>     dec esi
   146 0000066D 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   147                              <1> ;Request failed thrice, critical error call
   148 0000066F 48893D(74C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   149 00000676 48892D(86C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   150 0000067D 89C7                <1>     mov edi, eax    ;Save status word in di
   151 0000067F 48892D(86C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   152 00000686 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   153 00000689 B419                <1>     mov ah, critWrite | critFailOK | critRetryOK ;Set bits
   154                              <1>     ;Test for correct buffer data type
   155 0000068B F6C401              <1>     test ah, dosBuffer
   156 0000068E 7505                <1>     jnz .fbFail0
   157 00000690 80CC00              <1>     or ah, critDOS
   158 00000693 EB14                <1>     jmp short .fbFailMain
   159                              <1> .fbFail0:
   160 00000695 F6C402              <1>     test ah, fatBuffer
   161 00000698 7504                <1>     jnz .fbFail1
   162 0000069A B402                <1>     mov ah, critFAT
   163 0000069C EB0B                <1>     jmp short .fbFailMain
   164                              <1> .fbFail1:
   165 0000069E F6C404              <1>     test ah, dirBuffer
   166 000006A1 7504                <1>     jnz .fbFail2
   167 000006A3 B404                <1>     mov ah, critDir
   168 000006A5 EB02                <1>     jmp short .fbFailMain
   169                              <1> .fbFail2:
   170                              <1> ;Here it must be a data buffer
   171 000006A7 B406                <1>     mov ah, critData
   172                              <1> .fbFailMain:
   173 000006A9 8825(84C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   174 000006AF 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   175 000006B3 E8BF100000          <1>     call criticalDOSError   ;Return in al the return code
   176 000006B8 488B3D(74C10300)    <1>     mov rdi, qword [xInt44RDI]
   177 000006BF 488B2D(86C30300)    <1>     mov rbp, qword [tmpDPBPtr]
   178 000006C6 3C01                <1>     cmp al, critRetry
   179 000006C8 0F8447FFFFFF        <1>     je .fbRequest0
   180                              <1>     ;Else we fail (Ignore=Fail here)
   181 000006CE 66C705(2FC10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   181 000006D6 00                  <1>
   182 000006D7 F9                  <1>     stc ;Set error flag to indicate fail
   183 000006D8 E987FFFFFF          <1>     jmp .fbExitFail
   184                              <1> 
   185                              <1> 
   186                              <1> testDirtyBufferForDrive:    ;External linkage
   187                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   188                              <1> ;Input: al = Drive number (0 based)
   189                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   190                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   191 000006DD 53                  <1>     push rbx
   192 000006DE 488B1D(A1C00300)    <1>     mov rbx, qword [bufHeadPtr]
   193                              <1> .tdbfdCheckBuffer:
   194 000006E5 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   195 000006E8 7509                <1>     jne .tdbfdGotoNextBuffer
   196 000006EA F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   197 000006EE 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   198 000006F0 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   199                              <1> .tdbfdExit:
   200 000006F1 5B                  <1>     pop rbx
   201 000006F2 C3                  <1>     ret
   202                              <1> .tdbfdGotoNextBuffer:
   203 000006F3 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   204 000006F6 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   205 000006FD 74F2                <1>     je .tdbfdExit
   206 000006FF EBE4                <1>     jmp short .tdbfdCheckBuffer
   207                              <1> 
   208                              <1> freeBuffersForDPB:
   209                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   210                              <1> ; to have a drive number of -1, thus freeing it
   211                              <1> ;Given DPB is in rbp
   212 00000701 53                  <1>     push rbx
   213 00000702 488B1D(A1C00300)    <1>     mov rbx, qword [bufHeadPtr]
   214                              <1> .i0:
   215 00000709 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   216 0000070D 7506                <1>     jne .i1 ;If no, skip freeing
   217 0000070F 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   218                              <1> .i1:
   219 00000715 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   220 00000718 4881FBFFFFFFFF      <1>     cmp rbx, -1
   221 0000071F 75E8                <1>     jne .i0
   222                              <1> .exit:
   223 00000721 5B                  <1>     pop rbx
   224 00000722 C3                  <1>     ret
   225                              <1> 
   226                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
   227                              <1> ;
   228                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   229                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   230                              <1> ;Flushes if not in disk change mode. 
   231                              <1> ;If in disk change mode, will check to see if the selected buffer 
   232                              <1> ; has data referring a device using the same DPB as we are changing.
   233                              <1> ; If it is, skip flushing, if not, flush first!
   234                              <1> ;
   235                              <1> ;This function will return a pointer to the desired data sector OR 
   236                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   237                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   238                              <1> ;Entry: rax = Sector to read
   239                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   240                              <1> ;       qword [workingDPB] = DPB to use for transaction
   241                              <1> ;Exit:  CF=NC => 
   242                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   243                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   244 00000723 51                  <1>     push rcx
   245 00000724 52                  <1>     push rdx
   246 00000725 56                  <1>     push rsi
   247 00000726 57                  <1>     push rdi
   248 00000727 488B35(B5C20300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   249 0000072E 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   250 00000730 E865010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   251 00000735 4881FFFFFFFFFF      <1>     cmp rdi, -1
   252 0000073C 740D                <1>     je .rbReadNewSector
   253                              <1> .rbExit:
   254 0000073E F8                  <1>     clc
   255                              <1> .rbExitNoFlag:
   256 0000073F 5F                  <1>     pop rdi
   257 00000740 5E                  <1>     pop rsi
   258 00000741 5A                  <1>     pop rdx
   259 00000742 59                  <1>     pop rcx
   260 00000743 488B1D(3AC30300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   261 0000074A C3                  <1>     ret
   262                              <1> .rbReadNewSector:
   263 0000074B E8F3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   264 00000750 803D(8DD50300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   265 00000757 7506                <1>     jne .flush  ;We are not, flush buffer
   266 00000759 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   267 0000075D 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   268                              <1> .flush:
   269 0000075F E85AFEFFFF          <1>     call flushAndFreeBuffer
   270 00000764 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   271                              <1> .skipFlush:
   272                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   273 00000766 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   274 00000769 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   275 0000076C 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   276 00000770 80F902              <1>     cmp cl, fatBuffer
   277 00000773 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   278 00000775 7503                <1>     jne .rbNonFATbuffer
   279 00000777 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   280                              <1> .rbNonFATbuffer:
   281 0000077A 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   282 0000077D 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   283 00000780 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   284 00000783 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   285 00000787 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   286 0000078B E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   287 00000790 EBAD                <1>     jmp short .rbExitNoFlag
   288                              <1> 
   289                              <1> readSectorBuffer:   ;Internal Linkage
   290                              <1> ;Reads a sector into a built sector buffer
   291                              <1> ;Entry: rdi = Pointer to buffer header
   292                              <1> ;Exit:  CF=NC : Success
   293                              <1> ;       CF=CY : Fail, terminate the request
   294                              <1> ;       rbx pointing to buffer header
   295                              <1> ;First make request to device driver
   296 00000792 50                  <1>     push rax
   297 00000793 53                  <1>     push rbx
   298 00000794 51                  <1>     push rcx
   299 00000795 52                  <1>     push rdx
   300 00000796 56                  <1>     push rsi
   301 00000797 55                  <1>     push rbp
   302                              <1> .rsRequest0:
   303 00000798 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   304 0000079D F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   305 000007A1 7406                <1>     jz .rsRequest1
   306 000007A3 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   307                              <1> .rsRequest1:
   308 000007A9 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   309 000007AC B901000000          <1>     mov ecx, 1  ;One sector to copy
   310 000007B1 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   311 000007B5 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   312 000007B9 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   313 000007BD E8A2130000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   314 000007C2 E8A5110000          <1>     call absDiskDriverCall    ;Make Driver Request
   315 000007C7 7508                <1>     jnz .rsFail
   316                              <1> .rsExit:
   317 000007C9 F8                  <1>     clc
   318                              <1> .rsExitFail:
   319 000007CA 5D                  <1>     pop rbp
   320 000007CB 5E                  <1>     pop rsi
   321 000007CC 5A                  <1>     pop rdx
   322 000007CD 59                  <1>     pop rcx
   323 000007CE 5B                  <1>     pop rbx
   324 000007CF 58                  <1>     pop rax
   325 000007D0 C3                  <1>     ret
   326                              <1> .rsFail:
   327                              <1> ;Enter here only if the request failed
   328 000007D1 FFCE                <1>     dec esi
   329 000007D3 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   330                              <1> ;Request failed thrice, critical error call
   331 000007D5 48893D(74C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   332 000007DC 48892D(86C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   333 000007E3 89C7                <1>     mov edi, eax    ;Save status word in di
   334 000007E5 48892D(86C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   335 000007EC 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   336 000007EF B418                <1>     mov ah, critRead | critFailOK | critRetryOK ;Set bits
   337                              <1>     ;Test for correct buffer data type
   338 000007F1 F6C401              <1>     test ah, dosBuffer
   339 000007F4 7505                <1>     jnz .rsFail0
   340 000007F6 80CC00              <1>     or ah, critDOS
   341 000007F9 EB14                <1>     jmp short .rsFailMain
   342                              <1> .rsFail0:
   343 000007FB F6C402              <1>     test ah, fatBuffer
   344 000007FE 7504                <1>     jnz .rsFail1
   345 00000800 B402                <1>     mov ah, critFAT
   346 00000802 EB0B                <1>     jmp short .rsFailMain
   347                              <1> .rsFail1:
   348 00000804 F6C404              <1>     test ah, dirBuffer
   349 00000807 7504                <1>     jnz .rsFail2
   350 00000809 B404                <1>     mov ah, critDir
   351 0000080B EB02                <1>     jmp short .rsFailMain
   352                              <1> .rsFail2:
   353                              <1> ;Here it must be a data buffer
   354 0000080D B406                <1>     mov ah, critData
   355                              <1> .rsFailMain:
   356 0000080F 8825(84C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   357 00000815 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   358 00000819 E8590F0000          <1>     call criticalDOSError
   359 0000081E 488B3D(74C10300)    <1>     mov rdi, qword [xInt44RDI]
   360 00000825 488B2D(86C30300)    <1>     mov rbp, qword [tmpDPBPtr]
   361 0000082C 3C01                <1>     cmp al, critRetry
   362 0000082E 0F8464FFFFFF        <1>     je .rsRequest0
   363                              <1>     ;Else we fail (Ignore=Fail here)
   364 00000834 66C705(2FC10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   364 0000083C 00                  <1>
   365 0000083D F9                  <1>     stc ;Set error flag to indicate fail
   366 0000083E E987FFFFFF          <1>     jmp .rsExitFail
   367                              <1>     
   368                              <1> findLRUBuffer: ;Internal Linkage
   369                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   370                              <1> ; in rbx and the currBuff variable
   371                              <1> ;Input: Nothing
   372                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   373                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   374 00000843 52                  <1>     push rdx
   375 00000844 488B3D(A1C00300)    <1>     mov rdi, qword [bufHeadPtr]
   376 0000084B 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   377 0000084F 7436                <1>     je .flbExit 
   378 00000851 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   379 00000858 742D                <1>     je .flbExit
   380                              <1> .flbWalk:
   381 0000085A 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   382 0000085D 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   383 00000860 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   384 00000864 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   385 00000866 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   386 0000086D 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   387 0000086F 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   388                              <1> .flbHeadLink:
   389 00000876 488B15(A1C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   390 0000087D 48893D(A1C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   391 00000884 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   392                              <1> .flbExit:
   393 00000887 5A                  <1>     pop rdx
   394 00000888 48893D(3AC30300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   395 0000088F C3                  <1>     ret
   396                              <1> .flbFreeLink:
   397 00000890 51                  <1>     push rcx
   398 00000891 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   399 00000894 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   400 00000897 59                  <1>     pop rcx
   401 00000898 EBDC                <1>     jmp short .flbHeadLink
   402                              <1> 
   403                              <1> findSectorInBuffer:     ;Internal linkage
   404                              <1> ;Finds the Buffer for a sector
   405                              <1> ;If the sector is not in a buffer, returns with a -1
   406                              <1> ;Input: rax = Sector number
   407                              <1> ;        dl = Drive number
   408                              <1> ;Output: rdi = Buffer hdr pointer or -1
   409 0000089A 488B3D(A1C00300)    <1>     mov rdi, qword [bufHeadPtr]
   410                              <1> .fsiCheckBuffer:
   411 000008A1 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   412 000008A4 7507                <1>     jne .fsiGotoNextBuffer
   413 000008A6 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   414 000008AA 7501                <1>     jne .fsiGotoNextBuffer
   415                              <1> .fsiExit:
   416 000008AC C3                  <1>     ret
   417                              <1> .fsiGotoNextBuffer:
   418 000008AD 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   419 000008B0 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   420 000008B7 74F3                <1>     je .fsiExit
   421 000008B9 EBE6                <1>     jmp short .fsiCheckBuffer
    19                                  %include "./Source/Kernel/FAT/fat.asm"
    20                              <1> ;---------------------------------------------------:
    21                              <1> ;                   KERNEL FUNCTIONS                :
    22                              <1> ;---------------------------------------------------:
    23                              <1> makeDIR:           ;ah = 39h
    24                              <1> removeDIR:         ;ah = 3Ah
    25                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    26                              <1> getCurrentDIR:     ;ah = 47h
    27                              <1> getSetFileDateTime:;ah = 57h
    28                              <1> trueName:          ;ah = 60h, get fully qualified name
    29 000008BB C3                  <1>     ret
    30                              <1> 
    31                              <1> 
    32                              <1> ;-----------------------------------:
    33                              <1> ;       File System routines        :
    34                              <1> ;-----------------------------------:
    35                              <1> getFATtype:
    36                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    37                              <1> ;Entry: rbp = DPB to ascertain FAT
    38                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    39 000008BC 53                  <1>     push rbx
    40 000008BD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    41 000008C0 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    42 000008C5 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    43 000008CB 730F                <1>     jae .exit
    44 000008CD FFC9                <1>     dec ecx     ;FAT 12 marker
    45 000008CF 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    46 000008D5 7205                <1>     jb .exit
    47 000008D7 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    48                              <1> .exit:
    49 000008DC 5B                  <1>     pop rbx
    50 000008DD C3                  <1>     ret
    51                              <1> 
    52                              <1> clust2FATEntry:
    53                              <1> ;Converts a cluster number to a offset in the FAT
    54                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    55                              <1> ;        eax = Cluster number to look for
    56                              <1> ;Exit:   eax = Sector on disk of FAT 
    57                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    58                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    59 000008DE 53                  <1>     push rbx
    60 000008DF 55                  <1>     push rbp
    61 000008E0 488B2D(B5C20300)    <1>     mov rbp, qword [workingDPB]
    62 000008E7 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    63 000008EA 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    64 000008F0 731E                <1>     jae .fat32
    65 000008F2 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    66 000008F8 7209                <1>     jb .fat12
    67                              <1> ;FAT16
    68 000008FA D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    69 000008FC 6801000000          <1>     push qword 1
    70 00000901 EB15                <1>     jmp short .common
    71                              <1> .fat12:
    72 00000903 89C1                <1>     mov ecx, eax    ;ecx = eax
    73 00000905 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    74 00000907 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    75 00000909 6800000000          <1>     push qword 0
    76 0000090E EB08                <1>     jmp short .common
    77                              <1> .fat32:
    78 00000910 6802000000          <1>     push qword 2
    79 00000915 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    80                              <1> .common:
    81                              <1> ;eax has the FAToffset
    82 00000918 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    83 0000091C 31D2                <1>     xor edx, edx    ;edx = 0
    84 0000091E F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    85 00000920 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    86 00000924 01D8                <1>     add eax, ebx
    87 00000926 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    88 00000927 5D                  <1>     pop rbp
    89 00000928 5B                  <1>     pop rbx
    90 00000929 C3                  <1>     ret
    91                              <1> 
    92                              <1> getStartSectorOfCluster:
    93                              <1> ;Input: eax = Cluster Number
    94                              <1> ;       rbp = dpb pointer
    95                              <1> ;Output: rax = Starting Sector number for cluster
    96                              <1> ;Gives the data sector we are at in the current cluster
    97                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    98 0000092A 51                  <1>     push rcx
    99 0000092B 09C0                <1>     or eax, eax ;Zero upper dword
   100 0000092D 482D02000000        <1>     sub rax, 2
   101 00000933 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   102 00000936 48D3E0              <1>     shl rax, cl
   103 00000939 31C9                <1>     xor ecx, ecx
   104 0000093B 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   105 0000093E 4801C8              <1>     add rax, rcx
   106                              <1>     ;rax now has the first sector of the current cluster
   107 00000941 59                  <1>     pop rcx
   108 00000942 C3                  <1>     ret
   109                              <1> 
   110                              <1> findFreeCluster:
   111                              <1> ;Walks the FAT to find a free cluster and returns the 
   112                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   113                              <1> ;Works on the workingDPB
   114                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   115 00000943 53                  <1>     push rbx
   116 00000944 51                  <1>     push rcx
   117 00000945 52                  <1>     push rdx
   118 00000946 57                  <1>     push rdi
   119 00000947 55                  <1>     push rbp
   120 00000948 488B2D(B5C20300)    <1>     mov rbp, qword [workingDPB]
   121 0000094F 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   122 00000953 488905(42C30300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   123                              <1> ;Use ebp as sector counter
   124 0000095A 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   125                              <1> ;Get Sector Size in bytes in ebx
   126 0000095D 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   127                              <1> ;Get FAT type
   128 00000961 E856FFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   129 00000966 0F84B6000000        <1>     jz .fat12
   130 0000096C F6C101              <1>     test cl, 1
   131 0000096F 7571                <1>     jnz .fat16
   132                              <1> ;FAT32 proceeds here
   133 00000971 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   134 00000974 66891D(4AC30300)    <1>     mov word [entries], bx
   135                              <1> .fat32Search:
   136 0000097B B102                <1>     mov cl, fatBuffer
   137 0000097D 488B05(42C30300)    <1>     mov rax, qword [tempSect]
   138 00000984 E89AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   139 00000989 724A                <1>     jc .exitFail
   140 0000098B 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   141 0000098F 31C0                <1>     xor eax, eax
   142 00000991 0FB70D(4AC30300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   143 00000998 F2AF                <1>     repne scasd ;Look for the zero dword 
   144 0000099A 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   145 0000099C FFCA                <1>     dec edx ;Dec number of sectors left to search
   146 0000099E 743B                <1>     jz .noFreeClusters
   147 000009A0 48FF05(42C30300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   148 000009A7 EBD2                <1>     jmp short .fat32Search
   149                              <1> .fat32Found:
   150 000009A9 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   151                              <1> .computeEntry:
   152 000009AF 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   153 000009B4 488B05(42C30300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   154 000009BB 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   155 000009BE 0FB70D(4AC30300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   156 000009C5 52                  <1>     push rdx
   157 000009C6 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   158 000009C9 5A                  <1>     pop rdx
   159                              <1> ;rbx points to current buffer header
   160 000009CA 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   161 000009CE 4829D7              <1>     sub rdi, rdx
   162 000009D1 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   163                              <1> .exit:
   164 000009D4 F8                  <1>     clc
   165                              <1> .exitFail:      ;Keep carry flag
   166 000009D5 5D                  <1>     pop rbp
   167 000009D6 5F                  <1>     pop rdi
   168 000009D7 5A                  <1>     pop rdx
   169 000009D8 59                  <1>     pop rcx
   170 000009D9 5B                  <1>     pop rbx
   171 000009DA C3                  <1>     ret
   172                              <1> .noFreeClusters:
   173 000009DB B8FFFFFFFF          <1>     mov eax, -1 ;No free cluster marker
   174 000009E0 EBF2                <1>     jmp short .exit
   175                              <1> .fat16:
   176 000009E2 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   177 000009E4 66891D(4AC30300)    <1>     mov word [entries], bx
   178                              <1> .fat16Search:
   179 000009EB B102                <1>     mov cl, fatBuffer
   180 000009ED 488B05(42C30300)    <1>     mov rax, qword [tempSect]
   181 000009F4 E82AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   182 000009F9 72DA                <1>     jc .exitFail
   183 000009FB 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   184 000009FF 31C0                <1>     xor eax, eax
   185 00000A01 0FB70D(4AC30300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   186 00000A08 F266AF              <1>     repne scasw ;Look for the zero word 
   187 00000A0B 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   188 00000A0D FFCA                <1>     dec edx ;Dec number of sectors left to search
   189 00000A0F 74CA                <1>     jz .noFreeClusters
   190 00000A11 48FF05(42C30300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   191 00000A18 EBD1                <1>     jmp short .fat16Search
   192                              <1> .fat16Found:
   193 00000A1A 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   194 00000A20 EB8D                <1>     jmp short .computeEntry
   195                              <1> .fat12:
   196 00000A22 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   197 00000A24 D1E0                <1>     shl eax, 1  ;Multiply by 2
   198 00000A26 B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   199 00000A2B 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   200 00000A2C 31D2                <1>     xor edx, edx
   201 00000A2E F7F1                <1>     div ecx
   202 00000A30 5A                  <1>     pop rdx
   203 00000A31 668905(4AC30300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   204                              <1>     ;The value is rounded down so we can read the next sector for the 
   205                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   206 00000A38 B102                <1>     mov cl, fatBuffer
   207 00000A3A 488B05(42C30300)    <1>     mov rax, qword [tempSect]
   208 00000A41 E8DDFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   209 00000A46 728D                <1>     jc .exitFail
   210 00000A48 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   211                              <1> .fat12SearchNewSector:
   212 00000A4C 0FB70D(4AC30300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   213                              <1> .fat12Search:
   214 00000A53 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   215 00000A56 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   216 00000A5B 744A                <1>     jz .fat12EntryFound
   217 00000A5D 48FFC7              <1>     inc rdi ;Goto next byte
   218 00000A60 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   219 00000A62 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   220 00000A65 C1E804              <1>     shr eax, 4  ;Shift down by 4
   221 00000A68 743D                <1>     jz .fat12EntryFound
   222 00000A6A 48FFC7              <1>     inc rdi ;Goto next entry
   223 00000A6D FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   224 00000A6F 75E2                <1>     jnz .fat12Search
   225                              <1> ;We arrive here when we are at the last entry in the sector
   226 00000A71 48FF05(42C30300)    <1>     inc qword [tempSect]    ;Get next Sector
   227 00000A78 488B05(42C30300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   228 00000A7F B102                <1>     mov cl, fatBuffer
   229 00000A81 E89DFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   230 00000A86 0F8249FFFFFF        <1>     jc .exitFail
   231 00000A8C 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   232 00000A8F 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   233 00000A93 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   234 00000A95 C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   235 00000A98 740D                <1>     jz .fat12EntryFound ;Found a sector!
   236                              <1>     ;Empty cluster not found in sector
   237 00000A9A FFCA                <1>     dec edx ;Decrement sector count
   238 00000A9C 0F8439FFFFFF        <1>     jz .noFreeClusters
   239 00000AA2 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   240 00000AA5 EBA5                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   241                              <1> .fat12EntryFound:
   242 00000AA7 E903FFFFFF          <1>     jmp .computeEntry   ;Unnecessary redirection
   243                              <1> 
   244                              <1> getDataSector:
   245                              <1> ;This function will request the sector of data in [currSectD].
   246                              <1> ;This call can only be used for DATA sectors.
   247                              <1> ;Preserves all registers
   248                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   249                              <1> ;        CF=CY => Critical error occurred and was FAILed
   250 00000AAC 50                  <1>     push rax
   251 00000AAD 53                  <1>     push rbx
   252 00000AAE 51                  <1>     push rcx
   253 00000AAF 488B05(5AC30300)    <1>     mov rax, qword [currSectD]  ;Get the disk sector number to read
   254 00000AB6 BB01000000          <1>     mov ebx, dosBuffer
   255 00000ABB B908000000          <1>     mov ecx, dataBuffer 
   256 00000AC0 4885C0              <1>     test rax, rax
   257 00000AC3 0F44CB              <1>     cmovz ecx, ebx  ;If sector 0, change to DOS buffer
   258                              <1> .getSectorRead:
   259 00000AC6 E858FCFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   260 00000ACB 59                  <1>     pop rcx
   261 00000ACC 5B                  <1>     pop rbx
   262 00000ACD 58                  <1>     pop rax
   263 00000ACE C3                  <1>     ret
   264                              <1> 
   265                              <1> getNextSectorOfFile:
   266                              <1> ;This function will read the next sector for a file into a buffer.
   267                              <1> ;If the next sector to be read lives in the next cluster, it will update
   268                              <1> ; the file handle of the file being read/written to the new cluster
   269                              <1> ;
   270                              <1> ;Input: rbp = dpb pointer
   271                              <1> ;Output:
   272                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   273                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File
   274                              <1> ;       CF=CY => Critical error occurred and was FAILed
   275                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   276                              <1> ; next cluster and read first sector 
   277                              <1>     ;Check if we need to go to next cluster
   278 00000ACF 8A05(59C30300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   279 00000AD5 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   280 00000AD8 7416                <1>     je .gotoNextCluster
   281                              <1>     ;Goto next sector in same cluster
   282 00000ADA FE05(59C30300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   283 00000AE0 48FF05(5AC30300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   284 00000AE7 488B05(5AC30300)    <1>     mov rax, qword [currSectD]
   285                              <1> .exitOK:
   286 00000AEE F8                  <1>     clc
   287                              <1> .exitFail:
   288 00000AEF C3                  <1>     ret
   289                              <1> .gotoNextCluster:
   290 00000AF0 8B05(50C30300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   291 00000AF6 E82A000000          <1>     call walkFAT
   292 00000AFB 72F2                <1>     jc .exitFail
   293                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   294 00000AFD 3DFFFFFFFF          <1>     cmp eax, -1
   295 00000B02 74EA                <1>     je .exitOK
   296                              <1> ;Update the new cluster and sector information
   297 00000B04 8905(50C30300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   298 00000B0A FF05(4CC30300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   299 00000B10 E815FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   300 00000B15 488905(5AC30300)    <1>     mov qword [currSectD], rax  ;Save it
   301 00000B1C C605(59C30300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   302 00000B23 EBC9                <1>     jmp short .exitOK
   303                              <1> 
   304                              <1> 
   305                              <1> walkFAT:
   306                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   307                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   308                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   309                              <1> ;       rbp = DPB number
   310                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   311                              <1> ;If carry set, getBuffer failed!
   312 00000B25 53                  <1>     push rbx
   313 00000B26 51                  <1>     push rcx
   314 00000B27 52                  <1>     push rdx
   315 00000B28 57                  <1>     push rdi
   316 00000B29 55                  <1>     push rbp
   317 00000B2A 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   318 00000B2C E8ADFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   319                              <1>     ;and FAT type in ecx
   320 00000B31 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   321 00000B35 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   322 00000B37 51                  <1>     push rcx    ;Move FAT signature onto stack
   323 00000B38 B102                <1>     mov cl, fatBuffer
   324 00000B3A E8E4FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   325 00000B3F 59                  <1>     pop rcx
   326 00000B40 722D                <1>     jc .exitFail
   327                              <1>     ;Check if FAT 12, 16, 32
   328 00000B42 85C9                <1>     test ecx, ecx
   329 00000B44 742F                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   330 00000B46 F7C101000000        <1>     test ecx, 1
   331 00000B4C 7410                <1>     jz .goToNextClusterFat32
   332                              <1>     ;Here we handle FAT16
   333 00000B4E 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   334 00000B53 663DFFFF            <1>     cmp ax, -1
   335 00000B57 7515                <1>     jne .exit
   336 00000B59 0FBEC0              <1>     movsx eax, al
   337 00000B5C EB10                <1>     jmp short .exit
   338                              <1> .goToNextClusterFat32:
   339 00000B5E 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   340 00000B62 3DFFFFFFFF          <1>     cmp eax, -1
   341 00000B67 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   342 00000B69 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   343                              <1> .exit:
   344 00000B6E F8                  <1>     clc
   345                              <1> .exitFail:
   346 00000B6F 5D                  <1>     pop rbp
   347 00000B70 5F                  <1>     pop rdi
   348 00000B71 5A                  <1>     pop rdx
   349 00000B72 59                  <1>     pop rcx
   350 00000B73 5B                  <1>     pop rbx
   351 00000B74 C3                  <1>     ret
   352                              <1> .gotoNextClusterFat12:
   353                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   354                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   355                              <1> 
   356 00000B75 57                  <1>     push rdi    ;Save the cluster number on the stack
   357 00000B76 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   358 00000B79 FFC0                <1>     inc eax ;Get next sector
   359 00000B7B B102                <1>     mov cl, fatBuffer
   360 00000B7D E8A1FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   361 00000B82 59                  <1>     pop rcx ;Return the cluster number in rcx
   362 00000B83 72EA                <1>     jc .exitFail
   363                              <1>     ;rdi has first buffer header, rbx has second buffer header
   364                              <1>     ;rdx has offset into first header for entry
   365 00000B85 F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   366 00000B8B 7422                <1>     jz .gotoNextClusterFat12Even
   367                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   368 00000B8D 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   369 00000B91 29D0                <1>     sub eax, edx
   370 00000B93 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   371 00000B95 750E                <1>     jnz .gotoNextClusterFat12NoCross
   372                              <1>     ;Boundary cross, build entry properly
   373 00000B97 31C0                <1>     xor eax, eax
   374 00000B99 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   375 00000B9D 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   376 00000BA0 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   377 00000BA3 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   378                              <1> .gotoNextClusterFat12NoCross:
   379 00000BA5 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   380 00000BAA C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   381 00000BAD EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   382                              <1> .gotoNextClusterFat12Even:
   383                              <1>     ;Here the cluster is even and can't cross a sector boundary
   384 00000BAF 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   385 00000BB4 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   386                              <1> .checkIfLastFAT12Cluster:
   387 00000BB9 663DFF0F            <1>     cmp ax, 0FFFh
   388 00000BBD 75AF                <1>     jne .exit
   389 00000BBF B8FFFFFFFF          <1>     mov eax, -1
   390 00000BC4 E9A5FFFFFF          <1>     jmp .exit
    20                                  %include "./Source/Kernel/FAT/fileSearch.asm"
    21                              <1> ;Generic Find First and Find Next functions here
    22                              <1> 
    23                              <1> genericFindFirst:
    24 00000BC9 C3                  <1>     ret
    25                              <1> genericFindNext:
    26 00000BCA C3                  <1>     ret
    21                                  %include "./Source/Kernel/CharDevs/charFunctions.asm"
    22                              <1> ;Dos default char functions live here
    23                              <1> 
    24                              <1> stdinReadEcho:     ;ah = 01h
    25                              <1> ;Return char that has been read and echoed in al
    26 00000BCB 488D1D(23C00300)    <1>     lea rbx, secdReqHdr ;Get the address of this request block
    27 00000BD2 488D05(AEC20300)    <1>     lea rax, singleIObyt
    28 00000BD9 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    29 00000BDC C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    30 00000BE0 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    31 00000BE6 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    32 00000BEA C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    33                              <1> 
    34 00000BF1 488B35(97C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    35 00000BF8 E84A0C0000          <1>     call goDriver
    36                              <1> 
    37 00000BFD 803D(AEC20300)00    <1>     cmp byte [singleIObyt], 00h
    38 00000C04 742B                <1>     jz .stdireexit
    39 00000C06 488D1D(23C00300)    <1>     lea rbx, secdReqHdr ;Get the address of this request block
    40 00000C0D 488D05(AEC20300)    <1>     lea rax, singleIObyt
    41 00000C14 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    42 00000C17 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    43 00000C1B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    44 00000C21 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    45 00000C25 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    46 00000C2C E8160C0000          <1>     call goDriver   ;rbx has reqheader ptr
    47                              <1> .stdireexit:
    48 00000C31 8A05(AEC20300)      <1>     mov al, byte [singleIObyt]
    49 00000C37 C3                  <1>     ret
    50                              <1> 
    51                              <1> stdoutWrite:       ;ah = 02h
    52                              <1> ;Bspace is regular cursor left, does not insert a blank
    53 00000C38 8815(AEC20300)      <1>     mov byte [singleIObyt], dl
    54 00000C3E 488D1D(23C00300)    <1>     lea rbx, secdReqHdr ;Get the address of this request block
    55 00000C45 488D15(AEC20300)    <1>     lea rdx, singleIObyt
    56 00000C4C C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    57 00000C4F C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    58 00000C53 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    59 00000C59 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    60 00000C5D C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    61                              <1> 
    62 00000C64 488B35(97C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    63 00000C6B E8D70B0000          <1>     call goDriver
    64 00000C70 C3                  <1>     ret
    65                              <1> stdauxRead:        ;ah = 03h
    66                              <1> stdauxWrite:       ;ah = 04h
    67                              <1> stdprnWrite:       ;ah = 05h
    68                              <1> directCONIO:       ;ah = 06h
    69                              <1> waitDirectInNoEcho:;ah = 07h
    70                              <1> ;Return char in al
    71 00000C71 488D1D(23C00300)    <1>     lea rbx, secdReqHdr ;Get the address of this request block
    72 00000C78 488D05(AEC20300)    <1>     lea rax, singleIObyt
    73 00000C7F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    74 00000C82 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    75 00000C86 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    76 00000C8C 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    77 00000C90 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    78                              <1> 
    79 00000C97 488B35(97C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    80 00000C9E E8A40B0000          <1>     call goDriver
    81 00000CA3 8A05(AEC20300)      <1>     mov al, byte [singleIObyt]
    82 00000CA9 C3                  <1>     ret
    83                              <1> waitStdinNoEcho:   ;ah = 08h
    84 00000CAA C3                  <1>     ret
    85                              <1> printString:       ;ah = 09h
    86 00000CAB 31C9                <1>     xor ecx, ecx    ;Clear char counter
    87 00000CAD B824000000          <1>     mov eax, "$"    ;Terminating char
    88 00000CB2 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    89                              <1> .ps0:   ;Search for $ to get count of chars
    90 00000CB5 AE                  <1>     scasb
    91 00000CB6 7404                <1>     je .ps1
    92 00000CB8 FFC1                <1>     inc ecx
    93 00000CBA EBF9                <1>     jmp short .ps0
    94                              <1> .ps1:   ;Use handle 
    95 00000CBC 488D1D(23C00300)    <1>     lea rbx, secdReqHdr ;Get the address of this request block
    96 00000CC3 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    97 00000CC6 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    98 00000CCA 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    99 00000CD0 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   100 00000CD4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   101                              <1>     
   102 00000CD7 488B35(97C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
   103 00000CDE E8640B0000          <1>     call goDriver   ;Called with rbx pointing to the request header
   104                              <1> 
   105 00000CE3 488B1D(90C10300)    <1>     mov rbx, qword [oldRSP]
   106 00000CEA 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   107 00000CEC C3                  <1>     ret
   108                              <1> buffStdinInput:    ;ah = 0Ah
   109                              <1> checkStdinStatus:  ;ah = 0Bh
   110                              <1> clearbuffDoFunc:   ;ah = 0Ch
   111                              <1> ;------------------------
   112                              <1> ;   Utility functions   :
   113                              <1> ;------------------------
   114                              <1> checkBreakOnCon:
   115                              <1> ;Reads bytes from CON if there are any bytes to read and 
   116                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   117 00000CED 803D(2CC10300)01    <1>     cmp byte [inDOS], 1
   118 00000CF4 7401                <1>     je checkBreak  ;Only check ^C on first entry to DOS
   119 00000CF6 C3                  <1>     ret
   120                              <1> checkBreak:
   121                              <1> ;Returns in al the keystroke that is available IF one is available
   122                              <1> ; or al=0 if no keystroke available
   123 00000CF7 53                  <1>     push rbx
   124 00000CF8 56                  <1>     push rsi
   125 00000CF9 488B35(97C00300)    <1>     mov rsi, qword [conPtr] ;Get pointer to Console device driver
   126 00000D00 31C0                <1>     xor eax, eax
   127                              <1>     ;Place command code and a zero status word at the same time
   128 00000D02 B005                <1>     mov al, drvNONDESTREAD
   129 00000D04 8905(25C00300)      <1>     mov dword [secdReqHdr + nonDestInNoWaitReqPkt.cmdcde], eax
   130                              <1>     ;Place the packet size in the hdrlen field
   131 00000D0A B00E                <1>     mov al, nonDestInNoWaitReqPkt_size
   132 00000D0C 8805(23C00300)      <1>     mov byte [secdReqHdr + nonDestInNoWaitReqPkt.hdrlen], al
   133 00000D12 488D1D(23C00300)    <1>     lea rbx, secdReqHdr
   134 00000D19 E8290B0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   135                              <1>     ;Check if the busy bit is set (No keystroke available)
   136 00000D1E 66F705(26C00300)00- <1>     test word [secdReqHdr + nonDestInNoWaitReqPkt.status], drvBsyStatus
   136 00000D26 02                  <1>
   137 00000D27 7403                <1>     jz .charFound
   138                              <1> .exit:
   139 00000D29 5E                  <1>     pop rsi
   140 00000D2A 5B                  <1>     pop rbx
   141 00000D2B C3                  <1>     ret
   142                              <1> .charFound:
   143                              <1> ;Keystroke available, proceed
   144 00000D2C 8A05(30C00300)      <1>     mov al, byte [secdReqHdr + nonDestInNoWaitReqPkt.retbyt]    ;Get char
   145 00000D32 3C03                <1>     cmp al, 03h ;BREAK/^C =ASCII 03h
   146 00000D34 75F3                <1>     jne .exit   ;If not equal exit
   147                              <1> ;Now we pull the char out of the buffer
   148 00000D36 31C0                <1>     xor eax, eax
   149 00000D38 B004                <1>     mov al, drvREAD ;Read command
   150 00000D3A 8905(25C00300)      <1>     mov dword [secdReqHdr + ioReqPkt.cmdcde], eax
   151                              <1>     ;Place packet size
   152 00000D40 C605(23C00300)2A    <1>     mov byte [secdReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   153                              <1>     ;Place pointers and number of chars
   154 00000D47 C705(39C00300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   154 00000D4F 0000                <1>
   155 00000D51 488D05(AEC20300)    <1>     lea rax, singleIObyt    ;IO Byte buffer
   156 00000D58 488905(31C00300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rax
   157 00000D5F E8E30A0000          <1>     call goDriver   ;RSI and RBX as before
   158 00000D64 C3                  <1>     ret ;Stopgap right now, do nothing
   159                              <1> 
   160                              <1> 
   161                              <1> setupConTfr:
   162                              <1> ;Sets STDIO bit and transfers the current SFT to working SFT
   163                              <1> ;Called on access to ALL STDIO r/w
   164 00000D65 57                  <1>     push rdi
   165 00000D66 C605(73C10300)01    <1>     mov byte [STDIOuse], 1 ;In use! (Acts as a mutex for writing to workingSFT!)
   166 00000D6D 488B3D(30C30300)    <1>     mov rdi, qword [currentSFT]
   167 00000D74 48893D(C5C20300)    <1>     mov qword [workingSFT], rdi
   168 00000D7B 5F                  <1>     pop rdi
   169 00000D7C C3                  <1>     ret
    22                                  %include "./Source/Kernel/CharDevs/dateTimeFunctions.asm"
    23                              <1> ;Major kernel date time functions and subroutines
    24                              <1> 
    25                              <1> getDate:           ;ah = 2Ah
    26                              <1> setDate:           ;ah = 2Bh
    27                              <1> getTime:           ;ah = 2Ch
    28                              <1> setTime:           ;ah = 2Dh
    29 00000D7D C3                  <1>     ret
    23                                  %include "./Source/Kernel/FileIO/fcbFunctions.asm"
    24                              <1> openFileFCB:       ;ah = 0Fh
    25                              <1> closeFileFCB:      ;ah = 10h
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> findNextFileFCB:   ;ah = 12h
    28                              <1> deleteFileFCB:     ;ah = 13h
    29                              <1> sequentialReadFCB: ;ah = 14h
    30                              <1> sequentialWriteFCB:;ah = 15h
    31                              <1> createFileFCB:     ;ah = 16h
    32                              <1> renameFileFCB:     ;ah = 17h
    33 00000D7E C3                  <1>     ret
    34                              <1> setDTA:            ;ah = 1Ah
    35                              <1> ;Called with:
    36                              <1> ;   rdx = Pointer to the new default DTA
    37 00000D7F 488B1D(90C10300)    <1>     mov rbx, qword [oldRSP]
    38 00000D86 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    39 00000D8A 488915(3BC10300)    <1>     mov qword [currentDTA], rdx
    40 00000D91 C3                  <1>     ret
    41                              <1> randomReadFCB:     ;ah = 21h
    42                              <1> randomWriteFCB:    ;ah = 22h
    43                              <1> getFileSizeFCB:    ;ah = 23h
    44                              <1> setRelRecordFCB:   ;ah = 24h
    45                              <1> randBlockReadFCB:  ;ah = 27h
    46                              <1> randBlockWriteFCB: ;ah = 28h
    47                              <1> parseFilenameFCB:  ;ah = 29h
    48 00000D92 C3                  <1>     ret
    49                              <1> getDTA:            ;ah = 2Fh
    50 00000D93 488B15(90C10300)    <1>     mov rdx, qword [oldRSP]
    51 00000D9A 488B1D(3BC10300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    52 00000DA1 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    53 00000DA5 C3                  <1>     ret
    24                                  %include "./Source/Kernel/FileIO/handleFunctions.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;    File Handle Kernel routines    :
    27                              <1> ;-----------------------------------:
    28                              <1> 
    29                              <1> createFileHdl:     ;ah = 3Ch, handle function
    30 00000DA6 C3                  <1>     ret
    31                              <1> openFileHdl:       ;ah = 3Dh, handle function
    32 00000DA7 C3                  <1>     ret
    33                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    34 00000DA8 C3                  <1>     ret
    35                              <1> readFileHdl:       ;ah = 3Fh, handle function
    36 00000DA9 488D3593000000      <1>     lea rsi, readBytes
    37                              <1> .common:
    38 00000DB0 E830030000          <1>     call getSFTPtr ;Get SFT ptr in rdi (if file is r/w-able from machine)
    39 00000DB5 7221                <1>     jb .error
    40 00000DB7 E81B020000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    41 00000DBC FF35(3BC10300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    42 00000DC2 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    43 00000DC4 8F05(3BC10300)      <1>     pop qword [currentDTA]
    44 00000DCA 720C                <1>     jb .errorFromDataTransfer
    45 00000DCC E8E40D0000          <1>     call getUserRegs
    46 00000DD1 890E                <1>     mov dword [rsi + callerFrame.rax], ecx  ;Put actual number of bytes tfrd
    47 00000DD3 806658FE            <1>     and byte [rsi + callerFrame.flags], 0FEh    ;Clear CF
    48 00000DD7 C3                  <1>     ret
    49                              <1> ;Temporary Error handler, simply return with CF set
    50                              <1> .error:
    51                              <1> .errorFromDataTransfer:
    52 00000DD8 E8D80D0000          <1>     call getUserRegs
    53 00000DDD 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    54 00000DE1 C3                  <1>     ret
    55                              <1> writeFileHdl:      ;ah = 40h, handle function
    56 00000DE2 488D35B5010000      <1>     lea rsi, writeBytes
    57 00000DE9 E9C2FFFFFF          <1>     jmp readFileHdl.common
    58                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    59 00000DEE C3                  <1>     ret
    60                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    61                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    62 00000DEF E8F1020000          <1>     call getSFTPtr
    63 00000DF4 7326                <1>     jnc .sftValid
    64                              <1>     ;Error code and exit
    65                              <1>     ;al (eax) has error code for bad file handle
    66 00000DF6 668905(2FC10300)    <1>     mov word [errorExCde], ax
    67                              <1> .exitBad:
    68 00000DFD C605(2EC10300)01    <1>     mov byte [errorLocus], eLocUnk  ;Unknown Locus
    69 00000E04 C605(31C10300)03    <1>     mov byte [errorAction], eActUsr ;Reinput data
    70 00000E0B C605(32C10300)08    <1>     mov byte [errorClass], eClsNotFnd
    71 00000E12 E89E0D0000          <1>     call getUserRegs    ;Get user regs in rsi
    72 00000E17 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    73 00000E1B C3                  <1>     ret
    74                              <1> .sftValid:
    75 00000E1C 3C03                <1>     cmp al, 3
    76 00000E1E 7206                <1>     jb .validFunction
    77                              <1>     ;Error code and exit
    78 00000E20 66B80100            <1>     mov ax, errInvFnc
    79 00000E24 EBD7                <1>     jmp short .exitBad
    80                              <1> .validFunction:
    81 00000E26 3C01                <1>     cmp al, 1
    82 00000E28 7713                <1>     ja .seekend
    83 00000E2A 7203                <1>     jb .seekset
    84                              <1> ;Here we are at seekcur, seek from current (signed)
    85 00000E2C 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    86                              <1> .seekset:
    87                              <1> ;Seek from the start (unsigned)
    88 00000E2F 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    89 00000E32 E87E0D0000          <1>     call getUserRegs    ;Get user regs in rsi
    90 00000E37 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
    91 00000E3A 30C0                <1>     xor al, al  ;Return OK!
    92 00000E3C C3                  <1>     ret
    93                              <1> .seekend:
    94                              <1> ;Here we are at seekend, seek from end (signed)
    95 00000E3D 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
    96 00000E40 EBED                <1>     jmp short .seekset
    97                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    98                              <1> ioctrl:            ;ah = 44h, handle function
    99                              <1> duplicateHandle:   ;ah = 45h, handle function
   100                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   101                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   102                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   103                              <1> renameFile:        ;ah = 56h
   104                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   105                              <1> createNewFile:     ;ah = 5Bh
   106                              <1> lockUnlockFile:    ;ah = 5Ch
   107                              <1> setHandleCount:    ;ah = 67h
   108                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   109 00000E42 C3                  <1>     ret
   110                              <1> ;-----------------------------------:
   111                              <1> ;       Main File IO Routines       :
   112                              <1> ;-----------------------------------:
   113                              <1> readBytes:
   114                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   115                              <1> ;Input: ecx = Number of bytes to read
   116                              <1> ;Output: ecx = Number of bytes read
   117                              <1> ;Number of bytes read 
   118 00000E43 E897010000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   119 00000E48 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 00000E4C 240F                <1>     and al, 0Fh ;Eliminate except access mode
   121 00000E4E 3C01                <1>     cmp al, WriteAccess
   122 00000E50 750E                <1>     jne .readable
   123 00000E52 B805000000          <1>     mov eax, errAccDen
   124 00000E57 668905(2FC10300)    <1>     mov word [errorExCde], ax
   125 00000E5E F9                  <1>     stc
   126 00000E5F C3                  <1>     ret ;Exit with error code 
   127                              <1> .readable:
   128 00000E60 E8BB010000          <1>     call setupVarsForTransfer
   129 00000E65 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   130 00000E68 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   131 00000E6E 740A                <1>     jz .notRedir
   132 00000E70 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   133 00000E75 CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   134 00000E77 C3                  <1>     ret
   135                              <1> .exitOk:
   136 00000E78 F8                  <1>     clc
   137 00000E79 C3                  <1>     ret
   138                              <1> .notRedir:
   139 00000E7A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   140 00000E80 7510                <1>     jnz readCharDev
   141 00000E82 E8CA0F0000          <1>     call dosCrit1Enter
   142 00000E87 E80B010000          <1>     call readDiskFile
   143 00000E8C E8CA0F0000          <1>     call dosCrit1Exit
   144 00000E91 C3                  <1>     ret
   145                              <1> readCharDev:
   146                              <1> ;rdi points to sft for char dev to read
   147                              <1> ;ecx has the number of bytes to transfer
   148                              <1> ;Vars have been set up and DTA has the transfer address
   149                              <1> ;Returns in ecx, the actual bytes transferred
   150 00000E92 C605(2EC10300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   151 00000E99 488B3D(3BC10300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   152 00000EA0 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   153 00000EA4 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   154 00000EA7 0F8413010000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   155 00000EAD F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   156 00000EB0 7507                <1>     jnz .notNul
   157                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   158                              <1>     ;NUL never transfers bytes 
   159 00000EB2 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   160 00000EB4 E907010000          <1>     jmp rwExitOk    ;Goto exit
   161                              <1> .notNul:
   162 00000EB9 F6C320              <1>     test bl, charDevBinary
   163 00000EBC 750A                <1>     jnz .binary
   164                              <1>     ;Here if the device is in ASCII mode
   165 00000EBE F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   166 00000EC1 7457                <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   167                              <1> .consoleInput:
   168                              <1>     ;Console input here
   169 00000EC3 E89DFEFFFF          <1>     call setupConTfr    ;Prepare CON Useage!
   170                              <1>     
   171                              <1> 
   172                              <1> .binary:
   173                              <1>     ;Setup registers for transfer
   174 00000EC8 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   175 00000ECB 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   176                              <1>     ;ecx has the number of bytes to transfer directly
   177 00000ECE E8910C0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   178 00000ED3 488B35(B5C20300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   179 00000EDA E868090000          <1>     call goDriver   ;Make the request
   180 00000EDF 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   181 00000EE2 0FB73D(50C00300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   182 00000EE9 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   183 00000EEF 7412                <1>     jz .binNoError
   184                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   185 00000EF1 B486                <1>     mov ah, 86h ;Char device, data error signature
   186 00000EF3 E869080000          <1>     call binaryCharDevErr   ;ah = has part of the error 
   187                              <1>     ;al now has the response
   188                              <1>     ;Cannot return Abort as Abort returns to command interpreter through DOS
   189 00000EF8 3C00                <1>     cmp al, critIgnore
   190 00000EFA 7407                <1>     je .binNoError ;Simply proceed as normal
   191 00000EFC 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   192 00000EFF 3C03                <1>     cmp al, critFail
   193 00000F01 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   194                              <1>     ;Fallthrough here for fail!
   195                              <1> .failExit:
   196                              <1>     
   197                              <1> .binNoError:
   198                              <1>     ;Get number of bytes transferred into 
   199 00000F03 8B05(63C00300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   200 00000F09 F7D8                <1>     neg eax ;make it into -eax
   201 00000F0B 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   202                              <1>     ;ecx now has bytes left to transfer
   203 00000F0F 50                  <1>     push rax    ;Save value on stack
   204 00000F10 31C0                <1>     xor eax, eax ;Set ZF
   205 00000F12 FFC0                <1>     inc eax ;Clear ZF
   206 00000F14 58                  <1>     pop rax ;Get back the original value
   207 00000F15 E9A6000000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   208                              <1> .generalASCII:
   209                              <1>     ;ecx has bytes to transfer here
   210                              <1>     ;Setup registers for transfer
   211 00000F1A 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   212 00000F1D 51                  <1>     push rcx
   213 00000F1E B901000000          <1>     mov ecx, 1  ;Get one char
   214 00000F23 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   215 00000F26 E8390C0000          <1>     call primReqReadSetup   ;Setup request
   216 00000F2B 59                  <1>     pop rcx
   217                              <1>     ;rbx now has request header ptr
   218 00000F2C 488B35(B5C20300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   219                              <1> .asciiReadChar:
   220 00000F33 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   221 00000F36 E8B2FDFFFF          <1>     call checkBreakOnCon    ;Check we don't have a ^C pending on CON
   222 00000F3B E807090000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   223 00000F40 0FB73D(50C00300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   224 00000F47 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   225 00000F4D 741E                <1>     jz .asciiNoError
   226 00000F4F E808080000          <1>     call asciiCharDevErr    ;Call Int 44h
   227                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   228 00000F54 C705(63C00300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   228 00000F5C 0000                <1>
   229 00000F5E 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   230 00000F61 3C03                <1>     cmp al, critFail
   231 00000F63 749E                <1>     je .failExit
   232 00000F65 3C01                <1>     cmp al, critRetry
   233 00000F67 74CA                <1>     je .asciiReadChar
   234                              <1>     ;Ignore here, pretend NULL CHAR was read
   235 00000F69 30C0                <1>     xor al, al
   236 00000F6B EB11                <1>     jmp short .asciiIgnoreEP
   237                              <1> .asciiNoError:
   238                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   239                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   240                              <1> ;Preserve RBX, RSI
   241                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   242 00000F6D 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   243 00000F70 813D(63C00300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   243 00000F78 0000                <1>
   244 00000F7A 7544                <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   245 00000F7C 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   246                              <1> .asciiIgnoreEP:
   247 00000F7E 48FF05(5BC00300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   248 00000F85 48FFC7              <1>     inc rdi ;Also advance register pointer
   249 00000F88 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   250 00000F8A 7434                <1>     je rwExitOk
   251 00000F8C 3C0D                <1>     cmp al, CR  ;Was this char CR?
   252 00000F8E E0A3                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   253                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   254 00000F90 FEC0                <1>     inc al  ;make ZF=NZ
   255 00000F92 E929000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   256                              <1>     
   257                              <1> readDiskFile:
   258 00000F97 C605(2EC10300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   259                              <1> 
   260                              <1> writeBytes:
   261                              <1> ;Writes the bytes from the user buffer
   262 00000F9E E83C000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   263 00000FA3 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   264 00000FA7 240F                <1>     and al, 0Fh ;Eliminate except access mode
   265 00000FA9 3C00                <1>     cmp al, ReadAccess
   266 00000FAB 750E                <1>     jne .writeable
   267 00000FAD B805000000          <1>     mov eax, errAccDen
   268 00000FB2 668905(2FC10300)    <1>     mov word [errorExCde], ax
   269 00000FB9 F9                  <1>     stc
   270 00000FBA C3                  <1>     ret ;Exit with error code 
   271                              <1> .writeable:
   272 00000FBB E860000000          <1>     call setupVarsForTransfer
   273                              <1> 
   274                              <1> rwExitOk:
   275                              <1> ;Input: ecx = Number of bytes left to transfer!
   276                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   277 00000FC0 890D(78C30300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   278 00000FC6 7509                <1>     jnz .skipbitClear
   279 00000FC8 E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   280                              <1>     ;The disk transfer must've flushed by now. 
   281 00000FCD 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokDevNotFlush|charDevNoEOF) ;OR
   282                              <1>     ;Next char dev read should give EOF.
   283                              <1> .skipbitClear:  ;Or skip that entirely
   284 00000FD1 E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   285 00000FD6 C3                  <1>     ret
   286                              <1> rwExitBad:
   287                              <1> ;-----------------------------------:
   288                              <1> ;        File Handle routines       :
   289                              <1> ;-----------------------------------:
   290                              <1> 
   291                              <1> setCurrentSFT:
   292                              <1> ;Set the pointer in rdi as current SFT 
   293 00000FD7 48893D(30C30300)    <1>     mov qword [currentSFT], rdi
   294 00000FDE C3                  <1>     ret
   295                              <1> getCurrentSFT:
   296                              <1> ;Get the current SFT pointer in rdi
   297 00000FDF 488B3D(30C30300)    <1>     mov rdi, qword [currentSFT]
   298 00000FE6 C3                  <1>     ret
   299                              <1> updateCurrentSFT:
   300                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   301                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   302 00000FE7 57                  <1>     push rdi
   303 00000FE8 488B3D(30C30300)    <1>     mov rdi, qword [currentSFT]
   304 00000FEF 8B0D(74C30300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   305 00000FF5 2B0D(78C30300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   306                              <1>     ;ecx has bytes transferred
   307 00000FFB 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   308 00001001 751A                <1>     jnz .exit
   309 00001003 50                  <1>     push rax
   310 00001004 8B05(50C30300)      <1>     mov eax, dword [currClustD]
   311 0000100A 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   312 0000100D 8B05(4CC30300)      <1>     mov eax, dword [currClustF]
   313 00001013 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   314 00001016 58                  <1>     pop rax
   315 00001017 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   316 0000101A 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   317                              <1> .exit:
   318 0000101D 5F                  <1>     pop rdi
   319 0000101E F8                  <1>     clc
   320 0000101F C3                  <1>     ret
   321                              <1> setupVarsForTransfer:
   322                              <1> ;Computes the actual bytes to be transferred and 
   323                              <1> ; sets up internal variables for the transfer. 
   324                              <1> ;Works for both reading and writing
   325                              <1> ;Input: ecx = User desired Bytes to transfer
   326                              <1> ;       rdi = SFT pointer for the file
   327                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   328                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   329                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   330                              <1> ;
   331                              <1> ;Note: Does not account for a FULL disk. When writing,
   332                              <1> ; if the disk will get full as a result of the write,
   333                              <1> ; stop at the last byte before the transfer. If the 
   334                              <1> ; file pointer is past the last free byte, write 0
   335 00001020 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   336 00001024 488935(B5C20300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   337 0000102B 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   338 0000102E 8905(64C30300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   339 00001034 890D(74C30300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   340 0000103A 890D(78C30300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   341 00001040 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   342 00001046 7402                <1>     jz setupVarsForDiskTransfer
   343 00001048 F8                  <1>     clc
   344 00001049 C3                  <1>     ret ;Else just exit here
   345                              <1> setupVarsForDiskTransfer:
   346                              <1> ;Extension of the above, but for Disk files only
   347                              <1> ;Input: ecx = User desired Bytes to transfer
   348                              <1> ;       rdi = SFT pointer for the file
   349                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   350 0000104A 488B2D(B5C20300)    <1>     mov rbp, qword [workingDPB] ;Get the workingDPB (the same as qPtr)
   351 00001051 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   352 00001054 881D(B4C20300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   353 0000105A 8B05(64C30300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   354 00001060 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   355 00001064 31D2                <1>     xor edx, edx    ;Zero rdx
   356 00001066 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   357                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   358                              <1>     ;edx has the offset into that sector
   359 00001068 8905(55C30300)      <1>     mov dword [currSectF], eax
   360 0000106E 668915(62C30300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   361 00001075 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   362 00001077 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   363 0000107A 8805(59C30300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   364 00001080 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   365 00001082 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   366 00001085 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   367 00001087 8915(4CC30300)      <1>     mov dword [currClustF], edx ;Save in var
   368 0000108D 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   369 0000108F F8                  <1>     clc
   370 00001090 C3                  <1>     ret
   371                              <1> 
   372                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   373                              <1> ;Return a pointer to the SFT entry in rdi
   374                              <1> ;Input: rbx = Valid SFT ndx number (word)
   375                              <1> ;Output: rdi = SFT pointer
   376 00001091 488B3D(87C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   377                              <1> .walk:
   378 00001098 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   379 0000109C 7212                <1>     jb .thisTable
   380 0000109E 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   381 000010A2 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   382 000010A5 4881FFFFFFFFFF      <1>     cmp rdi, -1
   383 000010AC 75EA                <1>     jne .walk
   384 000010AE F9                  <1>     stc
   385 000010AF C3                  <1>     ret
   386                              <1> .thisTable:
   387 000010B0 50                  <1>     push rax
   388 000010B1 52                  <1>     push rdx
   389 000010B2 B84F000000          <1>     mov eax, sft_size
   390 000010B7 F7E3                <1>     mul ebx
   391 000010B9 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   392 000010BC 5A                  <1>     pop rdx
   393 000010BD 58                  <1>     pop rax
   394 000010BE 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   395 000010C5 C3                  <1>     ret
   396                              <1> 
   397                              <1> getSFTNdxFromHandle:    ;Int 4Fh AX=1220h
   398                              <1> ;Return a zero extended value in rdi for the SFT entry
   399                              <1> ;Input: bx = JFT handle
   400                              <1> ;Output: CF=NC => rdi = SFT ndx
   401                              <1> ;        CF=CY => al = Error code, Fail
   402                              <1> ;rbx destroyed
   403 000010C6 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   404 000010C9 663B1D(E3C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   405 000010D0 7204                <1>     jb .ok
   406 000010D2 B006                <1>     mov al, errBadHdl
   407 000010D4 F9                  <1>     stc
   408 000010D5 C3                  <1>     ret
   409                              <1> .ok:
   410 000010D6 488B3D(43C10300)    <1>     mov rdi, qword [currentPSP]
   411 000010DD 480FB67C1F2A        <1>     movzx rdi, byte [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   412 000010E3 F8                  <1>     clc
   413 000010E4 C3                  <1>     ret
   414                              <1> getSFTPtr:
   415                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   416                              <1> ;Input: bx = JFT handle
   417                              <1> ;Output: CF=NC: rdi = SFT pointer
   418                              <1> ;        CF=CY: Error, ax=Error code
   419 000010E5 E816000000          <1>     call derefSFTPtr
   420 000010EA 7301                <1>     jnc .ok
   421 000010EC C3                  <1>     ret ;Error return with CF=CY
   422                              <1> .ok:
   423 000010ED 50                  <1>     push rax
   424 000010EE 0FB705(29C10300)    <1>     movzx eax, word [machineNum]    ;Get the machine number from SDA
   425 000010F5 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]   ;Compare to SFT machine number
   426 000010F9 58                  <1>     pop rax
   427 000010FA 7403                <1>     je .exit    ;If the file belongs to this machine, proceed!
   428 000010FC B006                <1>     mov al, errBadHdl   ;Error code
   429 000010FE F9                  <1>     stc ;Reset CF
   430                              <1> .exit:
   431 000010FF C3                  <1>     ret
   432                              <1> derefSFTPtr:
   433                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   434                              <1> ;Input: bx = File handle
   435                              <1> ;Output: CF=NC: rdi = SFT pointer
   436                              <1> ;        CF=CY: Error, ax=Error code
   437 00001100 E8C1FFFFFF          <1>     call getSFTNdxFromHandle    ;Get the ptr to the value in rdi
   438 00001105 7205                <1>     jb .fail
   439 00001107 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   440 0000110A 7504                <1>     jne .ok
   441                              <1> .fail:
   442 0000110C B006                <1>     mov al, errBadHdl
   443 0000110E F9                  <1>     stc
   444 0000110F C3                  <1>     ret
   445                              <1> .ok:
   446 00001110 53                  <1>     push rbx    ;Preserve the JFT handle
   447 00001111 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   448 00001114 E878FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   449 00001119 5B                  <1>     pop rbx 
   450 0000111A C3                  <1>     ret
   451                              <1> 
   452                              <1> getBytesTransferred:
   453 0000111B 8B0D(78C30300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   454 00001121 F7D9                <1>     neg ecx ;Multiply by -1
   455 00001123 030D(74C30300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   456 00001129 C3                  <1>     ret ;Return bytes transferred in ecx
   457                              <1> 
   458                              <1> readWriteBytesBinary:
   459                              <1> ;Input: ecx = number of bytes to read in Binary mode
   460                              <1> ;       rdi = Points to where in caller buffer to place bytes
   461                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   462                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   463                              <1> ;Preserve rcx so we know how many bytes transferred
   464                              <1> ;Update the currByteA variable
   465                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   466 0000112A 51                  <1>     push rcx
   467 0000112B F605(AFC20300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   468 00001132 7403                <1>     jz .noSwap
   469 00001134 4887FE              <1>     xchg rdi, rsi
   470                              <1> .noSwap:
   471 00001137 F3A4                <1>     rep movsb
   472 00001139 59                  <1>     pop rcx
   473 0000113A 010D(64C30300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   474 00001140 290D(78C30300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   475 00001146 C3                  <1>     ret
    25                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    26                              <1> ;Memory related functions
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;  Memory related Kernel routines   :
    30                              <1> ;-----------------------------------:
    31                              <1> allocateMemory:    ;ah = 48h
    32                              <1> ;Input: ebx = Number of paragraphs requested
    33                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    34                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    35 00001147 31D2                <1>     xor edx, edx
    36                              <1>     ;Clear the pointers
    37 00001149 488915(5BC10300)    <1>     mov qword [firstMCB], rdx
    38 00001150 488915(63C10300)    <1>     mov qword [bestMCB], rdx
    39 00001157 488915(6BC10300)    <1>     mov qword [lastMCB], rdx
    40 0000115E 31ED                <1>     xor ebp, ebp    
    41 00001160 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    42 00001162 488B35(77C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    43                              <1> .walk:
    44 00001169 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    45 0000116C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    46 0000116F 7409                <1>     je .walk1
    47 00001171 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    48 00001174 0F8565050000        <1>     jne memSysHalt
    49                              <1> .walk1:
    50                              <1>     ;Here if valid but not the last block
    51 0000117A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    52 00001182 0F8582000000        <1>     jne .walk2
    53                              <1>     ;Here we consolidate adjacent free blocks if there are any
    54                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    55                              <1>     ;End consolidation at first non free block or at last block in chain
    56 00001188 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    57 0000118B 744A                <1>     je .det0    ;Determine if this block is useful
    58 0000118D 31C9                <1>     xor ecx, ecx
    59 0000118F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    60 00001192 4881C610000000      <1>     add rsi, mcb.program
    61                              <1> .cons0:
    62 00001199 48C1E104            <1>     shl rcx, 4
    63 0000119D 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    64 000011A0 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    65 000011A3 7409                <1>     je .cons1
    66 000011A5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    67 000011A8 0F8531050000        <1>     jne memSysHalt 
    68                              <1> .cons1:
    69 000011AE 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    70 000011B6 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    71                              <1>     ;Here rsi, points to a free block, add it to rdi
    72 000011B8 31C9                <1>     xor ecx, ecx
    73 000011BA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    74 000011BD 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    75 000011C3 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    76 000011C6 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    77 000011C8 31D2                <1>     xor edx, edx
    78 000011CA 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    79 000011CD 48895608            <1>     mov qword [rsi + 8], rdx
    80 000011D1 3C5A                <1>     cmp al, mcbMarkEnd
    81 000011D3 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    82                              <1>     ;Here we deal with if the block was the last one 
    83 000011D5 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    84                              <1> .det0:  ;Now determine if pointer in rdi is useful
    85 000011D7 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    86                              <1> ;ebx must be less than the arena size for the arena to be useful!
    87 000011DA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    88 000011DD 39D9                <1>     cmp ecx, ebx
    89 000011DF 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    90 000011E1 488935(6BC10300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    91 000011E8 488B05(5BC10300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    92 000011EF 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    93 000011F2 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    94 000011F4 488935(5BC10300)    <1>     mov qword [firstMCB], rsi
    95                              <1> .det1:
    96                              <1>     ;Now test for best fit.
    97 000011FB 29D9                <1>     sub ecx, ebx    ;Block - ebx
    98 000011FD 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    99 000011FF 7209                <1>     jb .walk2
   100 00001201 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   101 00001203 488935(63C10300)    <1>     mov qword [bestMCB], rsi
   102                              <1> .walk2:
   103 0000120A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   104 0000120D 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   105 0000120F 31C9                <1>     xor ecx, ecx
   106 00001211 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   107 00001214 48C1E104            <1>     shl rcx, 4
   108 00001218 4881C610000000      <1>     add rsi, mcb.program
   109 0000121F 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   110 00001222 E942FFFFFF          <1>     jmp .walk
   111                              <1> .allocate:
   112                              <1>     ;Allocation fails IF the pointer is the null pointer
   113 00001227 803D(E6C00300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   114 0000122E 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   115                              <1>     ;Fall thru if last fit
   116 00001230 488B35(6BC10300)    <1>     mov rsi, qword [lastMCB]
   117 00001237 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   118 0000123A 0F84CE000000        <1>     jz .allocFail
   119 00001240 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   120 00001242 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   121 00001245 31C9                <1>     xor ecx, ecx
   122 00001247 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   123 0000124A 29D9                <1>     sub ecx, ebx
   124 0000124C 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   125 00001252 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   126 00001255 48C1E104            <1>     shl rcx, 4
   127 00001259 4881C610000000      <1>     add rsi, mcb.program
   128 00001260 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   129 00001263 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   130 00001265 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   131 00001268 488B15(43C10300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   132 0000126F 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   133 00001273 488B15(90C10300)    <1>     mov rdx, qword [oldRSP]
   134 0000127A 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   135 00001281 4889F0              <1>     mov rax, rsi
   136 00001284 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   137 00001287 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   138 0000128B E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   139 00001290 C3                  <1>     ret
   140                              <1> .bfCommon:
   141 00001291 488B35(5BC10300)    <1>     mov rsi, qword [firstMCB]
   142 00001298 803D(E6C00300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   143 0000129F 480F4435(63C10300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   144 000012A7 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   145 000012AA 7462                <1>     jz .allocFail
   146 000012AC 8A06                <1>     mov al, byte [rsi + mcb.marker]
   147 000012AE C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   148 000012B1 31C9                <1>     xor ecx, ecx
   149 000012B3 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   150 000012B6 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   151 000012B8 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   152 000012BE 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   153 000012C1 488B15(43C10300)    <1>     mov rdx, qword [currentPSP]
   154 000012C8 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   155 000012CC 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   156 000012CF 4881C610000000      <1>     add rsi, mcb.program
   157 000012D6 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   158 000012DC 48C1E304            <1>     shl rbx, 4
   159 000012E0 4801DE              <1>     add rsi, rbx
   160 000012E3 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   161 000012E5 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   162 000012ED 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   163 000012F0 488B15(90C10300)    <1>     mov rdx, qword [oldRSP]
   164 000012F7 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   165 000012FE 4889F8              <1>     mov rax, rdi
   166 00001301 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   167 00001304 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   168 00001308 E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   169 0000130D C3                  <1>     ret
   170                              <1> .allocFail:
   171                              <1>     ;Walk the MCB chain to determine the biggest block size
   172 0000130E 488B35(77C00300)    <1>     mov rsi, [mcbChainPtr]
   173 00001315 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   174                              <1> .af0:
   175 00001317 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   176 0000131A 7409                <1>     je .af1
   177 0000131C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   178 0000131F 0F85BA030000        <1>     jne memSysHalt
   179                              <1> .af1:
   180 00001325 31C9                <1>     xor ecx, ecx
   181 00001327 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   182 0000132A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   183 00001332 7505                <1>     jne .af2
   184 00001334 39D9                <1>     cmp ecx, ebx
   185 00001336 0F47D9              <1>     cmova ebx, ecx
   186                              <1> .af2:
   187 00001339 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   188 0000133C 7410                <1>     je .afExit
   189 0000133E 48C1E104            <1>     shl rcx, 4
   190 00001342 4881C610000000      <1>     add rsi, mcb.program
   191 00001349 4801CE              <1>     add rsi, rcx
   192 0000134C EBD7                <1>     jmp short .af1
   193                              <1> .afExit:
   194 0000134E B808000000          <1>     mov eax, errNoMem
   195 00001353 488B15(90C10300)    <1>     mov rdx, qword [oldRSP]
   196 0000135A 8802                <1>     mov byte [rdx + callerFrame.rax], al
   197 0000135C 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   198 0000135F 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   199 00001363 C3                  <1>     ret
   200                              <1> freeMemory:        ;ah = 49h
   201                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   202                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   203                              <1> ;Always skip the first block as this is the anchor for DOS
   204 00001364 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   205 0000136B 31C9                <1>     xor ecx, ecx
   206 0000136D 488B35(77C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   207 00001374 4889F7              <1>     mov rdi, rsi
   208 00001377 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   209 0000137A 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   210 0000137E 4881C610000000      <1>     add rsi, mcb.program
   211 00001385 4801CE              <1>     add rsi, rcx    ;Go to next block
   212                              <1> .mainLoop:
   213 00001388 31C9                <1>     xor ecx, ecx
   214 0000138A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   215 0000138D 7409                <1>     je .valid
   216 0000138F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   217 00001392 0F8547030000        <1>     jne memSysHalt
   218                              <1> .valid:
   219 00001398 4939F0              <1>     cmp r8, rsi
   220 0000139B 741C                <1>     je .blockFound
   221                              <1>     ;Not valid, check if last block in chain
   222 0000139D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   223 000013A0 0F84A0000000        <1>     je .blockNotFound
   224 000013A6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   225 000013A9 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   226 000013AD 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   227 000013B4 4801CE              <1>     add rsi, rcx    ;Go to next block
   228 000013B7 EBCF                <1>     jmp short .mainLoop
   229                              <1> .blockFound:
   230                              <1>     ;If hole, error.
   231                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   232 000013B9 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   233 000013C1 0F8488000000        <1>     je .blockHole
   234 000013C7 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   235 000013CF 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   236 000013D7 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   237                              <1>     ;It is, let it absorb this space
   238 000013D9 31C9                <1>     xor ecx, ecx
   239 000013DB 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   240 000013DE 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   241 000013E4 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   242                              <1>     ;Replace block marker
   243 000013E7 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   244 000013E9 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   245 000013EB 31C9                <1>     xor ecx, ecx
   246 000013ED 48890E              <1>     mov qword [rsi], rcx
   247 000013F0 48894E08            <1>     mov qword [rsi + 8], rcx
   248 000013F4 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   249                              <1> .blockFoundCheckFollowing:
   250                              <1>     ;First check if we are the last block in chain
   251 000013F7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   252 000013FA 7439                <1>     je .blockFoundExit  ;If yes, exit!
   253 000013FC 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   254 000013FF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   255 00001402 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   256 00001406 4881C110000000      <1>     add rcx, mcb.program
   257 0000140D 4801CE              <1>     add rsi, rcx    ;Go to next block
   258 00001410 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   259 00001418 751B                <1>     jne .blockFoundExit ;If not free, exit
   260                              <1>     ;If free, absorb into block pointed to by rdi
   261 0000141A 31C9                <1>     xor ecx, ecx
   262 0000141C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   263 0000141F 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   264 00001425 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   265                              <1>     ;Replace block marker
   266 00001428 8A06                <1>     mov al, byte [rsi + mcb.marker]
   267 0000142A 8807                <1>     mov byte [rdi + mcb.marker], al
   268 0000142C 31C9                <1>     xor ecx, ecx
   269 0000142E 48890E              <1>     mov qword [rsi], rcx
   270 00001431 48894E08            <1>     mov qword [rsi + 8], rcx
   271                              <1> .blockFoundExit:
   272 00001435 E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   273 0000143A 488B1D(90C10300)    <1>     mov rbx, qword [oldRSP]
   274 00001441 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   275 00001445 C3                  <1>     ret
   276                              <1> .blockNotFound:
   277                              <1>     ;Set CF and error code
   278 00001446 C605(32C10300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   279 0000144D EB07                <1>     jmp short .blockError
   280                              <1> .blockHole:
   281                              <1> ;Cannot free a hole! Fail!
   282 0000144F C605(32C10300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   283                              <1> .blockError:
   284 00001456 C605(2DC10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   285 0000145D C605(2EC10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   286 00001464 66C705(2FC10300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   286 0000146C 00                  <1>
   287 0000146D C605(31C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   288 00001474 B809000000          <1>     mov eax, errMemAddr
   289 00001479 488B1D(90C10300)    <1>     mov rbx, qword [oldRSP]
   290 00001480 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   291 00001483 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   292 00001487 E828020000          <1>     call verifyIntegrityOfMCBChain
   293 0000148C C3                  <1>     ret
   294                              <1> reallocMemory:     ;ah = 4Ah
   295                              <1> ;Input: r8 = address of the block to be realloc'ed
   296                              <1> ;       ebx = How many paras this block should contain after realloc. 
   297                              <1> ;               If ebx = 0, jump to free memory
   298 0000148D 85DB                <1>     test ebx, ebx
   299 0000148F 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   300 00001495 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   301 0000149C 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   302 0000149F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   303 000014A2 7409                <1>     je .ctn
   304 000014A4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   305 000014A7 0F855C010000        <1>     jne .badAddrGiven
   306                              <1> .ctn:
   307                              <1>     ;Provided block is valid and not a hole
   308                              <1>     ;Check if Growth or Shrink
   309 000014AD 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   310 000014B5 7498                <1>     je freeMemory.blockHole
   311 000014B7 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   312 000014BA 31C9                <1>     xor ecx, ecx
   313 000014BC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   314 000014BF 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   315 000014C1 0F8786000000        <1>     ja .growth
   316 000014C7 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   317                              <1> ;We can always shrink
   318 000014CD 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   319 000014CF 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   320 000014D5 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   321 000014D8 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   322 000014DE 48C1E304            <1>     shl rbx, 4
   323 000014E2 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   324 000014E9 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   325 000014EC 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   326 000014EE C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   327 000014F1 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   328 000014F3 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   329 000014FB 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   330 000014FE 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   331 00001500 0F84DB000000        <1>     je .exit
   332                              <1> ;Else, now see if the block following is also free and absorb it
   333 00001506 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   334 00001509 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   335 0000150D 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   336 00001514 4801CE              <1>     add rsi, rcx    ;Goto next arena
   337 00001517 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 0000151A 7409                <1>     je .shrinkAbsorb
   339 0000151C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 0000151F 0F85BA010000        <1>     jne memSysHalt
   341                              <1> .shrinkAbsorb:
   342 00001525 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   343 0000152D 0F85AE000000        <1>     jne .exit
   344                              <1>     ;It is free, absorb it
   345 00001533 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   346 00001536 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   347 0000153C 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   348 0000153F 31C9                <1>     xor ecx, ecx
   349                              <1>     ;Clear absorbed MCB
   350 00001541 48890E              <1>     mov qword [rsi], rcx
   351 00001544 48894E08            <1>     mov qword [rsi + 8], rcx
   352 00001548 E994000000          <1>     jmp .exit
   353                              <1> .growth:
   354                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   355 0000154D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   356 00001550 0F84A0000000        <1>     je .notEnuffMem
   357                              <1> ;Now check the following space is free. If not, not enuff mem err
   358 00001556 31C9                <1>     xor ecx, ecx
   359 00001558 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   360 0000155B 48C1E104            <1>     shl rcx, 4
   361 0000155F 4889F7              <1>     mov rdi, rsi    
   362 00001562 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   363 00001569 4801CE              <1>     add rsi, rcx
   364 0000156C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   365 0000156F 7409                <1>     je .growthOK
   366 00001571 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   367 00001574 0F8565010000        <1>     jne memSysHalt
   368                              <1> .growthOK:
   369                              <1>     ;rdi points to block we are growing
   370 0000157A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   371 00001582 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   372                              <1>     ;rsi must own all memory up to the next owned arena
   373 00001584 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   374 00001586 31C9                <1>     xor ecx, ecx
   375 00001588 31D2                <1>     xor edx, edx
   376 0000158A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   377 0000158D 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   378 00001593 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   379 00001596 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   380 00001598 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   381 0000159A 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   382 0000159D 7759                <1>     ja .notEnuffMem1
   383 0000159F 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   384 000015A1 81FA01000000        <1>     cmp edx, 1
   385 000015A7 7449                <1>     je .notEnuffMem2
   386 000015A9 31C9                <1>     xor ecx, ecx
   387 000015AB 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   388 000015AE 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   389 000015B2 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   390 000015B5 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   391 000015B8 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   392 000015BF 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   393 000015C3 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   394 000015C6 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   395 000015CA 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   396                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   397                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   398 000015CC 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   399 000015CE 7411                <1>     jz .exit
   400 000015D0 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   401 000015D6 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   402 000015D9 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   403                              <1> .exit:
   404 000015E1 E8CE000000          <1>     call verifyIntegrityOfMCBChain
   405 000015E6 488B1D(90C10300)    <1>     mov rbx, qword [oldRSP]
   406 000015ED 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   407 000015F1 C3                  <1>     ret
   408                              <1> .notEnuffMem2:
   409 000015F2 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   410 000015F4 EB02                <1>     jmp short .notEnuffMem1
   411                              <1> .notEnuffMem:
   412 000015F6 31DB                <1>     xor ebx, ebx    ;No space to grow
   413                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   414 000015F8 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   415 000015FD 488B15(90C10300)    <1>     mov rdx, qword [oldRSP]
   416 00001604 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   417 00001607 EB0C                <1>     jmp short .bad
   418                              <1> .badAddrGiven:
   419 00001609 488B15(90C10300)    <1>     mov rdx, qword [oldRSP]
   420 00001610 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   421                              <1> .bad:
   422 00001615 C605(2DC10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   423 0000161C C605(2EC10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   424 00001623 668905(2FC10300)    <1>     mov word [errorExCde], ax   ;Error code
   425 0000162A C605(31C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   426 00001631 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   427 00001634 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   428 00001638 E877000000          <1>     call verifyIntegrityOfMCBChain
   429 0000163D C3                  <1>     ret
   430                              <1> getsetMallocStrat: ;ah = 58h
   431 0000163E 84C0                <1>     test al, al
   432 00001640 741F                <1>     jz .get
   433 00001642 3C02                <1>     cmp al, 2
   434 00001644 7337                <1>     jae .bad
   435                              <1> ;Set here
   436 00001646 488B1D(90C10300)    <1>     mov rbx, qword [oldRSP]
   437 0000164D 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   438 00001651 8805(E6C00300)      <1>     mov byte [allocStrat], al   ;Only save low word
   439 00001657 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   440 0000165B E854000000          <1>     call verifyIntegrityOfMCBChain
   441 00001660 C3                  <1>     ret
   442                              <1> .get:
   443 00001661 488B1D(90C10300)    <1>     mov rbx, qword [oldRSP]
   444 00001668 31C0                <1>     xor eax, eax
   445 0000166A 8A05(E6C00300)      <1>     mov al, byte [allocStrat]
   446 00001670 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   447 00001673 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   448 00001677 E838000000          <1>     call verifyIntegrityOfMCBChain
   449 0000167C C3                  <1>     ret
   450                              <1> .bad:
   451 0000167D C605(2DC10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 00001684 C605(2EC10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   453 0000168B 66C705(2FC10300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   453 00001693 00                  <1>
   454 00001694 C605(31C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   455 0000169B B801000000          <1>     mov eax, errInvFnc
   456 000016A0 488B1D(90C10300)    <1>     mov rbx, qword [oldRSP]
   457 000016A7 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   458 000016AA 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   459 000016AE E801000000          <1>     call verifyIntegrityOfMCBChain
   460 000016B3 C3                  <1>     ret
   461                              <1> ;-----------------------------------:
   462                              <1> ;      Memory related routines      :
   463                              <1> ;-----------------------------------:
   464                              <1> verifyIntegrityOfMCBChain:
   465 000016B4 50                  <1>     push rax
   466 000016B5 53                  <1>     push rbx
   467 000016B6 488B1D(77C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   468                              <1> .ok:
   469 000016BD 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   470 000016C0 7408                <1>     je .ok1
   471 000016C2 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   472 000016C5 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   473                              <1> .exit:
   474 000016C7 5B                  <1>     pop rbx
   475 000016C8 58                  <1>     pop rax
   476 000016C9 C3                  <1>     ret ;We have reached the end of the chain, return all good!
   477                              <1> .ok1:
   478 000016CA 31C0                <1>     xor eax, eax
   479 000016CC 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   480 000016CF 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   481 000016D3 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   482 000016DA 4801C3              <1>     add rbx, rax
   483 000016DD EBDE                <1>     jmp short .ok
   484                              <1> memSysHalt:
   485                              <1> ;Only arrive here if the integrity of the system is not verified
   486                              <1> ;Lock the system
   487 000016DF C605(2DC10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   488 000016E6 C605(2EC10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   489 000016ED 66C705(2FC10300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   489 000016F5 00                  <1>
   490 000016F6 C605(31C10300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   491 000016FD 488D150E000000      <1>     lea rdx, .sysHltString
   492 00001704 B409                <1>     mov ah, 09h
   493 00001706 CD41                <1>     int 41h
   494                              <1>     ;Only halt IRQ's in production!
   495                              <1>     %if !DEBUG
   496 00001708 FA                  <1>     cli ;Halt interrupts
   497 00001709 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   498 0000170B E6A1                <1>     out 0A1h, al
   499 0000170D E621                <1>     out 021h, al
   500                              <1>     %endif
   501 0000170F F4                  <1>     hlt             ;Halt the system
   502 00001710 EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   503 00001712 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   503 0000171B 6C6F636174696F6E20- <1>
   503 00001724 6572726F720D0A      <1>
   504 0000172B 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   504 00001734 616420434F4D4D414E- <1>
   504 0000173D 442C2073797374656D- <1>
   504 00001746 2068616C74656424    <1>
    26                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    27                              <1> ;EXEC and all default terminates are here
    28                              <1> 
    29                              <1> ;========================
    30                              <1> ;   Interrupt handlers
    31                              <1> ;========================
    32                              <1> terminateProcess:   ;Int 40h
    33 0000174E 48CF                <1>     iretq
    34                              <1> terminateRes:       ;Int 47h
    35 00001750 48CF                <1>     iretq
    36                              <1> ;========================
    37                              <1> ;    Int 21h functions
    38                              <1> ;========================
    39                              <1> simpleTerminate:   ;ah = 00h
    40 00001752 C3                  <1>     ret
    41                              <1> terminateStayRes:  ;ah = 31h
    42 00001753 C3                  <1>     ret
    43                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    44 00001754 C3                  <1>     ret
    45                              <1> terminateClean:    ;ah = 4Ch, EXIT
    46 00001755 C3                  <1>     ret
    27                                  %include "./Source/Kernel/Local/Local.asm"
    28                              <1> ;Localisation based functions live here
    29                              <1> 
    30                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    31                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    32                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    33                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    34 00001756 C3                  <1>     ret
    28                                  %include "./Source/Kernel/ctrlc.asm"
    29                              <1> diskErr:
    30 00001757 80CC00              <1>     or ah, 00h
    31 0000175A EB08                <1>     jmp short criticalErrorSetup
    32                              <1> asciiCharDevErr:
    33 0000175C 80CC00              <1>     or ah, 00h
    34 0000175F EB03                <1>     jmp short criticalErrorSetup
    35                              <1> binaryCharDevErr:
    36                              <1> ;Called with ah with additional bits
    37 00001761 80CC38              <1>     or ah, 38h  ;Ignore,Retry,Fail OK
    38                              <1> criticalErrorSetup:
    39 00001764 8825(84C10300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    40 0000176A 48892D(86C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp should be NULLPTR
    41 00001771 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    42                              <1>     ;For now, fall through, but change it later! 
    43                              <1> 
    44                              <1> 
    45                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    46                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    47                              <1> ; to the critical error handler.
    48                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    49                              <1> ; and with Int44Bitfield set
    50                              <1> ;               AH = Critical Error Bitfield
    51                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    52                              <1> ;               Bit 6 - Reserved
    53                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    54                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    55                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    56                              <1> ;               Bits [2-1] = Affected Disk Error
    57                              <1> ;                     0 0   DOS area
    58                              <1> ;                     0 1   FAT area
    59                              <1> ;                     1 0   Directory area
    60                              <1> ;                     1 1   Data area
    61                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    62                              <1> ;               AL  = Failing drive number if AH[7] = 0
    63                              <1> ;               DIL = Error code for errorMsg
    64                              <1> ;               RSI = EA of Device Header for which device the error occured
    65                              <1> ;Return:
    66                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    67                              <1> ;                  = 1 - Retry the Operation    (Retry)
    68                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    69                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    70                              <1> ; Return response from int 44h in al
    71                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    72                              <1> ; This function will terminate the program if an abort was requested!
    73                              <1> ; This function also destroys RBP
    74 00001777 803D(2BC10300)01    <1>     cmp byte [critErrFlag], 1
    75 0000177E 7204                <1>     jb .noIntError  ;If not 0, enter
    76 00001780 B003                <1>     mov al, critFail    ;Else, return Fail always
    77 00001782 EB34                <1>     jmp short .checkResponse
    78                              <1> .noIntError:
    79 00001784 FA                  <1>     cli ;Disable Interrupts
    80 00001785 FE05(2BC10300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
    81 0000178B FE0D(2CC10300)      <1>     dec byte [inDOS]    ;Exiting DOS
    82 00001791 488925(7CC10300)    <1>     mov qword [xInt44hRSP], rsp
    83 00001798 488B25(90C10300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    84 0000179F 31ED                <1>     xor ebp, ebp
    85 000017A1 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
    86 000017A3 488B25(7CC10300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    87 000017AA C605(2BC10300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    88 000017B1 FE05(2CC10300)      <1>     inc byte [inDOS]    ;Reenter DOS
    89 000017B7 FB                  <1>     sti ;Reenable Interrupts
    90                              <1>     ;Now we check that the response given was allowed, and translate if needed
    91                              <1> .checkResponse:
    92 000017B8 3C01                <1>     cmp al, 01h
    93 000017BA 7217                <1>     jb .checkIgnore
    94 000017BC 7420                <1>     je .checkRetry
    95 000017BE 3C03                <1>     cmp al, 03h
    96 000017C0 752F                <1>     jne .abort   ;Must be abort
    97                              <1> ;Here is for fail
    98 000017C2 F605(84C10300)08    <1>     test byte [Int44bitfld], critFailOK
    99 000017C9 7526                <1>     jnz .abort
   100                              <1> .exit:
   101 000017CB C605(2DC10300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   102 000017D2 C3                  <1>     ret
   103                              <1> .checkIgnore:
   104 000017D3 F605(84C10300)20    <1>     test byte [Int44bitfld], critIgnorOK
   105 000017DA 75EF                <1>     jnz .exit
   106 000017DC EB09                <1>     jmp short .setFail
   107                              <1> .checkRetry:
   108 000017DE F605(84C10300)10    <1>     test byte [Int44bitfld], critRetryOK
   109 000017E5 75E4                <1>     jnz .exit
   110                              <1> .setFail:
   111 000017E7 B003                <1>     mov al, critFail
   112 000017E9 FE05(85C10300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   113 000017EF EBC7                <1>     jmp short .checkResponse    ;Double check if I can return Fail
   114                              <1> .abort:
   115                              <1> ;Prepare to abort. We abort from within!
   116                              <1> ;Currently fall into ^C
   117                              <1> ctrlBreakHdlr:
   118                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   119 000017F1 FA                  <1> 	cli
   120 000017F2 488B25(90C10300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   121 000017F9 E825060000          <1> 	call dosPopRegs ;Get user state back
   122 000017FE 488925(4DC10300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   123 00001805 F8                  <1>     clc
   124 00001806 CD43                <1>     int 43h ;Call critical error handler
   125 00001808 FA                  <1>     cli ;Clear interrupts again
   126 00001809 488905(19C10300)    <1>     mov qword [oldRAX], rax ;Save rax
   127 00001810 9C                  <1>     pushfq  ;Get flags in rax
   128 00001811 58                  <1>     pop rax 
   129 00001812 483B25(4DC10300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   130 00001819 750C                <1>     jne .checkCF
   131                              <1> .returnToDOS:
   132 0000181B 488B05(19C10300)    <1>     mov rax, qword [oldRAX]
   133 00001822 E9BE040000          <1>     jmp functionDispatch    ;Goto int 41h
   134                              <1> .checkCF:
   135 00001827 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   136 0000182E A801                <1>     test al, 1  ;CF set?
   137 00001830 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   138 00001832 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   139 00001837 C605(A1C10300)FF    <1>     mov byte [critExit], -1  ;CTRL+BREAK termination
   140 0000183E E9A2040000          <1>     jmp functionDispatch
   141                              <1> 
    29                                  %include "./Source/Kernel/dosPrim.asm"
    30                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    31                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    32                              <1> 
    33                              <1> dosDefCritErrHdlr:
    34                              <1> ;The DOS default critical error handler always returns FAIL
    35 00001843 B003                <1>     mov al, critFail
    36 00001845 48CF                <1>     iretq
    37                              <1> 
    38                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    39                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    40                              <1> ;       rbx = Ptr to the request header for the driver call!
    41 00001847 E819060000          <1>     call dosCrit2Enter
    42 0000184C FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    43 0000184F FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    44 00001852 E818060000          <1>     call dosCrit2Exit
    45 00001857 C3                  <1>     ret
    46                              <1> 
    47                              <1> setupPhysicalDiskRequest:
    48                              <1> ;Ensure that al has valid disk number
    49                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    50                              <1> ;If CF=NC, rbp = DPB ptr.
    51                              <1> ;If CF=CY, exit error
    52 00001858 84C0                <1>     test al, al
    53 0000185A 723F                <1>     jc .diskError
    54 0000185C 3A05(BCC00300)      <1>     cmp al, byte [lastdrvNum]
    55 00001862 7337                <1>     jae .diskError
    56 00001864 50                  <1>     push rax
    57 00001865 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    58 00001867 E8D6030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    59 0000186C 58                  <1>     pop rax
    60 0000186D 7235                <1>     jc .error
    61 0000186F 8805(B4C20300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    62 00001875 488B2D(BDC20300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    63 0000187C 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    64 00001884 750A                <1>     jnz .netError
    65 00001886 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    66 0000188A E81E030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    67 0000188F C3                  <1>     ret
    68                              <1> .netError:
    69 00001890 66C705(2FC10300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    69 00001898 00                  <1>
    70 00001899 EB09                <1>     jmp short .error
    71                              <1> .diskError:
    72 0000189B 66C705(2FC10300)0F- <1>     mov word [errorExCde], errBadDrv
    72 000018A3 00                  <1>
    73                              <1> .error:
    74 000018A4 C605(2EC10300)02    <1>     mov byte [errorLocus], eLocDsk
    75 000018AB C605(31C10300)07    <1>     mov byte [errorAction], eActRetUsr
    76 000018B2 C605(32C10300)09    <1>     mov byte [errorClass], eClsBadFmt
    77 000018B9 F9                  <1>     stc
    78 000018BA C3                  <1>     ret
    79                              <1> 
    80                              <1> setupAbsDiskEntry:
    81                              <1> ;Prepares to sets up the CDS and DPB for the request
    82 000018BB FE05(2CC10300)      <1>     inc byte [inDOS]
    83 000018C1 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    84 000018C2 FC                  <1>     cld ;Set string ops in the right direction
    85 000018C3 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    86 000018C8 7223                <1>     jc .exit    ;Error exit
    87 000018CA C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    88 000018D1 56                  <1>     push rsi
    89 000018D2 50                  <1>     push rax
    90 000018D3 488D35(A8C10300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    91 000018DA 8806                <1>     mov byte [rsi], al  ;Construct a path
    92 000018DC 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    93 000018DF C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    94 000018E3 F8                  <1>     clc
    95                              <1> ;++++++++++++++++++++++++++++
    96                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    97                              <1> ;Entered with path in rsi (ah=03h)
    98 000018E4 B800030000          <1>     mov eax, 0300h  
    99 000018E9 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   100                              <1> ;++++++++++++++++++++++++++++
   101 000018EB 58                  <1>     pop rax
   102 000018EC 5E                  <1>     pop rsi
   103                              <1> .exit:
   104 000018ED 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   105 000018EF C3                  <1>     ret
   106                              <1> 
   107                              <1> absDiskWrite:       ;Int 46h
   108                              <1> ;al = Drive number
   109                              <1> ;rbx = Memory Buffer address to read from
   110                              <1> ;ecx = Number of sectors to write
   111                              <1> ;rdx = Start LBA to write to
   112 000018F0 FA                  <1>     cli
   113 000018F1 488925(90C10300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   114 000018F8 488D25(45CF0300)    <1>     lea rsp, AuxStakTop
   115 000018FF 55                  <1>     push rbp
   116 00001900 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   117 00001901 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   118 00001906 7252                <1>     jc absDiskExit
   119 00001908 E84C020000          <1>     call primReqWriteSetup
   120 0000190D EB1D                <1>     jmp short absDiskReadWriteCommon
   121                              <1> absDiskRead:        ;Int 45h
   122                              <1> ;al = Drive number
   123                              <1> ;rbx = Memory Buffer address to write to
   124                              <1> ;ecx = Number of sectors to read
   125                              <1> ;rdx = Start LBA to read from
   126 0000190F FA                  <1>     cli 
   127 00001910 488925(90C10300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   128 00001917 488D25(45CF0300)    <1>     lea rsp, AuxStakTop
   129 0000191E 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   130 0000191F 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   131 00001920 E896FFFFFF          <1>     call setupAbsDiskEntry
   132 00001925 7233                <1>     jc absDiskExit
   133 00001927 E838020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   134                              <1> absDiskReadWriteCommon:
   135                              <1> ;Entered with the appropriate function number in ah
   136                              <1> ; and primary request header in rbx
   137 0000192C E83B000000          <1>     call absDiskDriverCall
   138 00001931 7427                <1>     jz absDiskExit  ;Skip error code checking
   139 00001933 8A05(50C00300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   140                              <1>     ;DOS uses the following pairs in a table
   141                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   142 00001939 B480                <1>     mov ah, 80h ;Attachment failure
   143 0000193B 3C0C                <1>     cmp al, 0Ch ;Gen error
   144 0000193D 741A                <1>     je .absExit
   145 0000193F B440                <1>     mov ah, 40h ;Seek error
   146 00001941 3C06                <1>     cmp al, 06h
   147 00001943 7414                <1>     je .absExit
   148 00001945 B408                <1>     mov ah, 08h ;Bad CRC
   149 00001947 3C04                <1>     cmp al, 04h
   150 00001949 740E                <1>     je .absExit
   151 0000194B B404                <1>     mov ah, 04h ;Sector not found
   152 0000194D 3C08                <1>     cmp al, 08h
   153 0000194F 7408                <1>     je .absExit
   154 00001951 30E4                <1>     xor ah, ah  ;Write Protect Violation
   155 00001953 84C0                <1>     test al, al
   156 00001955 7402                <1>     je .absExit
   157 00001957 B402                <1>     mov ah, 02h ;Other Error
   158                              <1> .absExit:
   159 00001959 F9                  <1>     stc
   160                              <1> absDiskExit:
   161 0000195A 5B                  <1>     pop rbx
   162 0000195B 5D                  <1>     pop rbp
   163 0000195C FA                  <1>     cli
   164 0000195D FE0D(2CC10300)      <1>     dec byte [inDOS]
   165 00001963 488B25(90C10300)    <1>     mov rsp, qword [oldRSP]
   166 0000196A FB                  <1>     sti ;Reenable interrupts
   167 0000196B C3                  <1>     ret ;Return from interrupt without popping flags!
   168                              <1> absDiskDriverCall:
   169                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   170                              <1> ;       rbx = Request header address
   171                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   172                              <1> ;       eax = Status word from request
   173                              <1> ;       ecx = Number of sectors transferred
   174 0000196C 56                  <1>     push rsi
   175                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   176 0000196D 8B0D(63C00300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   177                              <1>     ;Prepare for goDriver now
   178 00001973 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   179 00001977 E8CBFEFFFF          <1>     call goDriver   ;Make request
   180 0000197C 5E                  <1>     pop rsi
   181 0000197D 8B05(63C00300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   182 00001983 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   183 00001985 0FB705(50C00300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   184 0000198C 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   185 00001990 C3                  <1>     ret
   186                              <1> 
   187                              <1> getDiskDPB:
   188                              <1> ;Gets the disk DPB if the Disk is physical
   189                              <1> ;Otherwise will return a pointer to the drive DPB
   190                              <1> ;Called with rdi pointing to the CDS
   191                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   192 00001991 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   193 00001995 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   194 00001998 8805(B4C20300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   195 0000199E E80A020000          <1>     call setWorkingDPB
   196 000019A3 57                  <1>     push rdi    ;Save the CDS ptr
   197 000019A4 E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   198 000019A9 5F                  <1>     pop rdi
   199 000019AA 7234                <1>     jc .exitBad ;Preserve CF
   200 000019AC 7531                <1>     jnz .exit
   201                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   202 000019AE 8A0D(BCC00300)      <1>     mov cl, byte [lastdrvNum]
   203 000019B4 4831C0              <1>     xor rax, rax
   204 000019B7 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   205 000019BA 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   206 000019BE 488B3D(A9C00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   207                              <1> .checkCDS:
   208 000019C5 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   209 000019C9 7509                <1>     jne .next
   210 000019CB 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   211 000019CF 7403                <1>     jz .next    ;IF yes, skip it
   212 000019D1 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   213                              <1> .next:
   214 000019D4 4881C75B000000      <1>     add rdi, cds_size
   215 000019DB FEC9                <1>     dec cl
   216 000019DD 75E6                <1>     jnz .checkCDS
   217                              <1> .exit:
   218 000019DF F8                  <1>     clc
   219                              <1> .exitBad:
   220 000019E0 C3                  <1>     ret
   221                              <1> 
   222                              <1> ensureDiskValid:
   223                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   224                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   225                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   226                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   227                              <1> .medChk:
   228 000019E1 E809010000          <1>     call secdReqMedCheckSetup    ;Prepare disk io packet for media check
   229                              <1> ;Return in rbx the req hdr address
   230 000019E6 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   231 000019EA E858FEFFFF          <1>     call goDriver   ;Request!
   232 000019EF 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   233 000019F3 F7C700800000        <1>     test edi, drvErrStatus
   234 000019F9 756C                <1>     jnz .diskDrvCritErrMedChk
   235                              <1> .medChkIgnore:
   236 000019FB 8A05(B4C20300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   237 00001A01 30E4                <1>     xor ah, ah
   238 00001A03 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   239 00001A06 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   240 00001A09 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   241 00001A0B 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   242 00001A0D E8CBECFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   243 00001A12 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   244 00001A13 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   245                              <1>     ;ZF=NZ from test for dirty buffers
   246                              <1> .exit:
   247 00001A15 C3                  <1>     ret
   248                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   249 00001A16 C605(8DD50300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   250 00001A1D E8DFECFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   251                              <1>     ;Get a buffer to read BPB into in rdi
   252 00001A22 B101                <1>     mov cl, dosBuffer
   253 00001A24 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   254 00001A26 E8F8ECFFFF          <1>     call getBuffer ;Get a disk buffer
   255 00001A2B 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   256 00001A2D 4889DF              <1>     mov rdi, rbx
   257                              <1> .repeatEP:
   258 00001A30 E8ED000000          <1>     call secdReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   259 00001A35 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   260 00001A39 E809FEFFFF          <1>     call goDriver   ;Request!
   261 00001A3E 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   262 00001A42 A900800000          <1>     test eax, drvErrStatus
   263 00001A47 7565                <1>     jnz .diskDrvCritErrBPB
   264                              <1>     ;Now rebuild the dpb fields for this drive
   265 00001A49 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   266 00001A4D E86A060000          <1>     call createDPB  
   267                              <1>     ;Adjust the buffer header information
   268 00001A52 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   269 00001A55 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   270 00001A58 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   271 00001A5B 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   272 00001A5E 30E4                <1>     xor ah, ah
   273 00001A60 8825(8DD50300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   274 00001A66 C3                  <1>     ret
   275                              <1> .diskDrvCritErrMedChk:
   276                              <1> ;Critical Errors fall through here
   277                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   278 00001A67 48893D(74C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   279 00001A6E 48892D(86C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   280 00001A75 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   281 00001A78 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   282 00001A7A 8825(84C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   283 00001A80 E8F2FCFFFF          <1>     call criticalDOSError
   284 00001A85 488B3D(74C10300)    <1>     mov rdi, qword [xInt44RDI]
   285 00001A8C 488B2D(86C30300)    <1>     mov rbp, qword [tmpDPBPtr]
   286 00001A93 3C01                <1>     cmp al, critRetry
   287 00001A95 0F8446FFFFFF        <1>     je .medChk
   288 00001A9B 3C00                <1>     cmp al, critIgnore
   289 00001A9D 0F8458FFFFFF        <1>     je .medChkIgnore
   290 00001AA3 66C705(2FC10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   290 00001AAB 00                  <1>
   291 00001AAC F9                  <1>     stc ;Set error flag to indicate fail
   292 00001AAD C3                  <1>     ret ;And exit from function with CF set
   293                              <1> 
   294                              <1> .diskDrvCritErrBPB:
   295                              <1>     ;eax has status word, rbp has dpb ptr
   296                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   297 00001AAE 48893D(74C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   298 00001AB5 48892D(86C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   299 00001ABC 89C7                <1>     mov edi, eax    ;Transfer the status word over
   300 00001ABE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   301 00001AC1 B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK ;Set bits
   302 00001AC3 8825(84C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   303 00001AC9 E8A9FCFFFF          <1>     call criticalDOSError
   304 00001ACE 488B3D(74C10300)    <1>     mov rdi, qword [xInt44RDI]
   305 00001AD5 488B2D(86C30300)    <1>     mov rbp, qword [tmpDPBPtr]
   306 00001ADC 3C01                <1>     cmp al, critRetry
   307 00001ADE 0F844CFFFFFF        <1>     je .repeatEP
   308                              <1>     ;Else we fail (Ignore=Fail here)
   309 00001AE4 66C705(2FC10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   309 00001AEC 00                  <1>
   310 00001AED F9                  <1>     stc ;Set error flag to indicate fail
   311 00001AEE C3                  <1>     ret ;And exit from function with CF set
   312                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   313                              <1> ;           Primitive Driver Requests
   314                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   315                              <1> ;First are Disk requests, then Char device requests
   316                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   317                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   318                              <1> 
   319                              <1> secdReqMedCheckSetup:
   320                              <1> ;Prepare the diskIO packet for mediacheck
   321                              <1> ;rbp has DPB pointer for device to check media on
   322 00001AEF 50                  <1>     push rax
   323 00001AF0 C605(23C00300)17    <1>     mov byte [secdReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   324 00001AF7 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   325 00001AFA 8805(30C00300)      <1>     mov byte [secdReqHdr + mediaCheckReqPkt.medesc], al
   326 00001B00 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   327 00001B03 8805(24C00300)      <1>     mov byte [secdReqHdr + mediaCheckReqPkt.unitnm], al
   328 00001B09 C605(25C00300)01    <1>     mov byte [secdReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   329 00001B10 66C705(26C00300)00- <1>     mov word [secdReqHdr + mediaCheckReqPkt.status], 0
   329 00001B18 00                  <1>
   330                              <1> secdReqCommonExit:
   331                              <1> ;Returns in rbx the secondary request header as these functions
   332                              <1> ; setup the request in the secondary request header space
   333 00001B19 58                  <1>     pop rax
   334 00001B1A 488D1D(23C00300)    <1>     lea rbx, secdReqHdr ;Put in rbx the secondary request header
   335 00001B21 C3                  <1>     ret
   336                              <1> 
   337                              <1> secdReqGetBPBSetup:
   338                              <1> ;rbp has DPB pointer for device
   339                              <1> ;rdi has sector buffer header pointer for transfer
   340 00001B22 50                  <1>     push rax
   341 00001B23 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   342 00001B27 48893D(5BC00300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   343 00001B2E C605(4DC00300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   344 00001B35 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   345 00001B38 8805(5AC00300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   346 00001B3E 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   347 00001B41 8805(4EC00300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   348 00001B47 C605(4FC00300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   349 00001B4E 66C705(50C00300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   349 00001B56 00                  <1>
   350 00001B57 EBC0                <1>     jmp short secdReqCommonExit
   351                              <1> 
   352                              <1> primReqWriteSetup:
   353 00001B59 50                  <1>     push rax
   354 00001B5A B408                <1>     mov ah, drvWRITE    ;Command code
   355 00001B5C 0225(5AC10300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   356 00001B62 EB03                <1>     jmp short primReqRWCommon
   357                              <1> primReqReadSetup:
   358 00001B64 50                  <1>     push rax
   359 00001B65 B404                <1>     mov ah, drvREAD
   360                              <1> primReqRWCommon:
   361                              <1> ;Sets up the IO request packet with:
   362                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   363                              <1> ; rbx = Data storage buffer ptr
   364                              <1> ; ecx = Number of sectors to transfer
   365                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   366                              <1> ; ~~~~ Set by entry function ~~~~ 
   367                              <1> ; ah = Command code
   368                              <1> ; All regs preserved EXCEPT rbx.
   369                              <1> ; Return: rbx = Transfer Address
   370 00001B67 48891D(5BC00300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   371 00001B6E 890D(63C00300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   372 00001B74 C605(4DC00300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   373 00001B7B 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   374 00001B80 8905(4EC00300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   375 00001B86 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   376 00001B89 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   377                              <1>     ;Disk operations only here!
   378 00001B8B 488915(67C00300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   379 00001B92 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   380 00001B95 8805(5AC00300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   381 00001B9B 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   382 00001B9E 8805(4EC00300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   383                              <1> primReqCommonExit:
   384                              <1> ;Returns in rbx the primary request header as these functions
   385                              <1> ; setup the request in the primary request header space
   386 00001BA4 58                  <1>     pop rax
   387 00001BA5 488D1D(4DC00300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   388 00001BAC C3                  <1>     ret
    30                                  %include "./Source/Kernel/dosUtils.asm"
    31                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    32                              <1> 
    33                              <1> ;Basic Drive related Utilities
    34                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    35                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    36                              <1> ; that gets set up)
    37                              <1> 
    38                              <1> setWorkingDPB:
    39                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    40 00001BAD 48892D(B5C20300)    <1>     mov qword [workingDPB], rbp
    41 00001BB4 C3                  <1>     ret
    42                              <1> 
    43                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    44                              <1> ;Returns ptr to user regs in rsi
    45 00001BB5 488B35(90C10300)    <1>     mov rsi, qword [oldRSP]
    46 00001BBC C3                  <1>     ret
    47                              <1> 
    48                              <1> walkDPBchain:
    49                              <1> ;Called with al = 0 based drive number
    50                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    51 00001BBD 488B35(87C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    52                              <1> .walk:
    53 00001BC4 4881FEFFFFFFFF      <1>     cmp rsi, -1
    54 00001BCB 740A                <1>     je .exitBad
    55 00001BCD 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    56 00001BCF 7407                <1>     je .exit    ;Drive found
    57 00001BD1 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    58 00001BD5 EBED                <1>     jmp short .walk
    59                              <1> .exitBad:
    60 00001BD7 F9                  <1>     stc
    61                              <1> .exit:
    62 00001BD8 C3                  <1>     ret
    63                              <1> setDrive:   
    64                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    65                              <1> ;Input: al = 1-based drive number
    66                              <1> ;Output: al = 0-based drive number
    67                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
    68                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
    69                              <1> ;            set.
    70 00001BD9 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
    71 00001BDE 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
    72 00001BE0 56                  <1>     push rsi
    73 00001BE1 488B35(BDC20300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
    74 00001BE8 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
    75 00001BEE 5E                  <1>     pop rsi
    76 00001BEF 7401                <1>     jz .exit
    77 00001BF1 F9                  <1>     stc
    78                              <1> .exit:
    79 00001BF2 C3                  <1>     ret
    80                              <1> 
    81                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
    82                              <1> ;Allows a redirector or subst/join to build a CDS
    83                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
    84                              <1> ; volumes, that are made at system boot.
    85                              <1> ;Input: al = Drive Letter for drive
    86                              <1> ;       workingCDS = Set to the CDS array slot for the drive
    87                              <1> ;Output: rdi = newly filled in workingCDS
    88                              <1> ;CF=NC => CDS valid and has a DPB
    89                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
    90 00001BF3 50                  <1>     push rax
    91 00001BF4 2C40                <1>     sub al, "A"-1
    92 00001BF6 3A05(BBC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
    93 00001BFC 488B3D(BDC20300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
    94 00001C03 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
    95 00001C09 58                  <1>     pop rax
    96 00001C0A 7235                <1>     jb .exit    ;Exit with CF=CY
    97 00001C0C 50                  <1>     push rax
    98 00001C0D 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
    99 00001C12 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   100 00001C14 58                  <1>     pop rax
   101 00001C15 66814F430040        <1>     or word [rdi + cds.wFlags], cdsPhysDrive    ;Config bit set
   102 00001C1B C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   103 00001C22 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   104 00001C2A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   105                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   106 00001C30 50                  <1>     push rax
   107 00001C31 56                  <1>     push rsi
   108 00001C32 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   109 00001C34 E884FFFFFF          <1>     call walkDPBchain
   110 00001C39 7204                <1>     jb .skipSettingDPB
   111 00001C3B 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   112                              <1> .skipSettingDPB:
   113 00001C3F 5E                  <1>     pop rsi
   114 00001C40 58                  <1>     pop rax
   115                              <1> .exit:
   116 00001C41 C3                  <1>     ret
   117                              <1> 
   118                              <1> getCDS:     ;Int 4Fh AX=1219h
   119                              <1> ;Gets the device DPB and saves it in the DOS variable
   120                              <1> ;This can be called to get CDS for network drives too!
   121                              <1> ;Input: al = 1 based drive number
   122                              <1> ;Sets workingCDS var with the CDS for the device. 
   123                              <1> ;   If device on a network, sets CF
   124                              <1> ;Returns al with 0-based drive number
   125 00001C42 84C0                <1>     test al, al
   126 00001C44 7508                <1>     jnz .skip
   127 00001C46 8A05(57C10300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   128 00001C4C FEC0                <1>     inc al
   129                              <1> .skip:
   130 00001C4E FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   131 00001C50 56                  <1>     push rsi
   132 00001C51 C605(2EC10300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   133 00001C58 F605(A0C10300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   134 00001C5F 7423                <1>     jz .physDrive
   135                              <1>     ;Invokation via 21/5D00, not yet fully supported
   136                              <1>     ;If returned with CF=CY, consider it an error for now
   137 00001C61 50                  <1>     push rax
   138 00001C62 57                  <1>     push rdi
   139 00001C63 488D3D(CDC20300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   140 00001C6A 48893D(BDC20300)    <1>     mov qword [workingCDS], rdi ;Make it current
   141 00001C71 0441                <1>     add al, "A" ;Convert to a drive letter
   142 00001C73 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   143 00001C78 66F747430040        <1>     test word [rdi + cds.wFlags], cdsPhysDrive  ;Is the CDS valid?
   144 00001C7E 5F                  <1>     pop rdi
   145 00001C7F 58                  <1>     pop rax
   146 00001C80 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   147 00001C82 EB17                <1>     jmp short .exitOk   ;All oki
   148                              <1> .physDrive:
   149 00001C84 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   150 00001C89 7208                <1>     jc .exitBad
   151 00001C8B 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   152 00001C91 7508                <1>     jnz .exitOk ;Exit with flag cleared
   153                              <1>     ;Else Return to unknown error locus
   154                              <1> .exitBad:
   155 00001C93 C605(2EC10300)01    <1>     mov byte [errorLocus], eLocUnk
   156                              <1> .exitBad1:
   157 00001C9A F9                  <1>     stc
   158                              <1> .exitOk:
   159 00001C9B 5E                  <1>     pop rsi
   160 00001C9C C3                  <1>     ret
   161                              <1> 
   162                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   163                              <1>     ;Gets the CDS for the current drive in al
   164                              <1>     ;Input: al = Drive number, 0 = A ...
   165                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   166                              <1>     ;        CF=CY => al not valid
   167 00001C9D 3A05(BCC00300)      <1>     cmp al, byte [lastdrvNum]
   168 00001CA3 7202                <1>     jb .ctn
   169 00001CA5 F9                  <1>     stc 
   170 00001CA6 C3                  <1>     ret
   171                              <1> .ctn:
   172 00001CA7 50                  <1>     push rax
   173 00001CA8 52                  <1>     push rdx
   174 00001CA9 0FB6C0              <1>     movzx eax, al
   175 00001CAC 48BE5B000000000000- <1>     mov rsi, cds_size
   175 00001CB5 00                  <1>
   176 00001CB6 31D2                <1>     xor edx, edx
   177 00001CB8 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
   178 00001CBA 488D05(A9C00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
   179 00001CC1 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   180 00001CC4 488935(BDC20300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   181 00001CCB 5A                  <1>     pop rdx
   182 00001CCC 58                  <1>     pop rax
   183 00001CCD F8                  <1>     clc
   184 00001CCE C3                  <1>     ret
   185                              <1> 
   186                              <1> 
   187                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   188                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   189                              <1> ;Input: AL = Char to normalise.
   190                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   191                              <1> ;If path separator, set ZF=ZE
   192 00001CCF 3C5C                <1>     cmp al, "\"
   193 00001CD1 7406                <1>     je .exit
   194 00001CD3 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   195 00001CD5 7502                <1>     jne .exit
   196 00001CD7 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   197                              <1> .exit:
   198 00001CD9 C3                  <1>     ret
   199                              <1> 
   200                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   201                              <1> ;Convert a lowercase char to uppercase
   202                              <1> ; Leave alone uppercase chars and invalid chars
   203                              <1> ;Input: al = Char to convert to uppercase
   204                              <1> ;Output: al = Processed char
   205 00001CDA 3C7A                <1>     cmp al, "z"
   206 00001CDC 7706                <1>     ja .exit
   207 00001CDE 3C61                <1>     cmp al, "a"
   208 00001CE0 7202                <1>     jb .exit
   209 00001CE2 2C20                <1>     sub al, "a" - "A"   ;Convert the char
   210                              <1> .exit:
   211 00001CE4 C3                  <1>     ret
    31                                  %include "./Source/Kernel/dosMain.asm"
    32                              <1> ;-----------------------------------:
    33                              <1> ;        Main Kernel dispatch       :
    34                              <1> ;            and routines           :
    35                              <1> ;-----------------------------------:
    36                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    37                              <1> ;ah = Function number, all other registers have various meanings
    38                              <1>  %if DEBUG
    39                              <1>     ;Entry function
    40                              <1>     debugEnterM
    41                              <1>     lea rbp, .l0000
    42                              <1>     call debPrintNullString
    43                              <1>     call debPrintFunctionName
    44                              <1>     jmp short .l0001
    45                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    46                              <1> .l0001:    
    47                              <1>     debugExitM
    48                              <1>     %endif
    49 00001CE5 FA                  <1>     cli ;Halt external interrupts
    50 00001CE6 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    51 00001CE7 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    52 00001CEA 0F832F010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    53                              <1>     ;Cherry pick functions
    54 00001CF0 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    55 00001CF3 722C                <1>     jb .fsbegin   ;If below skip these checks
    56 00001CF5 0F847E010000        <1>     je ctrlBreakCheck
    57 00001CFB 80FC64              <1>     cmp ah, 64h
    58 00001CFE 0F84BE010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    59 00001D04 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    60 00001D06 80FC51              <1>     cmp ah, 51h
    61 00001D09 0F84A1010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    62 00001D0F 80FC62              <1>     cmp ah, 62h
    63 00001D12 0F84A1010000        <1>     je getPSPaddr          ;Calls the above function
    64 00001D18 80FC50              <1>     cmp ah, 50h
    65 00001D1B 0F8486010000        <1>     je setCurrProcessID
    66                              <1> .fsbegin:
    67 00001D21 E814010000          <1>     call dosPushRegs ;Push the usual prologue registers
    68 00001D26 488B05(90C10300)    <1>     mov rax, qword [oldRSP]
    69 00001D2D 488905(88C10300)    <1>     mov qword [oldoldRSP], rax
    70 00001D34 FE05(2CC10300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    71 00001D3A 488925(90C10300)    <1>     mov qword [oldRSP], rsp
    72                              <1> ;Network related variable resetting
    73 00001D41 C605(A0C10300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    74                              <1> ;Here, we want to save oldRSP in the callers PSP
    75 00001D48 803D(2CC10300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    76 00001D4F 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    77 00001D51 488B05(43C10300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    78 00001D58 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    79                              <1> .fsb1:
    80 00001D5C 58                  <1>     pop rax     ;Get old rax back
    81 00001D5D 50                  <1>     push rax    ;and push it back onto the stack
    82 00001D5E 488D25(B6C80300)    <1>     lea rsp, critStakTop
    83 00001D65 FB                  <1>     sti         ;Reenable interrupts
    84                              <1> 
    85 00001D66 C605(87C10300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    86 00001D6D 48891D(98C10300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    87 00001D74 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
    88 00001D77 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    89 00001D79 50                  <1>     push rax        ;Push rax onto the stack
    90 00001D7A 488D0599E2FFFF      <1>     lea rax, kDispTbl
    91 00001D81 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    92 00001D84 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    93 00001D88 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    94 00001D8B 58                  <1>     pop rax
    95                              <1> 
    96 00001D8C 84E4                <1>     test ah, ah     ;Simple Terminate function?
    97 00001D8E 741C                <1>     jz .fddiskOp
    98 00001D90 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    99 00001D93 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   100 00001D95 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   101 00001D98 7712                <1>     ja .fddiskOp
   102                              <1> ;Char operations here
   103 00001D9A F605(2BC10300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   104 00001DA1 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   105 00001DA3 488D25(45CF0300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   106 00001DAA EB40                <1>     jmp short .fdGoToFunction
   107                              <1> .fddiskOp:
   108                              <1>     ;Disk operations go here
   109                              <1>     ;Save rax on entry to a disk funciton
   110 00001DAC 488905(19C10300)    <1>     mov qword [oldRAX], rax
   111                              <1>     ;Clear up error info
   112 00001DB3 C605(2EC10300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   113 00001DBA C605(2BC10300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   114 00001DC1 C605(2DC10300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   115                              <1> 
   116 00001DC8 50                  <1>     push rax
   117 00001DC9 B482                <1>     mov ah, 82h ;Cancel all critical section!
   118 00001DCB CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   119 00001DCD 58                  <1>     pop rax
   120                              <1> 
   121 00001DCE C605(87C10300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   122 00001DD5 488D25(85D50300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   123 00001DDC F605(59C10300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   124 00001DE3 7407                <1>     jz .fdGoToFunction
   125                              <1> ; HANDLE CTRL+BREAK HERE!
   126 00001DE5 50                  <1>     push rax
   127 00001DE6 E802EFFFFF          <1>     call checkBreakOnCon    ; Check for a ^C in the CON buffer
   128 00001DEB 58                  <1>     pop rax
   129                              <1> .fdGoToFunction:
   130 00001DEC 48871D(98C10300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   131                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   132                              <1>     ;
   133                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   134                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   135                              <1>     ;
   136                              <1>     %if DEBUG && REGS
   137                              <1>     ;Print stack if necessary function
   138                              <1>     debugEnterM
   139                              <1>     call debPrintDOSStack
   140                              <1>     debugExitM
   141                              <1>     %endif
   142 00001DF3 FF15(98C10300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   143                              <1>     %if DEBUG
   144                              <1>     ;Entry function
   145                              <1>     debugEnterM
   146                              <1>     lea rbp, .l0002
   147                              <1>     call debPrintNullString
   148                              <1>     jmp short .l0003
   149                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   150                              <1> .l0003:    
   151                              <1>     debugExitM
   152                              <1>     %endif
   153                              <1>     %if DEBUG && REGS
   154                              <1>     ;Exit function
   155                              <1>     debugEnterM
   156                              <1>     call debPrintDOSStack
   157                              <1>     debugExitM
   158                              <1>     %endif
   159                              <1> .fdExit:
   160 00001DF9 FA                  <1>     cli     ;Redisable interrupts
   161 00001DFA FE0D(2CC10300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   162 00001E00 488B25(90C10300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   163 00001E07 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   164 00001E0A 488B05(88C10300)    <1>     mov rax, qword [oldoldRSP]
   165 00001E11 488905(90C10300)    <1>     mov qword [oldRSP], rax
   166 00001E18 E806000000          <1>     call dosPopRegs  ;Pop the frame
   167 00001E1D 48CF                <1>     iretq
   168                              <1> .fdExitBad:
   169 00001E1F 30C0                <1>     xor al, al
   170                              <1> defaultIretq:
   171 00001E21 48CF                <1>     iretq
   172                              <1> dosPopRegs:
   173 00001E23 8F05(33C10300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   174 00001E29 58                  <1>     pop rax
   175 00001E2A 5B                  <1>     pop rbx
   176 00001E2B 59                  <1>     pop rcx
   177 00001E2C 5A                  <1>     pop rdx
   178 00001E2D 5E                  <1>     pop rsi
   179 00001E2E 5F                  <1>     pop rdi
   180 00001E2F 5D                  <1>     pop rbp
   181 00001E30 4158                <1>     pop r8
   182 00001E32 4159                <1>     pop r9
   183 00001E34 FF25(33C10300)      <1>     jmp qword [dosReturn]
   184                              <1> dosPushRegs:
   185 00001E3A 8F05(33C10300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   186 00001E40 4151                <1>     push r9
   187 00001E42 4150                <1>     push r8
   188 00001E44 55                  <1>     push rbp
   189 00001E45 57                  <1>     push rdi
   190 00001E46 56                  <1>     push rsi
   191 00001E47 52                  <1>     push rdx
   192 00001E48 51                  <1>     push rcx
   193 00001E49 53                  <1>     push rbx
   194 00001E4A 50                  <1>     push rax
   195 00001E4B FF25(33C10300)      <1>     jmp qword [dosReturn]
   196                              <1> dosCrit1Enter:
   197 00001E51 C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   198 00001E52 B801800000          <1>     mov eax, 8001h
   199 00001E57 CD4A                <1>     int 4ah
   200 00001E59 58                  <1>     pop rax
   201 00001E5A C3                  <1>     ret
   202                              <1> dosCrit1Exit:
   203 00001E5B C3                  <1>     ret
   204 00001E5C B801810000          <1>     mov eax, 8101h
   205 00001E61 CD4A                <1>     int 4ah
   206 00001E63 58                  <1>     pop rax
   207 00001E64 C3                  <1>     ret
   208                              <1> dosCrit2Enter:
   209 00001E65 C3                  <1>     ret
   210 00001E66 B802800000          <1>     mov eax, 8002h
   211 00001E6B CD4A                <1>     int 4ah
   212 00001E6D 58                  <1>     pop rax
   213 00001E6E C3                  <1>     ret
   214                              <1> dosCrit2Exit:
   215 00001E6F C3                  <1>     ret
   216 00001E70 B802810000          <1>     mov eax, 8102h
   217 00001E75 CD4A                <1>     int 4ah
   218 00001E77 58                  <1>     pop rax
   219 00001E78 C3                  <1>     ret
   220                              <1> ;========================================:
   221                              <1> ;      Reentrant Kernel Functions        :
   222                              <1> ;========================================:
   223                              <1> ctrlBreakCheck:    ;ah = 33h
   224 00001E79 84C0                <1>     test al, al
   225 00001E7B 7508                <1>     jnz .cbcget  ;Get the state or other functions
   226 00001E7D 8A15(59C10300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   227 00001E83 48CF                <1>     iretq
   228                              <1> .cbcget:
   229 00001E85 3C02                <1>     cmp al, 02h
   230 00001E87 771A                <1>     ja .cbcBad
   231 00001E89 740D                <1>     jz .cbcxchg ;Function 2
   232 00001E8B 52                  <1>     push rdx
   233 00001E8C 80E201              <1>     and dl, 1   ;Get only the bottom bit
   234 00001E8F 8815(59C10300)      <1>     mov byte [breakFlag], dl    ;Set the state
   235 00001E95 5A                  <1>     pop rdx
   236 00001E96 48CF                <1>     iretq
   237                              <1> .cbcxchg:
   238 00001E98 80E201              <1>     and dl, 1
   239 00001E9B 8615(59C10300)      <1>     xchg byte [breakFlag], dl
   240 00001EA1 48CF                <1>     iretq
   241                              <1> .cbcBad:
   242 00001EA3 B0FF                <1>     mov al, -1
   243 00001EA5 48CF                <1>     iretq
   244                              <1> 
   245                              <1> 
   246                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   247 00001EA7 48891D(43C10300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   248 00001EAE 48CF                <1>     iretq
   249                              <1> 
   250                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   251 00001EB0 488B15(43C10300)    <1>     mov rdx, qword [currentPSP]
   252 00001EB7 48CF                <1>     iretq
   253                              <1> 
   254                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   255 00001EB9 488B15(43C10300)    <1>     mov rdx, qword [currentPSP]
   256 00001EC0 48CF                <1>     iretq
   257                              <1> 
   258                              <1> setDriverLookahead:;ah = 64h, reserved
   259 00001EC2 48CF                <1>     iretq
   260                              <1> 
   261                              <1> ;========================================:
   262                              <1> ;            Kernel Functions            :
   263                              <1> ;========================================:
   264                              <1> diskReset:         ;ah = 0Dh
   265                              <1> ;Flush all dirty buffers to disk
   266 00001EC4 488B3D(A1C00300)    <1>     mov rdi, qword [bufHeadPtr]
   267                              <1> .drCheckBuffer:
   268 00001ECB F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   269 00001ECF 7407                <1>     jz .drGotoNextBuffer
   270                              <1> .drFlushBuffer:
   271 00001ED1 E8E8E6FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   272 00001ED6 720C                <1>     jc .drExit
   273                              <1> .drGotoNextBuffer:
   274 00001ED8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   275 00001EDB 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   276 00001EE2 75E7                <1>     jne .drCheckBuffer
   277                              <1> .drExit:
   278 00001EE4 C3                  <1>     ret
   279                              <1> 
   280                              <1> selectDisk:        ;ah = 0Eh
   281                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   282 00001EE5 88D0                <1>     mov al, dl
   283 00001EE7 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   284 00001EE9 E8EBFCFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   285 00001EEE 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   286 00001EF0 8805(57C10300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   287                              <1> .skipSettingCurrent:
   288 00001EF6 0FB605(BCC00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   289 00001EFD C3                  <1>     ret
   290                              <1> 
   291                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   292 00001EFE 8A05(57C10300)      <1>     mov al, byte [currentDrv]
   293 00001F04 C3                  <1>     ret
   294                              <1> 
   295                              <1> FATinfoDefault:    ;ah = 1Bh
   296 00001F05 30D2                <1>     xor dl, dl
   297                              <1> FATinfoDevice:     ;ah = 1Ch
   298                              <1> ;Return in:
   299                              <1> ;   al = Number of sectors per cluster
   300                              <1> ;   edx = Number of clusters
   301                              <1> ;   cx =  Size of a clsuter
   302 00001F07 84D2                <1>     test dl, dl
   303 00001F09 7508                <1>     jnz .fidSkipdefault
   304 00001F0B 8A15(57C10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   305 00001F11 FEC2                <1>     inc dl
   306                              <1> .fidSkipdefault:
   307 00001F13 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   308                              <1> ;Walk the dpb chain manually
   309 00001F15 88D0                <1>     mov al, dl  ;Move drive number into al
   310 00001F17 E8A1FCFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   311 00001F1C 7331                <1>     jnc .fidDPBFound
   312                              <1> ;Else, we at an error.
   313                              <1> ;Simply return with CY set and error code in al with extended error info
   314 00001F1E E892FCFFFF          <1>     call getUserRegs
   315 00001F23 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   316 00001F2B B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   317 00001F30 66C705(2FC10300)0F- <1>     mov word [errorExCde], errBadDrv     
   317 00001F38 00                  <1>
   318 00001F39 C605(2EC10300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   319 00001F40 C605(32C10300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   320 00001F47 C605(31C10300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   321 00001F4E C3                  <1>     ret
   322                              <1> .fidDPBFound:
   323 00001F4F 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   324 00001F52 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   325 00001F54 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   326 00001F57 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ; Save the value in ecx
   327 00001F5B 488D5E23            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   328 00001F5F E851FCFFFF          <1>     call getUserRegs
   329 00001F64 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   330 00001F68 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   331 00001F6C 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   332 00001F70 C3                  <1>     ret
   333                              <1> 
   334                              <1> setIntVector:      ;ah = 25h
   335                              <1> ;Called with:
   336                              <1> ;   rdx = Pointer to interrupt handler
   337                              <1> ;   al = Interrupt number
   338 00001F71 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   339 00001F73 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   340                              <1> ;First call to get default BIOS segement selector and attribute word
   341 00001F79 88C3                <1>     mov bl, al  ;Set interrupt number 
   342 00001F7B B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   343 00001F80 CD35                <1>     int 35h
   344 00001F82 E82EFCFFFF          <1>     call getUserRegs
   345 00001F87 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   346 00001F8B 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   347 00001F8D 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   348                              <1> ;dx preserves the attribute word
   349 00001F8F B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   350 00001F94 CD35                <1>     int 35h
   351 00001F96 E81AFCFFFF          <1>     call getUserRegs
   352 00001F9B 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   353 00001F9D C3                  <1>     ret
   354                              <1> createNewPSP:      ;ah = 26h
   355 00001F9E C3                  <1>     ret
   356                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   357 00001F9F 8805(5AC10300)      <1>     mov byte [verifyFlag], al
   358 00001FA5 8025(5AC10300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   359 00001FAC C3                  <1>     ret
   360                              <1> getDOSversion:     ;ah = 30h
   361 00001FAD E803FCFFFF          <1>     call getUserRegs
   362 00001FB2 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   363 00001FB4 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   364 00001FB7 668B0542E0FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   365 00001FBE 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   366 00001FC1 C3                  <1>     ret
   367                              <1> 
   368                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   369                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   370 00001FC2 30D2                <1>     xor dl, dl
   371                              <1> getDeviceDPBptr:   ;ah = 32h
   372                              <1> ;On entry: dl = Drive number
   373                              <1> ;On exit: rbx = DPB pointer
   374 00001FC4 84D2                <1>     test dl, dl
   375 00001FC6 7508                <1>     jnz .gddpskipdefault
   376 00001FC8 8A15(57C10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   377 00001FCE FEC2                <1>     inc dl
   378                              <1> .gddpskipdefault:
   379                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   380 00001FD0 FECA                <1>     dec dl
   381 00001FD2 88D0                <1>     mov al, dl
   382 00001FD4 E869FCFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   383 00001FD9 722C                <1>     jc .bad
   384 00001FDB 488B3D(BDC20300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   385 00001FE2 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   386 00001FE8 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   387                              <1>     ;Here ONLY if accessing critical Disk data structures
   388 00001FEA E862FEFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   389 00001FEF E89DF9FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   390 00001FF4 E862FEFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   391 00001FF9 720C                <1>     jc .bad
   392 00001FFB E8B5FBFFFF          <1>     call getUserRegs
   393 00002000 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   394 00002004 30C0                <1>     xor al, al
   395 00002006 C3                  <1>     ret
   396                              <1> .bad:
   397 00002007 B0FF                <1>     mov al, -1
   398 00002009 C3                  <1>     ret
   399                              <1> 
   400                              <1> getInDOSflagPtr:   ;ah = 34h
   401 0000200A 488D15(2CC10300)    <1>     lea rdx, inDOS
   402 00002011 E89FFBFFFF          <1>     call getUserRegs
   403 00002016 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   404 0000201A C3                  <1>     ret
   405                              <1> getIntVector:      ;ah = 35h
   406                              <1> ;Called with:
   407                              <1> ;   al = Interrupt Number
   408                              <1> ;Returns:
   409                              <1> ;   rbx = Pointer to interrupt handler
   410 0000201B 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   411 0000201D B807F00000          <1>     mov eax, 0F007h
   412 00002022 CD35                <1>     int 35h
   413 00002024 E88CFBFFFF          <1>     call getUserRegs
   414 00002029 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   415 0000202D 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   416 0000202F C3                  <1>     ret
   417                              <1> 
   418                              <1> getDiskFreeSpace:  ;ah = 36h
   419 00002030 84D2                <1>     test dl, dl
   420 00002032 7508                <1>     jnz .gdfsSkipdefault
   421 00002034 8A15(57C10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   422 0000203A FEC2                <1>     inc dl
   423                              <1> .gdfsSkipdefault:
   424 0000203C FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   425 0000203E 88D0                <1>     mov al, dl
   426 00002040 E878FBFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   427 00002045 7331                <1>     jnc .gdfsDPBFound
   428                              <1> ;Else, we at an error.
   429                              <1> ;Simply return with CY set and error code in al with extended error info
   430 00002047 66C705(2FC10300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   430 0000204F 00                  <1>
   431 00002050 C605(2EC10300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   432 00002057 C605(32C10300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   433 0000205E C605(31C10300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   434 00002065 E84BFBFFFF          <1>     call getUserRegs
   435 0000206A 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   436 0000206F 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   437 00002077 C3                  <1>     ret
   438                              <1> .gdfsDPBFound:
   439 00002078 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   440 0000207B FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   441 0000207D 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   442 00002080 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ;Save the value in ecx
   443 00002084 8B5E31              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   444 00002087 E829FBFFFF          <1>     call getUserRegs
   445 0000208C 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   446 00002090 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   447 00002094 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   448 00002098 C3                  <1>     ret
   449                              <1> 
   450                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   451 00002099 31C0                <1>     xor eax, eax
   452 0000209B 668705(55C10300)    <1>     xchg ax, word [errorLevel]
   453 000020A2 E80EFBFFFF          <1>     call getUserRegs
   454 000020A7 668906              <1>     mov word [rsi + callerFrame.rax], ax
   455 000020AA C3                  <1>     ret
   456                              <1> 
   457                              <1> getSysVarsPtr:     ;ah = 52h
   458 000020AB 488D15(7FC00300)    <1>     lea rdx, sysVarsPtr
   459 000020B2 E8FEFAFFFF          <1>     call getUserRegs
   460 000020B7 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   461 000020BB C3                  <1>     ret
   462                              <1> 
   463                              <1> 
   464                              <1> ;AH = 53h - CREATE DPB
   465                              <1> createDPB:         ;generates a DPB from a given BPB
   466                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   467                              <1> ;This is done so that the other fields of the DPB can be recycled
   468                              <1> ;Input: rsi = ptr to the BPB
   469                              <1> ;       rbp = ptr to the DPB
   470                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   471                              <1> ;bMediaDescriptor
   472 000020BC 8A4615              <1>     mov al, byte [rsi + bpb.media]
   473 000020BF 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   474                              <1> ;dFirstFreeCluster
   475 000020C2 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   476                              <1> ;dNumberOfFreeClusters
   477 000020C9 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   478                              <1> ;wBytesPerSector
   479 000020D0 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   480 000020D4 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   481                              <1> ;bMaxSectorInCluster
   482 000020D8 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   483 000020DB FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   484 000020DD 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   485                              <1> ;bSectorsPerClusterShift
   486 000020E0 FEC0                <1>     inc al
   487 000020E2 30C9                <1>     xor cl, cl
   488                              <1> .cd2:
   489 000020E4 D0E8                <1>     shr al, 1
   490 000020E6 7404                <1>     jz .cd3
   491 000020E8 FEC1                <1>     inc cl
   492 000020EA EBF8                <1>     jmp short .cd2
   493                              <1> .cd3:
   494 000020EC 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   495                              <1> ;wFAToffset, number of reserved sectors in partition
   496 000020EF 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   497 000020F3 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   498                              <1> ;bNumberOfFATs
   499 000020F7 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   500 000020FA 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   501                              <1> ;wNumberRootDirSectors
   502 000020FD 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   503 00002101 C1E005              <1>     shl eax, 5  ;Multiply by 32
   504 00002104 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   505 00002108 FFC9                <1>     dec ecx
   506 0000210A 01C8                <1>     add eax, ecx
   507 0000210C 31D2                <1>     xor edx, edx    ;Clear for divide
   508 0000210E F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   509 00002110 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   510                              <1> ;dFATlength, get the FAT length
   511 00002114 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   512 00002118 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   513 0000211B 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   514 0000211D 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   515 00002120 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   516                              <1> ;Complex cases below...
   517                              <1> ;dClusterHeapOffset, start sector of the data area
   518 00002123 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   519 00002127 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   520 0000212A 85C0                <1>     test eax, eax
   521 0000212C 0F44C3              <1>     cmovz eax, ebx
   522                              <1> ;eax = FATsz
   523 0000212F 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   524 00002133 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   525 00002136 85DB                <1>     test ebx, ebx
   526 00002138 0F44D9              <1>     cmovz ebx, ecx 
   527                              <1> ;ebx = TotSec
   528 0000213B 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   529 0000213E 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   530                              <1> .cd4:
   531 00002140 01C2                <1>     add edx, eax
   532 00002142 FEC9                <1>     dec cl
   533 00002144 75FA                <1>     jnz .cd4
   534 00002146 89D0                <1>     mov eax, edx    ;Store product in eax
   535 00002148 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   536 0000214C 01D0                <1>     add eax, edx
   537 0000214E 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   538 00002152 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   539                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   540                              <1>     ;aka eax = Start sector of the data area in volume
   541 00002154 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   542                              <1> ;dClusterCount
   543 00002157 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   544 00002159 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   545 0000215B 31D2                <1>     xor edx, edx
   546 0000215D BB01000000          <1>     mov ebx, 1
   547 00002162 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   548 00002165 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   549 00002167 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   550 00002169 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   551 0000216B 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   552                              <1> ;dFirstUnitOfRootDir
   553 0000216E 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   554 00002173 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   555 00002176 7709                <1>     ja .cd5
   556                              <1>     ;Else, we need to find the first sector of the root directory
   557                              <1>     ;Get the start sector of data area in volume 
   558                              <1>     ; and sub the number of sectors in the root directory
   559 00002178 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   560 0000217B 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   561 0000217F 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   562                              <1> .cd5:
   563 00002181 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   564                              <1> ;Exit epilogue
   565 00002184 488B1D(90C10300)    <1>     mov rbx, qword [oldRSP]
   566 0000218B 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   567                              <1>     %if DEBUG && DPBINFO
   568                              <1>     ;Print DPB 
   569                              <1>     debugEnterM
   570                              <1>     push rbp
   571                              <1>     lea rbp, .l0000
   572                              <1>     call debPrintNullString
   573                              <1>     pop rbp
   574                              <1>     call debDPBBPBptr
   575                              <1>     call debMakeDebuggerRespond
   576                              <1>     jmp short .l0001
   577                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   578                              <1> .l0001:
   579                              <1>     debugExitM
   580                              <1>     %endif
   581 0000218D C3                  <1>     ret
   582                              <1> 
   583                              <1> getVerifySetting:  ;ah = 54h
   584 0000218E 8A05(5AC10300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   585 00002194 C3                  <1>     ret
   586                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   587 00002195 C3                  <1>     ret
   588                              <1> getExtendedError:  ;ah = 59h
   589 00002196 E81AFAFFFF          <1>     call getUserRegs
   590 0000219B 668B05(2FC10300)    <1>     mov ax, word [errorExCde]
   591 000021A2 8A2D(2EC10300)      <1>     mov ch, byte [errorLocus]
   592 000021A8 8A3D(32C10300)      <1>     mov bh, byte [errorClass]
   593 000021AE 8A1D(31C10300)      <1>     mov bl, byte [errorAction]
   594 000021B4 668906              <1>     mov word [rsi + callerFrame.rax], ax
   595 000021B7 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   596 000021BB 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   597 000021BE C3                  <1>     ret
   598                              <1> getCritErrorInfo:  ;ah = 5Dh
   599                              <1> networkServices:   ;ah = 5Eh, do nothing
   600                              <1> networkRedirection:;ah = 5Fh, do nothing
   601 000021BF C3                  <1>     ret
   602                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   603                              <1> return:
   604 000021C0 C3                  <1>     ret
    32                                  %include "./Source/Kernel/multiplx.asm"
    33                              <1> ;Default multiplexer. Current only installed function is ah=12h
    34                              <1> 
    35                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    36 000021C1 80FC12              <1>     cmp ah, 12h
    37 000021C4 751A                <1>     jne .exit       ;Exit if not for us
    38 000021C6 3C01                <1>     cmp al, mDispTblL / 2
    39 000021C8 7316                <1>     jae .exit   ;If above or equal, exit
    40 000021CA 53                  <1>     push rbx
    41 000021CB 51                  <1>     push rcx
    42 000021CC 31C9                <1>     xor ecx, ecx
    43 000021CE 488D1D19DFFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    44 000021D5 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    45 000021D7 D1E1                <1>     shl ecx, 1   ;multiply by 2
    46 000021D9 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    47 000021DC FFD3                <1>     call rbx
    48 000021DE 59                  <1>     pop rcx
    49 000021DF 5B                  <1>     pop rbx
    50                              <1> .exit:
    51 000021E0 48CF                <1>     iretq
    52                              <1> multiplexTest:
    53 000021E2 B0FF                <1>     mov al, -1
    54 000021E4 C3                  <1>     ret
    33                                  %include "./Source/Misc/int44h.asm"
    34                              <1> critErrorHandler:   ;Int 44h
    35                              <1> ;User Stack in usage here, must be swapped to before this is called
    36                              <1> ;Entered with:  
    37                              <1> ;               AH = Critical Error Bitfield
    38                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    39                              <1> ;               Bit 6 - Reserved
    40                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    41                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    42                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    43                              <1> ;               Bits [2-1] = Affected Disk Error
    44                              <1> ;                     0 0   DOS area
    45                              <1> ;                     0 1   FAT area
    46                              <1> ;                     1 0   Directory area
    47                              <1> ;                     1 1   Data area
    48                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    49                              <1> ;               AL  = Failing drive number if AH[7] = 0
    50                              <1> ;               DIL = Error code for errorMsg
    51                              <1> ;               RSI = EA of Device Header for which device the error occured
    52                              <1> ;Return:
    53                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    54                              <1> ;                  = 1 - Retry the Operation    (Retry)
    55                              <1> ;                  = 2 - Terminate the Program  (Abort)
    56                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    57 000021E5 53                  <1>     push rbx
    58 000021E6 51                  <1>     push rcx
    59 000021E7 52                  <1>     push rdx
    60 000021E8 57                  <1>     push rdi
    61 000021E9 56                  <1>     push rsi
    62 000021EA FC                  <1>     cld         ;Make String ops go forward
    63                              <1> 
    64 000021EB 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    65 000021EE 488D155E020000      <1>     lea rdx, qword [.crlf]
    66 000021F5 B409                <1>     mov ah, 09h ;Print String
    67 000021F7 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    68                              <1> 
    69 000021F9 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    70 000021FF B90C000000          <1>     mov ecx, 0Ch
    71 00002204 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    72 00002206 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    73 00002209 480FB7FF            <1>     movzx rdi, di
    74 0000220D 4889FA              <1>     mov rdx, rdi    ;Copy error code
    75 00002210 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    76 00002214 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    77 00002217 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    78 0000221A 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    79 00002221 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    80 00002225 B409                <1>     mov ah, 09h ;Print String
    81 00002227 CD41                <1>     int 41h     ;Call DOS to print first part of message
    82                              <1> 
    83 00002229 488D1505020000      <1>     lea rdx, qword [.readmsg]
    84 00002230 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    85 00002237 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    86 0000223A 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    87 0000223E B409                <1>     mov ah, 09h ;Print String
    88 00002240 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    89                              <1> 
    90 00002242 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    91 00002245 0F85DF000000        <1>     jnz .charError
    92                              <1> ;Disk error continues here
    93 0000224B 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    94 00002252 B409                <1>     mov ah, 09h
    95 00002254 CD41                <1>     int 41h
    96 00002256 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    97 00002258 80C241              <1>     add dl, "A" ;Add ASCII code
    98 0000225B B402                <1>     mov ah, 02h ;Print char in dl
    99 0000225D CD41                <1>     int 41h
   100                              <1> .userInput:
   101 0000225F 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   102 00002266 B409                <1>     mov ah, 09h
   103 00002268 CD41                <1>     int 41h
   104                              <1> ;Abort, Retry, Ignore, Fail is word order
   105                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   106                              <1> .userAbort:
   107                              <1> ;Abort is always an option
   108 0000226A 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   109 00002271 B409                <1>     mov ah, 09h
   110 00002273 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   111                              <1> .userRetry:
   112 00002275 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   113 00002278 7416                <1>     jz .userIgnore    ;If clear, dont print message
   114 0000227A 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   115 00002281 B409                <1>     mov ah, 09h
   116 00002283 CD41                <1>     int 41h
   117 00002285 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   118 0000228C B409                <1>     mov ah, 09h
   119 0000228E CD41                <1>     int 41h
   120                              <1> .userIgnore:
   121 00002290 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   122 00002293 7416                <1>     jz .userFail
   123 00002295 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   124 0000229C B409                <1>     mov ah, 09h
   125 0000229E CD41                <1>     int 41h
   126 000022A0 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   127 000022A7 B409                <1>     mov ah, 09h
   128 000022A9 CD41                <1>     int 41h
   129                              <1> .userFail:
   130 000022AB F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   131 000022AE 7416                <1>     jz .userMsgEnd
   132 000022B0 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   133 000022B7 B409                <1>     mov ah, 09h
   134 000022B9 CD41                <1>     int 41h
   135 000022BB 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   136 000022C2 B409                <1>     mov ah, 09h
   137 000022C4 CD41                <1>     int 41h
   138                              <1> .userMsgEnd:
   139 000022C6 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   140 000022CD B409                <1>     mov ah, 09h
   141 000022CF CD41                <1>     int 41h
   142                              <1> ;Get user input now 
   143 000022D1 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   144 000022D3 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   145 000022DA B401                <1>     mov ah, 01h ;STDIN without Console Echo
   146 000022DC CD41                <1>     int 41h ;Get char in al
   147 000022DE 3C61                <1>     cmp al, "a" ;Chack if lowercase
   148 000022E0 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   149 000022E2 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   150                              <1> .uip1:
   151 000022E4 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   152 000022E5 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   153 000022E7 FFC1                <1>     inc ecx
   154 000022E9 81F904000000        <1>     cmp ecx, 4
   155 000022EF 75F3                <1>     jne .uip1
   156 000022F1 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   157                              <1> .validInput:
   158 000022F6 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   159                              <1> ;Now check if the input is permitted
   160 000022F8 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   161 000022FA 7427                <1>     je .cehExit
   162 000022FC 84C0                <1>     test al, al ;Check if 0 => Ignore
   163 000022FE 740F                <1>     je .viIgnore
   164 00002300 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   165 00002302 7416                <1>     je .viRetry
   166                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   167 00002304 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   168 00002307 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   169 0000230D EB14                <1>     jmp short .cehExit
   170                              <1> .viIgnore:
   171 0000230F F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   172 00002312 0F8447FFFFFF        <1>     jz .userInput
   173 00002318 EB09                <1>     jmp short .cehExit
   174                              <1> .viRetry:
   175 0000231A F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   176 0000231D 0F843CFFFFFF        <1>     jz .userInput
   177                              <1> .cehExit:
   178 00002323 5E                  <1>     pop rsi
   179 00002324 5F                  <1>     pop rdi
   180 00002325 5A                  <1>     pop rdx
   181 00002326 59                  <1>     pop rcx
   182 00002327 5B                  <1>     pop rbx
   183 00002328 48CF                <1>     iretq
   184                              <1> .charError:
   185 0000232A B908000000          <1>     mov ecx, 8  ;8 chars in device name
   186 0000232F 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   187                              <1> .ce1:
   188 00002336 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   189 00002337 88C2                <1>     mov dl, al  ;Move char into dl
   190 00002339 B402                <1>     mov ah, 02h
   191 0000233B CD41                <1>     int 41h ;Print char
   192 0000233D E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   193 0000233F E91BFFFFFF          <1>     jmp .userInput
   194                              <1> 
   195                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   196 00002344 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   196 0000234D 746563742024202020  <1>
   197 00002356 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   197 0000235F 6E6974202420202020  <1>
   198 00002368 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   198 00002371 202420202020202020  <1>
   199 0000237A 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   199 00002383 6F6D6D616E64202420  <1>
   200 0000238C 446174612024202020- <1>             db "Data $            "       ;Error 4
   200 00002395 202020202020202020  <1>
   201 0000239E 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   201 000023A7 737420242020202020  <1>
   202 000023B0 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   202 000023B9 202020202020202020  <1>
   203 000023C2 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   203 000023CB 656469612024202020  <1>
   204 000023D4 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   204 000023DD 7420466F756E642024  <1>
   205 000023E6 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   205 000023EF 706572202420202020  <1>
   206 000023F8 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   206 00002401 6C7420242020202020  <1>
   207 0000240A 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   207 00002413 742024202020202020  <1>
   208 0000241C 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   208 00002425 61696C757265202420  <1>
   209                              <1> 
   210 0000242E 64726976652024      <1> .drive      db "drive $"
   211 00002435 6572726F7220726561- <1> .readmsg    db "error reading $"
   211 0000243E 64696E672024        <1>
   212 00002444 6572726F7220777269- <1> .writemsg   db "error writing $"
   212 0000244D 74696E672024        <1>
   213 00002453 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   214 00002456 41626F727424        <1> .abortmsg   db "Abort$" 
   215 0000245C 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   216 00002463 526574727924        <1> .retrymsg   db "Retry$"
   217 00002469 4661696C24          <1> .failmsg    db "Fail$"
   218 0000246E 2C2024              <1> .betweenMsg db ", $"
   219 00002471 3F2024              <1> .endMsg     db "? $"
   220 00002474 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    34                                  %include "./Source/Drivers/drvData.asm"
    35                              <1> ;-----------------------------------:
    36                              <1> ;          Driver routines          :
    37                              <1> ;-----------------------------------:
    38                              <1> drivers:
    39                              <1> conHdr:
    40 00002478 [9A24000000000000]  <1>     dq auxHdr
    41 00002480 1308                <1>     dw 0813h
    42 00002482 [1826000000000000]  <1>     dq commonStrat
    43 0000248A [2726000000000000]  <1>     dq conDriver
    44 00002492 434F4E2020202020    <1>     db "CON     "
    45                              <1> auxHdr:
    46 0000249A [BC24000000000000]  <1>     dq prnHdr
    47 000024A2 0080                <1>     dw 08000h
    48 000024A4 [1826000000000000]  <1>     dq commonStrat
    49 000024AC [FD28000000000000]  <1>     dq com1Intr
    50 000024B4 4155582020202020    <1>     db "AUX     "
    51                              <1> prnHdr:
    52 000024BC [DE24000000000000]  <1>     dq clkHdr
    53 000024C4 40A0                <1>     dw 0A040h
    54 000024C6 [2026000000000000]  <1>     dq nulStrat
    55 000024CE [2626000000000000]  <1>     dq nulIntr
    56 000024D6 50524E2020202020    <1>     db "PRN     "
    57                              <1> clkHdr:
    58 000024DE [0025000000000000]  <1>     dq msdHdr
    59 000024E6 0880                <1>     dw 08008h
    60 000024E8 [1826000000000000]  <1>     dq commonStrat
    61 000024F0 [7027000000000000]  <1>     dq clkDriver
    62 000024F8 434C4F434B242020    <1>     db "CLOCK$  "
    63                              <1> msdHdr:
    64 00002500 [2225000000000000]  <1>     dq com1Hdr
    65 00002508 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    66 0000250A [1826000000000000]  <1>     dq commonStrat
    67 00002512 [A22A000000000000]  <1>     dq msdDriver
    68 0000251A 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    69                              <1> com1Hdr:
    70 00002522 [4425000000000000]  <1>     dq com2Hdr
    71 0000252A 0080                <1>     dw 08000h
    72 0000252C [1826000000000000]  <1>     dq commonStrat
    73 00002534 [FD28000000000000]  <1>     dq com1Intr
    74 0000253C 434F4D3120202020    <1>     db "COM1    "
    75                              <1> com2Hdr:
    76 00002544 [6625000000000000]  <1>     dq com3Hdr
    77 0000254C 0080                <1>     dw 08000h
    78 0000254E [1826000000000000]  <1>     dq commonStrat
    79 00002556 [0629000000000000]  <1>     dq com2Intr
    80 0000255E 434F4D3220202020    <1>     db "COM2    "
    81                              <1> com3Hdr:
    82 00002566 [8825000000000000]  <1>     dq com4Hdr
    83 0000256E 0080                <1>     dw 08000h
    84 00002570 [1826000000000000]  <1>     dq commonStrat
    85 00002578 [0F29000000000000]  <1>     dq com3Intr
    86 00002580 434F4D3320202020    <1>     db "COM3    "
    87                              <1> com4Hdr:
    88 00002588 [AA25000000000000]  <1>     dq lpt1Hdr
    89 00002590 0080                <1>     dw 08000h
    90 00002592 [1826000000000000]  <1>     dq commonStrat
    91 0000259A [1829000000000000]  <1>     dq com4Intr
    92 000025A2 434F4D3420202020    <1>     db "COM4    "
    93                              <1> lpt1Hdr:
    94 000025AA [CC25000000000000]  <1>     dq lpt2Hdr
    95 000025B2 40A0                <1>     dw 0A040h
    96 000025B4 [2026000000000000]  <1>     dq nulStrat
    97 000025BC [2626000000000000]  <1>     dq nulIntr
    98 000025C4 4C50543120202020    <1>     db "LPT1    "
    99                              <1> lpt2Hdr:
   100 000025CC [EE25000000000000]  <1>     dq lpt3Hdr
   101 000025D4 40A0                <1>     dw 0A040h
   102 000025D6 [2026000000000000]  <1>     dq nulStrat
   103 000025DE [2626000000000000]  <1>     dq nulIntr
   104 000025E6 4C50543220202020    <1>     db "LPT2    "
   105                              <1> lpt3Hdr:
   106 000025EE FFFFFFFFFFFFFFFF    <1>     dq -1
   107 000025F6 40A0                <1>     dw 0A040h
   108 000025F8 [2026000000000000]  <1>     dq nulStrat
   109 00002600 [2626000000000000]  <1>     dq nulIntr
   110 00002608 4C50543320202020    <1>     dq "LPT3    "
   111 00002610 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    35                                  %include "./Source/Drivers/charDrv.asm"
    36                              <1> commonStrat:
    37                              <1> ;DOS calls this function with rbx=Ptr to request header
    38 00002618 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    39 0000261F C3                  <1>     ret
    40                              <1> nulStrat:
    41 00002620 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    42                              <1> nulIntr:
    43 00002626 C3                  <1>     ret
    44                              <1> conDriver:
    45 00002627 50                  <1>     push rax
    46 00002628 53                  <1>     push rbx
    47 00002629 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    48 00002630 B003                <1>     mov al, 03h ;Unknown Command
    49 00002632 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    50 00002636 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    51                              <1> 
    52 00002638 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    53 0000263B 3C04                <1>     cmp al, 4
    54 0000263D 743D                <1>     jz .conRead
    55 0000263F 3C05                <1>     cmp al, 5
    56 00002641 747F                <1>     jz .conNondestructiveRead
    57 00002643 3C06                <1>     cmp al, 6
    58 00002645 0F84A8000000        <1>     jz .conInputStatus
    59 0000264B 3C07                <1>     cmp al, 7
    60 0000264D 0F84B0000000        <1>     jz .conFlushInputBuffers
    61 00002653 3C08                <1>     cmp al, 8
    62 00002655 0F84CA000000        <1>     jz .conWrite
    63 0000265B 3C09                <1>     cmp al, 9
    64 0000265D 0F84C2000000        <1>     jz .conWrite
    65 00002663 3C0A                <1>     cmp al, 0Ah
    66 00002665 0F84E3000000        <1>     jz .conOutputStatus
    67 0000266B EB06                <1>     jmp short .conExit  ;All other valid functions return done
    68                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    69 0000266D B480                <1>     mov ah, 80h ;Set error bit
    70 0000266F 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    71                              <1> .conExit:
    72 00002673 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    73 00002679 5B                  <1>     pop rbx
    74 0000267A 58                  <1>     pop rax
    75 0000267B C3                  <1>     ret
    76                              <1> .conRead:    ;Function 4
    77 0000267C B005                <1>     mov al, 05h ;Bad request structure length?
    78 0000267E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    79 00002681 75EA                <1>     jne .conWriteErrorCode
    80                              <1> 
    81 00002683 57                  <1>     push rdi
    82 00002684 51                  <1>     push rcx
    83 00002685 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    84 00002689 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    85                              <1> .cre1:
    86 0000268B 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    87 0000268E 741C                <1>     je .cre2
    88 00002690 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    89 00002697 751A                <1>     jnz .cre3   ;No, get the buffer value
    90 00002699 31C0                <1>     xor eax, eax
    91 0000269B CD36                <1>     int 36h
    92                              <1> .cre11:
    93 0000269D AA                  <1>     stosb
    94 0000269E 84C0                <1>     test al, al ;Was the ascii code stored 0?
    95 000026A0 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    96 000026A2 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    97                              <1> .cre12:
    98 000026A8 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    99 000026AA EBDF                <1>     jmp short .cre1
   100                              <1> .cre2:
   101 000026AC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   102 000026AF 59                  <1>     pop rcx
   103 000026B0 5F                  <1>     pop rdi
   104 000026B1 EBC0                <1>     jmp short .conExit
   105                              <1> .cre3:
   106 000026B3 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   107 000026B9 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   108 000026C0 EBDB                <1>     jmp short .cre11
   109                              <1> 
   110                              <1> .conNondestructiveRead:  ;Function 5
   111 000026C2 B005                <1>     mov al, 05h ;Bad request structure length?
   112 000026C4 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   113 000026C7 75A4                <1>     jne .conWriteErrorCode
   114 000026C9 803D8E00000000      <1>     cmp byte [.conBuf], 0
   115 000026D0 7519                <1>     jnz .cnr2
   116 000026D2 B401                <1>     mov ah, 01h     ;Get key if exists
   117 000026D4 CD36                <1>     int 36h
   118 000026D6 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   119                              <1>     ;Keystroke available
   120                              <1> .cnr0:
   121 000026D8 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   122 000026DB E993FFFFFF          <1>     jmp .conExit
   123                              <1> .cnr1: ;No keystroke available
   124 000026E0 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   125 000026E6 E988FFFFFF          <1>     jmp .conExit
   126                              <1> .cnr2:
   127 000026EB 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   128 000026F1 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   129                              <1> 
   130                              <1> .conInputStatus:         ;Function 6
   131 000026F3 B005                <1>     mov al, 05h ;Bad request structure length?
   132 000026F5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   133 000026F8 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   134 000026FE E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   135                              <1> 
   136                              <1> .conFlushInputBuffers:   ;Function 7
   137 00002703 B005                <1>     mov al, 05h ;Bad request structure length?
   138 00002705 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   139 00002708 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   140 0000270E C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   141                              <1> .cfib0:
   142 00002715 B401                <1>     mov ah, 01      ;Get buffer status
   143 00002717 CD36                <1>     int 36h
   144 00002719 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   145 0000271F 30E4                <1>     xor ah, ah
   146 00002721 CD36                <1>     int 36h ;Read key to flush from buffer
   147 00002723 EBF0                <1>     jmp short .cfib0
   148                              <1> 
   149                              <1> .conWrite:   ;Function 8 and 9
   150 00002725 B005                <1>     mov al, 05h ;Bad request structure length?
   151 00002727 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   152 0000272A 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   153                              <1> 
   154 00002730 56                  <1>     push rsi
   155 00002731 51                  <1>     push rcx
   156 00002732 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   157 00002736 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   158                              <1> .cw1: 
   159 00002738 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   160 0000273B 7407                <1>     je .cw2
   161 0000273D AC                  <1>     lodsb   ;Get char into al, and inc rsi
   162 0000273E CD49                <1>     int 49h ;Fast print char
   163 00002740 FFC1                <1>     inc ecx
   164 00002742 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   165                              <1> .cw2:
   166 00002744 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   167 00002747 59                  <1>     pop rcx
   168 00002748 5E                  <1>     pop rsi
   169 00002749 E925FFFFFF          <1>     jmp .conExit
   170                              <1> .conOutputStatus:   ;Function 0Ah
   171 0000274E B005                <1>     mov al, 05h ;Bad request structure length?
   172 00002750 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   173 00002753 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   174 00002759 E915FFFFFF          <1>     jmp .conExit
   175                              <1> 
   176 0000275E 00                  <1> .conBuf db 0    ;Single byte buffer
   177                              <1> fastOutput:         ;This CON driver supports Int 49h
   178                              <1> ;Called with char to transfer in al
   179 0000275F 50                  <1>     push rax
   180 00002760 B40E                <1>     mov ah, 0Eh
   181 00002762 CD30                <1>     int 30h
   182 00002764 58                  <1>     pop rax
   183 00002765 48CF                <1>     iretq
   184                              <1> ctrlBreak:
   185                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   186 00002767 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   187 0000276E 48CF                <1>     iretq
   188                              <1> 
   189                              <1> clkDriver:
   190 00002770 50                  <1>     push rax
   191 00002771 53                  <1>     push rbx
   192 00002772 51                  <1>     push rcx
   193 00002773 52                  <1>     push rdx
   194 00002774 56                  <1>     push rsi
   195 00002775 55                  <1>     push rbp
   196 00002776 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   197 0000277D B003                <1>     mov al, 03h ;Unknown Command
   198 0000277F 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   199 00002783 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   200                              <1> 
   201 00002785 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   202 00002788 3C04                <1>     cmp al, 04h
   203 0000278A 7437                <1>     jz .clkRead
   204 0000278C 3C06                <1>     cmp al, 06h
   205 0000278E 0F8494000000        <1>     jz .clkInputStatus
   206 00002794 3C07                <1>     cmp al, 07h
   207 00002796 0F8498000000        <1>     jz .clkFlushInputBuffers
   208 0000279C 3C08                <1>     cmp al, 08h
   209 0000279E 0F84A0000000        <1>     jz .clkWrite
   210 000027A4 3C09                <1>     cmp al, 09h
   211 000027A6 0F8498000000        <1>     jz .clkWrite
   212 000027AC EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   213                              <1> .clkNotFunctioning:
   214 000027AE B002                <1>     mov al, 02h ;Device not ready error
   215                              <1> .clkWriteErrorCode:
   216 000027B0 B480                <1>     mov ah, 80h ;Set error bit
   217 000027B2 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   218                              <1> .clkExit:
   219 000027B6 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   220 000027BC 5D                  <1>     pop rbp
   221 000027BD 5E                  <1>     pop rsi
   222 000027BE 5A                  <1>     pop rdx
   223 000027BF 59                  <1>     pop rcx
   224 000027C0 5B                  <1>     pop rbx
   225 000027C1 58                  <1>     pop rax
   226 000027C2 C3                  <1>     ret
   227                              <1> 
   228                              <1> .clkRead:           ;Function 4
   229 000027C3 B005                <1>     mov al, 05h ;Bad request structure length?
   230 000027C5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   231 000027C8 75E6                <1>     jne .clkWriteErrorCode
   232                              <1> 
   233 000027CA 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   234 000027CD 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   235 000027D1 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   236 000027D8 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   237 000027DC 30E4                <1>     xor ah, ah
   238 000027DE CD3A                <1>     int 3Ah         ;Read the system timer
   239 000027E0 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   240 000027E2 740D                <1>     jz .clkr1       ;Nope, now just time 
   241 000027E4 30E4                <1>     xor ah, ah
   242                              <1>     ;This works as al should keep count of the # of days passed since last read
   243 000027E6 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   244 000027EA 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   245                              <1> .clkr1:
   246 000027F1 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   247 000027F4 0FB7D2              <1>     movzx edx, dx
   248 000027F7 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   249 000027F9 89D0                <1>     mov eax, edx
   250 000027FB 31D2                <1>     xor edx, edx
   251 000027FD 89D8                <1>     mov eax, ebx
   252 000027FF B944040000          <1>     mov ecx, 1092   
   253 00002804 F7F1                <1>     div ecx
   254 00002806 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   255 00002809 89D0                <1>     mov eax, edx    ;Get remainder in eax
   256 0000280B 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   257 0000280F 31D2                <1>     xor edx, edx
   258 00002811 B95B000000          <1>     mov ecx, 91 ;5*18.2
   259 00002816 F7F1                <1>     div ecx
   260 00002818 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   261 0000281B 89D0                <1>     mov eax, edx    ;Get remainder in eax
   262                              <1>     ;lea eax, dword [eax + 4*eax]
   263                              <1>     ;add eax, edx    ;Essentially multiply by 6
   264 0000281D 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   265 00002820 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   266 00002823 E98EFFFFFF          <1>     jmp .clkExit
   267                              <1> 
   268                              <1> .clkInputStatus:    ;Function 6
   269                              <1> ;Always return ready
   270 00002828 B005                <1>     mov al, 05h ;Bad request structure length?
   271 0000282A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   272 0000282D 7581                <1>     jne .clkWriteErrorCode
   273 0000282F E982FFFFFF          <1>     jmp .clkExit
   274                              <1> .clkFlushInputBuffers:  ;Function 7
   275                              <1> ;Always return done immediately
   276 00002834 B005                <1>     mov al, 05h ;Bad request structure length?
   277 00002836 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   278 00002839 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   279 0000283F E972FFFFFF          <1>     jmp .clkExit
   280                              <1> 
   281                              <1> .clkWrite:          ;Functions 8 and 9
   282 00002844 B005                <1>     mov al, 05h ;Bad request structure length?
   283 00002846 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 00002849 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   285                              <1> 
   286 0000284F 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   287 00002852 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   288 00002856 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   289 0000285A 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   290                              <1> 
   291 00002861 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   292 00002863 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   293 00002867 B105                <1>     mov cl, 5
   294 00002869 F6F1                <1>     div cl          ;Divide al by 5
   295 0000286B 30E4                <1>     xor ah, ah      ;Remove the remainder
   296 0000286D 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   297                              <1> ;Using the decimal part of this formula for the low count
   298                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   299 0000286F 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   300 00002872 B912000000          <1>     mov ecx, 18
   301 00002877 F7E1                <1>     mul ecx  
   302 00002879 01C3                <1>     add ebx, eax
   303                              <1> 
   304 0000287B 31D2                <1>     xor edx, edx
   305 0000287D 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   306 00002881 B944040000          <1>     mov ecx, 1092
   307 00002886 F7E1                <1>     mul ecx
   308 00002888 01C3                <1>     add ebx, eax
   309 0000288A 89DA                <1>     mov edx, ebx    ;edx now has low count
   310 0000288C 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   311 00002890 B401                <1>     mov ah, 01h     ;Set the system time
   312 00002892 CD3A                <1>     int 3Ah
   313                              <1> 
   314 00002894 4889F3              <1>     mov rbx, rsi
   315 00002897 E91AFFFFFF          <1>     jmp .clkExit
   316                              <1> 
   317                              <1> .clkBCDtoHex:
   318                              <1> ;Converts a BCD value to a Hex byte
   319                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   320 0000289C 51                  <1>     push rcx
   321 0000289D 0FB6C0              <1>     movzx eax, al   ;Zero extend
   322 000028A0 89C1                <1>     mov ecx, eax    ;Save al in ecx
   323 000028A2 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   324 000028A7 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   325 000028AD C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   326                              <1> .cbth0:
   327 000028B0 050A000000          <1>     add eax, 10
   328 000028B5 E2F9                <1>     loop .cbth0
   329 000028B7 59                  <1>     pop rcx
   330 000028B8 C3                  <1>     ret
   331                              <1> 
   332                              <1> .clkHexToBCD:
   333                              <1> ;Converts a Hex byte into two BCD digits
   334                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   335 000028B9 51                  <1>     push rcx
   336 000028BA 0FB6C0              <1>     movzx eax, al   ;Zero extend
   337 000028BD 31C9                <1>     xor ecx, ecx
   338                              <1> .chtb0:
   339 000028BF 3D0A000000          <1>     cmp eax, 10
   340 000028C4 7209                <1>     jb .chtb1
   341 000028C6 2D0A000000          <1>     sub eax, 10
   342 000028CB FFC1                <1>     inc ecx
   343 000028CD EBF0                <1>     jmp short .chtb0
   344                              <1> .chtb1:
   345 000028CF C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   346 000028D2 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   347 000028D4 59                  <1>     pop rcx
   348 000028D5 C3                  <1>     ret
   349 000028D6 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   350                              <1> ;When counting the number of days, first compute the number of years since
   351                              <1> ; 1980 and your year. 
   352                              <1> ;Then, using the table below, find the number of leap years between 1980
   353                              <1> ; and (YourYear - 1). 
   354                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   355                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   356                              <1> ;Use the months table to get the number of days in a normal month as leap 
   357                              <1> ; years are added using the previous comment.
   358                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   359                              <1> ; a leap year using the table. If it is, add an extra day.
   360                              <1> .clkLeapYears:
   361 000028D8 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   361 000028E1 24282C30            <1>
   362 000028E5 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   362 000028EE 585C60              <1>
   363                              <1> .clkMonths:
   364 000028F1 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   364 000028FA 1F1E1F              <1>
   365                              <1> ;COM Driver headers and main interrupt strat
   366                              <1> com1Intr:
   367 000028FD C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   368 00002904 EB19                <1>     jmp short comIntr
   369                              <1> com2Intr:
   370 00002906 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   371 0000290D EB10                <1>     jmp short comIntr
   372                              <1> com3Intr:
   373 0000290F C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   374 00002916 EB07                <1>     jmp short comIntr
   375                              <1> com4Intr:
   376 00002918 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   377                              <1> comIntr:
   378 0000291F 50                  <1>     push rax
   379 00002920 53                  <1>     push rbx
   380 00002921 51                  <1>     push rcx
   381 00002922 52                  <1>     push rdx
   382 00002923 56                  <1>     push rsi
   383 00002924 57                  <1>     push rdi
   384 00002925 488B1DE4FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   385 0000292C B003                <1>     mov al, 03h ;Unknown Command
   386 0000292E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   387 00002932 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   388                              <1> 
   389 00002934 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   390 00002937 3C04                <1>     cmp al, 4   ;Read Character(s)
   391 00002939 7462                <1>     jz .comRead
   392 0000293B 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   393 0000293D 0F849B000000        <1>     jz .comNondestructiveRead   
   394 00002943 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   395 00002945 0F8484000000        <1>     jz .comReadInputStatus
   396 0000294B 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   397 0000294D 0F84B9000000        <1>     jz .comFlushInputBuffers
   398 00002953 3C08                <1>     cmp al, 8
   399 00002955 0F84DB000000        <1>     jz .comWrite
   400 0000295B 3C09                <1>     cmp al, 9
   401 0000295D 0F84D3000000        <1>     jz .comWrite
   402 00002963 3C0A                <1>     cmp al, 0Ah
   403 00002965 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   404 0000296B EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   405                              <1> .comErrorNoCount:
   406 0000296D B002                <1>     mov al, 02h ;Unknown device
   407 0000296F EB19                <1>     jmp short .comWriteErrorCode
   408                              <1> .comReadError:
   409 00002971 BA0B000000          <1>     mov edx, 0Bh
   410                              <1> .comWriteError:
   411 00002976 BA0A000000          <1>     mov edx, 0Ah
   412                              <1> .comError:
   413 0000297B 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   414 0000297E B902000000          <1>     mov ecx, 02h    ;Unknown device
   415 00002983 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   416 00002985 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   417 00002988 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   418                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   419 0000298A B480                <1>     mov ah, 80h ;Set error bit
   420 0000298C 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   421                              <1> .comExit:
   422 00002990 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   423 00002996 5F                  <1>     pop rdi
   424 00002997 5E                  <1>     pop rsi
   425 00002998 5A                  <1>     pop rdx
   426 00002999 59                  <1>     pop rcx
   427 0000299A 5B                  <1>     pop rbx
   428 0000299B 58                  <1>     pop rax
   429 0000299C C3                  <1>     ret
   430                              <1> 
   431                              <1> .comRead:
   432 0000299D B005                <1>     mov al, 05h ;Bad request structure length?
   433 0000299F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   434 000029A2 75E6                <1>     jne .comWriteErrorCode
   435                              <1> 
   436 000029A4 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   437 000029A8 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   438                              <1> .cr1:
   439 000029AA 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   440 000029AD 741B                <1>     je .cre2
   441                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   442 000029AF B802000000          <1>     mov eax, 02h    ;Recieve 
   443 000029B4 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   444 000029BA 6698                <1>     cbw     ;Zero extend to upper byte
   445 000029BC CD34                <1>     int 34h ;Recieve Char
   446 000029BE 72BB                <1>     jc .comError
   447 000029C0 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   448 000029C3 74EA                <1>     je .cr11
   449 000029C5 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   450 000029C6 FFC1                <1>     inc ecx
   451 000029C8 EBE0                <1>     jmp short .cr1
   452                              <1> .cre2:
   453 000029CA 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   454 000029CD EBC1                <1>     jmp short .comExit
   455                              <1> 
   456                              <1> .comReadInputStatus:
   457 000029CF B005                <1>     mov al, 05h ;Bad request structure length?
   458 000029D1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   459 000029D4 75B4                <1>     jne .comWriteErrorCode
   460 000029D6 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   461 000029DC EBB2                <1>     jmp short .comExit
   462                              <1> 
   463                              <1> .comNondestructiveRead:
   464                              <1> ;Acts like a "read one character if there is one" function
   465 000029DE B005                <1>     mov al, 05h ;Bad request structure length?
   466 000029E0 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   467 000029E3 75A5                <1>     jne .comWriteErrorCode
   468                              <1> .cndr1:
   469 000029E5 B802000000          <1>     mov eax, 02h    ;Recieve 
   470 000029EA 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   471 000029F0 6698                <1>     cbw     ;Zero extend to upper byte
   472 000029F2 CD34                <1>     int 34h ;Recieve Char
   473 000029F4 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   474 000029FA 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   475 000029FD 7405                <1>     je .cndr2
   476 000029FF 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   477 00002A02 EB8C                <1>     jmp short .comExit
   478                              <1> .cndr2:
   479 00002A04 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   480 00002A0A EB84                <1>     jmp short .comExit
   481                              <1> 
   482                              <1> .comFlushInputBuffers:
   483 00002A0C B005                <1>     mov al, 05h ;Bad request structure length?
   484 00002A0E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   485 00002A11 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   486                              <1> .cfib0:
   487 00002A17 8A1584000000        <1>     mov dl, byte [.comDevice]
   488 00002A1D 6698                <1>     cbw
   489 00002A1F B802000000          <1>     mov eax, 02h    ;Recieve
   490 00002A24 CD34                <1>     int 34h
   491 00002A26 0F8241FFFFFF        <1>     jc .comErrorNoCount
   492 00002A2C 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   493 00002A2F 75E6                <1>     jne .cfib0
   494 00002A31 E95AFFFFFF          <1>     jmp .comExit
   495                              <1> 
   496                              <1> .comWrite:
   497 00002A36 B005                <1>     mov al, 05h ;Bad request structure length?
   498 00002A38 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   499 00002A3B 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   500                              <1> 
   501 00002A41 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   502 00002A45 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   503                              <1> .cw1: 
   504 00002A47 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   505 00002A4A 7417                <1>     je .cw2
   506 00002A4C AC                  <1>     lodsb   ;Get char into al, and inc rsi
   507 00002A4D B401                <1>     mov ah, 01h ;Move function number into ah
   508 00002A4F 8A154C000000        <1>     mov dl, byte [.comDevice]
   509 00002A55 6698                <1>     cbw     ;Zero extend to upper byte
   510 00002A57 CD34                <1>     int 34h ;Transmit char
   511 00002A59 0F821CFFFFFF        <1>     jc .comError
   512 00002A5F FFC1                <1>     inc ecx
   513 00002A61 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   514                              <1> .cw2:
   515 00002A63 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   516 00002A66 E925FFFFFF          <1>     jmp .comExit
   517                              <1> 
   518                              <1> .comOutputStatus:
   519                              <1> ;Read MODEM status
   520 00002A6B B005                <1>     mov al, 05h ;Bad request structure length?
   521 00002A6D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   522 00002A70 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   523                              <1> 
   524 00002A76 8A1525000000        <1>     mov dl, byte [.comDevice]
   525 00002A7C 6698                <1>     cbw     ;Zero extend to upper byte
   526 00002A7E B403                <1>     mov ah, 03h     ;Get status
   527 00002A80 CD34                <1>     int 34h
   528 00002A82 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   529 00002A88 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   530 00002A8D C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   531 00002A90 F7D0                <1>     not eax      ;Bitwise inversion
   532 00002A92 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   533 00002A97 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   534 00002A9C E9EFFEFFFF          <1>     jmp .comExit
   535 00002AA1 00                  <1> .comDevice   db 0
    36                                  %include "./Source/Drivers/diskDrv.asm"
    37                              <1> msdDriver:
    38 00002AA2 50                  <1>     push rax
    39 00002AA3 53                  <1>     push rbx
    40 00002AA4 51                  <1>     push rcx
    41 00002AA5 52                  <1>     push rdx
    42 00002AA6 56                  <1>     push rsi
    43 00002AA7 57                  <1>     push rdi
    44 00002AA8 55                  <1>     push rbp
    45 00002AA9 4150                <1>     push r8
    46 00002AAB 488B1D5EFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    47 00002AB2 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    48 00002AB6 B003                <1>     mov al, drvBadCmd
    49 00002AB8 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    50 00002ABE B001                <1>     mov al, drvBadUnit 
    51 00002AC0 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    52 00002AC4 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    53 00002ACA 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    54 00002AD1 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    55 00002AD5 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    56 00002AD8 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    57 00002ADC 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    58 00002AE0 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    59 00002AE2 488D0D9A000000      <1>     lea rcx, .msdTable
    60 00002AE9 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    61 00002AED 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    62 00002AEF 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    63 00002AF1 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    64 00002AF4 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    65                              <1> .msdDriverExit:
    66 00002AF6 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    67 00002AFC 4158                <1>     pop r8
    68 00002AFE 5D                  <1>     pop rbp
    69 00002AFF 5F                  <1>     pop rdi
    70 00002B00 5E                  <1>     pop rsi
    71 00002B01 5A                  <1>     pop rdx
    72 00002B02 59                  <1>     pop rcx
    73 00002B03 5B                  <1>     pop rbx
    74 00002B04 58                  <1>     pop rax
    75 00002B05 C3                  <1>     ret
    76                              <1> 
    77                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    78 00002B06 4889FB              <1>     mov rbx, rdi
    79 00002B09 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    80 00002B0C 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    81 00002B0E 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    82                              <1> ;Now fall through to general error
    83                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    84 00002B11 B401                <1>     mov ah, 01h
    85 00002B13 CD33                <1>     int 33h ;Read status of last operation
    86 00002B15 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    87 00002B18 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    88 00002B1A 7460                <1>     je .msdWriteErrorCode 
    89 00002B1C B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    90 00002B1E 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    91 00002B21 7459                <1>     je .msdWriteErrorCode 
    92 00002B23 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    93 00002B26 7454                <1>     je .msdWriteErrorCode
    94                              <1> ;Device Not Ready
    95 00002B28 B002                <1>     mov al, 02h  ;Device not ready code
    96 00002B2A 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    97 00002B2D 744D                <1>     je .msdWriteErrorCode
    98 00002B2F 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    99 00002B33 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   100                              <1> ;Write Protected
   101 00002B37 30C0                <1>     xor al, al
   102 00002B39 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   103 00002B3E 743C                <1>     je .msdWriteErrorCode
   104                              <1> ;CRC Error
   105 00002B40 B004                <1>     mov al, 04h     ;CRC error code
   106 00002B42 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   107 00002B47 7433                <1>     je .msdWriteErrorCode
   108 00002B49 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   109 00002B4E 742C                <1>     je .msdWriteErrorCode
   110 00002B50 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   111 00002B55 7425                <1>     je .msdWriteErrorCode
   112                              <1> ;Seek Error
   113 00002B57 B006                <1>     mov al, 06h     ;Seek error code
   114 00002B59 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   115 00002B5C 741E                <1>     je .msdWriteErrorCode
   116                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   117                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   118 00002B5E B007                <1>     mov al, 07h
   119 00002B60 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   120 00002B63 7417                <1>     je .msdWriteErrorCode
   121                              <1> ;Sector Not Found
   122 00002B65 B008                <1>     mov al, 08h     ;Sector not found code
   123 00002B67 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   124 00002B6A 7410                <1>     je .msdWriteErrorCode
   125                              <1> ;Write faults
   126 00002B6C B00A                <1>     mov al, 0Ah     ;Write fault
   127 00002B6E 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   128 00002B71 7409                <1>     je .msdWriteErrorCode
   129                              <1> ;Read faults
   130 00002B73 B00B                <1>     mov al, 0Bh     ;Read fault
   131 00002B75 80F911              <1>     cmp cl, 11h     ;Read error
   132 00002B78 7402                <1>     je .msdWriteErrorCode
   133                              <1> ;General Errors
   134 00002B7A B00C                <1>     mov al, 0Ch     ;Everything else is general error
   135                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   136 00002B7C B480                <1>     mov ah, 80h ;Set error bit
   137 00002B7E 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   138 00002B82 C3                  <1>     ret ;Return to set done bit
   139                              <1> .msdTable:
   140 00002B83 0000                <1>     dw 0                            ;Function 0
   141 00002B85 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   142 00002B87 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   143 00002B89 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   144 00002B8B 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   145 00002B8D 0000                <1>     dw 0                            ;Function 5
   146 00002B8F 0000                <1>     dw 0                            ;Function 6
   147 00002B91 0000                <1>     dw 0                            ;Function 7
   148 00002B93 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   149 00002B95 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   150 00002B97 0000                <1>     dw 0                            ;Function 10
   151 00002B99 0000                <1>     dw 0                            ;Function 11
   152 00002B9B C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   153 00002B9D D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   154 00002B9F ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   155 00002BA1 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   156 00002BA3 0000                <1>     dw 0                            ;Function 16
   157 00002BA5 0000                <1>     dw 0                            ;Function 17
   158 00002BA7 0000                <1>     dw 0                            ;Function 18
   159 00002BA9 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   160 00002BAB 0000                <1>     dw 0                            ;Function 20
   161 00002BAD 0000                <1>     dw 0                            ;Function 21
   162 00002BAF 0000                <1>     dw 0                            ;Function 22
   163 00002BB1 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   164 00002BB3 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   165                              <1> 
   166                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   167                              <1> .msdMedChk:          ;Function 1
   168 00002BB5 B005                <1>     mov al, 05h ;Bad request structure length
   169 00002BB7 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   170 00002BBA 75C0                <1>     jne .msdWriteErrorCode
   171                              <1> 
   172 00002BBC 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   173 00002BC1 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   174 00002BC8 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   175 00002BCB F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   176 00002BCE 753F                <1>     jnz .mmcNoChange
   177                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   178 00002BD0 B416                <1>     mov ah, 16h 
   179 00002BD2 CD33                <1>     int 33h
   180 00002BD4 0F8237FFFFFF        <1>     jc .msdGenDiskError
   181 00002BDA 80FC80              <1>     cmp ah, 80h
   182 00002BDD 740E                <1>     je .mmcNoChangeLine
   183 00002BDF 80FC86              <1>     cmp ah, 86h
   184 00002BE2 7409                <1>     je .mmcNoChangeLine
   185 00002BE4 84E4                <1>     test ah, ah ;No change?
   186 00002BE6 7427                <1>     jz .mmcNoChange
   187 00002BE8 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   188 00002BEB 750D                <1>     jnz .mmcChange
   189                              <1> ;If nothing, fall through and test manually, should never happen though
   190                              <1> .mmcNoChangeLine:
   191                              <1> ;Now we test Media Descriptor
   192 00002BED 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   193 00002BF2 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   194 00002BF5 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   195 00002BF8 7410                <1>     je .mmcUnsure
   196                              <1> .mmcChange:
   197 00002BFA C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   198 00002BFE 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   199 00002C05 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   200                              <1>     ;Check here if there were any open handles on the device when it was changed
   201 00002C09 C3                  <1>     ret
   202                              <1> .mmcUnsure:
   203 00002C0A C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   204 00002C0E C3                  <1>     ret
   205                              <1> .mmcNoChange:
   206 00002C0F C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   207 00002C13 C3                  <1>     ret
   208                              <1> 
   209                              <1> 
   210                              <1> .msdBuildBPB:        ;Function 2
   211 00002C14 B005                <1>     mov al, 05h ;Bad request structure length
   212 00002C16 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   213 00002C19 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   214                              <1> 
   215 00002C1F 4889DE              <1>     mov rsi, rbx
   216 00002C22 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   217 00002C27 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   218 00002C2E 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   219 00002C31 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   220 00002C35 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   221 00002C37 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   222 00002C3A B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   223 00002C3F CD33                <1>     int 33h
   224 00002C41 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   225                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   226 00002C47 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   227 00002C4B 7418                <1>     je .mbbpb0
   228 00002C4D 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   229 00002C51 7412                <1>     je .mbbpb0
   230 00002C53 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   231 00002C57 740C                <1>     je .mbbpb0
   232 00002C59 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   233 00002C5D B007                <1>     mov al, 07h ;Unknown media error code
   234 00002C5F 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   235                              <1> .mbbpb0:
   236 00002C65 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   237 00002C68 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   238 00002C6D 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   239 00002C74 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   240 00002C78 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   241 00002C7B 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   242 00002C7F B90F000000          <1>     mov ecx, bpbEx_size/8
   243 00002C84 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   244 00002C87 C3                  <1>     ret
   245                              <1> .msdIOCTLRead:       ;Function 3, returns done
   246 00002C88 B005                <1>     mov al, drvBadDrvReq
   247 00002C8A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   248 00002C8D 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   249 00002C93 C3                  <1>     ret
   250                              <1> .msdRead:            ;Function 4
   251                              <1> ;Will read one sector at a time.
   252 00002C94 B005                <1>     mov al, 05h ;Bad request structure length
   253 00002C96 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   254 00002C99 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   255                              <1> 
   256 00002C9F 4889DF              <1>     mov rdi, rbx
   257 00002CA2 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   258                              <1> .msdr0:
   259 00002CA4 B682                <1>     mov dh, 82h ;LBA Read Sectors
   260 00002CA6 E841010000          <1>     call .msdBlkIOCommon
   261 00002CAB 0F8255FEFFFF        <1>     jc .msdIOError
   262 00002CB1 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   263 00002CB9 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   264 00002CC1 FFC6                <1>     inc esi
   265 00002CC3 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   266 00002CC6 75DC                <1>     jne .msdr0
   267 00002CC8 4889FB              <1>     mov rbx, rdi
   268 00002CCB C3                  <1>     ret
   269                              <1> .msdWrite:           ;Function 8
   270                              <1> ;Will write one sector at a time.
   271 00002CCC B005                <1>     mov al, 05h ;Bad request structure length
   272 00002CCE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   273 00002CD1 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   274                              <1> 
   275 00002CD7 4889DF              <1>     mov rdi, rbx
   276 00002CDA 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   277                              <1> .msdw0:
   278 00002CDC B683                <1>     mov dh, 83h ;LBA Write Sectors
   279 00002CDE E809010000          <1>     call .msdBlkIOCommon
   280 00002CE3 0F821DFEFFFF        <1>     jc .msdIOError
   281 00002CE9 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   282 00002CF1 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   283 00002CF9 FFC6                <1>     inc esi
   284 00002CFB 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   285 00002CFE 75DC                <1>     jne .msdw0
   286 00002D00 4889FB              <1>     mov rbx, rdi
   287 00002D03 C3                  <1>     ret
   288                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   289                              <1> ;Will write one sector at a time and then verify it.
   290 00002D04 B005                <1>     mov al, 05h ;Bad request structure length
   291 00002D06 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 00002D09 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   293                              <1> 
   294 00002D0F 4889DF              <1>     mov rdi, rbx
   295 00002D12 31F6                <1>     xor esi, esi  ;Set counter to zero
   296                              <1> .msdwv0:
   297 00002D14 B683                <1>     mov dh, 83h ;LBA Write Sectors
   298 00002D16 E8D1000000          <1>     call .msdBlkIOCommon
   299 00002D1B 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   300 00002D21 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   301 00002D23 E8C4000000          <1>     call .msdBlkIOCommon
   302 00002D28 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   303 00002D2E 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   304 00002D36 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   305 00002D3E FFC6                <1>     inc esi
   306 00002D40 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   307 00002D43 75CF                <1>     jne .msdwv0
   308 00002D45 4889FB              <1>     mov rbx, rdi
   309 00002D48 C3                  <1>     ret
   310                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   311 00002D49 B005                <1>     mov al, drvBadDrvReq
   312 00002D4B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   313 00002D4E 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   314                              <1> 
   315 00002D54 C3                  <1>     ret
   316                              <1> .msdDevOpen:         ;Function 13
   317 00002D55 B005                <1>     mov al, drvBadDrvReq
   318 00002D57 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   319 00002D5A 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   320                              <1> 
   321 00002D60 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   322 00002D65 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   323 00002D6C FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   324 00002D6F C3                  <1>     ret
   325                              <1> .msdDevClose:        ;Function 14
   326 00002D70 B005                <1>     mov al, drvBadDrvReq
   327 00002D72 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   328 00002D75 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   329                              <1> 
   330 00002D7B 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   331 00002D80 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   332 00002D87 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   333 00002D8A C3                  <1>     ret
   334                              <1> .msdRemovableMedia:  ;Function 15
   335 00002D8B B005                <1>     mov al, drvBadDrvReq
   336 00002D8D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   337 00002D90 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   338                              <1> 
   339 00002D96 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   340 00002D9B 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   341 00002DA2 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   342 00002DA5 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   343 00002DAA 31D2                <1>     xor edx, edx    ;Busy bit clear
   344 00002DAC A880                <1>     test al, 80h
   345 00002DAE 0F44CA              <1>     cmovz ecx, edx
   346 00002DB1 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   347 00002DB5 C3                  <1>     ret
   348                              <1> .msdGenericIOCTL:    ;Function 19
   349 00002DB6 B005                <1>     mov al, drvBadDrvReq
   350 00002DB8 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   351 00002DBB 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   352                              <1> 
   353 00002DC1 C3                  <1>     ret
   354                              <1> .msdGetLogicalDev:   ;Function 23
   355 00002DC2 B005                <1>     mov al, drvBadDrvReq
   356 00002DC4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   357 00002DC7 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   358                              <1> 
   359 00002DCD 8A0541000000        <1>     mov al, byte [.msdCurDev]
   360 00002DD3 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   361 00002DD6 C3                  <1>     ret
   362                              <1> .msdSetLogicalDev:   ;Function 24
   363 00002DD7 B005                <1>     mov al, drvBadDrvReq
   364 00002DD9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   365 00002DDC 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   366                              <1> 
   367 00002DE2 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   368 00002DE5 880529000000        <1>     mov byte [.msdCurDev], al
   369 00002DEB C3                  <1>     ret
   370                              <1> 
   371                              <1> .msdBlkIOCommon:  ;Does block IO
   372                              <1> ;Called with rdi containing old rbx value and ah with function number
   373                              <1> ;rbp points to bpb
   374                              <1> ;Error handled by caller
   375                              <1> ;Sector count handled by caller
   376                              <1> ;Called with dh = BIOS function number
   377 00002DEC 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   378 00002DF1 8A90[152E0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   379 00002DF7 31C9                <1>     xor ecx, ecx
   380 00002DF9 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   381 00002DFC 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   382 00002E00 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   383 00002E04 88F4                <1>     mov ah, dh
   384 00002E06 B001                <1>     mov al, 01h ;Do one sector at a time 
   385 00002E08 CD33                <1>     int 33h
   386 00002E0A C3                  <1>     ret
   387                              <1> 
   388 00002E0B 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   389                              <1> ;LASTDRIVE default is 5
   390                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   391                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   392 00002E14 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   393                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   394 00002E15 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   395 00002E1A 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   396 00002E1F 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   396 00002E28 000000000000000000- <1>
   396 00002E31 000000000000000000- <1>
   396 00002E3A 000000000000000000- <1>
   396 00002E43 00000000            <1>
   397 00002E47 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   397 00002E50 000000000000000000- <1>
   397 00002E59 000000000000000000- <1>
   397 00002E62 000000000000000000- <1>
   397 00002E6B 000000000000000000- <1>
   397 00002E74 000000000000000000- <1>
   397 00002E7D 000000000000000000- <1>
   397 00002E86 000000000000000000- <1>
   397 00002E8F 000000000000000000- <1>
   397 00002E98 000000000000000000- <1>
   397 00002EA1 000000000000000000- <1>
   397 00002EAA 000000000000000000- <1>
   397 00002EB3 000000000000000000- <1>
   397 00002EBC 000000000000000000- <1>
   397 00002EC5 000000000000000000- <1>
   397 00002ECE 000000000000000000- <1>
   397 00002ED7 000000000000000000- <1>
   397 00002EE0 000000000000000000- <1>
   397 00002EE9 000000000000000000- <1>
   397 00002EF2 000000000000000000- <1>
   397 00002EFB 000000000000000000- <1>
   397 00002F04 000000000000000000- <1>
   397 00002F0D 000000000000000000- <1>
   397 00002F16 000000000000000000- <1>
   397 00002F1F 000000000000000000- <1>
   397 00002F28 000000000000000000- <1>
   397 00002F31 000000000000000000- <1>
   397 00002F3A 000000000000000000- <1>
   397 00002F43 000000000000000000- <1>
   397 00002F4C 000000000000000000- <1>
   397 00002F55 000000000000000000- <1>
   397 00002F5E 000000000000000000- <1>
   397 00002F67 000000000000000000- <1>
   397 00002F70 000000000000000000- <1>
   397 00002F79 000000000000000000- <1>
   397 00002F82 000000000000000000- <1>
   397 00002F8B 000000000000000000- <1>
   397 00002F94 000000000000000000- <1>
   397 00002F9D 000000000000000000- <1>
   397 00002FA6 000000000000000000- <1>
   397 00002FAF 000000000000000000- <1>
   397 00002FB8 000000000000000000- <1>
   397 00002FC1 000000000000000000- <1>
   397 00002FCA 000000000000000000- <1>
   397 00002FD3 000000000000000000- <1>
   397 00002FDC 000000000000000000- <1>
   397 00002FE5 000000000000000000- <1>
   397 00002FEE 000000000000000000- <1>
   397 00002FF7 000000000000000000- <1>
   397 00003000 000000000000000000- <1>
   397 00003009 000000000000000000- <1>
   397 00003012 000000000000000000- <1>
   397 0000301B 000000000000000000- <1>
   397 00003024 000000000000000000- <1>
   397 0000302D 000000000000000000- <1>
   397 00003036 000000000000000000- <1>
   397 0000303F 000000000000000000- <1>
   397 00003048 000000000000000000- <1>
   397 00003051 000000000000000000- <1>
   397 0000305A 000000000000000000- <1>
   397 00003063 000000000000000000- <1>
   397 0000306C 000000000000000000- <1>
   397 00003075 000000000000000000- <1>
   397 0000307E 000000000000000000- <1>
   397 00003087 000000000000000000- <1>
   397 00003090 000000000000000000- <1>
   397 00003099 000000000000        <1>
   398                              <1> 
   399                              <1> endptr equ $
    37                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    38                                  ;Paragraph alignment
    39                                  %include "./Source/BSS/dosDynaDataArea.asm"
    40                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    41                              <1> ; the MCB chain!
    42                              <1> ddaStart:
    43 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    44                              <1> 
    45                              <1> ;Create SFT header and corresponding array of five default sft entries
    46 00000010 <res Ah>            <1> firstSftHeader  resb sfth_size
    47 0000001A <res 4Fh>           <1> firstSft        resb sft_size
    48 00000069 <res 4Fh>           <1> secondSft       resb sft_size
    49 000000B8 <res 4Fh>           <1> thirdSft        resb sft_size
    50 00000107 <res 4Fh>           <1> fourthSft       resb sft_size
    51 00000156 <res 4Fh>           <1> fifthSft        resb sft_size
    52                              <1> 
    53                              <1> ;Create DPB chain of first 5 available DPB slots
    54                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    55 000001A5 <res 35h>           <1> firstDPB        resb dpb_size
    56 000001DA <res 35h>           <1> secondDPB       resb dpb_size
    57                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    58                              <1> ;Always jettison this space
    59 0000020F <res 35h>           <1> thirdDPB        resb dpb_size
    60 00000244 <res 35h>           <1> fourthDPB       resb dpb_size
    61 00000279 <res 35h>           <1> fifthDPB        resb dpb_size 
    62                              <1> 
    63                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    64                              <1> ;Replace once CONFGI.SYS has been read
    65 000002AE <res 5Bh>           <1> initCDS         resb cds_size 
    66                              <1> 
    67                              <1> 
    68 00000309 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    69 00000329 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    70                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    71                              <1> dynamicDataAreaLength equ $ - ddaStart
