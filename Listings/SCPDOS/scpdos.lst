     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported (must)
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   138                              <1> 
   139                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   140                              <1> 
   141 00000000 ??????              <1>     .jmpBoot                resb 3 
   142 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   143 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   144 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   145 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   146 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   147 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   148 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   149 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   150 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   151 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   152 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   153 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   154 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   155 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   156 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   157 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   158 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   159 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   160                              <1> 
   161                              <1> endstruc
   162                              <1> 
   163                              <1> struc FSInfo
   164                              <1> 
   165 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   166 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   167 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   168 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   169 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   170 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   171 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   172                              <1> 
   173                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsPhysDrive    equ 4000h   ;CDS initialised 
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> ;Bit 7 reserved 0
   167                              <1> ;Bits 8-12 reserved 0
   168                              <1> ;Critical Error handling
   169                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   170                              <1> ;Buffering on writes
   171                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   172                              <1> ;FCB opened file?
   173                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   174                              <1> ;Attribute Byte
   175                              <1> readOnlyFile    equ 1h
   176                              <1> hiddenFile      equ 2h
   177                              <1> systemFile      equ 4h
   178                              <1> volumeLabel     equ 8h
   179                              <1> directoryFile   equ 10h ;Directory entry
   180                              <1> archiveFile     equ 20h
   181                              <1> ;Device Info equates
   182                              <1> ;For a block device, bits [5:0] contain the drive number
   183                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   184                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   185                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   186                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   187                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   188                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   189                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   190                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   191                              <1> devCharDev      equ 80h ;If set, it is a char device!
   192                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   193                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   194                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   195                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   196                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   197                              <1> ;------------------------------------------------------------------------;
   198                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   199                              <1> ; to an internal buffer, and then copying it to the specified location
   200                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   201                              <1> ; another request for the same sector from the same device is made, so 
   202                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   203                              <1> ; size, selected according to the largest detected sector size during 
   204                              <1> ; the initial loadup.
   205                              <1> ;
   206                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   207                              <1> ;
   208                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   209                              <1> ;------------------------------------------------------------------------;
   210                              <1> 
   211                              <1> struc bufferHdr
   212 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   213 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> ;Note! A buffer is marked as referenced IF it has been accessed via 
   230                              <1> ; a Read or Write call. 
   231                              <1> ; When a buffer is used temporarily for internal purposes (as when DOS
   232                              <1> ; gives a driver a buffer) and then DOS reads data from that buffer (such as
   233                              <1> ; a BUILD BPB situation), the data is left as unreferenced as the use for that 
   234                              <1> ; buffer goes away before the end of the DOS call, and there is no danger of.
   235                              <1> ; of misbehaviour.
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc fcb
   283                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   284 00000000 ??                  <1>     .driveNum   resb 1
   285 00000001 ????????????????    <1>     .filename   resb 8
   286 00000009 ??????              <1>     .fileext    resb 3
   287 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   288                              <1> ;One block consists of 128 records, of size denoted in the below
   289 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   290 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   291 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   292 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   293 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   294 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   295 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   296 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   297 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   298                              <1>     ;If record size > 64, high byte is ignored.
   299                              <1>     ;Used for random read and write operations to find the right record
   300                              <1> endstruc
   301                              <1> 
   302                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   303 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   304 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   305 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   306 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   307 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   308 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   309 00000016 ????                <1>     .fileTime   resw 1  ;File time
   310 00000018 ????                <1>     .fileDate   resw 1  ;File date
   311 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   312 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc psp
   316 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   317 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   318 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   319 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   320 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   321 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   322 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   323 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   324 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   325 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   326 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   327 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   328 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   329                              <1> ;Extra handle arrays are grouped into a linked list
   330                              <1> ;The below are in the same place as in DOS
   331 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   332 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   333                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   334 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   335 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   336                              <1> endstruc
   337                              <1> 
   338                              <1> struc clkStruc
   339 00000000 ????                <1>     .dateWord   resw 1
   340 00000002 ??                  <1>     .minutes    resb 1
   341 00000003 ??                  <1>     .hours      resb 1
   342 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   343 00000005 ??                  <1>     .seconds    resb 1
   344                              <1> endstruc
   345                              <1> 
   346                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   347                              <1> ;for a space of 64Gb
   348                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   349                              <1> 
   350                              <1> ;Critical Error AH bitfield equates
   351                              <1> critRead    equ 0h
   352                              <1> critWrite   equ 1h
   353                              <1> critDOS     equ 0h
   354                              <1> critFAT     equ 2h
   355                              <1> critDir     equ 4h
   356                              <1> critData    equ 6h
   357                              <1> critFailOK  equ 8h
   358                              <1> critRetryOK equ 10h
   359                              <1> critIgnorOK equ 20h
   360                              <1> critCharDev equ 80h
   361                              <1> 
   362                              <1> critIgnore  equ 0
   363                              <1> critRetry   equ 1
   364                              <1> critAbort   equ 2
   365                              <1> critFail    equ 3
   366                              <1> 
   367                              <1> ;MISC ASCII control chars
   368                              <1> NUL equ 00h ;^@         | ASCII Null
   369                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   370                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   371                              <1> BEL equ 07h ;^G         | ASCII Bell
   372                              <1> BSP equ 08h ;^H         | ASCII Backspace
   373                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   374                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   375                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   376                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   377                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   378                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   379                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   380                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   381                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   382                              <1> SPC equ 20h ;Printable  | ASCII Space
   383                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   384                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   385                              <1> 
   386                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   387                              <1> ;Extended Ascii Codes
   388                              <1> eF1     equ 3Bh ;F1 second byte
   389                              <1> eF2     equ 3Ch ;F2 second byte
   390                              <1> eF3     equ 3Dh ;F3 second byte
   391                              <1> eF4     equ 3Eh ;F4 second byte
   392                              <1> eF5     equ 3Fh ;F5 second byte
   393                              <1> eF6     equ 40h ;F6 second byte
   394                              <1> eF7     equ 41h ;F7 second byte
   395                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   396                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   397                              <1> eIns    equ 52h ;Insert second byte
   398                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS true
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST true
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;Number 32-33 reserved
    48                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    49                              <1> errNoFCB    equ 35  ;FCB unavailable
    50                              <1> ;Numbers 36-82 reserved
    51                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    52                              <1> errFI44     equ 83  ;Fail on INT 44h
    53                              <1> ;Numbers 84-88 reserved
    54                              <1> ;-----------------------------------------------------------------------------
    55                              <1> ;Error Loci
    56                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    57                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    58                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    59                              <1> eLocChr     equ 4   ;Serial/Character Device error
    60                              <1> eLocMem     equ 5   ;Related to RAM
    61                              <1> ;-----------------------------------------------------------------------------
    62                              <1> ;Error Actions
    63                              <1> eActRet     equ 1   ;Retry
    64                              <1> eActDRet    equ 2   ;Delay then retry
    65                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    66                              <1> eActAbt     equ 4   ;Abort with cleanup
    67                              <1> eActKil     equ 5   ;Abort without cleanup
    68                              <1> eActIgn     equ 6   ;Ignore error
    69                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    70                              <1> ;-----------------------------------------------------------------------------
    71                              <1> ;Error classes
    72                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    73                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    74                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    75                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    76                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    77                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    78                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    79                              <1> eClsNotFnd  equ 8   ;Resource not found
    80                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    81                              <1> eClsLocked  equ 10  ;Resource Locked
    82                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    83                              <1> eClsClash   equ 12  ;Resource already exists!
    84                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %define currSegVBase 0
    13                                  %include "./Source/Sysinit/sysInit.asm"
    14                              <1> ; We arrive here with the following values in the registers.
    15                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    16                              <1> ; dx  = Int 33h boot device number
    17                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    18                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    19 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    20 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    20 0000000B 909090909090909090- <1>
    20 00000014 909090909090909090- <1>
    20 0000001D 909090909090909090- <1>
    20 00000026 909090909090909090- <1>
    20 0000002F 909090909090909090- <1>
    20 00000038 909090909090909090- <1>
    20 00000041 909090909090909090- <1>
    20 0000004A 909090909090909090- <1>
    20 00000053 909090909090909090- <1>
    20 0000005C 909090909090909090- <1>
    20 00000065 909090909090909090- <1>
    20 0000006E 909090909090909090- <1>
    20 00000077 909090909090909090- <1>
    20 00000080 909090909090909090- <1>
    20 00000089 909090909090909090- <1>
    20 00000092 909090909090909090- <1>
    20 0000009B 909090909090909090- <1>
    20 000000A4 909090909090909090- <1>
    20 000000AD 909090909090909090- <1>
    20 000000B6 909090909090909090- <1>
    20 000000BF 909090909090909090- <1>
    20 000000C8 909090909090909090- <1>
    20 000000D1 909090909090909090- <1>
    20 000000DA 909090909090909090- <1>
    20 000000E3 909090909090909090- <1>
    20 000000EC 909090909090909090- <1>
    20 000000F5 909090909090909090- <1>
    20 000000FE 9090                <1>
    21                              <1> ;First move the alignment of the DOSSEG to 4Kb
    22 00000100 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    23 00000101 52                  <1>     push rdx    ;Save dl on stack briefly
    24 00000102 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    25 00000107 0F32                <1>     rdmsr
    26 00000109 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    27 0000010B 48C1E720            <1>     shl rdi, 20h        ;Shift high
    28 0000010F 89C7                <1>     mov edi, eax        ;Get the low dword in
    29 00000111 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    30 00000114 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    31 0000011B 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    32 00000122 89F8                <1>     mov eax, edi
    33 00000124 4889FA              <1>     mov rdx, rdi
    34 00000127 48C1EA20            <1>     shr rdx, 20h
    35 0000012B 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    36 0000012D 5A                  <1>     pop rdx
    37                              <1> ;------------------------------------------------;
    38                              <1> ;              Connect Debugger                  ;
    39                              <1> ;------------------------------------------------;
    40                              <1> %if DEBUG
    41                              <1> ;Only connect if in debug mode
    42                              <1>     mov eax, 0C501h ;Connect debugger
    43                              <1>     int 35h
    44                              <1> %endif
    45                              <1> ;------------------------------------------------;
    46                              <1> ;           Sanitise the data area               ;
    47                              <1> ;------------------------------------------------;
    48                              <1> ; This call initialises ALL fields in the DOS    ;
    49                              <1> ; data area with 0's. Thus any fields, which     ;
    50                              <1> ; need to be initialised with a 0 value, are     ;
    51                              <1> ; initialised for free.                          ;
    52                              <1> ;------------------------------------------------;
    53 0000012E B9[83D80300]        <1>     mov ecx, dSegLen
    54 00000133 30C0                <1>     xor al, al
    55 00000135 57                  <1>     push rdi    ;Temp save rdi on the stack
    56 00000136 F3AA                <1>     rep stosb
    57 00000138 5F                  <1>     pop rdi
    58                              <1> ;------------------------------------------------;
    59                              <1> ;          Start saving Basic DOS data           ;
    60                              <1> ;------------------------------------------------;
    61 00000139 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    62                              <1> ;Copy DOS to its final resting place
    63 00000141 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    63 00000146 [00C00300]          <1>
    64 0000014A 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    64 0000014F [08C00300]          <1>
    65 00000153 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    66 00000156 4881C7[83D80300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    67 0000015D 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    68 00000164 B900100000          <1>     mov ecx, 1000h
    69 00000169 F348A5              <1>     rep movsq
    70                              <1> 
    71 0000016C CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    72 0000016E 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    73 00000172 664489C0            <1>     mov ax, r8w
    74 00000176 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    75 0000017E 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    76 00000186 64C60425[69C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    76 0000018E 05                  <1>
    77                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
    78 0000018F 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    78 00000194 [8FC00300]0500      <1>
    79 0000019A 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    79 0000019F [91C00300]1400      <1>
    80 000001A5 64C60425[6AC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    80 000001AD 01                  <1>
    81                              <1>     ;If no detected Int 33h devices, halt 
    82 000001AE 49C1E810            <1>     shr r8, 2*8
    83 000001B2 4584C0              <1>     test r8b, r8b
    84 000001B5 0F84150A0000        <1>     jz errorInit
    85                              <1> ;------------------------------------------------;
    86                              <1> ;          Add additional page tables            ;
    87                              <1> ;------------------------------------------------;
    88                              <1> ;This will allow for up to 64Gb of addressible space
    89 000001BB 4889EF              <1>     mov rdi, rbp
    90                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    91 000001BE B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    92 000001C3 57                  <1>     push rdi
    93 000001C4 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    93 000001CD 00                  <1>
    94                              <1> pdtLoop:
    95 000001CE 48AB                <1>     stosq
    96 000001D0 480500002000        <1>     add rax, 200000h
    97 000001D6 FFC9                <1>     dec ecx
    98 000001D8 75F4                <1>     jnz pdtLoop
    99 000001DA 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   100                              <1> ;Now we add every 4kb page to the page directory pointer table
   101                              <1> ;15 4kb pages to consider
   102 000001DB 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   103 000001DE 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   104 000001E1 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   105 000001E8 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   106 000001EF B93C000000          <1>     mov ecx, 60
   107 000001F4 480D03000000        <1>     or rax, 3h      ;present and r/w
   108                              <1> pdptLoop:
   109 000001FA 48AB                <1>     stosq
   110 000001FC 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   111 00000202 FFC9                <1>     dec ecx
   112 00000204 75F4                <1>     jnz pdptLoop
   113 00000206 0F20DF              <1>     mov rdi, cr3
   114 00000209 0F22DF              <1>     mov cr3, rdi
   115                              <1> 
   116                              <1> ;------------------------------------------------;
   117                              <1> ;                   MCB inits                    ;
   118                              <1> ;------------------------------------------------;
   119                              <1> mcbInit:
   120 0000020C B820E80000          <1>     mov eax, 0E820h
   121 00000211 CD35                <1>     int 35h
   122                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   123 00000213 E804010000          <1>     call .mcbFindAddress
   124 00000218 7349                <1>     jnc .mcbi1  ;If found, proceed
   125                              <1>     ;Here, we try use E801h
   126 0000021A B801E80000          <1>     mov eax, 0E801h
   127 0000021F CD35                <1>     int 35h
   128 00000221 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   129 00000224 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   130 00000227 85C0                <1>     test eax, eax
   131 00000229 741B                <1>     jz .worst
   132 0000022B C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   133 0000022E C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   134 00000231 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   135 00000239 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   136 00000241 E909010000          <1>     jmp mcbBuild
   137                              <1> .worst:
   138                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   139 00000246 B800002000          <1>     mov eax, 200000h
   140 0000024B 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   140 00000250 [08C00300]          <1>
   141 00000254 29D8                <1>     sub eax, ebx
   142 00000256 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   143 0000025E E9EC000000          <1>     jmp mcbBuild 
   144                              <1> .mcbi1:
   145 00000263 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   146 00000266 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   146 0000026F 00                  <1>
   147 00000270 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   148 00000274 0F85C2000000        <1>     jne .mcbFail
   149 0000027A 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   150                              <1>     ;PCI hole always exists so this value will always be a dword
   151 0000027E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   152 00000286 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   153 00000289 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   154 0000028C 4881FB00000001      <1>     cmp rbx, 1000000h  
   155 00000293 773C                <1>     ja .skipISA
   156                              <1> ;Here we deal with ISA hole issues
   157 00000295 B820E80000          <1>     mov eax, 0E820h
   158 0000029A CD35                <1>     int 35h
   159 0000029C 48B800000001000000- <1>     mov rax, 1000000h
   159 000002A5 00                  <1>
   160 000002A6 E871000000          <1>     call .mcbFindAddress
   161 000002AB 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   162 000002B1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   162 000002BA 00                  <1>
   163 000002BB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   164 000002BF 0F858A000000        <1>     jne mcbBuild  
   165 000002C5 488B5808            <1>     mov rbx, qword [rax + 8]
   166 000002C9 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   167                              <1> .skipISA:
   168 000002D1 B820E80000          <1>     mov eax, 0E820h
   169 000002D6 CD35                <1>     int 35h
   170 000002D8 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   170 000002E1 00                  <1>
   171 000002E2 E835000000          <1>     call .mcbFindAddress
   172 000002E7 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   173 000002E9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   173 000002F2 00                  <1>
   174 000002F3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   175 000002F7 7556                <1>     jne mcbBuild   
   176 000002F9 488B5808            <1>     mov rbx, qword [rax + 8]
   177                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   178 000002FD 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   178 00000306 00                  <1>
   179 00000307 4839CB              <1>     cmp rbx, rcx
   180 0000030A 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   181 0000030E 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   181 00000313 [1BC00300]          <1>
   182 00000317 E933000000          <1>     jmp mcbBuild
   183                              <1> .mcbFindAddress:
   184                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   185                              <1> ;Entry: rax = Address of arena to search for
   186                              <1> ;       rsi = Pointer to memory map
   187                              <1> ;       ecx = Number of 24 byte entries
   188                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   189                              <1> ;       CF=CY : value in rax not found
   190 0000031C 56                  <1>     push rsi
   191 0000031D 51                  <1>     push rcx
   192 0000031E 50                  <1>     push rax
   193                              <1> .mfa0:
   194 0000031F 483B06              <1>     cmp rax, qword [rsi]
   195 00000322 7410                <1>     je .mcbAddressFound
   196 00000324 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   197 0000032B FFC9                <1>     dec ecx
   198 0000032D 79F0                <1>     jns .mfa0
   199                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   200 0000032F 58                  <1>     pop rax
   201 00000330 59                  <1>     pop rcx
   202 00000331 5E                  <1>     pop rsi
   203 00000332 F9                  <1>     stc
   204 00000333 C3                  <1>     ret
   205                              <1> .mcbAddressFound:
   206 00000334 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   207 00000337 59                  <1>     pop rcx ;Pop old rax value off
   208 00000338 59                  <1>     pop rcx
   209 00000339 5E                  <1>     pop rsi
   210 0000033A F8                  <1>     clc
   211 0000033B C3                  <1>     ret
   212                              <1> .mcbFail:
   213 0000033C 488D2DB4080000      <1>     lea rbp, mcbFailmsg
   214 00000343 B804130000          <1>     mov eax, 1304h
   215 00000348 CD30                <1>     int 30h
   216 0000034A E981080000          <1>     jmp errorInit
   217                              <1> 
   218                              <1> mcbBuild:
   219                              <1> ;Actually build the MCB chain here
   220                              <1> ;Start by computing the difference between userbase and DOS area
   221                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   222 0000034F 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   222 00000354 [08C00300]          <1>
   223 00000358 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   224 0000035F 56                  <1>     push rsi    ;Save ptr
   225 00000360 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   226 00000367 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   227 0000036A 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   228 00000372 5B                  <1>     pop rbx
   229 00000373 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   230 00000376 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   231 0000037E 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   232 00000386 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   233 00000389 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   234 0000038C 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   234 00000391 [24C00300]          <1>
   235                              <1> 
   236                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   237 00000395 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   237 0000039D 00000000            <1>
   238 000003A1 746E                <1>     jz .skipISA
   239                              <1>     ;Here if an ISA hole exists, place a MCB around it
   240 000003A3 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   241                              <1>     ;Remove one MCB worth of space from alloc
   242 000003AA 31C9                <1>     xor ecx, ecx
   243 000003AC 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   244 000003AF 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   245 000003B5 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   246 000003B8 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   247 000003BB 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   248 000003BE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   249 000003C1 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   250 000003C9 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   250 000003D2 00                  <1>
   251 000003D3 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   252 000003D6 480510000000        <1>     add rax, mcb_size
   253 000003DC 4829C1              <1>     sub rcx, rax    ;Take their difference
   254 000003DF C1E904              <1>     shr ecx, 4
   255 000003E2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   256 000003E5 C1E104              <1>     shl ecx, 4  ;Get bytes again
   257 000003E8 4881C310000000      <1>     add rbx, mcb_size
   258 000003EF 4801CB              <1>     add rbx, rcx
   259                              <1>     ;RBX should now be at 16Mb
   260 000003F2 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   261 000003F5 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   262 000003FD 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   263 00000405 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   264 00000408 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   265 0000040E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   266                              <1> .skipISA:
   267                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   268                              <1>     ;rbx points to a block with "Z" marker
   269 00000411 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   269 00000419 00000000            <1>
   270 0000041D 7470                <1>     jz .exit
   271                              <1>     ;Add PCI hole MCB
   272 0000041F 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 00000426 31C9                <1>     xor ecx, ecx
   275 00000428 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 0000042B 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 00000431 C1E104              <1>     shl ecx, 4  ;Get bytes
   278 00000434 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   279 00000437 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 0000043A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 0000043D 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 00000445 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   282 0000044E 00                  <1>
   283 0000044F 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 00000452 480510000000        <1>     add rax, mcb_size
   285 00000458 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 0000045B C1E904              <1>     shr ecx, 4
   287 0000045E 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 00000461 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 00000464 4881C310000000      <1>     add rbx, mcb_size
   290 0000046B 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 4Gb
   292 0000046E C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 00000471 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 00000479 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   294 0000047E [1BC00300]          <1>
   295 00000482 48C1E904            <1>     shr rcx, 4
   296 00000486 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000048C 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .exit:
   299                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   300 0000048F 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   301                              <1> ;------------------------------------------------;
   302                              <1> ;          Kernel inits and adjustments          ;
   303                              <1> ;------------------------------------------------;
   304                              <1> ;Adjust Interrupt Entries Int 40h-49h
   305                              <1> adjInts:
   306 00000496 B340                <1>     mov bl, 40h
   307 00000498 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   308 0000049D CD35                <1>     int 35h
   309 0000049F B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   310 000004A4 488D3DC1070000      <1>     lea rdi, intData
   311 000004AB 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   312                              <1> .ai0:
   313 000004AD B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   314 000004B2 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   315 000004B5 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   316                              <1> .ai1:
   317 000004B8 CD35                <1>     int 35h
   318 000004BA 4881C708000000      <1>     add rdi, 8
   319 000004C1 FFC1                <1>     inc ecx
   320 000004C3 81F950000000        <1>     cmp ecx, 50h
   321 000004C9 75E2                <1>     jne .ai0
   322                              <1> 
   323                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   324                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   325                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   326                              <1>     %if DEBUG
   327                              <1> debugPopUpMsg:
   328                              <1>     push rbx
   329                              <1>     push rbp
   330                              <1>     push rcx
   331                              <1>     push rdx
   332                              <1>     mov ecx, 53 ;A large number of lines
   333                              <1>     xor edx, edx    ;COM 1
   334                              <1> .cls:
   335                              <1>     mov eax, 010Ah ;Transmit Line feed
   336                              <1>     int 34h
   337                              <1>     dec ecx
   338                              <1>     jnz .cls
   339                              <1>     lea rbx, qword [debPrintNullString + rbp]
   340                              <1>     lea rbp, .msg
   341                              <1>     call rbx
   342                              <1>     jmp short .exit
   343                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   344                              <1> .exit:
   345                              <1>     pop rdx
   346                              <1>     pop rcx
   347                              <1>     pop rbp
   348                              <1>     pop rbx
   349                              <1>     %endif
   350                              <1> 
   351                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   352 000004CB 488D15FE060000      <1>     lea rdx, errorInit ;Get segment start address
   353 000004D2 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   354 000004D7 CD41                <1>     int 41h
   355 000004D9 488D15F0060000      <1>     lea rdx, errorInit ;Get segment start address
   356 000004E0 B844250000          <1>     mov eax, 2544h
   357 000004E5 CD41                <1>     int 41h
   358                              <1> ;------------------------------------------------;
   359                              <1> ;          Driver Adjustments and inits          ;
   360                              <1> ;------------------------------------------------;
   361                              <1> ;Modify the pointers in nData before putting them in the data area
   362 000004E7 48012DFE070000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   363 000004EE 48012D01080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   364 000004F5 48012D02080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   365                              <1> ;Copy the Null driver to its location in Sysvars
   366 000004FC B922000000          <1>     mov ecx, drvHdr_size
   367 00000501 488D35E4070000      <1>     lea rsi, qword [nData]
   368 00000508 488DBD[6CC00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   369 0000050F F3A4                <1>     rep movsb   
   370                              <1> 
   371                              <1> ;Adjust the addresses in the other driver headers 
   372 00000511 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   372 00000513 [112D000000000000]  <1>
   373 0000051B B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   374 00000520 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   375                              <1> adjDrivers:
   376 00000524 E894060000          <1>     call adjustDrvHdr
   377 00000529 E2F9                <1>     loop adjDrivers
   378                              <1> 
   379                              <1> ;Open NUL
   380                              <1> ;NUL opened
   381                              <1> ;Open CON
   382                              <1> conInit:    ;Rather than keeping this resident... do it here
   383                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   384 0000052B 488D95[F82F0000]    <1>     lea rdx, qword [rbp + fastOutput]
   385 00000532 B849250000          <1>     mov eax, 2549h
   386 00000537 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   387 00000539 488D95[00300000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   388 00000540 B83B250000          <1>     mov eax, 253Bh
   389 00000545 CD41                <1>     int 41h ;Hook int 3Bh
   390                              <1> .ci0:
   391 00000547 B401                <1>     mov ah, 01      ;Get buffer status
   392 00000549 CD36                <1>     int 36h
   393 0000054B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   394 0000054D 30E4                <1>     xor ah, ah
   395 0000054F CD36                <1>     int 36h ;Read key to flush from buffer
   396 00000551 EBF4                <1>     jmp short .ci0
   397                              <1> .ci1:
   398 00000553 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   399 00000558 CD30                <1>     int 30h
   400 0000055A B402                <1>     mov ah, 02h
   401 0000055C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   402 0000055E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   403 00000560 CD30                <1>     int 30h
   404 00000562 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   405 00000564 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   406 00000569 CD30                <1>     int 30h
   407                              <1> 
   408                              <1>     ;Save ptr to ConHdr in Sysvars
   409 0000056B 488D85[112D0000]    <1>     lea rax, qword [rbp + conHdr]
   410 00000572 6448890425-         <1>     mov qword fs:[vConPtr], rax
   410 00000577 [44C00300]          <1>
   411                              <1> 
   412                              <1>     ;Save ptr to ClkHdr in Sysvars
   413 0000057B 488D85[772D0000]    <1>     lea rax, qword [rbp + clkHdr]
   414 00000582 6448890425-         <1>     mov qword fs:[clockPtr], rax
   414 00000587 [3CC00300]          <1>
   415                              <1> 
   416                              <1>     ;Fix the ext ESC function handler address
   417 0000058B 488D85[2F140000]    <1>     lea rax, qword [rbp + editKeys]
   418 00000592 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   418 00000597 [32000000]          <1>
   419                              <1> ;------------------------------------------------;
   420                              <1> ;         Link DOS to temporary Buffer           ;
   421                              <1> ;------------------------------------------------;
   422                              <1> tempBufferInit:
   423 0000059B 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   424 000005A2 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   424 000005A7 [4EC00300]          <1>
   425 000005AB 31C0                <1>     xor eax, eax
   426 000005AD 48FFC8              <1>     dec rax
   427 000005B0 48AB                <1>     stosq   ;.nextBufPtr, end of list
   428 000005B2 AA                  <1>     stosb   ;.driveNumber, Free entry
   429 000005B3 48FFC0              <1>     inc rax
   430 000005B6 AA                  <1>     stosb   ;.bufferFlags, No flags
   431                              <1> ;------------------------------------------------;
   432                              <1> ;         Init msd driver, create DPB            ;
   433                              <1> ;------------------------------------------------;
   434                              <1> storageInits:
   435                              <1> ;First save dpb pointer in sysvars
   436 000005B7 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   437 000005BE 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   437 000005C3 [2CC00300]          <1>
   438                              <1> ;Open Mass Storage
   439                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   440                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   441                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   442                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   443                              <1>     ;mov al, byte fs:[numPhysVol]
   444                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   445                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   446                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   447                              <1>     ;Check if it returned OK first!
   448                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   449                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   450                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   451                              <1>     ;mov byte fs:[numPhysVol], al
   452                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   453                              <1> 
   454                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   455 000005C7 E842070000          <1>     call diskInit
   456 000005CC 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   457 000005CF 648A0425[68C00300]  <1>     mov al, byte fs:[numPhysVol]
   458 000005D7 488D95[93360000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   459 000005DE 30C9                <1>     xor cl, cl  ;Clear counter
   460 000005E0 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   460 000005E5 [2CC00300]          <1>
   461                              <1> .si0:   
   462 000005E9 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   463 000005EC B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   464 000005EE CD41                <1>     int 41h
   465                              <1> ;Add other data to DPB
   466 000005F0 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   467 000005F3 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   468 000005F6 50                  <1>     push rax
   469 000005F7 488D87[992D0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   470 000005FE 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   471 00000602 58                  <1>     pop rax
   472 00000603 FEC1                <1>     inc cl
   473 00000605 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   474 00000607 7416                <1>     je .si1
   475 00000609 50                  <1>     push rax
   476 0000060A 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   477 0000060E 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   478 00000612 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   479 00000615 58                  <1>     pop rax
   480 00000616 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   481 0000061D EBCA                <1>     jmp short .si0
   482                              <1> .si1:
   483                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   484 0000061F 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   485 00000627 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   486                              <1> ;------------------------------------------------;
   487                              <1> ;          Find largest sector size              ;
   488                              <1> ;------------------------------------------------;
   489                              <1> sectorSizeSearch:
   490                              <1> ;Done by reading BPB's for each drive
   491 0000062A 488D9D[93360000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   492                              <1>     
   493                              <1>     ;Go thru each block individually
   494 00000631 31C0                <1>     xor eax, eax
   495 00000633 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   496                              <1> .findLargest:
   497 00000636 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   498 0000063A 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   499 0000063F 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   500 00000646 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   501 00000649 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   502 0000064C 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   503 0000064E 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   503 00000653 [4CC00300]          <1>
   504                              <1>     
   505                              <1> ;------------------------------------------------;
   506                              <1> ;                 Temp CDS inits                 ;
   507                              <1> ;------------------------------------------------;
   508                              <1> tempCDS:
   509                              <1> ;Build a temporary CDS for Drive A to use it for booting
   510 00000657 488DBD[94C50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   511 0000065E 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   511 00000663 [56C00300]          <1>
   512                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   513 00000667 C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   514 0000066D 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   515 00000673 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   515 00000678 [2CC00300]          <1>
   516 0000067C 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   517 00000680 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   518                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   519                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   520                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   521                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   522                              <1> ;------------------------------------------------;
   523                              <1> ;     Set up general PSP areas and DOS vars      ;
   524                              <1> ;------------------------------------------------;
   525                              <1> ;Additional DOS Vars init
   526                              <1>     ;xor eax, eax
   527                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   528                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   529                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   530                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   531                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   532                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   533 00000686 64C60425[65C30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   533 0000068E FF                  <1>
   534                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   535                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   536 0000068F 64C60425[2DC30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   536 00000697 2F                  <1>
   537                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   538                              <1> 
   539                              <1> ;Set network machine name to... nothing!
   540 00000698 488DBD[32C30300]    <1>     lea rdi, qword [rbp + machineName]
   541 0000069F B910000000          <1>     mov ecx, 10h    ;16 chars long
   542 000006A4 B020                <1>     mov al, SPC ;Space char
   543 000006A6 F3AA                <1>     rep stosb   ;Fill with space chars
   544                              <1>     ;xor al, al
   545                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   546                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   547                              <1> 
   548                              <1> ;Patch Data Table init
   549 000006A8 488DBD[42C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   550 000006AF 488D85[EA260000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   551 000006B6 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   552 000006B8 488D85[F4260000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   553 000006BF 48AB                <1>     stosq
   554 000006C1 488D85[FE260000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   555 000006C8 48AB                <1>     stosq
   556 000006CA 488D85[08270000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   557 000006D1 48AB                <1>     stosq
   558                              <1> 
   559                              <1> ;Initial PSP Init
   560 000006D3 488D1D26F9FFFF      <1>     lea rbx, qword [tempPSP]
   561 000006DA 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   561 000006DF [7BC30300]          <1>
   562 000006E3 53                  <1>     push rbx
   563 000006E4 4881C380000000      <1>     add rbx, psp.dta
   564 000006EB 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   564 000006F0 [73C30300]          <1>
   565 000006F4 5B                  <1>     pop rbx
   566 000006F5 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   567 000006FA C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   568 00000701 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   569 00000705 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   570 00000709 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   571 0000070D 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   572 00000711 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   572 0000071A FF                  <1>
   573 0000071B 48AB                <1>     stosq   ;8 bytes
   574 0000071D 31C0                <1>     xor eax, eax
   575 0000071F 50                  <1>     push rax    ;Save 0 on the stack
   576 00000720 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   577 00000723 48AB                <1>     stosq   ;16 bytes
   578 00000725 AB                  <1>     stosd   ;20 bytes
   579 00000726 58                  <1>     pop rax ;Get 0 back
   580 00000727 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   581 0000072F 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   582 00000733 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   583 00000737 4889DA              <1>     mov rdx, rbx
   584 0000073A B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   585 0000073F CD41                <1>     int 41h
   586 00000741 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   587 00000745 B843350000          <1>     mov eax, 3543h
   588 0000074A CD41                <1>     int 41h
   589 0000074C 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   590 00000750 B844350000          <1>     mov eax, 3544h
   591 00000755 CD41                <1>     int 41h
   592 00000757 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   593                              <1> 
   594 0000075B B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   595 00000760 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   596 00000764 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   597                              <1> ;------------------------------------------------;
   598                              <1> ;          Default File Handle Creation          ;
   599                              <1> ;                                                ;
   600                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   601                              <1> ;------------------------------------------------;
   602                              <1> defaultFileHandles:
   603                              <1> ;Fill in the default file table entries
   604 00000766 488D9D[93C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   605 0000076D 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   606 00000774 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   607 0000077A 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   607 0000077F [34C00300]          <1>
   608 00000783 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   608 0000078C 20                  <1>
   609                              <1> ;GOTO FIRST FILE 
   610 0000078D 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   611                              <1> ;Write AUX
   612 00000794 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   613 00000799 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   614 0000079F C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   615 000007A3 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   616                              <1>     ;No EOF when reading from the device
   617 000007A7 488B85[332D0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   618 000007AE 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   619                              <1>     ;Ignore disk related fields and Date/Time of open
   620 000007B2 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   621                              <1>     ;11 chars in 8.3 name
   622 000007B6 488D3589040000      <1>     lea rsi, auxName
   623 000007BD B903000000          <1>     mov ecx, 3
   624 000007C2 F3A4                <1>     rep movsb   ;Move the three bytes
   625 000007C4 4889D0              <1>     mov rax, rdx
   626 000007C7 48AB                <1>     stosq   ;Eight spaces left to print
   627 000007C9 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   627 000007CE [7BC30300]          <1>
   628 000007D2 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   629                              <1> ;GOTO NEXT ENTRY
   630 000007D6 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   631                              <1>     ;Write CON
   632 000007DD 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   633 000007E2 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   634 000007E8 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   635 000007EC C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   636                              <1>     ;No EOF when reading from the device
   637 000007F0 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   637 000007F5 [44C00300]          <1>
   638 000007F9 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   639                              <1>     ;Ignore disk related fields and Date/Time of open
   640 000007FD 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   641                              <1>     ;11 chars in 8.3 name
   642 00000801 488D353A040000      <1>     lea rsi, conName
   643 00000808 B903000000          <1>     mov ecx, 3
   644 0000080D F3A4                <1>     rep movsb   ;Move the three bytes
   645 0000080F 4889D0              <1>     mov rax, rdx
   646 00000812 48AB                <1>     stosq   ;Eight spaces left to print
   647 00000814 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   647 00000819 [7BC30300]          <1>
   648 0000081D 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   649                              <1> ;GOTO NEXT ENTRY
   650 00000821 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   651                              <1> ;Write PRN
   652 00000828 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   653 0000082D 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   654 00000833 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   655 00000837 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   656                              <1>     ;Want EOF when reading from to the device
   657 0000083B 488B85[552D0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   658 00000842 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   659                              <1>     ;Ignore disk related fields and Date/Time of open
   660 00000846 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   661                              <1>     ;11 chars in 8.3 name
   662 0000084A 488D35F9030000      <1>     lea rsi, prnName
   663 00000851 B903000000          <1>     mov ecx, 3
   664 00000856 F3A4                <1>     rep movsb   ;Move the three bytes
   665 00000858 4889D0              <1>     mov rax, rdx
   666 0000085B 48AB                <1>     stosq   ;Eight spaces left to print
   667 0000085D 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   667 00000862 [7BC30300]          <1>
   668 00000866 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   669                              <1> ;Zero word 0 of entry 4 and 5
   670 0000086A 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   671 00000871 31C0                <1>     xor eax, eax
   672                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   673                              <1>     ; which is ok as these are empty entries, ready to be used)
   674 00000873 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   675 00000875 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   676 0000087C 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   677                              <1> ;------------------------------------------------;
   678                              <1> ;               Load CONFIG.SYS                  ;
   679                              <1> ;------------------------------------------------;
   680                              <1> ;------------------------------------------------;
   681                              <1> ;              Process CONFIG.SYS                ;
   682                              <1> ;------------------------------------------------;
   683                              <1> ;------------------------------------------------;
   684                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   685                              <1> ;------------------------------------------------;
   686                              <1> ;------------------------------------------------;
   687                              <1> ;   Setup Final Data Areas With Overrides from   ;
   688                              <1> ;                  CONFIG.SYS                    ;
   689                              <1> ;------------------------------------------------;
   690                              <1> ;------------------------------------------------;
   691                              <1> ;           Load Command interpreter             ;
   692                              <1> ;------------------------------------------------;
   693 0000087E 488D155C030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   694 00000885 B409                <1>     mov ah, 09h
   695 00000887 CD41                <1>     int 41h
   696                              <1> ;Resize DOS allocation before loading COMMAND.COM
   697 00000889 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   697 0000088E [24C00300]          <1>
   698 00000892 4981C010000000      <1>     add r8, mcb.program
   699 00000899 BB39110000          <1>     mov ebx, dynamicDataAreaLength
   700 0000089E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   701 000008A1 FFC3                <1>     inc ebx
   702 000008A3 B44A                <1>     mov ah, 4Ah
   703 000008A5 CD41                <1>     int 41h
   704                              <1>     
   705                              <1>     %if DEBUG && ALLOCTEST
   706                              <1> ;Test Allocation, Growth and Deallocation
   707                              <1>     mov r15, qword fs:[currentPSP]
   708                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   709                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   710                              <1>     mov ah, 48h ;Allocate
   711                              <1>     int 41h
   712                              <1> 
   713                              <1>     mov r8, rax ;Move the pointer to r8
   714                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   715                              <1>     mov ah, 4Ah
   716                              <1>     int 41h
   717                              <1> 
   718                              <1>     mov ah, 49h ;Free r8
   719                              <1>     int 41h
   720                              <1>     mov qword fs:[currentPSP], r15
   721                              <1>     %endif
   722                              <1> 
   723                              <1>     %if ENDSTATUS
   724                              <1> debugFinal:
   725                              <1>     ;Print system state
   726 000008A7 55                  <1>     push rbp    ;Only rbp really matters here
   727 000008A8 4989E8              <1>     mov r8, rbp
   728                              <1> 
   729 000008AB 488D2DD0020000      <1>     lea rbp, .msg2
   730 000008B2 4D8D88[12020000]    <1>     lea r9, qword [r8 + debPrintNullString]
   731 000008B9 41FFD1              <1>     call r9
   732                              <1> 
   733 000008BC 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   734 000008C3 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   734 000008C8 [08C00300]          <1>
   735                              <1> 
   736 000008CC 4D8D88[4D050000]    <1>     lea r9, qword [r8 + overlayQword]
   737 000008D3 41FFD1              <1>     call r9
   738                              <1> 
   739 000008D6 4881C31B000000      <1>     add rbx, 19+8
   740 000008DD 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   740 000008E2 [00C00300]          <1>
   741 000008E6 41FFD1              <1>     call r9
   742                              <1> 
   743 000008E9 4881C31B000000      <1>     add rbx, 19+8
   744 000008F0 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   744 000008F5 [24C00300]          <1>
   745 000008F9 41FFD1              <1>     call r9
   746                              <1> 
   747 000008FC 4881C31C000000      <1>     add rbx, 20+8
   748 00000903 4D8D88[0A050000]    <1>     lea r9, qword [r8 + overlayDword]
   749 0000090A 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   750 00000912 41FFD1              <1>     call r9
   751                              <1> 
   752 00000915 4881C312000000      <1>     add rbx, 10+8
   753 0000091C 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   754 00000924 41FFD1              <1>     call r9
   755                              <1> 
   756 00000927 4881C312000000      <1>     add rbx, 10+8
   757 0000092E 64488B0425-         <1>     mov rax, qword fs:[longMem]
   757 00000933 [1BC00300]          <1>
   758 00000937 4D8D88[4D050000]    <1>     lea r9, qword [r8 + overlayQword]
   759 0000093E 41FFD1              <1>     call r9
   760                              <1> 
   761 00000941 4881C31B000000      <1>     add rbx, 19+8
   762 00000948 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   762 0000094D [2CC00300]          <1>
   763 00000951 41FFD1              <1>     call r9
   764                              <1> 
   765 00000954 4881C31B000000      <1>     add rbx, 19+8
   766 0000095B 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   766 00000960 [34C00300]          <1>
   767 00000964 41FFD1              <1>     call r9
   768                              <1> 
   769 00000967 4881C31B000000      <1>     add rbx, 19+8
   770 0000096E 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   770 00000973 [4EC00300]          <1>
   771 00000977 41FFD1              <1>     call r9
   772                              <1> 
   773 0000097A 4881C31B000000      <1>     add rbx, 19+8
   774 00000981 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   774 00000986 [56C00300]          <1>
   775 0000098A 41FFD1              <1>     call r9
   776                              <1> 
   777 0000098D 4D8D88[98040000]    <1>     lea r9, qword [r8 + overlayByte]
   778                              <1> 
   779 00000994 4881C32C000000      <1>     add rbx, 25+19
   780 0000099B 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   780 000009A1 [68C00300]          <1>
   781 000009A5 41FFD1              <1>     call r9
   782                              <1> 
   783 000009A8 4881C31E000000      <1>     add rbx, 30
   784 000009AF 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   784 000009B5 [12C00300]          <1>
   785 000009B9 41FFD1              <1>     call r9
   786                              <1> 
   787 000009BC 4881C31E000000      <1>     add rbx, 30
   788 000009C3 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   788 000009C9 [11C00300]          <1>
   789 000009CD 41FFD1              <1>     call r9
   790                              <1> 
   791 000009D0 4881C310000000      <1>     add rbx, 16
   792 000009D7 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   792 000009DD [10C00300]          <1>
   793 000009E1 0441                <1>     add al, "A"
   794 000009E3 8803                <1>     mov byte [rbx], al
   795                              <1> 
   796 000009E5 488D2D10000000      <1>     lea rbp, .msg
   797 000009EC 4D8D88[12020000]    <1>     lea r9, qword [r8 + debPrintNullString]
   798 000009F3 41FFD1              <1>     call r9
   799 000009F6 5D                  <1>     pop rbp
   800 000009F7 E99E010000          <1>     jmp l1
   801 000009FC 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   801 00000A05 206261736520464646- <1>
   801 00000A0E 464646464646464646- <1>
   801 00000A17 46464646680A0D      <1>
   802 00000A1E 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   802 00000A27 464646464646464646- <1>
   802 00000A30 464646464646680A0D  <1>
   803 00000A39 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   803 00000A42 464646464646464646- <1>
   803 00000A4B 46464646464668200A- <1>
   803 00000A54 0D                  <1>
   804 00000A55 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   804 00000A5E 464646464646466820  <1>
   805 00000A67 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   805 00000A70 464646464646466820  <1>
   806 00000A79 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   806 00000A82 464646464646464646- <1>
   806 00000A8B 464646464646680A0D  <1>
   807 00000A94 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   807 00000A9D 464646464646464646- <1>
   807 00000AA6 464646464646680A0D  <1>
   808 00000AAF 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   808 00000AB8 464646464646464646- <1>
   808 00000AC1 464646464646680A0D  <1>
   809 00000ACA 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   809 00000AD3 464646464646464646- <1>
   809 00000ADC 464646464646680A0D  <1>
   810 00000AE5 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   810 00000AEE 464646464646464646- <1>
   810 00000AF7 464646464646680A0D  <1>
   811 00000B00 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   811 00000B09 204C6F676963616C20- <1>
   811 00000B12 447269766573204646- <1>
   811 00000B1B 680A0D              <1>
   812 00000B1E 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   812 00000B27 204669786564204472- <1>
   812 00000B30 697665732020204646- <1>
   812 00000B39 680A0D              <1>
   813 00000B3C 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   813 00000B45 2052656D6F7661626C- <1>
   813 00000B4E 652044727673204646- <1>
   813 00000B57 680A0D              <1>
   814 00000B5A 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   814 00000B63 65205A3A0A0D        <1>
   815 00000B69 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   815 00000B72 4F4D4D414E442E434F- <1>
   815 00000B7B 4D2E2E2E0A0D00      <1>
   816 00000B82 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   816 00000B8B 626F6F742073756D6D- <1>
   816 00000B94 6172790A0D00        <1>
   817                              <1>     %endif
   818                              <1> l1:
   819 00000B9A B402                <1>     mov ah, 02h
   820 00000B9C B20A                <1>     mov dl, 0Ah
   821 00000B9E CD41                <1>     int 41h
   822 00000BA0 B409                <1>     mov ah, 09h
   823 00000BA2 488D150F000000      <1>     lea rdx, .str
   824 00000BA9 CD41                <1>     int 41h
   825 00000BAB 488D15E0020000      <1>     lea rdx, tmpBuffer
   826 00000BB2 B40A                <1>     mov ah, 0Ah  ;Buffered input
   827 00000BB4 CD41                <1>     int 41h
   828 00000BB6 EBE2                <1>     jmp short l1
   829 00000BB8 433A5C3E24          <1> .str: db "C:\>$"
   830                              <1> ;l2:
   831                              <1> ;    mov ah, 07h
   832                              <1> ;    int 41h
   833                              <1> ;    cmp al, 42h
   834                              <1> ;    jne l1
   835                              <1> ;l3:
   836                              <1> ;    mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   837                              <1> ;    lea rbx, qword [rbp + secdReqHdr] ;Get the address of this request block
   838                              <1> ;    lea rax, qword [rbp + CLOCKrecrd]
   839                              <1> ;    mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   840                              <1> ;    mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   841                              <1> ;    mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   842                              <1> ;    mov qword [rbx + ioReqPkt.bufptr], rax
   843                              <1> ;    mov dword [rbx + ioReqPkt.tfrlen], 06
   844                              <1> ;    call qword [rbp + clkHdr + drvHdr.strPtr]
   845                              <1> ;    call qword [rbp + clkHdr + drvHdr.intPtr] 
   846                              <1> 
   847                              <1> ;    mov ah, 03h
   848                              <1> ;    xor bh, bh
   849                              <1> ;    int 30h
   850                              <1> ;    xor dl, dl  ;0 column
   851                              <1> ;    mov ah, 02h
   852                              <1> ;    int 30h
   853                              <1> 
   854                              <1> ;    lea rbx, qword [rbp + CLOCKrecrd]
   855                              <1> ;    movzx eax, byte [rbx + clkStruc.hours]
   856                              <1> ;    call .clkHexToBCD
   857                              <1> ;    mov ah, 0Eh
   858                              <1> ;    mov al, ":"
   859                              <1> ;    int 30h
   860                              <1> ;    movzx eax, byte [rbx + clkStruc.minutes]
   861                              <1> ;    call .clkHexToBCD
   862                              <1> ;    mov ah, 0Eh
   863                              <1> ;    mov al, ":"
   864                              <1> ;    int 30h
   865                              <1> ;    movzx eax, byte [rbx + clkStruc.seconds]
   866                              <1> ;    call .clkHexToBCD
   867                              <1> ;    mov ah, 0Eh
   868                              <1> ;    mov al, "."
   869                              <1> ;    int 30h
   870                              <1> ;    movzx eax, byte [rbx + clkStruc.hseconds]
   871                              <1> ;    call .clkHexToBCD
   872                              <1> ;    jmp l1
   873                              <1> ;.clkHexToBCD:
   874                              <1> ;Converts a Hex byte into two BCD digits
   875                              <1> ;Takes input in each nybble of al
   876                              <1> ;    push rbx
   877                              <1> ;    mov rbx, 0Ah  ;Divide by 10
   878                              <1> ;    xor edx, edx
   879                              <1> ;    div rbx
   880                              <1> ;    add dl, '0'
   881                              <1> ;    cmp dl, '9'
   882                              <1> ;    jbe .chtb0
   883                              <1> ;    add dl, 'A'-'0'-10
   884                              <1> ;.chtb0:
   885                              <1> ;    mov cl, dl    ;Save remainder byte
   886                              <1> ;    xor edx, edx
   887                              <1> ;    div rbx
   888                              <1> ;    add dl, '0'
   889                              <1> ;    cmp dl, '9'
   890                              <1> ;    jbe .chtb1
   891                              <1> ;    add dl, 'A'-'0'-10
   892                              <1> ;.chtb1:
   893                              <1> ;    mov ch, dl    ;Save remainder byte
   894                              <1> ;    mov al, ch    ;Get most sig digit into al
   895                              <1> ;    mov ah, 0Eh
   896                              <1> ;    int 30h
   897                              <1> ;    mov al, cl    ;Get least sig digit into al
   898                              <1> ;    mov ah, 0Eh
   899                              <1> ;    int 30h
   900                              <1> ;    pop rbx
   901                              <1> ;    ret
   902                              <1> ;--------------------------------
   903                              <1> ;       PROCS FOR SYSINIT       :
   904                              <1> ;--------------------------------
   905                              <1> adjustDrvHdr:
   906                              <1> ;Input: rsi = Effective address of driver in DOS segment
   907                              <1> ;       rbp = Ptr to the start of the DOS segment
   908                              <1> ;Output: rsi = EA of next header in DOS segment
   909 00000BBD 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   910 00000BC0 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   911 00000BC4 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   912 00000BC8 4881C622000000      <1>     add rsi, drvHdr_size
   913 00000BCF C3                  <1>     ret
   914                              <1> errorInit:
   915                              <1> ;If a critical error occurs during sysinit, fail through here
   916                              <1> ;Int 42h, 43h and 44h point here during sysinit
   917 00000BD0 488D2D3A000000      <1>     lea rbp, hltmsg
   918 00000BD7 B804130000          <1>     mov eax, 1304h
   919 00000BDC CD30                <1>     int 30h
   920                              <1>     ;cli ;Clear interrupts
   921                              <1>     ;mov al, -1
   922                              <1>     ;mov dx, 0A1h    ;PIC2 data
   923                              <1>     ;out dx, al      ;Mask all lines
   924                              <1>     ;mov dx, 21h     ;PIC1 data
   925                              <1>     ;out dx, al      ;Mask all lines
   926                              <1> .ei0:
   927 00000BDE F4                  <1>     hlt
   928 00000BDF EBFD                <1>     jmp short .ei0
   929                              <1> ;--------------------------------
   930                              <1> ;       DATA FOR SYSINIT        :
   931                              <1> ;--------------------------------
   932 00000BE1 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   932 00000BEA 5343502F444F532E2E- <1>
   932 00000BF3 2E0A0D24            <1>
   933 00000BF7 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   933 00000C00 6C6F636174696F6E20- <1>
   933 00000C09 4572726F720A0D00    <1>
   934 00000C11 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   934 00000C1A 7469616C6973696E67- <1>
   934 00000C23 20534350444F532E53- <1>
   934 00000C2C 59532E205379737465- <1>
   934 00000C35 6D2068616C74696E67- <1>
   934 00000C3E 2E2E2E00            <1>
   935 00000C42 434F4E00            <1> conName db "CON",0
   936 00000C46 41555800            <1> auxName db "AUX",0
   937 00000C4A 50524E00            <1> prnName db "PRN",0
   938                              <1> 
   939 00000C4E 003A5C4155544F4558- <1> aexec   db 0,":\AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC (with space for drvletter)
   939 00000C57 45432E42415400      <1>
   940 00000C5E 003A5C434F4E464947- <1> cfgspec db 0,":\CONFIG.SYS",0 ;ASCIIZ for CONFIG (with space for drive letter)
   940 00000C67 2E53595300          <1>
   941                              <1> 
   942                              <1> intData:
   943 00000C6C [A51F000000000000]  <1>     dq terminateProcess ;Int 40h
   944 00000C74 [6225000000000000]  <1>     dq functionDispatch ;Int 41h
   945 00000C7C [D00B000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   946 00000C84 [BA26000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   947 00000C8C [A820000000000000]  <1>     dq dosDefCritErrHdlr 
   948 00000C94 [7821000000000000]  <1>     dq absDiskRead      ;Int 45h
   949 00000C9C [5921000000000000]  <1>     dq absDiskWrite     ;Int 46h
   950 00000CA4 [A71F000000000000]  <1>     dq terminateRes     ;Int 47h
   951 00000CAC [BA26000000000000]  <1>     dq defaultIretq     ;Int 48h
   952 00000CB4 [BA26000000000000]  <1>     dq defaultIretq     ;Int 49h
   953 00000CBC [BA26000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   954 00000CC4 [BA26000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   955 00000CCC [BA26000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   956 00000CD4 [BA26000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   957 00000CDC [BA26000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   958 00000CE4 [5A2A000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   959                              <1> nData:
   960 00000CEC [112D000000000000]  <1>     dq conHdr
   961 00000CF4 0480                <1>     dw 08004h
   962 00000CF6 [B92E000000000000]  <1>     dq nulStrat
   963 00000CFE [BF2E000000000000]  <1>     dq nulIntr
   964 00000D06 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   965                              <1> 
   966                              <1> diskInit:
   967                              <1>     ;We create a function to deal with BPB parsing etc
   968                              <1>     ;Start with the first primary partition on each hard disk (until max)
   969                              <1>     ;   They dont have to be bootable
   970                              <1>     ;Then go back and look for other partitions partitions. 
   971                              <1>     ;   Add each other primary or logical ptn (until max)
   972                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   973                              <1>     ;Use r8 as device counter
   974 00000D0E 488DBD[BB360000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   975 00000D15 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   975 00000D1D 00                  <1>
   976 00000D1E 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   977 00000D24 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   977 00000D2D 00                  <1>
   978 00000D2E B280                <1>     mov dl, 80h ;Start with HDD 0
   979                              <1> .primary:
   980 00000D30 64803C25[68C00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
   980 00000D38 03                  <1>
   981 00000D39 0F84AB000000        <1>     je .remInit
   982 00000D3F 31C9                <1>     xor ecx, ecx    ;Sector 0
   983 00000D41 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   984 00000D46 0F8289000000        <1>     jc .primaryEpilog
   985                              <1>     ;Here, check MBR or BPB
   986 00000D4C 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   987 00000D55 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   988                              <1>     ;Now check if BPB or MBR
   989 00000D57 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   990 00000D59 8A6302              <1>     mov ah, byte [rbx + 2]
   991 00000D5C 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   992 00000D60 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   993                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   994                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   995 00000D62 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   996 00000D69 B104                <1>     mov cl, 4
   997                              <1> .checkPrimary:
   998 00000D6B 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   999 00000D6E 3C01                <1>     cmp al, 01
  1000 00000D70 7421                <1>     je .primaryFound
  1001 00000D72 3C04                <1>     cmp al, 04
  1002 00000D74 741D                <1>     je .primaryFound
  1003 00000D76 3C06                <1>     cmp al, 06
  1004 00000D78 7419                <1>     je .primaryFound
  1005 00000D7A 3C0B                <1>     cmp al, 0Bh
  1006 00000D7C 7415                <1>     je .primaryFound
  1007 00000D7E 3C0C                <1>     cmp al, 0Ch
  1008 00000D80 7411                <1>     je .primaryFound
  1009 00000D82 3C0E                <1>     cmp al, 0Eh
  1010 00000D84 740D                <1>     je .primaryFound
  1011 00000D86 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1012 00000D8D FEC9                <1>     dec cl
  1013 00000D8F 7444                <1>     jz .primaryEpilog
  1014 00000D91 EBD8                <1>     jmp short .checkPrimary
  1015                              <1> .primaryFound:
  1016                              <1>     ;Copy the first sector of this partition into memory
  1017 00000D93 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1018 00000D96 E8E9000000          <1>     call .initReadSector
  1019 00000D9B 7238                <1>     jc .primaryEpilog
  1020                              <1>     ;Now verify this is a BPB
  1021 00000D9D 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1022 00000D9F 8A6302              <1>     mov ah, byte [rbx + 2]
  1023 00000DA2 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1024 00000DA6 752D                <1>     jne .primaryEpilog   ;If not, skip
  1025                              <1>     ;Now copy data to internal tables
  1026 00000DA8 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1027 00000DAB B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1028 00000DB0 57                  <1>     push rdi
  1029 00000DB1 F348A5              <1>     rep movsq   ;Copy the BPB
  1030 00000DB4 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1031                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1032 00000DB5 4A8D9C05[89360000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1033                              <1>     ;Add device count to rbx to point to correct entry
  1034 00000DBD 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1035 00000DBF 4A8D9CC5[93360000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1036 00000DC7 488933              <1>     mov qword [rbx], rsi
  1037 00000DCA 49FFC0              <1>     inc r8  ;Goto next logical drive
  1038 00000DCD 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1039                              <1> .primaryEpilog:
  1040 00000DD5 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1041 00000DD7 88D6                <1>     mov dh, dl
  1042 00000DD9 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1043 00000DDC 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1044 00000DE4 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1045                              <1> .extended:
  1046                              <1> ;We have gone through all the devices once
  1047                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1048                              <1>     ;je .remInit ;If yes, get removable devices
  1049                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1050                              <1>     ;xor ecx, ecx    ;Get MBR back
  1051                              <1>     ;call .initReadSector
  1052                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1053                              <1> .remInit:
  1054                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1055 00000DEA 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1056 00000DED 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1057 00000DEF 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1058                              <1>     ;rdi points to the space for the subsequent bpb's
  1059                              <1> .removables:
  1060 00000DF2 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1061 00000DF4 E88B000000          <1>     call .initReadSector
  1062 00000DF9 7238                <1>     jc .removableEpilogue   ;Goto next device
  1063                              <1>     ;Now verify this is a BPB
  1064 00000DFB 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1065 00000DFD 8A6302              <1>     mov ah, byte [rbx + 2]
  1066 00000E00 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1067 00000E04 752D                <1>     jne .removableEpilogue   ;If not, skip
  1068                              <1>     ;Now copy data to internal tables
  1069 00000E06 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1070 00000E09 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1071 00000E0E 57                  <1>     push rdi
  1072 00000E0F F348A5              <1>     rep movsq   ;Copy the BPB
  1073 00000E12 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1074                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1075 00000E13 4A8D9C05[89360000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1076                              <1>     ;Add device count to rbx to point to correct entry
  1077 00000E1B 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1078 00000E1D 4A8D9CC5[93360000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1079 00000E25 488933              <1>     mov qword [rbx], rsi
  1080 00000E28 49FFC0              <1>     inc r8  ;Goto next logical drive
  1081 00000E2B 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1082                              <1> .removableEpilogue:
  1083 00000E33 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1084 00000E35 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1085 00000E3D 7412                <1>     je .end
  1086 00000E3F 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1087 00000E46 7403                <1>     je .re0
  1088 00000E48 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1089                              <1> .re0:
  1090 00000E4B 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1091 00000E4F 72A1                <1>     jb .removables
  1092                              <1> .end:
  1093 00000E51 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1093 00000E59 01                  <1>
  1094 00000E5A 7401                <1>     je .singleRemDev
  1095 00000E5C C3                  <1>     ret
  1096                              <1> .singleRemDev:
  1097                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1098 00000E5D 488D9D[89360000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1099 00000E64 8A95[89360000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1100 00000E6A 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1101 00000E6D 488D9D[93360000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1102 00000E74 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1103 00000E77 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1104 00000E7B 64FE0425[68C00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1105 00000E83 C3                  <1>     ret
  1106                              <1> .initReadSector:
  1107                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1108 00000E84 B482                <1>     mov ah, 82h ;Read
  1109 00000E86 B001                <1>     mov al, 1   ;One sector
  1110 00000E88 488D9D[39010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1111 00000E8F CD33                <1>     int 33h
  1112 00000E91 C3                  <1>     ret
  1113 00000E92 800000000000000000- <1> tmpBuffer db 80h, 00h, (80h-2) dup (00)
  1113 00000E9B 000000000000000000- <1>
  1113 00000EA4 000000000000000000- <1>
  1113 00000EAD 000000000000000000- <1>
  1113 00000EB6 000000000000000000- <1>
  1113 00000EBF 000000000000000000- <1>
  1113 00000EC8 000000000000000000- <1>
  1113 00000ED1 000000000000000000- <1>
  1113 00000EDA 000000000000000000- <1>
  1113 00000EE3 000000000000000000- <1>
  1113 00000EEC 000000000000000000- <1>
  1113 00000EF5 000000000000000000- <1>
  1113 00000EFE 000000000000000000- <1>
  1113 00000F07 000000000000000000- <1>
  1113 00000F10 0000                <1>
    14                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    15                                  %include "./Source/BSS/dosSeg.asm"
    16                              <1> ;This file contains the main DOS data segment
    17                              <1> dosAPT: ;Additional Page tables
    18 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    19                              <1> dosDataArea:
    20 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    21 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    22 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    23 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    24 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    25 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    26 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    27 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    28                              <1> ;Above is the system stats
    29                              <1> ;Below is the DOS vars
    30 0003C023 ??                  <1>     vConOutOff  resb 1    ;Offset in output buffer to the next char to output
    31                              <1>     ;   A value of 0 means no chars buffered.
    32 0003C024 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    33                              <1> sysVarsPtr:
    34 0003C02C ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    35 0003C034 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    36 0003C03C ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    37                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    38 0003C044 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    39                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    40 0003C04C ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    41 0003C04E ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    42 0003C056 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    43 0003C05E ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    44 0003C066 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    45                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    46 0003C068 ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    47 0003C069 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    48 0003C06A ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    49 0003C06B ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    50 0003C06C <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    51                              <1> ;Additional internal variables
    52                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    53 0003C08E ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    54 0003C08F ????                <1>     numFiles    resw 1    ;FILES=5 default
    55 0003C091 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    56                              <1> ;Create SFT header and corresponding array of five default sft entries
    57 0003C093 <res Ah>            <1>     firstSftHeader  resb sfth_size
    58 0003C09D <res 4Fh>           <1>     firstSft    resb sft_size
    59 0003C0EC <res 4Fh>           <1>     secondSft   resb sft_size
    60 0003C13B <res 4Fh>           <1>     thirdSft    resb sft_size
    61 0003C18A <res 4Fh>           <1>     fourthSft   resb sft_size
    62 0003C1D9 <res 4Fh>           <1>     fifthSft    resb sft_size
    63                              <1> 
    64                              <1> ;Virtual CONsole Buffers
    65 0003C228 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    66                              <1>     ;Only incremented when CON device runs vCon
    67                              <1> vConBuf:    ;Proper buffer symbol
    68 0003C229 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    69 0003C22A <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    70                              <1>     ;Only 128 if also taking input and outputting simultaneously
    71 0003C2AA <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    72 0003C32A ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    73                              <1> 
    74 0003C32B ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    75 0003C32C ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76 0003C32D ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    77 0003C32E ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    78                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    79                              <1> 
    80 0003C32F ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    81                              <1> ;Server stuff. Default to all zeros (blank)
    82 0003C330 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    83                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    84 0003C331 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    85 0003C332 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    86                              <1> ;Swappable Data Area
    87 0003C342 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    88 0003C362 ??                  <1>                 resb 1  ;Alignment byte
    89                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    90 0003C363 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    91 0003C364 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    92 0003C365 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    93 0003C366 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    94 0003C367 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    95 0003C369 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    96 0003C36A ??                  <1>     errorClass  resb 1  ;Error Class
    97 0003C36B ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    98 0003C373 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    99 0003C37B ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   100                              <1> 
   101 0003C383 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   102 0003C38B ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   103 0003C38D ??                  <1>     currentDrv  resb 1  ;Default drive x
   104 0003C38E ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   105                              <1> ;SDA, needs to be replaced between processes
   106                              <1> sdaMainSwap:
   107 0003C38F ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   108 0003C397 ????????????????    <1>     sharePSP    resq 1  ;PSP of the share program
   109 0003C39F ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   110 0003C3A1 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   111 0003C3A9 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   112 0003C3B1 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   113                              <1> 
   114 0003C3B9 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   115 0003C3C1 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   116 0003C3C2 ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   117                              <1> 
   118 0003C3C3 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   119 0003C3CB ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   120 0003C3D3 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   121 0003C3DB ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   122 0003C3E3 ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   123                              <1> ;The below flag tells DOS to print ^C in the termination function
   124 0003C3E4 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   125                              <1> 
   126                              <1> ;Time stuff
   127 0003C3E5 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   128 0003C3E6 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   129 0003C3E7 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   130 0003C3E8 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   131 0003C3EA ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   132                              <1> 
   133 0003C3EB ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   134 0003C3EC ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   135 0003C3ED ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   136                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   137                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   138                              <1> ; without forcing to re-build the whole primary request block.
   139                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   140                              <1> ; with secondary char output going through the secondary header
   141                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   142                              <1> ; for output)
   143                              <1> ;ioReqPkt is the largest possible packet
   144 0003C3EE <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   145 0003C418 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   146 0003C442 <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   147                              <1> 
   148                              <1> ;Swappable Buffers
   149 0003C46C <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   150 0003C4EC <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   151 0003C56C ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   152                              <1>     ;We add an additional byte to save ah too
   153 0003C572 ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   154                              <1> ;Misc bookkeeping flags and vars
   155                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   156 0003C574 ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   157 0003C575 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   158 0003C576 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   159 0003C577 ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   160 0003C578 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   161 0003C579 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   162                              <1> 
   163 0003C57A ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   164                              <1> 
   165 0003C57B ??                  <1>     workingDrv  resb 1  ;Working drive number
   166                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   167                              <1> workingDD:  ;Create a symbol for the working device driver too
   168 0003C57C ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   169 0003C584 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   170                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   171                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   172 0003C58C ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   173 0003C594 <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   174 0003C5EF ????????????????    <1>     curJFTNum   resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   175 0003C5F7 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   176 0003C5FF ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   177 0003C601 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   178                              <1> ;Temp vars, used when walking FAT or changing sectors
   179 0003C609 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   180 0003C611 ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   181                              <1> ;***************************************************|
   182                              <1> ; Needs to be set up before any file access         |
   183                              <1> ; These vars keep track of file access properties   |
   184                              <1> ;   and must be used only for such purposes.        |
   185                              <1> ;***************************************************|
   186 0003C613 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   187 0003C617 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   188                              <1> 
   189 0003C61B ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   190                              <1> 
   191 0003C61C ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   192 0003C620 ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   193 0003C621 ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   194                              <1> 
   195 0003C629 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   196 0003C62B ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   197                              <1> ;***************************************************|
   198 0003C62F ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   199 0003C633 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   200 0003C637 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   201 0003C63B ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   202 0003C63F ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   203                              <1> ;Directory stuff
   204 0003C643 ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   205 0003C647 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   206 0003C64B ??                  <1>     dirSect     resb 1  ;Sector of current directory
   207 0003C64C ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   208                              <1> ;Error DPB 
   209 0003C64D ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   210                              <1>     
   211                              <1> ;Stacks and scratch SFT
   212 0003C655 <res 528h>          <1>     critStack   resq 165
   213 0003CB7D ????????????????    <1>     critStakTop resq 1
   214                              <1> 
   215 0003CB85 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   216                              <1> 
   217 0003CBD4 <res 638h>          <1>     AuxStack    resq 199
   218 0003D20C ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   219 0003D214 <res 638h>          <1>     DiskStack   resq 199
   220 0003D84C ????????????????    <1>     DiskStakTop resq 1
   221                              <1> 
   222 0003D854 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   223 0003D855 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   224                              <1>     sdaLen      equ     $ - sda 
   225                              <1>     sdaMSLen    equ     $ - sda
   226                              <1> 
   227                              <1> ;Additional variables NOT in the SDA
   228 0003D856 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   229                              <1>     ;for saving the current header when quickly doing a second request
   230                              <1> 
   231                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   232                              <1> inExtASCII:
   233 0003D880 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   234 0003D881 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   235                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   236                              <1>     ; copy of the date/time record
   237                              <1>     dSegLen     equ     $
    16                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    17                                  %define currSegVBase section.resSeg.vstart
    18                                  %include "./Source/Data/staticData.asm"
    19                              <1> 
    20                              <1> ;-----------------------------------:
    21                              <1> ;       Static Data Variables       :
    22                              <1> ;-----------------------------------:
    23 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    24 00000001 01                  <1> dosMinor    db 01h      ;.01
    25 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    25 0000000B 535953              <1>
    26 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    26 00000017 535953              <1>
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;        Static Data Tables         :
    30                              <1> ;-----------------------------------:
    31                              <1> 
    32                              <1> ;IO Char table
    33                              <1> ;This table has Request header length, command code and error flags
    34                              <1> ; as a packed DWORD entry
    35                              <1> ioRqCmdErrTbl:
    36                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    37                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    38 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    39 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    40 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    41 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    42 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    43 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    44                              <1> 
    45                              <1> 
    46                              <1> 
    47                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    48                              <1> ; wish to install their own custom logic.
    49 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    50 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    51 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    52                              <1> ;Extended ASCII keys with special meanings
    53 0000003C 3B                  <1> extKeyTbl   db eF1
    54 0000003D 3F13                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    55 0000003F 3C                  <1>             db eF2
    56 00000040 3113                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    57 00000042 3D                  <1>             db eF3
    58 00000043 3813                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    59 00000045 3E                  <1>             db eF4
    60 00000046 6D13                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    61 00000048 3F                  <1>             db eF5
    62 00000049 B213                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    63 0000004B 40                  <1>             db eF6
    64 0000004C C813                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    65 0000004E 41                  <1>             db eF7
    66 0000004F CF13                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    67 00000051 4B                  <1>             db eCursL
    68 00000052 9612                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    69 00000054 4D                  <1>             db eCursR
    70 00000055 3F13                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    71 00000057 52                  <1>             db eIns
    72 00000058 DA13                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    73 0000005A 53                  <1>             db eDel
    74 0000005B E113                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    75                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    76                              <1> 
    77                              <1> ;When counting the number of days, first compute the number of years since
    78                              <1> ; 1980 and your year. 
    79                              <1> ;Then, using the table below, find the number of leap years between 1980
    80                              <1> ; and (YourYear - 1). 
    81                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    82                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    83                              <1> ;
    84                              <1> ;Use the months table to get the number of days in a normal month as leap 
    85                              <1> ; years are added using the previous comment.
    86                              <1> 
    87                              <1> ;This table is the number of days in the month
    88                              <1> ;The function which updates the days in Feb writes the number to this table
    89                              <1> monthsTbl:  
    90 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    90 00000066 1F1E1F              <1>
    19                                  %include "./Source/Data/dispTbl.asm"
    20                              <1> ;Kernel Dispatch Function Table
    21                              <1> 
    22                              <1> kDispTbl:
    23 00000069 401F                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    24 0000006B 0D0D                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    25 0000006D 1A0D                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    26 0000006F D70D                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    27 00000071 000E                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    28 00000073 080E                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    29 00000075 200E                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    30 00000077 530E                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    31 00000079 780E                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    32 0000007B D70E                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    33 0000007D 8211                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    34 0000007F E60E                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    35 00000081 F20E                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    36 00000083 F426                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    37 00000085 1527                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    38 00000087 3F15                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    39 00000089 3F15                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    40 0000008B 3F15                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    41 0000008D 3F15                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    42 0000008F 3F15                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    43 00000091 3F15                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    44 00000093 3F15                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    45 00000095 3F15                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    46 00000097 3F15                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    47 00000099 F029                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    48 0000009B 2E27                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    49 0000009D 4015                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    50 0000009F 3527                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    51 000000A1 3727                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    52 000000A3 F029                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    53 000000A5 F029                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    54 000000A7 F227                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    55 000000A9 F029                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    56 000000AB 5315                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    57 000000AD 5315                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    58 000000AF 5315                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    59 000000B1 5315                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    60 000000B3 A127                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    61 000000B5 CE27                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    62 000000B7 5315                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    63 000000B9 5315                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    64 000000BB 5315                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    65 000000BD F813                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    66 000000BF 2414                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    67 000000C1 2414                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    68 000000C3 4514                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    69 000000C5 CF27                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    70 000000C7 5415                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    71 000000C9 DD27                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    72 000000CB 411F                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    73 000000CD F427                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    74 000000CF A926                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    75 000000D1 3A28                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    76 000000D3 4B28                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    77 000000D5 6028                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    78 000000D7 441F                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    79 000000D9 441F                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    80 000000DB A108                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    81 000000DD A108                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    82 000000DF A108                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    83 000000E1 6715                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    84 000000E3 6815                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    85 000000E5 6915                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    86 000000E7 6A15                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    87 000000E9 A315                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    88 000000EB AF15                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    89 000000ED B015                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    90 000000EF 3216                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    91 000000F1 3216                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    92 000000F3 3216                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    93 000000F5 3216                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    94 000000F7 A108                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    95 000000F9 3519                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    96 000000FB 521B                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    97 000000FD 7B1C                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    98 000000FF 421F                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    99 00000101 431F                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   100 00000103 C928                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   101 00000105 3216                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   102 00000107 3216                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   103 00000109 D726                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   104 0000010B E026                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   105 0000010D DB28                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   106 0000010F EC28                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   107 00000111 BE29                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   108 00000113 C529                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   109 00000115 3216                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   110 00000117 A108                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   111 00000119 2C1E                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   112 0000011B C629                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   113 0000011D 3216                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   114 0000011F 3216                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   115 00000121 3216                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   116 00000123 EF29                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   117 00000125 EF29                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   118 00000127 EF29                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   119 00000129 A108                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   120 0000012B F029                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   121 0000012D E926                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   122 0000012F F029                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   123 00000131 F226                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   124 00000133 441F                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   125 00000135 441F                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   126 00000137 3216                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   127 00000139 3216                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   128 0000013B F029                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   129                              <1> kDispTblL  equ $ - kDispTbl 
   130                              <1> 
   131                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   132 0000013D 3E29                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   133                              <1> mDispTblL   equ     $ - mDispTbl
    20                                  %include "./Source/Debug/debug.asm"
    21                              <1> ;This file contains debugging macros, procs and strings
    22                              <1> ; that we can use to output to COM1 bypassing the operating system.
    23                              <1> ;A serial terminal must be connected for this to work.
    24                              <1> 
    25                              <1> ;Variables and equates
    26                              <1> 
    27 0000013F 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    28                              <1> 
    29 00000147 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    29 00000150 39414243444546      <1>
    30                              <1> ;Common procedures
    31                              <1> debMakeDebuggerRespond:
    32 00000157 488D2D26000000      <1>     lea rbp, .msg
    33 0000015E E8AF000000          <1>     call debPrintNullString
    34 00000163 B900001000          <1>     mov ecx, 100000h
    35                              <1> .waiting:
    36 00000168 FFC9                <1>     dec ecx
    37 0000016A 740C                <1>     jz .timeout
    38 0000016C B402                <1>     mov ah, 02h ;Blocking recieve!
    39 0000016E 31D2                <1>     xor edx, edx
    40 00000170 CD34                <1>     int 34h
    41 00000172 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    42 00000175 75F1                <1>     jnz .waiting
    43 00000177 C3                  <1>     ret
    44                              <1> .timeout:
    45 00000178 488D2D47000000      <1>     lea rbp, .msg2
    46 0000017F E98E000000          <1>     jmp debPrintNullString
    47 00000184 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    47 0000018D 6B6579206174207468- <1>
    47 00000196 65207465726D696E61- <1>
    47 0000019F 6C20746F20636F6E74- <1>
    47 000001A8 696E7565206F722077- <1>
    47 000001B1 61697420666F722074- <1>
    47 000001BA 696D656F75742E2E2E- <1>
    47 000001C3 0A0D00              <1>
    48 000001C6 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    48 000001CF 436F6E74696E75696E- <1>
    48 000001D8 672E2E2E0A0D00      <1>
    49                              <1> debPrintHexByte:
    50                              <1> ;Print the hex byte in al as a hex value
    51 000001DF 52                  <1>     push rdx
    52 000001E0 53                  <1>     push rbx
    53 000001E1 50                  <1>     push rax
    54                              <1> 
    55 000001E2 88C2                <1>     mov dl, al           ;save byte in dl
    56 000001E4 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    57 000001E8 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    58 000001ED 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    59 000001F1 E80C000000          <1>     call .wrchar
    60 000001F6 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    61 000001F9 E804000000          <1>     call .wrchar
    62                              <1> 
    63 000001FE 58                  <1>     pop rax
    64 000001FF 5B                  <1>     pop rbx
    65 00000200 5A                  <1>     pop rdx
    66 00000201 C3                  <1>     ret
    67                              <1> .wrchar:
    68 00000202 6687DB              <1>     xchg bx, bx
    69 00000205 488D1D3BFFFFFF      <1>     lea rbx, debascii
    70 0000020C D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    71 0000020D B401                <1>     mov ah, 01h
    72 0000020F CD34                <1>     int 34h  ;print char
    73 00000211 C3                  <1>     ret
    74                              <1> 
    75                              <1> debPrintNullString:
    76                              <1> ;Print a null terminated string pointed to by rbp
    77 00000212 56                  <1>     push rsi
    78 00000213 50                  <1>     push rax
    79 00000214 52                  <1>     push rdx
    80 00000215 31D2                <1>     xor edx, edx    ;Select COM1
    81 00000217 4889EE              <1>     mov rsi, rbp
    82                              <1> .getChar:
    83 0000021A AC                  <1>     lodsb
    84 0000021B 84C0                <1>     test al, al
    85 0000021D 7406                <1>     jz .exit
    86 0000021F B401                <1>     mov ah, 01h
    87 00000221 CD34                <1>     int 34h
    88 00000223 EBF5                <1>     jmp short .getChar
    89                              <1> .exit:
    90 00000225 5A                  <1>     pop rdx
    91 00000226 58                  <1>     pop rax
    92 00000227 5E                  <1>     pop rsi
    93 00000228 C3                  <1>     ret
    94                              <1> 
    95                              <1> debPrintDOSStack:
    96                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    97                              <1> ;Shows me which function, and parameters passed and returned
    98 00000229 488D2DA5010000      <1>     lea rbp, .a1
    99 00000230 E8DDFFFFFF          <1>     call debPrintNullString
   100 00000235 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   101 0000023C 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   102 00000243 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   103 00000246 E802030000          <1>     call overlayQword
   104 0000024B 4881C316000000      <1>     add rbx, 22
   105 00000252 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   106 00000256 E8F2020000          <1>     call overlayQword
   107 0000025B 4881C316000000      <1>     add rbx, 22
   108 00000262 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   109 00000266 E8E2020000          <1>     call overlayQword
   110 0000026B 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   111 00000272 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   112 00000276 E8D2020000          <1>     call overlayQword
   113 0000027B 4881C316000000      <1>     add rbx, 22 
   114 00000282 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   115 00000286 E8C2020000          <1>     call overlayQword
   116 0000028B 4881C316000000      <1>     add rbx, 22
   117 00000292 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   118 00000296 E8B2020000          <1>     call overlayQword
   119 0000029B 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   120 000002A2 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   121 000002A6 E8A2020000          <1>     call overlayQword
   122 000002AB 4881C316000000      <1>     add rbx, 22
   123 000002B2 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
   124 000002B9 480560000000        <1>     add rax, callerFrame_size
   125 000002BF E889020000          <1>     call overlayQword
   126 000002C4 4881C316000000      <1>     add rbx, 22
   127 000002CB 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   128 000002CF E879020000          <1>     call overlayQword
   129 000002D4 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   130 000002DB 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   131 000002DF E869020000          <1>     call overlayQword
   132 000002E4 488D2D06000000      <1>     lea rbp, .a0
   133 000002EB E822FFFFFF          <1>     call debPrintNullString
   134 000002F0 C3                  <1>     ret
   135                              <1> 
   136 000002F1 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   136 000002FA 303030303030303030- <1>
   136 00000303 30306820            <1>
   137 00000307 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   137 00000310 303030303030303030- <1>
   137 00000319 30306820            <1>
   138 0000031D 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   138 00000326 303030303030303030- <1>
   138 0000032F 30306820            <1>
   139 00000333 0A0D                <1>     db  0Ah,0Dh
   140 00000335 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   140 0000033E 303030303030303030- <1>
   140 00000347 30306820            <1>
   141 0000034B 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   141 00000354 303030303030303030- <1>
   141 0000035D 30306820            <1>
   142 00000361 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   142 0000036A 303030303030303030- <1>
   142 00000373 30306820            <1>
   143 00000377 0A0D                <1>     db 0Ah, 0Dh
   144 00000379 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   144 00000382 303030303030303030- <1>
   144 0000038B 30306820            <1>
   145 0000038F 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   145 00000398 303030303030303030- <1>
   145 000003A1 30306820            <1>
   146 000003A5 7269703D3030303030- <1>     db "rip=0000000000000000h"
   146 000003AE 303030303030303030- <1>
   146 000003B7 303068              <1>
   147 000003BA 0A0D                <1>     db 0Ah, 0Dh
   148 000003BC 666C673D3030303030- <1>     db "flg=0000000000000000h "
   148 000003C5 303030303030303030- <1>
   148 000003CE 30306820            <1>
   149 000003D2 0A0D00              <1>     db 0Ah,0Dh,0
   150 000003D5 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   150 000003DE 206F6E20496E742034- <1>
   150 000003E7 316820737461636B0A- <1>
   150 000003F0 0D00                <1>
   151                              <1> 
   152                              <1> debDPBptr:
   153                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   154 000003F2 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   155 000003F9 4889E8              <1>     mov rax, rbp
   156 000003FC E84C010000          <1>     call overlayQword
   157 00000401 488D2D06000000      <1>     lea rbp, .dpb
   158 00000408 E805FEFFFF          <1>     call debPrintNullString
   159 0000040D C3                  <1>     ret
   160                              <1> .dpb: 
   161 0000040E 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   161 00000417 203030303030303030- <1>
   161 00000420 303030303030303068- <1>
   161 00000429 200A0D00            <1>
   162                              <1> 
   163                              <1> debDPBBPBptr:
   164                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   165                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   166 0000042D 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   167 00000434 4889E8              <1>     mov rax, rbp
   168 00000437 E811010000          <1>     call overlayQword
   169 0000043C 4881C321000000      <1>     add rbx, 33
   170 00000443 4889F0              <1>     mov rax, rsi
   171 00000446 E802010000          <1>     call overlayQword
   172 0000044B 488D2D06000000      <1>     lea rbp, .dpb
   173 00000452 E8BBFDFFFF          <1>     call debPrintNullString
   174 00000457 C3                  <1>     ret
   175                              <1> .dpb: 
   176 00000458 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   176 00000461 203030303030303030- <1>
   176 0000046A 303030303030303068- <1>
   176 00000473 2066726F6D20        <1>
   177 00000479 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   177 00000482 203030303030303030- <1>
   177 0000048B 303030303030303068- <1>
   177 00000494 200A0D00            <1>
   178                              <1> overlayByte:
   179                              <1>     ;Called with number in rax
   180                              <1>     ;pointer to START of 16 byte space for number in rbx
   181 00000498 53                  <1>     push rbx
   182 00000499 51                  <1>     push rcx
   183 0000049A 52                  <1>     push rdx
   184 0000049B 55                  <1>     push rbp
   185 0000049C 4889DD              <1>     mov rbp, rbx
   186 0000049F 4889C2              <1>     mov rdx, rax
   187 000004A2 48FFC5              <1>     inc rbp ;Go to end of number
   188                              <1> 
   189 000004A5 488D1D9BFCFFFF      <1>     lea rbx, debascii
   190 000004AC 88D0                <1>     mov al, dl  ;Go low nybble first
   191 000004AE 240F                <1>     and al, 0Fh
   192 000004B0 D7                  <1>     xlatb
   193 000004B1 884500              <1>     mov byte [rbp], al
   194 000004B4 48FFCD              <1>     dec rbp ;Go down one char pos
   195 000004B7 88D0                <1>     mov al, dl
   196 000004B9 24F0                <1>     and al, 0F0h    ;Hi nybble next
   197 000004BB C0E804              <1>     shr al, 4   ;Shift hi nybble low
   198 000004BE D7                  <1>     xlatb
   199 000004BF 884500              <1>     mov byte [rbp], al  ;Store char
   200                              <1> 
   201 000004C2 5D                  <1>     pop rbp
   202 000004C3 5A                  <1>     pop rdx
   203 000004C4 59                  <1>     pop rcx
   204 000004C5 5B                  <1>     pop rbx
   205 000004C6 C3                  <1>     ret
   206                              <1> 
   207                              <1> overlayWord:
   208                              <1>     ;Called with number in rax
   209                              <1>     ;pointer to START of 16 byte space for number in rbx
   210 000004C7 53                  <1>     push rbx
   211 000004C8 51                  <1>     push rcx
   212 000004C9 52                  <1>     push rdx
   213 000004CA 55                  <1>     push rbp
   214 000004CB 4889DD              <1>     mov rbp, rbx
   215 000004CE 4889C2              <1>     mov rdx, rax
   216 000004D1 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   217 000004D8 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   218 000004DD 488D1D63FCFFFF      <1>     lea rbx, debascii
   219                              <1> .ow0:
   220 000004E4 88D0                <1>     mov al, dl  ;Go low nybble first
   221 000004E6 240F                <1>     and al, 0Fh
   222 000004E8 D7                  <1>     xlatb
   223 000004E9 884500              <1>     mov byte [rbp], al
   224 000004EC 48FFCD              <1>     dec rbp ;Go down one char pos
   225 000004EF 88D0                <1>     mov al, dl
   226 000004F1 24F0                <1>     and al, 0F0h    ;Hi nybble next
   227 000004F3 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   228 000004F6 D7                  <1>     xlatb
   229 000004F7 884500              <1>     mov byte [rbp], al  ;Store char
   230 000004FA 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   231 000004FE 48FFCD              <1>     dec rbp
   232 00000501 FFC9                <1>     dec ecx
   233 00000503 75DF                <1>     jnz .ow0
   234 00000505 5D                  <1>     pop rbp
   235 00000506 5A                  <1>     pop rdx
   236 00000507 59                  <1>     pop rcx
   237 00000508 5B                  <1>     pop rbx
   238 00000509 C3                  <1>     ret
   239                              <1> 
   240                              <1> overlayDword:
   241                              <1>     ;Called with number in rax
   242                              <1>     ;pointer to START of 16 byte space for number in rbx
   243 0000050A 53                  <1>     push rbx
   244 0000050B 51                  <1>     push rcx
   245 0000050C 52                  <1>     push rdx
   246 0000050D 55                  <1>     push rbp
   247 0000050E 4889DD              <1>     mov rbp, rbx
   248 00000511 4889C2              <1>     mov rdx, rax
   249 00000514 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   250 0000051B B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   251 00000520 488D1D20FCFFFF      <1>     lea rbx, debascii
   252                              <1> .od0:
   253 00000527 88D0                <1>     mov al, dl  ;Go low nybble first
   254 00000529 240F                <1>     and al, 0Fh
   255 0000052B D7                  <1>     xlatb
   256 0000052C 884500              <1>     mov byte [rbp], al
   257 0000052F 48FFCD              <1>     dec rbp ;Go down one char pos
   258 00000532 88D0                <1>     mov al, dl
   259 00000534 24F0                <1>     and al, 0F0h    ;Hi nybble next
   260 00000536 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   261 00000539 D7                  <1>     xlatb
   262 0000053A 884500              <1>     mov byte [rbp], al  ;Store char
   263 0000053D 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   264 00000541 48FFCD              <1>     dec rbp
   265 00000544 FFC9                <1>     dec ecx
   266 00000546 75DF                <1>     jnz .od0
   267 00000548 5D                  <1>     pop rbp
   268 00000549 5A                  <1>     pop rdx
   269 0000054A 59                  <1>     pop rcx
   270 0000054B 5B                  <1>     pop rbx
   271 0000054C C3                  <1>     ret
   272                              <1> 
   273                              <1> overlayQword:
   274                              <1>     ;Called with number in rax
   275                              <1>     ;pointer to START of 16 byte space for number in rbx
   276 0000054D 53                  <1>     push rbx
   277 0000054E 51                  <1>     push rcx
   278 0000054F 52                  <1>     push rdx
   279 00000550 55                  <1>     push rbp
   280 00000551 4889DD              <1>     mov rbp, rbx
   281 00000554 4889C2              <1>     mov rdx, rax
   282 00000557 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   283 0000055E B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   284 00000563 488D1DDDFBFFFF      <1>     lea rbx, debascii
   285                              <1> .oq0:
   286 0000056A 88D0                <1>     mov al, dl  ;Go low nybble first
   287 0000056C 240F                <1>     and al, 0Fh
   288 0000056E D7                  <1>     xlatb
   289 0000056F 884500              <1>     mov byte [rbp], al
   290 00000572 48FFCD              <1>     dec rbp ;Go down one char pos
   291 00000575 88D0                <1>     mov al, dl
   292 00000577 24F0                <1>     and al, 0F0h    ;Hi nybble next
   293 00000579 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   294 0000057C D7                  <1>     xlatb
   295 0000057D 884500              <1>     mov byte [rbp], al  ;Store char
   296 00000580 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   297 00000584 48FFCD              <1>     dec rbp
   298 00000587 FFC9                <1>     dec ecx
   299 00000589 75DF                <1>     jnz .oq0
   300 0000058B 5D                  <1>     pop rbp
   301 0000058C 5A                  <1>     pop rdx
   302 0000058D 59                  <1>     pop rcx
   303 0000058E 5B                  <1>     pop rbx
   304 0000058F C3                  <1>     ret
   305                              <1> 
   306                              <1> debPrintFunctionName:
   307                              <1> ;Prints the DOS function that has been entered
   308                              <1> ;Entered with ah = Function number
   309 00000590 88E0                <1>     mov al, ah  ;Get dos function number
   310 00000592 488D1DAEFBFFFF      <1>     lea rbx, debascii
   311 00000599 488D1535000000      <1>     lea rdx, .number
   312 000005A0 24F0                <1>     and al, 0F0h    ;Get high nybble first
   313 000005A2 C0E804              <1>     shr al, 4
   314 000005A5 D7                  <1>     xlatb
   315 000005A6 8802                <1>     mov byte [rdx], al
   316 000005A8 88E0                <1>     mov al, ah
   317 000005AA 240F                <1>     and al, 0Fh
   318 000005AC D7                  <1>     xlatb
   319 000005AD 884201              <1>     mov byte [rdx + 1], al
   320 000005B0 488D2D06000000      <1>     lea rbp, .dosString
   321 000005B7 E856FCFFFF          <1>     call debPrintNullString
   322 000005BC C3                  <1>     ret
   323 000005BD 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   323 000005C6 696F6E20496E742034- <1>
   323 000005CF 31682F41483D        <1>
   324 000005D5 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   325                              <1> 
   326                              <1> ;----------------:
   327                              <1> ;!!!! MACROS !!!!:
   328                              <1> ;----------------:
   329                              <1> ;Insert macro when entering a debug block
   330                              <1> %macro debugEnterM 0
   331                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   332                              <1>     mov rsp, debStackTop
   333                              <1> ;Push all registers except rsp on stack
   334                              <1>     push rax
   335                              <1>     push rbx
   336                              <1>     push rcx
   337                              <1>     push rdx
   338                              <1>     push rsi
   339                              <1>     push rdi
   340                              <1>     push rbp
   341                              <1>     push r8
   342                              <1>     push r9
   343                              <1>     push r10
   344                              <1>     push r11
   345                              <1>     push r12
   346                              <1>     push r13
   347                              <1>     push r14
   348                              <1>     push r15
   349                              <1>     pushfq
   350                              <1> %endmacro
   351                              <1> ;Insert macro when exiting a debug block
   352                              <1> %macro debugExitM 0
   353                              <1>     popfq
   354                              <1>     pop r15
   355                              <1>     pop r14
   356                              <1>     pop r13
   357                              <1>     pop r12
   358                              <1>     pop r11
   359                              <1>     pop r10
   360                              <1>     pop r9
   361                              <1>     pop r8
   362                              <1>     pop rbp
   363                              <1>     pop rdi
   364                              <1>     pop rsi
   365                              <1>     pop rdx
   366                              <1>     pop rcx
   367                              <1>     pop rbx
   368                              <1>     pop rax
   369                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   370                              <1> %endmacro
    21                                  %include "./Source/Kernel/FAT/buffun.asm"
    22                              <1> ;This file contains FAT disk buffer related functions that
    23                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    24                              <1> ;----------------------------------------------------
    25                              <1> ;           Externally referenced functions         :
    26                              <1> ;----------------------------------------------------
    27                              <1> 
    28                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    29                              <1> ;Sets the buffer in rdi to the head of the chain
    30                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    31                              <1> ;Output: Buffer header set to the head of the chain
    32 000005DB 48393D(4EC00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    33 000005E2 7428                <1>     je .exit
    34 000005E4 56                  <1>     push rsi
    35 000005E5 488B35(4EC00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    36                              <1> .mainlp:
    37 000005EC 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    38 000005EF 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    39 000005F1 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    40 000005F4 EBF6                <1>     jmp short .mainlp
    41                              <1> .fnd:
    42 000005F6 57                  <1>     push rdi
    43 000005F7 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    44 000005FA 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    45 000005FD 5F                  <1>     pop rdi ;Get original buf back
    46 000005FE 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    47 00000601 488735(4EC00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    48 00000608 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    49 0000060B 5E                  <1>     pop rsi
    50                              <1> .exit:
    51 0000060C C3                  <1>     ret
    52                              <1> 
    53                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h
    54 0000060D E846000000          <1>     call flushBuffer
    55 00000612 7306                <1>     jnc .exit
    56                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    57 00000614 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    58                              <1> .exit:
    59 0000061A C3                  <1>     ret
    60                              <1> 
    61                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    62                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    63                              <1> ;Output: rdi = First disk buffer
    64 0000061B 488B3D(4EC00300)    <1>     mov rdi, [bufHeadPtr]
    65 00000622 57                  <1>     push rdi
    66                              <1> .lp:
    67 00000623 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    68 00000627 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    69 0000062A 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    70 00000631 75F0                <1>     jne .lp
    71 00000633 5F                  <1>     pop rdi
    72 00000634 C3                  <1>     ret
    73                              <1> 
    74                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    75                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    76                              <1> ; second buffer in the chain in rdi
    77                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    78                              <1> ;Output: rdi = Second buffer in the chain
    79 00000635 E8A1FFFFFF          <1>     call makeBufferMostRecentlyUsed
    80 0000063A 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
    81 00000641 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    82 00000644 C3                  <1>     ret
    83                              <1> 
    84                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    85                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    86                              <1> ;Input: rdi = Buffer header to start searching at
    87                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    88                              <1> ;        ZF=ZE => No unreferenced buffer found
    89 00000645 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    90 00000649 750C                <1>     jnz .exit
    91 0000064B 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    92 0000064E 4881FFFFFFFFFF      <1>     cmp rdi, -1
    93 00000655 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    94                              <1> .exit:
    95 00000657 C3                  <1>     ret
    96                              <1> 
    97                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
    98                              <1> ;Flushes the data in a sector buffer to disk!
    99                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   100                              <1> ;Exit:  CF=NC : Success
   101                              <1> ;       CF=CY : Fail, terminate the request
   102                              <1> ;First make request to device driver
   103 00000658 50                  <1>     push rax
   104 00000659 53                  <1>     push rbx
   105 0000065A 51                  <1>     push rcx
   106 0000065B 52                  <1>     push rdx
   107 0000065C 56                  <1>     push rsi
   108 0000065D 55                  <1>     push rbp
   109 0000065E F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   110 00000662 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   111                              <1> .fbRequest0:
   112 00000664 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   113 00000669 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   114 0000066D 7406                <1>     jz .fbRequest1
   115 0000066F 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   116                              <1> .fbRequest1:
   117 00000675 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   118 00000678 B901000000          <1>     mov ecx, 1  ;One sector to copy
   119 0000067D 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   120 00000681 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   121 00000685 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   122 00000689 E8CA1C0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   123 0000068E E8421B0000          <1>     call absDiskDriverCall    ;Make Driver Request
   124 00000693 7525                <1>     jnz .fbFail
   125                              <1> ;Now check if the buffer was a FAT, to write additional copies
   126 00000695 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   127 00000699 7417                <1>     jz .fbFreeExit  ;If not, exit
   128 0000069B FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   129 0000069E 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   130 000006A0 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   131 000006A3 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   132 000006A7 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   133                              <1> .fbFreeExit1:
   134 000006AC 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   135 000006AF 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   136                              <1> .fbFreeExit:
   137 000006B2 F8                  <1>     clc
   138                              <1> .fbExitFail:
   139 000006B3 5D                  <1>     pop rbp
   140 000006B4 5E                  <1>     pop rsi
   141 000006B5 5A                  <1>     pop rdx
   142 000006B6 59                  <1>     pop rcx
   143 000006B7 5B                  <1>     pop rbx
   144 000006B8 58                  <1>     pop rax
   145 000006B9 C3                  <1>     ret
   146                              <1> .fbFail:
   147                              <1> ;Enter here only if the request failed
   148 000006BA FFCE                <1>     dec esi
   149 000006BC 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   150                              <1> ;Request failed thrice, critical error call
   151 000006BE 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   152 000006C5 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   153 000006CC 89C7                <1>     mov edi, eax    ;Save status word in di
   154 000006CE 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   155 000006D5 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   156 000006D8 B419                <1>     mov ah, critWrite | critFailOK | critRetryOK ;Set bits
   157                              <1>     ;Test for correct buffer data type
   158 000006DA F6C401              <1>     test ah, dosBuffer
   159 000006DD 7505                <1>     jnz .fbFail0
   160 000006DF 80CC00              <1>     or ah, critDOS
   161 000006E2 EB14                <1>     jmp short .fbFailMain
   162                              <1> .fbFail0:
   163 000006E4 F6C402              <1>     test ah, fatBuffer
   164 000006E7 7504                <1>     jnz .fbFail1
   165 000006E9 B402                <1>     mov ah, critFAT
   166 000006EB EB0B                <1>     jmp short .fbFailMain
   167                              <1> .fbFail1:
   168 000006ED F6C404              <1>     test ah, dirBuffer
   169 000006F0 7504                <1>     jnz .fbFail2
   170 000006F2 B404                <1>     mov ah, critDir
   171 000006F4 EB02                <1>     jmp short .fbFailMain
   172                              <1> .fbFail2:
   173                              <1> ;Here it must be a data buffer
   174 000006F6 B406                <1>     mov ah, critData
   175                              <1> .fbFailMain:
   176 000006F8 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   177 000006FE 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   178 00000702 E8C2180000          <1>     call criticalDOSError   ;Return in al the return code
   179 00000707 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   180 0000070E 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   181 00000715 3C01                <1>     cmp al, critRetry
   182 00000717 0F8447FFFFFF        <1>     je .fbRequest0
   183                              <1>     ;Else we fail (Ignore=Fail here)
   184 0000071D 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   184 00000725 00                  <1>
   185 00000726 F9                  <1>     stc ;Set error flag to indicate fail
   186 00000727 E987FFFFFF          <1>     jmp .fbExitFail
   187                              <1> 
   188                              <1> 
   189                              <1> testDirtyBufferForDrive:    ;External linkage
   190                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   191                              <1> ;Input: al = Drive number (0 based)
   192                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   193                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   194 0000072C 53                  <1>     push rbx
   195 0000072D 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   196                              <1> .tdbfdCheckBuffer:
   197 00000734 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   198 00000737 7509                <1>     jne .tdbfdGotoNextBuffer
   199 00000739 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   200 0000073D 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   201 0000073F F9                  <1>     stc ;Else dirty buffer found, set carry flag
   202                              <1> .tdbfdExit:
   203 00000740 5B                  <1>     pop rbx
   204 00000741 C3                  <1>     ret
   205                              <1> .tdbfdGotoNextBuffer:
   206 00000742 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   207 00000745 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   208 0000074C 74F2                <1>     je .tdbfdExit
   209 0000074E EBE4                <1>     jmp short .tdbfdCheckBuffer
   210                              <1> 
   211                              <1> freeBuffersForDPB:
   212                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   213                              <1> ; to have a drive number of -1, thus freeing it
   214                              <1> ;Given DPB is in rbp
   215 00000750 53                  <1>     push rbx
   216 00000751 488B1D(4EC00300)    <1>     mov rbx, qword [bufHeadPtr]
   217                              <1> .i0:
   218 00000758 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   219 0000075C 7506                <1>     jne .i1 ;If no, skip freeing
   220 0000075E 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   221                              <1> .i1:
   222 00000764 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   223 00000767 4881FBFFFFFFFF      <1>     cmp rbx, -1
   224 0000076E 75E8                <1>     jne .i0
   225                              <1> .exit:
   226 00000770 5B                  <1>     pop rbx
   227 00000771 C3                  <1>     ret
   228                              <1> 
   229                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
   230                              <1> ;
   231                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   232                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   233                              <1> ;Flushes if not in disk change mode. 
   234                              <1> ;If in disk change mode, will check to see if the selected buffer 
   235                              <1> ; has data referring a device using the same DPB as we are changing.
   236                              <1> ; If it is, skip flushing, if not, flush first!
   237                              <1> ;
   238                              <1> ;This function will return a pointer to the desired data sector OR 
   239                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   240                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   241                              <1> ;Entry: rax = Sector to read
   242                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   243                              <1> ;       qword [workingDPB] = DPB to use for transaction
   244                              <1> ;Exit:  CF=NC => 
   245                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   246                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   247 00000772 51                  <1>     push rcx
   248 00000773 52                  <1>     push rdx
   249 00000774 56                  <1>     push rsi
   250 00000775 57                  <1>     push rdi
   251 00000776 488B35(7CC50300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   252 0000077D 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   253 0000077F E865010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   254 00000784 4881FFFFFFFFFF      <1>     cmp rdi, -1
   255 0000078B 740D                <1>     je .rbReadNewSector
   256                              <1> .rbExit:
   257 0000078D F8                  <1>     clc
   258                              <1> .rbExitNoFlag:
   259 0000078E 5F                  <1>     pop rdi
   260 0000078F 5E                  <1>     pop rsi
   261 00000790 5A                  <1>     pop rdx
   262 00000791 59                  <1>     pop rcx
   263 00000792 488B1D(01C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   264 00000799 C3                  <1>     ret
   265                              <1> .rbReadNewSector:
   266 0000079A E8F3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   267 0000079F 803D(54D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   268 000007A6 7506                <1>     jne .flush  ;We are not, flush buffer
   269 000007A8 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   270 000007AC 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   271                              <1> .flush:
   272 000007AE E85AFEFFFF          <1>     call flushAndFreeBuffer
   273 000007B3 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   274                              <1> .skipFlush:
   275                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   276 000007B5 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   277 000007B8 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   278 000007BB 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   279 000007BF 80F902              <1>     cmp cl, fatBuffer
   280 000007C2 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   281 000007C4 7503                <1>     jne .rbNonFATbuffer
   282 000007C6 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   283                              <1> .rbNonFATbuffer:
   284 000007C9 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   285 000007CC 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   286 000007CF 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   287 000007D2 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   288 000007D6 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   289 000007DA E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   290 000007DF EBAD                <1>     jmp short .rbExitNoFlag
   291                              <1> 
   292                              <1> readSectorBuffer:   ;Internal Linkage
   293                              <1> ;Reads a sector into a built sector buffer
   294                              <1> ;Entry: rdi = Pointer to buffer header
   295                              <1> ;Exit:  CF=NC : Success
   296                              <1> ;       CF=CY : Fail, terminate the request
   297                              <1> ;       rbx pointing to buffer header
   298                              <1> ;First make request to device driver
   299 000007E1 50                  <1>     push rax
   300 000007E2 53                  <1>     push rbx
   301 000007E3 51                  <1>     push rcx
   302 000007E4 52                  <1>     push rdx
   303 000007E5 56                  <1>     push rsi
   304 000007E6 55                  <1>     push rbp
   305                              <1> .rsRequest0:
   306 000007E7 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   307 000007EC F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   308 000007F0 7406                <1>     jz .rsRequest1
   309 000007F2 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   310                              <1> .rsRequest1:
   311 000007F8 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   312 000007FB B901000000          <1>     mov ecx, 1  ;One sector to copy
   313 00000800 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   314 00000804 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   315 00000808 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   316 0000080C E8521B0000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   317 00000811 E8BF190000          <1>     call absDiskDriverCall    ;Make Driver Request
   318 00000816 7508                <1>     jnz .rsFail
   319                              <1> .rsExit:
   320 00000818 F8                  <1>     clc
   321                              <1> .rsExitFail:
   322 00000819 5D                  <1>     pop rbp
   323 0000081A 5E                  <1>     pop rsi
   324 0000081B 5A                  <1>     pop rdx
   325 0000081C 59                  <1>     pop rcx
   326 0000081D 5B                  <1>     pop rbx
   327 0000081E 58                  <1>     pop rax
   328 0000081F C3                  <1>     ret
   329                              <1> .rsFail:
   330                              <1> ;Enter here only if the request failed
   331 00000820 FFCE                <1>     dec esi
   332 00000822 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   333                              <1> ;Request failed thrice, critical error call
   334 00000824 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   335 0000082B 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   336 00000832 89C7                <1>     mov edi, eax    ;Save status word in di
   337 00000834 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   338 0000083B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   339 0000083E B418                <1>     mov ah, critRead | critFailOK | critRetryOK ;Set bits
   340                              <1>     ;Test for correct buffer data type
   341 00000840 F6C401              <1>     test ah, dosBuffer
   342 00000843 7505                <1>     jnz .rsFail0
   343 00000845 80CC00              <1>     or ah, critDOS
   344 00000848 EB14                <1>     jmp short .rsFailMain
   345                              <1> .rsFail0:
   346 0000084A F6C402              <1>     test ah, fatBuffer
   347 0000084D 7504                <1>     jnz .rsFail1
   348 0000084F B402                <1>     mov ah, critFAT
   349 00000851 EB0B                <1>     jmp short .rsFailMain
   350                              <1> .rsFail1:
   351 00000853 F6C404              <1>     test ah, dirBuffer
   352 00000856 7504                <1>     jnz .rsFail2
   353 00000858 B404                <1>     mov ah, critDir
   354 0000085A EB02                <1>     jmp short .rsFailMain
   355                              <1> .rsFail2:
   356                              <1> ;Here it must be a data buffer
   357 0000085C B406                <1>     mov ah, critData
   358                              <1> .rsFailMain:
   359 0000085E 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   360 00000864 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   361 00000868 E85C170000          <1>     call criticalDOSError
   362 0000086D 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   363 00000874 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   364 0000087B 3C01                <1>     cmp al, critRetry
   365 0000087D 0F8464FFFFFF        <1>     je .rsRequest0
   366                              <1>     ;Else we fail (Ignore=Fail here)
   367 00000883 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   367 0000088B 00                  <1>
   368 0000088C F9                  <1>     stc ;Set error flag to indicate fail
   369 0000088D E987FFFFFF          <1>     jmp .rsExitFail
   370                              <1>     
   371                              <1> findLRUBuffer: ;Internal Linkage
   372                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   373                              <1> ; in rbx and the currBuff variable
   374                              <1> ;Input: Nothing
   375                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   376                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   377 00000892 52                  <1>     push rdx
   378 00000893 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   379 0000089A 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   380 0000089E 7436                <1>     je .flbExit 
   381 000008A0 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   382 000008A7 742D                <1>     je .flbExit
   383                              <1> .flbWalk:
   384 000008A9 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   385 000008AC 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   386 000008AF 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   387 000008B3 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   388 000008B5 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   389 000008BC 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   390 000008BE 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   391                              <1> .flbHeadLink:
   392 000008C5 488B15(4EC00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   393 000008CC 48893D(4EC00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   394 000008D3 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   395                              <1> .flbExit:
   396 000008D6 5A                  <1>     pop rdx
   397 000008D7 48893D(01C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   398 000008DE C3                  <1>     ret
   399                              <1> .flbFreeLink:
   400 000008DF 51                  <1>     push rcx
   401 000008E0 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   402 000008E3 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   403 000008E6 59                  <1>     pop rcx
   404 000008E7 EBDC                <1>     jmp short .flbHeadLink
   405                              <1> 
   406                              <1> findSectorInBuffer:     ;Internal linkage
   407                              <1> ;Finds the Buffer for a sector
   408                              <1> ;If the sector is not in a buffer, returns with a -1
   409                              <1> ;Input: rax = Sector number
   410                              <1> ;        dl = Drive number
   411                              <1> ;Output: rdi = Buffer hdr pointer or -1
   412 000008E9 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   413                              <1> .fsiCheckBuffer:
   414 000008F0 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   415 000008F3 7507                <1>     jne .fsiGotoNextBuffer
   416 000008F5 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   417 000008F9 7501                <1>     jne .fsiGotoNextBuffer
   418                              <1> .fsiExit:
   419 000008FB C3                  <1>     ret
   420                              <1> .fsiGotoNextBuffer:
   421 000008FC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   422 000008FF 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   423 00000906 74F3                <1>     je .fsiExit
   424 00000908 EBE6                <1>     jmp short .fsiCheckBuffer
    22                                  %include "./Source/Kernel/FAT/fat.asm"
    23                              <1> ;---------------------------------------------------:
    24                              <1> ;                   KERNEL FUNCTIONS                :
    25                              <1> ;---------------------------------------------------:
    26                              <1> makeDIR:           ;ah = 39h
    27                              <1> removeDIR:         ;ah = 3Ah
    28                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    29                              <1> getCurrentDIR:     ;ah = 47h
    30                              <1> getSetFileDateTime:;ah = 57h
    31                              <1> trueName:          ;ah = 60h, get fully qualified name
    32 0000090A C3                  <1>     ret
    33                              <1> 
    34                              <1> 
    35                              <1> ;-----------------------------------:
    36                              <1> ;       File System routines        :
    37                              <1> ;-----------------------------------:
    38                              <1> getFATtype:
    39                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    40                              <1> ;Entry: rbp = DPB to ascertain FAT
    41                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    42 0000090B 53                  <1>     push rbx
    43 0000090C 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    44 0000090F B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    45 00000914 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    46 0000091A 730F                <1>     jae .exit
    47 0000091C FFC9                <1>     dec ecx     ;FAT 12 marker
    48 0000091E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    49 00000924 7205                <1>     jb .exit
    50 00000926 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    51                              <1> .exit:
    52 0000092B 5B                  <1>     pop rbx
    53 0000092C C3                  <1>     ret
    54                              <1> 
    55                              <1> clust2FATEntry:
    56                              <1> ;Converts a cluster number to a offset in the FAT
    57                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    58                              <1> ;        eax = Cluster number to look for
    59                              <1> ;Exit:   eax = Sector on disk of FAT 
    60                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    61                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    62 0000092D 53                  <1>     push rbx
    63 0000092E 55                  <1>     push rbp
    64 0000092F 488B2D(7CC50300)    <1>     mov rbp, qword [workingDPB]
    65 00000936 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    66 00000939 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    67 0000093F 731E                <1>     jae .fat32
    68 00000941 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    69 00000947 7209                <1>     jb .fat12
    70                              <1> ;FAT16
    71 00000949 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    72 0000094B 6801000000          <1>     push qword 1
    73 00000950 EB15                <1>     jmp short .common
    74                              <1> .fat12:
    75 00000952 89C1                <1>     mov ecx, eax    ;ecx = eax
    76 00000954 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    77 00000956 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    78 00000958 6800000000          <1>     push qword 0
    79 0000095D EB08                <1>     jmp short .common
    80                              <1> .fat32:
    81 0000095F 6802000000          <1>     push qword 2
    82 00000964 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    83                              <1> .common:
    84                              <1> ;eax has the FAToffset
    85 00000967 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    86 0000096B 31D2                <1>     xor edx, edx    ;edx = 0
    87 0000096D F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    88 0000096F 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    89 00000973 01D8                <1>     add eax, ebx
    90 00000975 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    91 00000976 5D                  <1>     pop rbp
    92 00000977 5B                  <1>     pop rbx
    93 00000978 C3                  <1>     ret
    94                              <1> 
    95                              <1> getStartSectorOfCluster:
    96                              <1> ;Input: eax = Cluster Number
    97                              <1> ;       rbp = dpb pointer
    98                              <1> ;Output: rax = Starting Sector number for cluster
    99                              <1> ;Gives the data sector we are at in the current cluster
   100                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   101 00000979 51                  <1>     push rcx
   102 0000097A 09C0                <1>     or eax, eax ;Zero upper dword
   103 0000097C 482D02000000        <1>     sub rax, 2
   104 00000982 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   105 00000985 48D3E0              <1>     shl rax, cl
   106 00000988 31C9                <1>     xor ecx, ecx
   107 0000098A 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   108 0000098D 4801C8              <1>     add rax, rcx
   109                              <1>     ;rax now has the first sector of the current cluster
   110 00000990 59                  <1>     pop rcx
   111 00000991 C3                  <1>     ret
   112                              <1> 
   113                              <1> findFreeCluster:
   114                              <1> ;Walks the FAT to find a free cluster and returns the 
   115                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   116                              <1> ;Works on the workingDPB
   117                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   118 00000992 53                  <1>     push rbx
   119 00000993 51                  <1>     push rcx
   120 00000994 52                  <1>     push rdx
   121 00000995 57                  <1>     push rdi
   122 00000996 55                  <1>     push rbp
   123 00000997 488B2D(7CC50300)    <1>     mov rbp, qword [workingDPB]
   124 0000099E 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   125 000009A2 488905(09C60300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   126                              <1> ;Use ebp as sector counter
   127 000009A9 8B5513              <1>     mov edx, dword [rbp + dpb.dFATlength]
   128                              <1> ;Get Sector Size in bytes in ebx
   129 000009AC 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   130                              <1> ;Get FAT type
   131 000009B0 E856FFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   132 000009B5 0F84B6000000        <1>     jz .fat12
   133 000009BB F6C101              <1>     test cl, 1
   134 000009BE 7571                <1>     jnz .fat16
   135                              <1> ;FAT32 proceeds here
   136 000009C0 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   137 000009C3 66891D(11C60300)    <1>     mov word [entries], bx
   138                              <1> .fat32Search:
   139 000009CA B102                <1>     mov cl, fatBuffer
   140 000009CC 488B05(09C60300)    <1>     mov rax, qword [tempSect]
   141 000009D3 E89AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   142 000009D8 724A                <1>     jc .exitFail
   143 000009DA 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   144 000009DE 31C0                <1>     xor eax, eax
   145 000009E0 0FB70D(11C60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   146 000009E7 F2AF                <1>     repne scasd ;Look for the zero dword 
   147 000009E9 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   148 000009EB FFCA                <1>     dec edx ;Dec number of sectors left to search
   149 000009ED 743B                <1>     jz .noFreeClusters
   150 000009EF 48FF05(09C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   151 000009F6 EBD2                <1>     jmp short .fat32Search
   152                              <1> .fat32Found:
   153 000009F8 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   154                              <1> .computeEntry:
   155 000009FE 480FB74D06          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   156 00000A03 488B05(09C60300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   157 00000A0A 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   158 00000A0D 0FB70D(11C60300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   159 00000A14 52                  <1>     push rdx
   160 00000A15 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   161 00000A18 5A                  <1>     pop rdx
   162                              <1> ;rbx points to current buffer header
   163 00000A19 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   164 00000A1D 4829D7              <1>     sub rdi, rdx
   165 00000A20 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   166                              <1> .exit:
   167 00000A23 F8                  <1>     clc
   168                              <1> .exitFail:      ;Keep carry flag
   169 00000A24 5D                  <1>     pop rbp
   170 00000A25 5F                  <1>     pop rdi
   171 00000A26 5A                  <1>     pop rdx
   172 00000A27 59                  <1>     pop rcx
   173 00000A28 5B                  <1>     pop rbx
   174 00000A29 C3                  <1>     ret
   175                              <1> .noFreeClusters:
   176 00000A2A B8FFFFFFFF          <1>     mov eax, -1 ;No free cluster marker
   177 00000A2F EBF2                <1>     jmp short .exit
   178                              <1> .fat16:
   179 00000A31 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   180 00000A33 66891D(11C60300)    <1>     mov word [entries], bx
   181                              <1> .fat16Search:
   182 00000A3A B102                <1>     mov cl, fatBuffer
   183 00000A3C 488B05(09C60300)    <1>     mov rax, qword [tempSect]
   184 00000A43 E82AFDFFFF          <1>     call getBuffer ;Buffer Header in ebx
   185 00000A48 72DA                <1>     jc .exitFail
   186 00000A4A 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   187 00000A4E 31C0                <1>     xor eax, eax
   188 00000A50 0FB70D(11C60300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   189 00000A57 F266AF              <1>     repne scasw ;Look for the zero word 
   190 00000A5A 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   191 00000A5C FFCA                <1>     dec edx ;Dec number of sectors left to search
   192 00000A5E 74CA                <1>     jz .noFreeClusters
   193 00000A60 48FF05(09C60300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   194 00000A67 EBD1                <1>     jmp short .fat16Search
   195                              <1> .fat16Found:
   196 00000A69 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   197 00000A6F EB8D                <1>     jmp short .computeEntry
   198                              <1> .fat12:
   199 00000A71 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   200 00000A73 D1E0                <1>     shl eax, 1  ;Multiply by 2
   201 00000A75 B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   202 00000A7A 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   203 00000A7B 31D2                <1>     xor edx, edx
   204 00000A7D F7F1                <1>     div ecx
   205 00000A7F 5A                  <1>     pop rdx
   206 00000A80 668905(11C60300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   207                              <1>     ;The value is rounded down so we can read the next sector for the 
   208                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   209 00000A87 B102                <1>     mov cl, fatBuffer
   210 00000A89 488B05(09C60300)    <1>     mov rax, qword [tempSect]
   211 00000A90 E8DDFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   212 00000A95 728D                <1>     jc .exitFail
   213 00000A97 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   214                              <1> .fat12SearchNewSector:
   215 00000A9B 0FB70D(11C60300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   216                              <1> .fat12Search:
   217 00000AA2 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   218 00000AA5 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   219 00000AAA 744A                <1>     jz .fat12EntryFound
   220 00000AAC 48FFC7              <1>     inc rdi ;Goto next byte
   221 00000AAF FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   222 00000AB1 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   223 00000AB4 C1E804              <1>     shr eax, 4  ;Shift down by 4
   224 00000AB7 743D                <1>     jz .fat12EntryFound
   225 00000AB9 48FFC7              <1>     inc rdi ;Goto next entry
   226 00000ABC FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   227 00000ABE 75E2                <1>     jnz .fat12Search
   228                              <1> ;We arrive here when we are at the last entry in the sector
   229 00000AC0 48FF05(09C60300)    <1>     inc qword [tempSect]    ;Get next Sector
   230 00000AC7 488B05(09C60300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   231 00000ACE B102                <1>     mov cl, fatBuffer
   232 00000AD0 E89DFCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   233 00000AD5 0F8249FFFFFF        <1>     jc .exitFail
   234 00000ADB 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   235 00000ADE 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   236 00000AE2 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   237 00000AE4 C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   238 00000AE7 740D                <1>     jz .fat12EntryFound ;Found a sector!
   239                              <1>     ;Empty cluster not found in sector
   240 00000AE9 FFCA                <1>     dec edx ;Decrement sector count
   241 00000AEB 0F8439FFFFFF        <1>     jz .noFreeClusters
   242 00000AF1 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   243 00000AF4 EBA5                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   244                              <1> .fat12EntryFound:
   245 00000AF6 E903FFFFFF          <1>     jmp .computeEntry   ;Unnecessary redirection
   246                              <1> 
   247                              <1> getDataSector:
   248                              <1> ;This function will request the sector of data in [currSectD].
   249                              <1> ;This call can only be used for DATA sectors.
   250                              <1> ;Preserves all registers
   251                              <1> ;On ret: CF=NC => currBuff = Buffer with data
   252                              <1> ;        CF=CY => Critical error occurred and was FAILed
   253 00000AFB 50                  <1>     push rax
   254 00000AFC 53                  <1>     push rbx
   255 00000AFD 51                  <1>     push rcx
   256 00000AFE 488B05(21C60300)    <1>     mov rax, qword [currSectD]  ;Get the disk sector number to read
   257 00000B05 BB01000000          <1>     mov ebx, dosBuffer
   258 00000B0A B908000000          <1>     mov ecx, dataBuffer 
   259 00000B0F 4885C0              <1>     test rax, rax
   260 00000B12 0F44CB              <1>     cmovz ecx, ebx  ;If sector 0, change to DOS buffer
   261                              <1> .getSectorRead:
   262 00000B15 E858FCFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff] (and rbx but ignore)
   263 00000B1A 59                  <1>     pop rcx
   264 00000B1B 5B                  <1>     pop rbx
   265 00000B1C 58                  <1>     pop rax
   266 00000B1D C3                  <1>     ret
   267                              <1> 
   268                              <1> getNextSectorOfFile:
   269                              <1> ;This function will read the next sector for a file into a buffer.
   270                              <1> ;If the next sector to be read lives in the next cluster, it will update
   271                              <1> ; the file handle of the file being read/written to the new cluster
   272                              <1> ;
   273                              <1> ;Input: rbp = dpb pointer
   274                              <1> ;Output:
   275                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   276                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File
   277                              <1> ;       CF=CY => Critical error occurred and was FAILed
   278                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   279                              <1> ; next cluster and read first sector 
   280                              <1>     ;Check if we need to go to next cluster
   281 00000B1E 8A05(20C60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   282 00000B24 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   283 00000B27 7416                <1>     je .gotoNextCluster
   284                              <1>     ;Goto next sector in same cluster
   285 00000B29 FE05(20C60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   286 00000B2F 48FF05(21C60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   287 00000B36 488B05(21C60300)    <1>     mov rax, qword [currSectD]
   288                              <1> .exitOK:
   289 00000B3D F8                  <1>     clc
   290                              <1> .exitFail:
   291 00000B3E C3                  <1>     ret
   292                              <1> .gotoNextCluster:
   293 00000B3F 8B05(17C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   294 00000B45 E82A000000          <1>     call walkFAT
   295 00000B4A 72F2                <1>     jc .exitFail
   296                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   297 00000B4C 3DFFFFFFFF          <1>     cmp eax, -1
   298 00000B51 74EA                <1>     je .exitOK
   299                              <1> ;Update the new cluster and sector information
   300 00000B53 8905(17C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   301 00000B59 FF05(13C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   302 00000B5F E815FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   303 00000B64 488905(21C60300)    <1>     mov qword [currSectD], rax  ;Save it
   304 00000B6B C605(20C60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   305 00000B72 EBC9                <1>     jmp short .exitOK
   306                              <1> 
   307                              <1> 
   308                              <1> walkFAT:
   309                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   310                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   311                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   312                              <1> ;       rbp = DPB number
   313                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   314                              <1> ;If carry set, getBuffer failed!
   315 00000B74 53                  <1>     push rbx
   316 00000B75 51                  <1>     push rcx
   317 00000B76 52                  <1>     push rdx
   318 00000B77 57                  <1>     push rdi
   319 00000B78 55                  <1>     push rbp
   320 00000B79 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   321 00000B7B E8ADFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   322                              <1>     ;and FAT type in ecx
   323 00000B80 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   324 00000B84 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   325 00000B86 51                  <1>     push rcx    ;Move FAT signature onto stack
   326 00000B87 B102                <1>     mov cl, fatBuffer
   327 00000B89 E8E4FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   328 00000B8E 59                  <1>     pop rcx
   329 00000B8F 722D                <1>     jc .exitFail
   330                              <1>     ;Check if FAT 12, 16, 32
   331 00000B91 85C9                <1>     test ecx, ecx
   332 00000B93 742F                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   333 00000B95 F7C101000000        <1>     test ecx, 1
   334 00000B9B 7410                <1>     jz .goToNextClusterFat32
   335                              <1>     ;Here we handle FAT16
   336 00000B9D 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   337 00000BA2 663DFFFF            <1>     cmp ax, -1
   338 00000BA6 7515                <1>     jne .exit
   339 00000BA8 0FBEC0              <1>     movsx eax, al
   340 00000BAB EB10                <1>     jmp short .exit
   341                              <1> .goToNextClusterFat32:
   342 00000BAD 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   343 00000BB1 3DFFFFFFFF          <1>     cmp eax, -1
   344 00000BB6 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   345 00000BB8 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   346                              <1> .exit:
   347 00000BBD F8                  <1>     clc
   348                              <1> .exitFail:
   349 00000BBE 5D                  <1>     pop rbp
   350 00000BBF 5F                  <1>     pop rdi
   351 00000BC0 5A                  <1>     pop rdx
   352 00000BC1 59                  <1>     pop rcx
   353 00000BC2 5B                  <1>     pop rbx
   354 00000BC3 C3                  <1>     ret
   355                              <1> .gotoNextClusterFat12:
   356                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   357                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   358                              <1> 
   359 00000BC4 57                  <1>     push rdi    ;Save the cluster number on the stack
   360 00000BC5 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   361 00000BC8 FFC0                <1>     inc eax ;Get next sector
   362 00000BCA B102                <1>     mov cl, fatBuffer
   363 00000BCC E8A1FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   364 00000BD1 59                  <1>     pop rcx ;Return the cluster number in rcx
   365 00000BD2 72EA                <1>     jc .exitFail
   366                              <1>     ;rdi has first buffer header, rbx has second buffer header
   367                              <1>     ;rdx has offset into first header for entry
   368 00000BD4 F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   369 00000BDA 7422                <1>     jz .gotoNextClusterFat12Even
   370                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   371 00000BDC 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   372 00000BE0 29D0                <1>     sub eax, edx
   373 00000BE2 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   374 00000BE4 750E                <1>     jnz .gotoNextClusterFat12NoCross
   375                              <1>     ;Boundary cross, build entry properly
   376 00000BE6 31C0                <1>     xor eax, eax
   377 00000BE8 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   378 00000BEC 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   379 00000BEF C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   380 00000BF2 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   381                              <1> .gotoNextClusterFat12NoCross:
   382 00000BF4 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   383 00000BF9 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   384 00000BFC EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   385                              <1> .gotoNextClusterFat12Even:
   386                              <1>     ;Here the cluster is even and can't cross a sector boundary
   387 00000BFE 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   388 00000C03 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   389                              <1> .checkIfLastFAT12Cluster:
   390 00000C08 663DFF0F            <1>     cmp ax, 0FFFh
   391 00000C0C 75AF                <1>     jne .exit
   392 00000C0E B8FFFFFFFF          <1>     mov eax, -1
   393 00000C13 E9A5FFFFFF          <1>     jmp .exit
    23                                  %include "./Source/Kernel/FAT/findfile.asm"
    24                              <1> ;Generic Find First and Find Next functions here
    25                              <1> 
    26                              <1> genericFindFirst:
    27 00000C18 C3                  <1>     ret
    28                              <1> genericFindNext:
    29 00000C19 C3                  <1>     ret
    24                                  %include "./Source/Kernel/FileIO/devio.asm"
    25                              <1> ;This file contains the primitive dev io function, which will be called 
    26                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    27                              <1> ; make requests for device IO.
    28                              <1> 
    29                              <1> mainCharIO:
    30                              <1> ;This is the main IO clearing function for Char IO.
    31                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    32                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    33                              <1> ;
    34                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    35                              <1> ;       ah = {0,..., 5}, a subfunction number
    36                              <1> ;       Function 0: Read Char (drvREAD)
    37                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    38                              <1> ;       Function 2: Write Char (drvWrite)
    39                              <1> ; In the case the below functions are called for Disk/Net files
    40                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    41                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    42                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    43                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    44                              <1> ;
    45                              <1> ; If and only if ah = 02h, al = Char to write to device
    46                              <1> ;
    47                              <1> ;
    48                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    49                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    50                              <1> ;                                           ZF = NZ => Device ready (not busy)
    51                              <1> ;                                               If ND read, AL = Next Char
    52                              <1> ; For Files/Net:
    53                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    54                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    55                              <1> ;           For Read and ND Read:
    56                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    57                              <1> ;               Read returns ^Z on EOF.
    58                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    59                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    60                              <1> ;
    61                              <1> ;All registers preserved EXCEPT for ax and flags
    62                              <1> 
    63                              <1> ;Reference Request Header
    64                              <1> ;Common Section:
    65                              <1> ;    .hdrlen resb 1  ;Length of the request header
    66                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    67                              <1> ;    .cmdcde resb 1  ;Command code
    68                              <1> ;    .status resw 1  ;Status word
    69                              <1> ;    .devptr resq 1  ;Reserved. Unused
    70                              <1> ;Below used by calls 0,1,2,5
    71                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    72                              <1> ;Below used by calls 0,2
    73                              <1> ;    .bufptr resq 1
    74                              <1> ;    .tfrlen resd 1
    75                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    76                              <1> ;    .strtsc resq 1
    77                              <1> ;    .desptr resq 1
    78                              <1> 
    79                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    80 00000C1A 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    81 00000C1B 488D1D(72C50300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    82 00000C22 48891D(FCC30300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    83 00000C29 5B                  <1>     pop rbx
    84 00000C2A C705(04C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    84 00000C32 0000                <1>
    85 00000C34 668905(72C50300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    86 00000C3B 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    87 00000C41 0F85A1000000        <1>     jnz .notChar
    88 00000C47 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    89 00000C4D 0F8495000000        <1>     jz .notChar
    90                              <1> ;Char devices only here
    91 00000C53 E87B1A0000          <1>     call dosPushRegs    ;Save context here
    92 00000C58 488D1DBBF3FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    93 00000C5F 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    94 00000C62 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    95 00000C65 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    96 00000C68 890D(EEC30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    97                              <1>     ;Now set up cx for status word
    98 00000C6E 31C9                <1>     xor ecx, ecx
    99 00000C70 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   100 00000C73 7506                <1>     jne .skipBsySet
   101 00000C75 81C900020000        <1>     or ecx, drvBsyStatus
   102                              <1> .skipBsySet:
   103 00000C7B 66870D(F1C30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   104                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   105 00000C82 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   106 00000C89 E81E140000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   107 00000C8E 668B3D(F1C30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   108 00000C95 F7C700800000        <1>     test edi, drvErrStatus
   109 00000C9B 752D                <1>     jnz .error
   110                              <1> .ignoreRet:
   111 00000C9D 803D(F0C30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   112 00000CA4 750C                <1>     jne .notNDRead
   113 00000CA6 8A05(FBC30300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   114 00000CAC 8805(72C50300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   115                              <1> .notNDRead:
   116 00000CB2 8A25(F2C30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   117 00000CB8 F6D4                <1>     not ah
   118 00000CBA 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   119 00000CBD E8FA190000          <1>     call dosPopRegs ;Get back the context
   120 00000CC2 668B05(72C50300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   121                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00000CC9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   122                              <1> .error:
   123                              <1>     ;cl has flags
   124 00000CCA 88CC                <1>     mov ah, cl
   125 00000CCC E8E2120000          <1>     call charDevErr
   126 00000CD1 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   127 00000CD3 750A                <1>     jne .errorIgnore
   128                              <1>     ;Fallthrough => Retry
   129 00000CD5 E8E2190000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   130 00000CDA E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   131                              <1> .errorIgnore:
   132                              <1>     ;Clear the busy bit in the status word
   133 00000CDF 8025(F2C30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   134 00000CE6 EBB5                <1>     jmp short .ignoreRet
   135                              <1> .notChar:
   136                              <1> ;Just return with ZF=NZ for now
   137 00000CE8 50                  <1>     push rax
   138 00000CE9 31C0                <1>     xor eax, eax
   139 00000CEB FEC0                <1>     inc al
   140 00000CED 58                  <1>     pop rax
   141                              <1>     return
    18                              <2> %%_ret:
    19 00000CEE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   142                              <1> 
   143                              <1> openSFT:
   144                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   145                              <1> ;Input: rdi = SFT pointer
   146 00000CEF E8DF190000          <1>     call dosPushRegs
   147 00000CF4 B00D                <1>     mov al, drvOPEN
   148 00000CF6 EB07                <1>     jmp short openCloseCommon
   149                              <1> closeSFT:
   150                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   151 00000CF8 E8D6190000          <1>     call dosPushRegs
   152 00000CFD B00E                <1>     mov al, drvCLOSE
   153                              <1> openCloseCommon:
   154                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   155 00000CFF 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   156 00000D05 7469                <1>     jz .exit    ;Exit if so
   157 00000D07 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   158 00000D0B 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   159 00000D0F 7512                <1>     jnz .charDev
   160                              <1>     ;Here a disk drive, rdi is a DPB ptr
   161 00000D11 803D(30C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   162 00000D18 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   163 00000D1A 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   164 00000D1D 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   165 00000D1F 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   166                              <1> .charDev:
   167 00000D23 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   168 00000D29 7445                <1>     jz .exit    ;No, exit!
   169 00000D2B 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   170 00000D2E 488D1D(18C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   171 00000D35 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   172                              <1> .retryEP:
   173 00000D38 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   174 00000D3B C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   175 00000D3E 50                  <1>     push rax    ;Save the dword
   176 00000D3F E86C130000          <1>     call goDriver
   177 00000D44 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   178 00000D4B F7C700800000        <1>     test edi, drvErrStatus
   179 00000D51 741C                <1>     jz .exitPop
   180                              <1>     ;Error here, check if char or block drive
   181 00000D53 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   182 00000D59 7404                <1>     jz .blockError
   183                              <1>     ;Char error here
   184 00000D5B B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   185 00000D5D EB04                <1>     jmp short .errorCmn
   186                              <1> .blockError:
   187 00000D5F 88C8                <1>     mov al, cl  ;Move drive number into al
   188 00000D61 B406                <1>     mov ah, critData    ;Data on block dev error
   189                              <1> .errorCmn:
   190                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   191 00000D63 E84B120000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   192 00000D68 B001                <1>     mov al, critRetry   ;al returns user response
   193 00000D6A 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   194 00000D6C 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   195 00000D6D EBC9                <1>     jmp short .retryEP  ;Reset
   196                              <1> .exitPop:
   197 00000D6F 58                  <1>     pop rax    
   198                              <1> .exit:
   199 00000D70 E847190000          <1>     call dosPopRegs
   200                              <1>     return
    18                              <2> %%_ret:
    19 00000D75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    26                              <1> ;-----------------------------------------------------------------------:
    27                              <1> ;                  DOS default char functions live here                 :
    28                              <1> ;                                                                       :
    29                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    30                              <1> ;                                                                       :
    31                              <1> ;Rules for the naming of the DOS functions                              :
    32                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    33                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    34                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    35                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    36                              <1> ;                                                                       :
    37                              <1> ;-----------------------------------------------------------------------:
    38                              <1> 
    39                              <1> charIn_BE:     ;ah = 01h
    40                              <1> ;Return char that has been read and echoed in al
    41 00000D76 E866010000          <1>     call charIn_B
    42 00000D7B 50                  <1>     push rax
    43 00000D7C E804000000          <1>     call charOut_B.in    ;Output it to screen
    44 00000D81 58                  <1>     pop rax
    45                              <1>     return
    18                              <2> %%_ret:
    19 00000D82 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> 
    47                              <1> charOut_B:       ;ah = 02h
    48                              <1> ;Bspace is regular cursor left, does not insert a blank
    49 00000D83 88D0                <1>     mov al, dl
    50                              <1> .in:  ;Internal function Entry Point, with char in al
    51 00000D85 3C20                <1>     cmp al, asciiCaret
    52 00000D87 7277                <1>     jb .control
    53 00000D89 3C7F                <1>     cmp al, DEL ;DEL char?
    54 00000D8B 7406                <1>     je .skipCurs
    55 00000D8D FE05(28C20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    56                              <1> .skipCurs:
    57 00000D93 FE05(2EC30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    58 00000D99 8025(2EC30300)03    <1>     and byte [vConErr], 3
    59 00000DA0 56                  <1>     push rsi
    60 00000DA1 7507                <1>     jnz .skipErrorCheck
    61 00000DA3 50                  <1>     push rax
    62 00000DA4 E884020000          <1>     call vConCtrlCheck
    63 00000DA9 58                  <1>     pop rax
    64                              <1> .skipErrorCheck:
    65 00000DAA E80C020000          <1>     call outputOnStdout
    66 00000DAF 5E                  <1>     pop rsi
    67 00000DB0 F605(2BC30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    68                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DB7 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    69 00000DB9 53                  <1>     push rbx
    70 00000DBA 56                  <1>     push rsi
    71 00000DBB BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    72 00000DC0 E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    73 00000DC5 7236                <1>     jc .exitPrintEcho
    74                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    75 00000DC7 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    76 00000DCB F7C300800000        <1>     test ebx, devRedirDev
    77 00000DD1 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    78 00000DD3 F7C380000000        <1>     test ebx, devCharDev
    79 00000DD9 7422                <1>     jz .exitPrintEcho
    80 00000DDB BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    81 00000DE0 E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    82 00000DE5 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    83 00000DE7 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    84 00000DED 7407                <1>     jz .netSpool
    85 00000DEF E8FB010000          <1>     call outputOnSFT
    86 00000DF4 EB07                <1>     jmp short .exitPrintEcho
    87                              <1> .netSpool:
    88 00000DF6 C605(2BC30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    89                              <1> .exitPrintEcho:
    90 00000DFD 5E                  <1>     pop rsi
    91 00000DFE 5B                  <1>     pop rbx
    92                              <1>     return
    18                              <2> %%_ret:
    19 00000DFF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    93                              <1> .control:
    94 00000E00 3C0D                <1>     cmp al, CR
    95 00000E02 7425                <1>     je .newline
    96 00000E04 3C08                <1>     cmp al, BSP
    97 00000E06 742D                <1>     je .back
    98 00000E08 3C09                <1>     cmp al, TAB
    99 00000E0A 7587                <1>     jne .skipCurs   ;Treat as normal
   100                              <1>     ;TAB key here
   101                              <1> .tab:
   102 00000E0C 51                  <1>     push rcx
   103 00000E0D 0FB60D(28C20300)    <1>     movzx ecx, byte [vConCursPos]
   104 00000E14 80C9F8              <1>     or cl, ~7
   105 00000E17 F6D9                <1>     neg cl
   106 00000E19 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   107                              <1> .tabloop:
   108 00000E1C B020                <1>     mov al, SPC
   109 00000E1E E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   110 00000E23 FEC9                <1>     dec cl
   111 00000E25 75F5                <1>     jnz .tabloop
   112                              <1> .stopTab:
   113 00000E27 59                  <1>     pop rcx
   114                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00000E28 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   115                              <1> .newline:
   116 00000E29 C605(28C20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   117 00000E30 E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   118                              <1> .back:
   119 00000E35 FE0D(28C20300)      <1>     dec byte [vConCursPos]
   120 00000E3B E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   121                              <1> 
   122                              <1> auxIn_B:        ;ah = 03h
   123 00000E40 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   124 00000E45 BB03000000          <1>     mov ebx, 3
   125 00000E4A E8A5020000          <1>     call getCharDevSFT
   126                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000E4F 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   127                              <1> .auxloop:
   128 00000E51 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   129 00000E53 E8C2FDFFFF          <1>     call mainCharIO
   130 00000E58 7408                <1>     jz .signalLoop
   131 00000E5A 30E4                <1>     xor ah, ah  ;Read the char in
   132 00000E5C E8B9FDFFFF          <1>     call mainCharIO
   133                              <1>     return
    18                              <2> %%_ret:
    19 00000E61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   134                              <1> .signalLoop:
   135 00000E62 E8A3010000          <1>     call callInt48h
   136 00000E67 EBE8                <1>     jmp short .auxloop
   137                              <1> 
   138                              <1> auxOut_B:       ;ah = 04h
   139 00000E69 53                  <1>     push rbx
   140 00000E6A BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   141 00000E6F EB06                <1>     jmp short auxOutCmn
   142                              <1> prnOut_B:       ;ah = 05h
   143 00000E71 53                  <1>     push rbx
   144 00000E72 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   145                              <1> auxOutCmn: ;Auxilliary output device common 
   146 00000E77 88D0                <1>     mov al, dl  ;Get the char into al
   147 00000E79 50                  <1>     push rax
   148 00000E7A E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   149 00000E7F 58                  <1>     pop rax
   150 00000E80 56                  <1>     push rsi
   151 00000E81 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   152 00000E86 5E                  <1>     pop rsi
   153 00000E87 5B                  <1>     pop rbx
   154                              <1>     return
    18                              <2> %%_ret:
    19 00000E88 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> directConIO:    ;ah = 06h
   157 00000E89 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   158 00000E8B 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   159 00000E8D 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   160                              <1> ;Here is the read char direct function
   161 00000E93 31DB                <1>     xor ebx, ebx    
   162 00000E95 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   163                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000E9A 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   164 00000E9C 488B2D(D3C30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   165 00000EA3 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   166 00000EA5 E870FDFFFF          <1>     call mainCharIO
   167 00000EAA E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   168 00000EAF 7507                <1>     jnz .readChar
   169 00000EB1 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   170 00000EB5 30C0                <1>     xor al, al  ;Set caller return code to 0
   171                              <1>     return
    18                              <2> %%_ret:
    19 00000EB7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   172                              <1> .readChar:
   173 00000EB8 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   174                              <1>     ;Fallthrough here to get the char at STDIN
   175                              <1> charIn:         ;ah = 07h
   176                              <1> ;Return char in al from STDIN without waiting
   177 00000EBC 31DB                <1>     xor ebx, ebx
   178 00000EBE E831020000          <1>     call getCharDevSFT
   179                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000EC3 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   180 00000EC5 B401                <1>     mov ah, 01  ;ND read for char
   181 00000EC7 E84EFDFFFF          <1>     call mainCharIO
   182 00000ECC 750B                <1>     jnz .getChar
   183 00000ECE B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   184 00000ED0 CD4A                <1>     int 4Ah
   185 00000ED2 E833010000          <1>     call callInt48h
   186 00000ED7 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   187                              <1> .getChar:
   188                              <1>     ;Get the char in al and exit
   189 00000ED9 30E4                <1>     xor ah, ah
   190 00000EDB E83AFDFFFF          <1>     call mainCharIO
   191                              <1>     return
    18                              <2> %%_ret:
    19 00000EE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> charIn_B:       ;ah = 08h
   193                              <1> ;Return char in al from STDIN
   194 00000EE1 56                  <1>     push rsi
   195                              <1> .readAgain:
   196 00000EE2 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   197                              <1>     ;Also sets rsi to point to the device SFT for 
   198 00000EE7 7543                <1>     jnz .pullChar
   199 00000EE9 803D(55D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   200 00000EF0 7507                <1>     jne .skiplookahead
   201 00000EF2 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   202 00000EF4 E821FDFFFF          <1>     call mainCharIO
   203                              <1> .skiplookahead:
   204 00000EF9 B484                <1>     mov ah, 84h
   205 00000EFB CD4A                <1>     int 4ah ;Multitasking keyboard loop
   206 00000EFD 66813D(81D80300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   206 00000F05 FF                  <1>
   207 00000F06 751B                <1>     jne .skipClockRead
   208 00000F08 E8C6170000          <1>     call dosPushRegs
   209 00000F0D F8                  <1>     clc ;Clear CF, write primary header to backup
   210 00000F0E E882000000          <1>     call swapPrimaryHeader
   211 00000F13 E897050000          <1>     call readDateTimeRecord
   212 00000F18 F9                  <1>     stc ;Set CF, write backup to primary header
   213 00000F19 E877000000          <1>     call swapPrimaryHeader
   214 00000F1E E899170000          <1>     call dosPopRegs
   215                              <1> .skipClockRead:
   216 00000F23 66FF05(81D80300)    <1>     inc word [keybTicks]
   217 00000F2A EBB6                <1>     jmp short .readAgain
   218                              <1> .pullChar:
   219 00000F2C 30E4                <1>     xor ah, ah
   220 00000F2E E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   221 00000F33 5E                  <1>     pop rsi
   222 00000F34 3C00                <1>     cmp al, NUL ;Is this the null char?
   223 00000F36 7507                <1>     jne .exit
   224                              <1>     ;We are mid extended ascii, prevent printer toggling
   225 00000F38 C605(80D80300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   226                              <1> .exit:
   227                              <1>     return
    18                              <2> %%_ret:
    19 00000F3F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228                              <1> 
   229                              <1> printString_B:      ;ah = 09h
   230 00000F40 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   231                              <1> .ps0:
   232 00000F43 AC                  <1>     lodsb   ;Get char in al and inc rsi
   233 00000F44 3C24                <1>     cmp al, "$" ;End of string char?
   234                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F46 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   235 00000F48 E838FEFFFF          <1>     call charOut_B.in
   236 00000F4D EBF4                <1>     jmp short .ps0
   237                              <1> 
   238                              <1> checkStdinStatus:  ;ah = 0Bh
   239                              <1> ;Returns the status of the driver controlling vCon
   240 00000F4F E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   241 00000F54 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   242                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000F56 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   243 00000F58 FEC8                <1>     dec al  ;Set al to -1 if char available
   244                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00000F5A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   245                              <1> clearbuffDoFunc:   ;ah = 0Ch
   246                              <1> ;Clears any buffers and issues a console read command (the command in al)
   247                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   248 00000F5B 50                  <1>     push rax
   249 00000F5C 52                  <1>     push rdx
   250 00000F5D 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   251 00000F5F E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   252 00000F64 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   253 00000F66 B404                <1>     mov ah, 04h ;Flush input buffers
   254 00000F68 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   255                              <1> .skipFlush:
   256 00000F6D 5A                  <1>     pop rdx
   257 00000F6E 58                  <1>     pop rax
   258 00000F6F 88C4                <1>     mov ah, al  ;Move function number into ah
   259 00000F71 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   260 00000F73 7507                <1>     jne .others
   261 00000F75 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   262 00000F78 7412                <1>     jz .bad ;Yes, exit
   263 00000F7A EB13                <1>     jmp short .callFunction ;Else, call function in ah
   264                              <1> .others:
   265 00000F7C 3C01                <1>     cmp al, 01h
   266 00000F7E 740F                <1>     je .callFunction
   267 00000F80 3C07                <1>     cmp al, 07h
   268 00000F82 740B                <1>     je .callFunction
   269 00000F84 3C08                <1>     cmp al, 08h
   270 00000F86 7407                <1>     je .callFunction
   271 00000F88 3C0A                <1>     cmp al, 0Ah
   272 00000F8A 7403                <1>     je .callFunction
   273                              <1> .bad:
   274 00000F8C 30C0                <1>     xor al, al
   275                              <1>     return
    18                              <2> %%_ret:
    19 00000F8E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   276                              <1> .callFunction:
   277 00000F8F FA                  <1>     cli ;Prepare to swap stack pointer
   278                              <1>     ;The below address avoids "properly" reentering DOS
   279                              <1>     ;We simply reuse the function dispatch aspect and 
   280                              <1>     ; return the stack pointer to the top.
   281 00000F90 E956160000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   282                              <1> ;------------------------
   283                              <1> ;  Primitive functions  :
   284                              <1> ;------------------------
   285                              <1> swapPrimaryHeader:
   286                              <1> ;Will swap the primary header to the backup or vice-versa, depending on
   287                              <1> ; CF. CF = NC, write to backup, CF=CY, read from backup
   288 00000F95 56                  <1>     push rsi
   289 00000F96 57                  <1>     push rdi
   290 00000F97 51                  <1>     push rcx
   291 00000F98 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   291 00000FA1 00                  <1>
   292 00000FA2 488D35(18C40300)    <1>     lea rsi, primReqHdr
   293 00000FA9 488D3D(56D80300)    <1>     lea rdi, bkupReqHdr
   294 00000FB0 7303                <1>     jnc .read
   295 00000FB2 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   296                              <1> .read:
   297 00000FB5 F3A4                <1>     rep movsb   ;Swap
   298 00000FB7 59                  <1>     pop rcx
   299 00000FB8 5F                  <1>     pop rdi
   300 00000FB9 5E                  <1>     pop rsi
   301                              <1>     return
    18                              <2> %%_ret:
    19 00000FBA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   302                              <1> outputOnStdout:
   303                              <1> ;Input: al = Char to output
   304                              <1> ;Output: CF=CY, all good
   305 00000FBB 53                  <1>     push rbx
   306 00000FBC BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   307 00000FC1 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   308 00000FC6 7217                <1>     jc .exit
   309 00000FC8 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   310 00000FCE 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   311 00000FD0 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   312 00000FD4 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   313 00000FDA 7405                <1>     jz .notCharDevOrFast
   314 00000FDC CD49                <1>     int 49h ;Fast output
   315                              <1> .exitOk:
   316 00000FDE F8                  <1>     clc
   317                              <1> .exit:
   318 00000FDF 5B                  <1>     pop rbx
   319                              <1>     return
    18                              <2> %%_ret:
    19 00000FE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   320                              <1> .notCharDevOrFast:
   321 00000FE1 E809000000          <1>     call outputOnSFT
   322 00000FE6 5B                  <1>     pop rbx
   323                              <1>     return
    18                              <2> %%_ret:
    19 00000FE7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> outputToHandle:
   326                              <1> ;Char to output must be in al
   327 00000FE8 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   328                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FED 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   329                              <1> outputOnSFT:
   330                              <1> ;Output char in al to SFT in rsi
   331                              <1> ;Waits until device is not busy to send char.
   332                              <1> ;Calls int 48h if device busy
   333 00000FEF 50                  <1>     push rax
   334 00000FF0 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   335 00000FF2 E823FCFFFF          <1>     call mainCharIO
   336 00000FF7 58                  <1>     pop rax
   337 00000FF8 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   338 00000FFA B402                <1>     mov ah, 02h ;Output char in al
   339 00000FFC E819FCFFFF          <1>     call mainCharIO
   340 00001001 F8                  <1>     clc
   341                              <1>     return
    18                              <2> %%_ret:
    19 00001002 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   342                              <1> .signalLoop:
   343 00001003 E802000000          <1>     call callInt48h
   344 00001008 EBE5                <1>     jmp short outputOnSFT
   345                              <1> 
   346                              <1> callInt48h:
   347                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   348 0000100A 9C                  <1>     pushfq
   349 0000100B F605(ECC30300)FF    <1>     test byte [int48Flag], -1
   350 00001012 7417                <1>     jz .exit    ;If zero, not safe
   351 00001014 F605(63C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   352 0000101B 750E                <1>     jnz .exit
   353                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   354 0000101D FF35(ECC30300)      <1>     push qword [int48Flag] 
   355 00001023 CD48                <1>     int 48h
   356 00001025 8F05(ECC30300)      <1>     pop qword [int48Flag]    ;Return original value
   357                              <1> .exit:
   358 0000102B 9D                  <1>     popfq
   359                              <1>     return
    18                              <2> %%_ret:
    19 0000102C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> 
   362                              <1> vConCtrlCheck:
   363                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   364                              <1> ; the processing. 
   365                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   366                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   367                              <1> ;
   368                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   369                              <1> ;^S will pause screen processing until another key is processed by vCon input
   370                              <1> ;^P will toggle the printer echo feature of the vConsole
   371                              <1> ;
   372                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   373                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   374                              <1> ;
   375                              <1> ;Output: 
   376                              <1> ;   CF=CY : Error
   377                              <1> ;   CF=NC : ...
   378                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   379                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   380 0000102D E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   381 00001032 53                  <1>     push rbx
   382 00001033 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   383 00001035 E8BA000000          <1>     call getCharDevSFT
   384 0000103A 5B                  <1>     pop rbx
   385                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000103B 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   386 0000103D B401                <1>     mov ah, 01  ;Non destructively read CON
   387 0000103F E8D6FBFFFF          <1>     call mainCharIO
   388 00001044 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   389                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   390 00001046 3C13                <1>     cmp al, DC3 ;^S ?
   391 00001048 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   392 0000104A 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   393 0000104C E8C9FBFFFF          <1>     call mainCharIO
   394 00001051 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   395                              <1> .checkPrintOrExit:
   396 00001056 3C10                <1>     cmp al, DLE ;Do we have ^P?
   397 00001058 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   398 0000105A 3C03                <1>     cmp al, ETX ;Do we have ^C?
   399 0000105C 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   400                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   401                              <1>     return 
    18                              <2> %%_ret:
    19 0000105E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   402                              <1> .printToggle:
   403 0000105F F615(2BC30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   404 00001065 53                  <1>     push rbx
   405 00001066 BB04000000          <1>     mov ebx, 4  ;PRN handle
   406 0000106B E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   407 00001070 5B                  <1>     pop rbx
   408                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001071 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   409 00001073 57                  <1>     push rdi
   410 00001074 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   411 00001077 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   412 0000107D 741D                <1>     jz .notNet
   413 0000107F 50                  <1>     push rax
   414 00001080 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   415 00001085 CD4F                <1>     int 4Fh
   416 00001087 58                  <1>     pop rax
   417 00001088 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   418                              <1>     ;If something went wrong, turn off echo
   419 0000108A C605(2BC30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   420 00001091 50                  <1>     push rax
   421 00001092 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   422 00001097 CD4F                <1>     int 4Fh
   423 00001099 58                  <1>     pop rax
   424 0000109A EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   425                              <1> .notNet:
   426                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   427                              <1> ; 0Dh or 0Eh
   428 0000109C 803D(2BC30300)00    <1>     cmp byte [printEcho], 00
   429 000010A3 7507                <1>     jnz .echoOn
   430 000010A5 E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   431 000010AA EB05                <1>     jmp short .printExit
   432                              <1> .echoOn:
   433 000010AC E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   434                              <1> .printExit:
   435 000010B1 5F                  <1>     pop rdi
   436                              <1>     return
    18                              <2> %%_ret:
    19 000010B2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   437                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   438 000010B3 E852FFFFFF          <1>     call callInt48h
   439                              <1> .waitNextChar:   ;Here get next char
   440 000010B8 B401                <1>     mov ah, 01h ;ND read
   441 000010BA E85BFBFFFF          <1>     call mainCharIO
   442 000010BF 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   443                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   444 000010C1 53                  <1>     push rbx
   445 000010C2 31DB                <1>     xor ebx, ebx
   446 000010C4 E82B000000          <1>     call getCharDevSFT
   447 000010C9 5B                  <1>     pop rbx
   448                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000010CA 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   449 000010CC 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   450 000010CE E847FBFFFF          <1>     call mainCharIO
   451 000010D3 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   452 000010D5 7514                <1>     jnz .checkBreak2
   453 000010D7 803D(80D80300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   454 000010DE 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   455 000010E4 C605(80D80300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   456                              <1> .checkBreak2:
   457 000010EB 3C03                <1>     cmp al, ETX
   458                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000010ED 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   459 000010EF E94F0F0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   460                              <1> 
   461                              <1> 
   462                              <1> getCharDevSFT:
   463                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   464                              <1> ;Input: bx = zero extended handle number
   465                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   466                              <1> ;        CF=CY => al = Error code, abort operation
   467 000010F4 F605(EBC30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   468 000010FB 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   469                              <1> .getSFT:
   470 000010FD 57                  <1>     push rdi
   471 000010FE E854080000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   472 00001103 4889FE              <1>     mov rsi, rdi
   473 00001106 5F                  <1>     pop rdi
   474                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00001107 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   475                              <1> .swap:
   476                              <1> ;workingSFT is only set for CON calls
   477 00001108 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   478 0000110E 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   479 00001110 488B35(8CC50300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   480 00001117 F8                  <1>     clc
   481                              <1>     return
    18                              <2> %%_ret:
    19 00001118 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   482                              <1> 
   483                              <1> ;------------------------
   484                              <1> ;   Utility functions   :
   485                              <1> ;------------------------
   486                              <1> printCaretASCII:
   487                              <1> ;Input: al = Char to print with a caret
   488                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   489                              <1> ;First check if the char should be careted, and then print normally if so
   490 00001119 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   491 0000111B 0F8364FCFFFF        <1>     jae charOut_B.in
   492 00001121 3C09                <1>     cmp al, TAB
   493 00001123 0F845CFCFFFF        <1>     je charOut_B.in
   494 00001129 3C15                <1>     cmp al, NAK
   495 0000112B 0F8454FCFFFF        <1>     je charOut_B.in
   496 00001131 3C14                <1>     cmp al, DC4
   497 00001133 0F844CFCFFFF        <1>     je charOut_B.in
   498 00001139 50                  <1>     push rax
   499 0000113A B05E                <1>     mov al, "^" ;Get caret in place
   500 0000113C E844FCFFFF          <1>     call charOut_B.in
   501 00001141 58                  <1>     pop rax
   502 00001142 0440                <1>     add al, "@" ;Turn into an ASCII Char
   503 00001144 E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   504                              <1> printCRLF:
   505 00001149 B00D                <1>     mov al, CR
   506 0000114B E835FCFFFF          <1>     call charOut_B.in
   507 00001150 B00A                <1>     mov al, LF
   508 00001152 E92EFCFFFF          <1>     jmp charOut_B.in
   509                              <1> 
   510                              <1> checkBreak:
   511                              <1> ;Reads bytes from CON if there are any bytes to read and 
   512                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   513 00001157 803D(64C30300)01    <1>     cmp byte [inDOS], 1
   514                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000115E 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   515                              <1> ;Returns in al the keystroke that is available IF one is available
   516                              <1> ; or al=0 if no keystroke available
   517 00001160 53                  <1>     push rbx
   518 00001161 56                  <1>     push rsi
   519 00001162 488B35(44C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   520                              <1>     ;Place command code and a zero status word at the same time
   521 00001169 C705(44C40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   521 00001171 0000                <1>
   522                              <1>     ;Place the packet size in the hdrlen field
   523 00001173 C605(42C40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   524 0000117A 488D1D(42C40300)    <1>     lea rbx, critReqHdr
   525 00001181 E82A0F0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   526                              <1>     ;Check if the busy bit is set (No keystroke available)
   527 00001186 66F705(45C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   527 0000118E 02                  <1>
   528 0000118F 7405                <1>     jz .charFound
   529                              <1> .exit:
   530 00001191 30C0                <1>     xor al, al
   531 00001193 5E                  <1>     pop rsi
   532 00001194 5B                  <1>     pop rbx
   533                              <1>     return
    18                              <2> %%_ret:
    19 00001195 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   534                              <1> .charFound:
   535                              <1> ;Keystroke available, proceed
   536 00001196 8A05(4FC40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   537 0000119C 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   538 0000119E 75F1                <1>     jne .exit   ;If not equal exit
   539                              <1> ;Now we pull the char out of the buffer
   540 000011A0 C705(44C40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   540 000011A8 0000                <1>
   541 000011AA C605(42C40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   542                              <1>     ;Place pointers and number of chars
   543 000011B1 C705(58C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   543 000011B9 0000                <1>
   544                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   545 000011BB 488D05(4FC40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   546 000011C2 488905(50C40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   547 000011C9 E8E20E0000          <1>     call goDriver   ;RSI and RBX as before
   548 000011CE E9700E0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   549                              <1> 
   550                              <1> vConSwapDriver:
   551                              <1> ;Sets up the vCon to use the alternative SFT pointer
   552 000011D3 57                  <1>     push rdi
   553 000011D4 C605(EBC30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   554 000011DB 488B3D(F7C50300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   555 000011E2 48893D(8CC50300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   556 000011E9 5F                  <1>     pop rdi
   557                              <1>     return
    18                              <2> %%_ret:
    19 000011EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> ;--------------------------------------------------
   560                              <1> ;      Main Keyboard Buffered Input Function      :
   561                              <1> ;--------------------------------------------------
   562                              <1> buffCharInput_BE:  ;ah = 0Ah
   563                              <1> ;Buffer pointer in rdx
   564                              <1> ; byte [rdx + 0], buffer length
   565                              <1> ; byte [rdx + 1], number of chars in buffer
   566                              <1> ; byte [rdx + 2], buffer start
   567                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   568                              <1> ;Register use
   569                              <1> ; dh = Char offset in internal buffer
   570                              <1> ; dl = Buffer length
   571                              <1> ; bh = Char offset in user buffer
   572                              <1> ; bl = Number of chars already in the buffer
   573                              <1> ; rdi = Internal buffer
   574                              <1> ; rsi = User buffer
   575 000011EB 4889D6              <1>     mov rsi, rdx
   576 000011EE 66AD                <1>     lodsw   ;Get buffer metadata in ax
   577 000011F0 84C0                <1>     test al, al
   578                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011F2 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   579 000011F4 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   580 000011F7 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   581 000011F9 7606                <1>     jbe .avoidcheck
   582 000011FB 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   583 000011FF 7402                <1>     je .functionKeyOk
   584                              <1> .avoidcheck:
   585 00001201 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   586                              <1> .functionKeyOk:
   587 00001203 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   588 00001206 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   589                              <1> .breakEP:
   590 00001208 8A05(28C20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   591 0000120E 8805(29C20300)      <1>     mov byte [vConCurCnt], al
   592 00001214 56                  <1>     push rsi    ;Push user buffer address
   593 00001215 488D3D(2AC20300)    <1>     lea rdi, vConBuffer
   594 0000121C C605(7AC50300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   595                              <1> .mainLoop:
   596 00001223 E8B9FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   597 00001228 3C0A                <1>     cmp al, LF
   598 0000122A 7505                <1>     jne .checkControlChars
   599                              <1> .mainLoop2:
   600 0000122C E8B0FCFFFF          <1>     call charIn_B
   601                              <1> .checkControlChars:
   602 00001231 3C06                <1>     cmp al, ACK
   603 00001233 74F7                <1>     je .mainLoop2   ;Get another char
   604 00001235 3A05FFEDFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   605 0000123B 0F8426010000        <1>     je .escape
   606 00001241 3C7F                <1>     cmp al, DEL
   607 00001243 0F8489000000        <1>     je .delete
   608 00001249 3C08                <1>     cmp al, BSP
   609 0000124B 0F8481000000        <1>     je .delete
   610 00001251 3C17                <1>     cmp al, ETB
   611                              <1>     ;Add space for patched jump instructions
   612 00001253 9090909090          <1>     db 5 dup (90h)  ;NOP
   613 00001258 3C15                <1>     cmp al, NAK
   614 0000125A 9090909090          <1>     db 5 dup (90h)
   615 0000125F 3C0D                <1>     cmp al, CR
   616 00001261 744C                <1>     je .carriageReturn
   617 00001263 3C0A                <1>     cmp al, LF
   618 00001265 7461                <1>     je .lineFeed
   619 00001267 3A05CEEDFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   620 0000126D 7429                <1>     je .break
   621                              <1> .checkIfCanInsert:
   622 0000126F 38D6                <1>     cmp dh, dl
   623 00001271 731C                <1>     jae .bufOflw
   624 00001273 AA                  <1>     stosb   ;Store the byte and increment rdi!
   625 00001274 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   626 00001276 E89EFEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   627 0000127B 803D(7AC50300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   628 00001282 75A8                <1>     jne .mainLoop2
   629                              <1>     ;IF not in insert mode, we fall here
   630                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   631                              <1>     ; or insert chars if needed.
   632 00001284 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   633 00001286 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   634 00001288 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   635 0000128B FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   636 0000128D EB9D                <1>     jmp short .mainLoop2
   637                              <1> .bufOflw:
   638                              <1> ;Buffer overflow
   639 0000128F B007                <1>     mov al, BEL ;Sound the bell
   640 00001291 E8EFFAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   641 00001296 EB94                <1>     jmp short .mainLoop2
   642                              <1> .break:
   643                              <1> ;Break, Place a "\", and do a CRLF
   644 00001298 B05C                <1>     mov al, "\"
   645 0000129A E8E6FAFFFF          <1>     call charOut_B.in
   646 0000129F 5E                  <1>     pop rsi ;Realign stack
   647                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   648 000012A0 E8A4FEFFFF          <1>     call printCRLF
   649                              <1>     ;Align to next tabstop
   650 000012A5 E862FBFFFF          <1>     call charOut_B.tab
   651 000012AA E959FFFFFF          <1>     jmp .breakEP
   652                              <1> .carriageReturn:
   653 000012AF AA                  <1>     stosb
   654 000012B0 E8D0FAFFFF          <1>     call charOut_B.in
   655 000012B5 5F                  <1>     pop rdi ;User buffer address was pushed 
   656 000012B6 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   657 000012B9 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   658                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   659 000012BB 488D35(2AC20300)    <1>     lea rsi, vConBuffer
   660 000012C2 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   661 000012C5 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   662                              <1>     return
    18                              <2> %%_ret:
    19 000012C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   663                              <1> .lineFeed:
   664 000012C8 E87CFEFFFF          <1>     call printCRLF
   665 000012CD E95AFFFFFF          <1>     jmp .mainLoop2
   666                              <1> .delete:
   667 000012D2 E805000000          <1>     call .removeChar
   668 000012D7 E950FFFFFF          <1>     jmp .mainLoop2
   669                              <1> .removeChar:
   670 000012DC 84F6                <1>     test dh, dh ;Is char count 0?
   671 000012DE 741C                <1>     jz .normalChar   ;If so, skip going back!
   672 000012E0 E868000000          <1>     call .vConErase
   673 000012E5 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   674 000012E7 3C20                <1>     cmp al, SPC
   675 000012E9 7311                <1>     jae .normalChar
   676 000012EB 3C09                <1>     cmp al, TAB
   677 000012ED 7420                <1>     je .eraTab
   678 000012EF 3C15                <1>     cmp al, NAK
   679 000012F1 7409                <1>     je .normalChar
   680 000012F3 3C14                <1>     cmp al, DC4
   681 000012F5 7405                <1>     je .normalChar
   682 000012F7 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   683                              <1> .normalChar:
   684 000012FC 803D(7AC50300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   685                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001303 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   686 00001305 84FF                <1>     test bh, bh ;Beginning of user buffer?
   687                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001307 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   688 00001309 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   689 0000130C FECF                <1>     dec bh
   690                              <1>     return
    18                              <2> %%_ret:
    19 0000130E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   691                              <1> .eraTab:
   692                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   693                              <1> ; up to a tab stop worth of space chars printed
   694 0000130F 57                  <1>     push rdi
   695 00001310 48FFCF              <1>     dec rdi
   696 00001313 FD                  <1>     std ;Go backwards
   697 00001314 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   698 00001317 B020                <1>     mov al, SPC
   699 00001319 53                  <1>     push rbx
   700 0000131A BB07000000          <1>     mov ebx, 7
   701 0000131F 67E30D              <1>     jecxz .onTabstop
   702                              <1> .scanString:
   703 00001322 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   704 00001323 7608                <1>     jbe .notChar    ;No, skip handling
   705 00001325 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   706 00001329 740A                <1>     je .tabChar
   707 0000132B FECB                <1>     dec bl
   708                              <1> .notChar:
   709 0000132D E2F3                <1>     loop .scanString
   710                              <1> .onTabstop:
   711 0000132F 2A1D(29C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   712                              <1> .tabChar:
   713 00001335 28F3                <1>     sub bl, dh  ;Same on tabstop
   714 00001337 00D9                <1>     add cl, bl
   715 00001339 80E107              <1>     and cl, 7
   716 0000133C 5B                  <1>     pop rbx
   717 0000133D 5F                  <1>     pop rdi
   718 0000133E FC                  <1>     cld
   719 0000133F 74BB                <1>     jz .normalChar
   720                              <1>     ;Now erase all the spaces placed on the vCon
   721                              <1> .vConDelTab:
   722 00001341 E80C000000          <1>     call .vConEraseNoDec
   723 00001346 E2F9                <1>     loop .vConDelTab
   724 00001348 E9AFFFFFFF          <1>     jmp .normalChar
   725                              <1> .vConErase:
   726                              <1> ;Erase the char on the vCon
   727                              <1> ;Return through the output function
   728 0000134D 48FFCF              <1>     dec rdi ;Go back a space in the 
   729 00001350 FECE                <1>     dec dh  ;Decrement char count in the buffer
   730                              <1> .vConEraseNoDec:
   731 00001352 B008                <1>     mov al, BSP ;Move cursor back
   732 00001354 E82CFAFFFF          <1>     call charOut_B.in
   733 00001359 B020                <1>     mov al, SPC ;Replace with a space
   734 0000135B E825FAFFFF          <1>     call charOut_B.in
   735 00001360 B008                <1>     mov al, BSP ;Move cursor back again
   736 00001362 E91EFAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   737                              <1> .escape:
   738                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   739                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   740                              <1> ; including the function keys.
   741 00001367 FF25C5ECFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   742                              <1> .f2:
   743 0000136D E846000000          <1>     call .fCommon2
   744 00001372 EB0C                <1>     jmp short .fCommon
   745                              <1> .f3:
   746 00001374 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   747 00001377 28F9                <1>     sub cl, bh  ;Sub our current position
   748 00001379 EB05                <1>     jmp short .fCommon
   749                              <1> .f1:
   750 0000137B B901000000          <1>     mov ecx, 1  ;Get one char
   751                              <1> .fCommon:
   752 00001380 C605(7AC50300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   753 00001387 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   754 00001389 0F849DFEFFFF        <1>     je .mainLoop2
   755 0000138F 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   756 00001391 0F8495FEFFFF        <1>     je .mainLoop2
   757                              <1>     ;Else, copy byte by byte, and retain char in al
   758 00001397 AC                  <1>     lodsb
   759 00001398 AA                  <1>     stosb
   760 00001399 E87BFDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   761 0000139E FEC7                <1>     inc bh
   762 000013A0 FEC6                <1>     inc dh
   763 000013A2 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   764 000013A4 E983FEFFFF          <1>     jmp .mainLoop2
   765                              <1> .f4:
   766 000013A9 E80A000000          <1>     call .fCommon2
   767 000013AE 4801CE              <1>     add rsi, rcx
   768 000013B1 00CF                <1>     add bh, cl
   769 000013B3 E974FEFFFF          <1>     jmp .mainLoop2
   770                              <1> .fCommon2:
   771 000013B8 E824FBFFFF          <1>     call charIn_B   ;Get a char in al
   772 000013BD 3A0577ECFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   773 000013C3 750B                <1>     jne .fnotEscape
   774                              <1>     ;Get another char if they typed escape and force it in the buffer
   775                              <1>     ; Do not return to caller
   776 000013C5 E817FBFFFF          <1>     call charIn_B
   777                              <1> .fforceExit:
   778 000013CA 59                  <1>     pop rcx ;Get original return address from stack
   779 000013CB E95CFEFFFF          <1>     jmp .mainLoop2
   780                              <1> .fnotEscape:
   781 000013D0 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   782 000013D3 28F9                <1>     sub cl, bh
   783 000013D5 74F3                <1>     jz .fforceExit
   784 000013D7 FFC9                <1>     dec ecx
   785 000013D9 74EF                <1>     jz .fforceExit
   786 000013DB 57                  <1>     push rdi
   787 000013DC 4889F7              <1>     mov rdi, rsi
   788 000013DF 48FFC7              <1>     inc rdi
   789 000013E2 F2AE                <1>     repne scasb ;Search for the char to start printing from
   790 000013E4 5F                  <1>     pop rdi
   791 000013E5 75E3                <1>     jne .fforceExit ;If char not found, return
   792 000013E7 F6D1                <1>     not cl
   793 000013E9 00D9                <1>     add cl, bl
   794 000013EB 28F9                <1>     sub cl, bh
   795                              <1>     return
    18                              <2> %%_ret:
    19 000013ED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   796                              <1> .f5:
   797 000013EE B040                <1>     mov al, "@"
   798 000013F0 E890F9FFFF          <1>     call charOut_B.in   ;Print the char
   799 000013F5 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   800 000013F6 57                  <1>     push rdi
   801 000013F7 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   802 000013FC 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   803 000013FD 88F3                <1>     mov bl, dh
   804 000013FF E99CFEFFFF          <1>     jmp .breakAlt
   805                              <1> .f6:
   806                              <1> ;If the user wants to insert a EOF, they can use F6
   807 00001404 B01A                <1>     mov al, EOF
   808 00001406 E964FEFFFF          <1>     jmp .checkIfCanInsert
   809                              <1> .f7:
   810                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   811 0000140B 8A0529ECFFFF        <1>     mov al, byte [extESC]
   812 00001411 E959FEFFFF          <1>     jmp .checkIfCanInsert
   813                              <1> .toggleIns:
   814 00001416 F615(7AC50300)      <1>     not byte [vConInsert]   ;Toggle
   815                              <1>     return
    18                              <2> %%_ret:
    19 0000141C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   816                              <1> .eDel:
   817 0000141D 38DF                <1>     cmp bh, bl
   818 0000141F 0F8407FEFFFF        <1>     je .mainLoop2
   819 00001425 FEC7                <1>     inc bh
   820 00001427 48FFC6              <1>     inc rsi
   821 0000142A E9FDFDFFFF          <1>     jmp .mainLoop2
   822                              <1> 
   823                              <1> editKeys:
   824                              <1> ;Our Default Extended keys handler
   825 0000142F E8ADFAFFFF          <1>     call charIn_B   ;Get the next char in al
   826 00001434 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   827 00001439 57                  <1>     push rdi    ;Preserve rdi
   828 0000143A 488D3DFBEBFFFF      <1>     lea rdi, extKeyTbl
   829 00001441 57                  <1>     push rdi
   830                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   831                              <1>     ; offset of function from extKeyTbl
   832                              <1> .lp:
   833 00001442 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   834 00001443 7411                <1>     je .charFound
   835 00001445 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   836 00001447 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   837 0000144D 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   838 00001454 EBEC                <1>     jmp short .lp
   839                              <1> .charFound:
   840 00001456 59                  <1>     pop rcx ;Pop back the effective address of the table
   841 00001457 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   842 0000145B 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   843 0000145E 5F                  <1>     pop rdi
   844 0000145F FFE1                <1>     jmp rcx
    26                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    27                              <1> ;Major kernel date time functions and subroutines
    28                              <1> 
    29                              <1> getDate:           ;ah = 2Ah
    30 00001461 E849000000          <1>     call readDateTimeRecord ;Update date if necessary
    31 00001466 E8C70F0000          <1>     call getUserRegs
    32 0000146B 8A15(E5C30300)      <1>     mov dl, byte [dayOfMonth]
    33 00001471 8A35(E6C30300)      <1>     mov dh, byte [monthOfYear]
    34 00001477 0FB70D(E7C30300)    <1>     movzx ecx, word [years]
    35 0000147E 8A05(EAC30300)      <1>     mov al, byte [dayOfWeek]
    36 00001484 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    37 00001488 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    38                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 0000148C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                              <1> setDate:           ;ah = 2Bh
    40                              <1> getTime:           ;ah = 2Ch
    41 0000148D E81D000000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    42 00001492 E89B0F0000          <1>     call getUserRegs
    43 00001497 668B0D(6FC50300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    44 0000149E 668B15(70C50300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    45 000014A5 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    46 000014A9 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    47                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000014AD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> setTime:           ;ah = 2Dh
    49                              <1>     return
    18                              <2> %%_ret:
    19 000014AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    50                              <1> 
    51                              <1> ;------------------------
    52                              <1> ;   Utility functions   :
    53                              <1> ;------------------------
    54                              <1> readDateTimeRecord:
    55                              <1> ;Will read the clock using the primary request header
    56 000014AF 53                  <1>     push rbx
    57 000014B0 51                  <1>     push rcx
    58 000014B1 52                  <1>     push rdx
    59 000014B2 56                  <1>     push rsi
    60 000014B3 55                  <1>     push rbp
    61                              <1> 
    62 000014B4 66C705(81D80300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
    62 000014BC 00                  <1>
    63 000014BD 488D1D(6CC50300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    64 000014C4 B906000000          <1>     mov ecx, 6
    65 000014C9 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    66                              <1> ; rbp = DPB ptr | NullPtr if a char dev
    67                              <1> ; rbx = Data storage buffer ptr
    68                              <1> ; ecx = Number of sectors to transfer
    69                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
    70 000014CC E8920E0000          <1>     call primReqReadSetup   ;rbx now points to request header
    71 000014D1 488B35(3CC00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    72 000014D8 E8D30B0000          <1>     call goDriver
    73 000014DD 0FB705(6CC50300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
    74 000014E4 0FB70D(6EC50300)    <1>     movzx ecx, word [CLOCKrecrd + clkStruc.minutes]    ;cl = Mins, ch = Hours
    75 000014EB 0FB715(70C50300)    <1>     movzx edx, word [CLOCKrecrd + clkStruc.hseconds]   ;dl = hSecs, dh = Secs
    76                              <1> ;Here we have:  ax = Days since 1/1/1980, 
    77                              <1> ;               cl = Minutes, ch = Hours, 
    78                              <1> ;               dl = HSeconds, dh = Seconds
    79                              <1> ;
    80                              <1> ;Updates the internal date fields
    81                              <1> ;Internal time fields are in the clock record
    82                              <1> ;So now we check if the number of days since 1980 are the same.
    83                              <1> ;If so, we can skip updating.
    84 000014F2 663B05(E8C30300)    <1>     cmp ax, word [daysOffset]
    85 000014F9 7466                <1>     je .exit    ;Return if equal
    86 000014FB 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
    87 00001500 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
    88 00001502 668905(E8C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
    89                              <1>     ;Now want to update years, month and day fields
    90                              <1>     ;ax has the number of days since 01/01/1980
    91                              <1>     ;Get days in a 4 year period
    92 00001509 BBB5050000          <1>     mov ebx, 365*4 + 1
    93 0000150E 31D2                <1>     xor edx, edx
    94 00001510 89D1                <1>     mov ecx, edx  ;Zero ecx
    95 00001512 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
    96                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
    97                              <1>     ;edx has offset into current 4 year bunch
    98 00001514 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
    99 00001519 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   100 0000151B 7210                <1>     jb .foundBunch
   101 0000151D 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   102 0000151F FFC1                <1>     inc ecx
   103 00001521 FFCB                <1>     dec ebx ;Number of days in a normal year
   104                              <1> .findBunch:
   105 00001523 39DA                <1>     cmp edx, ebx
   106 00001525 7206                <1>     jb .foundBunch
   107 00001527 29DA                <1>     sub edx, ebx
   108 00001529 FFC1                <1>     inc ecx
   109 0000152B EBF6                <1>     jmp short .findBunch
   110                              <1> .foundBunch:
   111                              <1>     ;If ecx = 0, february has 29 days!
   112                              <1>     ;eax has number of four year bunches elapsed since 1980
   113 0000152D C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   114 00001530 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   115                              <1>     ;ecx now has the number of years since 1980
   116 00001532 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   117                              <1> ;edx has number of days into the year we are in
   118                              <1> ;eax has number of days in Feb for this year
   119 00001537 488D351FEBFFFF      <1>     lea rsi, monthsTbl
   120 0000153E 31C9                <1>     xor ecx, ecx    ;Use as month counter
   121                              <1> .monthSearch:
   122 00001540 FFC1                <1>     inc ecx ;Start from 1
   123 00001542 AA                  <1>     stosb   ;Get value in al and inc rsi
   124 00001543 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   125 00001546 39C2                <1>     cmp edx, eax
   126 00001548 7204                <1>     jb .monthFound
   127 0000154A 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   128 0000154C EBF2                <1>     jmp short .monthSearch
   129                              <1> .monthFound:
   130                              <1>     ;cl has the month (01h-0Ch)
   131                              <1>     ;dl has the day of the month - 1
   132 0000154E FFC2                <1>     inc edx
   133 00001550 880D(E6C30300)      <1>     mov byte [monthOfYear], cl
   134 00001556 8815(E5C30300)      <1>     mov byte [dayOfMonth], dl
   135 0000155C E806000000          <1>     call setDayofWeek
   136                              <1> .exit:
   137 00001561 5D                  <1>     pop rbp
   138 00001562 5E                  <1>     pop rsi
   139 00001563 5A                  <1>     pop rdx
   140 00001564 59                  <1>     pop rcx
   141 00001565 5B                  <1>     pop rbx
   142                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 00001566 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   143                              <1> 
   144                              <1> setDayofWeek:
   145                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   146 00001567 0FB705(E8C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   147 0000156E 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   148                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   149 00001573 31D2                <1>     xor edx, edx
   150 00001575 B907000000          <1>     mov ecx, 7   
   151 0000157A F7F1                <1>     div ecx  ;Get remainder in dl
   152 0000157C 8815(EAC30300)      <1>     mov byte [dayOfWeek], dl
   153                              <1> ;Set ZF to indicate all ok
   154 00001582 31C0                <1>     xor eax, eax
   155                              <1>     return
    18                              <2> %%_ret:
    19 00001584 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> 
   157                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   158                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   159                              <1> ;Input: cl = Year - 1980
   160                              <1> ;Output: al = Number of days in February
   161 00001585 880D(E7C30300)      <1>     mov byte [years], cl    ;Save this figure
   162 0000158B F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   163 0000158E 51                  <1>     push rcx
   164 0000158F 57                  <1>     push rdi
   165 00001590 B81C000000          <1>     mov eax, 28  ;Usual days in february
   166 00001595 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   167 0000159A 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   168 0000159D 488D3DBAEAFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   169 000015A4 AA                  <1>     stosb   ;Store the word in rdi
   170 000015A5 5F                  <1>     pop rdi
   171 000015A6 59                  <1>     pop rcx
   172                              <1>     return
    18                              <2> %%_ret:
    19 000015A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    28                              <1> openFileFCB:       ;ah = 0Fh
    29                              <1> closeFileFCB:      ;ah = 10h
    30                              <1> findFirstFileFCB:  ;ah = 11h
    31                              <1> findNextFileFCB:   ;ah = 12h
    32                              <1> deleteFileFCB:     ;ah = 13h
    33                              <1> sequentialReadFCB: ;ah = 14h
    34                              <1> sequentialWriteFCB:;ah = 15h
    35                              <1> createFileFCB:     ;ah = 16h
    36                              <1> renameFileFCB:     ;ah = 17h
    37 000015A8 C3                  <1>     ret
    38                              <1> setDTA:            ;ah = 1Ah
    39                              <1> ;Called with:
    40                              <1> ;   rdx = Pointer to the new default DTA
    41 000015A9 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
    42 000015B0 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    43 000015B4 488915(73C30300)    <1>     mov qword [currentDTA], rdx
    44 000015BB C3                  <1>     ret
    45                              <1> randomReadFCB:     ;ah = 21h
    46                              <1> randomWriteFCB:    ;ah = 22h
    47                              <1> getFileSizeFCB:    ;ah = 23h
    48                              <1> setRelRecordFCB:   ;ah = 24h
    49                              <1> randBlockReadFCB:  ;ah = 27h
    50                              <1> randBlockWriteFCB: ;ah = 28h
    51                              <1> parseFilenameFCB:  ;ah = 29h
    52 000015BC C3                  <1>     ret
    53                              <1> getDTA:            ;ah = 2Fh
    54 000015BD 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
    55 000015C4 488B1D(73C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    56 000015CB 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    57 000015CF C3                  <1>     ret
    28                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    29                              <1> ;-----------------------------------:
    30                              <1> ;    File Handle Kernel routines    :
    31                              <1> ;-----------------------------------:
    32                              <1> 
    33                              <1> createFileHdl:     ;ah = 3Ch, handle function
    34                              <1>     return 
    18                              <2> %%_ret:
    19 000015D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                              <1> openFileHdl:       ;ah = 3Dh, handle function
    36                              <1>     return 
    18                              <2> %%_ret:
    19 000015D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    37                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    38                              <1>     return 
    18                              <2> %%_ret:
    19 000015D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                              <1> readFileHdl:       ;ah = 3Fh, handle function
    40 000015D3 488D35C2000000      <1>     lea rsi, readBytes
    41                              <1> .common:
    42 000015DA E85E030000          <1>     call getSFTPtr ;Get SFT ptr in rdi (if file is r/w-able from machine)
    43 000015DF 7221                <1>     jb .error
    44 000015E1 E84A020000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
    45 000015E6 FF35(73C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
    46 000015EC FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
    47 000015EE 8F05(73C30300)      <1>     pop qword [currentDTA]
    48 000015F4 720C                <1>     jb .errorFromDataTransfer
    49 000015F6 E8370E0000          <1>     call getUserRegs
    50 000015FB 890E                <1>     mov dword [rsi + callerFrame.rax], ecx  ;Put actual number of bytes tfrd
    51 000015FD 806658FE            <1>     and byte [rsi + callerFrame.flags], 0FEh    ;Clear CF
    52                              <1>     return 
    18                              <2> %%_ret:
    19 00001601 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> ;Temporary Error handler, simply return with CF set
    54                              <1> .error:
    55                              <1> .errorFromDataTransfer:
    56 00001602 E82B0E0000          <1>     call getUserRegs
    57 00001607 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    58                              <1>     return 
    18                              <2> %%_ret:
    19 0000160B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    59                              <1> writeFileHdl:      ;ah = 40h, handle function
    60 0000160C 488D35E4010000      <1>     lea rsi, writeBytes
    61 00001613 E9C2FFFFFF          <1>     jmp readFileHdl.common
    62                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    63                              <1>     return 
    18                              <2> %%_ret:
    19 00001618 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    64                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    65                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    66 00001619 E81F030000          <1>     call getSFTPtr
    67 0000161E 7326                <1>     jnc .sftValid
    68                              <1>     ;Error code and exit
    69                              <1>     ;al (eax) has error code for bad file handle
    70 00001620 668905(67C30300)    <1>     mov word [errorExCde], ax
    71                              <1> .exitBad:
    72 00001627 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk  ;Unknown Locus
    73 0000162E C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Reinput data
    74 00001635 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd
    75 0000163C E8F10D0000          <1>     call getUserRegs    ;Get user regs in rsi
    76 00001641 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    77                              <1>     return 
    18                              <2> %%_ret:
    19 00001645 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    78                              <1> .sftValid:
    79 00001646 3C03                <1>     cmp al, 3
    80 00001648 7206                <1>     jb .validFunction
    81                              <1>     ;Error code and exit
    82 0000164A 66B80100            <1>     mov ax, errInvFnc
    83 0000164E EBD7                <1>     jmp short .exitBad
    84                              <1> .validFunction:
    85 00001650 3C01                <1>     cmp al, 1
    86 00001652 7713                <1>     ja .seekend
    87 00001654 7203                <1>     jb .seekset
    88                              <1> ;Here we are at seekcur, seek from current (signed)
    89 00001656 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    90                              <1> .seekset:
    91                              <1> ;Seek from the start (unsigned)
    92 00001659 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    93 0000165C E8D10D0000          <1>     call getUserRegs    ;Get user regs in rsi
    94 00001661 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
    95 00001664 30C0                <1>     xor al, al  ;Return OK!
    96                              <1>     return 
    18                              <2> %%_ret:
    19 00001666 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    97                              <1> .seekend:
    98                              <1> ;Here we are at seekend, seek from end (signed)
    99 00001667 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   100 0000166D 7505                <1>     jnz .netCheck
   101                              <1> .proceedDisk:
   102 0000166F 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   103 00001672 EBE5                <1>     jmp short .seekset
   104                              <1> .netCheck:
   105 00001674 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   106 0000167A 75F3                <1>     jnz .proceedDisk
   107 0000167C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   108                              <1>     ;Check it's share mode
   109 00001680 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   110 00001685 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   111 0000168A 7407                <1>     je .netSeek
   112 0000168C 3D30000000          <1>     cmp eax, denyReadShare
   113 00001691 75DC                <1>     jne .proceedDisk
   114                              <1> .netSeek:
   115 00001693 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   116 00001698 CD4F                <1>     int 4fh
   117                              <1>     ;TEMPORARY RETURN!!!
   118                              <1>     return
    18                              <2> %%_ret:
    19 0000169A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   119                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   120                              <1> ioctrl:            ;ah = 44h, handle function
   121                              <1> duplicateHandle:   ;ah = 45h, handle function
   122                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   123                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   124                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   125                              <1> renameFile:        ;ah = 56h
   126                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   127                              <1> createNewFile:     ;ah = 5Bh
   128                              <1> lockUnlockFile:    ;ah = 5Ch
   129                              <1> setHandleCount:    ;ah = 67h
   130                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   131                              <1>     return 
    18                              <2> %%_ret:
    19 0000169B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   132                              <1> ;-----------------------------------:
   133                              <1> ;       Main File IO Routines       :
   134                              <1> ;-----------------------------------:
   135                              <1> readBytes:
   136                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   137                              <1> ;Input: ecx = Number of bytes to read
   138                              <1> ;Output: ecx = Number of bytes read
   139                              <1> ;Number of bytes read 
   140 0000169C E897010000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   141 000016A1 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   142 000016A5 240F                <1>     and al, 0Fh ;Eliminate except access mode
   143 000016A7 3C01                <1>     cmp al, WriteAccess
   144 000016A9 750E                <1>     jne .readable
   145 000016AB B805000000          <1>     mov eax, errAccDen
   146 000016B0 668905(67C30300)    <1>     mov word [errorExCde], ax
   147 000016B7 F9                  <1>     stc
   148                              <1>     return ;Exit with error code 
    18                              <2> %%_ret:
    19 000016B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> .readable:
   150 000016B9 E8BB010000          <1>     call setupVarsForTransfer
   151 000016BE 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   152 000016C1 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   153 000016C7 740A                <1>     jz .notRedir
   154 000016C9 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   155 000016CE CD4F                <1>     int 4fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   156                              <1>     return 
    18                              <2> %%_ret:
    19 000016D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> .exitOk:
   158 000016D1 F8                  <1>     clc
   159                              <1>     return 
    18                              <2> %%_ret:
    19 000016D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   160                              <1> .notRedir:
   161 000016D3 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   162 000016D9 7510                <1>     jnz readCharDev
   163 000016DB E80A100000          <1>     call dosCrit1Enter
   164 000016E0 E80B010000          <1>     call readDiskFile
   165 000016E5 E80A100000          <1>     call dosCrit1Exit
   166                              <1>     return 
    18                              <2> %%_ret:
    19 000016EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   167                              <1> readCharDev:
   168                              <1> ;rdi points to sft for char dev to read
   169                              <1> ;ecx has the number of bytes to transfer
   170                              <1> ;Vars have been set up and DTA has the transfer address
   171                              <1> ;Returns in ecx, the actual bytes transferred
   172 000016EB C605(66C30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   173 000016F2 488B3D(73C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   174 000016F9 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   175 000016FD F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   176 00001700 0F8413010000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   177 00001706 F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   178 00001709 7507                <1>     jnz .notNul
   179                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   180                              <1>     ;NUL never transfers bytes 
   181 0000170B 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   182 0000170D E907010000          <1>     jmp rwExitOk    ;Goto exit
   183                              <1> .notNul:
   184 00001712 F6C320              <1>     test bl, charDevBinary
   185 00001715 750A                <1>     jnz .binary
   186                              <1>     ;Here if the device is in ASCII mode
   187 00001717 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   188 0000171A 7457                <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   189                              <1> .consoleInput:
   190                              <1>     ;Console input here
   191 0000171C E8B2FAFFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   192                              <1>     
   193                              <1> 
   194                              <1> .binary:
   195                              <1>     ;Setup registers for transfer
   196 00001721 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   197 00001724 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   198                              <1>     ;ecx has the number of bytes to transfer directly
   199 00001727 E8370C0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   200 0000172C 488B35(7CC50300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   201 00001733 E878090000          <1>     call goDriver   ;Make the request
   202 00001738 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   203 0000173B 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   204 00001742 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   205 00001748 7412                <1>     jz .binNoError
   206                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   207 0000174A B486                <1>     mov ah, 86h ;Char device, data error signature
   208 0000174C E862080000          <1>     call charDevErr   ;ah = has part of the error 
   209                              <1>     ;al now has the response
   210                              <1>     ;Cannot return Abort as Abort returns to command interpreter through DOS
   211 00001751 3C00                <1>     cmp al, critIgnore
   212 00001753 7407                <1>     je .binNoError ;Simply proceed as normal
   213 00001755 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   214 00001758 3C03                <1>     cmp al, critFail
   215 0000175A 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   216                              <1>     ;Fallthrough here for fail!
   217                              <1> .failExit:
   218                              <1>     
   219                              <1> .binNoError:
   220                              <1>     ;Get number of bytes transferred into 
   221 0000175C 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   222 00001762 F7D8                <1>     neg eax ;make it into -eax
   223 00001764 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   224                              <1>     ;ecx now has bytes left to transfer
   225 00001768 50                  <1>     push rax    ;Save value on stack
   226 00001769 31C0                <1>     xor eax, eax ;Set ZF
   227 0000176B FFC0                <1>     inc eax ;Clear ZF
   228 0000176D 58                  <1>     pop rax ;Get back the original value
   229 0000176E E9A6000000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   230                              <1> .generalASCII:
   231                              <1>     ;ecx has bytes to transfer here
   232                              <1>     ;Setup registers for transfer
   233 00001773 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   234 00001776 51                  <1>     push rcx
   235 00001777 B901000000          <1>     mov ecx, 1  ;Get one char
   236 0000177C 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   237 0000177F E8DF0B0000          <1>     call primReqReadSetup   ;Setup request
   238 00001784 59                  <1>     pop rcx
   239                              <1>     ;rbx now has request header ptr
   240 00001785 488B35(7CC50300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   241                              <1> .asciiReadChar:
   242 0000178C 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   243 0000178F E8C3F9FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
   244 00001794 E817090000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   245 00001799 0FB73D(1BC40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   246 000017A0 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   247 000017A6 741E                <1>     jz .asciiNoError
   248 000017A8 E806080000          <1>     call charDevErr    ;Call Int 44h
   249                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   250 000017AD C705(2EC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   250 000017B5 0000                <1>
   251 000017B7 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   252 000017BA 3C03                <1>     cmp al, critFail
   253 000017BC 749E                <1>     je .failExit
   254 000017BE 3C01                <1>     cmp al, critRetry
   255 000017C0 74CA                <1>     je .asciiReadChar
   256                              <1>     ;Ignore here, pretend NULL CHAR was read
   257 000017C2 30C0                <1>     xor al, al
   258 000017C4 EB11                <1>     jmp short .asciiIgnoreEP
   259                              <1> .asciiNoError:
   260                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   261                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   262                              <1> ;Preserve RBX, RSI
   263                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   264 000017C6 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   265 000017C9 813D(2EC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   265 000017D1 0000                <1>
   266 000017D3 7544                <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   267 000017D5 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   268                              <1> .asciiIgnoreEP:
   269 000017D7 48FF05(26C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   270 000017DE 48FFC7              <1>     inc rdi ;Also advance register pointer
   271 000017E1 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   272 000017E3 7434                <1>     je rwExitOk
   273 000017E5 3C0D                <1>     cmp al, CR  ;Was this char CR?
   274 000017E7 E0A3                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   275                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   276 000017E9 FEC0                <1>     inc al  ;make ZF=NZ
   277 000017EB E929000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   278                              <1>     
   279                              <1> readDiskFile:
   280 000017F0 C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   281                              <1> 
   282                              <1> writeBytes:
   283                              <1> ;Writes the bytes from the user buffer
   284 000017F7 E83C000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   285 000017FC 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   286 00001800 240F                <1>     and al, 0Fh ;Eliminate except access mode
   287 00001802 3C00                <1>     cmp al, ReadAccess
   288 00001804 750E                <1>     jne .writeable
   289 00001806 B805000000          <1>     mov eax, errAccDen
   290 0000180B 668905(67C30300)    <1>     mov word [errorExCde], ax
   291 00001812 F9                  <1>     stc
   292                              <1>     return ;Exit with error code 
    18                              <2> %%_ret:
    19 00001813 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> .writeable:
   294 00001814 E860000000          <1>     call setupVarsForTransfer
   295                              <1> 
   296                              <1> rwExitOk:
   297                              <1> ;Input: ecx = Number of bytes left to transfer!
   298                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
   299 00001819 890D(3FC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
   300 0000181F 7509                <1>     jnz .skipbitClear
   301 00001821 E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
   302                              <1>     ;The disk transfer must've flushed by now. 
   303 00001826 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokDevNotFlush|charDevNoEOF) ;OR
   304                              <1>     ;Next char dev read should give EOF.
   305                              <1> .skipbitClear:  ;Or skip that entirely
   306 0000182A E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
   307                              <1>     return 
    18                              <2> %%_ret:
    19 0000182F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   308                              <1> rwExitBad:
   309                              <1> ;-----------------------------------:
   310                              <1> ;        File Handle routines       :
   311                              <1> ;-----------------------------------:
   312                              <1> 
   313                              <1> setCurrentSFT:
   314                              <1> ;Set the pointer in rdi as current SFT 
   315 00001830 48893D(F7C50300)    <1>     mov qword [currentSFT], rdi
   316                              <1>     return 
    18                              <2> %%_ret:
    19 00001837 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   317                              <1> getCurrentSFT:
   318                              <1> ;Get the current SFT pointer in rdi
   319 00001838 488B3D(F7C50300)    <1>     mov rdi, qword [currentSFT]
   320                              <1>     return 
    18                              <2> %%_ret:
    19 0000183F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> updateCurrentSFT:
   322                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   323                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
   324 00001840 57                  <1>     push rdi
   325 00001841 488B3D(F7C50300)    <1>     mov rdi, qword [currentSFT]
   326 00001848 8B0D(3BC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
   327 0000184E 2B0D(3FC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
   328                              <1>     ;ecx has bytes transferred
   329 00001854 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
   330 0000185A 751A                <1>     jnz .exit
   331 0000185C 50                  <1>     push rax
   332 0000185D 8B05(17C60300)      <1>     mov eax, dword [currClustD]
   333 00001863 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
   334 00001866 8B05(13C60300)      <1>     mov eax, dword [currClustF]
   335 0000186C 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
   336 0000186F 58                  <1>     pop rax
   337 00001870 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
   338 00001873 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
   339                              <1> .exit:
   340 00001876 5F                  <1>     pop rdi
   341 00001877 F8                  <1>     clc
   342                              <1>     return 
    18                              <2> %%_ret:
    19 00001878 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   343                              <1> setupVarsForTransfer:
   344                              <1> ;Computes the actual bytes to be transferred and 
   345                              <1> ; sets up internal variables for the transfer. 
   346                              <1> ;Works for both reading and writing
   347                              <1> ;Input: ecx = User desired Bytes to transfer
   348                              <1> ;       rdi = SFT pointer for the file
   349                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   350                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
   351                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
   352                              <1> ;
   353                              <1> ;Note: Does not account for a FULL disk. When writing,
   354                              <1> ; if the disk will get full as a result of the write,
   355                              <1> ; stop at the last byte before the transfer. If the 
   356                              <1> ; file pointer is past the last free byte, write 0
   357 00001879 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
   358 0000187D 488935(7CC50300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
   359 00001884 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
   360 00001887 8905(2BC60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
   361 0000188D 890D(3BC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
   362 00001893 890D(3FC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
   363 00001899 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev ;If not disk...
   364 0000189F 7402                <1>     jz setupVarsForDiskTransfer
   365 000018A1 F8                  <1>     clc
   366                              <1>     return ;Else just exit here
    18                              <2> %%_ret:
    19 000018A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   367                              <1> setupVarsForDiskTransfer:
   368                              <1> ;Extension of the above, but for Disk files only
   369                              <1> ;Input: ecx = User desired Bytes to transfer
   370                              <1> ;       rdi = SFT pointer for the file
   371                              <1> ;Output: ecx = Actual Bytes that will be transferred 
   372 000018A3 488B2D(7CC50300)    <1>     mov rbp, qword [workingDPB] ;Get the workingDPB (the same as qPtr)
   373 000018AA 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
   374 000018AD 881D(7BC50300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
   375 000018B3 8B05(2BC60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
   376 000018B9 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   377 000018BD 31D2                <1>     xor edx, edx    ;Zero rdx
   378 000018BF F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
   379                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
   380                              <1>     ;edx has the offset into that sector
   381 000018C1 8905(1CC60300)      <1>     mov dword [currSectF], eax
   382 000018C7 668915(29C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
   383 000018CE 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
   384 000018D0 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
   385 000018D3 8805(20C60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
   386 000018D9 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
   387 000018DB 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   388 000018DE D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
   389 000018E0 8915(13C60300)      <1>     mov dword [currClustF], edx ;Save in var
   390 000018E6 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
   391 000018E8 F8                  <1>     clc
   392                              <1>     return 
    18                              <2> %%_ret:
    19 000018E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   393                              <1> 
   394                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
   395                              <1> ;Return a pointer to the SFT entry in rdi
   396                              <1> ;Input: rbx = Valid SFT ndx number (word)
   397                              <1> ;Output: rdi = SFT pointer
   398 000018EA 488B3D(34C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
   399                              <1> .walk:
   400 000018F1 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
   401 000018F5 7212                <1>     jb .thisTable
   402 000018F7 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
   403 000018FB 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
   404 000018FE 4881FFFFFFFFFF      <1>     cmp rdi, -1
   405 00001905 75EA                <1>     jne .walk
   406 00001907 F9                  <1>     stc
   407                              <1>     return
    18                              <2> %%_ret:
    19 00001908 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   408                              <1> .thisTable:
   409 00001909 50                  <1>     push rax
   410 0000190A 52                  <1>     push rdx
   411 0000190B B84F000000          <1>     mov eax, sft_size
   412 00001910 F7E3                <1>     mul ebx
   413 00001912 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
   414 00001915 5A                  <1>     pop rdx
   415 00001916 58                  <1>     pop rax
   416 00001917 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
   417                              <1>     return
    18                              <2> %%_ret:
    19 0000191E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   418                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
   419                              <1> ;Return a zero extended value in rdi for the SFT entry
   420                              <1> ;Input: bx = JFT handle (we zero extend)
   421                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
   422                              <1> ;        CF=CY => al = Error code, Fail
   423 0000191F 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
   424 00001922 663B1D(91C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
   425 00001929 7204                <1>     jb .ok
   426 0000192B B006                <1>     mov al, errBadHdl
   427 0000192D F9                  <1>     stc
   428                              <1>     return
    18                              <2> %%_ret:
    19 0000192E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   429                              <1> .ok:
   430 0000192F 488B3D(7BC30300)    <1>     mov rdi, qword [currentPSP]
   431 00001936 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
   432 0000193B F8                  <1>     clc
   433                              <1>     return
    18                              <2> %%_ret:
    19 0000193C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   434                              <1> 
   435                              <1> getSFTPtr:
   436                              <1> ;This gets the SFT pointer and checks it was opened by this machine
   437                              <1> ;Input: bx = JFT handle
   438                              <1> ;Output: CF=NC: rdi = SFT pointer
   439                              <1> ;        CF=CY: Error, ax=Error code
   440 0000193D E815000000          <1>     call derefSFTPtr
   441                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001942 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   442 00001944 50                  <1>     push rax
   443 00001945 0FB705(9FC30300)    <1>     movzx eax, word [machineNum]
   444 0000194C 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
   445 00001950 58                  <1>     pop rax
   446                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001951 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   447 00001953 B006                <1>     mov al, errBadHdl   ;Error code
   448 00001955 F9                  <1>     stc         ;Reset CF
   449                              <1>     return
    18                              <2> %%_ret:
    19 00001956 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> derefSFTPtr:
   452                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
   453                              <1> ;Input: bx = File handle (gets zero extended)
   454                              <1> ;Output: CF=NC: rdi = SFT pointer
   455                              <1> ;        CF=CY: Error, ax=Error code
   456 00001957 E8C3FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
   457 0000195C 7205                <1>     jb .fail
   458 0000195E 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
   459 00001961 7504                <1>     jne .ok
   460                              <1> .fail:
   461 00001963 B006                <1>     mov al, errBadHdl
   462 00001965 F9                  <1>     stc
   463                              <1>     return
    18                              <2> %%_ret:
    19 00001966 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   464                              <1> .ok:
   465 00001967 53                  <1>     push rbx    ;Preserve the JFT handle
   466 00001968 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
   467 0000196B E87AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
   468 00001970 5B                  <1>     pop rbx 
   469                              <1>     return
    18                              <2> %%_ret:
    19 00001971 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   470                              <1> 
   471                              <1> getBytesTransferred:
   472 00001972 8B0D(3FC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
   473 00001978 F7D9                <1>     neg ecx ;Multiply by -1
   474 0000197A 030D(3BC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
   475                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00001980 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> readWriteBytesBinary:
   478                              <1> ;Input: ecx = number of bytes to read in Binary mode
   479                              <1> ;       rdi = Points to where in caller buffer to place bytes
   480                              <1> ;       rsi = Points to where in DOS buffer to place pointer
   481                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
   482                              <1> ;Preserve rcx so we know how many bytes transferred
   483                              <1> ;Update the currByteA variable
   484                              <1> ;Returns (rsi and rdi) + (ecx on entry)
   485 00001981 51                  <1>     push rcx
   486 00001982 F605(74C50300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
   487 00001989 7403                <1>     jz .noSwap
   488 0000198B 4887FE              <1>     xchg rdi, rsi
   489                              <1> .noSwap:
   490 0000198E F3A4                <1>     rep movsb
   491 00001990 59                  <1>     pop rcx
   492 00001991 010D(2BC60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
   493 00001997 290D(3FC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
   494                              <1>     return
    18                              <2> %%_ret:
    19 0000199D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    30                              <1> ;Memory related functions
    31                              <1> 
    32                              <1> ;-----------------------------------:
    33                              <1> ;  Memory related Kernel routines   :
    34                              <1> ;-----------------------------------:
    35                              <1> allocateMemory:    ;ah = 48h
    36                              <1> ;Input: ebx = Number of paragraphs requested
    37                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    38                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    39 0000199E 31D2                <1>     xor edx, edx
    40                              <1>     ;Clear the pointers
    41 000019A0 488915(A1C30300)    <1>     mov qword [firstMCB], rdx
    42 000019A7 488915(A9C30300)    <1>     mov qword [bestMCB], rdx
    43 000019AE 488915(B1C30300)    <1>     mov qword [lastMCB], rdx
    44 000019B5 31ED                <1>     xor ebp, ebp    
    45 000019B7 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    46 000019B9 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    47                              <1> .walk:
    48 000019C0 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    49 000019C3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    50 000019C6 7409                <1>     je .walk1
    51 000019C8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    52 000019CB 0F8565050000        <1>     jne memSysHalt
    53                              <1> .walk1:
    54                              <1>     ;Here if valid but not the last block
    55 000019D1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    56 000019D9 0F8582000000        <1>     jne .walk2
    57                              <1>     ;Here we consolidate adjacent free blocks if there are any
    58                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    59                              <1>     ;End consolidation at first non free block or at last block in chain
    60 000019DF 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    61 000019E2 744A                <1>     je .det0    ;Determine if this block is useful
    62 000019E4 31C9                <1>     xor ecx, ecx
    63 000019E6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    64 000019E9 4881C610000000      <1>     add rsi, mcb.program
    65                              <1> .cons0:
    66 000019F0 48C1E104            <1>     shl rcx, 4
    67 000019F4 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    68 000019F7 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    69 000019FA 7409                <1>     je .cons1
    70 000019FC 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    71 000019FF 0F8531050000        <1>     jne memSysHalt 
    72                              <1> .cons1:
    73 00001A05 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    74 00001A0D 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    75                              <1>     ;Here rsi, points to a free block, add it to rdi
    76 00001A0F 31C9                <1>     xor ecx, ecx
    77 00001A11 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    78 00001A14 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    79 00001A1A 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    80 00001A1D 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    81 00001A1F 31D2                <1>     xor edx, edx
    82 00001A21 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    83 00001A24 48895608            <1>     mov qword [rsi + 8], rdx
    84 00001A28 3C5A                <1>     cmp al, mcbMarkEnd
    85 00001A2A 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    86                              <1>     ;Here we deal with if the block was the last one 
    87 00001A2C 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    88                              <1> .det0:  ;Now determine if pointer in rdi is useful
    89 00001A2E 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    90                              <1> ;ebx must be less than the arena size for the arena to be useful!
    91 00001A31 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    92 00001A34 39D9                <1>     cmp ecx, ebx
    93 00001A36 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    94 00001A38 488935(B1C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    95 00001A3F 488B05(A1C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    96 00001A46 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    97 00001A49 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    98 00001A4B 488935(A1C30300)    <1>     mov qword [firstMCB], rsi
    99                              <1> .det1:
   100                              <1>     ;Now test for best fit.
   101 00001A52 29D9                <1>     sub ecx, ebx    ;Block - ebx
   102 00001A54 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   103 00001A56 7209                <1>     jb .walk2
   104 00001A58 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   105 00001A5A 488935(A9C30300)    <1>     mov qword [bestMCB], rsi
   106                              <1> .walk2:
   107 00001A61 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   108 00001A64 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   109 00001A66 31C9                <1>     xor ecx, ecx
   110 00001A68 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   111 00001A6B 48C1E104            <1>     shl rcx, 4
   112 00001A6F 4881C610000000      <1>     add rsi, mcb.program
   113 00001A76 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   114 00001A79 E942FFFFFF          <1>     jmp .walk
   115                              <1> .allocate:
   116                              <1>     ;Allocation fails IF the pointer is the null pointer
   117 00001A7E 803D(2FC30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   118 00001A85 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   119                              <1>     ;Fall thru if last fit
   120 00001A87 488B35(B1C30300)    <1>     mov rsi, qword [lastMCB]
   121 00001A8E 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   122 00001A91 0F84CE000000        <1>     jz .allocFail
   123 00001A97 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   124 00001A99 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   125 00001A9C 31C9                <1>     xor ecx, ecx
   126 00001A9E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   127 00001AA1 29D9                <1>     sub ecx, ebx
   128 00001AA3 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   129 00001AA9 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   130 00001AAC 48C1E104            <1>     shl rcx, 4
   131 00001AB0 4881C610000000      <1>     add rsi, mcb.program
   132 00001AB7 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   133 00001ABA 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   134 00001ABC 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   135 00001ABF 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   136 00001AC6 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   137 00001ACA 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   138 00001AD1 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   139 00001AD8 4889F0              <1>     mov rax, rsi
   140 00001ADB 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   141 00001ADE 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   142 00001AE2 E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   143 00001AE7 C3                  <1>     ret
   144                              <1> .bfCommon:
   145 00001AE8 488B35(A1C30300)    <1>     mov rsi, qword [firstMCB]
   146 00001AEF 803D(2FC30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   147 00001AF6 480F4435(A9C30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   148 00001AFE 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   149 00001B01 7462                <1>     jz .allocFail
   150 00001B03 8A06                <1>     mov al, byte [rsi + mcb.marker]
   151 00001B05 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   152 00001B08 31C9                <1>     xor ecx, ecx
   153 00001B0A 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   154 00001B0D 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   155 00001B0F 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   156 00001B15 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   157 00001B18 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   158 00001B1F 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   159 00001B23 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   160 00001B26 4881C610000000      <1>     add rsi, mcb.program
   161 00001B2D 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   162 00001B33 48C1E304            <1>     shl rbx, 4
   163 00001B37 4801DE              <1>     add rsi, rbx
   164 00001B3A 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   165 00001B3C 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   166 00001B44 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   167 00001B47 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   168 00001B4E 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   169 00001B55 4889F8              <1>     mov rax, rdi
   170 00001B58 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   171 00001B5B 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   172 00001B5F E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   173 00001B64 C3                  <1>     ret
   174                              <1> .allocFail:
   175                              <1>     ;Walk the MCB chain to determine the biggest block size
   176 00001B65 488B35(24C00300)    <1>     mov rsi, [mcbChainPtr]
   177 00001B6C 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   178                              <1> .af0:
   179 00001B6E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   180 00001B71 7409                <1>     je .af1
   181 00001B73 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   182 00001B76 0F85BA030000        <1>     jne memSysHalt
   183                              <1> .af1:
   184 00001B7C 31C9                <1>     xor ecx, ecx
   185 00001B7E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   186 00001B81 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   187 00001B89 7505                <1>     jne .af2
   188 00001B8B 39D9                <1>     cmp ecx, ebx
   189 00001B8D 0F47D9              <1>     cmova ebx, ecx
   190                              <1> .af2:
   191 00001B90 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   192 00001B93 7410                <1>     je .afExit
   193 00001B95 48C1E104            <1>     shl rcx, 4
   194 00001B99 4881C610000000      <1>     add rsi, mcb.program
   195 00001BA0 4801CE              <1>     add rsi, rcx
   196 00001BA3 EBD7                <1>     jmp short .af1
   197                              <1> .afExit:
   198 00001BA5 B808000000          <1>     mov eax, errNoMem
   199 00001BAA 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   200 00001BB1 8802                <1>     mov byte [rdx + callerFrame.rax], al
   201 00001BB3 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   202 00001BB6 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   203 00001BBA C3                  <1>     ret
   204                              <1> freeMemory:        ;ah = 49h
   205                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   206                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   207                              <1> ;Always skip the first block as this is the anchor for DOS
   208 00001BBB 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   209 00001BC2 31C9                <1>     xor ecx, ecx
   210 00001BC4 488B35(24C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   211 00001BCB 4889F7              <1>     mov rdi, rsi
   212 00001BCE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   213 00001BD1 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   214 00001BD5 4881C610000000      <1>     add rsi, mcb.program
   215 00001BDC 4801CE              <1>     add rsi, rcx    ;Go to next block
   216                              <1> .mainLoop:
   217 00001BDF 31C9                <1>     xor ecx, ecx
   218 00001BE1 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   219 00001BE4 7409                <1>     je .valid
   220 00001BE6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   221 00001BE9 0F8547030000        <1>     jne memSysHalt
   222                              <1> .valid:
   223 00001BEF 4939F0              <1>     cmp r8, rsi
   224 00001BF2 741C                <1>     je .blockFound
   225                              <1>     ;Not valid, check if last block in chain
   226 00001BF4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   227 00001BF7 0F84A0000000        <1>     je .blockNotFound
   228 00001BFD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   229 00001C00 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   230 00001C04 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   231 00001C0B 4801CE              <1>     add rsi, rcx    ;Go to next block
   232 00001C0E EBCF                <1>     jmp short .mainLoop
   233                              <1> .blockFound:
   234                              <1>     ;If hole, error.
   235                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   236 00001C10 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   237 00001C18 0F8488000000        <1>     je .blockHole
   238 00001C1E 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   239 00001C26 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   240 00001C2E 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   241                              <1>     ;It is, let it absorb this space
   242 00001C30 31C9                <1>     xor ecx, ecx
   243 00001C32 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   244 00001C35 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   245 00001C3B 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   246                              <1>     ;Replace block marker
   247 00001C3E 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   248 00001C40 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   249 00001C42 31C9                <1>     xor ecx, ecx
   250 00001C44 48890E              <1>     mov qword [rsi], rcx
   251 00001C47 48894E08            <1>     mov qword [rsi + 8], rcx
   252 00001C4B 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   253                              <1> .blockFoundCheckFollowing:
   254                              <1>     ;First check if we are the last block in chain
   255 00001C4E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   256 00001C51 7439                <1>     je .blockFoundExit  ;If yes, exit!
   257 00001C53 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   258 00001C56 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   259 00001C59 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   260 00001C5D 4881C110000000      <1>     add rcx, mcb.program
   261 00001C64 4801CE              <1>     add rsi, rcx    ;Go to next block
   262 00001C67 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   263 00001C6F 751B                <1>     jne .blockFoundExit ;If not free, exit
   264                              <1>     ;If free, absorb into block pointed to by rdi
   265 00001C71 31C9                <1>     xor ecx, ecx
   266 00001C73 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   267 00001C76 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   268 00001C7C 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   269                              <1>     ;Replace block marker
   270 00001C7F 8A06                <1>     mov al, byte [rsi + mcb.marker]
   271 00001C81 8807                <1>     mov byte [rdi + mcb.marker], al
   272 00001C83 31C9                <1>     xor ecx, ecx
   273 00001C85 48890E              <1>     mov qword [rsi], rcx
   274 00001C88 48894E08            <1>     mov qword [rsi + 8], rcx
   275                              <1> .blockFoundExit:
   276 00001C8C E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   277 00001C91 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   278 00001C98 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   279 00001C9C C3                  <1>     ret
   280                              <1> .blockNotFound:
   281                              <1>     ;Set CF and error code
   282 00001C9D C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   283 00001CA4 EB07                <1>     jmp short .blockError
   284                              <1> .blockHole:
   285                              <1> ;Cannot free a hole! Fail!
   286 00001CA6 C605(6AC30300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   287                              <1> .blockError:
   288 00001CAD C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   289 00001CB4 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   290 00001CBB 66C705(67C30300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   290 00001CC3 00                  <1>
   291 00001CC4 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   292 00001CCB B809000000          <1>     mov eax, errMemAddr
   293 00001CD0 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   294 00001CD7 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   295 00001CDA 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   296 00001CDE E828020000          <1>     call verifyIntegrityOfMCBChain
   297 00001CE3 C3                  <1>     ret
   298                              <1> reallocMemory:     ;ah = 4Ah
   299                              <1> ;Input: r8 = address of the block to be realloc'ed
   300                              <1> ;       ebx = How many paras this block should contain after realloc. 
   301                              <1> ;               If ebx = 0, jump to free memory
   302 00001CE4 85DB                <1>     test ebx, ebx
   303 00001CE6 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   304 00001CEC 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   305 00001CF3 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   306 00001CF6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   307 00001CF9 7409                <1>     je .ctn
   308 00001CFB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   309 00001CFE 0F855C010000        <1>     jne .badAddrGiven
   310                              <1> .ctn:
   311                              <1>     ;Provided block is valid and not a hole
   312                              <1>     ;Check if Growth or Shrink
   313 00001D04 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   314 00001D0C 7498                <1>     je freeMemory.blockHole
   315 00001D0E 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   316 00001D11 31C9                <1>     xor ecx, ecx
   317 00001D13 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   318 00001D16 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   319 00001D18 0F8786000000        <1>     ja .growth
   320 00001D1E 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   321                              <1> ;We can always shrink
   322 00001D24 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   323 00001D26 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   324 00001D2C 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   325 00001D2F 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   326 00001D35 48C1E304            <1>     shl rbx, 4
   327 00001D39 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   328 00001D40 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   329 00001D43 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   330 00001D45 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   331 00001D48 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   332 00001D4A 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   333 00001D52 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   334 00001D55 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   335 00001D57 0F84DB000000        <1>     je .exit
   336                              <1> ;Else, now see if the block following is also free and absorb it
   337 00001D5D 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   338 00001D60 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   339 00001D64 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   340 00001D6B 4801CE              <1>     add rsi, rcx    ;Goto next arena
   341 00001D6E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   342 00001D71 7409                <1>     je .shrinkAbsorb
   343 00001D73 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   344 00001D76 0F85BA010000        <1>     jne memSysHalt
   345                              <1> .shrinkAbsorb:
   346 00001D7C 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   347 00001D84 0F85AE000000        <1>     jne .exit
   348                              <1>     ;It is free, absorb it
   349 00001D8A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   350 00001D8D 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   351 00001D93 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   352 00001D96 31C9                <1>     xor ecx, ecx
   353                              <1>     ;Clear absorbed MCB
   354 00001D98 48890E              <1>     mov qword [rsi], rcx
   355 00001D9B 48894E08            <1>     mov qword [rsi + 8], rcx
   356 00001D9F E994000000          <1>     jmp .exit
   357                              <1> .growth:
   358                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   359 00001DA4 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   360 00001DA7 0F84A0000000        <1>     je .notEnuffMem
   361                              <1> ;Now check the following space is free. If not, not enuff mem err
   362 00001DAD 31C9                <1>     xor ecx, ecx
   363 00001DAF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   364 00001DB2 48C1E104            <1>     shl rcx, 4
   365 00001DB6 4889F7              <1>     mov rdi, rsi    
   366 00001DB9 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   367 00001DC0 4801CE              <1>     add rsi, rcx
   368 00001DC3 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   369 00001DC6 7409                <1>     je .growthOK
   370 00001DC8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   371 00001DCB 0F8565010000        <1>     jne memSysHalt
   372                              <1> .growthOK:
   373                              <1>     ;rdi points to block we are growing
   374 00001DD1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   375 00001DD9 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   376                              <1>     ;rsi must own all memory up to the next owned arena
   377 00001DDB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   378 00001DDD 31C9                <1>     xor ecx, ecx
   379 00001DDF 31D2                <1>     xor edx, edx
   380 00001DE1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   381 00001DE4 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   382 00001DEA 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   383 00001DED 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   384 00001DEF 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   385 00001DF1 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   386 00001DF4 7759                <1>     ja .notEnuffMem1
   387 00001DF6 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   388 00001DF8 81FA01000000        <1>     cmp edx, 1
   389 00001DFE 7449                <1>     je .notEnuffMem2
   390 00001E00 31C9                <1>     xor ecx, ecx
   391 00001E02 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   392 00001E05 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   393 00001E09 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   394 00001E0C 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   395 00001E0F 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   396 00001E16 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   397 00001E1A 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   398 00001E1D 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   399 00001E21 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   400                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   401                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   402 00001E23 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   403 00001E25 7411                <1>     jz .exit
   404 00001E27 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   405 00001E2D 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   406 00001E30 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   407                              <1> .exit:
   408 00001E38 E8CE000000          <1>     call verifyIntegrityOfMCBChain
   409 00001E3D 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   410 00001E44 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   411 00001E48 C3                  <1>     ret
   412                              <1> .notEnuffMem2:
   413 00001E49 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   414 00001E4B EB02                <1>     jmp short .notEnuffMem1
   415                              <1> .notEnuffMem:
   416 00001E4D 31DB                <1>     xor ebx, ebx    ;No space to grow
   417                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   418 00001E4F B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   419 00001E54 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   420 00001E5B 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   421 00001E5E EB0C                <1>     jmp short .bad
   422                              <1> .badAddrGiven:
   423 00001E60 488B15(D3C30300)    <1>     mov rdx, qword [oldRSP]
   424 00001E67 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   425                              <1> .bad:
   426 00001E6C C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   427 00001E73 C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   428 00001E7A 668905(67C30300)    <1>     mov word [errorExCde], ax   ;Error code
   429 00001E81 C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   430 00001E88 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   431 00001E8B 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   432 00001E8F E877000000          <1>     call verifyIntegrityOfMCBChain
   433 00001E94 C3                  <1>     ret
   434                              <1> getsetMallocStrat: ;ah = 58h
   435 00001E95 84C0                <1>     test al, al
   436 00001E97 741F                <1>     jz .get
   437 00001E99 3C02                <1>     cmp al, 2
   438 00001E9B 7337                <1>     jae .bad
   439                              <1> ;Set here
   440 00001E9D 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   441 00001EA4 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   442 00001EA8 8805(2FC30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   443 00001EAE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   444 00001EB2 E854000000          <1>     call verifyIntegrityOfMCBChain
   445 00001EB7 C3                  <1>     ret
   446                              <1> .get:
   447 00001EB8 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   448 00001EBF 31C0                <1>     xor eax, eax
   449 00001EC1 8A05(2FC30300)      <1>     mov al, byte [allocStrat]
   450 00001EC7 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   451 00001ECA 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   452 00001ECE E838000000          <1>     call verifyIntegrityOfMCBChain
   453 00001ED3 C3                  <1>     ret
   454                              <1> .bad:
   455 00001ED4 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   456 00001EDB C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   457 00001EE2 66C705(67C30300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   457 00001EEA 00                  <1>
   458 00001EEB C605(69C30300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   459 00001EF2 B801000000          <1>     mov eax, errInvFnc
   460 00001EF7 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   461 00001EFE 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   462 00001F01 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   463 00001F05 E801000000          <1>     call verifyIntegrityOfMCBChain
   464 00001F0A C3                  <1>     ret
   465                              <1> ;-----------------------------------:
   466                              <1> ;      Memory related routines      :
   467                              <1> ;-----------------------------------:
   468                              <1> verifyIntegrityOfMCBChain:
   469 00001F0B 50                  <1>     push rax
   470 00001F0C 53                  <1>     push rbx
   471 00001F0D 488B1D(24C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   472                              <1> .ok:
   473 00001F14 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   474 00001F17 7408                <1>     je .ok1
   475 00001F19 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   476 00001F1C 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   477                              <1> .exit:
   478 00001F1E 5B                  <1>     pop rbx
   479 00001F1F 58                  <1>     pop rax
   480 00001F20 C3                  <1>     ret ;We have reached the end of the chain, return all good!
   481                              <1> .ok1:
   482 00001F21 31C0                <1>     xor eax, eax
   483 00001F23 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   484 00001F26 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   485 00001F2A 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   486 00001F31 4801C3              <1>     add rbx, rax
   487 00001F34 EBDE                <1>     jmp short .ok
   488                              <1> memSysHalt:
   489                              <1> ;Only arrive here if the integrity of the system is not verified
   490                              <1> ;Lock the system
   491 00001F36 C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   492 00001F3D C605(66C30300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   493 00001F44 66C705(67C30300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   493 00001F4C 00                  <1>
   494 00001F4D C605(69C30300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   495 00001F54 488D150E000000      <1>     lea rdx, .sysHltString
   496 00001F5B B409                <1>     mov ah, 09h
   497 00001F5D CD41                <1>     int 41h
   498                              <1>     ;Only halt IRQ's in production!
   499                              <1>     %if !DEBUG
   500 00001F5F FA                  <1>     cli ;Halt interrupts
   501 00001F60 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   502 00001F62 E6A1                <1>     out 0A1h, al
   503 00001F64 E621                <1>     out 021h, al
   504                              <1>     %endif
   505 00001F66 F4                  <1>     hlt             ;Halt the system
   506 00001F67 EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   507 00001F69 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   507 00001F72 6C6F636174696F6E20- <1>
   507 00001F7B 6572726F720D0A      <1>
   508 00001F82 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   508 00001F8B 616420434F4D4D414E- <1>
   508 00001F94 442C2073797374656D- <1>
   508 00001F9D 2068616C74656424    <1>
    30                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    31                              <1> ;EXEC and all default terminates are here
    32                              <1> 
    33                              <1> ;========================
    34                              <1> ;   Interrupt handlers
    35                              <1> ;========================
    36                              <1> terminateProcess:   ;Int 40h
    37 00001FA5 48CF                <1>     iretq
    38                              <1> terminateRes:       ;Int 47h
    39 00001FA7 48CF                <1>     iretq
    40                              <1> ;========================
    41                              <1> ;    Int 21h functions
    42                              <1> ;========================
    43                              <1> simpleTerminate:   ;ah = 00h
    44 00001FA9 C3                  <1>     ret
    45                              <1> terminateStayRes:  ;ah = 31h
    46 00001FAA C3                  <1>     ret
    47                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    48 00001FAB C3                  <1>     ret
    49                              <1> terminateClean:    ;ah = 4Ch, EXIT
    50 00001FAC C3                  <1>     ret
    31                                  %include "./Source/Kernel/Local/Local.asm"
    32                              <1> ;Localisation based functions live here
    33                              <1> 
    34                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    35                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    36                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    37                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    38 00001FAD C3                  <1>     ret
    32                                  %include "./Source/Kernel/ctrlc.asm"
    33                              <1> diskErr:
    34 00001FAE 80CC00              <1>     or ah, 00h
    35 00001FB1 EB03                <1>     jmp short criticalErrorSetup
    36                              <1> charDevErr:
    37                              <1> ;Called with ah with additional bits
    38 00001FB3 80CC38              <1>     or ah, 38h  ;Ignore,Retry,Fail OK
    39                              <1> criticalErrorSetup:
    40 00001FB6 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    41 00001FBC 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    42 00001FC3 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    43                              <1>     ;For now, fall through, but need much work to change it later! 
    44                              <1> 
    45                              <1> 
    46                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    47                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    48                              <1> ; to the critical error handler.
    49                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    50                              <1> ; and with Int44Bitfield set
    51                              <1> ;               AH = Critical Error Bitfield
    52                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    53                              <1> ;               Bit 6 - Reserved
    54                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    55                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    56                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    57                              <1> ;               Bits [2-1] = Affected Disk Error
    58                              <1> ;                     0 0   DOS area
    59                              <1> ;                     0 1   FAT area
    60                              <1> ;                     1 0   Directory area
    61                              <1> ;                     1 1   Data area
    62                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    63                              <1> ;               AL  = Failing drive number if AH[7] = 0
    64                              <1> ;               DIL = Error code for errorMsg
    65                              <1> ;               RSI = EA of Device Header for which device the error occured
    66                              <1> ;Return:
    67                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    68                              <1> ;                  = 1 - Retry the Operation    (Retry)
    69                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    70                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    71                              <1> ; Return response from int 44h in al
    72                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    73                              <1> ; This function will terminate the program if an abort was requested!
    74                              <1> ; This function also destroys RBP
    75 00001FC9 803D(63C30300)01    <1>     cmp byte [critErrFlag], 1
    76 00001FD0 7204                <1>     jb .noIntError  ;If not 0, enter
    77 00001FD2 B003                <1>     mov al, critFail    ;Else, return Fail always
    78 00001FD4 EB34                <1>     jmp short .checkResponse
    79                              <1> .noIntError:
    80 00001FD6 FA                  <1>     cli ;Disable Interrupts
    81 00001FD7 FE05(63C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
    82 00001FDD FE0D(64C30300)      <1>     dec byte [inDOS]    ;Exiting DOS
    83 00001FE3 488925(B9C30300)    <1>     mov qword [xInt44hRSP], rsp
    84 00001FEA 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    85 00001FF1 31ED                <1>     xor ebp, ebp
    86 00001FF3 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
    87 00001FF5 488B25(B9C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    88 00001FFC C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    89 00002003 FE05(64C30300)      <1>     inc byte [inDOS]    ;Reenter DOS
    90 00002009 FB                  <1>     sti ;Reenable Interrupts
    91                              <1>     ;Now we check that the response given was allowed, and translate if needed
    92                              <1> .checkResponse:
    93 0000200A 3C01                <1>     cmp al, critRetry
    94 0000200C 7217                <1>     jb .checkIgnore
    95 0000200E 7420                <1>     je .checkRetry
    96 00002010 3C03                <1>     cmp al, critFail
    97 00002012 752F                <1>     jne .abort   ;Must be abort
    98                              <1> ;Here is for fail
    99 00002014 F605(C1C30300)08    <1>     test byte [Int44bitfld], critFailOK
   100 0000201B 7526                <1>     jnz .abort
   101                              <1> .exit:
   102 0000201D C605(65C30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   103                              <1>     return
    18                              <2> %%_ret:
    19 00002024 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> .checkIgnore:
   105 00002025 F605(C1C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   106 0000202C 75EF                <1>     jnz .exit
   107 0000202E EB09                <1>     jmp short .setFail
   108                              <1> .checkRetry:
   109 00002030 F605(C1C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   110 00002037 75E4                <1>     jnz .exit
   111                              <1> .setFail:
   112 00002039 B003                <1>     mov al, critFail
   113 0000203B FE05(C2C30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   114 00002041 EBC7                <1>     jmp short .checkResponse    ;Double check if I can return Fail
   115                              <1> .abort:
   116                              <1> ;Prepare to abort. We abort from within!
   117                              <1> ;Currently fall into ^C
   118                              <1> ctrlBreakHdlr:
   119 00002043 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   120 00002045 E8CFF0FFFF          <1>     call printCaretASCII
   121 0000204A E8FAF0FFFF          <1>     call printCRLF
   122                              <1>     ;Reset the console back to 0
   123 0000204F C605(EBC30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   124                              <1> .avoidCON:
   125                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   126 00002056 FA                  <1> 	cli
   127 00002057 488B25(D3C30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   128 0000205E E859060000          <1> 	call dosPopRegs ;Get user state back
   129 00002063 488925(83C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   130 0000206A F8                  <1>     clc
   131 0000206B CD43                <1>     int 43h ;Call critical error handler
   132 0000206D FA                  <1>     cli ;Clear interrupts again
   133 0000206E 488905(8FC30300)    <1>     mov qword [oldRAX], rax ;Save rax
   134 00002075 9C                  <1>     pushfq  ;Get flags in rax
   135 00002076 58                  <1>     pop rax 
   136 00002077 483B25(83C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   137 0000207E 750C                <1>     jne .checkCF
   138                              <1> .returnToDOS:
   139 00002080 488B05(8FC30300)    <1>     mov rax, qword [oldRAX]
   140 00002087 E9D6040000          <1>     jmp functionDispatch    ;Goto int 41h
   141                              <1> .checkCF:
   142 0000208C 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   143 00002093 A801                <1>     test al, 1  ;CF set?
   144 00002095 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   145 00002097 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   146 0000209C C605(E4C30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   147 000020A3 E9BA040000          <1>     jmp functionDispatch
   148                              <1> 
    33                                  %include "./Source/Kernel/dosPrim.asm"
    34                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    35                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    36                              <1> 
    37                              <1> dosDefCritErrHdlr:
    38                              <1> ;The DOS default critical error handler always returns FAIL
    39 000020A8 B003                <1>     mov al, critFail
    40 000020AA 48CF                <1>     iretq
    41                              <1> goDriverChar:
    42                              <1> ;Shortcut for Char requests, make a driver request
    43                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    44 000020AC 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    45                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    46                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    47                              <1> ;       rbx = Ptr to the request header for the driver call!
    48 000020B0 E849060000          <1>     call dosCrit2Enter
    49 000020B5 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    50 000020B8 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    51 000020BB E848060000          <1>     call dosCrit2Exit
    52                              <1>     return
    18                              <2> %%_ret:
    19 000020C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> setupPhysicalDiskRequest:
    55                              <1> ;Ensure that al has valid disk number
    56                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    57                              <1> ;If CF=NC, rbp = DPB ptr.
    58                              <1> ;If CF=CY, exit error
    59 000020C1 84C0                <1>     test al, al
    60 000020C3 723F                <1>     jc .diskError
    61 000020C5 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
    62 000020CB 7337                <1>     jae .diskError
    63 000020CD 50                  <1>     push rax
    64 000020CE FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    65 000020D0 E8EA030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    66 000020D5 58                  <1>     pop rax
    67 000020D6 7235                <1>     jc .error
    68 000020D8 8805(7BC50300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    69 000020DE 488B2D(84C50300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    70 000020E5 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    71 000020ED 750A                <1>     jnz .netError
    72 000020EF 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    73 000020F3 E832030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    74                              <1>     return
    18                              <2> %%_ret:
    19 000020F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> .netError:
    76 000020F9 66C705(67C30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    76 00002101 00                  <1>
    77 00002102 EB09                <1>     jmp short .error
    78                              <1> .diskError:
    79 00002104 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv
    79 0000210C 00                  <1>
    80                              <1> .error:
    81 0000210D C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk
    82 00002114 C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr
    83 0000211B C605(6AC30300)09    <1>     mov byte [errorClass], eClsBadFmt
    84 00002122 F9                  <1>     stc
    85                              <1>     return
    18                              <2> %%_ret:
    19 00002123 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> setupAbsDiskEntry:
    88                              <1> ;Prepares to sets up the CDS and DPB for the request
    89 00002124 FE05(64C30300)      <1>     inc byte [inDOS]
    90 0000212A FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    91 0000212B FC                  <1>     cld ;Set string ops in the right direction
    92 0000212C E890FFFFFF          <1>     call setupPhysicalDiskRequest
    93 00002131 7223                <1>     jc .exit    ;Error exit
    94 00002133 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    95 0000213A 56                  <1>     push rsi
    96 0000213B 50                  <1>     push rax
    97 0000213C 488D35(6CC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    98 00002143 8806                <1>     mov byte [rsi], al  ;Construct a path
    99 00002145 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   100 00002148 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   101 0000214C F8                  <1>     clc
   102                              <1> ;++++++++++++++++++++++++++++
   103                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   104                              <1> ;Entered with path in rsi (ah=03h)
   105 0000214D B800030000          <1>     mov eax, 0300h  
   106 00002152 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   107                              <1> ;++++++++++++++++++++++++++++
   108 00002154 58                  <1>     pop rax
   109 00002155 5E                  <1>     pop rsi
   110                              <1> .exit:
   111 00002156 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   112                              <1>     return
    18                              <2> %%_ret:
    19 00002158 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> absDiskWrite:       ;Int 46h
   115                              <1> ;al = Drive number
   116                              <1> ;rbx = Memory Buffer address to read from
   117                              <1> ;ecx = Number of sectors to write
   118                              <1> ;rdx = Start LBA to write to
   119 00002159 FA                  <1>     cli
   120 0000215A 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   121 00002161 488D25(4CD80300)    <1>     lea rsp, DiskStakTop
   122 00002168 55                  <1>     push rbp
   123 00002169 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   124 0000216A E8B5FFFFFF          <1>     call setupAbsDiskEntry
   125 0000216F 7252                <1>     jc absDiskExit
   126 00002171 E8E2010000          <1>     call primReqWriteSetup
   127 00002176 EB1D                <1>     jmp short absDiskReadWriteCommon
   128                              <1> absDiskRead:        ;Int 45h
   129                              <1> ;al = Drive number
   130                              <1> ;rbx = Memory Buffer address to write to
   131                              <1> ;ecx = Number of sectors to read
   132                              <1> ;rdx = Start LBA to read from
   133 00002178 FA                  <1>     cli 
   134 00002179 488925(D3C30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   135 00002180 488D25(4CD80300)    <1>     lea rsp, DiskStakTop
   136 00002187 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   137 00002188 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   138 00002189 E896FFFFFF          <1>     call setupAbsDiskEntry
   139 0000218E 7233                <1>     jc absDiskExit
   140 00002190 E8CE010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   141                              <1> absDiskReadWriteCommon:
   142                              <1> ;Entered with the appropriate function number in ah
   143                              <1> ; and primary request header in rbx
   144 00002195 E83B000000          <1>     call absDiskDriverCall
   145 0000219A 7427                <1>     jz absDiskExit  ;Skip error code checking
   146 0000219C 8A05(1BC40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   147                              <1>     ;DOS uses the following pairs in a table
   148                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   149 000021A2 B480                <1>     mov ah, 80h ;Attachment failure
   150 000021A4 3C0C                <1>     cmp al, 0Ch ;Gen error
   151 000021A6 741A                <1>     je .absExit
   152 000021A8 B440                <1>     mov ah, 40h ;Seek error
   153 000021AA 3C06                <1>     cmp al, 06h
   154 000021AC 7414                <1>     je .absExit
   155 000021AE B408                <1>     mov ah, 08h ;Bad CRC
   156 000021B0 3C04                <1>     cmp al, 04h
   157 000021B2 740E                <1>     je .absExit
   158 000021B4 B404                <1>     mov ah, 04h ;Sector not found
   159 000021B6 3C08                <1>     cmp al, 08h
   160 000021B8 7408                <1>     je .absExit
   161 000021BA 30E4                <1>     xor ah, ah  ;Write Protect Violation
   162 000021BC 84C0                <1>     test al, al
   163 000021BE 7402                <1>     je .absExit
   164 000021C0 B402                <1>     mov ah, 02h ;Other Error
   165                              <1> .absExit:
   166 000021C2 F9                  <1>     stc
   167                              <1> absDiskExit:
   168 000021C3 5B                  <1>     pop rbx
   169 000021C4 5D                  <1>     pop rbp
   170 000021C5 FA                  <1>     cli
   171 000021C6 FE0D(64C30300)      <1>     dec byte [inDOS]
   172 000021CC 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]
   173 000021D3 FB                  <1>     sti ;Reenable interrupts
   174                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 000021D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> absDiskDriverCall:
   176                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   177                              <1> ;       rbx = Request header address
   178                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   179                              <1> ;       eax = Status word from request
   180                              <1> ;       ecx = Number of sectors transferred
   181 000021D5 56                  <1>     push rsi
   182                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   183 000021D6 8B0D(2EC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   184                              <1>     ;Prepare for goDriver now
   185 000021DC 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   186 000021E0 E8CBFEFFFF          <1>     call goDriver   ;Make request
   187 000021E5 5E                  <1>     pop rsi
   188 000021E6 8B05(2EC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   189 000021EC 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   190 000021EE 0FB705(1BC40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   191 000021F5 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   192                              <1>     return
    18                              <2> %%_ret:
    19 000021F9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> getDiskDPB:
   195                              <1> ;Gets the disk DPB if the Disk is physical
   196                              <1> ;Otherwise will return a pointer to the drive DPB
   197                              <1> ;Called with rdi pointing to the CDS
   198                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   199 000021FA 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   200 000021FE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   201 00002201 8805(7BC50300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   202 00002207 E81E020000          <1>     call setWorkingDPB
   203 0000220C 57                  <1>     push rdi    ;Save the CDS ptr
   204 0000220D E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   205 00002212 5F                  <1>     pop rdi
   206 00002213 7234                <1>     jc .exitBad ;Preserve CF
   207 00002215 7531                <1>     jnz .exit
   208                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   209 00002217 8A0D(69C00300)      <1>     mov cl, byte [lastdrvNum]
   210 0000221D 4831C0              <1>     xor rax, rax
   211 00002220 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   212 00002223 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   213 00002227 488B3D(56C00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   214                              <1> .checkCDS:
   215 0000222E 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   216 00002232 7509                <1>     jne .next
   217 00002234 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   218 00002238 7403                <1>     jz .next    ;IF yes, skip it
   219 0000223A 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   220                              <1> .next:
   221 0000223D 4881C75B000000      <1>     add rdi, cds_size
   222 00002244 FEC9                <1>     dec cl
   223 00002246 75E6                <1>     jnz .checkCDS
   224                              <1> .exit:
   225 00002248 F8                  <1>     clc
   226                              <1> .exitBad:
   227                              <1>     return
    18                              <2> %%_ret:
    19 00002249 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228                              <1> 
   229                              <1> ensureDiskValid:
   230                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   231                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   232                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   233                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   234                              <1> .medChk:
   235 0000224A E85D010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   236                              <1> ;Return in rbx the req hdr address
   237 0000224F 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   238 00002253 E858FEFFFF          <1>     call goDriver   ;Request!
   239 00002258 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   240 0000225C F7C700800000        <1>     test edi, drvErrStatus
   241 00002262 756C                <1>     jnz .diskDrvCritErrMedChk
   242                              <1> .medChkIgnore:
   243 00002264 8A05(7BC50300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   244 0000226A 30E4                <1>     xor ah, ah
   245 0000226C 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   246 0000226F 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   247 00002272 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   248 00002274 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   249 00002276 E8B1E4FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   250 0000227B F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   251 0000227C 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   252                              <1>     ;ZF=NZ from test for dirty buffers
   253                              <1> .exit:
   254                              <1>     return
    18                              <2> %%_ret:
    19 0000227E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   255                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   256 0000227F C605(54D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   257 00002286 E8C5E4FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   258                              <1>     ;Get a buffer to read BPB into in rdi
   259 0000228B B101                <1>     mov cl, dosBuffer
   260 0000228D 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   261 0000228F E8DEE4FFFF          <1>     call getBuffer ;Get a disk buffer
   262 00002294 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   263 00002296 4889DF              <1>     mov rdi, rbx
   264                              <1> .repeatEP:
   265 00002299 E83A010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   266 0000229E 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   267 000022A2 E809FEFFFF          <1>     call goDriver   ;Request!
   268 000022A7 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   269 000022AB A900800000          <1>     test eax, drvErrStatus
   270 000022B0 7565                <1>     jnz .diskDrvCritErrBPB
   271                              <1>     ;Now rebuild the dpb fields for this drive
   272 000022B2 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   273 000022B6 E89A060000          <1>     call createDPB  
   274                              <1>     ;Adjust the buffer header information
   275 000022BB 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   276 000022BE 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   277 000022C1 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   278 000022C4 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   279 000022C7 30E4                <1>     xor ah, ah
   280 000022C9 8825(54D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   281                              <1>     return
    18                              <2> %%_ret:
    19 000022CF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   282                              <1> .diskDrvCritErrMedChk:
   283                              <1> ;Critical Errors fall through here
   284                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   285 000022D0 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   286 000022D7 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   287 000022DE 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   288 000022E1 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   289 000022E3 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   290 000022E9 E8DBFCFFFF          <1>     call criticalDOSError
   291 000022EE 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   292 000022F5 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   293 000022FC 3C01                <1>     cmp al, critRetry
   294 000022FE 0F8446FFFFFF        <1>     je .medChk
   295 00002304 3C00                <1>     cmp al, critIgnore
   296 00002306 0F8458FFFFFF        <1>     je .medChkIgnore
   297 0000230C 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   297 00002314 00                  <1>
   298 00002315 F9                  <1>     stc ;Set error flag to indicate fail
   299                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00002316 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   300                              <1> 
   301                              <1> .diskDrvCritErrBPB:
   302                              <1>     ;eax has status word, rbp has dpb ptr
   303                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   304 00002317 48893D(6BC30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   305 0000231E 48892D(4DC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   306 00002325 89C7                <1>     mov edi, eax    ;Transfer the status word over
   307 00002327 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   308 0000232A B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK ;Set bits
   309 0000232C 8825(C1C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   310 00002332 E892FCFFFF          <1>     call criticalDOSError
   311 00002337 488B3D(6BC30300)    <1>     mov rdi, qword [xInt44RDI]
   312 0000233E 488B2D(4DC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   313 00002345 3C01                <1>     cmp al, critRetry
   314 00002347 0F844CFFFFFF        <1>     je .repeatEP
   315                              <1>     ;Else we fail (Ignore=Fail here)
   316 0000234D 66C705(67C30300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   316 00002355 00                  <1>
   317 00002356 F9                  <1>     stc ;Set error flag to indicate fail
   318                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00002357 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   319                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   320                              <1> ;           Primitive Driver Requests
   321                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   322                              <1> ;First are Disk requests, then Char device requests
   323                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   324                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   325                              <1> 
   326                              <1> primReqWriteSetup:
   327 00002358 50                  <1>     push rax
   328 00002359 B408                <1>     mov ah, drvWRITE    ;Command code
   329 0000235B 0225(2CC30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   330 00002361 EB03                <1>     jmp short primReqRWCommon
   331                              <1> primReqReadSetup:
   332 00002363 50                  <1>     push rax
   333 00002364 B404                <1>     mov ah, drvREAD
   334                              <1> primReqRWCommon:
   335                              <1> ;Sets up the IO request packet with:
   336                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   337                              <1> ; rbx = Data storage buffer ptr
   338                              <1> ; ecx = Number of sectors to transfer
   339                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   340                              <1> ; ~~~~ Set by entry function ~~~~ 
   341                              <1> ; ah = Command code
   342                              <1> ; All regs preserved EXCEPT rbx.
   343                              <1> ; Return: rbx = Transfer Address
   344 00002366 48891D(26C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   345 0000236D 890D(2EC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   346 00002373 C605(18C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   347 0000237A 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   348 0000237F 8905(19C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   349 00002385 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   350 00002388 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   351                              <1>     ;Disk operations only here!
   352 0000238A 488915(32C40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   353 00002391 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   354 00002394 8805(25C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   355 0000239A 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   356 0000239D 8805(19C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   357                              <1> primReqCommonExit:
   358                              <1> ;Returns in rbx the primary request header as these functions
   359                              <1> ; setup the request in the primary request header space
   360 000023A3 58                  <1>     pop rax
   361 000023A4 488D1D(18C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   362                              <1>     return
    18                              <2> %%_ret:
    19 000023AB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> primReqMedCheckSetup:
   365                              <1> ;Prepare the diskIO packet for mediacheck
   366                              <1> ;rbp has DPB pointer for device to check media on
   367 000023AC 50                  <1>     push rax
   368 000023AD C605(18C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   369 000023B4 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   370 000023B7 8805(25C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   371 000023BD 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   372 000023C0 8805(19C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   373 000023C6 C605(1AC40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   374 000023CD 66C705(1BC40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   374 000023D5 00                  <1>
   375 000023D6 EBCB                <1>     jmp short primReqCommonExit
   376                              <1> 
   377                              <1> primReqGetBPBSetup:
   378                              <1> ;rbp has DPB pointer for device
   379                              <1> ;rdi has sector buffer header pointer for transfer
   380 000023D8 50                  <1>     push rax
   381 000023D9 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   382 000023DD 48893D(26C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   383 000023E4 C605(18C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   384 000023EB 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   385 000023EE 8805(25C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   386 000023F4 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   387 000023F7 8805(19C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   388 000023FD C605(1AC40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   389 00002404 66C705(1BC40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   389 0000240C 00                  <1>
   390 0000240D EB94                <1>     jmp short primReqCommonExit
   391                              <1> 
   392                              <1> secdReqCharIOReq:
   393                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   394                              <1> ;Input:
   395                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   396                              <1> ; ecx = Length of buffer
   397                              <1> ; rdi = Buffer pointer
   398                              <1> ;Output: 
   399                              <1> ; rbx = Transfer Address 
   400 0000240F 488D1D(EEC30300)    <1>     lea rbx, secdReqHdr
   401 00002416 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   402 00002419 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   403 0000241C 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   404 00002422 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   405 00002426 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   406                              <1>     return
    18                              <2> %%_ret:
    19 00002429 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   407                              <1> ;If the device which will process this request is a disk device
   408                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   409                              <1> ;Then we will read the appropriate byte from that buffer to the 
   410                              <1> ; singleIOByt buffer.
   411                              <1> ;Such a request will require additional setup with the following fields:
   412                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    34                                  %include "./Source/Kernel/dosUtils.asm"
    35                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    36                              <1> 
    37                              <1> ;Basic Drive related Utilities
    38                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    39                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    40                              <1> ; that gets set up)
    41                              <1> 
    42                              <1> setWorkingDPB:
    43                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    44 0000242A 48892D(7CC50300)    <1>     mov qword [workingDPB], rbp
    45                              <1>     return
    18                              <2> %%_ret:
    19 00002431 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> 
    47                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    48                              <1> ;Returns ptr to user regs in rsi
    49 00002432 488B35(D3C30300)    <1>     mov rsi, qword [oldRSP]
    50                              <1>     return
    18                              <2> %%_ret:
    19 00002439 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> walkDPBchain:
    53                              <1> ;Called with al = 0 based drive number
    54                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    55 0000243A 488B35(34C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    56                              <1> .walk:
    57 00002441 4881FEFFFFFFFF      <1>     cmp rsi, -1
    58 00002448 740A                <1>     je .exitBad
    59 0000244A 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    60 0000244C 7407                <1>     je .exit    ;Drive found
    61 0000244E 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    62 00002452 EBED                <1>     jmp short .walk
    63                              <1> .exitBad:
    64 00002454 F9                  <1>     stc
    65                              <1> .exit:
    66                              <1>     return
    18                              <2> %%_ret:
    19 00002455 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> setDrive:   
    68                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    69                              <1> ;Input: al = 1-based drive number
    70                              <1> ;Output: al = 0-based drive number
    71                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
    72                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
    73                              <1> ;            set.
    74 00002456 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
    75 0000245B 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
    76 0000245D 56                  <1>     push rsi
    77 0000245E 488B35(84C50300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
    78 00002465 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
    79 0000246B 5E                  <1>     pop rsi
    80 0000246C 7401                <1>     jz .exit
    81 0000246E F9                  <1>     stc
    82                              <1> .exit:
    83                              <1>     return
    18                              <2> %%_ret:
    19 0000246F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> 
    85                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
    86                              <1> ;Allows a redirector or subst/join to build a CDS
    87                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
    88                              <1> ; volumes, that are made at system boot.
    89                              <1> ;Input: al = Drive Letter for drive
    90                              <1> ;       workingCDS = Set to the CDS array slot for the drive
    91                              <1> ;Output: rdi = newly filled in workingCDS
    92                              <1> ;CF=NC => CDS valid and has a DPB
    93                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
    94 00002470 50                  <1>     push rax
    95 00002471 2C40                <1>     sub al, "A"-1
    96 00002473 3A05(68C00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
    97 00002479 488B3D(84C50300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
    98 00002480 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
    99 00002486 58                  <1>     pop rax
   100 00002487 7235                <1>     jb .exit    ;Exit with CF=CY
   101 00002489 50                  <1>     push rax
   102 0000248A 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   103 0000248F 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   104 00002491 58                  <1>     pop rax
   105 00002492 66814F430040        <1>     or word [rdi + cds.wFlags], cdsPhysDrive    ;Config bit set
   106 00002498 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   107 0000249F 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   108 000024A7 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   109                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   110 000024AD 50                  <1>     push rax
   111 000024AE 56                  <1>     push rsi
   112 000024AF 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   113 000024B1 E884FFFFFF          <1>     call walkDPBchain
   114 000024B6 7204                <1>     jb .skipSettingDPB
   115 000024B8 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   116                              <1> .skipSettingDPB:
   117 000024BC 5E                  <1>     pop rsi
   118 000024BD 58                  <1>     pop rax
   119                              <1> .exit:
   120                              <1>     return
    18                              <2> %%_ret:
    19 000024BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   121                              <1> 
   122                              <1> getCDS:     ;Int 4Fh AX=1219h
   123                              <1> ;Gets the device DPB and saves it in the DOS variable
   124                              <1> ;This can be called to get CDS for network drives too!
   125                              <1> ;Input: al = 1 based drive number
   126                              <1> ;Sets workingCDS var with the CDS for the device. 
   127                              <1> ;   If device on a network, sets CF
   128                              <1> ;Returns al with 0-based drive number
   129 000024BF 84C0                <1>     test al, al
   130 000024C1 7508                <1>     jnz .skip
   131 000024C3 8A05(8DC30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   132 000024C9 FEC0                <1>     inc al
   133                              <1> .skip:
   134 000024CB FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   135 000024CD 56                  <1>     push rsi
   136 000024CE C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   137 000024D5 F605(79C50300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   138 000024DC 7423                <1>     jz .physDrive
   139                              <1>     ;Invokation via 21/5D00, not yet fully supported
   140                              <1>     ;If returned with CF=CY, consider it an error for now
   141 000024DE 50                  <1>     push rax
   142 000024DF 57                  <1>     push rdi
   143 000024E0 488D3D(94C50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   144 000024E7 48893D(84C50300)    <1>     mov qword [workingCDS], rdi ;Make it current
   145 000024EE 0441                <1>     add al, "A" ;Convert to a drive letter
   146 000024F0 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   147 000024F5 66F747430040        <1>     test word [rdi + cds.wFlags], cdsPhysDrive  ;Is the CDS valid?
   148 000024FB 5F                  <1>     pop rdi
   149 000024FC 58                  <1>     pop rax
   150 000024FD 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   151 000024FF EB17                <1>     jmp short .exitOk   ;All oki
   152                              <1> .physDrive:
   153 00002501 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   154 00002506 7208                <1>     jc .exitBad
   155 00002508 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   156 0000250E 7508                <1>     jnz .exitOk ;Exit with flag cleared
   157                              <1>     ;Else Return to unknown error locus
   158                              <1> .exitBad:
   159 00002510 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk
   160                              <1> .exitBad1:
   161 00002517 F9                  <1>     stc
   162                              <1> .exitOk:
   163 00002518 5E                  <1>     pop rsi
   164                              <1>     return
    18                              <2> %%_ret:
    19 00002519 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   165                              <1> 
   166                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   167                              <1>     ;Gets the CDS for the current drive in al
   168                              <1>     ;Input: al = Drive number, 0 = A ...
   169                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   170                              <1>     ;        CF=CY => al not valid
   171 0000251A 3A05(69C00300)      <1>     cmp al, byte [lastdrvNum]
   172 00002520 7202                <1>     jb .ctn
   173 00002522 F9                  <1>     stc 
   174                              <1>     return
    18                              <2> %%_ret:
    19 00002523 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> .ctn:
   176 00002524 50                  <1>     push rax
   177 00002525 52                  <1>     push rdx
   178 00002526 0FB6C0              <1>     movzx eax, al
   179 00002529 48BE5B000000000000- <1>     mov rsi, cds_size
   179 00002532 00                  <1>
   180 00002533 31D2                <1>     xor edx, edx
   181 00002535 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
   182 00002537 488D05(56C00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
   183 0000253E 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   184 00002541 488935(84C50300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   185 00002548 5A                  <1>     pop rdx
   186 00002549 58                  <1>     pop rax
   187 0000254A F8                  <1>     clc
   188                              <1>     return
    18                              <2> %%_ret:
    19 0000254B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   189                              <1> 
   190                              <1> 
   191                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   192                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   193                              <1> ;Input: AL = Char to normalise.
   194                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   195                              <1> ;If path separator, set ZF=ZE
   196 0000254C 3C5C                <1>     cmp al, "\"
   197 0000254E 7406                <1>     je .exit
   198 00002550 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   199 00002552 7502                <1>     jne .exit
   200 00002554 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   201                              <1> .exit:
   202                              <1>     return
    18                              <2> %%_ret:
    19 00002556 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   203                              <1> 
   204                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   205                              <1> ;Convert a lowercase char to uppercase
   206                              <1> ; Leave alone uppercase chars and invalid chars
   207                              <1> ;Input: al = Char to convert to uppercase
   208                              <1> ;Output: al = Processed char
   209 00002557 3C7A                <1>     cmp al, "z"
   210 00002559 7706                <1>     ja .exit
   211 0000255B 3C61                <1>     cmp al, "a"
   212 0000255D 7202                <1>     jb .exit
   213 0000255F 2C20                <1>     sub al, "a" - "A"   ;Convert the char
   214                              <1> .exit:
   215                              <1>     return
    18                              <2> %%_ret:
    19 00002561 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Source/Kernel/dosMain.asm"
    36                              <1> ;-----------------------------------:
    37                              <1> ;        Main Kernel dispatch       :
    38                              <1> ;            and routines           :
    39                              <1> ;-----------------------------------:
    40                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    41                              <1> ;ah = Function number, all other registers have various meanings
    42                              <1>  %if DEBUG
    43                              <1>     ;Entry function
    44                              <1>     debugEnterM
    45                              <1>     lea rbp, .l0000
    46                              <1>     call debPrintNullString
    47                              <1>     call debPrintFunctionName
    48                              <1>     jmp short .l0001
    49                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    50                              <1> .l0001:    
    51                              <1>     debugExitM
    52                              <1>     %endif
    53 00002562 FA                  <1>     cli ;Halt external interrupts
    54 00002563 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    55 00002564 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    56 00002567 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    57                              <1>     ;Cherry pick functions
    58 0000256D 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    59 00002570 722C                <1>     jb .fsbegin   ;If below skip these checks
    60 00002572 0F849A010000        <1>     je ctrlBreakCheck
    61 00002578 80FC64              <1>     cmp ah, 64h
    62 0000257B 0F84DA010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    63 00002581 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    64 00002583 80FC51              <1>     cmp ah, 51h
    65 00002586 0F84BD010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    66 0000258C 80FC62              <1>     cmp ah, 62h
    67 0000258F 0F84BD010000        <1>     je getPSPaddr          ;Calls the above function
    68 00002595 80FC50              <1>     cmp ah, 50h
    69 00002598 0F84A2010000        <1>     je setCurrProcessID
    70                              <1> .fsbegin:
    71 0000259E E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    72 000025A3 48891D(DBC30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    73 000025AA 66C705(9FC30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    73 000025B2 00                  <1>
    74 000025B3 488B05(D3C30300)    <1>     mov rax, qword [oldRSP]
    75 000025BA 488905(C3C30300)    <1>     mov qword [oldoldRSP], rax
    76 000025C1 FE05(64C30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    77 000025C7 488925(D3C30300)    <1>     mov qword [oldRSP], rsp
    78                              <1> ;Network related variable resetting
    79 000025CE C605(79C50300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    80                              <1> ;Here, we want to save oldRSP in the callers PSP
    81 000025D5 803D(64C30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    82 000025DC 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    83 000025DE 488B05(7BC30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    84 000025E5 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    85                              <1> .fsb1:
    86 000025E9 58                  <1>     pop rax     ;Get old rax back
    87 000025EA 50                  <1>     push rax    ;and push it back onto the stack
    88                              <1> .charFun0CEP:
    89 000025EB 488D25(7DCB0300)    <1>     lea rsp, critStakTop
    90 000025F2 FB                  <1>     sti         ;Reenable interrupts
    91                              <1> 
    92 000025F3 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    93 000025F5 881D(EBC30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    94 000025FB C605(ECC30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    95 00002602 881D(C2C30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
    96 00002608 881D(E3C30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    97                              <1> 
    98 0000260E 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    99 0000260F 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   100 00002611 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   101 00002613 488D054FDAFFFF      <1>     lea rax, kDispTbl
   102 0000261A 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   103 0000261D 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   104 00002621 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   105 00002624 58                  <1>     pop rax
   106                              <1> 
   107 00002625 84E4                <1>     test ah, ah     ;Simple Terminate function?
   108 00002627 741C                <1>     jz .fddiskOp
   109 00002629 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   110 0000262C 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   111 0000262E 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   112 00002631 7712                <1>     ja .fddiskOp
   113                              <1> ;Char operations here
   114 00002633 F605(63C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   115 0000263A 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   116 0000263C 488D25(0CD20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   117 00002643 EB40                <1>     jmp short .fdGoToFunction
   118                              <1> .fddiskOp:
   119                              <1>     ;Disk operations go here
   120                              <1>     ;Save rax on entry to a disk funciton
   121 00002645 488905(8FC30300)    <1>     mov qword [oldRAX], rax
   122                              <1>     ;Clear up error info
   123 0000264C C605(66C30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   124 00002653 C605(63C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   125 0000265A C605(65C30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   126                              <1> 
   127 00002661 50                  <1>     push rax
   128 00002662 B482                <1>     mov ah, 82h ;Cancel all critical section!
   129 00002664 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   130 00002666 58                  <1>     pop rax
   131                              <1> 
   132 00002667 C605(ECC30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   133 0000266E 488D25(4CD80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   134 00002675 F605(8EC30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   135 0000267C 7407                <1>     jz .fdGoToFunction
   136                              <1> ; HANDLE CTRL+BREAK HERE!
   137 0000267E 50                  <1>     push rax
   138 0000267F E8D3EAFFFF          <1>     call checkBreak   ; Check for a ^C
   139 00002684 58                  <1>     pop rax
   140                              <1> .fdGoToFunction:
   141 00002685 48871D(DBC30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   142                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   143                              <1>     ;
   144                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   145                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   146                              <1>     ;
   147                              <1>     %if DEBUG && REGS
   148                              <1>     ;Print stack if necessary function
   149                              <1>     debugEnterM
   150                              <1>     call debPrintDOSStack
   151                              <1>     debugExitM
   152                              <1>     %endif
   153 0000268C FF15(DBC30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   154                              <1>     %if DEBUG
   155                              <1>     ;Entry function
   156                              <1>     debugEnterM
   157                              <1>     lea rbp, .l0002
   158                              <1>     call debPrintNullString
   159                              <1>     jmp short .l0003
   160                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   161                              <1> .l0003:    
   162                              <1>     debugExitM
   163                              <1>     %endif
   164                              <1>     %if DEBUG && REGS
   165                              <1>     ;Exit function
   166                              <1>     debugEnterM
   167                              <1>     call debPrintDOSStack
   168                              <1>     debugExitM
   169                              <1>     %endif
   170                              <1> .fdExit:
   171 00002692 FA                  <1>     cli     ;Redisable interrupts
   172 00002693 FE0D(64C30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   173 00002699 488B25(D3C30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   174 000026A0 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   175 000026A3 488B05(C3C30300)    <1>     mov rax, qword [oldoldRSP]
   176 000026AA 488905(D3C30300)    <1>     mov qword [oldRSP], rax
   177 000026B1 E806000000          <1>     call dosPopRegs  ;Pop the frame
   178 000026B6 48CF                <1>     iretq
   179                              <1> .fdExitBad:
   180 000026B8 30C0                <1>     xor al, al
   181                              <1> defaultIretq:
   182 000026BA 48CF                <1>     iretq
   183                              <1> dosPopRegs:
   184 000026BC 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   185 000026C2 58                  <1>     pop rax
   186 000026C3 5B                  <1>     pop rbx
   187 000026C4 59                  <1>     pop rcx
   188 000026C5 5A                  <1>     pop rdx
   189 000026C6 5E                  <1>     pop rsi
   190 000026C7 5F                  <1>     pop rdi
   191 000026C8 5D                  <1>     pop rbp
   192 000026C9 4158                <1>     pop r8
   193 000026CB 4159                <1>     pop r9
   194 000026CD FF25(CBC30300)      <1>     jmp qword [dosReturn]
   195                              <1> dosPushRegs:
   196 000026D3 8F05(CBC30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   197 000026D9 4151                <1>     push r9
   198 000026DB 4150                <1>     push r8
   199 000026DD 55                  <1>     push rbp
   200 000026DE 57                  <1>     push rdi
   201 000026DF 56                  <1>     push rsi
   202 000026E0 52                  <1>     push rdx
   203 000026E1 51                  <1>     push rcx
   204 000026E2 53                  <1>     push rbx
   205 000026E3 50                  <1>     push rax
   206 000026E4 FF25(CBC30300)      <1>     jmp qword [dosReturn]
   207                              <1> dosCrit1Enter:
   208 000026EA C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   209 000026EB B801800000          <1>     mov eax, 8001h
   210 000026F0 CD4A                <1>     int 4ah
   211 000026F2 58                  <1>     pop rax
   212 000026F3 C3                  <1>     ret
   213                              <1> dosCrit1Exit:
   214 000026F4 C3                  <1>     ret
   215 000026F5 B801810000          <1>     mov eax, 8101h
   216 000026FA CD4A                <1>     int 4ah
   217 000026FC 58                  <1>     pop rax
   218 000026FD C3                  <1>     ret
   219                              <1> dosCrit2Enter:
   220 000026FE C3                  <1>     ret
   221 000026FF B802800000          <1>     mov eax, 8002h
   222 00002704 CD4A                <1>     int 4ah
   223 00002706 58                  <1>     pop rax
   224 00002707 C3                  <1>     ret
   225                              <1> dosCrit2Exit:
   226 00002708 C3                  <1>     ret
   227 00002709 B802810000          <1>     mov eax, 8102h
   228 0000270E CD4A                <1>     int 4ah
   229 00002710 58                  <1>     pop rax
   230 00002711 C3                  <1>     ret
   231                              <1> ;========================================:
   232                              <1> ;      Reentrant Kernel Functions        :
   233                              <1> ;========================================:
   234                              <1> ctrlBreakCheck:    ;ah = 33h
   235 00002712 84C0                <1>     test al, al
   236 00002714 7508                <1>     jnz .cbcget  ;Get the state or other functions
   237 00002716 8A15(8EC30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   238 0000271C 48CF                <1>     iretq
   239                              <1> .cbcget:
   240 0000271E 3C02                <1>     cmp al, 02h
   241 00002720 771A                <1>     ja .cbcBad
   242 00002722 740D                <1>     jz .cbcxchg ;Function 2
   243 00002724 52                  <1>     push rdx
   244 00002725 80E201              <1>     and dl, 1   ;Get only the bottom bit
   245 00002728 8815(8EC30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   246 0000272E 5A                  <1>     pop rdx
   247 0000272F 48CF                <1>     iretq
   248                              <1> .cbcxchg:
   249 00002731 80E201              <1>     and dl, 1
   250 00002734 8615(8EC30300)      <1>     xchg byte [breakFlag], dl
   251 0000273A 48CF                <1>     iretq
   252                              <1> .cbcBad:
   253 0000273C B0FF                <1>     mov al, -1
   254 0000273E 48CF                <1>     iretq
   255                              <1> 
   256                              <1> 
   257                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   258 00002740 48891D(7BC30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   259 00002747 48CF                <1>     iretq
   260                              <1> 
   261                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   262 00002749 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   263 00002750 48CF                <1>     iretq
   264                              <1> 
   265                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   266 00002752 488B15(7BC30300)    <1>     mov rdx, qword [currentPSP]
   267 00002759 48CF                <1>     iretq
   268                              <1> 
   269                              <1> setDriverLookahead:;ah = 64h, reserved
   270 0000275B 48CF                <1>     iretq
   271                              <1> 
   272                              <1> ;========================================:
   273                              <1> ;            Kernel Functions            :
   274                              <1> ;========================================:
   275                              <1> diskReset:         ;ah = 0Dh
   276                              <1> ;Flush all dirty buffers to disk
   277 0000275D 488B3D(4EC00300)    <1>     mov rdi, qword [bufHeadPtr]
   278                              <1> .drCheckBuffer:
   279 00002764 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   280 00002768 7407                <1>     jz .drGotoNextBuffer
   281                              <1> .drFlushBuffer:
   282 0000276A E89EDEFFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   283 0000276F 720C                <1>     jc .drExit
   284                              <1> .drGotoNextBuffer:
   285 00002771 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   286 00002774 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   287 0000277B 75E7                <1>     jne .drCheckBuffer
   288                              <1> .drExit:
   289 0000277D C3                  <1>     ret
   290                              <1> 
   291                              <1> selectDisk:        ;ah = 0Eh
   292                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   293 0000277E 88D0                <1>     mov al, dl
   294 00002780 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   295 00002782 E8CFFCFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   296 00002787 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   297 00002789 8805(8DC30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   298                              <1> .skipSettingCurrent:
   299 0000278F 0FB605(69C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   300 00002796 C3                  <1>     ret
   301                              <1> 
   302                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   303 00002797 8A05(8DC30300)      <1>     mov al, byte [currentDrv]
   304 0000279D C3                  <1>     ret
   305                              <1> 
   306                              <1> FATinfoDefault:    ;ah = 1Bh
   307 0000279E 30D2                <1>     xor dl, dl
   308                              <1> FATinfoDevice:     ;ah = 1Ch
   309                              <1> ;Return in:
   310                              <1> ;   al = Number of sectors per cluster
   311                              <1> ;   edx = Number of clusters
   312                              <1> ;   cx =  Size of a clsuter
   313 000027A0 84D2                <1>     test dl, dl
   314 000027A2 7508                <1>     jnz .fidSkipdefault
   315 000027A4 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   316 000027AA FEC2                <1>     inc dl
   317                              <1> .fidSkipdefault:
   318 000027AC FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   319                              <1> ;Walk the dpb chain manually
   320 000027AE 88D0                <1>     mov al, dl  ;Move drive number into al
   321 000027B0 E885FCFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   322 000027B5 7331                <1>     jnc .fidDPBFound
   323                              <1> ;Else, we at an error.
   324                              <1> ;Simply return with CY set and error code in al with extended error info
   325 000027B7 E876FCFFFF          <1>     call getUserRegs
   326 000027BC 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   327 000027C4 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   328 000027C9 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv     
   328 000027D1 00                  <1>
   329 000027D2 C605(66C30300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   330 000027D9 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   331 000027E0 C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   332 000027E7 C3                  <1>     ret
   333                              <1> .fidDPBFound:
   334 000027E8 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   335 000027EB FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   336 000027ED 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   337 000027F0 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ; Save the value in ecx
   338 000027F4 488D5E23            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   339 000027F8 E835FCFFFF          <1>     call getUserRegs
   340 000027FD 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   341 00002801 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   342 00002805 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   343 00002809 C3                  <1>     ret
   344                              <1> 
   345                              <1> setIntVector:      ;ah = 25h
   346                              <1> ;Called with:
   347                              <1> ;   rdx = Pointer to interrupt handler
   348                              <1> ;   al = Interrupt number
   349 0000280A 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   350 0000280C 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   351                              <1> ;First call to get default BIOS segement selector and attribute word
   352 00002812 88C3                <1>     mov bl, al  ;Set interrupt number 
   353 00002814 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   354 00002819 CD35                <1>     int 35h
   355 0000281B E812FCFFFF          <1>     call getUserRegs
   356 00002820 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   357 00002824 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   358 00002826 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   359                              <1> ;dx preserves the attribute word
   360 00002828 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   361 0000282D CD35                <1>     int 35h
   362 0000282F E8FEFBFFFF          <1>     call getUserRegs
   363 00002834 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   364 00002836 C3                  <1>     ret
   365                              <1> createNewPSP:      ;ah = 26h
   366 00002837 C3                  <1>     ret
   367                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   368 00002838 8805(2CC30300)      <1>     mov byte [verifyFlag], al
   369 0000283E 8025(2CC30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   370 00002845 C3                  <1>     ret
   371                              <1> getDOSversion:     ;ah = 30h
   372 00002846 E8E7FBFFFF          <1>     call getUserRegs
   373 0000284B 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   374 0000284D 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   375 00002850 668B05A9D7FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   376 00002857 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   377 0000285A C3                  <1>     ret
   378                              <1> 
   379                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   380                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   381 0000285B 30D2                <1>     xor dl, dl
   382                              <1> getDeviceDPBptr:   ;ah = 32h
   383                              <1> ;On entry: dl = Drive number
   384                              <1> ;On exit: rbx = DPB pointer
   385 0000285D 84D2                <1>     test dl, dl
   386 0000285F 7508                <1>     jnz .gddpskipdefault
   387 00002861 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   388 00002867 FEC2                <1>     inc dl
   389                              <1> .gddpskipdefault:
   390                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   391 00002869 FECA                <1>     dec dl
   392 0000286B 88D0                <1>     mov al, dl
   393 0000286D E84DFCFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   394 00002872 722C                <1>     jc .bad
   395 00002874 488B3D(84C50300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   396 0000287B 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   397 00002881 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   398                              <1>     ;Here ONLY if accessing critical Disk data structures
   399 00002883 E862FEFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   400 00002888 E86DF9FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   401 0000288D E862FEFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   402 00002892 720C                <1>     jc .bad
   403 00002894 E899FBFFFF          <1>     call getUserRegs
   404 00002899 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   405 0000289D 30C0                <1>     xor al, al
   406 0000289F C3                  <1>     ret
   407                              <1> .bad:
   408 000028A0 B0FF                <1>     mov al, -1
   409 000028A2 C3                  <1>     ret
   410                              <1> 
   411                              <1> getInDOSflagPtr:   ;ah = 34h
   412 000028A3 488D15(64C30300)    <1>     lea rdx, inDOS
   413 000028AA E883FBFFFF          <1>     call getUserRegs
   414 000028AF 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   415 000028B3 C3                  <1>     ret
   416                              <1> getIntVector:      ;ah = 35h
   417                              <1> ;Called with:
   418                              <1> ;   al = Interrupt Number
   419                              <1> ;Returns:
   420                              <1> ;   rbx = Pointer to interrupt handler
   421 000028B4 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   422 000028B6 B807F00000          <1>     mov eax, 0F007h
   423 000028BB CD35                <1>     int 35h
   424 000028BD E870FBFFFF          <1>     call getUserRegs
   425 000028C2 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   426 000028C6 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   427 000028C8 C3                  <1>     ret
   428                              <1> 
   429                              <1> getDiskFreeSpace:  ;ah = 36h
   430 000028C9 84D2                <1>     test dl, dl
   431 000028CB 7508                <1>     jnz .gdfsSkipdefault
   432 000028CD 8A15(8DC30300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   433 000028D3 FEC2                <1>     inc dl
   434                              <1> .gdfsSkipdefault:
   435 000028D5 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   436 000028D7 88D0                <1>     mov al, dl
   437 000028D9 E85CFBFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   438 000028DE 7331                <1>     jnc .gdfsDPBFound
   439                              <1> ;Else, we at an error.
   440                              <1> ;Simply return with CY set and error code in al with extended error info
   441 000028E0 66C705(67C30300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   441 000028E8 00                  <1>
   442 000028E9 C605(66C30300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   443 000028F0 C605(6AC30300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   444 000028F7 C605(69C30300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   445 000028FE E82FFBFFFF          <1>     call getUserRegs
   446 00002903 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   447 00002908 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   448 00002910 C3                  <1>     ret
   449                              <1> .gdfsDPBFound:
   450 00002911 8A4604              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   451 00002914 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   452 00002916 8B560F              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   453 00002919 0FB74E02            <1>     movzx ecx, word [rsi + dpb.wBytesPerSector] ;Save the value in ecx
   454 0000291D 8B5E31              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   455 00002920 E80DFBFFFF          <1>     call getUserRegs
   456 00002925 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   457 00002929 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   458 0000292D 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   459 00002931 C3                  <1>     ret
   460                              <1> 
   461                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   462 00002932 31C0                <1>     xor eax, eax
   463 00002934 668705(8BC30300)    <1>     xchg ax, word [errorLevel]
   464 0000293B E8F2FAFFFF          <1>     call getUserRegs
   465 00002940 668906              <1>     mov word [rsi + callerFrame.rax], ax
   466 00002943 C3                  <1>     ret
   467                              <1> 
   468                              <1> getSysVarsPtr:     ;ah = 52h
   469 00002944 488D15(2CC00300)    <1>     lea rdx, sysVarsPtr
   470 0000294B E8E2FAFFFF          <1>     call getUserRegs
   471 00002950 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   472 00002954 C3                  <1>     ret
   473                              <1> 
   474                              <1> 
   475                              <1> ;AH = 53h - CREATE DPB
   476                              <1> createDPB:         ;generates a DPB from a given BPB
   477                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   478                              <1> ;This is done so that the other fields of the DPB can be recycled
   479                              <1> ;Input: rsi = ptr to the BPB
   480                              <1> ;       rbp = ptr to the DPB
   481                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   482                              <1> ;bMediaDescriptor
   483 00002955 8A4615              <1>     mov al, byte [rsi + bpb.media]
   484 00002958 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   485                              <1> ;dFirstFreeCluster
   486 0000295B C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   487                              <1> ;dNumberOfFreeClusters
   488 00002962 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   489                              <1> ;wBytesPerSector
   490 00002969 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   491 0000296D 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   492                              <1> ;bMaxSectorInCluster
   493 00002971 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   494 00002974 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   495 00002976 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   496                              <1> ;bSectorsPerClusterShift
   497 00002979 FEC0                <1>     inc al
   498 0000297B 30C9                <1>     xor cl, cl
   499                              <1> .cd2:
   500 0000297D D0E8                <1>     shr al, 1
   501 0000297F 7404                <1>     jz .cd3
   502 00002981 FEC1                <1>     inc cl
   503 00002983 EBF8                <1>     jmp short .cd2
   504                              <1> .cd3:
   505 00002985 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   506                              <1> ;wFAToffset, number of reserved sectors in partition
   507 00002988 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   508 0000298C 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   509                              <1> ;bNumberOfFATs
   510 00002990 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   511 00002993 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   512                              <1> ;wNumberRootDirSectors
   513 00002996 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   514 0000299A C1E005              <1>     shl eax, 5  ;Multiply by 32
   515 0000299D 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   516 000029A1 FFC9                <1>     dec ecx
   517 000029A3 01C8                <1>     add eax, ecx
   518 000029A5 31D2                <1>     xor edx, edx    ;Clear for divide
   519 000029A7 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   520 000029A9 66894509            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   521                              <1> ;dFATlength, get the FAT length
   522 000029AD 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   523 000029B1 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   524 000029B4 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   525 000029B6 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   526 000029B9 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   527                              <1> ;Complex cases below...
   528                              <1> ;dClusterHeapOffset, start sector of the data area
   529 000029BC 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   530 000029C0 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   531 000029C3 85C0                <1>     test eax, eax
   532 000029C5 0F44C3              <1>     cmovz eax, ebx
   533                              <1> ;eax = FATsz
   534 000029C8 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   535 000029CC 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   536 000029CF 85DB                <1>     test ebx, ebx
   537 000029D1 0F44D9              <1>     cmovz ebx, ecx 
   538                              <1> ;ebx = TotSec
   539 000029D4 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   540 000029D7 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   541                              <1> .cd4:
   542 000029D9 01C2                <1>     add edx, eax
   543 000029DB FEC9                <1>     dec cl
   544 000029DD 75FA                <1>     jnz .cd4
   545 000029DF 89D0                <1>     mov eax, edx    ;Store product in eax
   546 000029E1 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   547 000029E5 01D0                <1>     add eax, edx
   548 000029E7 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   549 000029EB 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   550                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   551                              <1>     ;aka eax = Start sector of the data area in volume
   552 000029ED 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   553                              <1> ;dClusterCount
   554 000029F0 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   555 000029F2 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   556 000029F4 31D2                <1>     xor edx, edx
   557 000029F6 BB01000000          <1>     mov ebx, 1
   558 000029FB 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   559 000029FE D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   560 00002A00 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   561 00002A02 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   562 00002A04 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   563                              <1> ;dFirstUnitOfRootDir
   564 00002A07 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   565 00002A0C 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   566 00002A0F 7709                <1>     ja .cd5
   567                              <1>     ;Else, we need to find the first sector of the root directory
   568                              <1>     ;Get the start sector of data area in volume 
   569                              <1>     ; and sub the number of sectors in the root directory
   570 00002A11 8B450B              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   571 00002A14 0FB75D09            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   572 00002A18 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   573                              <1> .cd5:
   574 00002A1A 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   575                              <1> ;Exit epilogue
   576 00002A1D 488B1D(D3C30300)    <1>     mov rbx, qword [oldRSP]
   577 00002A24 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   578                              <1>     %if DEBUG && DPBINFO
   579                              <1>     ;Print DPB 
   580                              <1>     debugEnterM
   581                              <1>     push rbp
   582                              <1>     lea rbp, .l0000
   583                              <1>     call debPrintNullString
   584                              <1>     pop rbp
   585                              <1>     call debDPBBPBptr
   586                              <1>     call debMakeDebuggerRespond
   587                              <1>     jmp short .l0001
   588                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   589                              <1> .l0001:
   590                              <1>     debugExitM
   591                              <1>     %endif
   592 00002A26 C3                  <1>     ret
   593                              <1> 
   594                              <1> getVerifySetting:  ;ah = 54h
   595 00002A27 8A05(2CC30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   596 00002A2D C3                  <1>     ret
   597                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   598 00002A2E C3                  <1>     ret
   599                              <1> getExtendedError:  ;ah = 59h
   600 00002A2F E8FEF9FFFF          <1>     call getUserRegs
   601 00002A34 668B05(67C30300)    <1>     mov ax, word [errorExCde]
   602 00002A3B 8A2D(66C30300)      <1>     mov ch, byte [errorLocus]
   603 00002A41 8A3D(6AC30300)      <1>     mov bh, byte [errorClass]
   604 00002A47 8A1D(69C30300)      <1>     mov bl, byte [errorAction]
   605 00002A4D 668906              <1>     mov word [rsi + callerFrame.rax], ax
   606 00002A50 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   607 00002A54 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   608 00002A57 C3                  <1>     ret
   609                              <1> getCritErrorInfo:  ;ah = 5Dh
   610                              <1> networkServices:   ;ah = 5Eh, do nothing
   611                              <1> networkRedirection:;ah = 5Fh, do nothing
   612 00002A58 C3                  <1>     ret
   613                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   614                              <1> noOp:
   615 00002A59 C3                  <1>     ret
    36                                  %include "./Source/Kernel/multiplx.asm"
    37                              <1> ;Default multiplexer. Current only installed function is ah=12h
    38                              <1> 
    39                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    40 00002A5A 80FC12              <1>     cmp ah, 12h
    41 00002A5D 751A                <1>     jne .exit       ;Exit if not for us
    42 00002A5F 3C01                <1>     cmp al, mDispTblL / 2
    43 00002A61 7316                <1>     jae .exit   ;If above or equal, exit
    44 00002A63 53                  <1>     push rbx
    45 00002A64 51                  <1>     push rcx
    46 00002A65 31C9                <1>     xor ecx, ecx
    47 00002A67 488D1DCFD6FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    48 00002A6E 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    49 00002A70 D1E1                <1>     shl ecx, 1   ;multiply by 2
    50 00002A72 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    51 00002A75 FFD3                <1>     call rbx
    52 00002A77 59                  <1>     pop rcx
    53 00002A78 5B                  <1>     pop rbx
    54                              <1> .exit:
    55 00002A79 48CF                <1>     iretq
    56                              <1> multiplexTest:
    57 00002A7B B0FF                <1>     mov al, -1
    58 00002A7D C3                  <1>     ret
    37                                  %include "./Source/Misc/int44h.asm"
    38                              <1> critErrorHandler:   ;Int 44h
    39                              <1> ;User Stack in usage here, must be swapped to before this is called
    40                              <1> ;Entered with:  
    41                              <1> ;               AH = Critical Error Bitfield
    42                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    43                              <1> ;               Bit 6 - Reserved
    44                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    45                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    46                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    47                              <1> ;               Bits [2-1] = Affected Disk Error
    48                              <1> ;                     0 0   DOS area
    49                              <1> ;                     0 1   FAT area
    50                              <1> ;                     1 0   Directory area
    51                              <1> ;                     1 1   Data area
    52                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    53                              <1> ;               AL  = Failing drive number if AH[7] = 0
    54                              <1> ;               DIL = Error code for errorMsg
    55                              <1> ;               RSI = EA of Device Header for which device the error occured
    56                              <1> ;Return:
    57                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    58                              <1> ;                  = 1 - Retry the Operation    (Retry)
    59                              <1> ;                  = 2 - Terminate the Program  (Abort)
    60                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    61 00002A7E 53                  <1>     push rbx
    62 00002A7F 51                  <1>     push rcx
    63 00002A80 52                  <1>     push rdx
    64 00002A81 57                  <1>     push rdi
    65 00002A82 56                  <1>     push rsi
    66 00002A83 FC                  <1>     cld         ;Make String ops go forward
    67                              <1> 
    68 00002A84 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    69 00002A87 488D155E020000      <1>     lea rdx, qword [.crlf]
    70 00002A8E B409                <1>     mov ah, 09h ;Print String
    71 00002A90 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    72                              <1> 
    73 00002A92 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    74 00002A98 B90C000000          <1>     mov ecx, 0Ch
    75 00002A9D 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    76 00002A9F 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    77 00002AA2 480FB7FF            <1>     movzx rdi, di
    78 00002AA6 4889FA              <1>     mov rdx, rdi    ;Copy error code
    79 00002AA9 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    80 00002AAD 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    81 00002AB0 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    82 00002AB3 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    83 00002ABA 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    84 00002ABE B409                <1>     mov ah, 09h ;Print String
    85 00002AC0 CD41                <1>     int 41h     ;Call DOS to print first part of message
    86                              <1> 
    87 00002AC2 488D1505020000      <1>     lea rdx, qword [.readmsg]
    88 00002AC9 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    89 00002AD0 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    90 00002AD3 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    91 00002AD7 B409                <1>     mov ah, 09h ;Print String
    92 00002AD9 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    93                              <1> 
    94 00002ADB F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    95 00002ADE 0F85DF000000        <1>     jnz .charError
    96                              <1> ;Disk error continues here
    97 00002AE4 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    98 00002AEB B409                <1>     mov ah, 09h
    99 00002AED CD41                <1>     int 41h
   100 00002AEF 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   101 00002AF1 80C241              <1>     add dl, "A" ;Add ASCII code
   102 00002AF4 B402                <1>     mov ah, 02h ;Print char in dl
   103 00002AF6 CD41                <1>     int 41h
   104                              <1> .userInput:
   105 00002AF8 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   106 00002AFF B409                <1>     mov ah, 09h
   107 00002B01 CD41                <1>     int 41h
   108                              <1> ;Abort, Retry, Ignore, Fail is word order
   109                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   110                              <1> .userAbort:
   111                              <1> ;Abort is always an option
   112 00002B03 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   113 00002B0A B409                <1>     mov ah, 09h
   114 00002B0C CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   115                              <1> .userRetry:
   116 00002B0E F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   117 00002B11 7416                <1>     jz .userIgnore    ;If clear, dont print message
   118 00002B13 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   119 00002B1A B409                <1>     mov ah, 09h
   120 00002B1C CD41                <1>     int 41h
   121 00002B1E 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   122 00002B25 B409                <1>     mov ah, 09h
   123 00002B27 CD41                <1>     int 41h
   124                              <1> .userIgnore:
   125 00002B29 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   126 00002B2C 7416                <1>     jz .userFail
   127 00002B2E 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   128 00002B35 B409                <1>     mov ah, 09h
   129 00002B37 CD41                <1>     int 41h
   130 00002B39 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   131 00002B40 B409                <1>     mov ah, 09h
   132 00002B42 CD41                <1>     int 41h
   133                              <1> .userFail:
   134 00002B44 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   135 00002B47 7416                <1>     jz .userMsgEnd
   136 00002B49 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   137 00002B50 B409                <1>     mov ah, 09h
   138 00002B52 CD41                <1>     int 41h
   139 00002B54 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   140 00002B5B B409                <1>     mov ah, 09h
   141 00002B5D CD41                <1>     int 41h
   142                              <1> .userMsgEnd:
   143 00002B5F 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   144 00002B66 B409                <1>     mov ah, 09h
   145 00002B68 CD41                <1>     int 41h
   146                              <1> ;Get user input now 
   147 00002B6A 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   148 00002B6C 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   149 00002B73 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   150 00002B75 CD41                <1>     int 41h ;Get char in al
   151 00002B77 3C61                <1>     cmp al, "a" ;Chack if lowercase
   152 00002B79 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   153 00002B7B 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   154                              <1> .uip1:
   155 00002B7D AE                  <1>     scasb   ;Compare char to list, offset gives return code
   156 00002B7E 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   157 00002B80 FFC1                <1>     inc ecx
   158 00002B82 81F904000000        <1>     cmp ecx, 4
   159 00002B88 75F3                <1>     jne .uip1
   160 00002B8A E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   161                              <1> .validInput:
   162 00002B8F 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   163                              <1> ;Now check if the input is permitted
   164 00002B91 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   165 00002B93 7427                <1>     je .cehExit
   166 00002B95 84C0                <1>     test al, al ;Check if 0 => Ignore
   167 00002B97 740F                <1>     je .viIgnore
   168 00002B99 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   169 00002B9B 7416                <1>     je .viRetry
   170                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   171 00002B9D F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   172 00002BA0 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   173 00002BA6 EB14                <1>     jmp short .cehExit
   174                              <1> .viIgnore:
   175 00002BA8 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   176 00002BAB 0F8447FFFFFF        <1>     jz .userInput
   177 00002BB1 EB09                <1>     jmp short .cehExit
   178                              <1> .viRetry:
   179 00002BB3 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   180 00002BB6 0F843CFFFFFF        <1>     jz .userInput
   181                              <1> .cehExit:
   182 00002BBC 5E                  <1>     pop rsi
   183 00002BBD 5F                  <1>     pop rdi
   184 00002BBE 5A                  <1>     pop rdx
   185 00002BBF 59                  <1>     pop rcx
   186 00002BC0 5B                  <1>     pop rbx
   187 00002BC1 48CF                <1>     iretq
   188                              <1> .charError:
   189 00002BC3 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   190 00002BC8 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   191                              <1> .ce1:
   192 00002BCF AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   193 00002BD0 88C2                <1>     mov dl, al  ;Move char into dl
   194 00002BD2 B402                <1>     mov ah, 02h
   195 00002BD4 CD41                <1>     int 41h ;Print char
   196 00002BD6 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   197 00002BD8 E91BFFFFFF          <1>     jmp .userInput
   198                              <1> 
   199                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   200 00002BDD 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   200 00002BE6 746563742024202020  <1>
   201 00002BEF 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   201 00002BF8 6E6974202420202020  <1>
   202 00002C01 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   202 00002C0A 202420202020202020  <1>
   203 00002C13 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   203 00002C1C 6F6D6D616E64202420  <1>
   204 00002C25 446174612024202020- <1>             db "Data $            "       ;Error 4
   204 00002C2E 202020202020202020  <1>
   205 00002C37 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   205 00002C40 737420242020202020  <1>
   206 00002C49 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   206 00002C52 202020202020202020  <1>
   207 00002C5B 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   207 00002C64 656469612024202020  <1>
   208 00002C6D 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   208 00002C76 7420466F756E642024  <1>
   209 00002C7F 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   209 00002C88 706572202420202020  <1>
   210 00002C91 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   210 00002C9A 6C7420242020202020  <1>
   211 00002CA3 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   211 00002CAC 742024202020202020  <1>
   212 00002CB5 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   212 00002CBE 61696C757265202420  <1>
   213                              <1> 
   214 00002CC7 64726976652024      <1> .drive      db "drive $"
   215 00002CCE 6572726F7220726561- <1> .readmsg    db "error reading $"
   215 00002CD7 64696E672024        <1>
   216 00002CDD 6572726F7220777269- <1> .writemsg   db "error writing $"
   216 00002CE6 74696E672024        <1>
   217 00002CEC 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   218 00002CEF 41626F727424        <1> .abortmsg   db "Abort$" 
   219 00002CF5 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   220 00002CFC 526574727924        <1> .retrymsg   db "Retry$"
   221 00002D02 4661696C24          <1> .failmsg    db "Fail$"
   222 00002D07 2C2024              <1> .betweenMsg db ", $"
   223 00002D0A 3F2024              <1> .endMsg     db "? $"
   224 00002D0D 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    38                                  %include "./Source/Drivers/drvData.asm"
    39                              <1> ;-----------------------------------:
    40                              <1> ;          Driver routines          :
    41                              <1> ;-----------------------------------:
    42                              <1> drivers:
    43                              <1> conHdr:
    44 00002D11 [332D000000000000]  <1>     dq auxHdr
    45 00002D19 1308                <1>     dw 0813h
    46 00002D1B [B12E000000000000]  <1>     dq commonStrat
    47 00002D23 [C02E000000000000]  <1>     dq conDriver
    48 00002D2B 434F4E2020202020    <1>     db "CON     "
    49                              <1> auxHdr:
    50 00002D33 [552D000000000000]  <1>     dq prnHdr
    51 00002D3B 0080                <1>     dw 08000h
    52 00002D3D [B12E000000000000]  <1>     dq commonStrat
    53 00002D45 [7131000000000000]  <1>     dq com1Intr
    54 00002D4D 4155582020202020    <1>     db "AUX     "
    55                              <1> prnHdr:
    56 00002D55 [772D000000000000]  <1>     dq clkHdr
    57 00002D5D 40A0                <1>     dw 0A040h
    58 00002D5F [B92E000000000000]  <1>     dq nulStrat
    59 00002D67 [BF2E000000000000]  <1>     dq nulIntr
    60 00002D6F 50524E2020202020    <1>     db "PRN     "
    61                              <1> clkHdr:
    62 00002D77 [992D000000000000]  <1>     dq msdHdr
    63 00002D7F 0880                <1>     dw 08008h
    64 00002D81 [B12E000000000000]  <1>     dq commonStrat
    65 00002D89 [0930000000000000]  <1>     dq clkDriver
    66 00002D91 434C4F434B242020    <1>     db "CLOCK$  "
    67                              <1> msdHdr:
    68 00002D99 [BB2D000000000000]  <1>     dq com1Hdr
    69 00002DA1 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    70 00002DA3 [B12E000000000000]  <1>     dq commonStrat
    71 00002DAB [1633000000000000]  <1>     dq msdDriver
    72 00002DB3 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    73                              <1> com1Hdr:
    74 00002DBB [DD2D000000000000]  <1>     dq com2Hdr
    75 00002DC3 0080                <1>     dw 08000h
    76 00002DC5 [B12E000000000000]  <1>     dq commonStrat
    77 00002DCD [7131000000000000]  <1>     dq com1Intr
    78 00002DD5 434F4D3120202020    <1>     db "COM1    "
    79                              <1> com2Hdr:
    80 00002DDD [FF2D000000000000]  <1>     dq com3Hdr
    81 00002DE5 0080                <1>     dw 08000h
    82 00002DE7 [B12E000000000000]  <1>     dq commonStrat
    83 00002DEF [7A31000000000000]  <1>     dq com2Intr
    84 00002DF7 434F4D3220202020    <1>     db "COM2    "
    85                              <1> com3Hdr:
    86 00002DFF [212E000000000000]  <1>     dq com4Hdr
    87 00002E07 0080                <1>     dw 08000h
    88 00002E09 [B12E000000000000]  <1>     dq commonStrat
    89 00002E11 [8331000000000000]  <1>     dq com3Intr
    90 00002E19 434F4D3320202020    <1>     db "COM3    "
    91                              <1> com4Hdr:
    92 00002E21 [432E000000000000]  <1>     dq lpt1Hdr
    93 00002E29 0080                <1>     dw 08000h
    94 00002E2B [B12E000000000000]  <1>     dq commonStrat
    95 00002E33 [8C31000000000000]  <1>     dq com4Intr
    96 00002E3B 434F4D3420202020    <1>     db "COM4    "
    97                              <1> lpt1Hdr:
    98 00002E43 [652E000000000000]  <1>     dq lpt2Hdr
    99 00002E4B 40A0                <1>     dw 0A040h
   100 00002E4D [B92E000000000000]  <1>     dq nulStrat
   101 00002E55 [BF2E000000000000]  <1>     dq nulIntr
   102 00002E5D 4C50543120202020    <1>     db "LPT1    "
   103                              <1> lpt2Hdr:
   104 00002E65 [872E000000000000]  <1>     dq lpt3Hdr
   105 00002E6D 40A0                <1>     dw 0A040h
   106 00002E6F [B92E000000000000]  <1>     dq nulStrat
   107 00002E77 [BF2E000000000000]  <1>     dq nulIntr
   108 00002E7F 4C50543220202020    <1>     db "LPT2    "
   109                              <1> lpt3Hdr:
   110 00002E87 FFFFFFFFFFFFFFFF    <1>     dq -1
   111 00002E8F 40A0                <1>     dw 0A040h
   112 00002E91 [B92E000000000000]  <1>     dq nulStrat
   113 00002E99 [BF2E000000000000]  <1>     dq nulIntr
   114 00002EA1 4C50543320202020    <1>     dq "LPT3    "
   115 00002EA9 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    39                                  %include "./Source/Drivers/charDrv.asm"
    40                              <1> commonStrat:
    41                              <1> ;DOS calls this function with rbx=Ptr to request header
    42 00002EB1 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    43 00002EB8 C3                  <1>     ret
    44                              <1> nulStrat:
    45 00002EB9 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    46                              <1> nulIntr:
    47 00002EBF C3                  <1>     ret
    48                              <1> conDriver:
    49 00002EC0 50                  <1>     push rax
    50 00002EC1 53                  <1>     push rbx
    51 00002EC2 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    52 00002EC9 B003                <1>     mov al, 03h ;Unknown Command
    53 00002ECB 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    54 00002ECF 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    55                              <1> 
    56 00002ED1 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    57 00002ED4 3C04                <1>     cmp al, 4
    58 00002ED6 743D                <1>     jz .conRead
    59 00002ED8 3C05                <1>     cmp al, 5
    60 00002EDA 747F                <1>     jz .conNondestructiveRead
    61 00002EDC 3C06                <1>     cmp al, 6
    62 00002EDE 0F84A8000000        <1>     jz .conInputStatus
    63 00002EE4 3C07                <1>     cmp al, 7
    64 00002EE6 0F84B0000000        <1>     jz .conFlushInputBuffers
    65 00002EEC 3C08                <1>     cmp al, 8
    66 00002EEE 0F84CA000000        <1>     jz .conWrite
    67 00002EF4 3C09                <1>     cmp al, 9
    68 00002EF6 0F84C2000000        <1>     jz .conWrite
    69 00002EFC 3C0A                <1>     cmp al, 0Ah
    70 00002EFE 0F84E3000000        <1>     jz .conOutputStatus
    71 00002F04 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    72                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    73 00002F06 B480                <1>     mov ah, 80h ;Set error bit
    74 00002F08 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    75                              <1> .conExit:
    76 00002F0C 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    77 00002F12 5B                  <1>     pop rbx
    78 00002F13 58                  <1>     pop rax
    79 00002F14 C3                  <1>     ret
    80                              <1> .conRead:    ;Function 4
    81 00002F15 B005                <1>     mov al, 05h ;Bad request structure length?
    82 00002F17 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    83 00002F1A 75EA                <1>     jne .conWriteErrorCode
    84                              <1> 
    85 00002F1C 57                  <1>     push rdi
    86 00002F1D 51                  <1>     push rcx
    87 00002F1E 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    88 00002F22 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    89                              <1> .cre1:
    90 00002F24 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    91 00002F27 741C                <1>     je .cre2
    92 00002F29 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    93 00002F30 751A                <1>     jnz .cre3   ;No, get the buffer value
    94 00002F32 31C0                <1>     xor eax, eax
    95 00002F34 CD36                <1>     int 36h
    96                              <1> .cre11:
    97 00002F36 AA                  <1>     stosb
    98 00002F37 84C0                <1>     test al, al ;Was the ascii code stored 0?
    99 00002F39 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   100 00002F3B 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   101                              <1> .cre12:
   102 00002F41 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   103 00002F43 EBDF                <1>     jmp short .cre1
   104                              <1> .cre2:
   105 00002F45 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   106 00002F48 59                  <1>     pop rcx
   107 00002F49 5F                  <1>     pop rdi
   108 00002F4A EBC0                <1>     jmp short .conExit
   109                              <1> .cre3:
   110 00002F4C 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   111 00002F52 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   112 00002F59 EBDB                <1>     jmp short .cre11
   113                              <1> 
   114                              <1> .conNondestructiveRead:  ;Function 5
   115 00002F5B B005                <1>     mov al, 05h ;Bad request structure length?
   116 00002F5D 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   117 00002F60 75A4                <1>     jne .conWriteErrorCode
   118 00002F62 803D8E00000000      <1>     cmp byte [.conBuf], 0
   119 00002F69 7519                <1>     jnz .cnr2
   120 00002F6B B401                <1>     mov ah, 01h     ;Get key if exists
   121 00002F6D CD36                <1>     int 36h
   122 00002F6F 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   123                              <1>     ;Keystroke available
   124                              <1> .cnr0:
   125 00002F71 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   126 00002F74 E993FFFFFF          <1>     jmp .conExit
   127                              <1> .cnr1: ;No keystroke available
   128 00002F79 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   129 00002F7F E988FFFFFF          <1>     jmp .conExit
   130                              <1> .cnr2:
   131 00002F84 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   132 00002F8A EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   133                              <1> 
   134                              <1> .conInputStatus:         ;Function 6
   135 00002F8C B005                <1>     mov al, 05h ;Bad request structure length?
   136 00002F8E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   137 00002F91 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   138 00002F97 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   139                              <1> 
   140                              <1> .conFlushInputBuffers:   ;Function 7
   141 00002F9C B005                <1>     mov al, 05h ;Bad request structure length?
   142 00002F9E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   143 00002FA1 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   144 00002FA7 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   145                              <1> .cfib0:
   146 00002FAE B401                <1>     mov ah, 01      ;Get buffer status
   147 00002FB0 CD36                <1>     int 36h
   148 00002FB2 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   149 00002FB8 30E4                <1>     xor ah, ah
   150 00002FBA CD36                <1>     int 36h ;Read key to flush from buffer
   151 00002FBC EBF0                <1>     jmp short .cfib0
   152                              <1> 
   153                              <1> .conWrite:   ;Function 8 and 9
   154 00002FBE B005                <1>     mov al, 05h ;Bad request structure length?
   155 00002FC0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   156 00002FC3 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   157                              <1> 
   158 00002FC9 56                  <1>     push rsi
   159 00002FCA 51                  <1>     push rcx
   160 00002FCB 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   161 00002FCF 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   162                              <1> .cw1: 
   163 00002FD1 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   164 00002FD4 7407                <1>     je .cw2
   165 00002FD6 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   166 00002FD7 CD49                <1>     int 49h ;Fast print char
   167 00002FD9 FFC1                <1>     inc ecx
   168 00002FDB EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   169                              <1> .cw2:
   170 00002FDD 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   171 00002FE0 59                  <1>     pop rcx
   172 00002FE1 5E                  <1>     pop rsi
   173 00002FE2 E925FFFFFF          <1>     jmp .conExit
   174                              <1> .conOutputStatus:   ;Function 0Ah
   175 00002FE7 B005                <1>     mov al, 05h ;Bad request structure length?
   176 00002FE9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   177 00002FEC 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   178 00002FF2 E915FFFFFF          <1>     jmp .conExit
   179                              <1> 
   180 00002FF7 00                  <1> .conBuf db 0    ;Single byte buffer
   181                              <1> fastOutput:         ;This CON driver supports Int 49h
   182                              <1> ;Called with char to transfer in al
   183 00002FF8 50                  <1>     push rax
   184 00002FF9 B40E                <1>     mov ah, 0Eh
   185 00002FFB CD30                <1>     int 30h
   186 00002FFD 58                  <1>     pop rax
   187 00002FFE 48CF                <1>     iretq
   188                              <1> ctrlBreak:
   189                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   190 00003000 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   191 00003007 48CF                <1>     iretq
   192                              <1> 
   193                              <1> clkDriver:
   194 00003009 50                  <1>     push rax
   195 0000300A 53                  <1>     push rbx
   196 0000300B 51                  <1>     push rcx
   197 0000300C 52                  <1>     push rdx
   198 0000300D 56                  <1>     push rsi
   199 0000300E 55                  <1>     push rbp
   200 0000300F 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   201 00003016 B003                <1>     mov al, 03h ;Unknown Command
   202 00003018 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   203 0000301C 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   204                              <1> 
   205 0000301E 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   206 00003021 3C04                <1>     cmp al, 04h
   207 00003023 7437                <1>     jz .clkRead
   208 00003025 3C06                <1>     cmp al, 06h
   209 00003027 0F8494000000        <1>     jz .clkInputStatus
   210 0000302D 3C07                <1>     cmp al, 07h
   211 0000302F 0F8498000000        <1>     jz .clkFlushInputBuffers
   212 00003035 3C08                <1>     cmp al, 08h
   213 00003037 0F84A0000000        <1>     jz .clkWrite
   214 0000303D 3C09                <1>     cmp al, 09h
   215 0000303F 0F8498000000        <1>     jz .clkWrite
   216 00003045 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   217                              <1> .clkNotFunctioning:
   218 00003047 B002                <1>     mov al, 02h ;Device not ready error
   219                              <1> .clkWriteErrorCode:
   220 00003049 B480                <1>     mov ah, 80h ;Set error bit
   221 0000304B 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   222                              <1> .clkExit:
   223 0000304F 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   224 00003055 5D                  <1>     pop rbp
   225 00003056 5E                  <1>     pop rsi
   226 00003057 5A                  <1>     pop rdx
   227 00003058 59                  <1>     pop rcx
   228 00003059 5B                  <1>     pop rbx
   229 0000305A 58                  <1>     pop rax
   230 0000305B C3                  <1>     ret
   231                              <1> 
   232                              <1> .clkRead:           ;Function 4
   233 0000305C B005                <1>     mov al, 05h ;Bad request structure length?
   234 0000305E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   235 00003061 75E6                <1>     jne .clkWriteErrorCode
   236                              <1> 
   237 00003063 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   238 00003066 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   239 0000306A 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   240 00003071 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   241 00003075 30E4                <1>     xor ah, ah
   242 00003077 CD3A                <1>     int 3Ah         ;Read the system timer
   243 00003079 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   244 0000307B 740D                <1>     jz .clkr1       ;Nope, now just time 
   245 0000307D 30E4                <1>     xor ah, ah
   246                              <1>     ;This works as al should keep count of the # of days passed since last read
   247 0000307F 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   248 00003083 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   249                              <1> .clkr1:
   250 0000308A 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   251 0000308D 0FB7D2              <1>     movzx edx, dx
   252 00003090 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   253 00003092 89D0                <1>     mov eax, edx
   254 00003094 31D2                <1>     xor edx, edx
   255 00003096 89D8                <1>     mov eax, ebx
   256 00003098 B944040000          <1>     mov ecx, 1092   
   257 0000309D F7F1                <1>     div ecx
   258 0000309F 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   259 000030A2 89D0                <1>     mov eax, edx    ;Get remainder in eax
   260 000030A4 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   261 000030A8 31D2                <1>     xor edx, edx
   262 000030AA B95B000000          <1>     mov ecx, 91 ;5*18.2
   263 000030AF F7F1                <1>     div ecx
   264 000030B1 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   265 000030B4 89D0                <1>     mov eax, edx    ;Get remainder in eax
   266                              <1>     ;lea eax, dword [eax + 4*eax]
   267                              <1>     ;add eax, edx    ;Essentially multiply by 6
   268 000030B6 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   269 000030B9 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   270 000030BC E98EFFFFFF          <1>     jmp .clkExit
   271                              <1> 
   272                              <1> .clkInputStatus:    ;Function 6
   273                              <1> ;Always return ready
   274 000030C1 B005                <1>     mov al, 05h ;Bad request structure length?
   275 000030C3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   276 000030C6 7581                <1>     jne .clkWriteErrorCode
   277 000030C8 E982FFFFFF          <1>     jmp .clkExit
   278                              <1> .clkFlushInputBuffers:  ;Function 7
   279                              <1> ;Always return done immediately
   280 000030CD B005                <1>     mov al, 05h ;Bad request structure length?
   281 000030CF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   282 000030D2 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   283 000030D8 E972FFFFFF          <1>     jmp .clkExit
   284                              <1> 
   285                              <1> .clkWrite:          ;Functions 8 and 9
   286 000030DD B005                <1>     mov al, 05h ;Bad request structure length?
   287 000030DF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   288 000030E2 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   289                              <1> 
   290 000030E8 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   291 000030EB 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   292 000030EF 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   293 000030F3 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   294                              <1> 
   295 000030FA 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   296 000030FC 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   297 00003100 B105                <1>     mov cl, 5
   298 00003102 F6F1                <1>     div cl          ;Divide al by 5
   299 00003104 30E4                <1>     xor ah, ah      ;Remove the remainder
   300 00003106 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   301                              <1> ;Using the decimal part of this formula for the low count
   302                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   303 00003108 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   304 0000310B B912000000          <1>     mov ecx, 18
   305 00003110 F7E1                <1>     mul ecx  
   306 00003112 01C3                <1>     add ebx, eax
   307                              <1> 
   308 00003114 31D2                <1>     xor edx, edx
   309 00003116 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   310 0000311A B944040000          <1>     mov ecx, 1092
   311 0000311F F7E1                <1>     mul ecx
   312 00003121 01C3                <1>     add ebx, eax
   313 00003123 89DA                <1>     mov edx, ebx    ;edx now has low count
   314 00003125 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   315 00003129 B401                <1>     mov ah, 01h     ;Set the system time
   316 0000312B CD3A                <1>     int 3Ah
   317                              <1> 
   318 0000312D 4889F3              <1>     mov rbx, rsi
   319 00003130 E91AFFFFFF          <1>     jmp .clkExit
   320                              <1> 
   321                              <1> .clkBCDtoHex:
   322                              <1> ;Converts a BCD value to a Hex byte
   323                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   324 00003135 51                  <1>     push rcx
   325 00003136 0FB6C0              <1>     movzx eax, al   ;Zero extend
   326 00003139 89C1                <1>     mov ecx, eax    ;Save al in ecx
   327 0000313B 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   328 00003140 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   329 00003146 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   330                              <1> .cbth0:
   331 00003149 050A000000          <1>     add eax, 10
   332 0000314E E2F9                <1>     loop .cbth0
   333 00003150 59                  <1>     pop rcx
   334 00003151 C3                  <1>     ret
   335                              <1> 
   336                              <1> .clkHexToBCD:
   337                              <1> ;Converts a Hex byte into two BCD digits
   338                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   339 00003152 51                  <1>     push rcx
   340 00003153 0FB6C0              <1>     movzx eax, al   ;Zero extend
   341 00003156 31C9                <1>     xor ecx, ecx
   342                              <1> .chtb0:
   343 00003158 3D0A000000          <1>     cmp eax, 10
   344 0000315D 7209                <1>     jb .chtb1
   345 0000315F 2D0A000000          <1>     sub eax, 10
   346 00003164 FFC1                <1>     inc ecx
   347 00003166 EBF0                <1>     jmp short .chtb0
   348                              <1> .chtb1:
   349 00003168 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   350 0000316B 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   351 0000316D 59                  <1>     pop rcx
   352 0000316E C3                  <1>     ret
   353 0000316F 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   354                              <1> 
   355                              <1> ;COM Driver headers and main interrupt strat
   356                              <1> com1Intr:
   357 00003171 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   358 00003178 EB19                <1>     jmp short comIntr
   359                              <1> com2Intr:
   360 0000317A C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   361 00003181 EB10                <1>     jmp short comIntr
   362                              <1> com3Intr:
   363 00003183 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   364 0000318A EB07                <1>     jmp short comIntr
   365                              <1> com4Intr:
   366 0000318C C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   367                              <1> comIntr:
   368 00003193 50                  <1>     push rax
   369 00003194 53                  <1>     push rbx
   370 00003195 51                  <1>     push rcx
   371 00003196 52                  <1>     push rdx
   372 00003197 56                  <1>     push rsi
   373 00003198 57                  <1>     push rdi
   374 00003199 488B1D09FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   375 000031A0 B003                <1>     mov al, 03h ;Unknown Command
   376 000031A2 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   377 000031A6 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   378                              <1> 
   379 000031A8 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   380 000031AB 3C04                <1>     cmp al, 4   ;Read Character(s)
   381 000031AD 7462                <1>     jz .comRead
   382 000031AF 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   383 000031B1 0F849B000000        <1>     jz .comNondestructiveRead   
   384 000031B7 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   385 000031B9 0F8484000000        <1>     jz .comReadInputStatus
   386 000031BF 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   387 000031C1 0F84B9000000        <1>     jz .comFlushInputBuffers
   388 000031C7 3C08                <1>     cmp al, 8
   389 000031C9 0F84DB000000        <1>     jz .comWrite
   390 000031CF 3C09                <1>     cmp al, 9
   391 000031D1 0F84D3000000        <1>     jz .comWrite
   392 000031D7 3C0A                <1>     cmp al, 0Ah
   393 000031D9 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   394 000031DF EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   395                              <1> .comErrorNoCount:
   396 000031E1 B002                <1>     mov al, 02h ;Unknown device
   397 000031E3 EB19                <1>     jmp short .comWriteErrorCode
   398                              <1> .comReadError:
   399 000031E5 BA0B000000          <1>     mov edx, 0Bh
   400                              <1> .comWriteError:
   401 000031EA BA0A000000          <1>     mov edx, 0Ah
   402                              <1> .comError:
   403 000031EF 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   404 000031F2 B902000000          <1>     mov ecx, 02h    ;Unknown device
   405 000031F7 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   406 000031F9 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   407 000031FC 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   408                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   409 000031FE B480                <1>     mov ah, 80h ;Set error bit
   410 00003200 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   411                              <1> .comExit:
   412 00003204 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   413 0000320A 5F                  <1>     pop rdi
   414 0000320B 5E                  <1>     pop rsi
   415 0000320C 5A                  <1>     pop rdx
   416 0000320D 59                  <1>     pop rcx
   417 0000320E 5B                  <1>     pop rbx
   418 0000320F 58                  <1>     pop rax
   419 00003210 C3                  <1>     ret
   420                              <1> 
   421                              <1> .comRead:
   422 00003211 B005                <1>     mov al, 05h ;Bad request structure length?
   423 00003213 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   424 00003216 75E6                <1>     jne .comWriteErrorCode
   425                              <1> 
   426 00003218 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   427 0000321C 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   428                              <1> .cr1:
   429 0000321E 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   430 00003221 741B                <1>     je .cre2
   431                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   432 00003223 B802000000          <1>     mov eax, 02h    ;Recieve 
   433 00003228 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   434 0000322E 6698                <1>     cbw     ;Zero extend to upper byte
   435 00003230 CD34                <1>     int 34h ;Recieve Char
   436 00003232 72BB                <1>     jc .comError
   437 00003234 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   438 00003237 74EA                <1>     je .cr11
   439 00003239 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   440 0000323A FFC1                <1>     inc ecx
   441 0000323C EBE0                <1>     jmp short .cr1
   442                              <1> .cre2:
   443 0000323E 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   444 00003241 EBC1                <1>     jmp short .comExit
   445                              <1> 
   446                              <1> .comReadInputStatus:
   447 00003243 B005                <1>     mov al, 05h ;Bad request structure length?
   448 00003245 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   449 00003248 75B4                <1>     jne .comWriteErrorCode
   450 0000324A 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   451 00003250 EBB2                <1>     jmp short .comExit
   452                              <1> 
   453                              <1> .comNondestructiveRead:
   454                              <1> ;Acts like a "read one character if there is one" function
   455 00003252 B005                <1>     mov al, 05h ;Bad request structure length?
   456 00003254 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   457 00003257 75A5                <1>     jne .comWriteErrorCode
   458                              <1> .cndr1:
   459 00003259 B802000000          <1>     mov eax, 02h    ;Recieve 
   460 0000325E 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   461 00003264 6698                <1>     cbw     ;Zero extend to upper byte
   462 00003266 CD34                <1>     int 34h ;Recieve Char
   463 00003268 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   464 0000326E 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   465 00003271 7405                <1>     je .cndr2
   466 00003273 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   467 00003276 EB8C                <1>     jmp short .comExit
   468                              <1> .cndr2:
   469 00003278 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   470 0000327E EB84                <1>     jmp short .comExit
   471                              <1> 
   472                              <1> .comFlushInputBuffers:
   473 00003280 B005                <1>     mov al, 05h ;Bad request structure length?
   474 00003282 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   475 00003285 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   476                              <1> .cfib0:
   477 0000328B 8A1584000000        <1>     mov dl, byte [.comDevice]
   478 00003291 6698                <1>     cbw
   479 00003293 B802000000          <1>     mov eax, 02h    ;Recieve
   480 00003298 CD34                <1>     int 34h
   481 0000329A 0F8241FFFFFF        <1>     jc .comErrorNoCount
   482 000032A0 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   483 000032A3 75E6                <1>     jne .cfib0
   484 000032A5 E95AFFFFFF          <1>     jmp .comExit
   485                              <1> 
   486                              <1> .comWrite:
   487 000032AA B005                <1>     mov al, 05h ;Bad request structure length?
   488 000032AC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   489 000032AF 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   490                              <1> 
   491 000032B5 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   492 000032B9 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   493                              <1> .cw1: 
   494 000032BB 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   495 000032BE 7417                <1>     je .cw2
   496 000032C0 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   497 000032C1 B401                <1>     mov ah, 01h ;Move function number into ah
   498 000032C3 8A154C000000        <1>     mov dl, byte [.comDevice]
   499 000032C9 6698                <1>     cbw     ;Zero extend to upper byte
   500 000032CB CD34                <1>     int 34h ;Transmit char
   501 000032CD 0F821CFFFFFF        <1>     jc .comError
   502 000032D3 FFC1                <1>     inc ecx
   503 000032D5 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   504                              <1> .cw2:
   505 000032D7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   506 000032DA E925FFFFFF          <1>     jmp .comExit
   507                              <1> 
   508                              <1> .comOutputStatus:
   509                              <1> ;Read MODEM status
   510 000032DF B005                <1>     mov al, 05h ;Bad request structure length?
   511 000032E1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   512 000032E4 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   513                              <1> 
   514 000032EA 8A1525000000        <1>     mov dl, byte [.comDevice]
   515 000032F0 6698                <1>     cbw     ;Zero extend to upper byte
   516 000032F2 B403                <1>     mov ah, 03h     ;Get status
   517 000032F4 CD34                <1>     int 34h
   518 000032F6 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   519 000032FC 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   520 00003301 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   521 00003304 F7D0                <1>     not eax      ;Bitwise inversion
   522 00003306 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   523 0000330B 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   524 00003310 E9EFFEFFFF          <1>     jmp .comExit
   525 00003315 00                  <1> .comDevice   db 0
    40                                  %include "./Source/Drivers/diskDrv.asm"
    41                              <1> msdDriver:
    42 00003316 50                  <1>     push rax
    43 00003317 53                  <1>     push rbx
    44 00003318 51                  <1>     push rcx
    45 00003319 52                  <1>     push rdx
    46 0000331A 56                  <1>     push rsi
    47 0000331B 57                  <1>     push rdi
    48 0000331C 55                  <1>     push rbp
    49 0000331D 4150                <1>     push r8
    50 0000331F 488B1D83FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    51 00003326 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    52 0000332A B003                <1>     mov al, drvBadCmd
    53 0000332C 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    54 00003332 B001                <1>     mov al, drvBadUnit 
    55 00003334 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    56 00003338 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    57 0000333E 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    58 00003345 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    59 00003349 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    60 0000334C 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    61 00003350 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    62 00003354 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    63 00003356 488D0D9A000000      <1>     lea rcx, .msdTable
    64 0000335D 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    65 00003361 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    66 00003363 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    67 00003365 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    68 00003368 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    69                              <1> .msdDriverExit:
    70 0000336A 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    71 00003370 4158                <1>     pop r8
    72 00003372 5D                  <1>     pop rbp
    73 00003373 5F                  <1>     pop rdi
    74 00003374 5E                  <1>     pop rsi
    75 00003375 5A                  <1>     pop rdx
    76 00003376 59                  <1>     pop rcx
    77 00003377 5B                  <1>     pop rbx
    78 00003378 58                  <1>     pop rax
    79 00003379 C3                  <1>     ret
    80                              <1> 
    81                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    82 0000337A 4889FB              <1>     mov rbx, rdi
    83 0000337D 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    84 00003380 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    85 00003382 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    86                              <1> ;Now fall through to general error
    87                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    88 00003385 B401                <1>     mov ah, 01h
    89 00003387 CD33                <1>     int 33h ;Read status of last operation
    90 00003389 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    91 0000338C B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    92 0000338E 7460                <1>     je .msdWriteErrorCode 
    93 00003390 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    94 00003392 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    95 00003395 7459                <1>     je .msdWriteErrorCode 
    96 00003397 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    97 0000339A 7454                <1>     je .msdWriteErrorCode
    98                              <1> ;Device Not Ready
    99 0000339C B002                <1>     mov al, 02h  ;Device not ready code
   100 0000339E 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   101 000033A1 744D                <1>     je .msdWriteErrorCode
   102 000033A3 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   103 000033A7 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   104                              <1> ;Write Protected
   105 000033AB 30C0                <1>     xor al, al
   106 000033AD 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   107 000033B2 743C                <1>     je .msdWriteErrorCode
   108                              <1> ;CRC Error
   109 000033B4 B004                <1>     mov al, 04h     ;CRC error code
   110 000033B6 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   111 000033BB 7433                <1>     je .msdWriteErrorCode
   112 000033BD 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   113 000033C2 742C                <1>     je .msdWriteErrorCode
   114 000033C4 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   115 000033C9 7425                <1>     je .msdWriteErrorCode
   116                              <1> ;Seek Error
   117 000033CB B006                <1>     mov al, 06h     ;Seek error code
   118 000033CD 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   119 000033D0 741E                <1>     je .msdWriteErrorCode
   120                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   121                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   122 000033D2 B007                <1>     mov al, 07h
   123 000033D4 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   124 000033D7 7417                <1>     je .msdWriteErrorCode
   125                              <1> ;Sector Not Found
   126 000033D9 B008                <1>     mov al, 08h     ;Sector not found code
   127 000033DB 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   128 000033DE 7410                <1>     je .msdWriteErrorCode
   129                              <1> ;Write faults
   130 000033E0 B00A                <1>     mov al, 0Ah     ;Write fault
   131 000033E2 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   132 000033E5 7409                <1>     je .msdWriteErrorCode
   133                              <1> ;Read faults
   134 000033E7 B00B                <1>     mov al, 0Bh     ;Read fault
   135 000033E9 80F911              <1>     cmp cl, 11h     ;Read error
   136 000033EC 7402                <1>     je .msdWriteErrorCode
   137                              <1> ;General Errors
   138 000033EE B00C                <1>     mov al, 0Ch     ;Everything else is general error
   139                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   140 000033F0 B480                <1>     mov ah, 80h ;Set error bit
   141 000033F2 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   142 000033F6 C3                  <1>     ret ;Return to set done bit
   143                              <1> .msdTable:
   144 000033F7 0000                <1>     dw 0                            ;Function 0
   145 000033F9 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   146 000033FB 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   147 000033FD 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   148 000033FF 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   149 00003401 0000                <1>     dw 0                            ;Function 5
   150 00003403 0000                <1>     dw 0                            ;Function 6
   151 00003405 0000                <1>     dw 0                            ;Function 7
   152 00003407 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   153 00003409 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   154 0000340B 0000                <1>     dw 0                            ;Function 10
   155 0000340D 0000                <1>     dw 0                            ;Function 11
   156 0000340F C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   157 00003411 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   158 00003413 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   159 00003415 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   160 00003417 0000                <1>     dw 0                            ;Function 16
   161 00003419 0000                <1>     dw 0                            ;Function 17
   162 0000341B 0000                <1>     dw 0                            ;Function 18
   163 0000341D 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   164 0000341F 0000                <1>     dw 0                            ;Function 20
   165 00003421 0000                <1>     dw 0                            ;Function 21
   166 00003423 0000                <1>     dw 0                            ;Function 22
   167 00003425 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   168 00003427 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   169                              <1> 
   170                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   171                              <1> .msdMedChk:          ;Function 1
   172 00003429 B005                <1>     mov al, 05h ;Bad request structure length
   173 0000342B 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   174 0000342E 75C0                <1>     jne .msdWriteErrorCode
   175                              <1> 
   176 00003430 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   177 00003435 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   178 0000343C 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   179 0000343F F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   180 00003442 753F                <1>     jnz .mmcNoChange
   181                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   182 00003444 B416                <1>     mov ah, 16h 
   183 00003446 CD33                <1>     int 33h
   184 00003448 0F8237FFFFFF        <1>     jc .msdGenDiskError
   185 0000344E 80FC80              <1>     cmp ah, 80h
   186 00003451 740E                <1>     je .mmcNoChangeLine
   187 00003453 80FC86              <1>     cmp ah, 86h
   188 00003456 7409                <1>     je .mmcNoChangeLine
   189 00003458 84E4                <1>     test ah, ah ;No change?
   190 0000345A 7427                <1>     jz .mmcNoChange
   191 0000345C F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   192 0000345F 750D                <1>     jnz .mmcChange
   193                              <1> ;If nothing, fall through and test manually, should never happen though
   194                              <1> .mmcNoChangeLine:
   195                              <1> ;Now we test Media Descriptor
   196 00003461 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   197 00003466 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   198 00003469 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   199 0000346C 7410                <1>     je .mmcUnsure
   200                              <1> .mmcChange:
   201 0000346E C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   202 00003472 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   203 00003479 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   204                              <1>     ;Check here if there were any open handles on the device when it was changed
   205 0000347D C3                  <1>     ret
   206                              <1> .mmcUnsure:
   207 0000347E C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   208 00003482 C3                  <1>     ret
   209                              <1> .mmcNoChange:
   210 00003483 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   211 00003487 C3                  <1>     ret
   212                              <1> 
   213                              <1> 
   214                              <1> .msdBuildBPB:        ;Function 2
   215 00003488 B005                <1>     mov al, 05h ;Bad request structure length
   216 0000348A 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   217 0000348D 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   218                              <1> 
   219 00003493 4889DE              <1>     mov rsi, rbx
   220 00003496 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   221 0000349B 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   222 000034A2 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   223 000034A5 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   224 000034A9 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   225 000034AB 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   226 000034AE B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   227 000034B3 CD33                <1>     int 33h
   228 000034B5 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   229                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   230 000034BB 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   231 000034BF 7418                <1>     je .mbbpb0
   232 000034C1 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   233 000034C5 7412                <1>     je .mbbpb0
   234 000034C7 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   235 000034CB 740C                <1>     je .mbbpb0
   236 000034CD 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   237 000034D1 B007                <1>     mov al, 07h ;Unknown media error code
   238 000034D3 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   239                              <1> .mbbpb0:
   240 000034D9 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   241 000034DC 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   242 000034E1 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   243 000034E8 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   244 000034EC 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   245 000034EF 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   246 000034F3 B90F000000          <1>     mov ecx, bpbEx_size/8
   247 000034F8 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   248 000034FB C3                  <1>     ret
   249                              <1> .msdIOCTLRead:       ;Function 3, returns done
   250 000034FC B005                <1>     mov al, drvBadDrvReq
   251 000034FE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   252 00003501 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   253 00003507 C3                  <1>     ret
   254                              <1> .msdRead:            ;Function 4
   255                              <1> ;Will read one sector at a time.
   256 00003508 B005                <1>     mov al, 05h ;Bad request structure length
   257 0000350A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   258 0000350D 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   259                              <1> 
   260 00003513 4889DF              <1>     mov rdi, rbx
   261 00003516 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   262                              <1> .msdr0:
   263 00003518 B682                <1>     mov dh, 82h ;LBA Read Sectors
   264 0000351A E841010000          <1>     call .msdBlkIOCommon
   265 0000351F 0F8255FEFFFF        <1>     jc .msdIOError
   266 00003525 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   267 0000352D 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   268 00003535 FFC6                <1>     inc esi
   269 00003537 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   270 0000353A 75DC                <1>     jne .msdr0
   271 0000353C 4889FB              <1>     mov rbx, rdi
   272 0000353F C3                  <1>     ret
   273                              <1> .msdWrite:           ;Function 8
   274                              <1> ;Will write one sector at a time.
   275 00003540 B005                <1>     mov al, 05h ;Bad request structure length
   276 00003542 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   277 00003545 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   278                              <1> 
   279 0000354B 4889DF              <1>     mov rdi, rbx
   280 0000354E 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   281                              <1> .msdw0:
   282 00003550 B683                <1>     mov dh, 83h ;LBA Write Sectors
   283 00003552 E809010000          <1>     call .msdBlkIOCommon
   284 00003557 0F821DFEFFFF        <1>     jc .msdIOError
   285 0000355D 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   286 00003565 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   287 0000356D FFC6                <1>     inc esi
   288 0000356F 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   289 00003572 75DC                <1>     jne .msdw0
   290 00003574 4889FB              <1>     mov rbx, rdi
   291 00003577 C3                  <1>     ret
   292                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   293                              <1> ;Will write one sector at a time and then verify it.
   294 00003578 B005                <1>     mov al, 05h ;Bad request structure length
   295 0000357A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   296 0000357D 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   297                              <1> 
   298 00003583 4889DF              <1>     mov rdi, rbx
   299 00003586 31F6                <1>     xor esi, esi  ;Set counter to zero
   300                              <1> .msdwv0:
   301 00003588 B683                <1>     mov dh, 83h ;LBA Write Sectors
   302 0000358A E8D1000000          <1>     call .msdBlkIOCommon
   303 0000358F 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   304 00003595 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   305 00003597 E8C4000000          <1>     call .msdBlkIOCommon
   306 0000359C 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   307 000035A2 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   308 000035AA 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   309 000035B2 FFC6                <1>     inc esi
   310 000035B4 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   311 000035B7 75CF                <1>     jne .msdwv0
   312 000035B9 4889FB              <1>     mov rbx, rdi
   313 000035BC C3                  <1>     ret
   314                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   315 000035BD B005                <1>     mov al, drvBadDrvReq
   316 000035BF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   317 000035C2 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   318                              <1> 
   319 000035C8 C3                  <1>     ret
   320                              <1> .msdDevOpen:         ;Function 13
   321 000035C9 B005                <1>     mov al, drvBadDrvReq
   322 000035CB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   323 000035CE 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   324                              <1> 
   325 000035D4 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   326 000035D9 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   327 000035E0 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   328 000035E3 C3                  <1>     ret
   329                              <1> .msdDevClose:        ;Function 14
   330 000035E4 B005                <1>     mov al, drvBadDrvReq
   331 000035E6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   332 000035E9 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   333                              <1> 
   334 000035EF 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   335 000035F4 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   336 000035FB FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   337 000035FE C3                  <1>     ret
   338                              <1> .msdRemovableMedia:  ;Function 15
   339 000035FF B005                <1>     mov al, drvBadDrvReq
   340 00003601 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   341 00003604 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   342                              <1> 
   343 0000360A 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   344 0000360F 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   345 00003616 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   346 00003619 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   347 0000361E 31D2                <1>     xor edx, edx    ;Busy bit clear
   348 00003620 A880                <1>     test al, 80h
   349 00003622 0F44CA              <1>     cmovz ecx, edx
   350 00003625 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   351 00003629 C3                  <1>     ret
   352                              <1> .msdGenericIOCTL:    ;Function 19
   353 0000362A B005                <1>     mov al, drvBadDrvReq
   354 0000362C 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   355 0000362F 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   356                              <1> 
   357 00003635 C3                  <1>     ret
   358                              <1> .msdGetLogicalDev:   ;Function 23
   359 00003636 B005                <1>     mov al, drvBadDrvReq
   360 00003638 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   361 0000363B 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   362                              <1> 
   363 00003641 8A0541000000        <1>     mov al, byte [.msdCurDev]
   364 00003647 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   365 0000364A C3                  <1>     ret
   366                              <1> .msdSetLogicalDev:   ;Function 24
   367 0000364B B005                <1>     mov al, drvBadDrvReq
   368 0000364D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   369 00003650 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   370                              <1> 
   371 00003656 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   372 00003659 880529000000        <1>     mov byte [.msdCurDev], al
   373 0000365F C3                  <1>     ret
   374                              <1> 
   375                              <1> .msdBlkIOCommon:  ;Does block IO
   376                              <1> ;Called with rdi containing old rbx value and ah with function number
   377                              <1> ;rbp points to bpb
   378                              <1> ;Error handled by caller
   379                              <1> ;Sector count handled by caller
   380                              <1> ;Called with dh = BIOS function number
   381 00003660 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   382 00003665 8A90[89360000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   383 0000366B 31C9                <1>     xor ecx, ecx
   384 0000366D 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   385 00003670 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   386 00003674 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   387 00003678 88F4                <1>     mov ah, dh
   388 0000367A B001                <1>     mov al, 01h ;Do one sector at a time 
   389 0000367C CD33                <1>     int 33h
   390 0000367E C3                  <1>     ret
   391                              <1> 
   392 0000367F 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   393                              <1> ;LASTDRIVE default is 5
   394                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   395                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   396 00003688 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   397                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   398 00003689 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   399 0000368E 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   400 00003693 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   400 0000369C 000000000000000000- <1>
   400 000036A5 000000000000000000- <1>
   400 000036AE 000000000000000000- <1>
   400 000036B7 00000000            <1>
   401 000036BB 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   401 000036C4 000000000000000000- <1>
   401 000036CD 000000000000000000- <1>
   401 000036D6 000000000000000000- <1>
   401 000036DF 000000000000000000- <1>
   401 000036E8 000000000000000000- <1>
   401 000036F1 000000000000000000- <1>
   401 000036FA 000000000000000000- <1>
   401 00003703 000000000000000000- <1>
   401 0000370C 000000000000000000- <1>
   401 00003715 000000000000000000- <1>
   401 0000371E 000000000000000000- <1>
   401 00003727 000000000000000000- <1>
   401 00003730 000000000000000000- <1>
   401 00003739 000000000000000000- <1>
   401 00003742 000000000000000000- <1>
   401 0000374B 000000000000000000- <1>
   401 00003754 000000000000000000- <1>
   401 0000375D 000000000000000000- <1>
   401 00003766 000000000000000000- <1>
   401 0000376F 000000000000000000- <1>
   401 00003778 000000000000000000- <1>
   401 00003781 000000000000000000- <1>
   401 0000378A 000000000000000000- <1>
   401 00003793 000000000000000000- <1>
   401 0000379C 000000000000000000- <1>
   401 000037A5 000000000000000000- <1>
   401 000037AE 000000000000000000- <1>
   401 000037B7 000000000000000000- <1>
   401 000037C0 000000000000000000- <1>
   401 000037C9 000000000000000000- <1>
   401 000037D2 000000000000000000- <1>
   401 000037DB 000000000000000000- <1>
   401 000037E4 000000000000000000- <1>
   401 000037ED 000000000000000000- <1>
   401 000037F6 000000000000000000- <1>
   401 000037FF 000000000000000000- <1>
   401 00003808 000000000000000000- <1>
   401 00003811 000000000000000000- <1>
   401 0000381A 000000000000000000- <1>
   401 00003823 000000000000000000- <1>
   401 0000382C 000000000000000000- <1>
   401 00003835 000000000000000000- <1>
   401 0000383E 000000000000000000- <1>
   401 00003847 000000000000000000- <1>
   401 00003850 000000000000000000- <1>
   401 00003859 000000000000000000- <1>
   401 00003862 000000000000000000- <1>
   401 0000386B 000000000000000000- <1>
   401 00003874 000000000000000000- <1>
   401 0000387D 000000000000000000- <1>
   401 00003886 000000000000000000- <1>
   401 0000388F 000000000000000000- <1>
   401 00003898 000000000000000000- <1>
   401 000038A1 000000000000000000- <1>
   401 000038AA 000000000000000000- <1>
   401 000038B3 000000000000000000- <1>
   401 000038BC 000000000000000000- <1>
   401 000038C5 000000000000000000- <1>
   401 000038CE 000000000000000000- <1>
   401 000038D7 000000000000000000- <1>
   401 000038E0 000000000000000000- <1>
   401 000038E9 000000000000000000- <1>
   401 000038F2 000000000000000000- <1>
   401 000038FB 000000000000000000- <1>
   401 00003904 000000000000000000- <1>
   401 0000390D 000000000000        <1>
   402                              <1> 
   403                              <1> endptr equ $
    41                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    42                                  ;Paragraph alignment
    43                                  %include "./Source/BSS/dosDynaDataArea.asm"
    44                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    45                              <1> ; the MCB chain!
    46                              <1> ddaStart:
    47 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    48                              <1> 
    49                              <1> ;Create DPB chain of first 5 available DPB slots
    50                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    51 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    52 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    53                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    54                              <1> ;Always jettison this space
    55 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    56 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    57 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    58                              <1> 
    59 00000119 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    60 00000139 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    61                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    62                              <1> dynamicDataAreaLength equ $ - ddaStart
    62          ------------------  <1>  info: assembly required 1+5+2 passes

