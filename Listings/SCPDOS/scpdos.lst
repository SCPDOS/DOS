     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro breakpoint 0
    78                              <1> xchg bx, bx
    79                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
   179                              <1> 
   180                              <1> %macro defaultBPB 0
   181                              <1>     db 0E9h
   182                              <1>     db 00h
   183                              <1>     db 90h
   184                              <1>     db 'SCPDOSv1'
   185                              <1>     dw 0200h                       
   186                              <1>     db 01h                         
   187                              <1>     dw 0001h                           
   188                              <1>     db 02h                              
   189                              <1>     dw 00E0h            
   190                              <1>     dw 0B40h   
   191                              <1>     db 0F0h                   
   192                              <1>     dw 0009h                   
   193                              <1>     dw 0012h                     
   194                              <1>     dw 0002h                  
   195                              <1>     dd 0                 
   196                              <1>     dd 0 
   197                              <1>     db 00h
   198                              <1>     db 00h
   199                              <1>     db 29h
   200                              <1>     dd 0
   201                              <1>     db 'NO NAME    '
   202                              <1>     db 'FAT12   '
   203                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   204                              <1> %endmacro
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> netFCBShare     equ 70h
   167                              <1> ;Bit 7 reserved 0
   168                              <1> ;Bits 8-12 reserved 0
   169                              <1> 
   170                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   171                              <1> ;Buffering on writes
   172                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   173                              <1> ;FCB opened file?
   174                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   175                              <1> ;Attribute Byte
   176                              <1> readOnlyFile    equ 1h
   177                              <1> hiddenFile      equ 2h
   178                              <1> systemFile      equ 4h
   179                              <1> volumeLabel     equ 8h
   180                              <1> directoryFile   equ 10h ;Directory entry
   181                              <1> archiveFile     equ 20h
   182                              <1> ;Device Info equates
   183                              <1> ;For a block device, bits [5:0] contain the drive number
   184                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   185                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   186                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   187                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   188                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   189                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   190                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   191                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   192                              <1> devCharDev      equ 80h ;If set, it is a char device!
   193                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   194                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   195                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   196                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   197                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   198                              <1>  
   199                              <1> ;------------------------------------------------------------------------;
   200                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   201                              <1> ; to an internal buffer, and then copying it to the specified location
   202                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   203                              <1> ; another request for the same sector from the same device is made, so 
   204                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   205                              <1> ; size, selected according to the largest detected sector size during 
   206                              <1> ; the initial loadup.
   207                              <1> ;
   208                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   209                              <1> ;
   210                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   211                              <1> ;------------------------------------------------------------------------;
   212                              <1> 
   213                              <1> struc bufferHdr
   214 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   215 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   216 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   217 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   218 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   219 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   220 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   221 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   222 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   223                              <1>     .dataarea:             ;Points to the start of the data area
   224                              <1> endstruc
   225                              <1> ;Buffer Flag equates
   226                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   227                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   228                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   229                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   230                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   231                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   232                              <1> ;Note! A buffer is marked as referenced only when the application 
   233                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   234                              <1> ;------------------------------------------------------------------------;
   235                              <1> ; Memory control block for each memory arena
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> struc mcb
   238 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   239 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   240 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   241 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   242                              <1>     .program:
   243                              <1> endstruc
   244                              <1> ;MCB equates
   245                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   246                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   247                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> 
   251                              <1> memFirstFit     equ 0   ;First free block goes to application
   252                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   253                              <1> memLastFit      equ 2   ;Last free block goes to application
   254                              <1> 
   255                              <1> ;Owner = Para aligned address => Owning application PSP
   256                              <1> ;...To consider...
   257                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   258                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   259                              <1> ;------------------------------------------------------------------------;
   260                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   261                              <1> ; following order, thus allowing for return values to be placed in the 
   262                              <1> ; registers by accessing the caller register stack frame.
   263                              <1> ;------------------------------------------------------------------------;
   264                              <1> struc callerFrame
   265 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   266 00000008 ????????????????    <1>     .rbx    resq 1    
   267 00000010 ????????????????    <1>     .rcx    resq 1
   268 00000018 ????????????????    <1>     .rdx    resq 1
   269 00000020 ????????????????    <1>     .rsi    resq 1
   270 00000028 ????????????????    <1>     .rdi    resq 1
   271 00000030 ????????????????    <1>     .rbp    resq 1
   272 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   273 00000040 ????????????????    <1>     .r9     resq 1
   274                              <1> ;Pushed by Processor when invoked via Interrupt
   275 00000048 ????????????????    <1>     .rip    resq 1
   276 00000050 ????????????????    <1>     .cs     resq 1
   277 00000058 ????????????????    <1>     .flags  resq 1
   278                              <1> endstruc
   279                              <1> 
   280                              <1> struc dpl
   281                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   282                              <1> ; server calls
   283 00000000 ????????????????    <1>     .rax    resq 1
   284 00000008 ????????????????    <1>     .rbx    resq 1
   285 00000010 ????????????????    <1>     .rcx    resq 1
   286 00000018 ????????????????    <1>     .rdx    resq 1
   287 00000020 ????????????????    <1>     .rsi    resq 1
   288 00000028 ????????????????    <1>     .rdi    resq 1
   289 00000030 ????????????????    <1>     .r8     resq 1
   290 00000038 ????????????????    <1>     .r9     resq 1
   291 00000040 ????????????????    <1>     .align  resq 1
   292 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   293 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   294                              <1> endstruc
   295                              <1> 
   296                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   297 00000000 ????????????????    <1>     .oldRBP         resq 1  
   298 00000008 ??                  <1>     .newBuffers     resb 1  ;New buffers value
   299 00000009 ??                  <1>     .newSFTVal      resb 1
   300 0000000A ??                  <1>     .newFCBSVal     resb 1
   301 0000000B ??                  <1>     .newProtFCBSVal resb 1  ;Number of protected FCBS
   302 0000000C ??                  <1>     .newLastdrive   resb 1
   303 0000000D ??                  <1>     .newStacks      resb 1  ;Ignored for now
   304 0000000E ????                <1>     .newStackSize   resb 2  ;Ignored for now
   305 00000010 ????????            <1>     .newAllocSize   resd 1  ;Used to keep track of reallocation size
   306 00000014 ????????            <1>                     resd 1  ;Alignment byte
   307 00000018 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   308                              <1> endstruc
   309                              <1> 
   310                              <1> struc fcb
   311                              <1> ;Similar to a DOS 2.0 FCB.
   312 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
   313 00000001 ????????????????    <1>     .filename   resb 8
   314 00000009 ??????              <1>     .fileext    resb 3
   315 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   316                              <1> ;One block consists of 128 records, of size denoted in the below
   317 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   318 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   319 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   320 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   321 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   322 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   323 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   324 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   325 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   326                              <1>     ;If record size > 64, high byte is ignored.
   327                              <1>     ;Used for random read and write operations to find the right record
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc filename
   331                              <1> ;8.3 File name struct
   332 00000000 ????????????????    <1>     .fName  resb 8
   333 00000008 ??????              <1>     .fExt   resb 3
   334                              <1> endstruc
   335                              <1> 
   336                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   337 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   338 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   339 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   340 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   341 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   342 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   343 00000016 ????                <1>     .fileTime   resw 1  ;File time
   344 00000018 ????                <1>     .fileDate   resw 1  ;File date
   345 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   346 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   347                              <1> endstruc
   348                              <1> 
   349                              <1> struc psp
   350 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   351 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   352 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   353 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   354 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   355 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   356 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   357 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   358 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   359 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   360 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   361 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   362 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   363 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   364                              <1> ;Extra handle arrays are grouped into a linked list
   365                              <1> ;The below are in the same place as in DOS
   366 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   367 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   368                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   369 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   370 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   371                              <1> endstruc
   372                              <1> 
   373                              <1> struc clkStruc
   374 00000000 ????                <1>     .dateWord   resw 1
   375 00000002 ??                  <1>     .minutes    resb 1
   376 00000003 ??                  <1>     .hours      resb 1
   377 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   378 00000005 ??                  <1>     .seconds    resb 1
   379                              <1> endstruc
   380                              <1> 
   381                              <1> struc countryStruc
   382 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   383                              <1>                         ;0 = month day year hh:mm:ss
   384                              <1>                         ;1 = day month year hh:mm:ss
   385                              <1>                         ;2 = year month day hh:mm:ss
   386 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   387 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   388 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   389 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   390 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   391 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   392                              <1>                         ;0 = Symbol leads, without space
   393                              <1>                         ;1 = Symbol follows, without space
   394                              <1>                         ;2 = Symbol leads, one space
   395                              <1>                         ;3 = Symbol follows, one space
   396                              <1>                         ;4 = Symbol replace decimal separator
   397 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   398 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   399 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   400 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   401 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   402                              <1> endstruc
   403                              <1> 
   404                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   405                              <1> ;for a space of 64Gb
   406                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   407                              <1> dosLowBase  equ 600h    ;Low load address
   408                              <1> 
   409                              <1> ;Critical Error AH bitfield equates
   410                              <1> critRead    equ 0h
   411                              <1> critWrite   equ 1h
   412                              <1> critDOS     equ 0h
   413                              <1> critFAT     equ 2h
   414                              <1> critDir     equ 4h
   415                              <1> critData    equ 6h
   416                              <1> critFailOK  equ 8h
   417                              <1> critRetryOK equ 10h
   418                              <1> critIgnorOK equ 20h
   419                              <1> critCharDev equ 80h
   420                              <1> 
   421                              <1> critIgnore  equ 0
   422                              <1> critRetry   equ 1
   423                              <1> critAbort   equ 2
   424                              <1> critFail    equ 3
   425                              <1> 
   426                              <1> ;MISC ASCII control chars
   427                              <1> NUL equ 00h ;^@         | ASCII Null
   428                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   429                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   430                              <1> BEL equ 07h ;^G         | ASCII Bell
   431                              <1> BSP equ 08h ;^H         | ASCII Backspace
   432                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   433                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   434                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   435                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   436                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   437                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   438                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   439                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   440                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   441                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   442                              <1> SPC equ 20h ;Printable  | ASCII Space
   443                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   444                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   445                              <1> 
   446                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   447                              <1> ;Extended Ascii Codes
   448                              <1> eF1     equ 3Bh ;F1 second byte
   449                              <1> eF2     equ 3Ch ;F2 second byte
   450                              <1> eF3     equ 3Dh ;F3 second byte
   451                              <1> eF4     equ 3Eh ;F4 second byte
   452                              <1> eF5     equ 3Fh ;F5 second byte
   453                              <1> eF6     equ 40h ;F6 second byte
   454                              <1> eF7     equ 41h ;F7 second byte
   455                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   456                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   457                              <1> eIns    equ 52h ;Insert second byte
   458                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   459                              <1> 
   460                              <1> ;Default Configuration for the system
   461                              <1> 
   462                              <1> buffersDefault  equ 30
   463                              <1> filesDefault    equ 20
   464                              <1> fcbsDefault     equ 4
   465                              <1> safeFcbsDeflt   equ 0
   466                              <1> lastDriveDeflt  equ 5   
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  %include "./Source/Include/dosExec.inc"
    12                              <1> ;This include file contains structures related to the EXE format
    13                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    14                              <1> 
    15                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    16                              <1> ; file.
    17                              <1> execLoadGo  equ 0
    18                              <1> execLoad    equ 1
    19                              <1> execInvld   equ 2
    20                              <1> execOverlay equ 3
    21                              <1> 
    22                              <1> struc execFrame
    23 00000000 ????????????????    <1>     .oldRBP     resq 1  
    24 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    25 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    26 00000018 ????????????????    <1>     .wEnvSize   resq 1  ;Size of the environment block
    27 00000020 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    28 00000028 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    29 00000030 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    30                              <1> 
    31 00000038 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    32 00000040 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    33 00000048 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to new Program Base address (consider removing)
    34 00000050 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    35                              <1> .pProgEP:   ;Program EP, recycle this qword
    36 00000058 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    37 00000060 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    38                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    39 00000068 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    40                              <1> endstruc
    41                              <1> 
    42                              <1> ;Possible blocks to be pointed to by rbx
    43                              <1> 
    44                              <1> struc execProg 
    45 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    46 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    47 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    48 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadProg
    52 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    53 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    54 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    55 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    56 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    57 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    58                              <1> endstruc
    59                              <1> 
    60                              <1> struc loadOvly
    61 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    62 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    63                              <1> endstruc
    64                              <1> 
    65                              <1> ;----------------------------
    66                              <1> ;   EXE header structures   :
    67                              <1> ;----------------------------
    68                              <1> 
    69                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    70                              <1> dosMagicSignature   equ "MZ"
    71                              <1> dosMagicSignature2  equ "ZM"
    72                              <1> struc imageDosHdr
    73 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    74 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    75 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    76 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    77 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    78 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    79 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    80 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    81 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    82 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    83 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    84 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    85 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    86 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    87 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    88 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    89 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    90 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    91 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Pssobile signatures pointed to by e_lfanew
    95                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    96                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    97                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    98                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    99                              <1> 
   100                              <1> ;COFF File header, immadiately follows the signature so @ [e_lfanew + 4]
   101                              <1> 
   102                              <1> struc imageFileHeader
   103 00000000 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   104 00000002 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   105 00000004 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   106 00000008 ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   107 0000000C ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   108 00000010 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   109 00000012 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   110                              <1> endstruc
   111                              <1> 
   112                              <1> ;The only valid values in the .machineType field
   113                              <1> 
   114                              <1> imageFileMachineUnknown equ 0
   115                              <1> imageFileMachineAMD64   equ 08664h 
   116                              <1> 
   117                              <1> ;Optional header, immediately follows COFF header
   118                              <1> 
   119                              <1> struc imageFileOptionalHeader
   120 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   121 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   122 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   123 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   124 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   125 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   126 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   127 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   128 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   129 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   130 00000024 ????????            <1> 	.dFileAlignment             resd 1
   131 00000028 ????                <1> 	.wMajOSVer                  resw 1
   132 0000002A ????                <1> 	.wMinOSVer                  resw 1
   133 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   134 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   135 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   136 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   137 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   138 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   139 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   140 00000040 ????????            <1> 	.dCheckSum                  resd 1
   141 00000044 ????                <1> 	.wSubsystem                 resw 1
   142 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   143 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   144 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   145 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   146 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   147 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   148 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   149                              <1> endstruc
   150                              <1> 
   151                              <1> romMagicNum     equ 0107h
   152                              <1> pe32MagicNum    equ 010Bh
   153                              <1> pe64MagicNum    equ 020Bh
   154                              <1> 
   155                              <1> ;Data directory header structure
   156                              <1> 
   157                              <1> struc imageDataDirectory
   158 00000000 ????????            <1>     .virtualAddress  resd 1
   159 00000004 ????????            <1>     .size    resd 1
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc baseRelocBlock
   163 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   164 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   165                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   166                              <1> endstruc
   167                              <1> ;Section headers that form the Section Table.
   168                              <1> ;There are wNumberOfSections many entries in this table.
   169                              <1> ;Each entry is one imageSectionHdr
   170                              <1> 
   171                              <1> struc imageSectionHdr       ;size 40 bytes
   172 00000000 ????????????????    <1>     .name                   resb 8
   173 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   174 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   175 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   176 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   177 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   178 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   179 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   180 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   181 00000024 ????????            <1> 	.dCharacteristics       resd 1
   182                              <1> endstruc
   183                              <1> 
   184                              <1> ;Section Hdr characteristics flags 
   185                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   186                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   187                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    12                                  Segment .text align=1   ;Init code
    13                                  %define currSegVBase 0
    14                                  %include "./Source/Sysinit/sysInit.asm"
    15                              <1> ; We arrive here with the following values in the registers.
    16                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    17                              <1> ; dx  = Int 33h boot device number
    18                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    19                              <1> 
    20 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    21 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    22 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    23 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    24 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    25 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    26 0000001A F348A5              <1>     rep movsq   ;Copy over
    27 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    28 00000022 50                  <1>     push rax
    29 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    30                              <1> sysInitldr:
    31                              <1> ;Now the tough part, load DOS to 800
    32 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    33                              <1> .read:
    34 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    35 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    35 00000035 00                  <1>
    36 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    37 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    38 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    39 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    40 0000003F CD33                <1>     int 33h
    41 00000041 7206                <1>     jc .readFail
    42 00000043 6800080000          <1>     push qword 800h
    43 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    44                              <1> .readFail:
    45 00000049 FFCE                <1>     dec esi
    46 0000004B 75DC                <1>     jnz .read
    47 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    48 00000054 B804130000          <1>     mov eax, 1304h
    49 00000059 CD30                <1>     int 30h
    50 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    51 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    51 00000066 6F6164204572726F72- <1>
    51 0000006F 0A0D00              <1>
    52 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    52 0000007B 000000000000000000- <1>
    52 00000084 000000000000000000- <1>
    52 0000008D 000000000000000000- <1>
    52 00000096 000000000000000000- <1>
    52 0000009F 000000000000000000- <1>
    52 000000A8 000000000000000000- <1>
    52 000000B1 000000000000000000- <1>
    52 000000BA 000000000000000000- <1>
    52 000000C3 000000000000000000- <1>
    52 000000CC 000000000000000000- <1>
    52 000000D5 000000000000000000- <1>
    52 000000DE 000000000000000000- <1>
    52 000000E7 000000000000000000- <1>
    52 000000F0 000000000000000000- <1>
    52 000000F9 00000000000000      <1>
    53                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    54                              <1>     ;Store space for a static PSP
    55 00000100 000000000000000000- <1>     db 100h dup 00h
    55 00000109 000000000000000000- <1>
    55 00000112 000000000000000000- <1>
    55 0000011B 000000000000000000- <1>
    55 00000124 000000000000000000- <1>
    55 0000012D 000000000000000000- <1>
    55 00000136 000000000000000000- <1>
    55 0000013F 000000000000000000- <1>
    55 00000148 000000000000000000- <1>
    55 00000151 000000000000000000- <1>
    55 0000015A 000000000000000000- <1>
    55 00000163 000000000000000000- <1>
    55 0000016C 000000000000000000- <1>
    55 00000175 000000000000000000- <1>
    55 0000017E 000000000000000000- <1>
    55 00000187 000000000000000000- <1>
    55 00000190 000000000000000000- <1>
    55 00000199 000000000000000000- <1>
    55 000001A2 000000000000000000- <1>
    55 000001AB 000000000000000000- <1>
    55 000001B4 000000000000000000- <1>
    55 000001BD 000000000000000000- <1>
    55 000001C6 000000000000000000- <1>
    55 000001CF 000000000000000000- <1>
    55 000001D8 000000000000000000- <1>
    55 000001E1 000000000000000000- <1>
    55 000001EA 000000000000000000- <1>
    55 000001F3 000000000000000000- <1>
    55 000001FC 00000000            <1>
    56                              <1> ;END OF FIRST SECTOR!!
    57                              <1> ;DOS SYSINIT BEGINS HERE
    58                              <1> ;First move the alignment of the DOSSEG to 4Kb
    59                              <1> initBegin:
    60 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    61 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    62 00000206 0F32                <1>     rdmsr
    63 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    64 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    65 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    66 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    67 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    68 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    69 00000221 89F8                <1>     mov eax, edi
    70 00000223 4889FA              <1>     mov rdx, rdi
    71 00000226 48C1EA20            <1>     shr rdx, 20h
    72 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    73                              <1> ;------------------------------------------------;
    74                              <1> ;              Connect Debugger                  ;
    75                              <1> ;------------------------------------------------;
    76                              <1> %if DEBUG
    77                              <1> ;Only connect if in debug mode
    78                              <1>     mov eax, 0C501h ;Connect debugger
    79                              <1>     int 35h
    80                              <1> %endif
    81                              <1> ;------------------------------------------------;
    82                              <1> ;           Sanitise the data area               ;
    83                              <1> ;------------------------------------------------;
    84                              <1> ; This call initialises ALL fields in the DOS    ;
    85                              <1> ; data area with 0's. Thus any fields, which     ;
    86                              <1> ; need to be initialised with a 0 value, are     ;
    87                              <1> ; initialised for free.                          ;
    88                              <1> ;------------------------------------------------;
    89 0000022C B9[B2D90300]        <1>     mov ecx, dSegLen
    90 00000231 30C0                <1>     xor al, al
    91 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    92 00000234 F3AA                <1>     rep stosb
    93 00000236 5F                  <1>     pop rdi
    94                              <1> ;------------------------------------------------;
    95                              <1> ;          Start saving Basic DOS data           ;
    96                              <1> ;------------------------------------------------;
    97 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    97 0000023C [10C00300]          <1>
    98                              <1> ;Copy DOS to its final resting place
    99 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    99 00000245 [00C00300]          <1>
   100 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
   100 0000024E [08C00300]          <1>
   101 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
   102 00000255 4881C7[B2D90300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   103 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   104 00000263 B900100000          <1>     mov ecx, 1000h
   105 00000268 F348A5              <1>     rep movsq
   106                              <1> 
   107 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   108 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   109 00000271 664489C0            <1>     mov ax, r8w
   110 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   111 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   112 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   112 0000028D 05                  <1>
   113 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
   113 00000296 05                  <1>
   114 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   114 0000029C [97C00300]1400      <1>
   115 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   115 000002AA 01                  <1>
   116                              <1>     ;If no detected Int 33h devices, halt 
   117 000002AB 49C1E810            <1>     shr r8, 2*8
   118 000002AF 4584C0              <1>     test r8b, r8b
   119 000002B2 0F849C0C0000        <1>     jz errorInit
   120                              <1> ;------------------------------------------------;
   121                              <1> ;          Add additional page tables            ;
   122                              <1> ;------------------------------------------------;
   123                              <1> ;This will allow for up to 64Gb of addressible space
   124 000002B8 4889EF              <1>     mov rdi, rbp
   125                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   126 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   127 000002C0 57                  <1>     push rdi
   128 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   128 000002CA 00                  <1>
   129                              <1> pdtLoop:
   130 000002CB 48AB                <1>     stosq
   131 000002CD 480500002000        <1>     add rax, 200000h
   132 000002D3 FFC9                <1>     dec ecx
   133 000002D5 75F4                <1>     jnz pdtLoop
   134 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   135                              <1> ;Now we add every 4kb page to the page directory pointer table
   136                              <1> ;15 4kb pages to consider
   137 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   138 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   139 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   140 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   141 000002EC B93C000000          <1>     mov ecx, 60
   142 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   143                              <1> pdptLoop:
   144 000002F7 48AB                <1>     stosq
   145 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   146 000002FF FFC9                <1>     dec ecx
   147 00000301 75F4                <1>     jnz pdptLoop
   148 00000303 0F20DF              <1>     mov rdi, cr3
   149 00000306 0F22DF              <1>     mov cr3, rdi
   150                              <1> ;------------------------------------------------;
   151                              <1> ;                   MCB inits                    ;
   152                              <1> ;------------------------------------------------;
   153                              <1> mcbInit:
   154 00000309 B820E80000          <1>     mov eax, 0E820h
   155 0000030E CD35                <1>     int 35h
   156                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   157 00000310 E804010000          <1>     call .mcbFindAddress
   158 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   159                              <1>     ;Here, we try use E801h
   160 00000317 B801E80000          <1>     mov eax, 0E801h
   161 0000031C CD35                <1>     int 35h
   162 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   163 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   164 00000324 85C0                <1>     test eax, eax
   165 00000326 741B                <1>     jz .worst
   166 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   167 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   168 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   169 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   170 0000033E E909010000          <1>     jmp mcbBuild
   171                              <1> .worst:
   172                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   173 00000343 B800002000          <1>     mov eax, 200000h
   174 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   174 0000034D [08C00300]          <1>
   175 00000351 29D8                <1>     sub eax, ebx
   176 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   177 0000035B E9EC000000          <1>     jmp mcbBuild 
   178                              <1> .mcbi1:
   179 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   180 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   180 0000036C 00                  <1>
   181 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   182 00000371 0F85C2000000        <1>     jne .mcbFail
   183 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   184                              <1>     ;PCI hole always exists so this value will always be a dword
   185 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   186 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   187 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   188 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   189 00000390 773C                <1>     ja .skipISA
   190                              <1> ;Here we deal with ISA hole issues
   191 00000392 B820E80000          <1>     mov eax, 0E820h
   192 00000397 CD35                <1>     int 35h
   193 00000399 48B800000001000000- <1>     mov rax, 1000000h
   193 000003A2 00                  <1>
   194 000003A3 E871000000          <1>     call .mcbFindAddress
   195 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   196 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   196 000003B7 00                  <1>
   197 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   198 000003BC 0F858A000000        <1>     jne mcbBuild  
   199 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   200 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   201                              <1> .skipISA:
   202 000003CE B820E80000          <1>     mov eax, 0E820h
   203 000003D3 CD35                <1>     int 35h
   204 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   204 000003DE 00                  <1>
   205 000003DF E835000000          <1>     call .mcbFindAddress
   206 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   207 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   207 000003EF 00                  <1>
   208 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   209 000003F4 7556                <1>     jne mcbBuild   
   210 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   211                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   212 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   212 00000403 00                  <1>
   213 00000404 4839CB              <1>     cmp rbx, rcx
   214 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   215 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   215 00000410 [1BC00300]          <1>
   216 00000414 E933000000          <1>     jmp mcbBuild
   217                              <1> .mcbFindAddress:
   218                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   219                              <1> ;Entry: rax = Address of arena to search for
   220                              <1> ;       rsi = Pointer to memory map
   221                              <1> ;       ecx = Number of 24 byte entries
   222                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   223                              <1> ;       CF=CY : value in rax not found
   224 00000419 56                  <1>     push rsi
   225 0000041A 51                  <1>     push rcx
   226 0000041B 50                  <1>     push rax
   227                              <1> .mfa0:
   228 0000041C 483B06              <1>     cmp rax, qword [rsi]
   229 0000041F 7410                <1>     je .mcbAddressFound
   230 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   231 00000428 FFC9                <1>     dec ecx
   232 0000042A 79F0                <1>     jns .mfa0
   233                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   234 0000042C 58                  <1>     pop rax
   235 0000042D 59                  <1>     pop rcx
   236 0000042E 5E                  <1>     pop rsi
   237 0000042F F9                  <1>     stc
   238 00000430 C3                  <1>     ret
   239                              <1> .mcbAddressFound:
   240 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   241 00000434 59                  <1>     pop rcx ;Pop old rax value off
   242 00000435 59                  <1>     pop rcx
   243 00000436 5E                  <1>     pop rsi
   244 00000437 F8                  <1>     clc
   245 00000438 C3                  <1>     ret
   246                              <1> .mcbFail:
   247 00000439 488D2D4A0B0000      <1>     lea rbp, mcbFailmsg
   248 00000440 B804130000          <1>     mov eax, 1304h
   249 00000445 CD30                <1>     int 30h
   250 00000447 E9080B0000          <1>     jmp errorInit
   251                              <1> 
   252                              <1> mcbBuild:
   253                              <1> ;Actually build the MCB chain here
   254                              <1> ;Start by computing the difference between userbase and DOS area
   255                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   256 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   256 00000451 [08C00300]          <1>
   257 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   258 0000045C 56                  <1>     push rsi    ;Save ptr
   259 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   260 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   261 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   262 0000046F 5B                  <1>     pop rbx
   263 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   264 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   265 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   266 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   267 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   268 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   268 0000048E [2BC00300]          <1>
   269                              <1> 
   270                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   271 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   271 0000049A 00000000            <1>
   272 0000049E 746E                <1>     jz .skipISA
   273                              <1>     ;Here if an ISA hole exists, place a MCB around it
   274 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   275                              <1>     ;Remove one MCB worth of space from alloc
   276 000004A7 31C9                <1>     xor ecx, ecx
   277 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   278 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   279 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   280 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   281 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   282 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   283 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   284 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   284 000004CF 00                  <1>
   285 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   286 000004D3 480510000000        <1>     add rax, mcb_size
   287 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   288 000004DC C1E904              <1>     shr ecx, 4
   289 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   290 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   291 000004E5 4881C310000000      <1>     add rbx, mcb_size
   292 000004EC 4801CB              <1>     add rbx, rcx
   293                              <1>     ;RBX should now be at 16Mb
   294 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   295 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   296 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   297 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   298 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   299 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   300                              <1> .skipISA:
   301                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   302                              <1>     ;rbx points to a block with "Z" marker
   303 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   303 00000516 00000000            <1>
   304 0000051A 7470                <1>     jz .exit
   305                              <1>     ;Add PCI hole MCB
   306 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   307                              <1>     ;Remove one MCB worth of space from alloc
   308 00000523 31C9                <1>     xor ecx, ecx
   309 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   310 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   311 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   312 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   313 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   314 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   315 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   316 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   316 0000054B 00                  <1>
   317 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   318 0000054F 480510000000        <1>     add rax, mcb_size
   319 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   320 00000558 C1E904              <1>     shr ecx, 4
   321 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   322 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   323 00000561 4881C310000000      <1>     add rbx, mcb_size
   324 00000568 4801CB              <1>     add rbx, rcx
   325                              <1>     ;RBX should now be at 4Gb
   326 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   327 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   328 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   328 0000057B [1BC00300]          <1>
   329 0000057F 48C1E904            <1>     shr rcx, 4
   330 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   331 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   332                              <1> .exit:
   333                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   334 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   335                              <1> ;------------------------------------------------;
   336                              <1> ;          Kernel inits and adjustments          ;
   337                              <1> ;------------------------------------------------;
   338                              <1> ;Adjust Interrupt Entries Int 40h-49h
   339                              <1> adjInts:
   340 00000593 B340                <1>     mov bl, 40h
   341 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   342 0000059A CD35                <1>     int 35h
   343 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   344 000005A1 488D3D980A0000      <1>     lea rdi, intData
   345 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   346                              <1> .ai0:
   347 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   348 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   349 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   350                              <1> .ai1:
   351 000005B5 CD35                <1>     int 35h
   352 000005B7 4881C708000000      <1>     add rdi, 8
   353 000005BE FFC1                <1>     inc ecx
   354 000005C0 81F950000000        <1>     cmp ecx, 50h
   355 000005C6 75E2                <1>     jne .ai0
   356                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   357                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   358                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   359                              <1>     %if DEBUG
   360                              <1> debugPopUpMsg:
   361                              <1>     push rbx
   362                              <1>     push rbp
   363                              <1>     push rcx
   364                              <1>     push rdx
   365                              <1>     mov ecx, 53 ;A large number of lines
   366                              <1>     xor edx, edx    ;COM 1
   367                              <1> .cls:
   368                              <1>     mov eax, 010Ah ;Transmit Line feed
   369                              <1>     int 34h
   370                              <1>     dec ecx
   371                              <1>     jnz .cls
   372                              <1>     lea rbx, qword [debPrintNullString + rbp]
   373                              <1>     lea rbp, .msg
   374                              <1>     call rbx
   375                              <1>     jmp short .exit
   376                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   377                              <1> .exit:
   378                              <1>     pop rdx
   379                              <1>     pop rcx
   380                              <1>     pop rbp
   381                              <1>     pop rbx
   382                              <1>     %endif
   383                              <1> 
   384                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   385 000005C8 488D1585090000      <1>     lea rdx, errorInit ;Get segment start address
   386 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   387 000005D4 CD41                <1>     int 41h
   388 000005D6 488D1577090000      <1>     lea rdx, errorInit ;Get segment start address
   389 000005DD B844250000          <1>     mov eax, 2544h
   390 000005E2 CD41                <1>     int 41h
   391                              <1> ;------------------------------------------------;
   392                              <1> ;          Driver Adjustments and inits          ;
   393                              <1> ;------------------------------------------------;
   394                              <1> ;Modify the pointers in nData before putting them in the data area
   395 000005E4 48012DD50A0000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   396 000005EB 48012DD80A0000      <1>     add qword [nData + drvHdr.strPtr], rbp
   397 000005F2 48012DD90A0000      <1>     add qword [nData + drvHdr.intPtr], rbp
   398                              <1> ;Copy the Null driver to its location in Sysvars
   399 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   400 000005FE 488D35BB0A0000      <1>     lea rsi, qword [nData]
   401 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   402 0000060C F3A4                <1>     rep movsb   
   403                              <1> 
   404                              <1> ;Adjust the addresses in the other driver headers 
   405 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   405 00000610 [E45C000000000000]  <1>
   406 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   407 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   408                              <1> adjDrivers:
   409 00000621 E812090000          <1>     call adjustDrvHdr
   410 00000626 E2F9                <1>     loop adjDrivers
   411                              <1> ;Open NUL
   412                              <1> ;NUL opened
   413                              <1> ;Open CON
   414                              <1> conInit:    ;Rather than keeping this resident... do it here
   415                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   416 00000628 488D95[CF5F0000]    <1>     lea rdx, qword [rbp + fastOutput]
   417 0000062F B849250000          <1>     mov eax, 2549h
   418 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   419 00000636 488D95[D75F0000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   420 0000063D B83B250000          <1>     mov eax, 253Bh
   421 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   422                              <1> .ci0:
   423 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   424 00000646 CD36                <1>     int 36h
   425 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   426 0000064A 30E4                <1>     xor ah, ah
   427 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   428 0000064E EBF4                <1>     jmp short .ci0
   429                              <1> .ci1:
   430 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   431 00000655 CD30                <1>     int 30h
   432 00000657 B402                <1>     mov ah, 02h
   433 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   434 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   435 0000065D CD30                <1>     int 30h
   436 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   437 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   438 00000666 CD30                <1>     int 30h
   439                              <1> 
   440                              <1>     ;Save ptr to ConHdr in Sysvars
   441 00000668 488D85[E45C0000]    <1>     lea rax, qword [rbp + conHdr]
   442 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   442 00000674 [4BC00300]          <1>
   443                              <1> 
   444                              <1>     ;Fix the ext ESC function handler address
   445 00000678 488D85[C6270000]    <1>     lea rax, qword [rbp + editKeys]
   446 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   446 00000684 [58000000]          <1>
   447                              <1> 
   448                              <1> ;CLOCK init prock
   449                              <1> ;Set the time and date using the RTC (if present)
   450                              <1> clkInit:
   451                              <1>    ;Save ptr to ClkHdr in Sysvars first
   452 00000688 488D85[4A5D0000]    <1>     lea rax, qword [rbp + clkHdr]
   453 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   453 00000694 [43C00300]          <1>
   454                              <1> ;CH - Hours, in BCD
   455                              <1> ;CL - Minutes, in BCD
   456                              <1> ;DH - Seconds, in BCD
   457 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   458 0000069A CD3A                <1>     int 3Ah
   459 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   460                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   461 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   462 000006A1 E84D000000          <1>     call .bcd2Bin
   463 000006A6 88C5                <1>     mov ch, al
   464 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   465 000006AB E843000000          <1>     call .bcd2Bin
   466 000006B0 88C1                <1>     mov cl, al
   467 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   468 000006B5 E839000000          <1>     call .bcd2Bin
   469 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   470 000006BC 89C2                <1>     mov edx, eax
   471 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   472 000006C0 CD41                <1>     int 41h
   473                              <1> ;Now get the date from RTC
   474                              <1> ;CL - Year, in BCD
   475                              <1> ;DH - Month, in BCD
   476                              <1> ;DL - Day, in BCD
   477 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   478 000006C4 CD3A                <1>     int 3Ah
   479 000006C6 7247                <1>     jc .clkEnd
   480                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   481 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   482 000006CB E823000000          <1>     call .bcd2Bin
   483 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   484 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   485 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   486 000006DC E812000000          <1>     call .bcd2Bin
   487 000006E1 88C6                <1>     mov dh, al  
   488 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   489 000006E6 E808000000          <1>     call .bcd2Bin
   490 000006EB 88C2                <1>     mov dl, al
   491 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   492 000006EF CD41                <1>     int 41h
   493 000006F1 EB1C                <1>     jmp short .clkEnd
   494                              <1> .bcd2Bin:
   495                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   496 000006F3 51                  <1>     push rcx
   497 000006F4 89C1                <1>     mov ecx, eax
   498 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   499 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   500 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   501 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   502                              <1> .b2blp:
   503 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   504 00000709 FFC9                <1>     dec ecx
   505 0000070B 75FA                <1>     jnz .b2blp
   506                              <1> .b2bexit:
   507 0000070D 59                  <1>     pop rcx
   508 0000070E C3                  <1>     ret
   509                              <1> .clkEnd:
   510                              <1> ;------------------------------------------------;
   511                              <1> ;         Link DOS to temporary Buffer           ;
   512                              <1> ;------------------------------------------------;
   513                              <1> tempBufferInit:
   514 0000070F 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   515 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   515 0000071B [55C00300]          <1>
   516 0000071F 31C0                <1>     xor eax, eax
   517 00000721 48FFC8              <1>     dec rax
   518 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   519 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   520 00000727 48FFC0              <1>     inc rax
   521 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   522                              <1> ;------------------------------------------------;
   523                              <1> ;         Init msd driver, create DPB            ;
   524                              <1> ;------------------------------------------------;
   525                              <1> storageInits:
   526                              <1> ;First save dpb pointer in sysvars
   527 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   528 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   528 00000737 [33C00300]          <1>
   529                              <1> ;Open Mass Storage
   530 0000073B E8A2090000          <1>     call diskInit
   531 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   532 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   533 0000074B 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   534 0000074D 0F8401080000        <1>     jz errorInit
   535 00000753 488D95[35660000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   536 0000075A 30C9                <1>     xor cl, cl  ;Clear counter
   537 0000075C 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   537 00000761 [33C00300]          <1>
   538                              <1> .si0:   
   539 00000765 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   540 00000768 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   541 0000076A CD41                <1>     int 41h
   542                              <1> ;Add other data to DPB
   543 0000076C 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   544 0000076F 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   545 00000772 50                  <1>     push rax
   546 00000773 488D87[6C5D0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   547 0000077A 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   548 0000077E 58                  <1>     pop rax
   549 0000077F FEC1                <1>     inc cl
   550 00000781 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   551 00000783 7416                <1>     je .si1
   552 00000785 50                  <1>     push rax
   553 00000786 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   554 0000078A 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   555 0000078E 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   556 00000791 58                  <1>     pop rax
   557 00000792 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   558 00000799 EBCA                <1>     jmp short .si0
   559                              <1> .si1:
   560                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   561 0000079B 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   562 000007A3 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   563                              <1> ;------------------------------------------------;
   564                              <1> ;          Find largest sector size              ;
   565                              <1> ;------------------------------------------------;
   566                              <1> sectorSizeSearch:
   567                              <1> ;Done by reading BPB's for each drive
   568 000007A6 488D9D[35660000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   569                              <1>     
   570                              <1>     ;Go thru each block individually
   571 000007AD 31C0                <1>     xor eax, eax
   572 000007AF 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   573                              <1> .findLargest:
   574 000007B2 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   575 000007B6 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   576 000007BB 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   577 000007C2 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   578 000007C5 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   579 000007C8 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   580 000007CA 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   580 000007CF [53C00300]          <1>
   581                              <1> ;------------------------------------------------;
   582                              <1> ;                CDS array inits                 ;
   583                              <1> ;------------------------------------------------;
   584 000007D3 B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   585 000007D8 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   586 000007DF E802000000          <1>     call makeCDSArray
   587 000007E4 EB50                <1>     jmp short initialCDSWritten ;Go past the function
   588                              <1> makeCDSArray:
   589                              <1> ;Input: ecx = Size of array
   590                              <1> ;       rdi = Pointer to the start of the CDS array
   591                              <1> ;Ouput: rdi = first byte past the end of the table
   592 000007E6 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   592 000007EB [5DC00300]          <1>
   593 000007EF 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   593 000007F4 [33C00300]          <1>
   594 000007F8 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   595                              <1> .tempCDS:
   596 000007FD 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   597 000007FF 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   598 00000803 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   599 0000080A 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   600 00000810 31D2                <1>     xor edx, edx    ;Use edx for flags
   601 00000812 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   602 00000819 7409                <1>     je .skipValidCDS
   603 0000081B BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   604 00000820 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   605                              <1> .skipValidCDS:
   606 00000824 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   607 00000828 FFC0                <1>     inc eax ;Increment the drive letter
   608 0000082A 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   609 00000831 FFC9                <1>     dec ecx
   610 00000833 75C8                <1>     jnz .tempCDS
   611 00000835 C3                  <1>     ret
   612                              <1> initialCDSWritten:
   613                              <1> ;------------------------------------------------;
   614                              <1> ;     Set up general PSP areas and DOS vars      ;
   615                              <1> ;------------------------------------------------;
   616                              <1> ;Additional DOS Vars init and fixups
   617 00000836 64C60425[6BC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   617 0000083E FF                  <1>
   618 0000083F 64C60425[33C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   618 00000847 2F                  <1>
   619 00000848 488DBD[CF010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   620 0000084F 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapaddr], rdi ;Store in country table
   620 00000854 [2C000000]          <1>
   621                              <1> 
   622                              <1> ;Set network machine name to... nothing!
   623 00000858 488DBD[38C30300]    <1>     lea rdi, qword [rbp + machineName]
   624 0000085F B910000000          <1>     mov ecx, 10h    ;16 chars long
   625 00000864 B020                <1>     mov al, SPC ;Space char
   626 00000866 F3AA                <1>     rep stosb   ;Fill with space chars
   627                              <1> 
   628                              <1> 
   629                              <1> ;Patch Data Table init
   630 00000868 488DBD[48C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   631 0000086F 488D85[32580000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   632 00000876 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   633 00000878 488D85[3C580000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   634 0000087F 48AB                <1>     stosq
   635 00000881 488D85[46580000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   636 00000888 48AB                <1>     stosq
   637 0000088A 488D85[50580000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   638 00000891 48AB                <1>     stosq
   639                              <1> 
   640                              <1> ;Initial PSP Init
   641 00000893 488D1D66F8FFFF      <1>     lea rbx, qword [tempPSP]
   642 0000089A 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   642 0000089F [81C30300]          <1>
   643 000008A3 53                  <1>     push rbx
   644 000008A4 4881C380000000      <1>     add rbx, psp.dta
   645 000008AB 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   645 000008B0 [79C30300]          <1>
   646 000008B4 5B                  <1>     pop rbx
   647 000008B5 66C703CD40          <1>     mov word [rbx + psp.return], 040CDh ;DOS return function
   648 000008BA 66C74350CD41        <1>     mov word [rbx + psp.unixEntry], 041CDh  ;Int 41h!
   649 000008C0 C64352CB            <1>     mov byte [rbx + psp.unixEntry + 2], 0CBh    ;Return!
   650 000008C4 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   651 000008CC 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   652 000008D0 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   653 000008D4 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   654 000008D8 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   654 000008E1 FF                  <1>
   655 000008E2 48AB                <1>     stosq   ;8 bytes
   656 000008E4 31C0                <1>     xor eax, eax
   657 000008E6 50                  <1>     push rax    ;Save 0 on the stack
   658 000008E7 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   659 000008EA 48AB                <1>     stosq   ;16 bytes
   660 000008EC AB                  <1>     stosd   ;20 bytes
   661 000008ED 58                  <1>     pop rax ;Get 0 back
   662 000008EE 4889433E            <1>     mov qword [rbx + psp.envPtr], rax    ;No environment
   663 000008F2 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   664 000008F6 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   665 000008FA 4889DA              <1>     mov rdx, rbx
   666 000008FD B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   667 00000902 CD41                <1>     int 41h
   668 00000904 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   669 00000908 B843350000          <1>     mov eax, 3543h
   670 0000090D CD41                <1>     int 41h
   671 0000090F 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   672 00000913 B844350000          <1>     mov eax, 3544h
   673 00000918 CD41                <1>     int 41h
   674 0000091A 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   675                              <1> 
   676 0000091E B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   677 00000923 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   678 00000927 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   679                              <1> ;------------------------------------------------;
   680                              <1> ;          Default File Handle Creation          ;
   681                              <1> ;                                                ;
   682                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   683                              <1> ;------------------------------------------------;
   684                              <1> defaultFileHandles:
   685                              <1> ;Fill in the default file table entries
   686 00000929 488D9D[99C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   687 00000930 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   688 00000937 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   689 0000093D 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   689 00000942 [3BC00300]          <1>
   690 00000946 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   690 0000094F 20                  <1>
   691                              <1> ;GOTO FIRST FILE 
   692 00000950 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   693                              <1> ;Write AUX
   694 00000957 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   695 0000095C 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   696 00000962 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   697 00000966 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   698                              <1>     ;No EOF when reading from the device
   699 0000096A 488B85[065D0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   700 00000971 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   701                              <1>     ;Ignore disk related fields and Date/Time of open
   702 00000975 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   703                              <1>     ;11 chars in 8.3 name
   704 00000979 488D357E060000      <1>     lea rsi, auxName
   705 00000980 B903000000          <1>     mov ecx, 3
   706 00000985 F3A4                <1>     rep movsb   ;Move the three bytes
   707 00000987 4889D0              <1>     mov rax, rdx
   708 0000098A 48AB                <1>     stosq   ;Eight spaces left to print
   709 0000098C 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   709 00000991 [81C30300]          <1>
   710 00000995 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   711                              <1> ;GOTO NEXT ENTRY
   712 00000999 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   713                              <1>     ;Write CON
   714 000009A0 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   715 000009A5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   716 000009AB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   717 000009AF C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   718                              <1>     ;No EOF when reading from the device
   719 000009B3 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   719 000009B8 [4BC00300]          <1>
   720 000009BC 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   721                              <1>     ;Ignore disk related fields and Date/Time of open
   722 000009C0 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   723                              <1>     ;11 chars in 8.3 name
   724 000009C4 488D352F060000      <1>     lea rsi, conName
   725 000009CB B903000000          <1>     mov ecx, 3
   726 000009D0 F3A4                <1>     rep movsb   ;Move the three bytes
   727 000009D2 4889D0              <1>     mov rax, rdx
   728 000009D5 48AB                <1>     stosq   ;Eight spaces left to print
   729 000009D7 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   729 000009DC [81C30300]          <1>
   730 000009E0 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   731                              <1> ;GOTO NEXT ENTRY
   732 000009E4 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   733                              <1> ;Write PRN
   734 000009EB 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   735 000009F0 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   736 000009F6 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   737 000009FA C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   738                              <1>     ;Want EOF when reading from to the device
   739 000009FE 488B85[285D0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   740 00000A05 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   741                              <1>     ;Ignore disk related fields and Date/Time of open
   742 00000A09 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   743                              <1>     ;11 chars in 8.3 name
   744 00000A0D 488D35EE050000      <1>     lea rsi, prnName
   745 00000A14 B903000000          <1>     mov ecx, 3
   746 00000A19 F3A4                <1>     rep movsb   ;Move the three bytes
   747 00000A1B 4889D0              <1>     mov rax, rdx
   748 00000A1E 48AB                <1>     stosq   ;Eight spaces left to print
   749 00000A20 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   749 00000A25 [81C30300]          <1>
   750 00000A29 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   751                              <1> ;Zero word 0 of entry 4 and 5
   752 00000A2D 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   753 00000A34 31C0                <1>     xor eax, eax
   754                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   755                              <1>     ; which is ok as these are empty entries, ready to be used)
   756 00000A36 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   757 00000A38 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   758 00000A3F 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   759                              <1> ;------------------------------------------------;
   760                              <1> ;             Print Welcome Message              ;
   761                              <1> ;------------------------------------------------;
   762 00000A41 488D152C050000      <1>     lea rdx, strtmsg
   763 00000A48 B409                <1>     mov ah, 09h
   764 00000A4A CD41                <1>     int 41h    
   765                              <1> ;------------------------------------------------;
   766                              <1> ;               Load CONFIG.SYS                  ;
   767                              <1> ;------------------------------------------------;
   768                              <1> ;Setup stackframe, workout base 
   769 00000A4C 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   770                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   771 00000A53 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   772 00000A57 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   773 00000A5D 7421                <1>     je setupFrame   ;If so, jump
   774 00000A5F 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   775 00000A62 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   776 00000A66 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   777 00000A6C 7412                <1>     je setupFrame   ;If so, jump
   778 00000A6E 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   779 00000A71 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   780 00000A75 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   781 00000A7B 7403                <1>     je setupFrame   ;If so, jump
   782 00000A7D 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   783                              <1> setupFrame:
   784 00000A80 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   785 00000A87 55                  <1>     push rbp
   786 00000A88 4889E5              <1>     mov rbp, rsp
   787 00000A8B 4881EC20000000      <1>     sub rsp, cfgFrame_size
   788 00000A92 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   789 00000A96 C645F81E            <1>     mov byte [rbp - cfgFrame.newBuffers], buffersDefault
   790 00000A9A C645F714            <1>     mov byte [rbp - cfgFrame.newSFTVal], filesDefault
   791 00000A9E C645F604            <1>     mov byte [rbp - cfgFrame.newFCBSVal], fcbsDefault
   792 00000AA2 C645F500            <1>     mov byte [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   793 00000AA6 C645F405            <1>     mov byte [rbp - cfgFrame.newLastdrive], lastDriveDeflt
   794                              <1> 
   795 00000AAA 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   796 00000AB2 A880                <1>     test al, 80h    ;Was boot drive hard disk?
   797 00000AB4 7406                <1>     jz notHDD
   798                              <1> ;Set Current Drive to C:
   799 00000AB6 B202                <1>     mov dl, 2
   800 00000AB8 B40E                <1>     mov ah, 0Eh ;Select C: Drive
   801 00000ABA CD41                <1>     int 41h
   802                              <1> notHDD:
   803 00000ABC 488D1543050000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   804 00000AC3 B43D                <1>     mov ah, 3Dh ;Open file for reading
   805 00000AC5 B000                <1>     mov al, ReadAccess
   806 00000AC7 CD41                <1>     int 41h
   807 00000AC9 7200                <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   808                              <1> 
   809                              <1> ;------------------------------------------------;
   810                              <1> ;              Process CONFIG.SYS                ;
   811                              <1> ;------------------------------------------------;
   812                              <1> ;Create a stack frame with the following order.
   813                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   814                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   815                              <1> ; New SFT value.            Default = 20, Min = 5, Max = 254
   816                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   817                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   818                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   819                              <1> ;------------------------------------------------;
   820                              <1> ;   Setup Final Data Areas With Overrides from   ;
   821                              <1> ;                  CONFIG.SYS                    ;
   822                              <1> ;------------------------------------------------;
   823                              <1> ;Add additional buffers. Start from tmpBufHdr
   824                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
   825                              <1> ;Add additional FCBS.
   826                              <1> ;Create a larger CDS if needed.
   827                              <1> noCfg:
   828                              <1> ;Start with buffers:
   829 00000ACB 0FB64DF8            <1>     movzx ecx, byte [rbp - cfgFrame.newBuffers]    ;Get new buffers size
   830 00000ACF 64880C25[71C00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
   831                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
   832 00000AD7 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
   832 00000ADC [53C00300]          <1>
   833 00000AE0 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
   834                              <1>     ;Each buffer has no flags, drive number must be -1
   835 00000AE6 488B7DE8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
   836 00000AEA 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
   836 00000AEF [55C00300]          <1>
   837 00000AF3 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
   838 00000AF6 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
   839 00000AF8 67E325              <1>     jecxz .lastBuffer
   840                              <1> .bufferLoop:
   841 00000AFB 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
   842 00000AFE 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
   843 00000B01 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   844 00000B07 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   845 00000B0B 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   846 00000B0E 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   847 00000B11 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   848 00000B15 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   849 00000B19 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
   850 00000B1C FFC9                <1>     dec ecx
   851 00000B1E 75DB                <1>     jnz .bufferLoop
   852                              <1> .lastBuffer:
   853 00000B20 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
   854 00000B23 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
   855 00000B2A 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   856 00000B30 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
   857 00000B34 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
   858 00000B37 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
   859 00000B3A 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
   860 00000B3E 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
   861 00000B42 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   862                              <1> 
   863                              <1> ;Now build a new SFT header for the number of files specified by user
   864 00000B46 0FB64DF7            <1>     movzx ecx, byte [rbp - cfgFrame.newSFTVal]
   865 00000B4A 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
   866 00000B50 7430                <1>     je .skipSFT
   867 00000B52 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
   867 00000B57 [3BC00300]          <1>
   868 00000B5B 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
   869 00000B5E 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
   870 00000B62 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
   871 00000B66 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
   872 00000B6D 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
   873 00000B74 B84F000000          <1>     mov eax, sft_size
   874 00000B79 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   875 00000B7B 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   876 00000B7E 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   877                              <1> .skipSFT:
   878                              <1> ;FCBS at rdi
   879 00000B82 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
   879 00000B87 [65C00300]          <1>
   880 00000B8B 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
   881 00000B92 0FB64DF6            <1>     movzx ecx, byte [rbp - cfgFrame.newFCBSVal]
   882 00000B96 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
   883 00000B9A B84F000000          <1>     mov eax, sft_size
   884 00000B9F F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
   885 00000BA1 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
   886 00000BA4 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   887 00000BA8 0FB64DF5            <1>     movzx ecx, byte [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
   888 00000BAC 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
   888 00000BB1 [6DC00300]          <1>
   889                              <1> ;And CDS now
   890 00000BB5 0FB64DF4            <1>     movzx ecx, byte [rbp - cfgFrame.newLastdrive]
   891 00000BB9 64880C25[70C00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
   892 00000BC1 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
   892 00000BC6 [5DC00300]          <1>
   893 00000BCA E817FCFFFF          <1>     call makeCDSArray
   894 00000BCF 48897DE8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
   895                              <1> 
   896                              <1> ;Computation of new space is complete, now work out how many bytes this is
   897 00000BD3 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
   898 00000BD6 5D                  <1>     pop rbp
   899 00000BD7 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
   900 00000BDE 4829DF              <1>     sub rdi, rbx    ;Gives difference now
   901 00000BE1 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
   902 00000BE5 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   903                              <1> ;Resize DOS allocation before loading COMMAND.COM
   904 00000BE8 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   904 00000BED [2BC00300]          <1>
   905 00000BF1 4981C010000000      <1>     add r8, mcb.program
   906 00000BF8 B44A                <1>     mov ah, 4Ah
   907 00000BFA CD41                <1>     int 41h
   908                              <1>     
   909                              <1>     %if DEBUG && ALLOCTEST
   910                              <1> ;Test Allocation, Growth and Deallocation
   911                              <1>     mov r15, qword fs:[currentPSP]
   912                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   913                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   914                              <1>     mov ah, 48h ;Allocate
   915                              <1>     int 41h
   916                              <1> 
   917                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   918                              <1>     mov r8, rax ;Move the pointer to r8
   919                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   920                              <1>     mov ah, 4Ah
   921                              <1>     int 41h
   922                              <1> 
   923                              <1>     mov ah, 49h ;Free r8
   924                              <1>     int 41h
   925                              <1>     mov qword fs:[currentPSP], r15
   926                              <1>     %endif
   927                              <1> 
   928                              <1>     %if ENDSTATUS
   929                              <1> debugFinal:
   930                              <1>     ;Print system state
   931 00000BFC 55                  <1>     push rbp    ;Only rbp really matters here
   932 00000BFD 4989E8              <1>     mov r8, rbp
   933                              <1> 
   934 00000C00 488D2DD0020000      <1>     lea rbp, .msg2
   935 00000C07 4D8D88[AF040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   936 00000C0E 41FFD1              <1>     call r9
   937                              <1> 
   938 00000C11 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   939 00000C18 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   939 00000C1D [08C00300]          <1>
   940                              <1> 
   941 00000C21 4D8D88[EA070000]    <1>     lea r9, qword [r8 + overlayQword]
   942 00000C28 41FFD1              <1>     call r9
   943                              <1> 
   944 00000C2B 4881C31B000000      <1>     add rbx, 19+8
   945 00000C32 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   945 00000C37 [00C00300]          <1>
   946 00000C3B 41FFD1              <1>     call r9
   947                              <1> 
   948 00000C3E 4881C31B000000      <1>     add rbx, 19+8
   949 00000C45 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   949 00000C4A [2BC00300]          <1>
   950 00000C4E 41FFD1              <1>     call r9
   951                              <1> 
   952 00000C51 4881C31C000000      <1>     add rbx, 20+8
   953 00000C58 4D8D88[A7070000]    <1>     lea r9, qword [r8 + overlayDword]
   954 00000C5F 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   955 00000C67 41FFD1              <1>     call r9
   956                              <1> 
   957 00000C6A 4881C312000000      <1>     add rbx, 10+8
   958 00000C71 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   959 00000C79 41FFD1              <1>     call r9
   960                              <1> 
   961 00000C7C 4881C312000000      <1>     add rbx, 10+8
   962 00000C83 64488B0425-         <1>     mov rax, qword fs:[longMem]
   962 00000C88 [1BC00300]          <1>
   963 00000C8C 4D8D88[EA070000]    <1>     lea r9, qword [r8 + overlayQword]
   964 00000C93 41FFD1              <1>     call r9
   965                              <1> 
   966 00000C96 4881C31B000000      <1>     add rbx, 19+8
   967 00000C9D 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   967 00000CA2 [33C00300]          <1>
   968 00000CA6 41FFD1              <1>     call r9
   969                              <1> 
   970 00000CA9 4881C31B000000      <1>     add rbx, 19+8
   971 00000CB0 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   971 00000CB5 [3BC00300]          <1>
   972 00000CB9 41FFD1              <1>     call r9
   973                              <1> 
   974 00000CBC 4881C31B000000      <1>     add rbx, 19+8
   975 00000CC3 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   975 00000CC8 [55C00300]          <1>
   976 00000CCC 41FFD1              <1>     call r9
   977                              <1> 
   978 00000CCF 4881C31B000000      <1>     add rbx, 19+8
   979 00000CD6 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   979 00000CDB [5DC00300]          <1>
   980 00000CDF 41FFD1              <1>     call r9
   981                              <1> 
   982 00000CE2 4D8D88[35070000]    <1>     lea r9, qword [r8 + overlayByte]
   983                              <1> 
   984 00000CE9 4881C32C000000      <1>     add rbx, 25+19
   985 00000CF0 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   985 00000CF6 [6FC00300]          <1>
   986 00000CFA 41FFD1              <1>     call r9
   987                              <1> 
   988 00000CFD 4881C31E000000      <1>     add rbx, 30
   989 00000D04 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   989 00000D0A [12C00300]          <1>
   990 00000D0E 41FFD1              <1>     call r9
   991                              <1> 
   992 00000D11 4881C31E000000      <1>     add rbx, 30
   993 00000D18 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   993 00000D1E [11C00300]          <1>
   994 00000D22 41FFD1              <1>     call r9
   995                              <1> 
   996 00000D25 4881C310000000      <1>     add rbx, 16
   997 00000D2C 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   997 00000D32 [10C00300]          <1>
   998 00000D36 0441                <1>     add al, "A"
   999 00000D38 8803                <1>     mov byte [rbx], al
  1000                              <1> 
  1001 00000D3A 488D2D10000000      <1>     lea rbp, .msg
  1002 00000D41 4D8D88[AF040000]    <1>     lea r9, qword [r8 + debPrintNullString]
  1003 00000D48 41FFD1              <1>     call r9
  1004 00000D4B 5D                  <1>     pop rbp
  1005 00000D4C E99E010000          <1>     jmp l1
  1006 00000D51 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1006 00000D5A 206261736520464646- <1>
  1006 00000D63 464646464646464646- <1>
  1006 00000D6C 46464646680A0D      <1>
  1007 00000D73 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1007 00000D7C 464646464646464646- <1>
  1007 00000D85 464646464646680A0D  <1>
  1008 00000D8E 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1008 00000D97 464646464646464646- <1>
  1008 00000DA0 46464646464668200A- <1>
  1008 00000DA9 0D                  <1>
  1009 00000DAA 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
  1009 00000DB3 464646464646466820  <1>
  1010 00000DBC 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
  1010 00000DC5 464646464646466820  <1>
  1011 00000DCE 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1011 00000DD7 464646464646464646- <1>
  1011 00000DE0 464646464646680A0D  <1>
  1012 00000DE9 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1012 00000DF2 464646464646464646- <1>
  1012 00000DFB 464646464646680A0D  <1>
  1013 00000E04 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1013 00000E0D 464646464646464646- <1>
  1013 00000E16 464646464646680A0D  <1>
  1014 00000E1F 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1014 00000E28 464646464646464646- <1>
  1014 00000E31 464646464646680A0D  <1>
  1015 00000E3A 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1015 00000E43 464646464646464646- <1>
  1015 00000E4C 464646464646680A0D  <1>
  1016 00000E55 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1016 00000E5E 204C6F676963616C20- <1>
  1016 00000E67 447269766573204646- <1>
  1016 00000E70 680A0D              <1>
  1017 00000E73 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1017 00000E7C 204669786564204472- <1>
  1017 00000E85 697665732020204646- <1>
  1017 00000E8E 680A0D              <1>
  1018 00000E91 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1018 00000E9A 2052656D6F7661626C- <1>
  1018 00000EA3 652044727673204646- <1>
  1018 00000EAC 680A0D              <1>
  1019 00000EAF 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
  1019 00000EB8 65205A3A0A0D        <1>
  1020 00000EBE 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1020 00000EC7 4F4D4D414E442E434F- <1>
  1020 00000ED0 4D2E2E2E0A0D00      <1>
  1021 00000ED7 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1021 00000EE0 626F6F742073756D6D- <1>
  1021 00000EE9 6172790A0D00        <1>
  1022                              <1>     %endif
  1023                              <1> l1:
  1024                              <1>     ;Load COMMAND.COM
  1025                              <1>     ;Get currentPSP ptr
  1026 00000EEF B462                <1>     mov ah, 62h ;Get current PSP ptr in rdx
  1027 00000EF1 CD41                <1>     int 41h
  1028 00000EF3 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1029 00000EF5 CD41                <1>     int 41h
  1030 00000EF7 0441                <1>     add al, "A"
  1031 00000EF9 880512010000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1032 00000EFF 488D1D1A010000      <1>     lea rbx, cmdBlock
  1033 00000F06 488D425C            <1>     lea rax, qword [rdx + psp.fcb1]
  1034 00000F0A 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1035 00000F0E 488D426C            <1>     lea rax, qword [rdx + psp.fcb2]
  1036 00000F12 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1037 00000F16 488D15F4000000      <1>     lea rdx, cmdLine
  1038 00000F1D 48895308            <1>     mov qword [rbx + execProg.pCmdLine], rdx    ;Store command line here
  1039 00000F21 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1040 00000F26 CD41                <1>     int 41h
  1041 00000F28 488D15A6000000      <1>     lea rdx, badCom
  1042 00000F2F B409                <1>     mov ah, 09h ;Print message
  1043 00000F31 CD41                <1>     int 41h
  1044 00000F33 E92A000000          <1>     jmp errorInit.ei0
  1045                              <1>     
  1046                              <1> ;--------------------------------
  1047                              <1> ;       PROCS FOR SYSINIT       :
  1048                              <1> ;--------------------------------
  1049                              <1> adjustDrvHdr:
  1050                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1051                              <1> ;       rbp = Ptr to the start of the DOS segment
  1052                              <1> ;Output: rsi = EA of next header in DOS segment
  1053 00000F38 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1054 00000F3C 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1055 00000F40 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1056 00000F47 740A                <1>     je .exit
  1057 00000F49 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1058 00000F4C 4881C622000000      <1>     add rsi, drvHdr_size
  1059                              <1> .exit:
  1060 00000F53 C3                  <1>     ret
  1061                              <1> errorInit:
  1062                              <1> ;If a critical error occurs during sysinit, fail through here
  1063                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1064 00000F54 488D2D49000000      <1>     lea rbp, hltmsg
  1065 00000F5B B804130000          <1>     mov eax, 1304h
  1066 00000F60 CD30                <1>     int 30h
  1067                              <1>     ;cli ;Clear interrupts
  1068                              <1>     ;mov al, -1
  1069                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1070                              <1>     ;out dx, al      ;Mask all lines
  1071                              <1>     ;mov dx, 21h     ;PIC1 data
  1072                              <1>     ;out dx, al      ;Mask all lines
  1073                              <1> .ei0:
  1074 00000F62 F4                  <1>     hlt
  1075 00000F63 F390                <1>     pause
  1076 00000F65 EBFB                <1>     jmp short .ei0
  1077                              <1> noCmdCom:
  1078 00000F67 488D1567000000      <1>     lea rdx, badCom
  1079 00000F6E B409                <1>     mov ah, 09h
  1080 00000F70 CD41                <1>     int 41h
  1081 00000F72 EBEE                <1>     jmp short errorInit.ei0
  1082                              <1> ;--------------------------------
  1083                              <1> ;       DATA FOR SYSINIT        :
  1084                              <1> ;--------------------------------
  1085 00000F74 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1085 00000F7D 5343502F444F532E2E- <1>
  1085 00000F86 2E0A0D24            <1>
  1086 00000F8A 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1086 00000F93 6C6F636174696F6E20- <1>
  1086 00000F9C 4572726F720A0D00    <1>
  1087 00000FA4 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1087 00000FAD 7469616C6973696E67- <1>
  1087 00000FB6 20534350444F532E53- <1>
  1087 00000FBF 59532E205379737465- <1>
  1087 00000FC8 6D2068616C74696E67- <1>
  1087 00000FD1 2E2E2E00            <1>
  1088 00000FD5 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1088 00000FDE 7373696E6720436F6D- <1>
  1088 00000FE7 6D616E6420696E7465- <1>
  1088 00000FF0 727072657465720A0D- <1>
  1088 00000FF9 24                  <1>
  1089 00000FFA 434F4E00            <1> conName db "CON",0
  1090 00000FFE 41555800            <1> auxName db "AUX",0
  1091 00001002 50524E00            <1> prnName db "PRN",0
  1092                              <1> 
  1093 00001006 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1093 0000100F 5300                <1>
  1094 00001011 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0
  1094 0000101A 442E434F4D00        <1>
  1095                              <1> cmdBlock:
  1096                              <1>     istruc execProg
  1097 00001020 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Keep at 0 to "copy" DOS's environment ptr
  1098 00001028 0000000000000000    <1>     at execProg.pCmdLine,   dq 0
  1099 00001030 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1100 00001038 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1101                              <1>     iend
  1102                              <1> 
  1103                              <1> intData:
  1104 00001040 [8F45000000000000]  <1>     dq terminateProcess ;Int 40h
  1105 00001048 [AA56000000000000]  <1>     dq functionDispatch ;Int 41h
  1106 00001050 [540F000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1107 00001058 [0258000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1108 00001060 [B74F000000000000]  <1>     dq dosDefCritErrHdlr 
  1109 00001068 [8750000000000000]  <1>     dq absDiskRead      ;Int 45h
  1110 00001070 [6850000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1111 00001078 [9645000000000000]  <1>     dq terminateRes     ;Int 47h
  1112 00001080 [0258000000000000]  <1>     dq defaultIretq     ;Int 48h
  1113 00001088 [0258000000000000]  <1>     dq defaultIretq     ;Int 49h
  1114 00001090 [0258000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1115 00001098 [0258000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1116 000010A0 [0258000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1117 000010A8 [0258000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1118 000010B0 [0258000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1119 000010B8 [B15C000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1120                              <1> nData:
  1121 000010C0 [E45C000000000000]  <1>     dq conHdr
  1122 000010C8 0480                <1>     dw 08004h
  1123 000010CA [8C5E000000000000]  <1>     dq nulStrat
  1124 000010D2 [925E000000000000]  <1>     dq nulIntr
  1125 000010DA 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1126                              <1> 
  1127                              <1> diskInit:
  1128                              <1>     ;We create a function to deal with BPB parsing etc
  1129                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1130                              <1>     ;   They dont have to be bootable
  1131                              <1>     ;Then go back and look for other partitions partitions. 
  1132                              <1>     ;   Add each other primary or logical ptn (until max)
  1133                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1134                              <1>     ;Use r8 as device counter
  1135 000010E2 488DBD[5D660000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1136 000010E9 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1136 000010F1 00                  <1>
  1137 000010F2 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1138 000010F8 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1138 00001101 00                  <1>
  1139 00001102 B280                <1>     mov dl, 80h ;Start with HDD 0
  1140                              <1> .primary:
  1141 00001104 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1141 0000110C 03                  <1>
  1142 0000110D 0F84AB000000        <1>     je .remInit
  1143 00001113 31C9                <1>     xor ecx, ecx    ;Sector 0
  1144 00001115 E871010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1145 0000111A 0F8289000000        <1>     jc .primaryEpilog
  1146                              <1>     ;Here, check MBR or BPB
  1147 00001120 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1148 00001129 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1149                              <1>     ;Now check if BPB or MBR
  1150 0000112B 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1151 0000112D 8A6302              <1>     mov ah, byte [rbx + 2]
  1152 00001130 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1153 00001134 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1154                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1155                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1156 00001136 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1157 0000113D B104                <1>     mov cl, 4
  1158                              <1> .checkPrimary:
  1159 0000113F 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1160 00001142 3C01                <1>     cmp al, 01
  1161 00001144 7421                <1>     je .primaryFound
  1162 00001146 3C04                <1>     cmp al, 04
  1163 00001148 741D                <1>     je .primaryFound
  1164 0000114A 3C06                <1>     cmp al, 06
  1165 0000114C 7419                <1>     je .primaryFound
  1166 0000114E 3C0B                <1>     cmp al, 0Bh
  1167 00001150 7415                <1>     je .primaryFound
  1168 00001152 3C0C                <1>     cmp al, 0Ch
  1169 00001154 7411                <1>     je .primaryFound
  1170 00001156 3C0E                <1>     cmp al, 0Eh
  1171 00001158 740D                <1>     je .primaryFound
  1172 0000115A 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1173 00001161 FEC9                <1>     dec cl
  1174 00001163 7444                <1>     jz .primaryEpilog
  1175 00001165 EBD8                <1>     jmp short .checkPrimary
  1176                              <1> .primaryFound:
  1177                              <1>     ;Copy the first sector of this partition into memory
  1178 00001167 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1179 0000116A E81C010000          <1>     call .initReadSector
  1180 0000116F 7238                <1>     jc .primaryEpilog
  1181                              <1>     ;Now verify this is a BPB
  1182 00001171 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1183 00001173 8A6302              <1>     mov ah, byte [rbx + 2]
  1184 00001176 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1185 0000117A 752D                <1>     jne .primaryEpilog   ;If not, skip
  1186                              <1>     ;Now copy data to internal tables
  1187 0000117C 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1188 0000117F B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1189 00001184 57                  <1>     push rdi
  1190 00001185 F348A5              <1>     rep movsq   ;Copy the BPB
  1191 00001188 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1192                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1193 00001189 4A8D9C05[2B660000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1194                              <1>     ;Add device count to rbx to point to correct entry
  1195 00001191 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1196 00001193 4A8D9CC5[35660000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1197 0000119B 488933              <1>     mov qword [rbx], rsi
  1198 0000119E 49FFC0              <1>     inc r8  ;Goto next logical drive
  1199 000011A1 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1200                              <1> .primaryEpilog:
  1201 000011A9 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1202 000011AB 88D6                <1>     mov dh, dl
  1203 000011AD 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1204 000011B0 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1205 000011B8 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1206                              <1> .extended:
  1207                              <1> ;We have gone through all the devices once
  1208                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1209                              <1>     ;je .remInit ;If yes, get removable devices
  1210                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1211                              <1>     ;xor ecx, ecx    ;Get MBR back
  1212                              <1>     ;call .initReadSector
  1213                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1214                              <1> .remInit:
  1215                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1216                              <1> ; for some reason the removable drives stop working or dont exist.
  1217                              <1> ;This forces the hard drives to start at C:
  1218 000011BE 53                  <1>     push rbx
  1219 000011BF 488D9D[5D660000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBblks] ;Get default drive A block ptr
  1220 000011C6 48899D[35660000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl], rbx  ;Store in ptrs table
  1221 000011CD 4881C378000000      <1>     add rbx, bpbEx_size ;Goto next ptr
  1222 000011D4 48899D[3D660000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl + 8], rbx  ;Store next pointer
  1223 000011DB 5B                  <1>     pop rbx
  1224                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1225 000011DC 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1226 000011DF 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1227 000011E1 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1228                              <1>     ;rdi points to the space for the subsequent bpb's
  1229 000011E4 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1229 000011EC 00                  <1>
  1230 000011ED 750A                <1>     jnz .removables
  1231 000011EF 64800425[6FC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1231 000011F7 02                  <1>
  1232 000011F8 C3                  <1>     ret ;and return!
  1233                              <1> .removables:
  1234 000011F9 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1235 000011FB E88B000000          <1>     call .initReadSector
  1236 00001200 7238                <1>     jc .removableEpilogue   ;Goto next device
  1237                              <1>     ;Now verify this is a BPB
  1238 00001202 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1239 00001204 8A6302              <1>     mov ah, byte [rbx + 2]
  1240 00001207 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1241 0000120B 752D                <1>     jne .removableEpilogue   ;If not, skip
  1242                              <1>     ;Now copy data to internal tables
  1243 0000120D 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1244 00001210 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1245 00001215 57                  <1>     push rdi
  1246 00001216 F348A5              <1>     rep movsq   ;Copy the BPB
  1247 00001219 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1248                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1249 0000121A 4A8D9C05[2B660000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1250                              <1>     ;Add device count to rbx to point to correct entry
  1251 00001222 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1252 00001224 4A8D9CC5[35660000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1253 0000122C 488933              <1>     mov qword [rbx], rsi
  1254 0000122F 49FFC0              <1>     inc r8  ;Goto next logical drive
  1255 00001232 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1256                              <1> .removableEpilogue:
  1257 0000123A FEC2                <1>     inc dl  ;Goto next BIOS device now
  1258 0000123C 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1259 00001244 7412                <1>     je .end
  1260 00001246 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1261 0000124D 7403                <1>     je .re0
  1262 0000124F 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1263                              <1> .re0:
  1264 00001252 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1265 00001256 72A1                <1>     jb .removables
  1266                              <1> .end:
  1267 00001258 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1267 00001260 01                  <1>
  1268 00001261 7401                <1>     je .singleRemDev
  1269 00001263 C3                  <1>     ret
  1270                              <1> .singleRemDev:
  1271                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1272 00001264 488D9D[2B660000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1273 0000126B 8A95[2B660000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1274 00001271 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1275 00001274 488D9D[35660000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1276 0000127B 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1277 0000127E 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1278 00001282 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1279 0000128A C3                  <1>     ret
  1280                              <1> .initReadSector:
  1281                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1282 0000128B B482                <1>     mov ah, 82h ;Read
  1283 0000128D B001                <1>     mov al, 1   ;One sector
  1284 0000128F 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1285 00001296 CD33                <1>     int 33h
  1286 00001298 C3                  <1>     ret
    15                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    16                                  %include "./Source/BSS/dosSeg.asm"
    17                              <1> ;This file contains the main DOS data segment
    18                              <1> dosAPT: ;Additional Page tables
    19 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    20                              <1> dosDataArea:
    21 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    22 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    23 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    24 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    25 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    26 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    27 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    28 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    29                              <1> ;Above is the system stats
    30                              <1> ;Below is the DOS vars
    31 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    32                              <1>     ;   A value of 0 means no chars buffered.
    33 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    34                              <1> sysVarsPtr:
    35 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    36 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    37 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    38                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    39 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    40                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    41 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    42 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    43 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    44 0003C065 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    45 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    46                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    47 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    48 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    49 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    50 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    51 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    52                              <1> ;Additional internal variables
    53                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    54 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    55 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    56 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    57                              <1>     ;PLEASE DO NOT TOUCH MAXHNDLS!!!
    58                              <1>     ;Share hook functions here
    59                              <1> ;Create SFT header and corresponding array of five default sft entries
    60 0003C099 <res Ah>            <1>     firstSftHeader  resb sfth_size
    61 0003C0A3 <res 4Fh>           <1>     firstSft    resb sft_size
    62 0003C0F2 <res 4Fh>           <1>     secondSft   resb sft_size
    63 0003C141 <res 4Fh>           <1>     thirdSft    resb sft_size
    64 0003C190 <res 4Fh>           <1>     fourthSft   resb sft_size
    65 0003C1DF <res 4Fh>           <1>     fifthSft    resb sft_size
    66                              <1> 
    67                              <1> ;Virtual CONsole Buffers
    68 0003C22E ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    69                              <1>     ;Only incremented when CON device runs vCon
    70                              <1> vConBuf:    ;Proper buffer symbol
    71 0003C22F ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    72 0003C230 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    73                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    74 0003C2B0 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    75 0003C330 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    76                              <1> 
    77 0003C331 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    78 0003C332 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    79 0003C333 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    80 0003C334 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    81                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    82                              <1> 
    83 0003C335 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    84                              <1> ;Server stuff. Default to all zeros (blank)
    85 0003C336 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    86                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    87 0003C337 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    88 0003C338 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    89                              <1> ;Swappable Data Area
    90 0003C348 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    91 0003C368 ??                  <1>                 resb 1  ;Alignment byte
    92                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    93 0003C369 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    94 0003C36A ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    95 0003C36B ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    96 0003C36C ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    97 0003C36D ????                <1>     errorExCde  resw 1  ;Extended Error Code
    98 0003C36F ??                  <1>     errorAction resb 1  ;Suggested action for error  
    99 0003C370 ??                  <1>     errorClass  resb 1  ;Error Class
   100 0003C371 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   101 0003C379 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   102 0003C381 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   103                              <1> 
   104 0003C389 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   105 0003C391 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   106                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   107                              <1>     ;Lower byte: User Specified
   108 0003C393 ??                  <1>     currentDrv  resb 1  ;Default drive x
   109 0003C394 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   110                              <1> ;SDA, needs to be replaced between processes
   111                              <1> sdaMainSwap:
   112 0003C395 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   113 0003C39D ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   114 0003C3A5 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   115 0003C3A7 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   116 0003C3AF ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   117 0003C3B7 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   118 0003C3BF ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   119 0003C3C1 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   120 0003C3C9 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   121 0003C3CA ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   122 0003C3CB ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   123                              <1> 
   124 0003C3CC ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   125 0003C3D4 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   126 0003C3DC ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   127 0003C3E4 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   128 0003C3EC ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   129                              <1> ;The below flag tells DOS to print ^C in the termination function
   130 0003C3ED ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   131 0003C3EE ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   132                              <1> ;Time stuff
   133                              <1> ;Read the below two as a word
   134 0003C3EF ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   135 0003C3F0 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   136 0003C3F1 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   137 0003C3F2 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   138 0003C3F4 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   139                              <1> 
   140 0003C3F5 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   141 0003C3F6 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   142 0003C3F7 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   143                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   144                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   145                              <1> ; without forcing to re-build the whole primary request block.
   146                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   147                              <1> ; with secondary char output going through the secondary header
   148                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   149                              <1> ; for output)
   150                              <1> ;ioReqPkt is the largest possible packet
   151 0003C3F8 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   152 0003C422 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   153 0003C44C <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   154 0003C476 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   155                              <1> ;Swappable Buffers
   156 0003C477 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   157                              <1>     ;We add an additional byte to save ah too
   158 0003C47D ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   159 0003C47F <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   160 0003C4FF <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   161 0003C57F ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   162 0003C587 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   163 0003C58F ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   164                              <1> ;Misc bookkeeping flags and vars
   165 0003C590 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal searching block
   166 0003C5BB <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   167 0003C5DB <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   168 0003C5E7 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   169 0003C5F3 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   170 0003C5FB <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   171 0003C656 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   172 0003C657 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   173 0003C658 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   174 0003C659 ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   175 0003C65A ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write
   176 0003C65B ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   177 0003C65C ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   178                              <1> 
   179 0003C65D ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   180 0003C65E ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   181 0003C65F ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   182 0003C660 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   183 0003C661 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   184 0003C662 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   185 0003C663 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   186                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   187                              <1> workingDD:  ;Create a symbol for the working device driver too
   188 0003C664 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   189 0003C66C ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   190                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   191                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   192 0003C674 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   193 0003C67C ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   194 0003C684 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   195 0003C68C ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   196 0003C68E ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   197 0003C690 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   198                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   199                              <1> ; and 32 byte offset into the sector for directory
   200 0003C698 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   201                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   202                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   203 0003C6A0 ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   204                              <1> ;***************************************************|
   205                              <1> ; Needs to be set up before any file access         |
   206                              <1> ; These vars keep track of file access properties   |
   207                              <1> ;   and must be used only for such purposes.        |
   208                              <1> ;***************************************************|
   209 0003C6A2 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   210 0003C6A6 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   211                              <1> 
   212 0003C6AA ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   213 0003C6AE ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   214 0003C6AF ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   215                              <1> 
   216 0003C6B7 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   217 0003C6B9 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   218                              <1> ;***************************************************|
   219 0003C6BD ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   220 0003C6C1 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   221 0003C6C5 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   222 0003C6C6 ????????            <1>     bytesAppend resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   223 0003C6CA ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   224 0003C6CE ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   225                              <1> ;Directory stuff
   226 0003C6D2 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   227 0003C6D6 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   228 0003C6DA ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   229 0003C6DC ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   230                              <1> ;Error DPB 
   231 0003C6E0 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   232 0003C6E8 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   233                              <1> ;Stacks and scratch SFT
   234 0003C6E9 <res 528h>          <1>     critStack   resq 165
   235 0003CC11 ????????????????    <1>     critStakTop resq 1
   236                              <1> 
   237 0003CC19 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   238                              <1> 
   239 0003CC68 <res 638h>          <1>     AuxStack    resq 199
   240 0003D2A0 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   241 0003D2A8 <res 638h>          <1>     DiskStack   resq 199
   242 0003D8E0 ????????????????    <1>     DiskStakTop resq 1
   243                              <1> 
   244 0003D8E8 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   245 0003D8E9 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   246                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   247 0003D8EA <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   248 0003D95A <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   249                              <1>     sdaLen      equ     $ - sda 
   250                              <1>     sdaMSLen    equ     $ - sda
   251                              <1> 
   252                              <1> ;Additional variables NOT in the SDA
   253 0003D982 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   254                              <1>     ;for saving the current header when quickly doing a second request
   255                              <1> 
   256 0003D9AC ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   257 0003D9AD ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   258                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   259                              <1> inExtASCII:
   260 0003D9AF ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   261 0003D9B0 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   262                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   263                              <1>     ; copy of the date/time record
   264                              <1> 
   265                              <1>     dSegLen     equ     $
    17                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    18                                  %define currSegVBase section.resSeg.vstart
    19                                  %include "./Source/Data/staticData.asm"
    20                              <1> 
    21                              <1> ;-----------------------------------:
    22                              <1> ;       Static Data Variables       :
    23                              <1> ;-----------------------------------:
    24 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    25 00000001 01                  <1> dosMinor    db 01h      ;.01
    26 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    26 0000000B 535953              <1>
    27 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    27 00000017 535953              <1>
    28                              <1> 
    29                              <1> ;-----------------------------------:
    30                              <1> ;        Static Data Tables         :
    31                              <1> ;-----------------------------------:
    32                              <1> ctryTbl:
    33                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
    34 0000001A 0100                <1>     dw 1            
    35 0000001C 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
    36 00000021 2C00                <1>     db ",",0
    37 00000023 2E00                <1>     db ".",0
    38 00000025 2D00                <1>     db "-",0
    39 00000027 3A00                <1>     db ":",0
    40 00000029 00                  <1>     db 0
    41 0000002A 02                  <1>     db 2 
    42 0000002B 00                  <1>     db 0 
    43 0000002C 0000000000000000    <1>     dq 0 
    44 00000034 2C00                <1>     db ",",0    
    45 00000036 000000000000000000- <1>     db 0,0,0,0,0,0,0,0,0,0
    45 0000003F 00                  <1>
    46                              <1> 
    47                              <1> ;IO Char table
    48                              <1> ;This table has Request header length, command code and error flags
    49                              <1> ; as a packed DWORD entry
    50                              <1> ioRqCmdErrTbl:
    51                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    52                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    53 00000040 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    54 00000044 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    55 00000048 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    56 0000004C 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    57 00000050 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    58 00000054 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    59                              <1> 
    60                              <1> 
    61                              <1> 
    62                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    63                              <1> ; wish to install their own custom logic.
    64 00000058 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    65 00000060 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    66 00000061 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    67                              <1> ;Extended ASCII keys with special meanings
    68 00000062 3B                  <1> extKeyTbl   db eF1
    69 00000063 B026                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    70 00000065 3C                  <1>             db eF2
    71 00000066 A226                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    72 00000068 3D                  <1>             db eF3
    73 00000069 A926                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    74 0000006B 3E                  <1>             db eF4
    75 0000006C DE26                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    76 0000006E 3F                  <1>             db eF5
    77 0000006F 2327                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    78 00000071 40                  <1>             db eF6
    79 00000072 3927                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    80 00000074 41                  <1>             db eF7
    81 00000075 4027                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    82 00000077 4B                  <1>             db eCursL
    83 00000078 0726                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    84 0000007A 4D                  <1>             db eCursR
    85 0000007B B026                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    86 0000007D 52                  <1>             db eIns
    87 0000007E 4B27                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    88 00000080 53                  <1>             db eDel
    89 00000081 5227                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    90                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    91                              <1> 
    92                              <1> ;When counting the number of days, first compute the number of years since
    93                              <1> ; 1980 and your year. 
    94                              <1> ;Then, using the table below, find the number of leap years between 1980
    95                              <1> ; and (YourYear - 1). 
    96                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    97                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    98                              <1> ;
    99                              <1> ;Use the months table to get the number of days in a normal month as leap 
   100                              <1> ; years are added using the previous comment.
   101                              <1> 
   102                              <1> ;This table is the number of days in the month
   103                              <1> ;The function which updates the days in Feb writes the number to this table
   104                              <1> monthsTbl:  
   105 00000083 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   105 0000008C 1F1E1F              <1>
   106                              <1> 
   107                              <1> ;Error tables
   108                              <1> errXlatTbl:
   109                              <1> ;Each entry is n bytes long, defined as
   110                              <1> ; Byte 0      : DOS function number for which translation will occur
   111                              <1> ; Byte 1      : Length of the table entry - 2
   112                              <1> ; Bytes n - 3 : Acceptable Error codes
   113                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   114                              <1> ;The table is terminated with a single -1 byte
   115                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   116                              <1> ; only on entry to a disk function
   117 0000008F 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   118 00000093 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   119 00000098 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   120 0000009E 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   121 000000A2 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   122 000000A8 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   123 000000AF 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   124 000000B2 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   125 000000B6 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   126 000000BA 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   127 000000BF 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   128 000000C3 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   129 000000C9 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   130 000000D0 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   131 000000D4 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   132 000000D8 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   133 000000DB 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   134 000000DF 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   135 000000E3 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   136 000000E8 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   137 000000F0 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   138 000000F2 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   139 000000F7 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   140 000000FA 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   141 00000100 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   142 00000104 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   143 00000107 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   144 0000010D 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   145 00000114 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   146 0000011A 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   147 0000011E 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   148 00000122 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   149 00000125 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   150 0000012A FF                  <1>     db -1   ;End Of Table marker
   151                              <1> 
   152                              <1> 
   153                              <1> extErrTbl:
   154                              <1> ;This table contains the default values for how to respond
   155                              <1> ; to particular errors. Fields with -1 need to be filled in before
   156                              <1> ; setting variables using this table.
   157                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   158                              <1> ; Byte 0: Extended Error Code as a byte
   159                              <1> ; Byte 1: Error Class
   160                              <1> ; Byte 2: Error Suggested Action
   161                              <1> ; Byte 3: Error Locus
   162                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   163                              <1> ;
   164                              <1> ;Error 01: Invalid function number
   165 0000012B 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   166                              <1> ;Error 02: File not found
   167 0000012F 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   168                              <1> ;Error 03: Path not found
   169 00000133 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   170                              <1> ;Error 04: Too many open handles, and no handles are left
   171 00000137 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   172                              <1> ;Error 05: Access being denied
   173 0000013B 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   174                              <1> ;Error 06: Invalid File handle being provided
   175 0000013F 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   176                              <1> ;Error 07: MCB chain destroyed
   177 00000143 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   178                              <1> ;Error 08: No Memory remaining
   179 00000147 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   180                              <1> ;Error 09: Invalid MCB block Address
   181 0000014B 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   182                              <1> ;Error 0A: Bad Environment block
   183 0000014F 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   184                              <1> ;Error 0B: Data provided in a bad format
   185 00000153 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   186                              <1> ;Error 0C: Access Code Invalid
   187 00000157 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   188                              <1> ;Error 0D: Error due to Invalid Data provided
   189 0000015B 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   190                              <1> ;Error 0F: Error due to a bad drive letter being provided
   191 0000015F 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   192                              <1> ;Error 10: Error due to attempting to delete the CWD
   193 00000163 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   194                              <1> ;Error 11: Error due to a unknown device being used
   195 00000167 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   196                              <1> ;Error 12: No more file handles available
   197 0000016B 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   198                              <1> ;Error 50: Network request not supported
   199 0000016F 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   200                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   201 00000173 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   202                              <1> ;Error 21: File Locking Violation
   203 00000177 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   204                              <1> ;Error 54: Too many levels of redirection error
   205 0000017B 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   206                              <1> ;Error 56: Bad resource password provided
   207 0000017F 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   208                              <1> ;Error 52: Directory already exists
   209 00000183 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   210                              <1> ;Error 32: Network request not supported by DOS
   211 00000187 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   212                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   213 0000018B 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   214                              <1> ;Error 57: Bad parameter in request
   215 0000018F 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   216                              <1> ;Error 53: Fail was returned from Int 44h
   217 00000193 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   218                              <1> ;Error 24: Sharing Buffer Full
   219 00000197 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   220 0000019B FFFFFFFF            <1>     dd -1   ;End of table signature
   221                              <1> 
   222                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   223 0000019F 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   223 000001A8 090A0B0C0D0E0F      <1>
   224 000001AF 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   224 000001B8 191A1B1C1D1E1F      <1>
   225 000001BF 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   225 000001C8 3D3E3F5B5C5D7C      <1>
   226                              <1> badDirNameCharL equ $ - badDirNameChar
   227                              <1> ;The chars * ? . \ / need to always be handled separately
   228                              <1> 
   229                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   230 000001CF 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   230 000001D8 4545494949          <1>
   231 000001DD 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   231 000001E6 5559999A9B          <1>
   232 000001EB 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   232 000001F4 A5A6A7A8            <1>
   233 000001F8 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   233 00000201 B2B3B4              <1>
   234 00000204 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   234 0000020D BEBFC0              <1>
   235 00000210 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   235 00000219 CACBCC              <1>
   236 0000021C CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   236 00000225 D6D7D8              <1>
   237 00000228 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   237 00000231 E2E3E4              <1>
   238 00000234 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   238 0000023D EEEFF0              <1>
   239 00000240 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   239 00000249 FAFBFC              <1>
   240 0000024C FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   241                              <1> 
   242                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   243 0000024F F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   243 00000258 F0F6F6              <1>
   244 0000025B F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   244 00000264 F6F6F6              <1>
   245 00000267 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   245 00000270 FFF6FF              <1>
   246 00000273 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   246 0000027C FFFEF6              <1>
   247 0000027F FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   247 00000288 FFF4F4              <1>
   248 0000028B F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   248 00000294 FFFFFF              <1>
   249 00000297 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   249 000002A0 FFFFFF              <1>
   250 000002A3 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   250 000002AC F6FFFF              <1>
   251 000002AF FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   251 000002B8 FFFFFF              <1>
   252 000002BB FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   252 000002C4 FFFFFF              <1>
   253 000002C7 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    20                                  %include "./Source/Data/dispTbl.asm"
    21                              <1> ;Kernel Dispatch Function Table
    22                              <1> 
    23                              <1> kDispTbl:
    24 000002CF E143                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    25 000002D1 361E                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    26 000002D3 431E                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    27 000002D5 001F                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    28 000002D7 291F                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    29 000002D9 311F                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    30 000002DB 491F                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    31 000002DD 7C1F                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    32 000002DF A11F                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    33 000002E1 0020                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    34 000002E3 B322                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    35 000002E5 0F20                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    36 000002E7 1B20                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    37 000002E9 B256                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    38 000002EB E456                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    39 000002ED EF27                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    40 000002EF EF27                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    41 000002F1 EF27                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    42 000002F3 EF27                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    43 000002F5 EF27                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    44 000002F7 EF27                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    45 000002F9 EF27                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    46 000002FB EF27                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    47 000002FD EF27                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    48 000002FF 6D59                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    49 00000301 FD56                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    50 00000303 F027                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    51 00000305 0457                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    52 00000307 0657                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    53 00000309 6D59                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    54 0000030B 6D59                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    55 0000030D A457                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    56 0000030F 6D59                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    57 00000311 0328                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    58 00000313 0328                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    59 00000315 0328                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    60 00000317 0328                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    61 00000319 4F57                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    62 0000031B ED42                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    63 0000031D 0328                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    64 0000031F 0328                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    65 00000321 0328                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    66 00000323 2925                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    67 00000325 5025                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    68 00000327 5625                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    69 00000329 7725                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    70 0000032B 8157                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    71 0000032D 1228                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    72 0000032F 8F57                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    73 00000331 B343                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    74 00000333 A657                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    75 00000335 6156                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    76 00000337 DE57                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    77 00000339 EF57                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    78 0000033B 0058                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    79 0000033D 1E4B                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    80 0000033F 474B                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    81 00000341 2216                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    82 00000343 4618                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    83 00000345 0C1A                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    84 00000347 0C29                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    85 00000349 1D29                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    86 0000034B 412A                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    87 0000034D 802A                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    88 0000034F BB2A                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    89 00000351 C72A                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    90 00000353 5C2B                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    91 00000355 CB2B                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    92 00000357 363D                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    93 00000359 B52C                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    94 0000035B F32C                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    95 0000035D DB1A                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    96 0000035F 693D                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    97 00000361 933F                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    98 00000363 9B40                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    99 00000365 3C45                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   100 00000367 E343                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   101 00000369 4458                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   102 0000036B 132D                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   103 0000036D 7C2D                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   104 0000036F 8F56                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   105 00000371 9856                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   106 00000373 5258                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   107 00000375 6358                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   108 00000377 3D59                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   109 00000379 DA42                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   110 0000037B AC2D                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   111 0000037D 382E                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   112 0000037F 3942                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   113 00000381 4459                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   114 00000383 802E                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   115 00000385 482F                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   116 00000387 D02F                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   117 00000389 6E59                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   118 0000038B E159                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   119 0000038D E159                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   120 0000038F 141B                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   121 00000391 6D59                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   122 00000393 A156                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   123 00000395 6D59                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   124 00000397 AA56                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   125 00000399 764B                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   126 0000039B 764B                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   127 0000039D D52F                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   128 0000039F 5C2F                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   129 000003A1 6D59                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   130                              <1> kDispTblL  equ $ - kDispTbl 
   131                              <1> 
   132                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   133 000003A3 3659                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   134 000003A5 A232                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   135 000003A7 2D50                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   136 000003A9 3959                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   137 000003AB 5551                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   138 000003AD 711D                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   139 000003AF 0C4B                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   140 000003B1 D504                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   141 000003B3 533C                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   142 000003B5 0705                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   143 000003B7 9958                <1>     dw noOp - mDispTbl  ;AX=120Ah, Perform Critical error Interrupt...
   144 000003B9 9958                <1>     dw noOp - mDispTbl  ;AX=120Bh, Signal Sharing Violation to User
   145 000003BB 9958                <1>     dw noOp - mDispTbl  ;AX=120Ch, Open devce and set SFT owner
   146 000003BD 0827                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   147 000003BF 1505                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   148 000003C1 2F05                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   149 000003C3 3D05                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   150 000003C5 A651                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   151 000003C7 8851                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   152 000003C9 6151                <1>     dw uppercaseChar - mDispTbl ;AX=1213h
   153 000003CB D652                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   154 000003CD 5005                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   155 000003CF 443B                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   156 000003D1 2351                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   157 000003D3 3B50                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   158 000003D5 C850                <1>     dw getCDS - mDispTbl    ;AX=1219h
   159 000003D7 AF0F                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   160                              <1> mDispTblL   equ     $ - mDispTbl
   161                              <1> 
   162                              <1> serverDispTbl:  ;Server Dispatch functions
   163 000003D9 01                  <1>     db 01h  ;Number of entries needs to be 0Bh, but for now, 01h
   164 000003DA 8558                <1>     dw serverDispatch - serverDispTbl
    21                                  %include "./Source/Debug/debug.asm"
    22                              <1> ;This file contains debugging macros, procs and strings
    23                              <1> ; that we can use to output to COM1 bypassing the operating system.
    24                              <1> ;A serial terminal must be connected for this to work.
    25                              <1> 
    26                              <1> ;Variables and equates
    27                              <1> 
    28 000003DC 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    29                              <1> 
    30 000003E4 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    30 000003ED 39414243444546      <1>
    31                              <1> ;Common procedures
    32                              <1> debMakeDebuggerRespond:
    33 000003F4 488D2D26000000      <1>     lea rbp, .msg
    34 000003FB E8AF000000          <1>     call debPrintNullString
    35 00000400 B900001000          <1>     mov ecx, 100000h
    36                              <1> .waiting:
    37 00000405 FFC9                <1>     dec ecx
    38 00000407 740C                <1>     jz .timeout
    39 00000409 B402                <1>     mov ah, 02h ;Blocking recieve!
    40 0000040B 31D2                <1>     xor edx, edx
    41 0000040D CD34                <1>     int 34h
    42 0000040F F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    43 00000412 75F1                <1>     jnz .waiting
    44 00000414 C3                  <1>     ret
    45                              <1> .timeout:
    46 00000415 488D2D47000000      <1>     lea rbp, .msg2
    47 0000041C E98E000000          <1>     jmp debPrintNullString
    48 00000421 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    48 0000042A 6B6579206174207468- <1>
    48 00000433 65207465726D696E61- <1>
    48 0000043C 6C20746F20636F6E74- <1>
    48 00000445 696E7565206F722077- <1>
    48 0000044E 61697420666F722074- <1>
    48 00000457 696D656F75742E2E2E- <1>
    48 00000460 0A0D00              <1>
    49 00000463 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    49 0000046C 436F6E74696E75696E- <1>
    49 00000475 672E2E2E0A0D00      <1>
    50                              <1> debPrintHexByte:
    51                              <1> ;Print the hex byte in al as a hex value
    52 0000047C 52                  <1>     push rdx
    53 0000047D 53                  <1>     push rbx
    54 0000047E 50                  <1>     push rax
    55                              <1> 
    56 0000047F 88C2                <1>     mov dl, al           ;save byte in dl
    57 00000481 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    58 00000485 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    59 0000048A 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    60 0000048E E80C000000          <1>     call .wrchar
    61 00000493 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    62 00000496 E804000000          <1>     call .wrchar
    63                              <1> 
    64 0000049B 58                  <1>     pop rax
    65 0000049C 5B                  <1>     pop rbx
    66 0000049D 5A                  <1>     pop rdx
    67 0000049E C3                  <1>     ret
    68                              <1> .wrchar:
    69 0000049F 6687DB              <1>     xchg bx, bx
    70 000004A2 488D1D3BFFFFFF      <1>     lea rbx, debascii
    71 000004A9 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    72 000004AA B401                <1>     mov ah, 01h
    73 000004AC CD34                <1>     int 34h  ;print char
    74 000004AE C3                  <1>     ret
    75                              <1> 
    76                              <1> debPrintNullString:
    77                              <1> ;Print a null terminated string pointed to by rbp
    78 000004AF 56                  <1>     push rsi
    79 000004B0 50                  <1>     push rax
    80 000004B1 52                  <1>     push rdx
    81 000004B2 31D2                <1>     xor edx, edx    ;Select COM1
    82 000004B4 4889EE              <1>     mov rsi, rbp
    83                              <1> .getChar:
    84 000004B7 AC                  <1>     lodsb
    85 000004B8 84C0                <1>     test al, al
    86 000004BA 7406                <1>     jz .exit
    87 000004BC B401                <1>     mov ah, 01h
    88 000004BE CD34                <1>     int 34h
    89 000004C0 EBF5                <1>     jmp short .getChar
    90                              <1> .exit:
    91 000004C2 5A                  <1>     pop rdx
    92 000004C3 58                  <1>     pop rax
    93 000004C4 5E                  <1>     pop rsi
    94 000004C5 C3                  <1>     ret
    95                              <1> 
    96                              <1> debPrintDOSStack:
    97                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    98                              <1> ;Shows me which function, and parameters passed and returned
    99 000004C6 488D2DA5010000      <1>     lea rbp, .a1
   100 000004CD E8DDFFFFFF          <1>     call debPrintNullString
   101 000004D2 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   102 000004D9 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   103 000004E0 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   104 000004E3 E802030000          <1>     call overlayQword
   105 000004E8 4881C316000000      <1>     add rbx, 22
   106 000004EF 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   107 000004F3 E8F2020000          <1>     call overlayQword
   108 000004F8 4881C316000000      <1>     add rbx, 22
   109 000004FF 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   110 00000503 E8E2020000          <1>     call overlayQword
   111 00000508 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   112 0000050F 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   113 00000513 E8D2020000          <1>     call overlayQword
   114 00000518 4881C316000000      <1>     add rbx, 22 
   115 0000051F 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   116 00000523 E8C2020000          <1>     call overlayQword
   117 00000528 4881C316000000      <1>     add rbx, 22
   118 0000052F 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   119 00000533 E8B2020000          <1>     call overlayQword
   120 00000538 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   121 0000053F 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   122 00000543 E8A2020000          <1>     call overlayQword
   123 00000548 4881C316000000      <1>     add rbx, 22
   124 0000054F 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
   125 00000556 480560000000        <1>     add rax, callerFrame_size
   126 0000055C E889020000          <1>     call overlayQword
   127 00000561 4881C316000000      <1>     add rbx, 22
   128 00000568 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   129 0000056C E879020000          <1>     call overlayQword
   130 00000571 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   131 00000578 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   132 0000057C E869020000          <1>     call overlayQword
   133 00000581 488D2D06000000      <1>     lea rbp, .a0
   134 00000588 E822FFFFFF          <1>     call debPrintNullString
   135 0000058D C3                  <1>     ret
   136                              <1> 
   137 0000058E 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   137 00000597 303030303030303030- <1>
   137 000005A0 30306820            <1>
   138 000005A4 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   138 000005AD 303030303030303030- <1>
   138 000005B6 30306820            <1>
   139 000005BA 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   139 000005C3 303030303030303030- <1>
   139 000005CC 30306820            <1>
   140 000005D0 0A0D                <1>     db  0Ah,0Dh
   141 000005D2 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   141 000005DB 303030303030303030- <1>
   141 000005E4 30306820            <1>
   142 000005E8 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   142 000005F1 303030303030303030- <1>
   142 000005FA 30306820            <1>
   143 000005FE 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   143 00000607 303030303030303030- <1>
   143 00000610 30306820            <1>
   144 00000614 0A0D                <1>     db 0Ah, 0Dh
   145 00000616 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   145 0000061F 303030303030303030- <1>
   145 00000628 30306820            <1>
   146 0000062C 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   146 00000635 303030303030303030- <1>
   146 0000063E 30306820            <1>
   147 00000642 7269703D3030303030- <1>     db "rip=0000000000000000h"
   147 0000064B 303030303030303030- <1>
   147 00000654 303068              <1>
   148 00000657 0A0D                <1>     db 0Ah, 0Dh
   149 00000659 666C673D3030303030- <1>     db "flg=0000000000000000h "
   149 00000662 303030303030303030- <1>
   149 0000066B 30306820            <1>
   150 0000066F 0A0D00              <1>     db 0Ah,0Dh,0
   151 00000672 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   151 0000067B 206F6E20496E742034- <1>
   151 00000684 316820737461636B0A- <1>
   151 0000068D 0D00                <1>
   152                              <1> 
   153                              <1> debDPBptr:
   154                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   155 0000068F 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   156 00000696 4889E8              <1>     mov rax, rbp
   157 00000699 E84C010000          <1>     call overlayQword
   158 0000069E 488D2D06000000      <1>     lea rbp, .dpb
   159 000006A5 E805FEFFFF          <1>     call debPrintNullString
   160 000006AA C3                  <1>     ret
   161                              <1> .dpb: 
   162 000006AB 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   162 000006B4 203030303030303030- <1>
   162 000006BD 303030303030303068- <1>
   162 000006C6 200A0D00            <1>
   163                              <1> 
   164                              <1> debDPBBPBptr:
   165                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   166                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   167 000006CA 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   168 000006D1 4889E8              <1>     mov rax, rbp
   169 000006D4 E811010000          <1>     call overlayQword
   170 000006D9 4881C321000000      <1>     add rbx, 33
   171 000006E0 4889F0              <1>     mov rax, rsi
   172 000006E3 E802010000          <1>     call overlayQword
   173 000006E8 488D2D06000000      <1>     lea rbp, .dpb
   174 000006EF E8BBFDFFFF          <1>     call debPrintNullString
   175 000006F4 C3                  <1>     ret
   176                              <1> .dpb: 
   177 000006F5 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   177 000006FE 203030303030303030- <1>
   177 00000707 303030303030303068- <1>
   177 00000710 2066726F6D20        <1>
   178 00000716 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   178 0000071F 203030303030303030- <1>
   178 00000728 303030303030303068- <1>
   178 00000731 200A0D00            <1>
   179                              <1> overlayByte:
   180                              <1>     ;Called with number in rax
   181                              <1>     ;pointer to START of 16 byte space for number in rbx
   182 00000735 53                  <1>     push rbx
   183 00000736 51                  <1>     push rcx
   184 00000737 52                  <1>     push rdx
   185 00000738 55                  <1>     push rbp
   186 00000739 4889DD              <1>     mov rbp, rbx
   187 0000073C 4889C2              <1>     mov rdx, rax
   188 0000073F 48FFC5              <1>     inc rbp ;Go to end of number
   189                              <1> 
   190 00000742 488D1D9BFCFFFF      <1>     lea rbx, debascii
   191 00000749 88D0                <1>     mov al, dl  ;Go low nybble first
   192 0000074B 240F                <1>     and al, 0Fh
   193 0000074D D7                  <1>     xlatb
   194 0000074E 884500              <1>     mov byte [rbp], al
   195 00000751 48FFCD              <1>     dec rbp ;Go down one char pos
   196 00000754 88D0                <1>     mov al, dl
   197 00000756 24F0                <1>     and al, 0F0h    ;Hi nybble next
   198 00000758 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   199 0000075B D7                  <1>     xlatb
   200 0000075C 884500              <1>     mov byte [rbp], al  ;Store char
   201                              <1> 
   202 0000075F 5D                  <1>     pop rbp
   203 00000760 5A                  <1>     pop rdx
   204 00000761 59                  <1>     pop rcx
   205 00000762 5B                  <1>     pop rbx
   206 00000763 C3                  <1>     ret
   207                              <1> 
   208                              <1> overlayWord:
   209                              <1>     ;Called with number in rax
   210                              <1>     ;pointer to START of 16 byte space for number in rbx
   211 00000764 53                  <1>     push rbx
   212 00000765 51                  <1>     push rcx
   213 00000766 52                  <1>     push rdx
   214 00000767 55                  <1>     push rbp
   215 00000768 4889DD              <1>     mov rbp, rbx
   216 0000076B 4889C2              <1>     mov rdx, rax
   217 0000076E 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   218 00000775 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   219 0000077A 488D1D63FCFFFF      <1>     lea rbx, debascii
   220                              <1> .ow0:
   221 00000781 88D0                <1>     mov al, dl  ;Go low nybble first
   222 00000783 240F                <1>     and al, 0Fh
   223 00000785 D7                  <1>     xlatb
   224 00000786 884500              <1>     mov byte [rbp], al
   225 00000789 48FFCD              <1>     dec rbp ;Go down one char pos
   226 0000078C 88D0                <1>     mov al, dl
   227 0000078E 24F0                <1>     and al, 0F0h    ;Hi nybble next
   228 00000790 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   229 00000793 D7                  <1>     xlatb
   230 00000794 884500              <1>     mov byte [rbp], al  ;Store char
   231 00000797 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   232 0000079B 48FFCD              <1>     dec rbp
   233 0000079E FFC9                <1>     dec ecx
   234 000007A0 75DF                <1>     jnz .ow0
   235 000007A2 5D                  <1>     pop rbp
   236 000007A3 5A                  <1>     pop rdx
   237 000007A4 59                  <1>     pop rcx
   238 000007A5 5B                  <1>     pop rbx
   239 000007A6 C3                  <1>     ret
   240                              <1> 
   241                              <1> overlayDword:
   242                              <1>     ;Called with number in rax
   243                              <1>     ;pointer to START of 16 byte space for number in rbx
   244 000007A7 53                  <1>     push rbx
   245 000007A8 51                  <1>     push rcx
   246 000007A9 52                  <1>     push rdx
   247 000007AA 55                  <1>     push rbp
   248 000007AB 4889DD              <1>     mov rbp, rbx
   249 000007AE 4889C2              <1>     mov rdx, rax
   250 000007B1 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   251 000007B8 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   252 000007BD 488D1D20FCFFFF      <1>     lea rbx, debascii
   253                              <1> .od0:
   254 000007C4 88D0                <1>     mov al, dl  ;Go low nybble first
   255 000007C6 240F                <1>     and al, 0Fh
   256 000007C8 D7                  <1>     xlatb
   257 000007C9 884500              <1>     mov byte [rbp], al
   258 000007CC 48FFCD              <1>     dec rbp ;Go down one char pos
   259 000007CF 88D0                <1>     mov al, dl
   260 000007D1 24F0                <1>     and al, 0F0h    ;Hi nybble next
   261 000007D3 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   262 000007D6 D7                  <1>     xlatb
   263 000007D7 884500              <1>     mov byte [rbp], al  ;Store char
   264 000007DA 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   265 000007DE 48FFCD              <1>     dec rbp
   266 000007E1 FFC9                <1>     dec ecx
   267 000007E3 75DF                <1>     jnz .od0
   268 000007E5 5D                  <1>     pop rbp
   269 000007E6 5A                  <1>     pop rdx
   270 000007E7 59                  <1>     pop rcx
   271 000007E8 5B                  <1>     pop rbx
   272 000007E9 C3                  <1>     ret
   273                              <1> 
   274                              <1> overlayQword:
   275                              <1>     ;Called with number in rax
   276                              <1>     ;pointer to START of 16 byte space for number in rbx
   277 000007EA 53                  <1>     push rbx
   278 000007EB 51                  <1>     push rcx
   279 000007EC 52                  <1>     push rdx
   280 000007ED 55                  <1>     push rbp
   281 000007EE 4889DD              <1>     mov rbp, rbx
   282 000007F1 4889C2              <1>     mov rdx, rax
   283 000007F4 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   284 000007FB B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   285 00000800 488D1DDDFBFFFF      <1>     lea rbx, debascii
   286                              <1> .oq0:
   287 00000807 88D0                <1>     mov al, dl  ;Go low nybble first
   288 00000809 240F                <1>     and al, 0Fh
   289 0000080B D7                  <1>     xlatb
   290 0000080C 884500              <1>     mov byte [rbp], al
   291 0000080F 48FFCD              <1>     dec rbp ;Go down one char pos
   292 00000812 88D0                <1>     mov al, dl
   293 00000814 24F0                <1>     and al, 0F0h    ;Hi nybble next
   294 00000816 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   295 00000819 D7                  <1>     xlatb
   296 0000081A 884500              <1>     mov byte [rbp], al  ;Store char
   297 0000081D 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   298 00000821 48FFCD              <1>     dec rbp
   299 00000824 FFC9                <1>     dec ecx
   300 00000826 75DF                <1>     jnz .oq0
   301 00000828 5D                  <1>     pop rbp
   302 00000829 5A                  <1>     pop rdx
   303 0000082A 59                  <1>     pop rcx
   304 0000082B 5B                  <1>     pop rbx
   305 0000082C C3                  <1>     ret
   306                              <1> 
   307                              <1> debPrintFunctionName:
   308                              <1> ;Prints the DOS function that has been entered
   309                              <1> ;Entered with ah = Function number
   310 0000082D 88E0                <1>     mov al, ah  ;Get dos function number
   311 0000082F 488D1DAEFBFFFF      <1>     lea rbx, debascii
   312 00000836 488D1535000000      <1>     lea rdx, .number
   313 0000083D 24F0                <1>     and al, 0F0h    ;Get high nybble first
   314 0000083F C0E804              <1>     shr al, 4
   315 00000842 D7                  <1>     xlatb
   316 00000843 8802                <1>     mov byte [rdx], al
   317 00000845 88E0                <1>     mov al, ah
   318 00000847 240F                <1>     and al, 0Fh
   319 00000849 D7                  <1>     xlatb
   320 0000084A 884201              <1>     mov byte [rdx + 1], al
   321 0000084D 488D2D06000000      <1>     lea rbp, .dosString
   322 00000854 E856FCFFFF          <1>     call debPrintNullString
   323 00000859 C3                  <1>     ret
   324 0000085A 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   324 00000863 696F6E20496E742034- <1>
   324 0000086C 31682F41483D        <1>
   325 00000872 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   326                              <1> 
   327                              <1> ;----------------:
   328                              <1> ;!!!! MACROS !!!!:
   329                              <1> ;----------------:
   330                              <1> ;Insert macro when entering a debug block
   331                              <1> %macro debugEnterM 0
   332                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   333                              <1>     mov rsp, debStackTop
   334                              <1> ;Push all registers except rsp on stack
   335                              <1>     push rax
   336                              <1>     push rbx
   337                              <1>     push rcx
   338                              <1>     push rdx
   339                              <1>     push rsi
   340                              <1>     push rdi
   341                              <1>     push rbp
   342                              <1>     push r8
   343                              <1>     push r9
   344                              <1>     push r10
   345                              <1>     push r11
   346                              <1>     push r12
   347                              <1>     push r13
   348                              <1>     push r14
   349                              <1>     push r15
   350                              <1>     pushfq
   351                              <1> %endmacro
   352                              <1> ;Insert macro when exiting a debug block
   353                              <1> %macro debugExitM 0
   354                              <1>     popfq
   355                              <1>     pop r15
   356                              <1>     pop r14
   357                              <1>     pop r13
   358                              <1>     pop r12
   359                              <1>     pop r11
   360                              <1>     pop r10
   361                              <1>     pop r9
   362                              <1>     pop r8
   363                              <1>     pop rbp
   364                              <1>     pop rdi
   365                              <1>     pop rsi
   366                              <1>     pop rdx
   367                              <1>     pop rcx
   368                              <1>     pop rbx
   369                              <1>     pop rax
   370                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   371                              <1> %endmacro
    22                                  %include "./Source/Kernel/FAT/buffun.asm"
    23                              <1> ;This file contains FAT disk buffer related functions that
    24                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    25                              <1> ;----------------------------------------------------
    26                              <1> ;           Externally referenced functions         :
    27                              <1> ;----------------------------------------------------
    28                              <1> 
    29                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    30                              <1> ;Sets the buffer in rdi to the head of the chain
    31                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    32                              <1> ;Output: Buffer header set to the head of the chain
    33 00000878 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    34 0000087F 7428                <1>     je .exit
    35 00000881 56                  <1>     push rsi
    36 00000882 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    37                              <1> .mainlp:
    38 00000889 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    39 0000088C 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    40 0000088E 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    41 00000891 EBF6                <1>     jmp short .mainlp
    42                              <1> .fnd:
    43 00000893 57                  <1>     push rdi
    44 00000894 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    45 00000897 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    46 0000089A 5F                  <1>     pop rdi ;Get original buf back
    47 0000089B 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    48 0000089E 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    49 000008A5 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    50 000008A8 5E                  <1>     pop rsi
    51                              <1> .exit:
    52                              <1>     return
    18                              <2> %%_ret:
    19 000008A9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    53                              <1> 
    54                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    55                              <1> ;1 External reference
    56                              <1> ;Input: rdi = Buffer header to flush and free
    57 000008AA E844000000          <1>     call flushBuffer
    58 000008AF 7206                <1>     jc .exit
    59                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    60 000008B1 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    61                              <1> .exit:
    62                              <1>     return
    18                              <2> %%_ret:
    19 000008B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    65                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    66                              <1> ;Output: rdi = First disk buffer
    67 000008B8 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    68 000008BF 57                  <1>     push rdi
    69                              <1> .lp:
    70 000008C0 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    71 000008C4 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    72 000008C7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    73 000008CE 75F0                <1>     jne .lp
    74 000008D0 5F                  <1>     pop rdi
    75                              <1>     return
    18                              <2> %%_ret:
    19 000008D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    78                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    79                              <1> ; second buffer in the chain in rdi
    80                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    81                              <1> ;Output: rdi = Second buffer in the chain
    82 000008D2 52                  <1>     push rdx
    83 000008D3 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    84 000008D6 E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    85 000008DB 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    86 000008DE 5A                  <1>     pop rdx
    87                              <1>     return
    18                              <2> %%_ret:
    19 000008DF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    90                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    91                              <1> ;Input: rdi = Buffer header to start searching at
    92                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    93                              <1> ;        ZF=ZE => No unreferenced buffer found
    94 000008E0 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    95 000008E4 750C                <1>     jnz .exit
    96 000008E6 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    97 000008E9 4881FFFFFFFFFF      <1>     cmp rdi, -1
    98 000008F0 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    99                              <1> .exit:
   100                              <1>     return
    18                              <2> %%_ret:
    19 000008F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   101                              <1> 
   102                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   103                              <1> ;Flushes the data in a sector buffer to disk!
   104                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   105                              <1> ;Exit:  CF=NC : Success
   106                              <1> ;       CF=CY : Fail, terminate the request
   107                              <1> ;First make request to device driver
   108 000008F3 50                  <1>     push rax
   109 000008F4 53                  <1>     push rbx
   110 000008F5 51                  <1>     push rcx
   111 000008F6 52                  <1>     push rdx
   112 000008F7 56                  <1>     push rsi
   113 000008F8 55                  <1>     push rbp
   114                              <1> ;If the buffer is freed, skip flushing to avoid issues
   115 000008F9 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   116 000008FD 7454                <1>     je .fbFreeExit  ;If it is free exit
   117 000008FF F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   118 00000903 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   119                              <1> .fbRequest0:
   120 00000905 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   121 0000090A F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   122 0000090E 7406                <1>     jz .fbRequest1
   123 00000910 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   124                              <1> .fbRequest1:
   125 00000916 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   126 00000919 B901000000          <1>     mov ecx, 1  ;One sector to copy
   127 0000091E 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   128 00000922 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   129 00000926 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   130 0000092A E825490000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   131 0000092F E8B0470000          <1>     call absDiskDriverCall    ;Make Driver Request
   132 00000934 7525                <1>     jnz .fbFail
   133                              <1> ;Now check if the buffer was a FAT, to write additional copies
   134 00000936 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   135 0000093A 7417                <1>     jz .fbFreeExit  ;If not, exit
   136 0000093C FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   137 0000093F 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   138 00000941 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   139 00000944 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   140 00000948 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   141                              <1> .fbFreeExit1:
   142 0000094D 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   143 00000950 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   144                              <1> .fbFreeExit:
   145 00000953 F8                  <1>     clc
   146                              <1> .fbExitFail:
   147 00000954 5D                  <1>     pop rbp
   148 00000955 5E                  <1>     pop rsi
   149 00000956 5A                  <1>     pop rdx
   150 00000957 59                  <1>     pop rcx
   151 00000958 5B                  <1>     pop rbx
   152 00000959 58                  <1>     pop rax
   153                              <1>     return
    18                              <2> %%_ret:
    19 0000095A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> .fbFail:
   155                              <1> ;Enter here only if the request failed
   156 0000095B FFCE                <1>     dec esi
   157 0000095D 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   158                              <1> ;Request failed thrice, critical error call
   159 0000095F C605(C9C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   160 00000966 E8DB440000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   161 0000096B 3C01                <1>     cmp al, critRetry
   162 0000096D 7496                <1>     je .fbRequest0
   163                              <1>     ;Else we fail (Ignore=Fail here)
   164 0000096F F9                  <1>     stc ;Set error flag to indicate fail
   165 00000970 E9DFFFFFFF          <1>     jmp .fbExitFail
   166                              <1> 
   167                              <1> testDirtyBufferForDrive:    ;External linkage
   168                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   169                              <1> ;Input: al = Drive number (0 based)
   170                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   171                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   172 00000975 53                  <1>     push rbx
   173 00000976 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   174                              <1> .tdbfdCheckBuffer:
   175 0000097D 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   176 00000980 7509                <1>     jne .tdbfdGotoNextBuffer
   177 00000982 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   178 00000986 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   179 00000988 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   180                              <1> .tdbfdExit:
   181 00000989 5B                  <1>     pop rbx
   182                              <1>     return
    18                              <2> %%_ret:
    19 0000098A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   183                              <1> .tdbfdGotoNextBuffer:
   184 0000098B 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   185 0000098E 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   186 00000995 74F2                <1>     je .tdbfdExit
   187 00000997 EBE4                <1>     jmp short .tdbfdCheckBuffer
   188                              <1> 
   189                              <1> freeBuffersForDPB:
   190                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   191                              <1> ; to have a drive number of -1, thus freeing it
   192                              <1> ;Given DPB is in rbp
   193 00000999 53                  <1>     push rbx
   194 0000099A 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   195                              <1> .i0:
   196 000009A1 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   197 000009A5 7506                <1>     jne .i1 ;If no, skip freeing
   198 000009A7 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   199                              <1> .i1:
   200 000009AD 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   201 000009B0 4881FBFFFFFFFF      <1>     cmp rbx, -1
   202 000009B7 75E8                <1>     jne .i0
   203                              <1> .exit:
   204 000009B9 5B                  <1>     pop rbx
   205                              <1>     return
    18                              <2> %%_ret:
    19 000009BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   206                              <1> 
   207                              <1> setBufferDirty:
   208 000009BB 55                  <1>     push rbp
   209 000009BC 9C                  <1>     pushfq
   210 000009BD 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   211 000009C4 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   212 000009C8 9D                  <1>     popfq
   213 000009C9 5D                  <1>     pop rbp
   214                              <1>     return
    18                              <2> %%_ret:
    19 000009CA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215                              <1> 
   216                              <1> 
   217                              <1> getBuffer: ;Internal Linkage ONLY
   218                              <1> ;
   219                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   220                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   221                              <1> ;Flushes if not in disk change mode. 
   222                              <1> ;If in disk change mode, will check to see if the selected buffer 
   223                              <1> ; has data referring a device using the same DPB as we are changing.
   224                              <1> ; If it is, skip flushing, if not, flush first!
   225                              <1> ;
   226                              <1> ;This function will return a pointer to the desired data sector OR 
   227                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   228                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   229                              <1> ;Entry: rax = Sector to read
   230                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   231                              <1> ;       rsi = DPB to use for transaction
   232                              <1> ;Exit:  CF=NC => 
   233                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   234                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   235 000009CB 51                  <1>     push rcx
   236 000009CC 52                  <1>     push rdx
   237 000009CD 56                  <1>     push rsi
   238 000009CE 57                  <1>     push rdi
   239 000009CF 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   240 000009D1 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   241 000009D6 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   242 000009DD 7418                <1>     je .rbReadNewSector
   243 000009DF 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   244                              <1> .rbExit:
   245 000009E6 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer
   246 000009EA F8                  <1>     clc
   247                              <1> .rbExitNoFlag:
   248 000009EB 5F                  <1>     pop rdi
   249 000009EC 5E                  <1>     pop rsi
   250 000009ED 5A                  <1>     pop rdx
   251 000009EE 59                  <1>     pop rcx
   252 000009EF 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   253                              <1>     return
    18                              <2> %%_ret:
    19 000009F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> .rbReadNewSector:
   255 000009F7 E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   256 000009FC 803D(E8D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   257 00000A03 7506                <1>     jne .flush  ;We are not, flush buffer
   258 00000A05 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   259 00000A09 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   260                              <1> .flush:
   261 00000A0B E89AFEFFFF          <1>     call flushAndFreeBuffer
   262 00000A10 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   263                              <1> .skipFlush:
   264                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   265                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   266                              <1>     ; is no longer owned by that File so we mark the owner as none
   267 00000A12 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   268 00000A1A 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   269 00000A1D 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   270 00000A20 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   271 00000A24 80F902              <1>     cmp cl, fatBuffer
   272 00000A27 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   273 00000A29 7503                <1>     jne .rbNonFATbuffer
   274 00000A2B 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   275                              <1> .rbNonFATbuffer:
   276 00000A2E 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   277 00000A31 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   278 00000A34 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   279 00000A37 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   280 00000A3B C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   281 00000A3F E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   282 00000A44 72A5                <1>     jc .rbExitNoFlag
   283 00000A46 EB9E                <1>     jmp short .rbExit
   284                              <1> 
   285                              <1> readSectorBuffer:   ;Internal Linkage
   286                              <1> ;Reads a sector into a built sector buffer
   287                              <1> ;Entry: rdi = Pointer to buffer header
   288                              <1> ;Exit:  CF=NC : Success
   289                              <1> ;       CF=CY : Fail, terminate the request
   290                              <1> ;       rbx pointing to buffer header
   291                              <1> ;First make request to device driver
   292 00000A48 50                  <1>     push rax
   293 00000A49 53                  <1>     push rbx
   294 00000A4A 51                  <1>     push rcx
   295 00000A4B 52                  <1>     push rdx
   296 00000A4C 56                  <1>     push rsi
   297 00000A4D 55                  <1>     push rbp
   298                              <1> .rsRequest0:
   299 00000A4E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   300 00000A53 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   301 00000A57 7406                <1>     jz .rsRequest1
   302 00000A59 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   303                              <1> .rsRequest1:
   304 00000A5F 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   305 00000A62 B901000000          <1>     mov ecx, 1  ;One sector to copy
   306 00000A67 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   307 00000A6B 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   308 00000A6F 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   309 00000A73 E8E7470000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   310 00000A78 E867460000          <1>     call absDiskDriverCall    ;Make Driver Request
   311 00000A7D 7508                <1>     jnz .rsFail
   312                              <1> .rsExit:
   313 00000A7F F8                  <1>     clc
   314                              <1> .rsExitFail:
   315 00000A80 5D                  <1>     pop rbp
   316 00000A81 5E                  <1>     pop rsi
   317 00000A82 5A                  <1>     pop rdx
   318 00000A83 59                  <1>     pop rcx
   319 00000A84 5B                  <1>     pop rbx
   320 00000A85 58                  <1>     pop rax
   321                              <1>     return
    18                              <2> %%_ret:
    19 00000A86 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   322                              <1> .rsFail:
   323                              <1> ;Enter here only if the request failed
   324 00000A87 FFCE                <1>     dec esi
   325 00000A89 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   326                              <1> ;Request failed thrice, critical error call
   327                              <1> ;First free the buffer if we failed to read data into it 
   328 00000A8B 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   329 00000A8F 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   330 00000A95 C605(C9C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   331 00000A9C E8A5430000          <1>     call diskDevErr
   332 00000AA1 3C01                <1>     cmp al, critRetry
   333 00000AA3 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   334 00000AA5 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   335 00000AA9 EBA3                <1>     jmp short .rsRequest0
   336                              <1> .fail:
   337 00000AAB F9                  <1>     stc ;Set error flag to indicate fail
   338 00000AAC E9CFFFFFFF          <1>     jmp .rsExitFail
   339                              <1>     
   340                              <1> findLRUBuffer: ;Internal Linkage
   341                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   342                              <1> ; in rbx and the currBuff variable
   343                              <1> ;Input: Nothing
   344                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   345                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   346 00000AB1 52                  <1>     push rdx
   347 00000AB2 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   348 00000AB9 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   349 00000ABD 7436                <1>     je .flbExit 
   350 00000ABF 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   351 00000AC6 742D                <1>     je .flbExit
   352                              <1> .flbWalk:
   353 00000AC8 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   354 00000ACB 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   355 00000ACE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   356 00000AD2 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   357 00000AD4 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   358 00000ADB 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   359 00000ADD 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   360                              <1> .flbHeadLink:
   361 00000AE4 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   362 00000AEB 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   363 00000AF2 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   364                              <1> .flbExit:
   365 00000AF5 5A                  <1>     pop rdx
   366 00000AF6 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   367                              <1>     return
    18                              <2> %%_ret:
    19 00000AFD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   368                              <1> .flbFreeLink:
   369 00000AFE 51                  <1>     push rcx
   370 00000AFF 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   371 00000B02 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   372 00000B05 59                  <1>     pop rcx
   373 00000B06 EBDC                <1>     jmp short .flbHeadLink
   374                              <1> 
   375                              <1> findSectorInBuffer:     ;Internal linkage
   376                              <1> ;Finds the Buffer for a sector
   377                              <1> ;If the sector is not in a buffer, returns with a -1
   378                              <1> ;Input: rax = Sector number
   379                              <1> ;        dl = Drive number
   380                              <1> ;Output: rdi = Buffer hdr pointer or -1
   381 00000B08 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   382                              <1> .fsiCheckBuffer:
   383 00000B0F 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   384 00000B12 7507                <1>     jne .fsiGotoNextBuffer
   385 00000B14 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   386 00000B18 7501                <1>     jne .fsiGotoNextBuffer
   387                              <1> .fsiExit:
   388                              <1>     return
    18                              <2> %%_ret:
    19 00000B1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   389                              <1> .fsiGotoNextBuffer:
   390 00000B1B 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   391 00000B1E 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   392 00000B25 74F3                <1>     je .fsiExit
   393 00000B27 EBE6                <1>     jmp short .fsiCheckBuffer
   394                              <1> ;-----------------------------------------------------------------------------
   395                              <1> ;SPECIAL BUFFER FUNCTIONS
   396                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   397                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   398                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   399                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   400                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   401                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   402                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   403                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   404                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   405                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   406                              <1> ;-----------------------------------------------------------------------------
   407                              <1> getBufForDataNoFile:
   408                              <1> ;Returns a buffer to use for disk data in rbx
   409                              <1> ;Requires a File Handle.
   410                              <1> ;Input: [workingDPB] = DPB to transact on
   411                              <1> ;       rax = Sector to transfer
   412                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   413 00000B29 51                  <1>     push rcx
   414 00000B2A B108                <1>     mov cl, dataBuffer
   415 00000B2C 56                  <1>     push rsi
   416 00000B2D 57                  <1>     push rdi
   417 00000B2E 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   418 00000B35 E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   419 00000B3A 725F                <1>     jc getBufCommon.exit
   420 00000B3C 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   421 00000B44 EB55                <1>     jmp short getBufCommon.exit
   422                              <1> getBufForDirNoFile:
   423                              <1> ;Returns a buffer to use for disk dir data in rbx
   424                              <1> ;Requires a File Handle.
   425                              <1> ;Input: [workingDPB] = DPB to transact on
   426                              <1> ;       rax = Sector to transfer
   427                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   428 00000B46 51                  <1>     push rcx
   429 00000B47 B104                <1>     mov cl, dirBuffer
   430 00000B49 56                  <1>     push rsi
   431 00000B4A 57                  <1>     push rdi
   432 00000B4B 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   433 00000B52 E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   434 00000B57 7242                <1>     jc getBufCommon.exit
   435 00000B59 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   436 00000B61 EB38                <1>     jmp short getBufCommon.exit
   437                              <1> getBufForFat:
   438                              <1> ;Returns a buffer to use for fat data in rbx
   439                              <1> ;Input: [workingDPB] = DPB to transact on
   440                              <1> ;       rax = Sector to transfer
   441                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   442 00000B63 51                  <1>     push rcx
   443 00000B64 B102                <1>     mov cl, fatBuffer
   444 00000B66 EB03                <1>     jmp short getBufCommon2
   445                              <1> getBufForDOS:
   446                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   447                              <1> ;Input: [workingDPB] = DPB to transact on
   448                              <1> ;       rax = Sector to transfer
   449                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   450 00000B68 51                  <1>     push rcx
   451 00000B69 B101                <1>     mov cl, dosBuffer
   452                              <1> getBufCommon2:
   453 00000B6B 56                  <1>     push rsi
   454 00000B6C 57                  <1>     push rdi    ;Push rdi to preserve it
   455 00000B6D 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   456 00000B74 EB15                <1>     jmp short getBufCommon.makeReq
   457                              <1> getBufForDir:
   458                              <1> ;Returns a buffer to use for disk directory data in rbx
   459                              <1> ;Input: [currentSFT] = File to manipulate
   460                              <1> ;       rax = Sector to transfer
   461                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   462 00000B76 51                  <1>     push rcx
   463 00000B77 B104                <1>     mov cl, dirBuffer
   464 00000B79 EB03                <1>     jmp short getBufCommon
   465                              <1> getBufForData:
   466                              <1> ;Returns a buffer to use for disk data in rbx
   467                              <1> ;Requires a File Handle.
   468                              <1> ;Input: [currentSFT] = File to manipulate
   469                              <1> ;       rax = Sector to transfer
   470                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   471 00000B7B 51                  <1>     push rcx
   472 00000B7C B108                <1>     mov cl, dataBuffer
   473                              <1> getBufCommon:
   474 00000B7E 56                  <1>     push rsi
   475 00000B7F 57                  <1>     push rdi
   476 00000B80 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   477 00000B87 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   478                              <1> .makeReq:
   479 00000B8B E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   480 00000B90 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   481                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   482                              <1>     ; flushed to the file!
   483                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   484                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   485                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   486 00000B92 F6C103              <1>     test cl, dosBuffer | fatBuffer
   487 00000B95 7504                <1>     jnz .exit
   488 00000B97 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   489                              <1> .exit:
   490 00000B9B 5F                  <1>     pop rdi
   491 00000B9C 5E                  <1>     pop rsi
   492 00000B9D 59                  <1>     pop rcx
   493                              <1>     return
    18                              <2> %%_ret:
    19 00000B9E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   494                              <1> 
   495                              <1> flushFile:
   496                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   497                              <1> ; FAT/DOS buffers to flush
   498                              <1> ; We flush and free, and set to head of chain before continuing to search
   499                              <1> ;Input: rdi = is the file (sft) we wish to flush
   500                              <1> ;Output: CF=NC => All ok
   501                              <1> ;        CF=CY => A sector failed, exit. 
   502 00000B9F 57                  <1>     push rdi
   503 00000BA0 56                  <1>     push rsi
   504                              <1>     ;First check if the file has been written to?
   505 00000BA1 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   506 00000BA7 7434                <1>     jz .exitNoFlush ;Exit without flushing
   507 00000BA9 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   508 00000BAC 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   509                              <1> .ffLoop:
   510 00000BB3 4881FFFFFFFFFF      <1>     cmp rdi, -1
   511 00000BBA 741B                <1>     je .exit
   512 00000BBC F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   513 00000BC0 751E                <1>     jnz .found  ;Flush if either bit is set
   514 00000BC2 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   515 00000BCA 7414                <1>     je .found
   516 00000BCC 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   517 00000BD0 740E                <1>     je .found
   518 00000BD2 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   519 00000BD5 EBDC                <1>     jmp short .ffLoop
   520                              <1> .exit:
   521                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   522 00000BD7 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   523                              <1> .exitNoFlush:
   524 00000BDD 5E                  <1>     pop rsi
   525 00000BDE 5F                  <1>     pop rdi
   526                              <1>     return
    18                              <2> %%_ret:
    19 00000BDF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   527                              <1> .found:
   528                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   529                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   530 00000BE0 E8C5FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   531 00000BE5 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   532                              <1>     ;If the sector has been successfully flushed, then it
   533                              <1>     ; is no longer owned by that File so we mark the owner as none
   534 00000BE7 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   535 00000BEF E8DEFCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   536 00000BF4 EBBD                <1>     jmp short .ffLoop
    23                                  %include "./Source/Kernel/FAT/fat.asm"
    24                              <1> ;-----------------------------------:
    25                              <1> ;       File System routines        :
    26                              <1> ;-----------------------------------:
    27                              <1> getFATtype:
    28                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    29                              <1> ;Entry: rbp = DPB to ascertain FAT
    30                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    31 00000BF6 53                  <1>     push rbx
    32 00000BF7 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    33 00000BFA B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    34 00000BFF 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    35 00000C05 730F                <1>     jae .exit
    36 00000C07 FFC9                <1>     dec ecx     ;FAT 12 marker
    37 00000C09 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    38 00000C0F 7205                <1>     jb .exit
    39 00000C11 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    40                              <1> .exit:
    41 00000C16 5B                  <1>     pop rbx
    42                              <1>     return
    18                              <2> %%_ret:
    19 00000C17 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    43                              <1> 
    44                              <1> clust2FATEntry:
    45                              <1> ;Converts a cluster number to a offset in the FAT
    46                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    47                              <1> ;        eax = Cluster number to look for
    48                              <1> ;Exit:   eax = Sector on disk of FAT 
    49                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    50                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    51 00000C18 53                  <1>     push rbx
    52 00000C19 55                  <1>     push rbp
    53 00000C1A 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    54 00000C21 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    55 00000C24 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    56 00000C2A 731E                <1>     jae .fat32
    57 00000C2C 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    58 00000C32 7209                <1>     jb .fat12
    59                              <1> ;FAT16
    60 00000C34 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    61 00000C36 6801000000          <1>     push qword 1
    62 00000C3B EB15                <1>     jmp short .common
    63                              <1> .fat12:
    64 00000C3D 89C1                <1>     mov ecx, eax    ;ecx = eax
    65 00000C3F D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    66 00000C41 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    67 00000C43 6800000000          <1>     push qword 0
    68 00000C48 EB08                <1>     jmp short .common
    69                              <1> .fat32:
    70 00000C4A 6802000000          <1>     push qword 2
    71 00000C4F C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    72                              <1> .common:
    73                              <1> ;eax has the FAToffset
    74 00000C52 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    75 00000C56 31D2                <1>     xor edx, edx    ;edx = 0
    76 00000C58 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    77 00000C5A 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    78 00000C5E 01D8                <1>     add eax, ebx
    79 00000C60 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    80 00000C61 5D                  <1>     pop rbp
    81 00000C62 5B                  <1>     pop rbx
    82                              <1>     return
    18                              <2> %%_ret:
    19 00000C63 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> 
    84                              <1> getStartSectorOfCluster:
    85                              <1> ;Input: eax = Cluster Number
    86                              <1> ;       rbp = dpb pointer
    87                              <1> ;Output: rax = Starting Sector number for cluster
    88                              <1> ;Gives the data sector we are at in the current cluster
    89                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    90 00000C64 51                  <1>     push rcx
    91 00000C65 09C0                <1>     or eax, eax ;Zero upper dword
    92 00000C67 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    93                              <1> .fat32Root:
    94 00000C69 482D02000000        <1>     sub rax, 2
    95 00000C6F 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    96 00000C72 48D3E0              <1>     shl rax, cl
    97 00000C75 31C9                <1>     xor ecx, ecx
    98 00000C77 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    99 00000C7A 4801C8              <1>     add rax, rcx
   100                              <1>     ;rax now has the first sector of the current cluster
   101 00000C7D 59                  <1>     pop rcx
   102                              <1>     return
    18                              <2> %%_ret:
    19 00000C7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   103                              <1> .rootDir:
   104 00000C7F 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   105 00000C82 E86FFFFFFF          <1>     call getFATtype
   106 00000C87 81F902000000        <1>     cmp ecx, 2
   107 00000C8D 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   108                              <1>     ;Else rax has the first sector of the Root Dir
   109 00000C8F 59                  <1>     pop rcx
   110                              <1>     return
    18                              <2> %%_ret:
    19 00000C90 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   111                              <1> 
   112                              <1> 
   113                              <1> getLastClusterInChain:
   114                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   115                              <1> ;Input: eax = Cluster to start searching at
   116                              <1> ;Output: eax = Last cluster in chain
   117                              <1> ;If input eax = 0, output eax = 0
   118 00000C91 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   119                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C93 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   120 00000C95 53                  <1>     push rbx
   121                              <1> .lp:
   122 00000C96 89C3                <1>     mov ebx, eax
   123 00000C98 E8A1010000          <1>     call readFAT
   124 00000C9D 7209                <1>     jc .exit
   125 00000C9F 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   126 00000CA4 75F0                <1>     jne .lp
   127 00000CA6 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   128                              <1> .exit: 
   129 00000CA8 5B                  <1>     pop rbx
   130                              <1>     return
    18                              <2> %%_ret:
    19 00000CA9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> getNumberOfClustersInChain:
   133                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   134                              <1> ;Input: eax = Cluster to start searching at
   135                              <1> ;Output: eax = Number of clusters in the chain
   136                              <1> ;If input eax = 0, output eax = 0
   137 00000CAA 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CAC 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   139 00000CAE 51                  <1>     push rcx
   140 00000CAF 31C9                <1>     xor ecx, ecx
   141                              <1> .lp:
   142 00000CB1 FFC1                <1>     inc ecx
   143 00000CB3 E886010000          <1>     call readFAT
   144 00000CB8 7209                <1>     jc .exit
   145 00000CBA 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   146 00000CBF 75F0                <1>     jne .lp
   147 00000CC1 89C8                <1>     mov eax, ecx    ;Get the count
   148                              <1> .exit: 
   149 00000CC3 59                  <1>     pop rcx
   150                              <1>     return
    18                              <2> %%_ret:
    19 00000CC4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> getClusterInChain:
   153                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   154                              <1> ;If an EOC is encountered, then ecx will not be 
   155                              <1> ;Input: eax = Start Cluster to start searching from
   156                              <1> ;       ecx = Number of clusters to go forwards by;
   157                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   158                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   159                              <1> ;Also usual CF babble.
   160 00000CC5 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   161                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CC7 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   162 00000CC9 53                  <1>     push rbx
   163 00000CCA 67E30F              <1>     jecxz .exit
   164                              <1> .lp:
   165 00000CCD 89C3                <1>     mov ebx, eax
   166 00000CCF E86A010000          <1>     call readFAT
   167 00000CD4 7206                <1>     jc .exit
   168 00000CD6 FFC9                <1>     dec ecx
   169 00000CD8 75F3                <1>     jnz .lp
   170 00000CDA 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   171                              <1> .exit:
   172 00000CDC 5B                  <1>     pop rbx
   173                              <1>     return
    18                              <2> %%_ret:
    19 00000CDD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> 
   175                              <1> startNewChain:
   176                              <1> ;Working dpb must be set
   177                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   178                              <1> ;If CF=CY, hard error
   179 00000CDE 53                  <1>     push rbx
   180 00000CDF 56                  <1>     push rsi
   181 00000CE0 E853000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   182 00000CE5 7215                <1>     jc .exit    ;Disk read error?
   183 00000CE7 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   184 00000CEC 740E                <1>     je .exit
   185 00000CEE BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   186 00000CF3 89C3                <1>     mov ebx, eax
   187 00000CF5 E8E3010000          <1>     call writeFAT   ;Propagate the CF 
   188 00000CFA 89D8                <1>     mov eax, ebx
   189                              <1> .exit:
   190 00000CFC 5E                  <1>     pop rsi
   191 00000CFD 5B                  <1>     pop rbx
   192                              <1>     return
    18                              <2> %%_ret:
    19 00000CFE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> 
   194                              <1> allocateClusters:
   195                              <1> ;Working dpb must be set. 
   196                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   197                              <1> ;       ebx = Cluster to link to the new cluster
   198                              <1> ;Output:    
   199                              <1> ;   CF=NC => Complete.
   200                              <1> ;   If eax = -1, then no more free clusters. 
   201                              <1> ;   CF=CY => Hard error, exit
   202                              <1> ; ecx always has number of allocated clusters
   203 00000CFF 53                  <1>     push rbx
   204 00000D00 56                  <1>     push rsi
   205 00000D01 51                  <1>     push rcx    ;Save tfr count on stack
   206 00000D02 67E32B              <1>     jecxz .exit ;Allocating nothing? Exit
   207                              <1> .allocateLoop:
   208 00000D05 E82E000000          <1>     call findFreeCluster
   209 00000D0A 7224                <1>     jc .exit
   210 00000D0C 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   211 00000D11 741D                <1>     je .exit    ;If the cluster number is -1, return immediately
   212                              <1>     ;eax has first free cluster value to use
   213                              <1>     ;First we link the previous cluster to this cluster
   214 00000D13 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   215 00000D18 E8C0010000          <1>     call writeFAT   ;Allocate this cluster first
   216 00000D1D 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   217                              <1>     ;eax points to this allocated cluster
   218                              <1>     ;ebx points to the previous last cluster
   219 00000D1F 89C6                <1>     mov esi, eax    ;New cluster as "value"
   220 00000D21 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   221 00000D23 E8B5010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   222 00000D28 7206                <1>     jc .exit
   223 00000D2A 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   224 00000D2C FFC9                <1>     dec ecx ;One less cluster allocated
   225 00000D2E 75D5                <1>     jnz .allocateLoop
   226                              <1> .exit:
   227 00000D30 5E                  <1>     pop rsi ;Pop the tfr count into esi
   228 00000D31 F7D9                <1>     neg ecx
   229 00000D33 01F1                <1>     add ecx, esi
   230 00000D35 5E                  <1>     pop rsi
   231 00000D36 5B                  <1>     pop rbx
   232                              <1>     return
    18                              <2> %%_ret:
    19 00000D37 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> findFreeCluster:
   235                              <1> ;Walks the FAT to find a free cluster and returns the 
   236                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   237                              <1> ;Works on the workingDPB
   238                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   239 00000D38 53                  <1>     push rbx
   240 00000D39 52                  <1>     push rdx
   241 00000D3A 55                  <1>     push rbp
   242 00000D3B 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   243                              <1>     ;Use readFAT
   244                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   245                              <1>     ;If readFAT returns 0 then its a free cluster
   246 00000D42 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   247                              <1> .fatLoop:
   248 00000D47 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   249 00000D49 E8F0000000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   250 00000D4E 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   251 00000D50 85C0                <1>     test eax, eax   ;Is this cluster free?
   252 00000D52 7409                <1>     jz .exit    ;If yes, exit
   253 00000D54 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   254 00000D58 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   255 00000D5B 76EA                <1>     jbe .fatLoop
   256                              <1> .exit:
   257 00000D5D 89D8                <1>     mov eax, ebx
   258 00000D5F F8                  <1>     clc
   259                              <1> .exitFail:      ;Keep carry flag
   260 00000D60 5D                  <1>     pop rbp
   261 00000D61 5A                  <1>     pop rdx
   262 00000D62 5B                  <1>     pop rbx
   263                              <1>     return
    18                              <2> %%_ret:
    19 00000D63 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   264                              <1> 
   265                              <1> findFreeClusterData:
   266                              <1> ;Walks the FAT to find a free cluster and returns the 
   267                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   268                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   269                              <1> ;Works on the workingDPB
   270                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   271 00000D64 53                  <1>     push rbx
   272 00000D65 52                  <1>     push rdx
   273 00000D66 55                  <1>     push rbp
   274 00000D67 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   275 00000D6E 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   276                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   277 00000D72 31D2                <1>     xor edx, edx
   278 00000D74 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   279 00000D77 FFCA                <1>     dec edx
   280 00000D79 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   281                              <1>     ;Use readFAT
   282                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   283                              <1>     ;If readFAT returns 0 then its a free cluster
   284 00000D7C B802000000          <1>     mov eax, 2  ;Start with cluster 2
   285 00000D81 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   286                              <1> .fatLoop:
   287 00000D84 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   288 00000D86 E8B3000000          <1>     call readFAT
   289 00000D8B 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   290 00000D8D 85C0                <1>     test eax, eax   ;Is this cluster free?
   291 00000D8F 750C                <1>     jne .fatProceed
   292 00000D91 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   293 00000D94 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   294 00000D9B 7410                <1>     je .fatFirst
   295                              <1> .fatProceed:
   296 00000D9D 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   297 00000DA1 39D0                <1>     cmp eax, edx
   298 00000DA3 76DF                <1>     jbe .fatLoop
   299                              <1> .exit:
   300 00000DA5 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   301 00000DA8 F8                  <1>     clc
   302                              <1> .exitFail:      ;Keep carry flag
   303 00000DA9 5D                  <1>     pop rbp
   304 00000DAA 5A                  <1>     pop rdx
   305 00000DAB 5B                  <1>     pop rbx
   306                              <1>     return
    18                              <2> %%_ret:
    19 00000DAC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   307                              <1> .fatFirst:
   308 00000DAD 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   309 00000DB0 EBEB                <1>     jmp short .fatProceed
   310                              <1> 
   311                              <1> getNextSectorOfFile:
   312                              <1> ;This function will read the next sector for a file into a buffer.
   313                              <1> ;If the next sector to be read lives in the next cluster, it will update
   314                              <1> ; the vars appropriately
   315                              <1> ;
   316                              <1> ;Input: rbp = dpb pointer
   317                              <1> ;Output:
   318                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   319                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   320                              <1> ;       CF=CY => Critical error occurred and was FAILed
   321                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   322                              <1> ; next cluster and read first sector 
   323                              <1>     ;Check if we need to go to next cluster
   324 00000DB2 8A05(AEC60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   325 00000DB8 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   326 00000DBB 7416                <1>     je .gotoNextCluster
   327                              <1>     ;Goto next sector in same cluster
   328 00000DBD FE05(AEC60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   329 00000DC3 48FF05(AFC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   330 00000DCA 488B05(AFC60300)    <1>     mov rax, qword [currSectD]
   331                              <1> .exitOK:
   332 00000DD1 F8                  <1>     clc
   333                              <1> .exitFail:
   334                              <1>     return
    18                              <2> %%_ret:
    19 00000DD2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   335                              <1> .gotoNextCluster:
   336 00000DD3 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   337 00000DD9 E860000000          <1>     call readFAT
   338 00000DDE 72F2                <1>     jc .exitFail
   339                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   340 00000DE0 3DFFFFFFFF          <1>     cmp eax, -1
   341 00000DE5 74EA                <1>     je .exitOK
   342                              <1> ;Update the new cluster and sector information
   343 00000DE7 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   344 00000DED FF05(A2C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   345 00000DF3 E86CFEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   346 00000DF8 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save it
   347 00000DFF C605(AEC60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   348 00000E06 EBC9                <1>     jmp short .exitOK
   349                              <1> 
   350                              <1> unlinkFAT:
   351                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   352                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   353                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   354                              <1> ; cluster must be set to EOC before this proc is called.
   355                              <1> ;Stops at first invalid cluster number.
   356                              <1> ;
   357                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   358                              <1> ;       rbp = Current DPB to use for disk
   359                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   360                              <1> 
   361 00000E08 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   362 00000E09 56                  <1>     push rsi
   363 00000E0A E80A000000          <1>     call truncateFAT    ;Preserved eax
   364 00000E0F 31F6                <1>     xor esi, esi  ;Free first cluster too
   365 00000E11 E8C7000000          <1>     call writeFAT
   366 00000E16 5E                  <1>     pop rsi
   367 00000E17 58                  <1>     pop rax
   368                              <1>     return
    18                              <2> %%_ret:
    19 00000E18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   369                              <1> 
   370                              <1> truncateFAT:
   371                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   372                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   373                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   374                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   375                              <1> ;Stops at first invalid cluster number.
   376                              <1> ;
   377                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   378                              <1> ;       rbp = Current DPB to use for disk
   379                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   380 00000E19 50                  <1>     push rax
   381 00000E1A 53                  <1>     push rbx
   382 00000E1B 56                  <1>     push rsi
   383 00000E1C 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   384                              <1> .lp:
   385 00000E1E E81B000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   386 00000E23 7215                <1>     jc .exit    ;Error exit
   387 00000E25 3DFFFFFFFF          <1>     cmp eax, -1 ;End of chain?
   388 00000E2A 740E                <1>     je .exit
   389 00000E2C 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   390 00000E2D 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   391 00000E2F E8A9000000          <1>     call writeFAT
   392 00000E34 7204                <1>     jc .exit    ;Error exit
   393 00000E36 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   394 00000E38 EBE4                <1>     jmp short .lp
   395                              <1> .exit:
   396 00000E3A 5E                  <1>     pop rsi
   397 00000E3B 5B                  <1>     pop rbx
   398 00000E3C 58                  <1>     pop rax
   399                              <1>     return
    18                              <2> %%_ret:
    19 00000E3D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   400                              <1> readFAT:
   401                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   402                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   403                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   404                              <1> ;       rbp = DPB
   405                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   406                              <1> ;If carry set, getBuffer failed!
   407 00000E3E 53                  <1>     push rbx
   408 00000E3F 51                  <1>     push rcx
   409 00000E40 52                  <1>     push rdx
   410 00000E41 57                  <1>     push rdi
   411 00000E42 55                  <1>     push rbp
   412 00000E43 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   413 00000E45 E8CEFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   414                              <1>     ;and FAT type in ecx
   415 00000E4A E814FDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   416 00000E4F 7237                <1>     jc .exitFail
   417                              <1>     ;Check if FAT 12, 16, 32
   418 00000E51 85C9                <1>     test ecx, ecx
   419 00000E53 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   420 00000E55 F7C101000000        <1>     test ecx, 1
   421 00000E5B 7413                <1>     jz .goToNextClusterFat32
   422                              <1>     ;Here we handle FAT16
   423 00000E5D 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   424 00000E62 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   425 00000E67 721E                <1>     jb .exit
   426 00000E69 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   427 00000E6E EB17                <1>     jmp short .exit
   428                              <1> .goToNextClusterFat32:
   429 00000E70 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   430 00000E74 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   431 00000E79 7207                <1>     jb .validCluster32   
   432 00000E7B B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   433 00000E80 EB05                <1>     jmp short .exit
   434                              <1> .validCluster32:
   435 00000E82 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   436                              <1> .exit:
   437 00000E87 F8                  <1>     clc
   438                              <1> .exitFail:
   439 00000E88 5D                  <1>     pop rbp
   440 00000E89 5F                  <1>     pop rdi
   441 00000E8A 5A                  <1>     pop rdx
   442 00000E8B 59                  <1>     pop rcx
   443 00000E8C 5B                  <1>     pop rbx
   444                              <1>     return
    18                              <2> %%_ret:
    19 00000E8D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   445                              <1> .gotoNextClusterFat12:
   446                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   447                              <1> ;eax has the sector number of the FAT
   448                              <1> ;edx has byte offset into the sector
   449                              <1> ;edi has current cluster number
   450                              <1> ;rbx has ptr to buffer header
   451 00000E8E F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   452 00000E94 742C                <1>     jz .gotoNextClusterFat12Even
   453                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   454 00000E96 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   455 00000E9A 29D1                <1>     sub ecx, edx
   456 00000E9C FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   457 00000E9E 7518                <1>     jnz .gotoNextClusterFat12NoCross
   458                              <1>     ;Boundary cross, build entry properly
   459 00000EA0 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   460 00000EA5 FFC0                <1>     inc eax ;Get next FAT sector
   461 00000EA7 53                  <1>     push rbx
   462 00000EA8 E8B6FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   463 00000EAD 72D9                <1>     jc .exitFail
   464 00000EAF 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   465 00000EB0 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   466 00000EB3 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   467 00000EB6 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   468                              <1> .gotoNextClusterFat12NoCross:
   469 00000EB8 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   470 00000EBD C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   471 00000EC0 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   472                              <1> .gotoNextClusterFat12Even:
   473                              <1>     ;Here the cluster is even and can't cross a sector boundary
   474 00000EC2 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   475 00000EC7 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   476                              <1> .checkIfLastFAT12Cluster:
   477 00000ECC 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   478 00000ED1 72B4                <1>     jb .exit         ;If so, exit with it in eax
   479 00000ED3 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   480 00000ED8 E9AAFFFFFF          <1>     jmp .exit
   481                              <1> 
   482                              <1> writeFAT:
   483                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   484                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   485                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   486                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   487                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   488 00000EDD 53                  <1>     push rbx
   489 00000EDE 51                  <1>     push rcx
   490 00000EDF 52                  <1>     push rdx
   491 00000EE0 56                  <1>     push rsi
   492 00000EE1 57                  <1>     push rdi
   493 00000EE2 55                  <1>     push rbp
   494 00000EE3 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   495 00000EE5 E82EFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   496                              <1>     ;and FAT type in ecx
   497 00000EEA E874FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   498 00000EEF 7223                <1>     jc .exitFail
   499                              <1>     ;Check if FAT 12, 16, 32
   500 00000EF1 85C9                <1>     test ecx, ecx
   501 00000EF3 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   502 00000EF5 F7C101000000        <1>     test ecx, 1
   503 00000EFB 7407                <1>     jz .goToNextClusterFat32
   504                              <1>     ;Here we handle FAT16
   505 00000EFD 66897C1330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], di ;Store the value
   506 00000F02 EB0A                <1>     jmp short .exit
   507                              <1> .goToNextClusterFat32:
   508 00000F04 81E7FFFFFF0F        <1>     and edi, 0FFFFFFFh  ;Zero upper nybble
   509 00000F0A 897C1330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], edi
   510                              <1> .exit:
   511 00000F0E E8A8FAFFFF          <1>     call setBufferDirty
   512 00000F13 F8                  <1>     clc
   513                              <1> .exitFail:
   514 00000F14 5D                  <1>     pop rbp
   515 00000F15 5F                  <1>     pop rdi
   516 00000F16 5E                  <1>     pop rsi
   517 00000F17 5A                  <1>     pop rdx
   518 00000F18 59                  <1>     pop rcx
   519 00000F19 5B                  <1>     pop rbx
   520                              <1>     return
    18                              <2> %%_ret:
    19 00000F1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   521                              <1> .gotoNextClusterFat12:
   522                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   523                              <1> ;eax has the sector number of the FAT
   524                              <1> ;edx has byte offset into the sector
   525                              <1> ;edi has current cluster number
   526                              <1> ;rbx has ptr to buffer header
   527 00000F1B 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   528 00000F21 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   529 00000F27 7445                <1>     jz .gotoNextClusterFat12Even
   530                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   531 00000F29 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   532 00000F2D 29D1                <1>     sub ecx, edx
   533 00000F2F FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   534 00000F31 752C                <1>     jnz .gotoNextClusterFat12NoCross
   535                              <1>     ;Boundary cross, build entry properly
   536                              <1>     ;Replace the high nybble of the low byte 
   537 00000F33 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   538 00000F38 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   539 00000F3E C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   540 00000F41 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   541 00000F43 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   542 00000F46 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   543 00000F4A E86CFAFFFF          <1>     call setBufferDirty
   544 00000F4F FFC0                <1>     inc eax ;Get next FAT sector
   545 00000F51 E80DFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   546 00000F56 72BC                <1>     jc .exitFail
   547 00000F58 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   548 00000F5A 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   549 00000F5D EBAF                <1>     jmp short .exit
   550                              <1> .gotoNextClusterFat12NoCross:
   551 00000F5F 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   552 00000F64 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   553 00000F69 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   554 00000F6C EB0A                <1>     jmp short .fat12common
   555                              <1> .gotoNextClusterFat12Even:
   556                              <1>     ;Here the cluster is even and can't cross a sector boundary
   557 00000F6E 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   558 00000F73 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   559                              <1> .fat12common:
   560 00000F78 09F0                <1>     or eax, esi     ;Add the new entry bits
   561 00000F7A 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   562 00000F7F E98AFFFFFF          <1>     jmp .exit
    24                                  %include "./Source/Kernel/FAT/findfile.asm"
    25                              <1> ;Generic Find First and Find Next functions here
    26                              <1> findNextMain:
    27 00000F84 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    28 00000F8B F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    29 00000F8E 7408                <1>     jz .notNet
    30 00000F90 B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    31 00000F95 CD4F                <1>     int 4Fh
    32                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000F97 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                              <1> .notNet:
    34 00000F98 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    35 00000F9A FEC0                <1>     inc al  ;Convert into 1 based number
    36 00000F9C E891480000          <1>     call dosCrit1Enter
    37 00000FA1 E85C440000          <1>     call setDrive   ;Set CDS and current drive vars
    38 00000FA6 720C                <1>     jc .critError   ;Return error if this fails
    39 00000FA8 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
    40 00000FAF E855410000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    41                              <1> .critError:
    42 00000FB4 E883480000          <1>     call dosCrit1Exit
    43                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000FB9 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    44 00000FBB E801000000          <1>     call searchMoreDir
    45                              <1>     return
    18                              <2> %%_ret:
    19 00000FC0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> searchMoreDir:
    47                              <1> ;The three directory variables are set up from the ffblock. 
    48                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    49                              <1> ;Current DTA is also used to contain the ff block address
    50                              <1> ;All registers can be trashed
    51 00000FC1 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    52                              <1>     ;First setup dirClustA and dirSect vars
    53 00000FC8 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
    54 00000FCF 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    55 00000FD2 8805(56C60300)      <1>     mov byte [searchAttr], al   ;And save it
    56 00000FD8 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    57 00000FDB 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    58 00000FE1 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
    59                              <1>     ;Get number of 32 byte entries in a sector
    60 00000FE7 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    61                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    62 00000FEA C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    63                              <1>     ;Now get bytes per cluster
    64 00000FED 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    65 00000FEF 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    66 00000FF3 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    67 00000FF7 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    68 00000FF9 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    69 00000FFB 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    70 00000FFD 31D2                <1>     xor edx, edx
    71 00000FFF F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    72                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    73                              <1>     ;edx has byte offset into cluster (or Root dir)
    74 00001001 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    75                              <1>     ;Now compute sector offset into cluster
    76 00001003 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    77 00001007 89D0                <1>     mov eax, edx    ;Move offset into cluster
    78 00001009 31D2                <1>     xor edx, edx
    79 0000100B F7F1                <1>     div ecx 
    80                              <1>     ;eax now has sector offset into cluster (or root dir)
    81                              <1>     ;edx has byte offset into sector 
    82 0000100D 668905(DAC60300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    83 00001014 C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    84 00001017 8915(DCC60300)      <1>     mov dword [dirEntry], edx
    85 0000101D 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    86 00001023 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    87 00001025 7461                <1>     jz .oldFat
    88                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    89 00001027 89D9                <1>     mov ecx, ebx
    90 00001029 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    91                              <1> .fatlp:
    92 0000102C E80DFEFFFF          <1>     call readFAT
    93 00001031 3DFFFFFFFF          <1>     cmp eax, -1
    94 00001036 7464                <1>     je .errorExit
    95 00001038 FFC9                <1>     dec ecx
    96 0000103A 75F0                <1>     jnz .fatlp
    97 0000103C 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    98                              <1> .skipFatWalk:
    99 00001042 488D0597000000      <1>     lea rax, searchDir.nextEp
   100 00001049 50                  <1>     push rax    ;Push the return address onto stack
   101 0000104A 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]
   102 00001050 E80FFCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   103 00001055 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   104 0000105C 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   105                              <1> .common:
   106 0000105F E804FBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   107 00001064 0F8211010000        <1>     jc searchDir.hardError
   108 0000106A E80F010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   109 0000106F 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   110 00001075 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   111 00001077 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   112 0000107A 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   113                              <1>     ;We continue AS IF this entry was bad
   114                              <1>     ;Now setup al as upon normal entry 
   115 0000107D 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   116 00001083 E95F010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   117                              <1>     ;The return address on the stack will return to the ep's pushed
   118                              <1> .oldFat:
   119                              <1> ;Old FAT 12/16 root dirs fall thru here only
   120 00001088 488D05D0000000      <1>     lea rax, searchDir.oldNextEP
   121 0000108F 50                  <1>     push rax    ;Push return address onto the stack
   122 00001090 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   123 00001097 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   124 0000109A EBC3                <1>     jmp short .common
   125                              <1> .errorExit:
   126 0000109C F9                  <1>     stc
   127                              <1>     return
    18                              <2> %%_ret:
    19 0000109D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   128                              <1> searchDir:
   129                              <1> ;Called in a level 1 critical section. 
   130                              <1> ;The directory variables are set and fcbName has the pattern to match
   131                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   132                              <1> ;All registers can be trashed
   133                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   134                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   135                              <1> 
   136                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   137                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   138 0000109E 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   139 000010A5 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   140 000010AB 7408                <1>     jz .notNet
   141 000010AD B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   142 000010B2 CD4F                <1>     int 4fh
   143                              <1>     return
    18                              <2> %%_ret:
    19 000010B4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .notNet:
   145 000010B5 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   146 000010BC 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   147 000010C2 85C0                <1>     test eax, eax
   148 000010C4 747E                <1>     jz .oldRoot
   149 000010C6 E899FBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   150                              <1> .sectorLoop:
   151 000010CB E898FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   152 000010D0 0F82A5000000        <1>     jc .hardError
   153 000010D6 E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   154                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   155 000010DB E8B2000000          <1>     call findInBuffer
   156                              <1> .nextEp:
   157                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000010E0 73D2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   158 000010E2 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   159                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   160                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   161                              <1>     ;IF however, the next cluster is -1, then we return fail
   162 000010E8 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   163 000010EE 8905(A6C60300)      <1>     mov dword [currClustD], eax
   164 000010F4 668B05(DAC60300)    <1>     mov ax, word [dirSect]
   165 000010FB 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   166 00001101 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   167 00001105 488905(AFC60300)    <1>     mov qword [currSectD], rax  
   168 0000110C C705(A2C60300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   168 00001114 0000                <1>
   169 00001116 E897FCFFFF          <1>     call getNextSectorOfFile
   170 0000111B 725E                <1>     jc .hardError
   171 0000111D 3DFFFFFFFF          <1>     cmp eax, -1
   172 00001122 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   173 00001124 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector
   174 0000112B 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   175 00001131 3B05(A6C60300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   176 00001137 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   177 00001139 66C705(DAC60300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   177 00001141 00                  <1>
   178 00001142 EB87                <1>     jmp short .sectorLoop 
   179                              <1> 
   180                              <1> .oldRoot:
   181                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   182                              <1> ; one large contiguous cluster.
   183                              <1> ;   ecx = Number of entries per sector
   184                              <1> .oldSectorLp:
   185 00001144 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   186 0000114B 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   187 0000114E E815FAFFFF          <1>     call getBufForDOS
   188 00001153 7226                <1>     jc .hardError
   189 00001155 E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   190 0000115A E833000000          <1>     call findInBuffer
   191                              <1> .oldNextEP:
   192                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 0000115F 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001161 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   193 00001162 7413                <1>     jz .fnfError
   194 00001164 66FF05(DAC60300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   195 0000116B 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   196 0000116E 663905(DCC60300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   197 00001175 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   198                              <1> .fnfError:
   199 00001177 B012                <1>     mov al, errNoFil
   200 00001179 F9                  <1>     stc
   201                              <1>     return
    18                              <2> %%_ret:
    19 0000117A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   202                              <1> .hardError:
   203 0000117B B0FF                <1>     mov al, -1
   204                              <1>     return
    18                              <2> %%_ret:
    19 0000117D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   205                              <1> adjustDosDirBuffer:
   206 0000117E 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   207 00001182 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   208 00001186 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   209 0000118A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   210 0000118E C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   211                              <1>     return
    18                              <2> %%_ret:
    19 00001191 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   212                              <1> 
   213                              <1> findInBuffer:
   214                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   215                              <1> ;       rsi = Sector buffer data area
   216                              <1> ;Output: CF=CY => No entries found
   217                              <1> ;        ZF=NE => Keep searching in subsequent directories
   218                              <1> ;        ZF=ZE => End of directory reached early, stop
   219                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   220                              <1> ;        rsi = Points to start of the disk buffer directory entry
   221 00001192 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   222 00001198 E89D000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   223                              <1> .searchMainLp:
   224                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   225 0000119D 8A25(62C60300)      <1>     mov ah, byte [delChar]
   226 000011A3 803E00              <1>     cmp byte [rsi], 00h
   227 000011A6 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   228 000011A8 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   229 000011AA 750F                <1>     jne .notLookingForEmpty
   230                              <1> .emptySlot:
   231                              <1> ;Here we check if we are looking for an empty directory entry or
   232                              <1> ; we have reached the end of the file (if the first byte is 00h)
   233                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   234 000011AC 3A25(DBC50300)      <1>     cmp ah, byte [fcbName] 
   235                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000011B2 74DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   236                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   237 000011B4 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   238 000011B7 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   239 000011B9 F9                  <1>     stc
   240                              <1>     return
    18                              <2> %%_ret:
    19 000011BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> .notLookingForEmpty:
   242 000011BB 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   243 000011BE 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   244 000011C1 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   245 000011C8 7434                <1>     je .exclusiveDir
   246 000011CA 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   247 000011CC 7437                <1>     je .volFile ;If so, go here
   248 000011CE 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   249 000011D1 7414                <1>     je .nextEntry
   250 000011D3 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   251 000011D5 7710                <1>     ja .nextEntry
   252                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   253                              <1> .scanName:
   254 000011D7 56                  <1>     push rsi
   255 000011D8 488D3D(DBC50300)    <1>     lea rdi, fcbName ;Goto name template to search for
   256 000011DF E83E000000          <1>     call .nameCompare
   257 000011E4 5E                  <1>     pop rsi
   258 000011E5 7424                <1>     je .searchEntryFound
   259                              <1> .nextEntry:
   260                              <1> ;Go to next entry
   261 000011E7 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   262 000011EE FF05(DCC60300)      <1>     inc dword [dirEntry] ;And denote that in variable
   263 000011F4 FFC9                <1>     dec ecx
   264 000011F6 75A5                <1>     jnz .searchMainLp
   265                              <1> .badExit:
   266 000011F8 31C0                <1>     xor eax, eax
   267 000011FA FFC0                <1>     inc eax ;Clear ZF
   268 000011FC F9                  <1>     stc
   269                              <1>     return
    18                              <2> %%_ret:
    19 000011FD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> .exclusiveDir:
   271                              <1> ;Used when going down a path, dir bit simply need be set
   272 000011FE F6C410              <1>     test ah, dirDirectory
   273 00001201 75D4                <1>     jnz .scanName
   274 00001203 EBE2                <1>     jmp short .nextEntry
   275                              <1> 
   276                              <1> .volFile:
   277 00001205 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   278 00001207 74CE                <1>     je .scanName       ;If so, scan the name agrees
   279 00001209 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   280                              <1> 
   281                              <1> .searchEntryFound:
   282                              <1> ;Here a good entry was found!
   283 0000120B 56                  <1>     push rsi
   284 0000120C 57                  <1>     push rdi
   285 0000120D 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   286 0000120F 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   287 00001216 B904000000          <1>     mov ecx, 32/8
   288 0000121B F348A5              <1>     rep movsq   ;Copy the directory to SDA
   289 0000121E 5F                  <1>     pop rdi
   290 0000121F 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   291 00001220 F8                  <1>     clc
   292                              <1>     return
    18                              <2> %%_ret:
    19 00001221 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> 
   294                              <1> .nameCompare:
   295                              <1> ;Input: rsi = source string
   296                              <1> ;       rdi = string template to compare against
   297                              <1> ;Output: ZF=ZE => Strings are ok
   298                              <1> ;        ZF=NZ => Strings not ok
   299                              <1> ;Accepts wildcards. Trashes al
   300 00001222 51                  <1>     push rcx
   301 00001223 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   302                              <1> .ncLp:
   303 00001225 81F90B000000        <1>     cmp ecx, 11
   304 0000122B 740B                <1>     je .ncExit
   305 0000122D FFC1                <1>     inc ecx
   306 0000122F A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   307 00001230 74F3                <1>     je .ncLp    ;If equal, keep going
   308 00001232 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   309 00001236 74ED                <1>     je .ncLp
   310                              <1> .ncExit:
   311 00001238 59                  <1>     pop rcx
   312                              <1>     return
    18                              <2> %%_ret:
    19 00001239 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   313                              <1> 
   314                              <1> adjustSearchAttr:
   315                              <1> ;Converts the byte to a system only if the bit is set
   316                              <1> ;Input: eax = User selected search mask
   317                              <1> ;Output: eax = Modified search mask
   318 0000123A 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   319 0000123F A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   320                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001244 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   321 00001246 B808000000          <1>     mov eax, dirVolumeID
   322                              <1>     return
    18                              <2> %%_ret:
    19 0000124B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> 
   324                              <1> asciiToFCB:
   325                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   326                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   327                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   328                              <1> ;Name is space padded.
   329                              <1> ;Input: rsi = ASCII string buffer
   330                              <1> ;       rdi = FCB name buffer
   331                              <1> ;Output: al = Char that terminated the source string 
   332 0000124C 53                  <1>     push rbx    
   333 0000124D 57                  <1>     push rdi
   334 0000124E B90B000000          <1>     mov ecx, 11
   335 00001253 B020                <1>     mov al, " "
   336 00001255 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   337 00001257 5F                  <1>     pop rdi
   338 00001258 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   339                              <1> .processName:
   340 0000125B AC                  <1>     lodsb   ;Get the char in al
   341 0000125C E8A3420000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   342 00001261 84C0                <1>     test al, al
   343 00001263 742D                <1>     jz .exit
   344                              <1>     ;Test if the char is valid
   345 00001265 E8D2430000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   346 0000126A 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   347 0000126C 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   348 0000126E 7407                <1>     je .extSpace
   349 00001270 3C2E                <1>     cmp al, "."
   350 00001272 740C                <1>     je .ext
   351 00001274 AA                  <1>     stosb   ;Store the char
   352 00001275 EBE4                <1>     jmp short .processName
   353                              <1> .extSpace:
   354                              <1> ;Now we scan for a period in the name
   355 00001277 AC                  <1>     lodsb   ;Get a char and increase rsi
   356 00001278 84C0                <1>     test al, al
   357 0000127A 7416                <1>     jz .exit
   358 0000127C 3C2E                <1>     cmp al, "."     ;If al is not a period...
   359 0000127E 75F7                <1>     jne .extSpace   ; keep searching
   360                              <1> .ext:
   361 00001280 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   362                              <1> .processExt:
   363 00001284 AC                  <1>     lodsb
   364 00001285 84C0                <1>     test al, al
   365 00001287 7409                <1>     jz .exit
   366 00001289 3C20                <1>     cmp al, " "
   367 0000128B 7405                <1>     je .exit
   368 0000128D AA                  <1>     stosb
   369 0000128E EBF4                <1>     jmp short .processExt
   370                              <1> .exitBadChar:
   371 00001290 30C0                <1>     xor al, al  ;Return a null terminator
   372                              <1> .exit:
   373 00001292 5B                  <1>     pop rbx
   374                              <1>     return
    18                              <2> %%_ret:
    19 00001293 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   375                              <1> 
   376                              <1> FCBToAsciiz:
   377                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   378                              <1> ;Name is space padded too
   379                              <1> ;Input: rsi = FCB name buffer
   380                              <1> ;       rdi = ASCIIZ string buffer
   381 00001294 B908000000          <1>     mov ecx, 8
   382 00001299 F3A4                <1>     rep movsb   ;Move the name over
   383                              <1> .scanNameSpace:
   384 0000129B 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   385 0000129F 750D                <1>     jne .ext
   386 000012A1 48FFCF              <1>     dec rdi
   387 000012A4 FFC1                <1>     inc ecx
   388 000012A6 81F908000000        <1>     cmp ecx, 8
   389 000012AC 72ED                <1>     jb .scanNameSpace
   390                              <1> .ext:
   391 000012AE 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   392 000012B3 7506                <1>     jne .validExt
   393 000012B5 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   394 000012B9 7415                <1>     je .exit
   395                              <1> .validExt:
   396 000012BB B02E                <1>     mov al, "." ;We have a valid extension, store a period
   397 000012BD AA                  <1>     stosb
   398 000012BE B903000000          <1>     mov ecx, 3
   399 000012C3 F3A4                <1>     rep movsb   ;Move the three extension chars over
   400                              <1> .scanExtSpace:
   401 000012C5 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   402 000012C9 7505                <1>     jne .exit
   403 000012CB 48FFCF              <1>     dec rdi
   404 000012CE EBF5                <1>     jmp short .scanExtSpace
   405                              <1> .exit:
   406 000012D0 31C0                <1>     xor eax, eax
   407 000012D2 AA                  <1>     stosb   ;Store a null at the end
   408                              <1>     return
    18                              <2> %%_ret:
    19 000012D3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> setupFFBlock:
   411                              <1> ;Sets up the find first block for the search
   412                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   413 000012D4 50                  <1>     push rax
   414 000012D5 53                  <1>     push rbx
   415 000012D6 56                  <1>     push rsi
   416 000012D7 57                  <1>     push rdi
   417 000012D8 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   418 000012DB 8A05(56C60300)      <1>     mov al, byte [searchAttr]
   419 000012E1 243F                <1>     and al, 3Fh ;Clear upper two bits
   420 000012E3 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   421 000012E6 0FB605(63C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   422 000012ED 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   423                              <1>     ;xchg bx, bx
   424 000012EF 488D35(DBC50300)    <1>     lea rsi, fcbName
   425 000012F6 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   426 000012FA 57                  <1>     push rdi
   427 000012FB 48B820202020202020- <1>     mov rax, "        "
   427 00001304 20                  <1>
   428 00001305 48AB                <1>     stosq
   429 00001307 66AB                <1>     stosw
   430 00001309 AA                  <1>     stosb
   431 0000130A 5F                  <1>     pop rdi
   432 0000130B 48A5                <1>     movsq   ;Move 8 chars
   433 0000130D 66A5                <1>     movsw   ;Move 2 chars
   434 0000130F A4                  <1>     movsb   ;Move the final char
   435                              <1> 
   436 00001310 8B05(DCC60300)      <1>     mov eax, dword [dirEntry]
   437 00001316 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   438 00001319 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]
   439 0000131F 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   440 00001322 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   441 00001328 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   442 0000132B 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   443 00001331 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   444 00001334 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   445 0000133A 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   446 0000133D 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   447 00001341 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   448 00001348 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   449                              <1> 
   450 0000134D 5F                  <1>     pop rdi
   451 0000134E 5E                  <1>     pop rsi
   452 0000134F 5B                  <1>     pop rbx
   453 00001350 58                  <1>     pop rax
   454                              <1>     return
    18                              <2> %%_ret:
    19 00001351 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   457                              <1> ;Gets the drive letter for the path in al
   458                              <1> ;Input: rsi = Buffer to process
   459                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   460                              <1> ;       ZF=ZE and al = 0 => Null path
   461                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   462                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   463                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   464 00001352 30C0                <1>     xor al, al
   465 00001354 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   466                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001357 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   467 00001359 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   468                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000135D 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   469 0000135F 66AD                <1>     lodsw   ;Get first word, rsi += 2
   470                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   471 00001361 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   472 00001363 2C60                <1>     sub al, 60h
   473                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001365 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   474 00001367 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   475                              <1>     return
    18                              <2> %%_ret:
    19 00001369 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   476                              <1> canonicaliseFileName:
   477                              <1> ;Always trying to build and qualify a full pathname
   478                              <1> ;Does getPath without hitting the disk
   479 0000136A B0FF                <1>     mov al, -1
   480 0000136C 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   481 00001372 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   482 00001378 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   483 0000137F FEC0                <1>     inc al  ;make al = 0
   484 00001381 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   485 00001387 EB21                <1>     jmp short getPath.epAlt
   486                              <1> getDirPath:
   487 00001389 30C0                <1>     xor al, al   ;Set to Directory
   488 0000138B EB02                <1>     jmp short getPath
   489                              <1> getFilePath:
   490 0000138D B0FF                <1>     mov al, -1  ;Set to File
   491                              <1> getPath:
   492                              <1> ;Determines whether the path is spliced or not and transfers the chars
   493                              <1> ; from the user buffer into an internal buffer, normalising them.
   494                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   495                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   496                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   497                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   498                              <1> ; we let it do its thing and return.
   499                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   500                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   501                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   502                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   503                              <1> ; (converted from using machine name by the net client program).
   504                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   505                              <1> ; was good.
   506                              <1> ;Called with:
   507                              <1> ; rdi = SDA Buffer for filename
   508                              <1> ; rsi = Potentially unqualified filename
   509                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   510 0000138F 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   511 00001395 B0FF                <1>     mov al, -1
   512 00001397 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   513 0000139D 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   514 000013A4 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   515                              <1> .epAlt:
   516 000013AA C605(5FC60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   517 000013B1 C605(5EC60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   518 000013B8 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   519 000013BF 7428                <1>     jz .notServer
   520                              <1>     ;In this case, the client network program will have correctly
   521                              <1>     ; substituted the drive letter for the path before making the request.
   522                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   523 000013C1 E88CFFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   525                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   526                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   527                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   528                              <1>     ; these requirements.
   529                              <1>     ;When a server request is made, the request can ONLY be for a file on
   530                              <1>     ; a CDS drive.
   531 000013C6 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   532 000013C8 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   533 000013CF 50                  <1>     push rax
   534 000013D0 E85D440000          <1>     call dosCrit1Enter
   535 000013D5 E82F3D0000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   536 000013DA E85D440000          <1>     call dosCrit1Exit
   537 000013DF 58                  <1>     pop rax
   538 000013E0 0F8382000000        <1>     jnc .driveOk
   539                              <1> .serverExit:
   540 000013E6 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   541                              <1>     return
    18                              <2> %%_ret:
    19 000013E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   542                              <1> .notServer:
   543                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   544 000013E9 48C705(6CC60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   544 000013F1 FFFFFF              <1>
   545 000013F4 B823110000          <1>     mov eax, 1123h
   546 000013F9 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   547                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013FB 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   548 000013FD E850FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   549 00001402 9C                  <1>     pushfq  ;Save the flag state on stack
   550 00001403 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   551 00001404 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   552 00001407 E8EC400000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   553 0000140C 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   554 0000140E E8E5400000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   555 00001413 7543                <1>     jnz .notNet
   556 00001415 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   557 00001417 753F                <1>     jne .notNet
   558 00001419 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   559 0000141A 9D                  <1>     popfq
   560 0000141B 66AD                <1>     lodsw
   561 0000141D 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   562 00001421 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   563                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   564                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   565                              <1> ; redirector Find First Without CDS
   566                              <1> 
   567 00001423 8A1D(8FC50300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   568 00001429 C605(8FC50300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   569 00001430 53                  <1>     push rbx
   570                              <1> .moveNetChars:
   571 00001431 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   572 00001432 E8CD400000          <1>     call uppercaseChar  ;Make char in al uppercase
   573 00001437 84C0                <1>     test al, al
   574 00001439 740F                <1>     jz .netEnd
   575 0000143B E8B8400000          <1>     call swapPathSeparator  ;If path sep, swap it
   576 00001440 AA                  <1>     stosb
   577 00001441 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   578 00001443 E86A000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   579 00001448 EBE7                <1>     jmp short .moveNetChars
   580                              <1> .netEnd:
   581 0000144A 5B                  <1>     pop rbx
   582 0000144B AA                  <1>     stosb
   583 0000144C 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   584                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000144E 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   585 00001450 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   586 00001455 CD4F                <1>     int 4Fh
   587                              <1>     return
    18                              <2> %%_ret:
    19 00001457 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   588                              <1> .notNet:
   589                              <1> ;This is the normal case; paths can be relative, or absolute.
   590 00001458 58                  <1>     pop rax ;Get the drive letter back
   591 00001459 9D                  <1>     popfq   ;Get the flag state back
   592 0000145A 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   593                              <1> .pnfErr:
   594 0000145C B003                <1>     mov al, errPnf  ;Null path error
   595 0000145E F9                  <1>     stc
   596                              <1>     return
    18                              <2> %%_ret:
    19 0000145F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   597                              <1> .notNull:
   598 00001460 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   599 00001462 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   600 00001464 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   601 00001466 F9                  <1>     stc
   602                              <1>     return
    18                              <2> %%_ret:
    19 00001467 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   603                              <1> .driveOk:
   604 00001468 84C0                <1>     test al, al
   605 0000146A 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   606                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   607 0000146C 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   608 0000146F 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   609 00001471 50                  <1>     push rax    ;Save the drive letter
   610 00001472 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   611 00001473 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   612 00001476 E87D400000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   613                              <1>     ;If al is a path separator, then this path is absolute.
   614 0000147B 58                  <1>     pop rax ;Get back the drive letter
   615 0000147C 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   616                              <1> .absoPath:
   617                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   618 0000147E 48FFC6              <1>     inc rsi
   619 00001481 EB1A                <1>     jmp short .commonDir
   620                              <1> .curPath:
   621                              <1> ;This is only jumped to if we are relative the current drive
   622                              <1> ;rsi points to first char in path
   623                              <1> ;If this char is \ or /, then it is an absolute path.
   624 00001483 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   625 00001489 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   626 0000148B 50                  <1>     push rax    ;Save the current drive number
   627 0000148C 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   628 0000148E E865400000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   629 00001493 58                  <1>     pop rax ;Get back the current drive number
   630 00001494 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   631                              <1> .relMain:
   632 00001496 C605(5BC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   633                              <1> .commonDir:
   634                              <1> ;rsi points to the start of the string we will be appending
   635 0000149D E809000000          <1>     call pathWalk
   636 000014A2 7201                <1>     jc .badDriveExit
   637                              <1>     return
    18                              <2> %%_ret:
    19 000014A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   638                              <1> .badDriveExit:
   639 000014A5 B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   640                              <1>     return
    18                              <2> %%_ret:
    19 000014AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   641                              <1> 
   642                              <1> pathWalk:
   643                              <1> ;Input: rsi must point to source buffer for path to expand
   644                              <1> ;       rdi must point to a destination buffer
   645                              <1> ;       al must contain the drive 1 based number
   646 000014AB E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   647 000014B0 727C                <1>     jc .badDriveExit
   648                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   649                              <1>     ; resolution
   650                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   651 000014B2 4889FB              <1>     mov rbx, rdi
   652                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   653 000014B5 803E00              <1>     cmp byte [rsi], 0
   654 000014B8 7512                <1>     jnz .mainlp
   655                              <1>     ;Setup dummy dir data
   656 000014BA 31C0                <1>     xor eax, eax
   657 000014BC 668905(CFC50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   658 000014C3 668905(D5C50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   659 000014CA EB68                <1>     jmp short .exitGood
   660                              <1> .mainlp:
   661 000014CC E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   662 000014D1 84C0                <1>     test al, al
   663 000014D3 7507                <1>     jnz .notFile
   664 000014D5 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   665                              <1> .notFile:
   666 000014DC 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   667 000014DD E854030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   668 000014E2 58                  <1>     pop rax
   669 000014E3 736B                <1>     jnc .deviceFound
   670 000014E5 E816020000          <1>     call searchForPathspec  ;and search the directory
   671 000014EA 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   672 000014EC E865020000          <1>     call addPathspecToBuffer
   673 000014F1 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   674 000014F3 84C0                <1>     test al, al ;Exit if this pathspec was a file
   675 000014F5 743D                <1>     jz .exitGood
   676                              <1>     ;Here I have to take the cluster data from the found directory entry
   677                              <1>     ; and setup the search for the next pathspec portion
   678                              <1>     ;Copy necessary data from the current directory copy
   679 000014F7 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   680 000014FE 74CC                <1>     jz .mainlp
   681 00001500 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   682 00001507 C1E010              <1>     shl eax, 10h    ;Shift it high
   683 0000150A 668B05(D5C50300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   684                              <1>     ;eax now has the cluster number of the search
   685 00001511 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   686 00001517 8905(D2C60300)      <1>     mov dword [dirClustPar], eax
   687 0000151D 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   688 0000151F 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   689 00001525 668905(DAC60300)    <1>     mov word [dirSect], ax
   690 0000152C EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   691                              <1> .badDriveExit:
   692 0000152E B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   693                              <1>     return
    18                              <2> %%_ret:
    19 00001533 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   694                              <1> .exitGood:
   695 00001534 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   696                              <1> .exit:
   697                              <1>     return
    18                              <2> %%_ret:
    19 0000153B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   698                              <1> .checkDev:
   699                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   700                              <1> ; we are in \DEV pseudo dir
   701 0000153C F605(CBC30300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   702 00001543 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   703                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   704 00001545 56                  <1>     push rsi
   705 00001546 57                  <1>     push rdi
   706 00001547 E878020000          <1>     call checkDevPath
   707 0000154C 5F                  <1>     pop rdi
   708 0000154D 5E                  <1>     pop rsi
   709 0000154E 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   710                              <1> .deviceFound:
   711 00001550 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   712 00001552 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   713 00001559 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   714 00001560 EBD9                <1>     jmp short .exit   
   715                              <1> .nodev:
   716 00001562 F9                  <1>     stc
   717 00001563 EBD6                <1>     jmp short .exit
   718                              <1> 
   719                              <1> prepareDir:
   720                              <1> ;Used to transfer the current directory if it is necessary.
   721                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   722                              <1> ; relative
   723                              <1> ;Input: al = 1-based drive letter
   724                              <1> ;Output: rdi = Pointing at where to place chars from source string
   725                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   726 00001565 56                  <1>     push rsi
   727 00001566 E8C7420000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   728 0000156B E8923E0000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   729 00001570 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   730 00001572 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
   731 00001579 57                  <1>     push rdi    ;Push CDS pointer on stack...
   732 0000157A E88A3B0000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   733                              <1> .critExit:
   734 0000157F E8B8420000          <1>     call dosCrit1Exit
   735 00001584 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   736 00001585 724A                <1>     jc .badDriveExit 
   737 00001587 488B3D(7FC50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   738                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   739                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   740                              <1>     ;   terminating char (\, / or Null)
   741                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   742                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   743 0000158E 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   744 00001594 753D                <1>     jnz .prepDirJoin
   745 00001596 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   746 0000159C 7556                <1>     jnz .prepDirSubst
   747                              <1> .prepMain:
   748                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   749 0000159E F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   750 000015A5 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   751                              <1>     ;Else we copy the first two chars only (X:)
   752 000015A7 66A5                <1>     movsw  
   753 000015A9 B05C                <1>     mov al, "\"
   754 000015AB AA                  <1>     stosb   ;Store the path separator and increment rdi
   755 000015AC 31C0                <1>     xor eax, eax    ;Get cluster 0
   756 000015AE EB1B                <1>     jmp short .prepDirExitSkip
   757                              <1> .prepLoop:
   758 000015B0 AC                  <1>     lodsb
   759 000015B1 84C0                <1>     test al, al ;If al was null, then we stop
   760 000015B3 7403                <1>     jz .prepDirExit
   761 000015B5 AA                  <1>     stosb
   762 000015B6 EBF8                <1>     jmp short .prepLoop
   763                              <1> .prepDirExit:
   764 000015B8 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   765 000015BC 7403                <1>     je .prepDirExitSkipPathsep
   766 000015BE B05C                <1>     mov al, "\"
   767 000015C0 AA                  <1>     stosb   ;Store the path separator and increment rdi
   768                              <1> .prepDirExitSkipPathsep:
   769 000015C1 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   770 000015C8 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   771                              <1> .prepDirExitSkip:
   772 000015CB E837000000          <1>     call .prepSetupDirSearchVars
   773 000015D0 F8                  <1>     clc ;Clear carry before exiting
   774                              <1> .badDriveExit:
   775 000015D1 5E                  <1>     pop rsi
   776                              <1>     return
    18                              <2> %%_ret:
    19 000015D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   777                              <1> .prepDirJoin:
   778 000015D3 51                  <1>     push rcx
   779 000015D4 56                  <1>     push rsi
   780 000015D5 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   781 000015DC B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   782                              <1> .prepDirJoin1:
   783 000015E1 AC                  <1>     lodsb   ;Get the char
   784 000015E2 84C0                <1>     test al, al ;Null char?
   785 000015E4 740B                <1>     jz .prepDirJoin2
   786 000015E6 E80D3F0000          <1>     call swapPathSeparator
   787 000015EB 7404                <1>     jz .prepDirJoin2
   788 000015ED FFC1                <1>     inc ecx ;Accrue length to copy
   789 000015EF EBF0                <1>     jmp short .prepDirJoin1
   790                              <1> .prepDirJoin2:
   791 000015F1 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   792 000015F2 EB05                <1>     jmp short .prepDirCopy1
   793                              <1> .prepDirSubst:
   794 000015F4 51                  <1>     push rcx
   795 000015F5 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   796                              <1> .prepDirCopy1:
   797 000015F9 F3A4                <1>     rep movsb   ;Copy the string over
   798 000015FB 59                  <1>     pop rcx
   799 000015FC F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   800 00001603 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   801 00001605 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   802                              <1> .prepSetupDirSearchVars:
   803                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   804                              <1> ;       rbp = DPB pointer for the device which will do transaction
   805 00001607 51                  <1>     push rcx
   806 00001608 31C9                <1>     xor ecx, ecx
   807 0000160A 66890D(DAC60300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   808 00001611 890D(DCC60300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   809 00001617 E8DAF5FFFF          <1>     call getFATtype ;Get type of fat
   810 0000161C 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   811 00001622 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   812                              <1>     ;FAT 32 here
   813 00001624 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   814 00001626 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   815 00001628 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   816                              <1> .psdsvExit:
   817 0000162B 8905(D6C60300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   818 00001631 8905(D2C60300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   819 00001637 59                  <1>     pop rcx
   820                              <1>     return 
    18                              <2> %%_ret:
    19 00001638 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   821                              <1> 
   822                              <1> copyPathspec:
   823                              <1> ;1) Copies a path portion from the source buffer to the destination
   824                              <1> ;2) Advances rsi to the next null, \ or /
   825                              <1> ;3) Expands all * to ?'s
   826                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   827                              <1> ;    next path separator and rdi pointing to the previous pathsep
   828                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   829                              <1> ;    with rsi moving to path separator
   830                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   831                              <1> ;
   832                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   833                              <1> ;           rdi = Points to where to store it
   834                              <1> ;
   835                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   836                              <1> ;           rdi = First char of next space to store next pathspec
   837                              <1> ;           al = Last char stored (either \ or NULL)
   838                              <1> ;           CF=NC = OK path
   839                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   840                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   841 00001639 57                  <1>     push rdi    ;Save the pointer into the user buffer
   842 0000163A C605(EEC30300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   843 00001641 488D3D(DBC50300)    <1>     lea rdi, fcbName
   844 00001648 57                  <1>     push rdi
   845 00001649 B903000000          <1>     mov ecx, 3
   846 0000164E B820202020          <1>     mov eax, "    " ;Four spaces
   847 00001653 F3AB                <1>     rep stosd   ;Store 12 spaces
   848 00001655 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   849                              <1> 
   850 00001656 488D1D(E6C50300)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   851 0000165D AC                  <1>     lodsb   ;Get first char from user path in al
   852 0000165E 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   853 00001660 745B                <1>     je .cpsDots
   854 00001662 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   855                              <1> ;First char is not a dot, so now check if starts with E5h? 
   856                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   857 00001665 3CE5                <1>     cmp al, 0E5h
   858 00001667 7506                <1>     jne .cpsMainLoop
   859 00001669 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   860 0000166C B005                <1>     mov al, 05h
   861 0000166E AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   862                              <1> .cpsMainLoop:
   863 0000166F AC                  <1>     lodsb   ;Get the char in al and advance rsi
   864 00001670 84C0                <1>     test al, al ;Is it the null char?
   865 00001672 7471                <1>     jz .cpsStore  ;If so, terminate immediately
   866 00001674 E87F3E0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   867 00001679 746A                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   868 0000167B 3C2E                <1>     cmp al, "." ;Filename extension separator
   869 0000167D 7420                <1>     je .cpsExtension
   870                              <1>     ;If we have space in the filename, we check to see if the next char is *
   871 0000167F 3C2A                <1>     cmp al, "*" ;Wildcard?
   872 00001681 7430                <1>     je .cpsWildcard
   873 00001683 3C3F                <1>     cmp al, "?" ;Good wildcard?
   874 00001685 740C                <1>     je .store
   875 00001687 E8783E0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   876 0000168C E8AB3F0000          <1>     call checkCharValid ; and check it is a valid char
   877 00001691 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   878                              <1> .store:
   879 00001693 4839DF              <1>     cmp rdi, rbx
   880 00001696 742D                <1>     je .cpsProcessName ;Skip any non-terminating chars
   881 00001698 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   882 00001699 EBD4                <1>     jmp short .cpsMainLoop
   883                              <1> .cpsInvalidChar:
   884 0000169B 30C0                <1>     xor al, al
   885 0000169D EB26                <1>     jmp short .cpsProcessName
   886                              <1> .cpsExtension:
   887                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   888 0000169F B903000000          <1>     mov ecx, 3 
   889 000016A4 488D3D(E3C50300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   890 000016AB 57                  <1>     push rdi
   891 000016AC B020                <1>     mov al, " "
   892 000016AE F3AA                <1>     rep stosb
   893 000016B0 5F                  <1>     pop rdi
   894 000016B1 EBBC                <1>     jmp short .cpsMainLoop
   895                              <1> .cpsWildcard:
   896 000016B3 B03F                <1>     mov al, "?"
   897                              <1> .cpsWildcardLp:
   898 000016B5 AA                  <1>     stosb
   899 000016B6 4839DF              <1>     cmp rdi, rbx
   900 000016B9 75FA                <1>     jne .cpsWildcardLp
   901 000016BB EBB2                <1>     jmp short .cpsMainLoop
   902                              <1> 
   903                              <1> .cpsDots:
   904 000016BD AA                  <1>     stosb   ;Store the first dot
   905 000016BE 8A06                <1>     mov al, byte [rsi]
   906 000016C0 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   907 000016C2 752B                <1>     jne .oneDotResolve
   908 000016C4 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   909                              <1> 
   910                              <1> .cpsProcessName:
   911                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   912 000016C5 84C0                <1>     test al, al 
   913 000016C7 741C                <1>     jz .cpsStore
   914 000016C9 E82A3E0000          <1>     call swapPathSeparator
   915 000016CE 7415                <1>     jz .cpsStore
   916                              <1> .cpsFindTerminator:
   917 000016D0 AC                  <1>     lodsb
   918 000016D1 84C0                <1>     test al, al 
   919 000016D3 7410                <1>     jz .cpsStore
   920 000016D5 E81E3E0000          <1>     call swapPathSeparator
   921 000016DA 7409                <1>     jz .cpsStore
   922 000016DC E85B3F0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   923 000016E1 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   924                              <1>     ;If we encounter a terminator, convert to 0
   925 000016E3 30C0                <1>     xor al, al
   926                              <1> .cpsStore:
   927 000016E5 488D3D(E6C50300)    <1>     lea rdi, fcbName+11
   928 000016EC AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   929 000016ED 5F                  <1>     pop rdi
   930                              <1>     return
    18                              <2> %%_ret:
    19 000016EE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   931                              <1> .oneDotResolve:
   932 000016EF 488D3D(E6C50300)    <1>     lea rdi, fcbName+11
   933 000016F6 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   934 000016F7 5F                  <1>     pop rdi ;rdi points to fresh space
   935 000016F8 48FFCF              <1>     dec rdi ;Point to the previous path separator
   936 000016FB AA                  <1>     stosb   ;Store this separator as if it is what we had before
   937                              <1>     return
    18                              <2> %%_ret:
    19 000016FC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   938                              <1> .cpsBadChar:
   939 000016FD 30C0                <1>     xor al, al  ;Convert the char to a terminator
   940                              <1>     return
    18                              <2> %%_ret:
    19 000016FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   941                              <1> 
   942                              <1> searchForPathspec:
   943                              <1>     ;Now search the current directory for this filename
   944                              <1>     ;Find first using SDA ffBlock
   945                              <1>     ;If al = 0, we have final file name or directory name
   946                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   947                              <1>     ;Output: CF=CY => Error occured
   948                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   949                              <1>     ;                 FF block somewhat setup
   950                              <1>     ;Preserves rax, rbx, rsi,  rdi
   951 00001700 50                  <1>     push rax
   952 00001701 53                  <1>     push rbx
   953 00001702 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   954 00001703 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   955 00001704 0FB61D(CAC30300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   956 0000170B 53                  <1>     push rbx    ;and push it onto the stack
   957                              <1> ;Evaluate whether we are searching for a file for a directory
   958 0000170C 84C0                <1>     test al, al
   959 0000170E 741D                <1>     jz .sfpPNfile
   960                              <1>     ;Fall if subdir
   961 00001710 488D3D(DBC50300)    <1>     lea rdi, fcbName
   962 00001717 B03F                <1>     mov al, "?" ;Search for wildcard
   963 00001719 B90B000000          <1>     mov ecx, 11
   964 0000171E F2AE                <1>     repne scasb
   965 00001720 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   966 00001722 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   967 00001724 C605(CAC30300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   968 0000172B EB07                <1>     jmp short .sfpPNMain
   969                              <1> .sfpPNfile:
   970                              <1>     ;Here if we are searching for a file or directory as setup by search init
   971 0000172D 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   972                              <1> .sfpPNMain:
   973 00001734 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   974 0000173B 7405                <1>     je .sfpPNNoDisk
   975 0000173D E85CF9FFFF          <1>     call searchDir
   976                              <1> .sfpPNNoDisk:
   977 00001742 5B                  <1>     pop rbx
   978 00001743 881D(CAC30300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   979 00001749 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   980 0000174A 5E                  <1>     pop rsi
   981 0000174B 5B                  <1>     pop rbx
   982 0000174C 58                  <1>     pop rax
   983                              <1>     return
    18                              <2> %%_ret:
    19 0000174D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   984                              <1> .sfpPnf:
   985 0000174E B803000000          <1>     mov eax, errPnf
   986                              <1> .sfpErrExit:
   987 00001753 F9                  <1>     stc ;Set carry
   988 00001754 EBEC                <1>     jmp short .sfpPNNoDisk
   989                              <1> 
   990                              <1> addPathspecToBuffer:
   991                              <1> ;Input: fcbName = Qualified pathname portion
   992                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
   993                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
   994                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
   995                              <1> ;rbx points to the "head of the path"
   996 00001756 803D(DBC50300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   997 0000175D 741F                <1>     je .aptbPNDots
   998                              <1>     ;Copy filename over to internal buffer
   999 0000175F 56                  <1>     push rsi    ;Save source pointer position
  1000 00001760 488D35(DBC50300)    <1>     lea rsi, fcbName
  1001 00001767 E828FBFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1002 0000176C 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1003 0000176F 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1004                              <1> .aptbOkExit:
  1005 00001770 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1006 00001773 E8803D0000          <1>     call swapPathSeparator
  1007 00001778 7402                <1>     jz .aptbPNexit
  1008 0000177A 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1009                              <1> .aptbPNexit:
  1010 0000177C AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1011                              <1>     return
    18                              <2> %%_ret:
    19 0000177D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1012                              <1> .aptbPNDots:
  1013                              <1> ;For one dot, we leave rdi where it is
  1014                              <1> ;For two dots, we search backwards for the previous "\"
  1015 0000177E 803D(DCC50300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1016 00001785 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1017 00001786 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1018                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001789 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1019                              <1>     ;Here we have two dots
  1020                              <1>     ;Walk rdi backwards until a \ is found
  1021 0000178B 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1022 0000178E 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1023 00001794 7427                <1>     je .aptbPnf
  1024 00001796 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1025 0000179C 741F                <1>     je .aptbPnf
  1026                              <1> .aptbPNDotsLp:
  1027 0000179E 48FFCF              <1>     dec rdi
  1028 000017A1 803F5C              <1>     cmp byte [rdi], "\"
  1029 000017A4 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1030                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1031 000017A6 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1032 000017AD 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1033 000017AF 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1034 000017B2 7209                <1>     jb .aptbPnf
  1035 000017B4 EBBA                <1>     jmp short .aptbOkExit
  1036                              <1> .aptbSearchError:
  1037 000017B6 B812000000          <1>     mov eax, errNoFil
  1038 000017BB EB05                <1>     jmp short .aptbErrExit
  1039                              <1> .aptbPnf:
  1040 000017BD B803000000          <1>     mov eax, errPnf
  1041                              <1> .aptbErrExit:
  1042 000017C2 F9                  <1>     stc ;Set carry
  1043                              <1>     return
    18                              <2> %%_ret:
    19 000017C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1044                              <1> 
  1045                              <1> checkDevPath:
  1046                              <1> ;Called only if the file/directory was not found on disk.
  1047                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1048                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1049                              <1> ; and check to see if it is a char device. If it is, build a directory
  1050                              <1> ; If it is not, proceed with the request fail.
  1051                              <1> ;
  1052                              <1> ;Input: rsi = Pointer to the next path spec
  1053                              <1> ;Output: CF=NC => Char device found, directory built
  1054                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1055 000017C4 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1056                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017CB 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1057 000017CD 803D(E6C50300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1058 000017D4 7459                <1>     je .notOk                      
  1059                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1060 000017D6 50                  <1>     push rax
  1061 000017D7 48B844455620202020- <1>     mov rax, "DEV     "
  1061 000017E0 20                  <1>
  1062 000017E1 483905(DBC50300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1063 000017E8 58                  <1>     pop rax
  1064 000017E9 7544                <1>     jne .notOk
  1065 000017EB 813D(E3C50300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1065 000017F3 205C                <1>
  1066 000017F5 7538                <1>     jne .notOk
  1067                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1068                              <1>     ; looking for a device driver
  1069                              <1>     ;First append it to rdi 
  1070 000017F7 B84445565C          <1>     mov eax, "DEV\" 
  1071 000017FC AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1072 000017FD 57                  <1>     push rdi
  1073 000017FE 488D3D(DBC50300)    <1>     lea rdi, fcbName
  1074 00001805 E842FAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1075                              <1>     ;Returns in al the terminating char of the source string
  1076 0000180A 5F                  <1>     pop rdi
  1077                              <1>     ;If al is a pathsep, fail
  1078 0000180B E8E83C0000          <1>     call swapPathSeparator
  1079 00001810 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1080 00001812 30C0                <1>     xor al, al
  1081 00001814 8805(E6C50300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1082 0000181A 53                  <1>     push rbx
  1083 0000181B E844000000          <1>     call checkIfCharDevice
  1084 00001820 5B                  <1>     pop rbx ;Don't need bh yet
  1085 00001821 720C                <1>     jc .notOk
  1086 00001823 E86D000000          <1>     call buildCharDir
  1087                              <1>     ;Here the device was determined to be a char device.
  1088                              <1>     ;A dummy directory entry was built for it.
  1089                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1090                              <1>     ; Do not Find Next!
  1091                              <1> .copyName:
  1092 00001828 E867FAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1093 0000182D F8                  <1>     clc
  1094                              <1>     return
    18                              <2> %%_ret:
    19 0000182E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1095                              <1> .notOk:
  1096 0000182F B812000000          <1>     mov eax, errNoFil
  1097 00001834 F9                  <1>     stc
  1098                              <1>     return
    18                              <2> %%_ret:
    19 00001835 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1099                              <1> .charDevSearch:
  1100 00001836 53                  <1>     push rbx
  1101 00001837 E828000000          <1>     call checkIfCharDevice
  1102 0000183C 5B                  <1>     pop rbx ;Dont need bh yet
  1103 0000183D 72F0                <1>     jc .notOk
  1104 0000183F E851000000          <1>     call buildCharDir
  1105 00001844 803D(E6C50300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1106 0000184B 750C                <1>     jne .cds2
  1107 0000184D 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1108 00001851 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1109 00001853 48FFCF              <1>     dec rdi
  1110 00001856 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1111 00001858 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1112                              <1> .cds2:
  1113 00001859 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1114 00001860 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1115 00001862 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1116                              <1>     return
    18                              <2> %%_ret:
    19 00001863 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1117                              <1> 
  1118                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1119                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1120                              <1> ; device driver chain. 
  1121                              <1> ;Output: CF=CY if not found
  1122                              <1> ;        CF=NC if found
  1123                              <1> ;           BH = Low byte of the device attribute word
  1124 00001864 50                  <1>     push rax
  1125 00001865 57                  <1>     push rdi
  1126 00001866 488B05(DBC50300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1127 0000186D 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1128                              <1> .checkName:
  1129 00001874 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1130 00001878 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1131 0000187A F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1132 0000187D 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1133 0000187F 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1134 00001883 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1135                              <1> .walkList:
  1136 00001885 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1137 00001888 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1138 0000188F 75E3                <1>     jne .checkName  ;If no, rdi points to char device
  1139 00001891 F9                  <1>     stc
  1140                              <1> .exit:
  1141 00001892 5F                  <1>     pop rdi
  1142 00001893 58                  <1>     pop rax
  1143                              <1>     return
    18                              <2> %%_ret:
    19 00001894 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1144                              <1> 
  1145                              <1> buildCharDir:
  1146                              <1> ;Build a dummy directory entry for the char device in FCBName
  1147                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1148 00001895 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1149                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000189C 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1150 0000189E 50                  <1>     push rax
  1151 0000189F 57                  <1>     push rdi
  1152 000018A0 C605(E6C50300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1153 000018A7 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
  1154                              <1>     ;Zero the directory copy (32 bytes)
  1155 000018AE 50                  <1>     push rax
  1156 000018AF 51                  <1>     push rcx
  1157 000018B0 57                  <1>     push rdi
  1158 000018B1 31C0                <1>     xor eax, eax    ;Zero rax
  1159 000018B3 B904000000          <1>     mov ecx, 4
  1160 000018B8 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1161 000018BB 5F                  <1>     pop rdi
  1162 000018BC 59                  <1>     pop rcx
  1163 000018BD 58                  <1>     pop rax
  1164 000018BE 488B05(DBC50300)    <1>     mov rax, qword [fcbName]
  1165 000018C5 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1166 000018C8 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1167 000018CD 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1168 000018D0 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1169                              <1>     ;Get date and time and set the write time in the directory entry
  1170 000018D4 E89D100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1171 000018D9 E883110000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1172 000018DE 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1173 000018E1 31C0                <1>     xor eax, eax
  1174 000018E3 5F                  <1>     pop rdi
  1175 000018E4 58                  <1>     pop rax
  1176                              <1>     return
    18                              <2> %%_ret:
    19 000018E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1177                              <1> 
  1178                              <1> checkFailingComp:
  1179                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1180                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1181                              <1> ;Returns: ZF=ZE => Last path componant
  1182                              <1> ;         ZF=NZ => Not last path componant
  1183 000018E6 50                  <1>     push rax
  1184 000018E7 8A05(E6C50300)      <1>     mov al, byte [fcbName + 11]
  1185 000018ED 84C0                <1>     test al, al
  1186 000018EF 58                  <1>     pop rax
  1187                              <1>     return
    18                              <2> %%_ret:
    19 000018F0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FAT/dirfun.asm"
    26                              <1> ;---------------------------------------------------:
    27                              <1> ;                   KERNEL FUNCTIONS                :
    28                              <1> ;---------------------------------------------------:
    29                              <1> makeDIR:           ;ah = 39h
    30                              <1> ;For make, the path must exist but the final componant must not exist.
    31                              <1> ;Input: rdx = Pointer to ASCIIZ string
    32 000018F1 4889D7              <1>     mov rdi, rdx
    33 000018F4 E8323C0000          <1>     call strlen
    34 000018F9 81F940000000        <1>     cmp ecx, 64
    35 000018FF 7607                <1>     jbe .okLength
    36                              <1> .badPath:
    37 00001901 B003                <1>     mov al, errPnf
    38 00001903 E9693F0000          <1>     jmp extErrExit
    39                              <1> .okLength:
    40 00001908 4889D6              <1>     mov rsi, rdx
    41 0000190B E8853C0000          <1>     call checkPathspecOK
    42 00001910 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    43                              <1> .pathOk:
    44 00001912 E8FA3C0000          <1>     call scanPathWC
    45 00001917 72E8                <1>     jc .badPath ;Dont allow wildcards
    46                              <1>     ;Path is ok, now proceed
    47 00001919 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    48 00001920 E864FAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    49                              <1>     ;If the path exists, exit error
    50 00001925 0F83463F0000        <1>     jnc extErrExit
    51                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    52 0000192B E8B6FFFFFF          <1>     call checkFailingComp
    53 00001930 0F853B3F0000        <1>     jnz extErrExit
    54                              <1>     ;So all is well, the new subdirectories name is in fcbName
    55                              <1>     ;The parent dir's directory entry is in the curDirCopy
    56 00001936 E8363A0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    57                              <1>     ;returns in rdi the working cds ptr
    58 0000193B 7312                <1>     jnc .notNet
    59 0000193D B803110000          <1>     mov eax, 1103h
    60 00001942 CD4F                <1>     int 4fh
    61 00001944 0F82273F0000        <1>     jc extErrExit
    62 0000194A E9143F0000          <1>     jmp extGoodExit
    63                              <1> .notNet:
    64 0000194F E8DE3E0000          <1>     call dosCrit1Enter
    65                              <1>     ;Current dpb ptr is already set
    66                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    67                              <1>     ;First we make a dummy dir in curDirCopy
    68 00001954 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    69 0000195B 488D35(DBC50300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    70 00001962 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
    71 00001969 48A5                <1>     movsq   ;Copy the name over
    72 0000196B A5                  <1>     movsd
    73 0000196C E805100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    74 00001971 E8EB100000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    75 00001976 8905(C9C50300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    76 0000197C 8905(D1C50300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    77 00001982 31C0                <1>     xor eax, eax
    78 00001984 8905(D7C50300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    79 0000198A C605(C6C50300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    80 00001991 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]
    81                              <1> .searchForDirSpace:
    82 00001997 8905(D6C60300)      <1>     mov dword [dirClustA], eax
    83 0000199D 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    84 0000199F 668905(DAC60300)    <1>     mov word [dirSect], ax
    85 000019A6 8905(DCC60300)      <1>     mov dword [dirEntry], eax
    86 000019AC E86F040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    87 000019B1 7328                <1>     jnc .dirEntryFnd
    88 000019B3 813D(D2C60300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    88 000019BB 0000                <1>
    89 000019BD 0F8443010000        <1>     je .bad ;Set CF and exit
    90 000019C3 E869050000          <1>     call growDirectory  ;Increase directory size by 1 cluster
    91 000019C8 0F8238010000        <1>     jc .bad
    92 000019CE 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    93 000019D3 0F842D010000        <1>     je .bad
    94                              <1>     ;Else eax = Newly allocated cluster
    95 000019D9 EBBC                <1>     jmp short .searchForDirSpace
    96                              <1> .dirEntryFnd:
    97                              <1> ;rdi points to current directory copy
    98                              <1> ;rsi now points to offset in the buffer to write the entry to
    99                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   100 000019DB 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]
   101 000019E2 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   102                              <1>      
   103 000019E6 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   104 000019ED 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   105 000019F4 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   106 000019F7 668935(A0C60300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   107                              <1> ;Must now request a cluster and sanitise it
   108 000019FE E8DBF2FFFF          <1>     call startNewChain  ;Get cluster number in eax
   109 00001A03 0F8202010000        <1>     jc .badExit
   110 00001A09 E856050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax
   111 00001A0E 0F82F7000000        <1>     jc .badExit
   112                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   113 00001A14 668905(D5C50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   114 00001A1B C1E810              <1>     shr eax, 10h    ;Get high word low
   115 00001A1E 668905(CFC50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   116 00001A25 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   117 00001A2C E815F1FFFF          <1>     call getBufForDirNoFile
   118 00001A31 0F82D4000000        <1>     jc .badExit
   119 00001A37 0FB705(A0C60300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   120 00001A3E 488D35(BBC50300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   121 00001A45 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   122 00001A4A B904000000          <1>     mov ecx, 4
   123 00001A4F F348A5              <1>     rep movsq   ;Copy over the buffered directory
   124 00001A52 E864EFFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   125                              <1>     ;Now need to read in data sector and make two entries . and ..
   126 00001A57 57                  <1>     push rdi
   127 00001A58 51                  <1>     push rcx
   128 00001A59 B90B000000          <1>     mov ecx, 11
   129 00001A5E 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   130 00001A65 B020                <1>     mov al, " "
   131 00001A67 F3AA                <1>     rep stosb
   132 00001A69 59                  <1>     pop rcx
   133 00001A6A 5F                  <1>     pop rdi
   134 00001A6B 48B82E000000000000- <1>     mov rax, "."
   134 00001A74 00                  <1>
   135 00001A75 8805(BBC50300)      <1>     mov byte [curDirCopy], al
   136 00001A7B 0FB705(D5C50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   137 00001A82 0FB715(CFC50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   138 00001A89 C605(C6C50300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   139 00001A90 C1E210              <1>     shl edx, 10h
   140 00001A93 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   141 00001A95 E8CAF1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   142 00001A9A E8A7F0FFFF          <1>     call getBufForDirNoFile
   143 00001A9F 726A                <1>     jc .badExit
   144                              <1>     ;rbx has buffer pointer now
   145 00001AA1 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   146 00001AA8 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   147 00001AAC B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   148 00001AB1 F348A5              <1>     rep movsq
   149                              <1>     ;Now create .. entry
   150 00001AB4 C605(BCC50300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   151 00001ABB 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   152 00001AC1 E830F1FFFF          <1>     call getFATtype
   153 00001AC6 81F902000000        <1>     cmp ecx, 2
   154 00001ACC 7207                <1>     jb .notFAT32
   155 00001ACE 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   156 00001AD1 7502                <1>     jne .notFAT32
   157 00001AD3 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   158                              <1> .notFAT32:
   159 00001AD5 668905(D5C50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   160 00001ADC C1E810              <1>     shr eax, 10h
   161 00001ADF 668905(CFC50300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   162 00001AE6 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   163 00001AED B904000000          <1>     mov ecx, 4
   164 00001AF2 F348A5              <1>     rep movsq
   165 00001AF5 E8C1EEFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   166                              <1> .okExit:
   167                              <1>     ;AND WE ARE DONE!
   168 00001AFA E83D3D0000          <1>     call dosCrit1Exit
   169 00001AFF 31C0                <1>     xor eax, eax
   170 00001B01 E95D3D0000          <1>     jmp extGoodExit
   171                              <1> .bad:
   172 00001B06 B805000000          <1>     mov eax, errAccDen
   173                              <1> .badExit:
   174 00001B0B E82C3D0000          <1>     call dosCrit1Exit
   175 00001B10 E95C3D0000          <1>     jmp extErrExit
   176                              <1> 
   177                              <1> removeDIR:         ;ah = 3Ah
   178 00001B15 4889D7              <1>     mov rdi, rdx
   179 00001B18 E80E3A0000          <1>     call strlen
   180 00001B1D 81F940000000        <1>     cmp ecx, 64
   181 00001B23 7607                <1>     jbe .okLength
   182                              <1> .badPath:
   183 00001B25 B003                <1>     mov al, errPnf
   184 00001B27 E9453D0000          <1>     jmp extErrExit
   185                              <1> .okLength:
   186 00001B2C 4889D6              <1>     mov rsi, rdx
   187 00001B2F E8613A0000          <1>     call checkPathspecOK
   188 00001B34 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   189                              <1> .pathOk:
   190 00001B36 E8D63A0000          <1>     call scanPathWC
   191 00001B3B 72E8                <1>     jc .badPath ;Dont allow wildcards
   192                              <1>     ;Path is ok, now proceed
   193 00001B3D 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   194 00001B44 E840F8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   195 00001B49 72DA                <1>     jc .badPath    ;Path Doesn't exist
   196 00001B4B E821380000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   197 00001B50 7312                <1>     jnc .notNet
   198 00001B52 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   199 00001B57 CD4F                <1>     int 4fh
   200 00001B59 0F82123D0000        <1>     jc extErrExit
   201 00001B5F E9FF3C0000          <1>     jmp extGoodExit
   202                              <1> .notNet:
   203 00001B64 E8C93C0000          <1>     call dosCrit1Enter
   204 00001B69 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   205                              <1>     ;Now let use check that our directory is not the CDS currentdir
   206 00001B70 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   207 00001B77 488D3D(7FC40300)    <1>     lea rdi, buffer1
   208 00001B7E E8A8390000          <1>     call strlen ;Get the length of the full qualified name in ecx
   209 00001B83 66890D(A0C60300)    <1>     mov word [pathLen], cx
   210 00001B8A E8B3390000          <1>     call strcmp ;Then compare rdi to CDS string
   211 00001B8F 750F                <1>     jnz .notEqual
   212 00001B91 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   213 00001B96 E8A13C0000          <1>     call dosCrit1Exit
   214 00001B9B E9D13C0000          <1>     jmp extErrExit
   215                              <1> .notEqual:
   216 00001BA0 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   217                              <1>     ;If the given path length is one more than the backslash offset
   218                              <1>     ; due to the terminating null, then the user is trying to delete the 
   219                              <1>     ; root dir. Fail this.
   220 00001BA3 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   221 00001BA7 FFC1                <1>     inc ecx
   222 00001BA9 663B0D(A0C60300)    <1>     cmp cx, word [pathLen]
   223 00001BB0 0F8415010000        <1>     je .accessDenied
   224 00001BB6 E879020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   225                              <1>     ;for the entry in the sector we are hoping to delete
   226 00001BBB 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   227 00001BC2 C1E010              <1>     shl eax, 10h
   228 00001BC5 0FB71D(D5C50300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   229 00001BCC 09D8                <1>     or eax, ebx
   230 00001BCE 8905(D2C60300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   231 00001BD4 E88BF0FFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   232 00001BD9 E868EFFFFF          <1>     call getBufForDirNoFile
   233 00001BDE 0F82EC000000        <1>     jc .exitBad
   234                              <1>     ;rbx points to buffer
   235 00001BE4 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   236 00001BE8 48B82E202020202020- <1>     mov rax, ".       "
   236 00001BF1 20                  <1>
   237 00001BF2 483906              <1>     cmp qword [rsi], rax
   238 00001BF5 0F85D0000000        <1>     jne .accessDenied
   239 00001BFB B42E                <1>     mov ah, "." ;Screw the partial stall
   240 00001BFD 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   241 00001C01 0F85C4000000        <1>     jne .accessDenied
   242 00001C07 4881C620000000      <1>     add rsi, fatDirEntry_size
   243 00001C0E 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   244 00001C15 B904000000          <1>     mov ecx, 4
   245 00001C1A F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   246                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   247                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   248 00001C1D 488D3D(DBC50300)    <1>     lea rdi, fcbName
   249 00001C24 B03F                <1>     mov al, "?"
   250 00001C26 B90B000000          <1>     mov ecx, 11
   251 00001C2B F3AA                <1>     rep stosb   ;Store the pattern to search for
   252 00001C2D 30C0                <1>     xor al, al  ;Store a terminating zero
   253 00001C2F AA                  <1>     stosb
   254 00001C30 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   255 00001C36 50                  <1>     push rax    ;Save on stack temporarily
   256 00001C37 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   257 00001C3D 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   258 00001C3F 668905(DAC60300)    <1>     mov word [dirSect], ax
   259 00001C46 C705(DCC60300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   259 00001C4E 0000                <1>
   260 00001C50 C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   261 00001C57 58                  <1>     pop rax
   262 00001C58 E807F0FFFF          <1>     call getStartSectorOfCluster
   263 00001C5D E806EFFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   264 00001C62 726C                <1>     jc .exitBad
   265 00001C64 E815F5FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   266 00001C69 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   267 00001C70 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   268 00001C76 E860F4FFFF          <1>     call searchDir.rmdirEP
   269 00001C7B 734E                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   270                              <1>     ;Else, this is a empty dir, we can remove it
   271                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   272 00001C7D 488B05(98C60300)    <1>     mov rax, qword [tempSect]
   273 00001C84 E8DFEEFFFF          <1>     call getBufForDOS
   274 00001C89 7245                <1>     jc .exitBad
   275 00001C8B E8EEF4FFFF          <1>     call adjustDosDirBuffer
   276 00001C90 0FB705(A0C60300)    <1>     movzx eax, word [entry]
   277 00001C97 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   278 00001C9B 4801C6              <1>     add rsi, rax    
   279 00001C9E 8A05(62C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   280 00001CA4 8806                <1>     mov byte [rsi], al  ;Store delchar there
   281 00001CA6 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   282 00001CAA 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   283 00001CAE E808EDFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   284 00001CB3 C1E210              <1>     shl edx, 10h
   285 00001CB6 09D0                <1>     or eax, edx
   286                              <1>     ;Now remove the FAT chain
   287 00001CB8 E84BF1FFFF          <1>     call unlinkFAT
   288 00001CBD 7211                <1>     jc .exitBad
   289 00001CBF E8783B0000          <1>     call dosCrit1Exit
   290 00001CC4 31C0                <1>     xor eax, eax
   291 00001CC6 E9983B0000          <1>     jmp extGoodExit
   292                              <1> .accessDenied:
   293 00001CCB B805000000          <1>     mov eax, errAccDen
   294                              <1> .exitBad:
   295 00001CD0 F9                  <1>     stc
   296 00001CD1 E8663B0000          <1>     call dosCrit1Exit
   297 00001CD6 E9963B0000          <1>     jmp extErrExit
   298                              <1> 
   299                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   300                              <1> ;Input: rdx = Pointer to ASCIIZ string
   301 00001CDB 4889D7              <1>     mov rdi, rdx
   302 00001CDE E848380000          <1>     call strlen
   303 00001CE3 81F940000000        <1>     cmp ecx, 64
   304 00001CE9 7607                <1>     jbe .okLength
   305                              <1> .badPath:
   306 00001CEB B003                <1>     mov al, errPnf
   307 00001CED E97F3B0000          <1>     jmp extErrExit
   308                              <1> .okLength:
   309 00001CF2 4889D6              <1>     mov rsi, rdx
   310 00001CF5 E89B380000          <1>     call checkPathspecOK
   311 00001CFA 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   312 00001CFC E810390000          <1>     call scanPathWC
   313 00001D01 72E8                <1>     jc .badPath ;Or wildcards
   314 00001D03 E875390000          <1>     call checkPathNet
   315 00001D08 74E1                <1>     jz .badPath ;Or Net paths
   316                              <1>     ;Path is ok, now proceed
   317 00001D0A 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   318 00001D11 E873F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   319 00001D16 0F82553B0000        <1>     jc extErrExit   ;Exit with error code in eax
   320                              <1>     ;The path must've been ok, so now copy the path into the CDS
   321                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   322 00001D1C 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   323 00001D23 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   324 00001D29 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   325 00001D2B 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
   326 00001D32 B95B000000          <1>     mov ecx, cds_size
   327 00001D37 F3A4                <1>     rep movsb
   328                              <1>     ;If the path is longer than 67, call it an invalid path
   329 00001D39 488D3D(7FC40300)    <1>     lea rdi, buffer1
   330 00001D40 E8E6370000          <1>     call strlen ;Get the length of this path
   331 00001D45 81F943000000        <1>     cmp ecx, 67
   332 00001D4B 779E                <1>     ja .badPath
   333 00001D4D 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   334 00001D50 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
   335 00001D57 F3A4                <1>     rep movsb   ;Copy the path over
   336                              <1>     ;Now get the start cluster from the directory copy
   337 00001D59 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   338 00001D60 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   339 00001D67 C1E010              <1>     shl eax, 10h
   340 00001D6A 09D0                <1>     or eax, edx ;Add low bits to eax
   341 00001D6C 8905(48C60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   342 00001D72 488D35(FBC50300)    <1>     lea rsi, tmpCDS
   343 00001D79 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   344 00001D80 B95B000000          <1>     mov ecx, cds_size
   345 00001D85 E8A83A0000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   346 00001D8A F3A4                <1>     rep movsb
   347 00001D8C E8AB3A0000          <1>     call dosCrit1Exit
   348 00001D91 31C0                <1>     xor eax, eax
   349 00001D93 E9CB3A0000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   350                              <1> .net:
   351                              <1> ;SDA Vars are setup for this request
   352 00001D98 B805110000          <1>     mov eax, 1105h
   353 00001D9D CD4F                <1>     int 4fh
   354 00001D9F 0F82CC3A0000        <1>     jc extErrExit
   355 00001DA5 E9B93A0000          <1>     jmp extGoodExit
   356                              <1> getCurrentDIR:     ;ah = 47h
   357                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   358                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   359 00001DAA 88D0                <1>     mov al, dl  ;Move drive number into al
   360 00001DAC E8BA360000          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   361 00001DB1 0F82BA3A0000        <1>     jc extErrExit
   362                              <1> .okDrive:
   363 00001DB7 4889F7              <1>     mov rdi, rsi    ;Save destination in rdi
   364 00001DBA E8733A0000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   365 00001DBF 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   366 00001DC6 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   367 00001DCA FFC0                <1>     inc eax ;Go past the backslash
   368 00001DCC 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   369 00001DCF E866370000          <1>     call strcpy
   370 00001DD4 E8633A0000          <1>     call dosCrit1Exit
   371 00001DD9 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   372 00001DDE E9803A0000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   373                              <1> 
   374                              <1> trueName:          ;ah = 60h, get fully qualified name. Int 4Fh, AX=1221h
   375                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   376 00001DE3 E8AD370000          <1>     call checkPathspecOK    ;This preserves rsi
   377 00001DE8 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   378 00001DEA 740A                <1>     jz .pathspecOk  ;If the last char in the path is malformed allow it here
   379                              <1> .badPath:
   380 00001DEC B803000000          <1>     mov eax, errPnf
   381 00001DF1 E97B3A0000          <1>     jmp extErrExit
   382                              <1> .pathspecOk:
   383 00001DF6 57                  <1>     push rdi    ;Save the destination
   384 00001DF7 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   385 00001DFE E867F5FFFF          <1>     call canonicaliseFileName
   386 00001E03 C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   387 00001E06 5F                  <1>     pop rdi
   388 00001E07 0F82643A0000        <1>     jc extErrExit
   389 00001E0D 488D35(7FC40300)    <1>     lea rsi, buffer1
   390 00001E14 E821370000          <1>     call strcpy
   391 00001E19 31C0                <1>     xor eax, eax
   392 00001E1B E9433A0000          <1>     jmp extGoodExit
   393                              <1> 
   394                              <1> ;-----------------------------------
   395                              <1> ;    General Directory Routines    :
   396                              <1> ;-----------------------------------
   397                              <1> 
   398                              <1> findFreeDiskDirEntry:
   399                              <1> ;Find a space in the directory we are searching for a directory entry
   400                              <1> ;Accept first entry starting with a 0E5h or 00h
   401                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   402                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   403                              <1> ; be called for CDS's that are NOT net CDS's).
   404                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   405                              <1> ;       Directory vars must be set up for the directory we are searching in
   406                              <1> ;Output: CF=CY => Error, eax has error code
   407                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   408 00001E20 8A05(62C60300)      <1>     mov al, byte [delChar]
   409 00001E26 8805(DBC50300)      <1>     mov byte [fcbName], al
   410 00001E2C E86DF2FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   411                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001E31 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001E33 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   412                              <1> ;Free entry found, dir variables are set for the free entry. 
   413                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   414                              <1> getDiskDirectoryEntry:
   415                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   416                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   417                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   418                              <1> ;        qword [tempSect] = Disk sector number of directory
   419                              <1> ;        word [entry] = 32 byte offset into sector
   420                              <1> ;        CF=CY => Error, exit 
   421 00001E34 53                  <1>     push rbx
   422 00001E35 8B05(D6C60300)      <1>     mov eax, dword [dirClustA]  
   423                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   424                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   425 00001E3B 0FB71D(DAC60300)    <1>     movzx ebx, word [dirSect]
   426 00001E42 85C0                <1>     test eax, eax
   427 00001E44 7407                <1>     jz .skipCluster
   428 00001E46 E819EEFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   429 00001E4B EB0C                <1>     jmp short .skipOldFat
   430                              <1> .skipCluster:
   431 00001E4D 55                  <1>     push rbp
   432 00001E4E 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   433 00001E55 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   434 00001E58 5D                  <1>     pop rbp
   435                              <1> .skipOldFat:
   436 00001E59 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   437 00001E5C 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   438 00001E63 E800EDFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   439 00001E68 5B                  <1>     pop rbx
   440                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E69 72C8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   441 00001E6B 53                  <1>     push rbx
   442 00001E6C 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]
   443 00001E73 E806F3FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   444                              <1>     ;Above function gets data buffer ptr in rsi
   445 00001E78 0FB705(DAC60300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   446 00001E7F 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   447 00001E83 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   448                              <1>     ; the current sector
   449 00001E85 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   450 00001E88 8B1D(DCC60300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   451 00001E8E 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   452 00001E90 C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   453 00001E93 66891D(A0C60300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   454 00001E9A 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   455 00001E9D 5B                  <1>     pop rbx
   456                              <1>     return
    18                              <2> %%_ret:
    19 00001E9E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   457                              <1> 
   458                              <1> 
   459                              <1> updateDirectoryEntryForFile:    
   460                              <1> ;Updates the directory entry for disk files
   461                              <1> ;Called with:
   462                              <1> ;   [workingDPB] = DPB pointer for the disk device
   463                              <1> ;   [currentSFT] = Current SFT pointer
   464 00001E9F 50                  <1>     push rax
   465 00001EA0 53                  <1>     push rbx
   466 00001EA1 57                  <1>     push rdi
   467 00001EA2 55                  <1>     push rbp
   468                              <1> 
   469 00001EA3 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   470 00001EAA 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   471 00001EB1 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   472 00001EB7 751D                <1>     jnz .skipDT
   473                              <1>     ;Get date and time words and add them to the directory entry
   474 00001EB9 E8B80A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   475 00001EBE 726C                <1>     jc .exit  ;If we fail to get time/date, fail the request
   476                              <1>     ;Build date and time words
   477 00001EC0 E89C0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   478                              <1>     ;Update SFT fields
   479 00001EC5 66894713            <1>     mov word [rdi + sft.wTime], ax
   480 00001EC9 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   481 00001ECC 66894715            <1>     mov word [rdi + sft.wDate], ax
   482 00001ED0 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
   483                              <1> .skipDT:
   484                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   485                              <1> ; we skip all of this
   486 00001ED6 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   487 00001EDC 744E                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
   488 00001EDE 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   489 00001EE2 E88FECFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   490 00001EE7 7243                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
   491                              <1>     ;Now we write the changes to the sector
   492                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   493 00001EE9 E8CDEAFFFF          <1>     call setBufferDirty
   494 00001EEE 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   495 00001EF2 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   496 00001EF6 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   497 00001EF9 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   498 00001EFC 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   499 00001EFF 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   500 00001F02 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   501 00001F06 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   502 00001F0A 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   503 00001F0E 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   504 00001F12 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   505 00001F16 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   506 00001F19 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   507 00001F1D C1E810              <1>     shr eax, 10h
   508 00001F20 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   509                              <1>     ;Directory sector updated and marked to be flushed to disk!
   510                              <1>     ;Now mark that the file has sectors not yet flushed to disk
   511                              <1>      
   512 00001F24 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   513 00001F25 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
   514 00001F2B 9D                  <1>     popfq
   515                              <1> .exit:
   516 00001F2C 5D                  <1>     pop rbp
   517 00001F2D 5F                  <1>     pop rdi
   518 00001F2E 5B                  <1>     pop rbx
   519 00001F2F 58                  <1>     pop rax
   520                              <1>     return
    18                              <2> %%_ret:
    19 00001F30 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> growDirectory:
   523                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   524                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   525                              <1> ;                 eax = New Cluster number
   526                              <1> ;               TWO NON CF ERROR CASES.
   527                              <1> ;               If eax = -1 => disk full!
   528                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   529                              <1> ;        CF=CY => Something went wrong. Rip. 
   530 00001F31 53                  <1>     push rbx
   531 00001F32 51                  <1>     push rcx
   532 00001F33 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   533 00001F39 85C0                <1>     test eax, eax
   534 00001F3B 7424                <1>     jz .exit
   535 00001F3D E84FEDFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   536 00001F42 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   537 00001F44 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   538 00001F49 E8B1EDFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   539 00001F4E 7211                <1>     jc .exit
   540 00001F50 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   541 00001F52 E8E7EEFFFF          <1>     call readFAT
   542 00001F57 7208                <1>     jc .exit
   543 00001F59 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   544 00001F5E 7201                <1>     jc .exit
   545 00001F60 F8                  <1>     clc
   546                              <1> .exit:
   547 00001F61 59                  <1>     pop rcx
   548 00001F62 5B                  <1>     pop rbx
   549                              <1>     return   
    18                              <2> %%_ret:
    19 00001F63 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   550                              <1> sanitiseCluster:
   551                              <1> ;Sanitises the cluster in eax to all zeros
   552                              <1> ;Does not move file pointers
   553                              <1> ;Currently, is only called to sanitise subdirectory clusters
   554                              <1> ;Input: eax = Cluster number
   555                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   556                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   557                              <1> ;        If CF=CY => Error, exit
   558 00001F64 50                  <1>     push rax
   559 00001F65 53                  <1>     push rbx
   560 00001F66 51                  <1>     push rcx
   561 00001F67 52                  <1>     push rdx
   562 00001F68 56                  <1>     push rsi
   563 00001F69 55                  <1>     push rbp
   564 00001F6A 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   565 00001F71 E8EEECFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   566 00001F76 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   567 00001F7A FFC2                <1>     inc edx ;Make it a count of sectors
   568                              <1> .getSectorInCluster:
   569 00001F7C E8A8EBFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   570 00001F81 721E                <1>     jc .exitBad
   571 00001F83 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   572 00001F87 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   573 00001F8B 31C0                <1>     xor eax, eax
   574 00001F8D F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   575 00001F8F E827EAFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   576                              <1> 
   577 00001F94 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   578 00001F96 740A                <1>     jz .exit    ;Jump if we done
   579 00001F98 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   580 00001F9C 48FFC0              <1>     inc rax ;Goto next sector in cluster
   581 00001F9F EBDB                <1>     jmp short .getSectorInCluster
   582                              <1> .exitBad:
   583 00001FA1 F9                  <1>     stc
   584                              <1> .exit:
   585 00001FA2 5D                  <1>     pop rbp
   586 00001FA3 5E                  <1>     pop rsi
   587 00001FA4 5A                  <1>     pop rdx
   588 00001FA5 59                  <1>     pop rcx
   589 00001FA6 5B                  <1>     pop rbx
   590 00001FA7 58                  <1>     pop rax
   591                              <1>     return
    18                              <2> %%_ret:
    19 00001FA8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/devio.asm"
    27                              <1> ;This file contains the primitive dev io function, which will be called 
    28                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    29                              <1> ; make requests for device IO.
    30                              <1> 
    31                              <1> mainCharIO:
    32                              <1> ;This is the main IO clearing function for Char IO.
    33                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    34                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    35                              <1> ;
    36                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    37                              <1> ;       ah = {0,..., 5}, a subfunction number
    38                              <1> ;       Function 0: Read Char (drvREAD)
    39                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    40                              <1> ;       Function 2: Write Char (drvWrite)
    41                              <1> ; In the case the below functions are called for Disk/Net files
    42                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    43                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    44                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    45                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    46                              <1> ;
    47                              <1> ; If and only if ah = 02h, al = Char to write to device
    48                              <1> ;
    49                              <1> ;
    50                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    51                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    52                              <1> ;                                           ZF = NZ => Device ready (not busy)
    53                              <1> ;                                               If ND read, AL = Next Char
    54                              <1> ; For Files/Net:
    55                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    56                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    57                              <1> ;           For Read and ND Read:
    58                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    59                              <1> ;               Read returns ^Z on EOF.
    60                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    61                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    62                              <1> ;
    63                              <1> ;All registers preserved EXCEPT for ax and flags
    64                              <1> 
    65                              <1> ;Reference Request Header
    66                              <1> ;Common Section:
    67                              <1> ;    .hdrlen resb 1  ;Length of the request header
    68                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    69                              <1> ;    .cmdcde resb 1  ;Command code
    70                              <1> ;    .status resw 1  ;Status word
    71                              <1> ;    .devptr resq 1  ;Reserved. Unused
    72                              <1> ;Below used by calls 0,1,2,5
    73                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    74                              <1> ;Below used by calls 0,2
    75                              <1> ;    .bufptr resq 1
    76                              <1> ;    .tfrlen resd 1
    77                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    78                              <1> ;    .strtsc resq 1
    79                              <1> ;    .desptr resq 1
    80                              <1> 
    81                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    82 00001FA9 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    83 00001FAA 488D1D(7DC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    84 00001FB1 48891D(06C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    85 00001FB8 5B                  <1>     pop rbx
    86 00001FB9 C705(0EC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    86 00001FC1 0000                <1>
    87 00001FC3 668905(7DC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    88 00001FCA 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    89 00001FD0 0F85A1000000        <1>     jnz .notChar
    90 00001FD6 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    91 00001FDC 0F8495000000        <1>     jz .notChar
    92                              <1> ;Char devices only here
    93 00001FE2 E834380000          <1>     call dosPushRegs    ;Save context here
    94 00001FE7 488D1D52E0FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    95 00001FEE 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    96 00001FF1 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    97 00001FF4 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    98 00001FF7 890D(F8C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    99                              <1>     ;Now set up cx for status word
   100 00001FFD 31C9                <1>     xor ecx, ecx
   101 00001FFF 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   102 00002002 7506                <1>     jne .skipBsySet
   103 00002004 81C900020000        <1>     or ecx, drvBsyStatus
   104                              <1> .skipBsySet:
   105 0000200A 66870D(FBC30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   106                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   107 00002011 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   108 00002018 E89E2F0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   109 0000201D 668B3D(FBC30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   110 00002024 F7C700800000        <1>     test edi, drvErrStatus
   111 0000202A 752D                <1>     jnz .error
   112                              <1> .ignoreRet:
   113 0000202C 803D(FAC30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   114 00002033 750C                <1>     jne .notNDRead
   115 00002035 8A05(05C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   116 0000203B 8805(7DC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   117                              <1> .notNDRead:
   118 00002041 8A25(FCC30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   119 00002047 F6D4                <1>     not ah
   120 00002049 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   121 0000204C E8B3370000          <1>     call dosPopRegs ;Get back the context
   122 00002051 668B05(7DC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   123                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00002058 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   124                              <1> .error:
   125                              <1>     ;cl has flags
   126 00002059 88CC                <1>     mov ah, cl
   127 0000205B E8392E0000          <1>     call charDevErr
   128 00002060 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   129 00002062 750A                <1>     jne .errorIgnore
   130                              <1>     ;Fallthrough => Retry
   131 00002064 E89B370000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   132 00002069 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   133                              <1> .errorIgnore:
   134                              <1>     ;Clear the busy bit in the status word
   135 0000206E 8025(FCC30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   136 00002075 EBB5                <1>     jmp short .ignoreRet
   137                              <1> .notChar:
   138                              <1> ;Just return with ZF=NZ for now
   139 00002077 50                  <1>     push rax
   140 00002078 31C0                <1>     xor eax, eax
   141 0000207A FEC0                <1>     inc al
   142 0000207C 58                  <1>     pop rax
   143                              <1>     return
    18                              <2> %%_ret:
    19 0000207D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> 
   145                              <1> openSFT:
   146                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   147                              <1> ;Input: rdi = SFT pointer
   148 0000207E E898370000          <1>     call dosPushRegs
   149 00002083 B00D                <1>     mov al, drvOPEN
   150 00002085 EB07                <1>     jmp short openCloseCommon
   151                              <1> closeSFT:
   152                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   153 00002087 E88F370000          <1>     call dosPushRegs
   154 0000208C B00E                <1>     mov al, drvCLOSE
   155                              <1> openCloseCommon:
   156                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   157 0000208E 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   158 00002094 7469                <1>     jz .exit    ;Exit if so
   159 00002096 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   160 0000209A 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   161 0000209E 7512                <1>     jnz .charDev
   162                              <1>     ;Here a disk drive, rdi is a DPB ptr
   163 000020A0 803D(36C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   164 000020A7 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   165 000020A9 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   166 000020AC 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   167 000020AE 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   168                              <1> .charDev:
   169 000020B2 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   170 000020B8 7445                <1>     jz .exit    ;No, exit!
   171 000020BA 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   172 000020BD 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   173 000020C4 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   174                              <1> .retryEP:
   175 000020C7 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   176 000020CA C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   177 000020CD 50                  <1>     push rax    ;Save the dword
   178 000020CE E8EC2E0000          <1>     call goDriver
   179 000020D3 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   180 000020DA F7C700800000        <1>     test edi, drvErrStatus
   181 000020E0 741C                <1>     jz .exitPop
   182                              <1>     ;Error here, check if char or block drive
   183 000020E2 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   184 000020E8 7404                <1>     jz .blockError
   185                              <1>     ;Char error here
   186 000020EA B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   187 000020EC EB04                <1>     jmp short .errorCmn
   188                              <1> .blockError:
   189 000020EE 88C8                <1>     mov al, cl  ;Move drive number into al
   190 000020F0 B406                <1>     mov ah, critData    ;Data on block dev error
   191                              <1> .errorCmn:
   192                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   193 000020F2 E8A22D0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   194 000020F7 B001                <1>     mov al, critRetry   ;al returns user response
   195 000020F9 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   196 000020FB 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   197 000020FC EBC9                <1>     jmp short .retryEP  ;Reset
   198                              <1> .exitPop:
   199 000020FE 58                  <1>     pop rax    
   200                              <1> .exit:
   201 000020FF E800370000          <1>     call dosPopRegs
   202                              <1>     return
    18                              <2> %%_ret:
    19 00002104 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    28                              <1> ;-----------------------------------------------------------------------:
    29                              <1> ;                  DOS default char functions live here                 :
    30                              <1> ;                                                                       :
    31                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    32                              <1> ;                                                                       :
    33                              <1> ;Rules for the naming of the DOS functions                              :
    34                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    35                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    36                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    37                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    38                              <1> ;                                                                       :
    39                              <1> ;-----------------------------------------------------------------------:
    40                              <1> 
    41                              <1> charIn_BE:     ;ah = 01h
    42                              <1> ;Return char that has been read and echoed in al
    43 00002105 E866010000          <1>     call charIn_B
    44 0000210A 50                  <1>     push rax
    45 0000210B E804000000          <1>     call charOut_B.in    ;Output it to screen
    46 00002110 58                  <1>     pop rax
    47                              <1>     return
    18                              <2> %%_ret:
    19 00002111 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> charOut_B:       ;ah = 02h
    50                              <1> ;Bspace is regular cursor left, does not insert a blank
    51 00002112 88D0                <1>     mov al, dl
    52                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    53 00002114 3C20                <1>     cmp al, asciiCaret
    54 00002116 7277                <1>     jb .control
    55 00002118 3C7F                <1>     cmp al, DEL ;DEL char?
    56 0000211A 7406                <1>     je .skipCurs
    57 0000211C FE05(2EC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    58                              <1> .skipCurs:
    59 00002122 FE05(34C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    60 00002128 8025(34C30300)03    <1>     and byte [vConErr], 3
    61 0000212F 56                  <1>     push rsi
    62 00002130 7507                <1>     jnz .skipErrorCheck
    63 00002132 50                  <1>     push rax
    64 00002133 E884020000          <1>     call vConCtrlCheck
    65 00002138 58                  <1>     pop rax
    66                              <1> .skipErrorCheck:
    67 00002139 E80C020000          <1>     call outputOnStdout
    68 0000213E 5E                  <1>     pop rsi
    69 0000213F F605(31C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    70                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002146 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    71 00002148 53                  <1>     push rbx
    72 00002149 56                  <1>     push rsi
    73 0000214A BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    74 0000214F E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    75 00002154 7236                <1>     jc .exitPrintEcho
    76                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    77 00002156 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    78 0000215A F7C300800000        <1>     test ebx, devRedirDev
    79 00002160 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    80 00002162 F7C380000000        <1>     test ebx, devCharDev
    81 00002168 7422                <1>     jz .exitPrintEcho
    82 0000216A BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    83 0000216F E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    84 00002174 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    85 00002176 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    86 0000217C 7407                <1>     jz .netSpool
    87 0000217E E8FB010000          <1>     call outputOnSFT
    88 00002183 EB07                <1>     jmp short .exitPrintEcho
    89                              <1> .netSpool:
    90 00002185 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    91                              <1> .exitPrintEcho:
    92 0000218C 5E                  <1>     pop rsi
    93 0000218D 5B                  <1>     pop rbx
    94                              <1>     return
    18                              <2> %%_ret:
    19 0000218E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    95                              <1> .control:
    96 0000218F 3C0D                <1>     cmp al, CR
    97 00002191 7425                <1>     je .newline
    98 00002193 3C08                <1>     cmp al, BSP
    99 00002195 742D                <1>     je .back
   100 00002197 3C09                <1>     cmp al, TAB
   101 00002199 7587                <1>     jne .skipCurs   ;Treat as normal
   102                              <1>     ;TAB key here
   103                              <1> .tab:
   104 0000219B 51                  <1>     push rcx
   105 0000219C 0FB60D(2EC20300)    <1>     movzx ecx, byte [vConCursPos]
   106 000021A3 80C9F8              <1>     or cl, ~7
   107 000021A6 F6D9                <1>     neg cl
   108 000021A8 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   109                              <1> .tabloop:
   110 000021AB B020                <1>     mov al, SPC
   111 000021AD E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   112 000021B2 FEC9                <1>     dec cl
   113 000021B4 75F5                <1>     jnz .tabloop
   114                              <1> .stopTab:
   115 000021B6 59                  <1>     pop rcx
   116                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 000021B7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> .newline:
   118 000021B8 C605(2EC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   119 000021BF E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   120                              <1> .back:
   121 000021C4 FE0D(2EC20300)      <1>     dec byte [vConCursPos]
   122 000021CA E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   123                              <1> 
   124                              <1> auxIn_B:        ;ah = 03h
   125 000021CF E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   126 000021D4 BB03000000          <1>     mov ebx, 3
   127 000021D9 E8A5020000          <1>     call getCharDevSFT
   128                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000021DE 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   129                              <1> .auxloop:
   130 000021E0 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   131 000021E2 E8C2FDFFFF          <1>     call mainCharIO
   132 000021E7 7408                <1>     jz .signalLoop
   133 000021E9 30E4                <1>     xor ah, ah  ;Read the char in
   134 000021EB E8B9FDFFFF          <1>     call mainCharIO
   135                              <1>     return
    18                              <2> %%_ret:
    19 000021F0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> .signalLoop:
   137 000021F1 E8A3010000          <1>     call callInt48h
   138 000021F6 EBE8                <1>     jmp short .auxloop
   139                              <1> 
   140                              <1> auxOut_B:       ;ah = 04h
   141 000021F8 53                  <1>     push rbx
   142 000021F9 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   143 000021FE EB06                <1>     jmp short auxOutCmn
   144                              <1> prnOut_B:       ;ah = 05h
   145 00002200 53                  <1>     push rbx
   146 00002201 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   147                              <1> auxOutCmn: ;Auxilliary output device common 
   148 00002206 88D0                <1>     mov al, dl  ;Get the char into al
   149 00002208 50                  <1>     push rax
   150 00002209 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   151 0000220E 58                  <1>     pop rax
   152 0000220F 56                  <1>     push rsi
   153 00002210 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   154 00002215 5E                  <1>     pop rsi
   155 00002216 5B                  <1>     pop rbx
   156                              <1>     return
    18                              <2> %%_ret:
    19 00002217 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   157                              <1> 
   158                              <1> directConIO:    ;ah = 06h
   159 00002218 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   160 0000221A 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   161 0000221C 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   162                              <1> ;Here is the read char direct function
   163 00002222 31DB                <1>     xor ebx, ebx    
   164 00002224 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   165                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002229 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   166 0000222B 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   167 00002232 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   168 00002234 E870FDFFFF          <1>     call mainCharIO
   169 00002239 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   170 0000223E 7507                <1>     jnz .readChar
   171 00002240 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   172 00002244 30C0                <1>     xor al, al  ;Set caller return code to 0
   173                              <1>     return
    18                              <2> %%_ret:
    19 00002246 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   174                              <1> .readChar:
   175 00002247 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   176                              <1>     ;Fallthrough here to get the char at STDIN
   177                              <1> charIn:         ;ah = 07h
   178                              <1> ;Return char in al from STDIN without waiting
   179 0000224B 31DB                <1>     xor ebx, ebx
   180 0000224D E831020000          <1>     call getCharDevSFT
   181                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002252 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   182 00002254 B401                <1>     mov ah, 01  ;ND read for char
   183 00002256 E84EFDFFFF          <1>     call mainCharIO
   184 0000225B 750B                <1>     jnz .getChar
   185 0000225D B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   186 0000225F CD4A                <1>     int 4Ah
   187 00002261 E833010000          <1>     call callInt48h
   188 00002266 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   189                              <1> .getChar:
   190                              <1>     ;Get the char in al and exit
   191 00002268 30E4                <1>     xor ah, ah
   192 0000226A E83AFDFFFF          <1>     call mainCharIO
   193                              <1>     return
    18                              <2> %%_ret:
    19 0000226F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> charIn_B:       ;ah = 08h
   195                              <1> ;Return char in al from STDIN
   196 00002270 56                  <1>     push rsi
   197                              <1> .readAgain:
   198 00002271 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   199                              <1>     ;Also sets rsi to point to the device SFT for 
   200 00002276 7543                <1>     jnz .pullChar
   201 00002278 803D(E9D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   202 0000227F 7507                <1>     jne .skiplookahead
   203 00002281 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   204 00002283 E821FDFFFF          <1>     call mainCharIO
   205                              <1> .skiplookahead:
   206 00002288 B484                <1>     mov ah, 84h
   207 0000228A CD4A                <1>     int 4ah ;Multitasking keyboard loop
   208 0000228C 66813D(B0D90300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   208 00002294 FF                  <1>
   209 00002295 751B                <1>     jne .skipClockRead
   210 00002297 E87F350000          <1>     call dosPushRegs
   211 0000229C F8                  <1>     clc ;Clear CF, write primary header to backup
   212 0000229D E882000000          <1>     call swapPrimaryHeader
   213 000022A2 E8CF060000          <1>     call readDateTimeRecord
   214 000022A7 F9                  <1>     stc ;Set CF, write backup to primary header
   215 000022A8 E877000000          <1>     call swapPrimaryHeader
   216 000022AD E852350000          <1>     call dosPopRegs
   217                              <1> .skipClockRead:
   218 000022B2 66FF05(B0D90300)    <1>     inc word [keybTicks]
   219 000022B9 EBB6                <1>     jmp short .readAgain
   220                              <1> .pullChar:
   221 000022BB 30E4                <1>     xor ah, ah
   222 000022BD E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   223 000022C2 5E                  <1>     pop rsi
   224 000022C3 3C00                <1>     cmp al, NUL ;Is this the null char?
   225 000022C5 7507                <1>     jne .exit
   226                              <1>     ;We are mid extended ascii, prevent printer toggling
   227 000022C7 C605(AFD90300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   228                              <1> .exit:
   229                              <1>     return
    18                              <2> %%_ret:
    19 000022CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> printString_B:      ;ah = 09h
   232 000022CF 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   233                              <1> .ps0:
   234 000022D2 AC                  <1>     lodsb   ;Get char in al and inc rsi
   235 000022D3 3C24                <1>     cmp al, "$" ;End of string char?
   236                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000022D5 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   237 000022D7 E838FEFFFF          <1>     call charOut_B.in
   238 000022DC EBF4                <1>     jmp short .ps0
   239                              <1> 
   240                              <1> checkStdinStatus:  ;ah = 0Bh
   241                              <1> ;Returns the status of the driver controlling vCon
   242 000022DE E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   243 000022E3 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   244                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000022E5 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   245 000022E7 FEC8                <1>     dec al  ;Set al to -1 if char available
   246                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 000022E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1> clearbuffDoFunc:   ;ah = 0Ch
   248                              <1> ;Clears any buffers and issues a console read command (the command in al)
   249                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   250 000022EA 50                  <1>     push rax
   251 000022EB 52                  <1>     push rdx
   252 000022EC 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   253 000022EE E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   254 000022F3 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   255 000022F5 B404                <1>     mov ah, 04h ;Flush input buffers
   256 000022F7 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   257                              <1> .skipFlush:
   258 000022FC 5A                  <1>     pop rdx
   259 000022FD 58                  <1>     pop rax
   260 000022FE 88C4                <1>     mov ah, al  ;Move function number into ah
   261 00002300 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   262 00002302 7507                <1>     jne .others
   263 00002304 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   264 00002307 7412                <1>     jz .bad ;Yes, exit
   265 00002309 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   266                              <1> .others:
   267 0000230B 3C01                <1>     cmp al, 01h
   268 0000230D 740F                <1>     je .callFunction
   269 0000230F 3C07                <1>     cmp al, 07h
   270 00002311 740B                <1>     je .callFunction
   271 00002313 3C08                <1>     cmp al, 08h
   272 00002315 7407                <1>     je .callFunction
   273 00002317 3C0A                <1>     cmp al, 0Ah
   274 00002319 7403                <1>     je .callFunction
   275                              <1> .bad:
   276 0000231B 30C0                <1>     xor al, al
   277                              <1>     return
    18                              <2> %%_ret:
    19 0000231D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   278                              <1> .callFunction:
   279 0000231E FA                  <1>     cli ;Prepare to swap stack pointer
   280                              <1>     ;The below address avoids "properly" reentering DOS
   281                              <1>     ;We simply reuse the function dispatch aspect. 
   282                              <1>     ;this means we dont trash the caller's register frame 
   283 0000231F E90F340000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   284                              <1> ;------------------------
   285                              <1> ;  Primitive functions  :
   286                              <1> ;------------------------
   287                              <1> swapPrimaryHeader:
   288                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   289                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   290 00002324 56                  <1>     push rsi
   291 00002325 57                  <1>     push rdi
   292 00002326 51                  <1>     push rcx
   293 00002327 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   293 00002330 00                  <1>
   294 00002331 488D35(22C40300)    <1>     lea rsi, primReqHdr
   295 00002338 488D3D(82D90300)    <1>     lea rdi, bkupReqHdr
   296 0000233F 7303                <1>     jnc .read
   297 00002341 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   298                              <1> .read:
   299 00002344 F3A4                <1>     rep movsb   ;Swap
   300 00002346 59                  <1>     pop rcx
   301 00002347 5F                  <1>     pop rdi
   302 00002348 5E                  <1>     pop rsi
   303                              <1>     return
    18                              <2> %%_ret:
    19 00002349 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> outputOnStdout:
   305                              <1> ;Input: al = Char to output
   306                              <1> ;Output: CF=CY, all good
   307 0000234A 53                  <1>     push rbx
   308 0000234B BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   309 00002350 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   310 00002355 7217                <1>     jc .exit
   311 00002357 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   312 0000235D 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   313 0000235F 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   314 00002363 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   315 00002369 7405                <1>     jz .notCharDevOrFast
   316 0000236B CD49                <1>     int 49h ;Fast output
   317                              <1> .exitOk:
   318 0000236D F8                  <1>     clc
   319                              <1> .exit:
   320 0000236E 5B                  <1>     pop rbx
   321                              <1>     return
    18                              <2> %%_ret:
    19 0000236F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   322                              <1> .notCharDevOrFast:
   323 00002370 E809000000          <1>     call outputOnSFT
   324 00002375 5B                  <1>     pop rbx
   325                              <1>     return
    18                              <2> %%_ret:
    19 00002376 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   326                              <1> 
   327                              <1> outputToHandle:
   328                              <1> ;Char to output must be in al
   329 00002377 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   330                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000237C 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   331                              <1> outputOnSFT:
   332                              <1> ;Output char in al to SFT in rsi
   333                              <1> ;Waits until device is not busy to send char.
   334                              <1> ;Calls int 48h if device busy
   335 0000237E 50                  <1>     push rax
   336 0000237F B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   337 00002381 E823FCFFFF          <1>     call mainCharIO
   338 00002386 58                  <1>     pop rax
   339 00002387 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   340 00002389 B402                <1>     mov ah, 02h ;Output char in al
   341 0000238B E819FCFFFF          <1>     call mainCharIO
   342 00002390 F8                  <1>     clc
   343                              <1>     return
    18                              <2> %%_ret:
    19 00002391 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   344                              <1> .signalLoop:
   345 00002392 E802000000          <1>     call callInt48h
   346 00002397 EBE5                <1>     jmp short outputOnSFT
   347                              <1> 
   348                              <1> callInt48h:
   349                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   350 00002399 9C                  <1>     pushfq
   351 0000239A F605(F6C30300)FF    <1>     test byte [int48Flag], -1
   352 000023A1 7417                <1>     jz .exit    ;If zero, not safe
   353 000023A3 F605(69C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   354 000023AA 750E                <1>     jnz .exit
   355                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   356 000023AC FF35(F6C30300)      <1>     push qword [int48Flag] 
   357 000023B2 CD48                <1>     int 48h
   358 000023B4 8F05(F6C30300)      <1>     pop qword [int48Flag]    ;Return original value
   359                              <1> .exit:
   360 000023BA 9D                  <1>     popfq
   361                              <1>     return
    18                              <2> %%_ret:
    19 000023BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   362                              <1> 
   363                              <1> 
   364                              <1> vConCtrlCheck:
   365                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   366                              <1> ; the processing. 
   367                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   368                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   369                              <1> ;
   370                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   371                              <1> ;^S will pause screen processing until another key is processed by vCon input
   372                              <1> ;^P will toggle the printer echo feature of the vConsole
   373                              <1> ;
   374                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   375                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   376                              <1> ;
   377                              <1> ;Output: 
   378                              <1> ;   CF=CY : Error
   379                              <1> ;   CF=NC : ...
   380                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   381                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   382 000023BC E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   383 000023C1 53                  <1>     push rbx
   384 000023C2 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   385 000023C4 E8BA000000          <1>     call getCharDevSFT
   386 000023C9 5B                  <1>     pop rbx
   387                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000023CA 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   388 000023CC B401                <1>     mov ah, 01  ;Non destructively read CON
   389 000023CE E8D6FBFFFF          <1>     call mainCharIO
   390 000023D3 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   391                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   392 000023D5 3C13                <1>     cmp al, DC3 ;^S ?
   393 000023D7 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   394 000023D9 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   395 000023DB E8C9FBFFFF          <1>     call mainCharIO
   396 000023E0 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   397                              <1> .checkPrintOrExit:
   398 000023E5 3C10                <1>     cmp al, DLE ;Do we have ^P?
   399 000023E7 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   400 000023E9 3C03                <1>     cmp al, ETX ;Do we have ^C?
   401 000023EB 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   402                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   403                              <1>     return 
    18                              <2> %%_ret:
    19 000023ED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   404                              <1> .printToggle:
   405 000023EE F615(31C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   406 000023F4 53                  <1>     push rbx
   407 000023F5 BB04000000          <1>     mov ebx, 4  ;PRN handle
   408 000023FA E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   409 000023FF 5B                  <1>     pop rbx
   410                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002400 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   411 00002402 57                  <1>     push rdi
   412 00002403 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   413 00002406 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   414 0000240C 741D                <1>     jz .notNet
   415 0000240E 50                  <1>     push rax
   416 0000240F B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   417 00002414 CD4F                <1>     int 4Fh
   418 00002416 58                  <1>     pop rax
   419 00002417 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   420                              <1>     ;If something went wrong, turn off echo
   421 00002419 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   422 00002420 50                  <1>     push rax
   423 00002421 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   424 00002426 CD4F                <1>     int 4Fh
   425 00002428 58                  <1>     pop rax
   426 00002429 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   427                              <1> .notNet:
   428                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   429                              <1> ; 0Dh or 0Eh
   430 0000242B 803D(31C30300)00    <1>     cmp byte [printEcho], 00
   431 00002432 7507                <1>     jnz .echoOn
   432 00002434 E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   433 00002439 EB05                <1>     jmp short .printExit
   434                              <1> .echoOn:
   435 0000243B E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   436                              <1> .printExit:
   437 00002440 5F                  <1>     pop rdi
   438                              <1>     return
    18                              <2> %%_ret:
    19 00002441 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   439                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   440 00002442 E852FFFFFF          <1>     call callInt48h
   441                              <1> .waitNextChar:   ;Here get next char
   442 00002447 B401                <1>     mov ah, 01h ;ND read
   443 00002449 E85BFBFFFF          <1>     call mainCharIO
   444 0000244E 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   445                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   446 00002450 53                  <1>     push rbx
   447 00002451 31DB                <1>     xor ebx, ebx
   448 00002453 E82B000000          <1>     call getCharDevSFT
   449 00002458 5B                  <1>     pop rbx
   450                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002459 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   451 0000245B 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   452 0000245D E847FBFFFF          <1>     call mainCharIO
   453 00002462 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   454 00002464 7514                <1>     jnz .checkBreak2
   455 00002466 803D(AFD90300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   456 0000246D 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   457 00002473 C605(AFD90300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   458                              <1> .checkBreak2:
   459 0000247A 3C03                <1>     cmp al, ETX
   460                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000247C 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   461 0000247E E9CF2A0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   462                              <1> 
   463                              <1> 
   464                              <1> getCharDevSFT:
   465                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   466                              <1> ;Input: bx = zero extended handle number
   467                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   468                              <1> ;        CF=CY => al = Error code, abort operation
   469 00002483 F605(F5C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   470 0000248A 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   471                              <1> .getSFT:
   472 0000248C 57                  <1>     push rdi
   473 0000248D E8D81A0000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   474 00002492 4889FE              <1>     mov rsi, rdi
   475 00002495 5F                  <1>     pop rdi
   476                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00002496 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   477                              <1> .swap:
   478                              <1> ;workingSFT is only set for CON calls
   479 00002497 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   480 0000249D 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   481 0000249F 488B35(74C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   482 000024A6 F8                  <1>     clc
   483                              <1>     return
    18                              <2> %%_ret:
    19 000024A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   484                              <1> 
   485                              <1> ;------------------------
   486                              <1> ;   Utility functions   :
   487                              <1> ;------------------------
   488                              <1> printCaretASCII:
   489                              <1> ;Input: al = Char to print with a caret
   490                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   491                              <1> ;First check if the char should be careted, and then print normally if so
   492 000024A8 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   493 000024AA 0F8364FCFFFF        <1>     jae charOut_B.in
   494 000024B0 3C09                <1>     cmp al, TAB
   495 000024B2 0F845CFCFFFF        <1>     je charOut_B.in
   496 000024B8 3C15                <1>     cmp al, NAK
   497 000024BA 0F8454FCFFFF        <1>     je charOut_B.in
   498 000024C0 3C14                <1>     cmp al, DC4
   499 000024C2 0F844CFCFFFF        <1>     je charOut_B.in
   500 000024C8 50                  <1>     push rax
   501 000024C9 B05E                <1>     mov al, "^" ;Get caret in place
   502 000024CB E844FCFFFF          <1>     call charOut_B.in
   503 000024D0 58                  <1>     pop rax
   504 000024D1 0440                <1>     add al, "@" ;Turn into an ASCII Char
   505 000024D3 E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   506                              <1> printCRLF:
   507 000024D8 B00D                <1>     mov al, CR
   508 000024DA E835FCFFFF          <1>     call charOut_B.in
   509 000024DF B00A                <1>     mov al, LF
   510 000024E1 E92EFCFFFF          <1>     jmp charOut_B.in
   511                              <1> 
   512                              <1> checkBreak:
   513                              <1> ;Reads bytes from CON if there are any bytes to read and 
   514                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   515 000024E6 803D(6AC30300)01    <1>     cmp byte [inDOS], 1
   516                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000024ED 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   517                              <1> ;Returns in al the keystroke that is available IF one is available
   518                              <1> ; or al=0 if no keystroke available
   519 000024EF 53                  <1>     push rbx
   520 000024F0 56                  <1>     push rsi
   521 000024F1 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   522                              <1>     ;Place command code and a zero status word at the same time
   523 000024F8 C705(4EC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   523 00002500 0000                <1>
   524                              <1>     ;Place the packet size in the hdrlen field
   525 00002502 C605(4CC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   526 00002509 488D1D(4CC40300)    <1>     lea rbx, critReqHdr
   527 00002510 E8AA2A0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   528                              <1>     ;Check if the busy bit is set (No keystroke available)
   529 00002515 66F705(4FC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   529 0000251D 02                  <1>
   530 0000251E 7405                <1>     jz .charFound
   531                              <1> .exit:
   532 00002520 30C0                <1>     xor al, al
   533 00002522 5E                  <1>     pop rsi
   534 00002523 5B                  <1>     pop rbx
   535                              <1>     return
    18                              <2> %%_ret:
    19 00002524 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   536                              <1> .charFound:
   537                              <1> ;Keystroke available, proceed
   538 00002525 8A05(59C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   539 0000252B 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   540 0000252D 75F1                <1>     jne .exit   ;If not equal exit
   541                              <1> ;Now we pull the char out of the buffer
   542 0000252F C705(4EC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   542 00002537 0000                <1>
   543 00002539 C605(4CC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   544                              <1>     ;Place pointers and number of chars
   545 00002540 C705(62C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   545 00002548 0000                <1>
   546                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   547 0000254A 488D05(59C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   548 00002551 488905(5AC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   549 00002558 E8622A0000          <1>     call goDriver   ;RSI and RBX as before
   550 0000255D E9F0290000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   551                              <1> 
   552                              <1> vConSwapDriver:
   553                              <1> ;Sets up the vCon to use the alternative SFT pointer
   554 00002562 57                  <1>     push rdi
   555 00002563 C605(F5C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   556 0000256A 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   557 00002571 48893D(74C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   558 00002578 5F                  <1>     pop rdi
   559                              <1>     return
    18                              <2> %%_ret:
    19 00002579 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> vConRetDriver:
   562                              <1> ;Returns the original driver (sets flag down)
   563 0000257A C605(F5C30300)00    <1>     mov byte [vConDrvSwp], 0
   564                              <1>     return
    18                              <2> %%_ret:
    19 00002581 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> ;--------------------------------------------------
   567                              <1> ;      Main Keyboard Buffered Input Function      :
   568                              <1> ;--------------------------------------------------
   569                              <1> buffCharInput_BE:  ;ah = 0Ah
   570                              <1> ;Buffer pointer in rdx
   571                              <1> ; byte [rdx + 0], buffer length
   572                              <1> ; byte [rdx + 1], number of chars in buffer
   573                              <1> ; byte [rdx + 2], buffer start
   574                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   575                              <1> ;Register use
   576                              <1> ; dh = Char offset in internal buffer
   577                              <1> ; dl = Buffer length
   578                              <1> ; bh = Char offset in user buffer
   579                              <1> ; bl = Number of chars already in the buffer
   580                              <1> ; rdi = Internal buffer
   581                              <1> ; rsi = User buffer
   582 00002582 4889D6              <1>     mov rsi, rdx
   583 00002585 66AD                <1>     lodsw   ;Get buffer metadata in ax
   584 00002587 84C0                <1>     test al, al
   585                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002589 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   586 0000258B 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   587 0000258E 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   588 00002590 7606                <1>     jbe .avoidcheck
   589 00002592 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   590 00002596 7402                <1>     je .functionKeyOk
   591                              <1> .avoidcheck:
   592 00002598 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   593                              <1> .functionKeyOk:
   594 0000259A 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   595 0000259D FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   596                              <1> .breakEP:
   597 0000259F 8A05(2EC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   598 000025A5 8805(2FC20300)      <1>     mov byte [vConCurCnt], al
   599 000025AB 56                  <1>     push rsi    ;Push user buffer address
   600 000025AC 488D3D(30C20300)    <1>     lea rdi, vConBuffer
   601 000025B3 C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   602                              <1> .mainLoop:
   603 000025BA E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   604 000025BF 3C0A                <1>     cmp al, LF
   605 000025C1 7505                <1>     jne .checkControlChars
   606                              <1> .mainLoop2:
   607 000025C3 E8A8FCFFFF          <1>     call charIn_B
   608                              <1> .checkControlChars:
   609 000025C8 3C06                <1>     cmp al, ACK
   610 000025CA 74F7                <1>     je .mainLoop2   ;Get another char
   611 000025CC 3A058EDAFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   612 000025D2 0F8426010000        <1>     je .escape
   613 000025D8 3C7F                <1>     cmp al, DEL
   614 000025DA 0F8489000000        <1>     je .delete
   615 000025E0 3C08                <1>     cmp al, BSP
   616 000025E2 0F8481000000        <1>     je .delete
   617 000025E8 3C17                <1>     cmp al, ETB
   618                              <1>     ;Add space for patched jump instructions
   619 000025EA 9090909090          <1>     db 5 dup (90h)  ;NOP
   620 000025EF 3C15                <1>     cmp al, NAK
   621 000025F1 9090909090          <1>     db 5 dup (90h)
   622 000025F6 3C0D                <1>     cmp al, CR
   623 000025F8 744C                <1>     je .carriageReturn
   624 000025FA 3C0A                <1>     cmp al, LF
   625 000025FC 7461                <1>     je .lineFeed
   626 000025FE 3A055DDAFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   627 00002604 7429                <1>     je .break
   628                              <1> .checkIfCanInsert:
   629 00002606 38D6                <1>     cmp dh, dl
   630 00002608 731C                <1>     jae .bufOflw
   631 0000260A AA                  <1>     stosb   ;Store the byte and increment rdi!
   632 0000260B FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   633 0000260D E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   634 00002612 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   635 00002619 75A8                <1>     jne .mainLoop2
   636                              <1>     ;IF not in insert mode, we fall here
   637                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   638                              <1>     ; or insert chars if needed.
   639 0000261B 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   640 0000261D 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   641 0000261F 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   642 00002622 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   643 00002624 EB9D                <1>     jmp short .mainLoop2
   644                              <1> .bufOflw:
   645                              <1> ;Buffer overflow
   646 00002626 B007                <1>     mov al, BEL ;Sound the bell
   647 00002628 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   648 0000262D EB94                <1>     jmp short .mainLoop2
   649                              <1> .break:
   650                              <1> ;Break, Place a "\", and do a CRLF
   651 0000262F B05C                <1>     mov al, "\"
   652 00002631 E8DEFAFFFF          <1>     call charOut_B.in
   653 00002636 5E                  <1>     pop rsi ;Realign stack
   654                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   655 00002637 E89CFEFFFF          <1>     call printCRLF
   656                              <1>     ;Align to next tabstop
   657 0000263C E85AFBFFFF          <1>     call charOut_B.tab
   658 00002641 E959FFFFFF          <1>     jmp .breakEP
   659                              <1> .carriageReturn:
   660 00002646 AA                  <1>     stosb
   661 00002647 E8C8FAFFFF          <1>     call charOut_B.in
   662 0000264C 5F                  <1>     pop rdi ;User buffer address was pushed 
   663 0000264D 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   664 00002650 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   665                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   666 00002652 488D35(30C20300)    <1>     lea rsi, vConBuffer
   667 00002659 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   668 0000265C F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   669                              <1>     return
    18                              <2> %%_ret:
    19 0000265E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   670                              <1> .lineFeed:
   671 0000265F E874FEFFFF          <1>     call printCRLF
   672 00002664 E95AFFFFFF          <1>     jmp .mainLoop2
   673                              <1> .delete:
   674 00002669 E805000000          <1>     call .removeChar
   675 0000266E E950FFFFFF          <1>     jmp .mainLoop2
   676                              <1> .removeChar:
   677 00002673 84F6                <1>     test dh, dh ;Is char count 0?
   678 00002675 741C                <1>     jz .normalChar   ;If so, skip going back!
   679 00002677 E868000000          <1>     call .vConErase
   680 0000267C 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   681 0000267E 3C20                <1>     cmp al, SPC
   682 00002680 7311                <1>     jae .normalChar
   683 00002682 3C09                <1>     cmp al, TAB
   684 00002684 7420                <1>     je .eraTab
   685 00002686 3C15                <1>     cmp al, NAK
   686 00002688 7409                <1>     je .normalChar
   687 0000268A 3C14                <1>     cmp al, DC4
   688 0000268C 7405                <1>     je .normalChar
   689 0000268E E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   690                              <1> .normalChar:
   691 00002693 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   692                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000269A 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   693 0000269C 84FF                <1>     test bh, bh ;Beginning of user buffer?
   694                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000269E 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   695 000026A0 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   696 000026A3 FECF                <1>     dec bh
   697                              <1>     return
    18                              <2> %%_ret:
    19 000026A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   698                              <1> .eraTab:
   699                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   700                              <1> ; up to a tab stop worth of space chars printed
   701 000026A6 57                  <1>     push rdi
   702 000026A7 48FFCF              <1>     dec rdi
   703 000026AA FD                  <1>     std ;Go backwards
   704 000026AB 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   705 000026AE B020                <1>     mov al, SPC
   706 000026B0 53                  <1>     push rbx
   707 000026B1 BB07000000          <1>     mov ebx, 7
   708 000026B6 67E30D              <1>     jecxz .onTabstop
   709                              <1> .scanString:
   710 000026B9 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   711 000026BA 7608                <1>     jbe .notChar    ;No, skip handling
   712 000026BC 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   713 000026C0 740A                <1>     je .tabChar
   714 000026C2 FECB                <1>     dec bl
   715                              <1> .notChar:
   716 000026C4 E2F3                <1>     loop .scanString
   717                              <1> .onTabstop:
   718 000026C6 2A1D(2FC20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   719                              <1> .tabChar:
   720 000026CC 28F3                <1>     sub bl, dh  ;Same on tabstop
   721 000026CE 00D9                <1>     add cl, bl
   722 000026D0 80E107              <1>     and cl, 7
   723 000026D3 5B                  <1>     pop rbx
   724 000026D4 5F                  <1>     pop rdi
   725 000026D5 FC                  <1>     cld
   726 000026D6 74BB                <1>     jz .normalChar
   727                              <1>     ;Now erase all the spaces placed on the vCon
   728                              <1> .vConDelTab:
   729 000026D8 E80C000000          <1>     call .vConEraseNoDec
   730 000026DD E2F9                <1>     loop .vConDelTab
   731 000026DF E9AFFFFFFF          <1>     jmp .normalChar
   732                              <1> .vConErase:
   733                              <1> ;Erase the char on the vCon
   734                              <1> ;Return through the output function
   735 000026E4 48FFCF              <1>     dec rdi ;Go back a space in the 
   736 000026E7 FECE                <1>     dec dh  ;Decrement char count in the buffer
   737                              <1> .vConEraseNoDec:
   738 000026E9 B008                <1>     mov al, BSP ;Move cursor back
   739 000026EB E824FAFFFF          <1>     call charOut_B.in
   740 000026F0 B020                <1>     mov al, SPC ;Replace with a space
   741 000026F2 E81DFAFFFF          <1>     call charOut_B.in
   742 000026F7 B008                <1>     mov al, BSP ;Move cursor back again
   743 000026F9 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   744                              <1> .escape:
   745                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   746                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   747                              <1> ; including the function keys.
   748 000026FE FF2554D9FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   749                              <1> .f2:
   750 00002704 E846000000          <1>     call .fCommon2
   751 00002709 EB0C                <1>     jmp short .fCommon
   752                              <1> .f3:
   753 0000270B 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   754 0000270E 28F9                <1>     sub cl, bh  ;Sub our current position
   755 00002710 EB05                <1>     jmp short .fCommon
   756                              <1> .f1:
   757 00002712 B901000000          <1>     mov ecx, 1  ;Get one char
   758                              <1> .fCommon:
   759 00002717 C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   760 0000271E 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   761 00002720 0F849DFEFFFF        <1>     je .mainLoop2
   762 00002726 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   763 00002728 0F8495FEFFFF        <1>     je .mainLoop2
   764                              <1>     ;Else, copy byte by byte, and retain char in al
   765 0000272E AC                  <1>     lodsb
   766 0000272F AA                  <1>     stosb
   767 00002730 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   768 00002735 FEC7                <1>     inc bh
   769 00002737 FEC6                <1>     inc dh
   770 00002739 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   771 0000273B E983FEFFFF          <1>     jmp .mainLoop2
   772                              <1> .f4:
   773 00002740 E80A000000          <1>     call .fCommon2
   774 00002745 4801CE              <1>     add rsi, rcx
   775 00002748 00CF                <1>     add bh, cl
   776 0000274A E974FEFFFF          <1>     jmp .mainLoop2
   777                              <1> .fCommon2:
   778 0000274F E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   779 00002754 3A0506D9FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   780 0000275A 750B                <1>     jne .fnotEscape
   781                              <1>     ;Get another char if they typed escape and force it in the buffer
   782                              <1>     ; Do not return to caller
   783 0000275C E80FFBFFFF          <1>     call charIn_B
   784                              <1> .fforceExit:
   785 00002761 59                  <1>     pop rcx ;Get original return address from stack
   786 00002762 E95CFEFFFF          <1>     jmp .mainLoop2
   787                              <1> .fnotEscape:
   788 00002767 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   789 0000276A 28F9                <1>     sub cl, bh
   790 0000276C 74F3                <1>     jz .fforceExit
   791 0000276E FFC9                <1>     dec ecx
   792 00002770 74EF                <1>     jz .fforceExit
   793 00002772 57                  <1>     push rdi
   794 00002773 4889F7              <1>     mov rdi, rsi
   795 00002776 48FFC7              <1>     inc rdi
   796 00002779 F2AE                <1>     repne scasb ;Search for the char to start printing from
   797 0000277B 5F                  <1>     pop rdi
   798 0000277C 75E3                <1>     jne .fforceExit ;If char not found, return
   799 0000277E F6D1                <1>     not cl
   800 00002780 00D9                <1>     add cl, bl
   801 00002782 28F9                <1>     sub cl, bh
   802                              <1>     return
    18                              <2> %%_ret:
    19 00002784 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   803                              <1> .f5:
   804 00002785 B040                <1>     mov al, "@"
   805 00002787 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   806 0000278C 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   807 0000278D 57                  <1>     push rdi
   808 0000278E E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   809 00002793 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   810 00002794 88F3                <1>     mov bl, dh
   811 00002796 E99CFEFFFF          <1>     jmp .breakAlt
   812                              <1> .f6:
   813                              <1> ;If the user wants to insert a EOF, they can use F6
   814 0000279B B01A                <1>     mov al, EOF
   815 0000279D E964FEFFFF          <1>     jmp .checkIfCanInsert
   816                              <1> .f7:
   817                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   818 000027A2 8A05B8D8FFFF        <1>     mov al, byte [extESC]
   819 000027A8 E959FEFFFF          <1>     jmp .checkIfCanInsert
   820                              <1> .toggleIns:
   821 000027AD F615(5DC60300)      <1>     not byte [vConInsert]   ;Toggle
   822                              <1>     return
    18                              <2> %%_ret:
    19 000027B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   823                              <1> .eDel:
   824 000027B4 38DF                <1>     cmp bh, bl
   825 000027B6 0F8407FEFFFF        <1>     je .mainLoop2
   826 000027BC FEC7                <1>     inc bh
   827 000027BE 48FFC6              <1>     inc rsi
   828 000027C1 E9FDFDFFFF          <1>     jmp .mainLoop2
   829                              <1> 
   830                              <1> editKeys:
   831                              <1> ;Our Default Extended keys handler
   832 000027C6 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   833 000027CB B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   834 000027D0 57                  <1>     push rdi    ;Preserve rdi
   835 000027D1 488D3D8AD8FFFF      <1>     lea rdi, extKeyTbl
   836 000027D8 57                  <1>     push rdi
   837                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   838                              <1>     ; offset of function from extKeyTbl
   839                              <1> .lp:
   840 000027D9 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   841 000027DA 7411                <1>     je .charFound
   842 000027DC FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   843 000027DE 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   844 000027E4 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   845 000027EB EBEC                <1>     jmp short .lp
   846                              <1> .charFound:
   847 000027ED 59                  <1>     pop rcx ;Pop back the effective address of the table
   848 000027EE 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   849 000027F2 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   850 000027F5 5F                  <1>     pop rdi
   851 000027F6 FFE1                <1>     jmp rcx
    28                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    29                              <1> ;Major kernel date time functions and subroutines
    30                              <1> 
    31                              <1> getDate:           ;ah = 2Ah
    32 000027F8 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    33 000027FD E8DC2B0000          <1>     call getUserRegs
    34 00002802 668B15(EFC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    35                              <1> ;    mov dh, byte [monthOfYear]
    36 00002809 0FB60D(F1C30300)    <1>     movzx ecx, byte [years]
    37 00002810 8A05(F4C30300)      <1>     mov al, byte [dayOfWeek]
    38 00002816 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    39 0000281A 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    40                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 0000281E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                              <1> setDate:           ;ah = 2Bh
    42                              <1> ;	CX = year (1980-2099)
    43                              <1> ;   DH = month (1-12)
    44                              <1> ;	DL = day (1-31)
    45 0000281F E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    46                              <1>     return
    18                              <2> %%_ret:
    19 00002824 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> getTime:           ;ah = 2Ch
    48 00002825 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    49 0000282A E8AF2B0000          <1>     call getUserRegs
    50 0000282F 668B0D(79C40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    51 00002836 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    52 0000283D 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    53 00002841 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    54                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002845 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> setTime:           ;ah = 2Dh
    56                              <1> ;   CH = hour (0-23)
    57                              <1> ;	CL = minutes (0-59)
    58                              <1> ;	DH = seconds (0-59)
    59                              <1> ;	DL = hundredths (0-99)
    60 00002846 80FD17              <1>     cmp ch, 23
    61 00002849 7749                <1>     ja .exitBad
    62 0000284B 80F93B              <1>     cmp cl, 59
    63 0000284E 7744                <1>     ja .exitBad
    64 00002850 80FE3B              <1>     cmp dh, 59
    65 00002853 773F                <1>     ja .exitBad
    66 00002855 80FA63              <1>     cmp dl, 99
    67 00002858 773A                <1>     ja .exitBad
    68                              <1> ;Now we read date (updating internal count if necessary)
    69 0000285A E817010000          <1>     call readDateTimeRecord
    70 0000285F 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    71 00002866 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    72 0000286D 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    73 00002870 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    74 00002874 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    75 00002878 B906000000          <1>     mov ecx, 6
    76 0000287D 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    77 00002880 E8CF290000          <1>     call primReqWriteSetup   ;rbx now points to request header
    78 00002885 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    79 0000288C E82E270000          <1>     call goDriver
    80 00002891 30C0                <1>     xor al, al
    81                              <1>     return
    18                              <2> %%_ret:
    19 00002893 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> .exitBad:
    83 00002894 B0FF                <1>     mov al, -1
    84                              <1>     return
    18                              <2> %%_ret:
    19 00002896 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> ;------------------------
    86                              <1> ;   Utility functions   :
    87                              <1> ;------------------------
    88                              <1> writeDate:
    89 00002897 6681F97800          <1>     cmp cx, 120
    90 0000289C 0F83D1000000        <1>     jae .exitBad
    91 000028A2 80FE0C              <1>     cmp dh, 12
    92 000028A5 0F87C8000000        <1>     ja .exitBad
    93 000028AB 80FA1F              <1>     cmp dl, 31
    94 000028AE 0F87BF000000        <1>     ja .exitBad
    95 000028B4 668915(EFC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    96                              <1>     ;mov byte [monthOfYear], dh
    97 000028BB 880D(F1C30300)      <1>     mov byte [years], cl    ;Save the years count
    98 000028C1 E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    99 000028C6 88CD                <1>     mov ch, cl ;Get years count in ch
   100 000028C8 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   101 000028CB 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   102 000028CE 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   103 000028D1 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   104 000028D6 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   105                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   106 000028D8 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   107 000028DB 67E316              <1>     jecxz .addDay    ;Skip adding years
   108 000028DE 056E010000          <1>     add eax, 366    ;First add for a leap year
   109                              <1> .addYears:
   110 000028E3 FFC9                <1>     dec ecx
   111 000028E5 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   112 000028E8 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   113 000028ED EBF4                <1>     jmp short .addYears
   114                              <1> .addLeap:
   115 000028EF 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   116                              <1> .addDay:
   117 000028F4 89C2                <1>     mov edx, eax    ;Save this number in edx
   118                              <1>     ;Now to add day offset
   119 000028F6 0FB60D(F0C30300)    <1>     movzx ecx, byte [monthOfYear]
   120 000028FD 488D357FD7FFFF      <1>     lea rsi, monthsTbl
   121                              <1> .addDaysInMonth:
   122 00002904 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   123 00002906 67E308              <1>     jecxz .addMonthOffset
   124 00002909 AC                  <1>     lodsb   ;Get the number of days in the month in al
   125 0000290A 0FB6C0              <1>     movzx eax, al
   126 0000290D 01C2                <1>     add edx, eax
   127 0000290F EBF3                <1>     jmp short .addDaysInMonth
   128                              <1> .addMonthOffset:
   129 00002911 0FB60D(EFC30300)    <1>     movzx ecx, byte [dayOfMonth]
   130 00002918 FFC9                <1>     dec ecx
   131 0000291A 01CA                <1>     add edx, ecx    ;Add month offset
   132                              <1>     ;edx has the number of days since 01/01/1980
   133 0000291C 668915(F2C30300)    <1>     mov word [daysOffset], dx   ;Store!
   134                              <1> ;Now read and then write CLOCKrecrd
   135 00002923 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   136 0000292A B906000000          <1>     mov ecx, 6
   137 0000292F 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   138 00002932 E828290000          <1>     call primReqReadSetup   ;rbx now points to request header
   139 00002937 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   140 0000293E E87C260000          <1>     call goDriver
   141                              <1> ;Now we change daycount and write it back
   142 00002943 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   143 0000294A 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   144 00002951 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   145 00002954 B906000000          <1>     mov ecx, 6
   146 00002959 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   147 0000295C E8F3280000          <1>     call primReqWriteSetup   ;rbx now points to request header
   148 00002961 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   149 00002968 E852260000          <1>     call goDriver
   150 0000296D E8AE000000          <1>     call setDayofWeek
   151                              <1>     return
    18                              <2> %%_ret:
    19 00002972 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> .exitBad:
   153 00002973 B0FF                <1>     mov al, -1
   154                              <1>     return
    18                              <2> %%_ret:
    19 00002975 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> 
   156                              <1> readDateTimeRecord:
   157                              <1> ;Will read the clock using the primary request header
   158                              <1> ;Preserves all regs except eax and flags
   159 00002976 53                  <1>     push rbx
   160 00002977 51                  <1>     push rcx
   161 00002978 52                  <1>     push rdx
   162 00002979 56                  <1>     push rsi
   163 0000297A 55                  <1>     push rbp
   164                              <1> 
   165 0000297B 66C705(B0D90300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   165 00002983 00                  <1>
   166 00002984 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   167 0000298B B906000000          <1>     mov ecx, 6
   168 00002990 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   169                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   170                              <1> ; rbx = Data storage buffer ptr
   171                              <1> ; ecx = Number of sectors to transfer
   172                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   173 00002993 E8C7280000          <1>     call primReqReadSetup   ;rbx now points to request header
   174 00002998 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   175 0000299F E81B260000          <1>     call goDriver
   176 000029A4 0FB705(77C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   177                              <1> ;Here we have:  ax = Days since 1/1/1980
   178                              <1> ;Updates the internal date fields
   179                              <1> ;Internal time fields are in the clock record
   180                              <1> ;So now we check if the number of days since 1980 are the same.
   181                              <1> ;If so, we can skip updating.
   182 000029AB 663B05(F2C30300)    <1>     cmp ax, word [daysOffset]
   183 000029B2 7466                <1>     je .exit    ;Return if equal
   184 000029B4 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   185 000029B9 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   186 000029BB 668905(F2C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   187                              <1>     ;Now want to update years, month and day fields
   188                              <1>     ;ax has the number of days since 01/01/1980
   189                              <1>     ;Get days in a 4 year period
   190 000029C2 BBB5050000          <1>     mov ebx, 365*4 + 1
   191 000029C7 31D2                <1>     xor edx, edx
   192 000029C9 89D1                <1>     mov ecx, edx  ;Zero ecx
   193 000029CB F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   194                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   195                              <1>     ;edx has offset into current 4 year bunch
   196 000029CD BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   197 000029D2 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   198 000029D4 7210                <1>     jb .foundBunch
   199 000029D6 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   200 000029D8 FFC1                <1>     inc ecx
   201 000029DA FFCB                <1>     dec ebx ;Number of days in a normal year
   202                              <1> .findBunch:
   203 000029DC 39DA                <1>     cmp edx, ebx
   204 000029DE 7206                <1>     jb .foundBunch
   205 000029E0 29DA                <1>     sub edx, ebx
   206 000029E2 FFC1                <1>     inc ecx
   207 000029E4 EBF6                <1>     jmp short .findBunch
   208                              <1> .foundBunch:
   209                              <1>     ;If ecx = 0, february has 29 days!
   210                              <1>     ;eax has number of four year bunches elapsed since 1980
   211 000029E6 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   212 000029E9 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   213                              <1>     ;ecx now has the number of years since 1980
   214 000029EB E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   215                              <1> ;edx has number of days into the year we are in
   216                              <1> ;eax has number of days in Feb for this year
   217 000029F0 488D358CD6FFFF      <1>     lea rsi, monthsTbl
   218 000029F7 31C9                <1>     xor ecx, ecx    ;Use as month counter
   219                              <1> .monthSearch:
   220 000029F9 FFC1                <1>     inc ecx ;Start from 1
   221 000029FB AC                  <1>     lodsb   ;Get value in al and inc rsi
   222 000029FC 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   223 000029FF 39C2                <1>     cmp edx, eax
   224 00002A01 7204                <1>     jb .monthFound
   225 00002A03 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   226 00002A05 EBF2                <1>     jmp short .monthSearch
   227                              <1> .monthFound:
   228                              <1>     ;cl has the month (01h-0Ch)
   229                              <1>     ;dl has the day of the month - 1
   230 00002A07 FFC2                <1>     inc edx
   231 00002A09 880D(F0C30300)      <1>     mov byte [monthOfYear], cl
   232 00002A0F 8815(EFC30300)      <1>     mov byte [dayOfMonth], dl
   233 00002A15 E806000000          <1>     call setDayofWeek
   234                              <1> .exit:
   235 00002A1A 5D                  <1>     pop rbp
   236 00002A1B 5E                  <1>     pop rsi
   237 00002A1C 5A                  <1>     pop rdx
   238 00002A1D 59                  <1>     pop rcx
   239 00002A1E 5B                  <1>     pop rbx
   240                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 00002A1F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   241                              <1> 
   242                              <1> setDayofWeek:
   243                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   244 00002A20 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   245 00002A27 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   246                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   247 00002A2C 31D2                <1>     xor edx, edx
   248 00002A2E B907000000          <1>     mov ecx, 7   
   249 00002A33 F7F1                <1>     div ecx  ;Get remainder in dl
   250 00002A35 8815(F4C30300)      <1>     mov byte [dayOfWeek], dl
   251                              <1> ;Set ZF to indicate all ok
   252 00002A3B 31C0                <1>     xor eax, eax
   253                              <1>     return
    18                              <2> %%_ret:
    19 00002A3D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> 
   255                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   256                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   257                              <1> ;Input: cl = Year - 1980
   258                              <1> ;Output: al = Number of days in February
   259 00002A3E 880D(F1C30300)      <1>     mov byte [years], cl    ;Save this figure
   260 00002A44 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   261 00002A47 51                  <1>     push rcx
   262 00002A48 57                  <1>     push rdi
   263 00002A49 B81C000000          <1>     mov eax, 28  ;Usual days in february
   264 00002A4E B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   265 00002A53 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   266 00002A56 488D3D27D6FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   267 00002A5D AA                  <1>     stosb   ;Store the word in rdi
   268 00002A5E 5F                  <1>     pop rdi
   269 00002A5F 59                  <1>     pop rcx
   270                              <1>     return
    18                              <2> %%_ret:
    19 00002A60 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> 
   272                              <1> getDirDTwords:
   273                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   274                              <1> ; High word of eax = Date
   275                              <1> ; Low word of eax = Time
   276                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   277                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   278                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   279                              <1> 
   280                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   281                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   282                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   283                              <1> ;Preserves all registers except eax
   284 00002A61 53                  <1>     push rbx
   285 00002A62 0FB61D(7CC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   286 00002A69 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   287 00002A6B 89D8                <1>     mov eax, ebx
   288 00002A6D 0FB61D(79C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   289 00002A74 C1E305              <1>     shl ebx, 5
   290 00002A77 09D8                <1>     or eax, ebx
   291 00002A79 0FB61D(7AC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   292 00002A80 C1E30B              <1>     shl ebx, 11
   293 00002A83 09D8                <1>     or eax, ebx
   294 00002A85 0FB61D(EFC30300)    <1>     movzx ebx, byte [dayOfMonth]
   295 00002A8C C1E310              <1>     shl ebx, 16
   296 00002A8F 09D8                <1>     or eax, ebx
   297 00002A91 0FB61D(F0C30300)    <1>     movzx ebx, byte [monthOfYear]
   298 00002A98 C1E315              <1>     shl ebx, 21
   299 00002A9B 09D8                <1>     or eax, ebx
   300 00002A9D 0FB61D(F1C30300)    <1>     movzx ebx, byte [years]
   301 00002AA4 C1E319              <1>     shl ebx, 25
   302 00002AA7 09D8                <1>     or eax, ebx
   303 00002AA9 5B                  <1>     pop rbx
   304                              <1>     return
    18                              <2> %%_ret:
    19 00002AAA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   306                              <1> ;Returns edx = time
   307                              <1> ;        eax = date
   308                              <1> ; Formally ax and dx but we clear the upper words
   309 00002AAB E8C6FEFFFF          <1>     call readDateTimeRecord
   310 00002AB0 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   311 00002AB5 31D2                <1>     xor edx, edx
   312 00002AB7 6689C2              <1>     mov dx, ax  ;Save time
   313 00002ABA C1E810              <1>     shr eax, 10h    ;Get date into rax
   314                              <1>     return
    18                              <2> %%_ret:
    19 00002ABD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    29                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    30                              <1> 
    31                              <1> 
    32                              <1> ;FCB functions. Except where explicitly stated, if the selected drive 
    33                              <1> ; for the operation is FAT 32, the request will immediately fail, unless 
    34                              <1> ; the operation is to create\delete\find the volume label. 
    35                              <1> ;FCBs may only be used to access data files on FAT 12/16 drives. 
    36                              <1> 
    37                              <1> ;I am considering using the Extended FCB space to store additional information
    38                              <1> ; for FAT32... but need to figure it out and I dont really care.
    39                              <1> 
    40                              <1> 
    41                              <1> openFileFCB:       ;ah = 0Fh
    42                              <1> closeFileFCB:      ;ah = 10h
    43                              <1> findFirstFileFCB:  ;ah = 11h
    44                              <1> findNextFileFCB:   ;ah = 12h
    45                              <1> deleteFileFCB:     ;ah = 13h
    46                              <1> sequentialReadFCB: ;ah = 14h
    47                              <1> sequentialWriteFCB:;ah = 15h
    48                              <1> createFileFCB:     ;ah = 16h
    49                              <1> renameFileFCB:     ;ah = 17h
    50 00002ABE C3                  <1>     ret
    51                              <1> setDTA:            ;ah = 1Ah, Always can be used
    52                              <1> ;Called with:
    53                              <1> ;   rdx = Pointer to the new default DTA
    54 00002ABF 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
    55 00002AC6 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    56 00002ACA 488915(79C30300)    <1>     mov qword [currentDTA], rdx
    57 00002AD1 C3                  <1>     ret
    58                              <1> randomReadFCB:     ;ah = 21h
    59                              <1> randomWriteFCB:    ;ah = 22h
    60                              <1> getFileSizeFCB:    ;ah = 23h
    61                              <1> setRelRecordFCB:   ;ah = 24h
    62                              <1> randBlockReadFCB:  ;ah = 27h
    63                              <1> randBlockWriteFCB: ;ah = 28h
    64                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
    65                              <1> ;Input:
    66                              <1> ;rsi points to a command line to parse
    67                              <1> ;rdi points to a future unopened FCB
    68                              <1> ;al = parsing control bits. 
    69                              <1> ; al[0] = If set, leading filename separators are scanned off
    70                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
    71                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
    72                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
    73                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
    74                              <1> ;        al = 1 => Wildcards found
    75                              <1> ;        al = -1 => Drive specifier invalid
    76                              <1> ;rsi -> to the first char past the parsed filename
    77                              <1> ;rdi -> First byte of the FCB 
    78                              <1> 
    79 00002AD2 E81D000000          <1>     call parseNameToFCB
    80 00002AD7 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
    81 00002AD8 E801290000          <1>     call getUserRegs
    82 00002ADD 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
    83                              <1>     return  ;al now contains dl, the signature
    18                              <2> %%_ret:
    19 00002AE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> 
    85                              <1> 
    86                              <1> getDTA:            ;ah = 2Fh, Always can be used
    87 00002AE1 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
    88 00002AE8 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    89 00002AEF 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    90                              <1>     return
    18                              <2> %%_ret:
    19 00002AF3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> ;------------------------------
    93                              <1> ;Common FCB related Routines
    94                              <1> ;------------------------------
    95                              <1> parseNameToFCB:
    96                              <1> ;rsi points to a command line to parse
    97                              <1> ;rdi points to a future unopened FCB
    98                              <1> ;al = parsing control bits. 
    99                              <1> ; al[0] = If set, leading filename separators are scanned off
   100                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   101                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   102                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   103                              <1> ;
   104                              <1> ;Separators include : . ; , = + TAB SPACE
   105                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   106                              <1> 
   107 00002AF4 C605(EEC30300)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   108 00002AFB 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   109 00002AFD A802                <1>     test al, 2  ;Set drive letter>
   110 00002AFF 7402                <1>     jz .skipDriveLetter
   111 00002B01 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   112                              <1> .skipDriveLetter:
   113 00002B03 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   114 00002B06 B908000000          <1>     mov ecx, 8  ;Copy Filename
   115 00002B0B A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   116 00002B0D 93                  <1>     xchg eax, ebx
   117 00002B0E B020                <1>     mov al, " " ;Clear the field
   118 00002B10 7405                <1>     jz .clearFilenameField
   119 00002B12 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   120 00002B15 31C9                <1>     xor ecx, ecx
   121                              <1> .clearFilenameField:
   122 00002B17 F3AA                <1>     rep stosb
   123 00002B19 B903000000          <1>     mov ecx, 3
   124 00002B1E F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   125 00002B21 7405                <1>     jz .clearExtensionField
   126 00002B23 4801CF              <1>     add rdi, rcx
   127 00002B26 31C9                <1>     xor ecx, ecx
   128                              <1> .clearExtensionField:
   129 00002B28 F3AA                <1>     rep stosb
   130 00002B2A 91                  <1>     xchg eax, ecx
   131 00002B2B AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   132 00002B2C 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   133 00002B33 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   134 00002B36 740F                <1>     jz .dontScanOff
   135 00002B38 E8122B0000          <1>     call skipSpacesAndTabs
   136 00002B3D E8192B0000          <1>     call isCharDelimType
   137 00002B42 7508                <1>     jnz .skipIfDelim
   138 00002B44 48FFC6              <1>     inc rsi
   139                              <1> .dontScanOff:
   140 00002B47 E8032B0000          <1>     call skipSpacesAndTabs  ;Skip a char
   141                              <1> .skipIfDelim:
   142 00002B4C E8B2290000          <1>     call uppercaseCharAtPtr 
   143 00002B51 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   144 00002B53 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   145 00002B56 7519                <1>     jne .skipSettingDriveLetter
   146 00002B58 48FFC6              <1>     inc rsi ;Goto next char
   147 00002B5B 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   148 00002B5D 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   149 00002B5F 50                  <1>     push rax    ;Save the 1 based drive letter
   150 00002B60 E89D280000          <1>     call setDrive   ;Verifies if this drive letter is valid
   151 00002B65 58                  <1>     pop rax
   152 00002B66 7302                <1>     jnc .validDriveLetter
   153                              <1> .invalidDriveLetter:
   154 00002B68 B2FF                <1>     mov dl, -1
   155                              <1> .validDriveLetter:
   156 00002B6A AA                  <1>     stosb
   157 00002B6B 48FFC6              <1>     inc rsi ;Align pointers...
   158 00002B6E 48FFCF              <1>     dec rdi 
   159                              <1> .skipSettingDriveLetter:
   160 00002B71 48FFCE              <1>     dec rsi
   161 00002B74 48FFC7              <1>     inc rdi
   162                              <1>     
   163                              <1> getFCBFilename:
   164                              <1> ;Input: rsi points to first char of filename
   165                              <1> ;       rdi points to storage buffer for filename
   166                              <1> ;       dl contains the signature if drive invalid
   167                              <1> ;Output:
   168                              <1> ;       Fields filled
   169                              <1> ;       al = Return signature
   170 00002B77 B908000000          <1>     mov ecx, 8
   171 00002B7C E815000000          <1>     call getFCBNameField
   172 00002B81 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   173 00002B84 750D                <1>     jne .noExt
   174 00002B86 B903000000          <1>     mov ecx, 3
   175 00002B8B 48FFC6              <1>     inc rsi ;Skip this char
   176 00002B8E E814000000          <1>     call forceFCBNameField
   177                              <1> .noExt:
   178 00002B93 88D0                <1>     mov al, dl  ;Store the return signature
   179                              <1>     return
    18                              <2> %%_ret:
    19 00002B95 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> 
   181                              <1> getFCBNameField:
   182                              <1> ;Checks if the field is appropriate before copying it
   183 00002B96 E868290000          <1>     call uppercaseCharAtPtr
   184 00002B9B 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   185 00002B9D 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   186 00002BA0 48FFCE              <1>     dec rsi ;Point to previous char
   187                              <1>     return
    18                              <2> %%_ret:
    19 00002BA3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   188                              <1> .okName:
   189 00002BA4 48FFCE              <1>     dec rsi ;Go back now a char
   190                              <1> forceFCBNameField:
   191                              <1> ;Forcefully copies the name from rsi to rdi
   192 00002BA7 E857290000          <1>     call uppercaseCharAtPtr
   193 00002BAC 7226                <1>     jc .terminatingSpace
   194 00002BAE 750D                <1>     jnz .notSep
   195 00002BB0 F605(EEC30300)FF    <1>     test byte [fcbSpaceOk], -1
   196 00002BB7 741B                <1>     jz .terminatingSpace
   197 00002BB9 3C20                <1>     cmp al, " "
   198 00002BBB 7517                <1>     jne .terminatingSpace
   199                              <1> .notSep:
   200 00002BBD 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   201 00002BC0 FFC9                <1>     dec ecx
   202 00002BC2 3C2A                <1>     cmp al, "*" ;Big wildcard?
   203 00002BC4 7504                <1>     jne .notBigWildcard
   204 00002BC6 B03F                <1>     mov al, "?"
   205 00002BC8 F3AA                <1>     rep stosb
   206                              <1> .notBigWildcard:
   207 00002BCA AA                  <1>     stosb   ;Stores the uppercased char
   208 00002BCB 3C3F                <1>     cmp al, "?"
   209 00002BCD 75D8                <1>     jne forceFCBNameField
   210 00002BCF 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   211 00002BD2 EBD3                <1>     jmp short forceFCBNameField
   212                              <1> .terminatingSpace:
   213 00002BD4 B020                <1>     mov al, " "
   214 00002BD6 AA                  <1>     stosb
   215 00002BD7 48FFCE              <1>     dec rsi ;Point to this trailing space
   216                              <1>     return
    18                              <2> %%_ret:
    19 00002BDA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    31                              <1> ;-----------------------------------:
    32                              <1> ;    File Handle Kernel routines    :
    33                              <1> ;-----------------------------------:
    34                              <1> 
    35                              <1> createFileHdl:     ;ah = 3Ch, handle function
    36                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    37                              <1> ;       rdx = Ptr to ASCIZ filename to create
    38                              <1> ;Output: CF=CY => ax = File handle
    39                              <1> ;        CF=NC => al = Error code
    40 00002BDB 51                  <1>     push rcx    ;Save file attributes on stack
    41 00002BDC 488D0DB5070000      <1>     lea rcx, createMain
    42 00002BE3 C605(56C60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
    43 00002BEA EB1D                <1>     jmp short openFileHdl.openCommon
    44                              <1> openFileHdl:       ;ah = 3Dh, handle function
    45                              <1> ;Input: al = Open mode, to open file with
    46                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    47                              <1> ;If called from 5D00h, cl = File attributes too
    48                              <1> ;Output: CF=CY => ax = File handle
    49                              <1> ;        CF=NC => al = Error code
    50 00002BEC BB16000000          <1>     mov ebx, dirInclusive
    51 00002BF1 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
    52 00002BF8 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    53 00002BFB 880D(56C60300)      <1>     mov byte [searchAttr], cl
    54 00002C01 488D0DF5060000      <1>     lea rcx, openMain  
    55 00002C08 50                  <1>     push rax    ;Save open mode on stack
    56                              <1> .openCommon:
    57 00002C09 4889D6              <1>     mov rsi, rdx
    58 00002C0C E884290000          <1>     call checkPathspecOK
    59 00002C11 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    60                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    61 00002C13 58                  <1>     pop rax
    62 00002C14 B803000000          <1>     mov eax, errPnf
    63 00002C19 E9532C0000          <1>     jmp extErrExit
    64                              <1> .pathOk:
    65 00002C1E E80F2C0000          <1>     call dosCrit1Enter
    66 00002C23 E860120000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    67 00002C28 E80F2C0000          <1>     call dosCrit1Exit
    68 00002C2D 0F82A9000000        <1>     jc .exitBad
    69                              <1>     ;Now save variables
    70 00002C33 E889110000          <1>     call setCurrentSFT
    71 00002C38 66891D(8CC60300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    72 00002C3F E8F6120000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    73 00002C44 0F8292000000        <1>     jc .exitBad
    74 00002C4A 66891D(8EC60300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    75 00002C51 48893D(7CC60300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    76 00002C58 0FB71D(8CC60300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    77 00002C5F 881F                <1>     mov byte [rdi], bl  ;And open the file
    78                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    79 00002C61 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    80 00002C64 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    81 00002C6B 51                  <1>     push rcx    ;Save the procedure to call on stack
    82 00002C6C E81CE7FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    83 00002C71 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    84 00002C72 488D0584060000      <1>     lea rax, openMain   ;Get EA for open procedure
    85 00002C79 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    86 00002C80 7319                <1>     jnc .proceedCall
    87                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    88                              <1> ;                              For Create New, Bad but handled later.
    89                              <1> ;If CF=CY => Path doesnt all exist:
    90                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    91                              <1> ;Now we check if we are creating or opening.
    92 00002C82 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    93 00002C85 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    94 00002C87 F605(5FC60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    95 00002C8E 750B                <1>     jnz .proceedCall    ;If so, proceed.
    96                              <1> .badPathspec:
    97 00002C90 58                  <1>     pop rax
    98 00002C91 B802000000          <1>     mov eax, errFnf
    99 00002C96 E951000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
   100                              <1> .proceedCall:
   101                              <1> ;If the pathspec exists, recall that for create, we truncate.
   102 00002C9B 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
   103 00002C9D 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
   104 00002CA0 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
   105 00002CA1 750B                <1>     jne .callProc   ;Jump if we are creating
   106                              <1>     ;al means openmode here
   107 00002CA3 A880                <1>     test al, 80h    ;No Inherit bit set?
   108 00002CA5 7407                <1>     jz .callProc
   109 00002CA7 247F                <1>     and al, 7Fh     ;Clear this bit
   110 00002CA9 B900100000          <1>     mov ecx, devNoInherit
   111                              <1> .callProc:
   112 00002CAE 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   113 00002CB4 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   114 00002CBA 51                  <1>     push rcx    ;Save the device word 
   115 00002CBB FFD3                <1>     call rbx    ;Enter with open mode in 
   116 00002CBD 59                  <1>     pop rcx
   117 00002CBE 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   118 00002CC5 7225                <1>     jc .exitBad2
   119 00002CC7 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   120 00002CCC 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   121 00002CD0 0FB705(8EC60300)    <1>     movzx eax, word [currentHdl]
   122                              <1>     ;SHARE HOOK, DOS DS:[008Ch]
   123 00002CD7 E9872B0000          <1>     jmp extGoodExit ;Save ax and return OK
   124                              <1> .exitBad:
   125 00002CDC FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   126 00002CDD 5B                  <1>     pop rbx ;Pop the word from the stack
   127 00002CDE 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   127 00002CE6 FF                  <1>
   128 00002CE7 E9852B0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   129                              <1> .exitBad2:
   130                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   131 00002CEC 488B35(7CC60300)    <1>     mov rsi, qword [curHdlPtr]
   132 00002CF3 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   133 00002CF6 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   134 00002CFD 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   135 00002D02 66C705(8CC60300)FF- <1>     mov word [currentNdx], -1
   135 00002D0A FF                  <1>
   136 00002D0B E9612B0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   137                              <1> 
   138                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   139                              <1> ;Input: bx = file handle to close
   140 00002D10 E83B120000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   141 00002D15 0F82562B0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   142 00002D1B E8A1100000          <1>     call setCurrentSFT  ;Set this as the current SFT
   143                              <1>     ;Check count to see if we need to check share mode
   144 00002D20 31C0                <1>     xor eax, eax    ;Preset ax to 0
   145 00002D22 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   146 00002D27 7406                <1>     je .skipShareCheck
   147                              <1>     ;Now check sharing mode
   148 00002D29 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   149 00002D2D 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   150                              <1> .skipShareCheck:
   151 00002D2F 50                  <1>     push rax    ;Save the share mode on stack
   152 00002D30 E810090000          <1>     call closeMain  ;Call close main!
   153 00002D35 58                  <1>     pop rax 
   154 00002D36 0F82352B0000        <1>     jc extErrExit   ;If an error, exit through error exit
   155 00002D3C 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   156 00002D3E 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   157 00002D40 E8D7110000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   158 00002D45 C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   159                              <1> .exitOk:
   160 00002D48 31C0                <1>     xor eax, eax    ;Return value
   161 00002D4A E9142B0000          <1>     jmp extGoodExit
   162                              <1> 
   163                              <1> readFileHdl:       ;ah = 3Fh, handle function
   164 00002D4F 488D3561090000      <1>     lea rsi, readBytes
   165                              <1> .common:
   166 00002D56 E8F5110000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   167 00002D5B 0F82102B0000        <1>     jc extErrExit   ;Error code in al and exit
   168 00002D61 E85B100000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   169 00002D66 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   170 00002D68 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   171 00002D6E 488915(79C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   172 00002D75 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   173 00002D77 8F05(79C30300)      <1>     pop qword [currentDTA]
   174 00002D7D 0F82EE2A0000        <1>     jc extErrExit   ;Error code in al and exit
   175 00002D83 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   176 00002D85 E9D02A0000          <1>     jmp extGoodExit2    ;and exit!
   177                              <1> 
   178                              <1> writeFileHdl:      ;ah = 40h, handle function
   179 00002D8A 488D35010C0000      <1>     lea rsi, writeBytes
   180 00002D91 E9C0FFFFFF          <1>     jmp readFileHdl.common
   181                              <1> 
   182                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   183                              <1> ;Here don't allow malformed chars unless it is a network CDS
   184 00002D96 BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   185 00002D9B F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   186 00002DA2 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   187 00002DA5 880D(56C60300)      <1>     mov byte [searchAttr], cl
   188 00002DAB 4889D6              <1>     mov rsi, rdx
   189 00002DAE E8E2270000          <1>     call checkPathspecOK
   190 00002DB3 730A                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   191                              <1> .badPath:
   192 00002DB5 B803000000          <1>     mov eax, errPnf
   193 00002DBA E9B22A0000          <1>     jmp extErrExit
   194                              <1> .pathOk:
   195 00002DBF 488D3D(7FC40300)    <1>     lea rdi, buffer1
   196 00002DC6 52                  <1>     push rdx
   197 00002DC7 E8C1E5FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   198 00002DCC 5A                  <1>     pop rdx
   199 00002DCD 0F829E2A0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   200                              <1>     ;In the case of a wildcard, recall this will return the first file
   201 00002DD3 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   202 00002DDA 0F85912A0000        <1>     jnz extErrExit
   203                              <1> ;Internal current dir is now populated with dir entry
   204                              <1> ; and internal DOS directory variables now point to this entry.
   205                              <1> ;Check if the file is a char device or read only.
   206 00002DE0 B805000000          <1>     mov eax, errAccDen  
   207 00002DE5 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   208 00002DEC 0F857F2A0000        <1>     jnz extErrExit  ;Can't delete a char dev
   209 00002DF2 F605(C6C50300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
   210 00002DF9 0F85722A0000        <1>     jnz extErrExit  ;Can't delete a read only file
   211                              <1>     ;Now check if the cds is redir, or we entered via server to allow wildcards.
   212 00002DFF E86D250000          <1>     call testCDSNet ;Gets working CDS in rdi
   213 00002E04 7215                <1>     jc .gotoDelete
   214 00002E06 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   215 00002E0D 740C                <1>     je .gotoDelete
   216                              <1>     ;Now we check to see if we have wildcards. We do not generally allow them.
   217                              <1>     ;Network CDS and server invokations allow wildcards
   218 00002E0F E8FD270000          <1>     call scanPathWC
   219 00002E14 B802000000          <1>     mov eax, errFnf ;Wildcard file doesnt exit
   220 00002E19 729A                <1>     jc .badPath ;Dont allow wildcards
   221                              <1> .gotoDelete:
   222 00002E1B E890040000          <1>     call deleteMain
   223 00002E20 0F824B2A0000        <1>     jc extErrExit
   224 00002E26 E9382A0000          <1>     jmp extGoodExit
   225                              <1> 
   226                              <1> 
   227                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   228                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   229 00002E2B E820110000          <1>     call getSFTPtr
   230 00002E30 0F823B2A0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   231 00002E36 3C03                <1>     cmp al, 3
   232 00002E38 720A                <1>     jb .validFunction
   233 00002E3A B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   234 00002E3F E92D2A0000          <1>     jmp extErrExit
   235                              <1> .validFunction:
   236 00002E44 3C01                <1>     cmp al, 1
   237 00002E46 7718                <1>     ja .seekend
   238 00002E48 7203                <1>     jb .seekset
   239                              <1> ;Here we are at seekcur, seek from current (signed)
   240 00002E4A 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   241                              <1> .seekset:
   242                              <1> ;Seek from the start (unsigned)
   243 00002E4D 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   244 00002E50 E889250000          <1>     call getUserRegs    ;Get user regs in rsi
   245 00002E55 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   246                              <1> .seekExit:
   247 00002E58 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   248 00002E5B E9FA290000          <1>     jmp extGoodExit2    ;Return OK in eax 
   249                              <1> .seekend:
   250                              <1> ;Here we are at seekend, seek from end (signed)
   251 00002E60 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   252 00002E66 7505                <1>     jnz .netCheck
   253                              <1> .proceedDisk:
   254 00002E68 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   255 00002E6B EBE0                <1>     jmp short .seekset
   256                              <1> .netCheck:
   257 00002E6D 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   258 00002E73 75F3                <1>     jnz .proceedDisk
   259 00002E75 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   260                              <1>     ;Check it's share mode
   261 00002E79 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   262 00002E7E 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   263 00002E83 7407                <1>     je .netSeek
   264 00002E85 3D30000000          <1>     cmp eax, denyReadShare
   265 00002E8A 75DC                <1>     jne .proceedDisk
   266                              <1> .netSeek:
   267 00002E8C B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   268 00002E91 CD4F                <1>     int 4Fh
   269 00002E93 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   270 00002E95 E9D7290000          <1>     jmp extErrExit
   271                              <1> 
   272                              <1> 
   273                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   274 00002E9A 3C01                <1>     cmp al, 1
   275 00002E9C 760A                <1>     jbe .subFuncOk
   276 00002E9E B801000000          <1>     mov eax, errInvFnc
   277 00002EA3 E9C9290000          <1>     jmp extErrExit
   278                              <1> .subFuncOk:
   279 00002EA8 4889D6              <1>     mov rsi, rdx
   280 00002EAB 89C3                <1>     mov ebx, eax    ;Store function code in bl
   281 00002EAD 53                  <1>     push rbx
   282 00002EAE 51                  <1>     push rcx
   283 00002EAF E8E1260000          <1>     call checkPathspecOK
   284 00002EB4 730E                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   285 00002EB6 740C                <1>     jz .pathOk  ;Can be terminated with a silly char
   286                              <1> .badPath:
   287 00002EB8 59                  <1>     pop rcx
   288 00002EB9 5B                  <1>     pop rbx
   289 00002EBA B803000000          <1>     mov eax, errPnf
   290 00002EBF E9AD290000          <1>     jmp extErrExit
   291                              <1> .pathOk:
   292 00002EC4 E8B4270000          <1>     call checkPathNet 
   293 00002EC9 74ED                <1>     jz .badPath ;Or Net paths
   294 00002ECB E841270000          <1>     call scanPathWC
   295 00002ED0 72E6                <1>     jc .badPath ;Dont allow wildcards
   296 00002ED2 488D3D(7FC40300)    <1>     lea rdi, buffer1
   297 00002ED9 52                  <1>     push rdx
   298 00002EDA C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   299 00002EE1 E8A7E4FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   300 00002EE6 5A                  <1>     pop rdx
   301 00002EE7 59                  <1>     pop rcx
   302 00002EE8 5B                  <1>     pop rbx
   303 00002EE9 0F8282290000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   304                              <1>     ;In the case of a wildcard, recall this will return the first file
   305 00002EEF 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   306 00002EF6 0F8575290000        <1>     jnz extErrExit
   307                              <1> 
   308 00002EFC E870240000          <1>     call testCDSNet
   309 00002F01 730C                <1>     jnc .notNet
   310 00002F03 750A                <1>     jnz .notNet ;This type of net ok
   311 00002F05 B805000000          <1>     mov eax, errAccDen
   312 00002F0A E962290000          <1>     jmp extErrExit
   313                              <1> .notNet:
   314 00002F0F 84DB                <1>     test bl, bl
   315 00002F11 7526                <1>     jnz .setAttribs
   316                              <1>     ;Get attribs here
   317 00002F13 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   318 00002F19 7412                <1>     jz .getDiskAttribs
   319 00002F1B B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   320 00002F20 CD4F                <1>     int 4Fh
   321 00002F22 0F8249290000        <1>     jc extErrExit
   322 00002F28 E936290000          <1>     jmp extGoodExit
   323                              <1> .getDiskAttribs:
   324 00002F2D 0FB605(C6C50300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   325 00002F34 E92A290000          <1>     jmp extGoodExit
   326                              <1> .setAttribs:
   327                              <1>     ;Set attribs here
   328 00002F39 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   329 00002F3F 7417                <1>     jz .setDiskAttribs
   330 00002F41 0FB7C9              <1>     movzx ecx, cx
   331 00002F44 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   332 00002F45 B80E110000          <1>     mov eax, 110Eh
   333 00002F4A CD4F                <1>     int 4Fh
   334 00002F4C 59                  <1>     pop rcx
   335 00002F4D 0F821E290000        <1>     jc extErrExit
   336 00002F53 E90B290000          <1>     jmp extGoodExit
   337                              <1> .setDiskAttribs:
   338 00002F58 E8D7EEFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   339 00002F5D 0F820E290000        <1>     jc extErrExit
   340 00002F63 F6C118              <1>     test cl, dirVolumeID | dirDirectory
   341 00002F66 740A                <1>     jz .set
   342 00002F68 B805000000          <1>     mov eax, errAccDen
   343 00002F6D E9FF280000          <1>     jmp extErrExit
   344                              <1> .set:
   345 00002F72 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   346 00002F75 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   347 00002F78 08E9                <1>     or cl, ch
   348 00002F7A 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   349 00002F7D 31C0                <1>     xor eax, eax
   350 00002F7F E9DF280000          <1>     jmp extGoodExit
   351                              <1> 
   352                              <1> 
   353                              <1> duplicateHandle:   ;ah = 45h, handle function
   354                              <1> ;Input: bx = Handle to duplicate
   355                              <1> ;Output: If ok then ax = New handle
   356 00002F84 E828100000          <1>     call findFreeJFTSpace    ;First find a free space in the JFT
   357 00002F89 0F82E2280000        <1>     jc extErrExit   ;Exit if no space
   358                              <1>     ;rsi points to the free space
   359                              <1> .duplicateCommon:
   360 00002F8F E8880F0000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   361 00002F94 4887F7              <1>     xchg rsi, rdi
   362 00002F97 AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   363 00002F98 AA                  <1>     stosb
   364 00002F99 48FFCE              <1>     dec rsi
   365 00002F9C 48FFCF              <1>     dec rdi
   366                              <1>     ;rdi now points to new position
   367                              <1>     ;rsi points to old position
   368                              <1>     ;al has SFT ndx
   369 00002F9F 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   370 00002FA2 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   371 00002FA5 E83D0F0000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   372 00002FAA 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   373                              <1>     ;Now we must return in ax the entry in the JFT 
   374 00002FAD 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   375 00002FB4 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   376 00002FB8 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   377 00002FBB 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   378 00002FBD E9A1280000          <1>     jmp extGoodExit
   379                              <1> 
   380                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   381                              <1> ;Input: bx = Handle to duplicate
   382                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   383                              <1>     ;First we close cx
   384 00002FC2 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   385 00002FC4 53                  <1>     push rbx
   386 00002FC5 51                  <1>     push rcx
   387 00002FC6 E845FDFFFF          <1>     call closeFileHdl   ;Close handle 
   388 00002FCB 59                  <1>     pop rcx
   389 00002FCC 5B                  <1>     pop rbx
   390                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00002FCD 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00002FCF C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   391                              <1>     ;Else, close was ok, lets duplicate now
   392 00002FD0 E8470F0000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   393 00002FD5 0F8296280000        <1>     jc extErrExit   ;Return bad with error code in al
   394 00002FDB 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   395 00002FDD 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   396 00002FE0 EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   397                              <1> 
   398                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   399                              <1> ;Input: cx = Search Attributes, cl only used
   400                              <1> ;       rdx = Ptr to path to file to look for
   401                              <1> ;       al = Document as needing to be 0 for now
   402                              <1> ;Return:
   403                              <1> ;Data in the DTA or error through AX with CF=CY
   404                              <1> ;CAVEATS!
   405                              <1> ;DTA:attribFnd = 40h => Char dev
   406                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   407 00002FE2 880D(56C60300)      <1>     mov byte [searchAttr], cl
   408 00002FE8 4889D6              <1>     mov rsi, rdx
   409 00002FEB E8A5250000          <1>     call checkPathspecOK    ;This uses rsi and preserves it
   410 00002FF0 730A                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   411                              <1>     ;Dont allow paths which end in a malformed char for ASCIIZ
   412                              <1>     ;ONLY ALLOW TRUENAME TO RESOLVE SUCH PATHS 
   413                              <1> .badPath:
   414 00002FF2 B803000000          <1>     mov eax, errPnf
   415 00002FF7 E975280000          <1>     jmp extErrExit
   416                              <1> .pathspecOk:
   417 00002FFC FF35(79C30300)      <1>     push qword [currentDTA]
   418 00003002 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   419 00003009 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   420 00003010 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   421 00003017 E871E3FFFF          <1>     call getFilePath
   422                              <1> .findfileExit:
   423 0000301C 8F05(79C30300)      <1>     pop qword [currentDTA]
   424 00003022 0F8249280000        <1>     jc extErrExit
   425 00003028 488D3D(90C50300)    <1>     lea rdi, dosffblock
   426 0000302F 57                  <1>     push rdi
   427 00003030 E89FE2FFFF          <1>     call setupFFBlock
   428 00003035 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   429 00003036 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   430 0000303D B92B000000          <1>     mov ecx, ffBlock_size
   431 00003042 F3A4                <1>     rep movsb   ;Copy the whole block. 
   432                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   433 00003044 31C0                <1>     xor eax, eax    ;Return value
   434 00003046 E918280000          <1>     jmp extGoodExit ;Exit well
   435                              <1> 
   436                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   437                              <1> ;Input: DTA has the find first block from the previous search
   438 0000304B 488B35(79C30300)    <1>     mov rsi, qword [currentDTA]
   439 00003052 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   440 00003059 B92B000000          <1>     mov ecx, ffBlock_size
   441 0000305E F3A4                <1>     rep movsb
   442 00003060 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   443 00003066 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   444 0000306D 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   445 00003074 E80BDFFFFF          <1>     call findNextMain
   446 00003079 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   447                              <1> 
   448                              <1> renameFile:        ;ah = 56h
   449                              <1> ;Input: rsi -> Filespec to rename
   450                              <1> ;       rdi -> New filespec
   451 0000307B BB16000000          <1>     mov ebx, dirInclusive
   452 00003080 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   453 00003087 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   454 0000308A 880D(56C60300)      <1>     mov byte [searchAttr], cl
   455                              <1>     ;First test if second file exists. Error out if exists (inc with WildCards)
   456 00003090 57                  <1>     push rdi
   457 00003091 56                  <1>     push rsi
   458 00003092 4889FE              <1>     mov rsi, rdi
   459 00003095 488D3D(FFC40300)    <1>     lea rdi, buffer2
   460 0000309C E8ECE2FFFF          <1>     call getFilePath
   461 000030A1 5F                  <1>     pop rdi
   462 000030A2 5E                  <1>     pop rsi
   463 000030A3 730A                <1>     jnc .destOk
   464                              <1> .pnfError:
   465 000030A5 B803000000          <1>     mov eax, errPnf
   466 000030AA E9C2270000          <1>     jmp extErrExit
   467                              <1> .destOk:
   468                              <1>     ;Now test if first file exists.
   469 000030AF FF35(7FC50300)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   470 000030B5 8F05(87C50300)      <1>     pop qword [fname2Ptr]
   471 000030BB 56                  <1>     push rsi
   472 000030BC 488D3D(7FC40300)    <1>     lea rdi, buffer1
   473 000030C3 E8C5E2FFFF          <1>     call getFilePath ;rdi = Buffer to use, rsi = filename
   474 000030C8 5E                  <1>     pop rsi
   475 000030C9 7319                <1>     jnc .sourceFnd
   476                              <1>     ;Now we check if the file was not found. If not, the path mustve sucked
   477 000030CB B803000000          <1>     mov eax, errPnf
   478 000030D0 BB02000000          <1>     mov ebx, errFnf
   479 000030D5 F605(5FC60300)FF    <1>     test byte [parDirExist], -1
   480 000030DC 0F45C3              <1>     cmovnz eax, ebx ;If path found, swap error code to file not fount
   481 000030DF E98D270000          <1>     jmp extErrExit
   482                              <1> .sourceFnd:
   483                              <1>     ;File found, now check we can modify it
   484                              <1>     ;Check if the file that was found was either a char dev or read only
   485 000030E4 F605(C6C50300)41    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirReadOnly
   486 000030EB 740A                <1>     jz .modifiableFile
   487                              <1> .accDenError:
   488 000030ED B805000000          <1>     mov eax, errAccDen
   489 000030F2 E97A270000          <1>     jmp extErrExit
   490                              <1> .modifiableFile:
   491                              <1> ;Now we can begin to try and modify the filename
   492 000030F7 E8AD010000          <1>     call renameMain
   493 000030FC 0F826F270000        <1>     jc extErrExit
   494 00003102 E95C270000          <1>     jmp extGoodExit
   495                              <1> 
   496                              <1> getSetFileDateTime:;ah = 57h
   497 00003107 3C01                <1>     cmp al, 1
   498 00003109 760A                <1>     jbe .oksubfun
   499 0000310B B801000000          <1>     mov eax, errInvFnc
   500 00003110 E95C270000          <1>     jmp extErrExit
   501                              <1> .oksubfun:
   502 00003115 E8360E0000          <1>     call getSFTPtr  ;Preserves al unless error returned
   503 0000311A 0F8251270000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   504 00003120 3C01                <1>     cmp al, 1
   505 00003122 741C                <1>     je .setTimeDate
   506                              <1>     ;Here we get the Time/Date
   507 00003124 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   508 00003128 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   509 0000312C E8AD220000          <1>     call getUserRegs
   510 00003131 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   511 00003135 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   512 00003139 31C0                <1>     xor eax, eax
   513 0000313B E923270000          <1>     jmp extGoodExit
   514                              <1> .setTimeDate:
   515                              <1>     ;Here we set the Time/Date
   516 00003140 66894F13            <1>     mov word [rdi + sft.wTime], cx
   517 00003144 66895715            <1>     mov word [rdi + sft.wDate], dx
   518 00003148 31C0                <1>     xor eax, eax
   519 0000314A E914270000          <1>     jmp extGoodExit
   520                              <1> 
   521                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   522                              <1> ;Uses the clock to do it's bidding
   523                              <1> ;cx = file attribute 
   524                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   525                              <1> ;       filename
   526 0000314F 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   527 00003154 740A                <1>     jz .validAttribs
   528 00003156 B805000000          <1>     mov eax, errAccDen
   529 0000315B E911270000          <1>     jmp extErrExit
   530                              <1> .validAttribs:
   531 00003160 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   532 00003164 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   533 00003167 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   534 0000316C 31C0                <1>     xor eax, eax
   535 0000316E 4889D7              <1>     mov rdi, rdx
   536 00003171 F3AE                <1>     rep scasb
   537 00003173 85C9                <1>     test ecx, ecx
   538 00003175 750A                <1>     jnz .nullFnd
   539                              <1>     ;Bad path
   540 00003177 B803000000          <1>     mov eax, errPnf
   541 0000317C E9F0260000          <1>     jmp extErrExit
   542                              <1> .nullFnd:
   543 00003181 48FFCF              <1>     dec rdi
   544 00003184 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   545 00003188 E86B230000          <1>     call swapPathSeparator
   546 0000318D 7403                <1>     jz .pathsepFnd
   547                              <1>     ;If no pathsep found, force one at rdi
   548 0000318F B05C                <1>     mov al, "\"
   549 00003191 AA                  <1>     stosb
   550                              <1> .pathsepFnd:
   551 00003192 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   552                              <1> .fileCreateLoop:
   553 00003195 55                  <1>     push rbp
   554 00003196 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   555 0000319B 5D                  <1>     pop rbp
   556 0000319C 0FB7C1              <1>     movzx eax, cx
   557 0000319F 0FB7D2              <1>     movzx edx, dx
   558 000031A2 C1E010              <1>     shl eax, 10h
   559 000031A5 09D0                <1>     or eax, edx  ;Add the bits of dx too
   560 000031A7 E831000000          <1>     call .writeNybbles
   561 000031AC 31C0                <1>     xor eax, eax
   562 000031AE AA                  <1>     stosb   ;Store terminating null
   563 000031AF 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   564 000031B2 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   565 000031B5 55                  <1>     push rbp
   566 000031B6 E85C000000          <1>     call createNewFile
   567 000031BB 5D                  <1>     pop rbp
   568 000031BC 0F83A1260000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   569 000031C2 0FB705(6DC30300)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   570 000031C9 3D05000000          <1>     cmp eax, errAccDen
   571 000031CE 74C5                <1>     je .fileCreateLoop
   572 000031D0 3D50000000          <1>     cmp eax, errFilExist
   573 000031D5 74BE                <1>     je .fileCreateLoop
   574 000031D7 F9                  <1>     stc
   575 000031D8 E994260000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   576                              <1> .writeNybbles:
   577                              <1> ;Write the nybbles of eax at rdi
   578 000031DD B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   579                              <1> .wnLp:
   580 000031E2 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   581 000031E5 50                  <1>     push rax
   582 000031E6 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   583 000031EB 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   584 000031F0 3D39000000          <1>     cmp eax, '9'
   585 000031F5 7605                <1>     jbe .notExtDigit
   586 000031F7 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   587                              <1> .notExtDigit:
   588 000031FC AA                  <1>     stosb   ;Store the digit
   589 000031FD 58                  <1>     pop rax
   590 000031FE FFC9                <1>     dec ecx
   591 00003200 75E0                <1>     jnz .wnLp
   592                              <1>     return
    18                              <2> %%_ret:
    19 00003202 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   593                              <1> 
   594                              <1> .uniqueTimeGet:
   595 00003203 E86EF7FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   596 00003208 668B0D(79C40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   597 0000320F 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   598                              <1>     return
    18                              <2> %%_ret:
    19 00003216 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   599                              <1> 
   600                              <1> createNewFile:     ;ah = 5Bh
   601 00003217 51                  <1>     push rcx    ;Save file attributes on stack
   602 00003218 488D0D66010000      <1>     lea rcx, createNewMain
   603 0000321F C605(56C60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   604 00003226 E9DEF9FFFF          <1>     jmp openFileHdl.openCommon
   605                              <1> 
   606                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   607                              <1>     ;Input: bx = File to flush
   608 0000322B E8200D0000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   609 00003230 0F823B260000        <1>     jc extErrExit
   610 00003236 E8860B0000          <1>     call setCurrentSFT
   611                              <1>     ;Now we check if the device is a char, disk or net file
   612 0000323B 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   613 0000323F 66A90080            <1>     test ax, devRedirDev
   614 00003243 7512                <1>     jnz .notNet
   615                              <1>     ;Commit file net redir call and exit
   616 00003245 B807110000          <1>     mov eax, 1107h
   617 0000324A CD4F                <1>     int 4Fh
   618 0000324C 0F821F260000        <1>     jc extErrExit
   619 00003252 E93D000000          <1>     jmp .exitOk
   620                              <1> .notNet:
   621 00003257 66A98000            <1>     test ax, devCharDev
   622 0000325B 7418                <1>     jz .blokDev
   623                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   624 0000325D E814F7FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   625 00003262 0F8209260000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   626                              <1>     ;Build date and time words
   627 00003268 E8F4F7FFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   628 0000326D 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   629 00003270 E91F000000          <1>     jmp .exitOk
   630                              <1> .blokDev:
   631 00003275 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   632 00003279 E8EB200000          <1>     call setWorkingDPB
   633 0000327E E81CECFFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   634 00003283 0F82E8250000        <1>     jc extErrExit
   635 00003289 E811D9FFFF          <1>     call flushFile  ;Now the file gets flushed
   636 0000328E 0F82DD250000        <1>     jc extErrExit
   637                              <1> .exitOk:
   638 00003294 30C0                <1>     xor al, al
   639 00003296 E843210000          <1>     call getUserRegs
   640 0000329B 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   641                              <1>     return
    18                              <2> %%_ret:
    19 0000329E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   642                              <1> 
   643                              <1> ;STUB FUNCTIONS
   644                              <1> lockUnlockFile:    ;ah = 5Ch
   645 0000329F E9CD250000          <1>     jmp extErrExit
   646                              <1> setHandleCount:    ;ah = 67h
   647 000032A4 E9C8250000          <1>     jmp extErrExit
   648                              <1> 
   649                              <1> ;-----------------------------------:
   650                              <1> ;       Main File IO Routines       :
   651                              <1> ;-----------------------------------:
   652                              <1> renameMain:
   653                              <1> ;Now, creates a special find first block for the source file
   654                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   655                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   656                              <1> ; block. 
   657                              <1> ;Then we search for that file name specifically (again), replacing 
   658                              <1> ; the filename portion of the destination buffer. If it exists or the 
   659                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   660                              <1> ; the new directory entry and delete the original file. 
   661 000032A9 B805000000          <1>     mov eax, errAccDen  ;Temp return code
   662 000032AE F9                  <1>     stc
   663                              <1>     return
    18                              <2> %%_ret:
    19 000032AF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   664                              <1> 
   665                              <1>     
   666                              <1> deleteMain:
   667                              <1> ;Now unlink FAT chain and then clear directory entry
   668                              <1> ;Get the start cluster of this file
   669                              <1> ;Input:
   670                              <1> ; The file must have NOT be read-only.
   671                              <1> ; If the CDS is NOT a net cds then the following must hold:
   672                              <1> ;     - curDirCopy must be filled with the file directory information
   673                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
   674                              <1> ;Output: CF=NC => Success, 
   675                              <1> ; If not net CDS:
   676                              <1> ;   rsi keeps pointing to directory entry.
   677                              <1> ;   al = First char of the file that was deleted.
   678                              <1> ;        CF=CY => Error
   679                              <1> ;The dir buffer must be marked as referenced once we are done with it
   680 000032B0 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   681 000032B7 E8B5200000          <1>     call testCDSNet ;CF=CY => Not net
   682 000032BC 7208                <1>     jc .notNet
   683 000032BE B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
   684 000032C3 CD4F                <1>     int 4Fh
   685                              <1>     return
    18                              <2> %%_ret:
    19 000032C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   686                              <1> .notNet:
   687 000032C6 52                  <1>     push rdx
   688 000032C7 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   689 000032CE 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   690 000032D5 C1E010              <1>     shl eax, 10h
   691 000032D8 09D0                <1>     or eax, edx ;Add low bits to eax
   692 000032DA 5A                  <1>     pop rdx
   693 000032DB 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
   694 000032DD 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
   695 000032DF 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
   696 000032E6 E81DDBFFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
   697 000032EB 720F                <1>     jc .exit
   698                              <1> .skipUnlink:
   699                              <1>     ;Now replace the first char of the directory to 0E5h
   700                              <1>     ;Get the disk directory in a buffer to manipulate the entry
   701 000032ED E842EBFFFF          <1>     call getDiskDirectoryEntry
   702 000032F2 7208                <1>     jc .exit
   703 000032F4 8A05(62C60300)      <1>     mov al, byte [delChar]
   704 000032FA 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
   705                              <1>     ;CF must be clear
   706                              <1> .exit:
   707                              <1>     return
    18                              <2> %%_ret:
    19 000032FC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   708                              <1> 
   709                              <1> openMain:
   710                              <1> ;Input: ax (formally al) = Open mode
   711                              <1> ;       [currentSFT] = SFT we are building
   712                              <1> ;       [workingCDS] = CDS of drive to access
   713                              <1> ;       [workingDPB] = DPB of drive to access
   714                              <1> ;Ouput: CF=CY => Error, eax has error code
   715 000032FD E84F000000          <1>     call .setOpenMode
   716                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003302 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   717 00003304 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   718 0000330B 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   719 00003312 30E4                <1>     xor ah, ah  ;al has the access mode
   720 00003314 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
   721 00003318 4881FEFFFFFFFF      <1>     cmp rsi, -1
   722 0000331F 750A                <1>     jne .notNet
   723                              <1> .redirOpen:
   724 00003321 50                  <1>     push rax    ;Push open mode onto stack
   725 00003322 B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
   726 00003327 CD4F                <1>     int 4Fh
   727 00003329 58                  <1>     pop rax
   728                              <1>     return
    18                              <2> %%_ret:
    19 0000332A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   729                              <1> .notNet:
   730 0000332B 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   731 00003331 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
   732 00003333 E8FA240000          <1>     call dosCrit1Enter
   733 00003338 C605(61C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
   734 0000333F C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   735 00003346 E8C3000000          <1>     call buildSFTEntry  ;ax must have the open mode
   736                              <1>     ;Here we put Share mode stuff
   737 0000334B E8EC240000          <1>     call dosCrit1Exit
   738                              <1>     return
    18                              <2> %%_ret:
    19 00003350 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   739                              <1> .setOpenMode:
   740                              <1> ;Input: al = Open mode for the file open
   741 00003351 8805(57C60300)      <1>     mov byte [fileOpenMd], al
   742 00003357 53                  <1>     push rbx
   743 00003358 88C3                <1>     mov bl, al
   744 0000335A 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
   745 0000335D 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    
   746 00003364 7505                <1>     jnz .s1 ;Skip this check if not server invoke
   747 00003366 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
   748 00003369 7405                <1>     je .s2
   749                              <1> .s1:
   750 0000336B 80FB40              <1>     cmp bl, denyNoneShare
   751 0000336E 770D                <1>     ja .somBad
   752                              <1> .s2:
   753 00003370 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
   754 00003372 80E30F              <1>     and bl, 0Fh
   755 00003375 80FB02              <1>     cmp bl, RWAccess
   756 00003378 7703                <1>     ja .somBad
   757 0000337A 5B                  <1>     pop rbx
   758 0000337B F8                  <1>     clc
   759                              <1>     return
    18                              <2> %%_ret:
    19 0000337C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   760                              <1> .somBad:
   761 0000337D 5B                  <1>     pop rbx
   762 0000337E B80C000000          <1>     mov eax, errAccCde
   763 00003383 F9                  <1>     stc
   764                              <1>     return
    18                              <2> %%_ret:
    19 00003384 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   765                              <1> createNewMain:
   766                              <1> ;Input: ax (formally al) = File attributes
   767                              <1> ;       [currentSFT] = SFT we are building
   768                              <1> ;       [workingCDS] = CDS of drive to access
   769                              <1> ;       [workingDPB] = DPB of drive to access
   770 00003385 0FB6C0              <1>     movzx eax, al
   771 00003388 F605(5EC60300)FF    <1>     test byte [fileExist], -1
   772 0000338F 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
   773 00003391 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
   774 00003396 F9                  <1>     stc
   775                              <1>     return
    18                              <2> %%_ret:
    19 00003397 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   776                              <1> createMain:
   777                              <1> ;Input: ax (formally al) = File attributes
   778                              <1> ;       [currentSFT] = SFT we are building
   779                              <1> ;       [workingCDS] = CDS of drive to access
   780                              <1> ;       [workingDPB] = DPB of drive to access
   781 00003398 0FB6C0              <1>     movzx eax, al
   782                              <1> .createNewEP:
   783 0000339B A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
   784 0000339D 750A                <1>     jnz .invalidAttrib
   785 0000339F A808                <1>     test al, dirVolumeID
   786 000033A1 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
   787 000033A3 0C20                <1>     or al, dirArchive   ;Set archive bit
   788 000033A5 A810                <1>     test al, dirDirectory   
   789 000033A7 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
   790                              <1> .invalidAttrib:
   791 000033A9 B805000000          <1>     mov eax, errAccDen
   792 000033AE F9                  <1>     stc
   793                              <1>     return
    18                              <2> %%_ret:
    19 000033AF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   794                              <1> .validAttr:
   795 000033B0 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   796 000033B7 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   797 000033BE 4881FEFFFFFFFF      <1>     cmp rsi, -1
   798 000033C5 750A                <1>     jne .diskFile
   799 000033C7 50                  <1>     push rax    ;Save the new attributes
   800 000033C8 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
   801 000033CD CD4F                <1>     int 4Fh
   802 000033CF 5B                  <1>     pop rbx
   803                              <1>     return
    18                              <2> %%_ret:
    19 000033D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   804                              <1> .diskFile:
   805 000033D1 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
   806 000033D7 740A                <1>     jz .hardFile
   807 000033D9 50                  <1>     push rax    ;Save the new attributes
   808 000033DA B817110000          <1>     mov eax, 1117h  ;Create file with CDS
   809 000033DF CD4F                <1>     int 4Fh
   810 000033E1 5B                  <1>     pop rbx
   811                              <1>     return
    18                              <2> %%_ret:
    19 000033E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   812                              <1> .hardFile:
   813 000033E3 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
   814 000033E9 C605(61C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
   815 000033F0 C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   816 000033F7 E836240000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
   817 000033FC 50                  <1>     push rax    ;Save the file attributes on stack
   818 000033FD B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
   819 00003402 E807000000          <1>     call buildSFTEntry
   820 00003407 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
   821                              <1>     ;Here we put Share mode stuff
   822 00003408 E82F240000          <1>     call dosCrit1Exit
   823                              <1>     return
    18                              <2> %%_ret:
    19 0000340D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   824                              <1> buildSFTEntry:
   825                              <1> ;Called in a critical section.
   826                              <1> ;Input: al = Open mode
   827                              <1> ;       STACK: File attributes if creating a file
   828                              <1> ;       [currentSFT] = SFT we are building
   829                              <1> ;       [workingCDS] = CDS of drive to access
   830                              <1> ;       [workingDPB] = DPB of drive to access
   831                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
   832                              <1> ;
   833                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
   834                              <1> ;                  - wDeviceInfo is set except for inherit bit
   835                              <1> ;        If CF=CY: - Return fail
   836                              <1> ;
   837                              <1> ;
   838                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
   839                              <1> ;   If not, create disk entry.
   840                              <1> ;Check if the device was a char device by checking curDirCopy.
   841                              <1> ;If disk, get dpb. We check if the parent dir was found.
   842                              <1> 
   843                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
   844                              <1> ; to start of file fields of the SFT
   845 0000340E 55                  <1>     push rbp    ;file attribute is rbp + 10h
   846 0000340F 4889E5              <1>     mov rbp, rsp
   847 00003412 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   848                              <1> ;Set the open mode
   849 00003419 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
   850                              <1> ;Get current time
   851 0000341D E854F5FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   852 00003422 E83AF6FFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
   853 00003427 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
   854                              <1> ;Set current Owner
   855 0000342A 488B05(81C30300)    <1>     mov rax, qword [currentPSP]
   856 00003431 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
   857                              <1> ;Set file pointer to first byte
   858 00003435 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
   859                              <1> ;Common fields set
   860 0000343C F605(61C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
   861 00003443 0F847A010000        <1>     jz .openProc
   862                              <1>     ;Here if Creating a file.
   863 00003449 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   864 00003450 0F8576010000        <1>     jnz .charDev
   865 00003456 F605(5EC60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
   866 0000345D 0F84A9000000        <1>     jz .createFile
   867                              <1>     ;Here disk file exists, so recreating the file.
   868 00003463 E848FEFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
   869                              <1>     ;al has the char for the filename
   870                              <1>     ;Sets vars for the sector/offset into the sector
   871 00003468 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   872 0000346F 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
   873 00003471 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   874                              <1>     ;al has file attributes.
   875 00003475 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   876 00003477 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
   877 0000347A 31C0                <1>     xor eax, eax
   878                              <1>     ;Clear all the fields south of ntRes (20 bytes)
   879 0000347C 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
   880 00003480 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
   881 00003484 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
   882 00003487 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   883 0000348A 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
   884 0000348D 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
   885                              <1> 
   886 00003490 57                  <1>     push rdi    ;Save SFT pointer
   887 00003491 488D3D(BBC50300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
   888 00003498 B920000000          <1>     mov ecx, fatDirEntry_size
   889 0000349D F3A4                <1>     rep movsb
   890 0000349F E817D5FFFF          <1>     call setBufferDirty ;We wrote to this buffer
   891 000034A4 5F                  <1>     pop rdi
   892                              <1> .createCommon:  ;rdi must point to the current SFT 
   893                              <1>     ;Now populate the remaining SFT fields 
   894 000034A5 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   895 000034AC 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
   896 000034AF 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
   897 000034B2 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
   898 000034B9 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
   899 000034BD 0FB705(A0C60300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
   900 000034C4 C0E805              <1>     shr al, 5   ;Divide by 5 to get directory entry number
   901 000034C7 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
   902 000034CA 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
   903 000034CD 894717              <1>     mov dword [rdi + sft.dFileSize], eax
   904 000034D0 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
   905 000034D4 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   906 000034D8 C1E210              <1>     shl edx, 10h
   907 000034DB 09D0                <1>     or eax, edx
   908 000034DD 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
   909                              <1> 
   910 000034E0 31C0                <1>     xor eax, eax
   911                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
   912 000034E2 8A05(63C60300)      <1>     mov al, byte [workingDrv]
   913 000034E8 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
   914 000034EC 488B05(64C60300)    <1>     mov rax, qword [workingDPB]
   915 000034F3 48894707            <1>     mov qword [rdi + sft.qPtr], rax
   916                              <1>     ;Last thing, copy the filename over
   917                              <1>     ;Now save the name
   918                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
   919 000034F7 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
   920 000034FB 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   921 00003502 48A5                <1>     movsq   ;Copy over the space padded name to the sft
   922 00003504 66A5                <1>     movsw
   923 00003506 A4                  <1>     movsb
   924                              <1>     ;SFT filled, now we open on the driver if it supports it
   925 00003507 E905010000          <1>     jmp .openDriver
   926                              <1> .createFile:
   927                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
   928                              <1>     ;rsi points to current sda entry
   929 0000350C 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   930                              <1>     ;Clear out the dir entry
   931 00003513 57                  <1>     push rdi
   932 00003514 B904000000          <1>     mov ecx, 4
   933 00003519 31C0                <1>     xor eax, eax
   934 0000351B F348AB              <1>     rep stosq   ;Store 32 bytes of 0
   935 0000351E 5F                  <1>     pop rdi
   936                              <1>     ;Copy the FCB name over    
   937 0000351F 56                  <1>     push rsi
   938 00003520 57                  <1>     push rdi
   939 00003521 B90B000000          <1>     mov ecx, 11
   940 00003526 488D35(DBC50300)    <1>     lea rsi, fcbName
   941 0000352D F3A4                <1>     rep movsb   ;Move over the FCB name
   942 0000352F 5F                  <1>     pop rdi
   943 00003530 5E                  <1>     pop rsi
   944                              <1> 
   945 00003531 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   946                              <1>     ;al has file attributes.
   947 00003535 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   948 00003537 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
   949 0000353A 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   950 0000353D 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
   951 00003540 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
   952 00003543 8B05(D2C60300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
   953                              <1> .searchForDirSpace:
   954 00003549 8905(D6C60300)      <1>     mov dword [dirClustA], eax
   955 0000354F 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   956 00003551 668905(DAC60300)    <1>     mov word [dirSect], ax
   957 00003558 8905(DCC60300)      <1>     mov dword [dirEntry], eax
   958 0000355E 57                  <1>     push rdi
   959 0000355F E8BCE8FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   960 00003564 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
   961 00003565 7328                <1>     jnc .dirEntryFnd
   962 00003567 813D(D2C60300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   962 0000356F 0000                <1>
   963 00003571 0F84CB000000        <1>     je .bad ;Set CF and exit
   964 00003577 E8B5E9FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   965 0000357C 0F82BE000000        <1>     jc .exit
   966 00003582 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   967 00003587 0F84B5000000        <1>     je .bad
   968                              <1>     ;Else eax = Newly allocated cluster
   969 0000358D EBBA                <1>     jmp short .searchForDirSpace
   970                              <1> .dirEntryFnd:
   971 0000358F 4887FE              <1>     xchg rdi, rsi
   972 00003592 B904000000          <1>     mov ecx, 4
   973 00003597 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   974 0000359A E81CD4FFFF          <1>     call setBufferDirty ;We wrote to this buffer
   975 0000359F 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   976 000035A6 E9FAFEFFFF          <1>     jmp .createCommon
   977                              <1> .open:
   978                              <1> ;curdircopy has a copy of the disk file directory
   979                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
   980 000035AB 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   981 000035B2 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
   982                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
   983 000035B9 E876E8FFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
   984 000035BE E9E2FEFFFF          <1>     jmp .createCommon
   985                              <1> .openProc:
   986                              <1>     ;Here if Opening a file.
   987 000035C3 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   988 000035CA 74DF                <1>     jz .open
   989                              <1> .charDev:
   990 000035CC 488B05(BBC50300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
   991 000035D3 E8B7200000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
   992 000035D8 7307                <1>     jnc .notBadCharDevName
   993 000035DA B805000000          <1>     mov eax, errAccDen
   994 000035DF EB5F                <1>     jmp short .exit ;CF already set
   995                              <1> .notBadCharDevName:
   996 000035E1 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   997 000035E8 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
   998 000035EC 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
   999 000035F0 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1000 000035F3 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1001 000035F6 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1002 000035FA C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1003 00003601 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1004 00003605 B820202020          <1>     mov eax, "    "
  1005 0000360A 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1006 0000360E 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1007                              <1> .openDriver:
  1008 00003611 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1009 00003618 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the ptr here
  1010 0000361C 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1011 00003622 7508                <1>     jnz .charDevOpen
  1012 00003624 0FB64601            <1>     movzx eax, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1013 00003628 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1014                              <1> .charDevOpen:
  1015 0000362C 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1016 00003632 740C                <1>     jz .exit  ;If not, immediately jump to exit, all is well
  1017                              <1>     ;rsi has device driver ptr for device, make request
  1018 00003634 53                  <1>     push rbx
  1019 00003635 E8D11C0000          <1>     call primReqOpenSetup  ;rbx gets header ptr, rsi has driver ptr
  1020 0000363A E880190000          <1>     call goDriver   ;Make request
  1021 0000363F 5B                  <1>     pop rbx
  1022                              <1> .exit:
  1023 00003640 5D                  <1>     pop rbp
  1024                              <1>     return
    18                              <2> %%_ret:
    19 00003641 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1025                              <1> .bad:
  1026 00003642 F9                  <1>     stc
  1027 00003643 EBFB                <1>     jmp short .exit
  1028                              <1> closeMain: ;Int 4Fh AX=1201h
  1029                              <1> ;Gets the directory entry for a file
  1030                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1031                              <1> ;If CF=CY on return: Error, return error with al = error code
  1032                              <1> ;Preserve all regs except eax and rdi
  1033                              <1> ; If CF=NC on return: eax = Unknown
  1034                              <1> ;                     rdi = current SFT ptr
  1035 00003645 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1036 0000364C 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1037 00003652 7408                <1>     jz .physical
  1038                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1039 00003654 B806110000          <1>     mov eax, 1106h  ;Make request
  1040 00003659 CD4F                <1>     int 4Fh ;Beep!
  1041                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 0000365B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1042                              <1> .physical:  
  1043                              <1> ; We make a request to the dev dir to close the device
  1044                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1045 0000365C E8D1210000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1046 00003661 53                  <1>     push rbx
  1047 00003662 56                  <1>     push rsi
  1048 00003663 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1049 00003667 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1050 0000366D 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1051                              <1>     ;rsi has DPB pointer here
  1052                              <1>     ;rdi has the SFT pointer
  1053 0000366F 55                  <1>     push rbp
  1054 00003670 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1055 00003673 E8F11C0000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1056 00003678 E822E8FFFF          <1>     call updateDirectoryEntryForFile
  1057 0000367D 5D                  <1>     pop rbp
  1058                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1059 0000367E 722F                <1>     jc .exit
  1060 00003680 E81AD5FFFF          <1>     call flushFile
  1061 00003685 7228                <1>     jc .exit    ;If something went wrong, exit
  1062 00003687 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1063 0000368B 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1064                              <1> .charClose:
  1065                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1066                              <1>     ;We now decrement handle count in SFT structure
  1067 0000368F E862090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1068 00003694 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1069 00003697 7503                <1>     jnz .driverClose
  1070 00003699 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1071                              <1> .driverClose:
  1072 0000369C 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1073                              <1>     ;and if the device is a disk device, cl will have the unit number
  1074                              <1>     ;We first check if the driver supports oper/close requests
  1075 0000369D 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1076 000036A3 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
  1077                              <1>     ;rsi has device driver ptr for device, make request
  1078 000036A5 E8661C0000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
  1079 000036AA E810190000          <1>     call goDriver   ;Make request
  1080                              <1>     ;Don't check the status here, as we are simply informing the driver 
  1081                              <1>     ; of an operation. Nothing should be able to go wrong. 
  1082                              <1>     ;Functionally, an ignore if anything does go wrong.
  1083                              <1> .exit:
  1084 000036AF 5E                  <1>     pop rsi
  1085 000036B0 5B                  <1>     pop rbx
  1086 000036B1 E886210000          <1>     call dosCrit1Exit
  1087                              <1>     return
    18                              <2> %%_ret:
    19 000036B6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1088                              <1> 
  1089                              <1> readBytes:
  1090                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1091                              <1> ;Input: ecx = Number of bytes to read
  1092                              <1> ;Output: ecx = Number of bytes read
  1093                              <1> ;Number of bytes read 
  1094                              <1> ;If CF=CY, return with error code in ax
  1095 000036B7 E80D070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1096 000036BC 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1097 000036C0 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1098 000036C2 3C01                <1>     cmp al, WriteAccess
  1099 000036C4 7509                <1>     jne .readable
  1100 000036C6 B805000000          <1>     mov eax, errAccDen
  1101 000036CB 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1102 000036CD F9                  <1>     stc
  1103                              <1>     return
    18                              <2> %%_ret:
    19 000036CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1104                              <1> .readable:
  1105 000036CF E836070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1106 000036D4 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1107 000036D7 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1108 000036DD 740A                <1>     jz .notRedir
  1109 000036DF B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1110 000036E4 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1111                              <1>     return 
    18                              <2> %%_ret:
    19 000036E6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1112                              <1> .exitOk:
  1113 000036E7 F8                  <1>     clc
  1114                              <1>     return 
    18                              <2> %%_ret:
    19 000036E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1115                              <1> .notRedir:
  1116 000036E9 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1117 000036EF 7510                <1>     jnz readCharDev
  1118 000036F1 E83C210000          <1>     call dosCrit1Enter
  1119 000036F6 E898010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1120 000036FB E83C210000          <1>     call dosCrit1Exit
  1121                              <1>     return 
    18                              <2> %%_ret:
    19 00003700 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1122                              <1> readCharDev:
  1123                              <1> ;rdi points to sft for char dev to read
  1124                              <1> ;ecx has the number of bytes to transfer
  1125                              <1> ;Vars have been set up and DTA has the transfer address
  1126                              <1> ;Returns in ecx, the actual bytes transferred
  1127                              <1> ;If CF=CY, return with error code in ax
  1128 00003701 C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1129 00003708 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1130 0000370C 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1131 00003713 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1132 00003716 0F845F020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1133 0000371C F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1134 0000371F 7407                <1>     jz .notNul
  1135                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1136                              <1>     ;NUL never transfers bytes 
  1137 00003721 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1138 00003723 E953020000          <1>     jmp readExitOk    ;Goto exit
  1139                              <1> .notNul:
  1140 00003728 F6C320              <1>     test bl, charDevBinary
  1141 0000372B 757F                <1>     jnz .binary
  1142                              <1>     ;Here if the device is in ASCII mode
  1143 0000372D F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1144 00003730 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1145                              <1> .consoleInput:
  1146                              <1>     ;Console input here
  1147 00003736 E827EEFFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1148                              <1>     ;Get current offset into buffer (if one exists)
  1149 0000373B 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
  1150 00003742 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1151 00003745 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1152 00003747 803D(B0C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1153 0000374E 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1154                              <1>     ;Else, reset the buffer
  1155 00003750 66C705(B0C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1155 00003758 FF                  <1>
  1156                              <1> .oldBuf:
  1157                              <1> ;Preserve the dta and number of chars to tfr
  1158 00003759 51                  <1>     push rcx
  1159 0000375A 57                  <1>     push rdi
  1160 0000375B 488D15(B0C20300)    <1>     lea rdx, vConInBuf
  1161 00003762 E81BEEFFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1162 00003767 5F                  <1>     pop rdi
  1163 00003768 59                  <1>     pop rcx
  1164 00003769 488D35(B2C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1165 00003770 803E1A              <1>     cmp byte [rsi], EOF
  1166 00003773 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1167 00003775 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1168 00003778 B00A                <1>     mov al, LF
  1169 0000377A E895E9FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1170 0000377F 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1171 00003781 EB18                <1>     jmp short .exit
  1172                              <1> .tfrBuf:
  1173 00003783 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1174 00003784 AA                  <1>     stosb
  1175 00003785 3C0D                <1>     cmp al, CR 
  1176 00003787 7503                <1>     jne .noCRLF
  1177 00003789 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1178                              <1> .noCRLF:
  1179 0000378C 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1180 0000378E E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1181 00003790 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1182                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1183 00003792 E87DE9FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1184 00003797 31F6                <1>     xor esi, esi
  1185 00003799 0C01                <1>     or al, 1    ;Set ZF = NZ
  1186                              <1> .exit:
  1187 0000379B E8DAEDFFFF          <1>     call vConRetDriver
  1188 000037A0 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1189 000037A7 E9CF010000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1190                              <1> 
  1191                              <1> .binary:
  1192                              <1>     ;Setup registers for transfer
  1193 000037AC 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1194 000037AF 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1195                              <1>     ;ecx has the number of bytes to transfer directly
  1196 000037B2 E8A81A0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1197 000037B7 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1198 000037BE E8FC170000          <1>     call goDriver   ;Make the request
  1199 000037C3 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1200 000037C6 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1201 000037CD F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1202 000037D3 7422                <1>     jz .binNoError
  1203                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1204 000037D5 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1205 000037D7 E8BD160000          <1>     call charDevErr   ;ah = has part of the error 
  1206                              <1>     ;al now has the response
  1207 000037DC 3C00                <1>     cmp al, critIgnore
  1208 000037DE 7417                <1>     je .binNoError ;Simply proceed as normal
  1209 000037E0 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1210 000037E3 3C03                <1>     cmp al, critFail
  1211 000037E5 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1212                              <1>     ;Fallthrough here for fail!
  1213                              <1> .failExit:
  1214 000037E7 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1215 000037EE 31C9                <1>     xor ecx, ecx
  1216 000037F0 B805000000          <1>     mov eax, errAccDen
  1217 000037F5 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1218                              <1>     return
    18                              <2> %%_ret:
    19 000037F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1219                              <1> .binNoError:
  1220                              <1>     ;Get number of bytes transferred into 
  1221 000037F7 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1222 000037FD F7D8                <1>     neg eax ;make it into -eax
  1223 000037FF 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1224                              <1>     ;ecx now has bytes left to transfer
  1225 00003803 50                  <1>     push rax    ;Save value on stack
  1226 00003804 31C0                <1>     xor eax, eax ;Set ZF
  1227 00003806 FFC0                <1>     inc eax ;Clear ZF
  1228 00003808 58                  <1>     pop rax ;Get back the original value
  1229 00003809 E96D010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1230                              <1> .generalASCII:
  1231                              <1>     ;ecx has bytes to transfer here
  1232                              <1>     ;Setup registers for transfer
  1233 0000380E 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1234 00003811 51                  <1>     push rcx
  1235 00003812 B901000000          <1>     mov ecx, 1  ;Get one char
  1236 00003817 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1237 0000381A E8401A0000          <1>     call primReqReadSetup   ;Setup request
  1238 0000381F 59                  <1>     pop rcx
  1239                              <1>     ;rbx now has request header ptr
  1240 00003820 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1241                              <1> .asciiReadChar:
  1242 00003827 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1243 0000382A E8B7ECFFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1244 0000382F E88B170000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1245 00003834 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1246 0000383B F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1247 00003841 741E                <1>     jz .asciiNoError
  1248 00003843 E851160000          <1>     call charDevErr    ;Call Int 44h
  1249                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1250 00003848 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1250 00003850 0000                <1>
  1251 00003852 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1252 00003855 3C03                <1>     cmp al, critFail
  1253 00003857 748E                <1>     je .failExit
  1254 00003859 3C01                <1>     cmp al, critRetry
  1255 0000385B 74CA                <1>     je .asciiReadChar
  1256                              <1>     ;Ignore here, pretend NULL CHAR was read
  1257 0000385D 30C0                <1>     xor al, al
  1258 0000385F EB15                <1>     jmp short .asciiIgnoreEP
  1259                              <1> .asciiNoError:
  1260                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1261                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1262                              <1> ;Preserve RBX, RSI
  1263                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1264 00003861 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1265 00003864 813D(38C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1265 0000386C 0000                <1>
  1266 0000386E 0F8507010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1267 00003874 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1268                              <1> .asciiIgnoreEP:
  1269 00003876 48FF05(30C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1270 0000387D 48FFC7              <1>     inc rdi ;Also advance register pointer
  1271 00003880 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1272 00003882 0F84F3000000        <1>     je readExitOk
  1273 00003888 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1274 0000388A E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1275                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1276 0000388C FEC0                <1>     inc al  ;make ZF=NZ
  1277 0000388E E9E8000000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1278                              <1> 
  1279                              <1> readDiskFile:
  1280                              <1> ;rdi = Current SFT
  1281                              <1> ;rbp = WorkingDPB
  1282                              <1> ;ecx = Bytes to transfer
  1283 00003893 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1284 0000389A C605(5AC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1285                              <1>     ;We have the following vars setup:
  1286                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1287                              <1>     ;currClustF
  1288                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1289                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1290 000038A1 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1291 000038A4 85D2                <1>     test edx, edx
  1292 000038A6 0F84CF000000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1293 000038AC 8B15(A2C60300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1294 000038B2 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1295 000038B5 8905(A6C60300)      <1>     mov dword [currClustD], eax
  1296 000038BB 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1297 000038BD 0F84B8000000        <1>     jz readExitOk
  1298 000038C3 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1299 000038C5 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1300 000038CB 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1301 000038CD 741E                <1>     jz .skipWalk
  1302                              <1> .goToCurrentCluster:
  1303 000038CF 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1304 000038D4 0F84A1000000        <1>     je readExitOk ;Exit with no bytes transferred
  1305 000038DA 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
  1306 000038DC E85DD5FFFF          <1>     call readFAT    ;Get in eax the next cluster
  1307 000038E1 0F8285000000        <1>     jc .badExit   ;This can only return Fail
  1308 000038E7 FFCA                <1>     dec edx ;Decrement counter
  1309 000038E9 75E4                <1>     jnz .goToCurrentCluster
  1310                              <1> ;Now we fall out with ebx = Current cluster
  1311 000038EB 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
  1312                              <1> .skipWalk:
  1313 000038ED E872D3FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1314                              <1>     ;Now we add the offset to this
  1315 000038F2 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1316 000038F9 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1317 000038FC 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1318                              <1> ;Main
  1319                              <1> .mainRead:
  1320 00003903 E873D2FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1321 00003908 7262                <1>     jc .badExit
  1322 0000390A 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1323 0000390E 0FB71D(B7C60300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1324 00003915 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1325                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1326                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1327 00003918 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1328 0000391B 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1329 0000391E 8B1D(CEC60300)      <1>     mov ebx, dword [tfrCntr]
  1330 00003924 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1331 00003926 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1332 00003929 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1333 0000392D 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1334 0000392F 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1335 00003932 57                  <1>     push rdi
  1336 00003933 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
  1337 0000393A E855060000          <1>     call readWriteBytesBinary
  1338 0000393F 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1339 00003946 5F                  <1>     pop rdi
  1340 00003947 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1341 0000394D 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1342 0000394F 742A                <1>     jz readExitOk ;Exit if so!
  1343 00003951 E85CD4FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1344 00003956 7214                <1>     jc .badExit
  1345                              <1>     ;If ZF=ZE then CurrClustF has last cluster
  1346 00003958 7421                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1347                              <1>     ;Else repeat
  1348                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1349 0000395A 66C705(B7C60300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1349 00003962 00                  <1>
  1350 00003963 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1351 0000396A EB97                <1>     jmp short .mainRead
  1352                              <1> .badExit:
  1353                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1354                              <1>     ; we need to update the SFT before returning
  1355 0000396C 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1356 00003972 30C0                <1>     xor al, al  ;Set ZF flag
  1357 00003974 E802000000          <1>     call readExitOk   ;We call this
  1358 00003979 F9                  <1>     stc ;All calls which end up here return Fail!
  1359 0000397A C3                  <1>     ret
  1360                              <1> 
  1361                              <1> readExitOk:
  1362                              <1> ;Input: ecx = Number of bytes left to transfer!
  1363                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1364 0000397B 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1365 00003981 7509                <1>     jnz .skipbitClear
  1366 00003983 E841040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  1367                              <1>     ;The disk transfer must've flushed by now. 
  1368 00003988 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
  1369                              <1>     ;Next char dev read should give EOF.
  1370                              <1> .skipbitClear:  ;Or skip that entirely
  1371 0000398C E840040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1372                              <1>     return 
    18                              <2> %%_ret:
    19 00003991 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1373                              <1> 
  1374                              <1> writeBytes:
  1375                              <1> ;Writes the bytes from the user buffer
  1376                              <1> ;Input: ecx = Bytes to xfr
  1377                              <1> ;Returns number of bytes written in ecx
  1378 00003992 E832040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1379 00003997 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1380 0000399B 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1381 0000399D 3C00                <1>     cmp al, ReadAccess
  1382 0000399F 7509                <1>     jne .writeable
  1383                              <1> .noWrite:
  1384 000039A1 B805000000          <1>     mov eax, errAccDen
  1385 000039A6 31C9                <1>     xor ecx, ecx
  1386 000039A8 F9                  <1>     stc
  1387 000039A9 C3                  <1>     ret
  1388                              <1> .writeable:
  1389 000039AA 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1390 000039B0 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1391 000039B2 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1392 000039B6 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1393                              <1> .skipAttribCheck:
  1394 000039B8 E84D040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1395 000039BD 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1396 000039C3 7408                <1>     jz .notRedir
  1397 000039C5 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1398 000039CA CD4F                <1>     int 4Fh
  1399                              <1>     return
    18                              <2> %%_ret:
    19 000039CC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1400                              <1> .notRedir:
  1401 000039CD 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1402 000039D3 7510                <1>     jnz writeCharDev
  1403 000039D5 E8581E0000          <1>     call dosCrit1Enter
  1404 000039DA E84C010000          <1>     call writeDiskFile
  1405 000039DF E8581E0000          <1>     call dosCrit1Exit
  1406                              <1>     return
    18                              <2> %%_ret:
    19 000039E4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1407                              <1> writeCharDev:
  1408 000039E5 C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr
  1409                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1410 000039EC 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1411 000039F2 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1412                              <1>     ;If ecx = 0, we exit
  1413 000039F6 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1414 000039F8 85C9                <1>     test ecx, ecx
  1415 000039FA 0F84AA030000        <1>     jz writeExit
  1416 00003A00 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1417 00003A07 4889DF              <1>     mov rdi, rbx
  1418 00003A0A 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1419 00003A0C A820                <1>     test al, charDevBinary
  1420 00003A0E 744A                <1>     jz .asciiDev
  1421                              <1> ;Write binary transfer here
  1422                              <1> .binaryLp:
  1423 00003A10 31C0                <1>     xor eax, eax
  1424 00003A12 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1425 00003A15 E83A180000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1426 00003A1A 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1427 00003A21 E895150000          <1>     call goDriverChar
  1428 00003A26 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1429 00003A29 B487                <1>     mov ah, critCharDev | critData | critWrite
  1430 00003A2B 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1431 00003A32 F7C700800000        <1>     test edi, drvErrStatus
  1432 00003A38 7415                <1>     jz .binXfrOk
  1433 00003A3A E85A140000          <1>     call charDevErr ;Invoke Int 44h
  1434 00003A3F 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1435 00003A42 3C00                <1>     cmp al, critIgnore
  1436 00003A44 7409                <1>     je .binXfrOk
  1437 00003A46 3C01                <1>     cmp al, critRetry
  1438 00003A48 74C6                <1>     je .binaryLp
  1439 00003A4A E9D5000000          <1>     jmp .exitFail
  1440                              <1> .binXfrOk:
  1441 00003A4F 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1442 00003A55 E950030000          <1>     jmp writeExit   ;Exit oki with # bytes xfrd in eax
  1443                              <1> .asciiDev:
  1444 00003A5A A802                <1>     test al, charDevConOut
  1445 00003A5C 0F859E000000        <1>     jnz .conDev
  1446 00003A62 A804                <1>     test al, charDevNulDev
  1447 00003A64 0F858F000000        <1>     jnz .nulDev
  1448                              <1>     ;Here we transfer for a generic character device in ascii mode
  1449 00003A6A 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1450 00003A6C 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1451 00003A6F 0F8435030000        <1>     je writeExit
  1452 00003A75 51                  <1>     push rcx
  1453 00003A76 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1454 00003A7B 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1455 00003A7E E8D1170000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1456 00003A83 59                  <1>     pop rcx
  1457 00003A84 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
  1458 00003A8B 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1459                              <1> .asciiLp:
  1460 00003A8F E852EAFFFF          <1>     call checkBreak
  1461 00003A94 E826150000          <1>     call goDriver
  1462 00003A99 57                  <1>     push rdi
  1463 00003A9A B487                <1>     mov ah, critCharDev | critData | critWrite
  1464 00003A9C 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1465 00003AA3 F7C700800000        <1>     test edi, drvErrStatus
  1466 00003AA9 741D                <1>     jz .asciiNoError
  1467 00003AAB E8E9130000          <1>     call charDevErr ;Invoke Int 44h
  1468 00003AB0 5F                  <1>     pop rdi
  1469 00003AB1 C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1469 00003AB9 0000                <1>
  1470 00003ABB 3C01                <1>     cmp al, critRetry
  1471 00003ABD 74D0                <1>     je .asciiLp
  1472 00003ABF 3C00                <1>     cmp al, critIgnore
  1473 00003AC1 7412                <1>     je .ignoreEp
  1474 00003AC3 E95C000000          <1>     jmp .exitFail
  1475                              <1> .asciiNoError:
  1476 00003AC8 5F                  <1>     pop rdi
  1477 00003AC9 813D(38C40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1477 00003AD1 0000                <1>
  1478 00003AD3 741D                <1>     je .bytesXfrdOk
  1479                              <1> .ignoreEp:
  1480 00003AD5 FFC2                <1>     inc edx ;One more char has been xfrd
  1481 00003AD7 FF05(30C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1482 00003ADD 48FFC7              <1>     inc rdi ;And our copy... 
  1483 00003AE0 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1484 00003AE3 740D                <1>     je .bytesXfrdOk
  1485 00003AE5 66C705(25C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1485 00003AED 00                  <1>
  1486 00003AEE FFC9                <1>     dec ecx
  1487 00003AF0 759D                <1>     jnz .asciiLp
  1488                              <1> .bytesXfrdOk:
  1489 00003AF2 89D0                <1>     mov eax, edx
  1490 00003AF4 E9B1020000          <1>     jmp writeExit
  1491                              <1> .nulDev:
  1492 00003AF9 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1493 00003AFB E9AA020000          <1>     jmp writeExit
  1494                              <1> .conDev:
  1495 00003B00 E85DEAFFFF          <1>     call vConSwapDriver
  1496 00003B05 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1497 00003B08 51                  <1>     push rcx
  1498                              <1> .conDevLp:
  1499 00003B09 AC                  <1>     lodsb
  1500 00003B0A 3C1A                <1>     cmp al, EOF
  1501 00003B0C 7409                <1>     je .conDevExit
  1502 00003B0E E801E6FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  1503 00003B13 FFC9                <1>     dec ecx
  1504 00003B15 75F2                <1>     jnz .conDevLp
  1505                              <1> .conDevExit:
  1506 00003B17 58                  <1>     pop rax ;Get initial ecx back into eax
  1507 00003B18 29C8                <1>     sub eax, ecx
  1508 00003B1A E85BEAFFFF          <1>     call vConRetDriver
  1509 00003B1F E986020000          <1>     jmp writeExit   ;Input: eax = bytes xfrd
  1510                              <1> .exitFail:
  1511 00003B24 B805000000          <1>     mov eax, errAccDen
  1512 00003B29 F9                  <1>     stc
  1513                              <1>     return
    18                              <2> %%_ret:
    19 00003B2A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1514                              <1> writeDiskFile:
  1515                              <1>     ;rdi has SFT ptr
  1516 00003B2B C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  1517 00003B32 C605(5AC60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  1518 00003B39 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  1519 00003B3F 0F8542020000        <1>     jnz .badExit
  1520 00003B45 31DB                <1>     xor ebx, ebx
  1521 00003B47 891D(C6C60300)      <1>     mov dword [bytesAppend], ebx ;Reset the appending counter
  1522 00003B4D 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  1523                              <1>     ;If the start cluster is 0, we create a new cluster chain
  1524 00003B50 85C0                <1>     test eax, eax
  1525 00003B52 7520                <1>     jnz .notStart
  1526 00003B54 E885D1FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  1527 00003B59 0F821F020000        <1>     jc .exitPrepHardErr
  1528 00003B5F 3DFFFFFFFF          <1>     cmp eax, -1
  1529 00003B64 0F8424020000        <1>     je .exitPrep
  1530                              <1>     ;Now eax has the first cluster of chain
  1531 00003B6A 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  1532 00003B6D C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  1533                              <1> .notStart:
  1534 00003B74 E818D1FFFF          <1>     call getLastClusterInChain  ;to get the current last cluster in the file
  1535 00003B79 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1536 00003B7F E826D1FFFF          <1>     call getNumberOfClustersInChain ;Gets number of clusters
  1537 00003B84 FFC8                <1>     dec eax ;Turn into an offset of clusters in file
  1538 00003B86 8905(BDC60300)      <1>     mov dword [lastClust], eax
  1539                              <1>     ;Get the disk cluster of the file (currClustD)
  1540 00003B8C 8B0D(A2C60300)      <1>     mov ecx, dword [currClustF]
  1541 00003B92 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1542 00003B95 E82BD1FFFF          <1>     call getClusterInChain  ;Returns in eax the disk cluster value
  1543 00003B9A 0F82E7010000        <1>     jc .badExit
  1544                              <1>     ;ecx has the number of clusters we need to extend the allocation by.
  1545 00003BA0 67E36A              <1>     jecxz .skipExtension
  1546 00003BA3 E8BCD1FFFF          <1>     call findFreeClusterData    ;This updates the dpb to have free cluster data
  1547 00003BA8 0F82D9010000        <1>     jc .badExit
  1548 00003BAE 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters
  1549 00003BB3 0F84EF010000        <1>     je .noByteExit
  1550 00003BB9 394D31              <1>     cmp dword [rbp + dpb.dNumberOfFreeClusters], ecx
  1551 00003BBC 0F82E6010000        <1>     jb .noByteExit    ;If dNumberOfFreeClusters < ecx, exit
  1552                              <1>     ;Enough to extend by ecx amount
  1553 00003BC2 8B1D(C1C60300)      <1>     mov ebx, dword [lastClustA] ;Get the last disk cluster of the file
  1554 00003BC8 E832D1FFFF          <1>     call allocateClusters   ;Extend by ecx clusters
  1555 00003BCD 0F82B4010000        <1>     jc .badExit
  1556 00003BD3 010D(BDC60300)      <1>     add dword [lastClust], ecx  
  1557 00003BD9 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]
  1558 00003BDC 8B0D(BDC60300)      <1>     mov ecx, dword [lastClust]
  1559 00003BE2 E8DED0FFFF          <1>     call getClusterInChain
  1560 00003BE7 0F829A010000        <1>     jc .badExit
  1561                              <1>     ;eax has the last cluster on disk
  1562 00003BED 8905(C1C60300)      <1>     mov dword [lastClustA], eax
  1563                              <1>     ;Now we must extend the filesize in the SFT
  1564 00003BF3 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1565 00003BF6 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1566 00003BF9 31C0                <1>     xor eax, eax
  1567 00003BFB 8505(CAC60300)      <1>     test dword [tfrLen], eax
  1568 00003C01 0F84A3010000        <1>     jz writeExit    ;If we were extending the file, we are done
  1569 00003C07 8B05(C1C60300)      <1>     mov eax, dword [lastClustA] ;Get the absolute last cluster
  1570                              <1> .skipExtension:
  1571 00003C0D 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Now eax has the currClustD value
  1572                              <1>     ;Get the disk sector too
  1573 00003C13 E84CD0FFFF          <1>     call getStartSectorOfCluster
  1574 00003C18 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Add the in cluster sector offset
  1575 00003C1F 01D8                <1>     add eax, ebx    ;Add the offset to eax
  1576 00003C21 8905(AFC60300)      <1>     mov dword [currSectD], eax 
  1577                              <1>     ;If tfrLen = 0, we truncate to current file pointer position, rounding up
  1578                              <1>     ; clusterwise!
  1579 00003C27 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen] ;Get the number of bytes to transfer in ecx
  1580 00003C2D 85C9                <1>     test ecx, ecx
  1581 00003C2F 0F8433010000        <1>     jz .truncate
  1582                              <1>     ;Here we write proper data to the disk file
  1583                              <1> .writeLoop:
  1584 00003C35 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] ;Get bytewise sector offset
  1585 00003C3C 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  1586 00003C40 29C1                <1>     sub ecx, eax    ;Get bytes left to fill this sector in ecx
  1587 00003C42 8B05(CEC60300)      <1>     mov eax, dword [tfrCntr] ;Get # bytes left to transfer
  1588 00003C48 6639C1              <1>     cmp cx, ax  ;Is # of bytes leftto tfr less than bytes left in sector?
  1589 00003C4B 660F47C8            <1>     cmova cx, ax    ;If yes, swap
  1590 00003C4F 66890D(A0C60300)    <1>     mov word [sectTfr], cx  ;Save this value in the var
  1591 00003C56 0FB605(AEC60300)    <1>     movzx eax, byte [currSectC] ;Get sector offset in cluster
  1592 00003C5D 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
  1593 00003C60 0F8689000000        <1>     jbe .stayInCluster
  1594                              <1>     ;Get next Cluster information here
  1595 00003C66 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get disk cluster
  1596 00003C6C 3B05(C1C60300)      <1>     cmp eax, dword [lastClustA] ;Is this the last sector?
  1597 00003C72 7543                <1>     jne .nextCluster
  1598                              <1>     ;Growing the file
  1599 00003C74 C605(C5C60300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true
  1600 00003C7B B901000000          <1>     mov ecx, 1  ;Request 1 cluster
  1601 00003C80 89C3                <1>     mov ebx, eax    ;Save the last cluster number in eax
  1602 00003C82 E878D0FFFF          <1>     call allocateClusters
  1603 00003C87 0F82F1000000        <1>     jc .exitPrepHardErr
  1604 00003C8D 3DFFFFFFFF          <1>     cmp eax, -1 ;If eax = -1 then disk full condition
  1605 00003C92 0F82F6000000        <1>     jc .exitPrep
  1606 00003C98 89D8                <1>     mov eax, ebx    ;ebx is preserved
  1607 00003C9A E89FD1FFFF          <1>     call readFAT    ;Goto next cluster now, return in eax next cluster
  1608 00003C9F 0F82D9000000        <1>     jc .exitPrepHardErr
  1609 00003CA5 FF05(BDC60300)      <1>     inc dword [lastClust]
  1610 00003CAB 8905(C1C60300)      <1>     mov dword [lastClustA], eax ;Now eax is the new last cluster
  1611 00003CB1 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get the old last cluster
  1612                              <1>     ;eax now has the old last sector
  1613                              <1> .nextCluster:
  1614                              <1>     ;eax has old disk cluster information
  1615 00003CB7 E882D1FFFF          <1>     call readFAT    ;Get the next disk cluster in eax
  1616 00003CBC 0F82BC000000        <1>     jc .exitPrepHardErr
  1617 00003CC2 8905(A6C60300)      <1>     mov dword [currClustD], eax
  1618 00003CC8 FF05(A2C60300)      <1>     inc dword [currClustF]
  1619 00003CCE E891CFFFFF          <1>     call getStartSectorOfCluster
  1620 00003CD3 488905(AFC60300)    <1>     mov qword [currSectD], rax
  1621 00003CDA FF05(AAC60300)      <1>     inc dword [currSectF]
  1622 00003CE0 31C0                <1>     xor eax, eax
  1623 00003CE2 8805(AEC60300)      <1>     mov byte [currSectC], al  ;Sector zero in cluster
  1624 00003CE8 668905(B7C60300)    <1>     mov word [currByteS], ax  ;And byte zero of this sector in the cluster
  1625                              <1> .stayInCluster:
  1626 00003CEF 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get disk sector
  1627 00003CF6 E880CEFFFF          <1>     call getBufForData
  1628 00003CFB 0F827D000000        <1>     jc .exitPrepHardErr
  1629                              <1>     ;rbx points to disk buffer header
  1630 00003D01 0FB705(B7C60300)    <1>     movzx eax, word [currByteS] 
  1631 00003D08 488D5C0330          <1>     lea rbx, qword [rbx + bufferHdr.dataarea + rax] ;In sector offset
  1632                              <1>     ;rbx points to the current byte to write at
  1633 00003D0D 57                  <1>     push rdi
  1634 00003D0E 56                  <1>     push rsi
  1635 00003D0F 4889DF              <1>     mov rdi, rbx    ;The sector is the destination of the write
  1636 00003D12 488B35(79C30300)    <1>     mov rsi, qword [currentDTA] ;Get the user buffer as the source
  1637 00003D19 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]   ;Get # of bytes to write
  1638 00003D20 F3A4                <1>     rep movsb   ;Move over cx number of bytes
  1639 00003D22 488935(79C30300)    <1>     mov qword [currentDTA], rsi ;Update currentDTA
  1640 00003D29 5E                  <1>     pop rsi
  1641 00003D2A 5F                  <1>     pop rdi
  1642 00003D2B E88BCCFFFF          <1>     call setBufferDirty
  1643 00003D30 0FB70D(A0C60300)    <1>     movzx ecx, word [sectTfr]
  1644 00003D37 F605(C5C60300)FF    <1>     test byte [fileGrowing], -1
  1645 00003D3E 7406                <1>     jz .notGrowing
  1646 00003D40 010D(C6C60300)      <1>     add dword [bytesAppend], ecx
  1647                              <1> .notGrowing:
  1648 00003D46 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx
  1649 00003D4C 7440                <1>     jz .exitPrep
  1650 00003D4E 31C0                <1>     xor eax, eax
  1651 00003D50 668905(B7C60300)    <1>     mov word [currByteS], ax    ;Start of the next sector
  1652 00003D57 010D(B9C60300)      <1>     add dword [currByteF], ecx  ;Goto the next sector in the file
  1653 00003D5D FE05(AEC60300)      <1>     inc byte [currSectC]    ;Increment sector in cluster now
  1654 00003D63 E9CDFEFFFF          <1>     jmp .writeLoop
  1655                              <1> 
  1656                              <1> .truncate:
  1657                              <1> ;We must free the chain from currClustD
  1658 00003D68 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1659 00003D6E E8A6D0FFFF          <1>     call truncateFAT    ;Truncate from the current cluster
  1660 00003D73 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  1661 00003D76 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  1662 00003D79 E92A000000          <1>     jmp .noByteExit ;Exit ok!
  1663                              <1> .exitPrepHardErr:
  1664 00003D7E 50                  <1>     push rax    ;Save error code
  1665 00003D7F E80A000000          <1>     call .exitPrep
  1666 00003D84 58                  <1>     pop rax
  1667                              <1> .badExitHard:    ;AL has error code already
  1668 00003D85 F9                  <1>     stc
  1669                              <1>     return
    18                              <2> %%_ret:
    19 00003D86 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1670                              <1> .badExit:
  1671                              <1> ;Might need to do some weird stuff later. Leave for now
  1672 00003D87 B805000000          <1>     mov eax, errAccDen
  1673 00003D8C EBF7                <1>     jmp short .badExitHard
  1674                              <1> 
  1675                              <1> .exitPrep:
  1676 00003D8E 8B0D(C6C60300)      <1>     mov ecx, dword [bytesAppend]
  1677 00003D94 014F17              <1>     add dword [rdi + sft.dFileSize], ecx    ;Add these bytes to the filesize
  1678 00003D97 8B05(CAC60300)      <1>     mov eax, dword [tfrLen]
  1679 00003D9D 2B05(CEC60300)      <1>     sub eax, dword [tfrCntr]    ;Subtract by bytes left to tfr
  1680 00003DA3 E902000000          <1>     jmp writeExit
  1681                              <1> 
  1682                              <1> .noByteExit:
  1683 00003DA8 31C0                <1>     xor eax, eax
  1684                              <1> writeExit:
  1685                              <1> ;Advances the bytes on the file pointer
  1686                              <1> ;eax = Number of bytes transferred
  1687 00003DAA 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1688 00003DB1 89C1                <1>     mov ecx, eax
  1689 00003DB3 E801000000          <1>     call .advPtr
  1690                              <1>     return  ;Return to caller, ecx = # bytes xfrd
    18                              <2> %%_ret:
    19 00003DB8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1691                              <1> .advPtr:
  1692 00003DB9 67E303              <1>     jecxz .exit
  1693 00003DBC 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx
  1694                              <1> .exit:
  1695 00003DBF F8                  <1>     clc
  1696                              <1>     return
    18                              <2> %%_ret:
    19 00003DC0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1697                              <1> 
  1698                              <1> ;-----------------------------------:
  1699                              <1> ;        File Handle routines       :
  1700                              <1> ;-----------------------------------:
  1701                              <1> 
  1702                              <1> setCurrentSFT:
  1703                              <1> ;Set the pointer in rdi as current SFT 
  1704 00003DC1 48893D(84C60300)    <1>     mov qword [currentSFT], rdi
  1705                              <1>     return 
    18                              <2> %%_ret:
    19 00003DC8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1706                              <1> getCurrentSFT:
  1707                              <1> ;Get the current SFT pointer in rdi
  1708 00003DC9 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1709                              <1>     return 
    18                              <2> %%_ret:
    19 00003DD0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1710                              <1> updateCurrentSFT:
  1711                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  1712                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  1713 00003DD1 57                  <1>     push rdi
  1714 00003DD2 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1715 00003DD9 8B0D(CAC60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
  1716 00003DDF 2B0D(CEC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
  1717                              <1>     ;ecx has bytes transferred
  1718 00003DE5 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  1719 00003DEB 751A                <1>     jnz .exit
  1720 00003DED 50                  <1>     push rax
  1721 00003DEE 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1722 00003DF4 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  1723 00003DF7 8B05(A2C60300)      <1>     mov eax, dword [currClustF]
  1724 00003DFD 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  1725 00003E00 58                  <1>     pop rax
  1726 00003E01 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
  1727 00003E04 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  1728                              <1> .exit:
  1729 00003E07 5F                  <1>     pop rdi
  1730 00003E08 F8                  <1>     clc
  1731                              <1>     return 
    18                              <2> %%_ret:
    19 00003E09 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1732                              <1> setupVarsForTransfer:
  1733                              <1> ;Computes the actual bytes to be transferred and 
  1734                              <1> ; sets up internal variables for the transfer. 
  1735                              <1> ;Works for both reading and writing
  1736                              <1> ;Input: ecx = User desired Bytes to transfer
  1737                              <1> ;       rdi = SFT pointer for the file
  1738                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  1739                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  1740                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  1741                              <1> ;
  1742                              <1> ;Note: Does not account for a FULL disk. When writing,
  1743                              <1> ; if the disk will get full as a result of the write,
  1744                              <1> ; stop at the last byte before the transfer. If the 
  1745                              <1> ; file pointer is past the last free byte, write 0
  1746 00003E0A 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  1747 00003E0E 488935(64C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  1748 00003E15 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  1749 00003E18 8905(B9C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  1750 00003E1E 890D(CAC60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  1751 00003E24 890D(CEC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  1752 00003E2A 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  1753 00003E30 7402                <1>     jz setupVarsForDiskTransfer
  1754 00003E32 F8                  <1>     clc
  1755                              <1>     return
    18                              <2> %%_ret:
    19 00003E33 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1756                              <1> setupVarsForDiskTransfer:
  1757                              <1> ;Extension of the above, but for Disk files only
  1758                              <1> ;Input: ecx = User desired Bytes to transfer
  1759                              <1> ;       rdi = SFT pointer for the file
  1760                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  1761                              <1> ;        CF=CY: Error exit
  1762 00003E34 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  1763 00003E37 8905(B9C60300)      <1>     mov dword [currByteF], eax
  1764 00003E3D 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  1765                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  1766 00003E41 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
  1767 00003E48 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  1768 00003E4B 881D(63C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  1769 00003E51 8B05(B9C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1770 00003E57 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1771 00003E5B 31D2                <1>     xor edx, edx    ;Zero rdx
  1772 00003E5D F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1773                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  1774                              <1>     ;edx has the offset into that sector
  1775 00003E5F 8905(AAC60300)      <1>     mov dword [currSectF], eax
  1776 00003E65 668915(B7C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1777 00003E6C 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  1778 00003E6E 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  1779 00003E71 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  1780 00003E77 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  1781 00003E79 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  1782 00003E7C D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  1783 00003E7E 8915(A2C60300)      <1>     mov dword [currClustF], edx ;Save in var
  1784 00003E84 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  1785                              <1> .exit:
  1786 00003E86 F8                  <1>     clc
  1787                              <1>     return 
    18                              <2> %%_ret:
    19 00003E87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1788                              <1> findFreeSFT:
  1789                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  1790                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  1791                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  1792                              <1> ;        CF=CY => eax = errNhl, error exit
  1793 00003E88 31DB                <1>     xor ebx, ebx
  1794                              <1> .mainLp:
  1795 00003E8A 53                  <1>     push rbx    ;Save the sft ndx
  1796 00003E8B E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  1797 00003E90 5B                  <1>     pop rbx
  1798 00003E91 7307                <1>     jnc .sftExists
  1799 00003E93 B804000000          <1>     mov eax, errNhl
  1800 00003E98 F9                  <1>     stc
  1801                              <1>     return
    18                              <2> %%_ret:
    19 00003E99 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1802                              <1> .sftExists:
  1803 00003E9A 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  1804 00003E9F 7427                <1>     je .sftFound
  1805 00003EA1 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  1806 00003EA6 751C                <1>     jne .gotoNextNdx
  1807                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  1808 00003EA8 53                  <1>     push rbx
  1809 00003EA9 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1810 00003EB0 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  1811 00003EB4 750B                <1>     jne .netGoToNextNdx
  1812 00003EB6 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1813 00003EBD 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  1814                              <1> .netGoToNextNdx:
  1815 00003EC1 5B                  <1>     pop rbx
  1816 00003EC2 7404                <1>     je .sftFound
  1817                              <1> .gotoNextNdx:
  1818 00003EC4 FFC3                <1>     inc ebx
  1819 00003EC6 EBC2                <1>     jmp short .mainLp
  1820                              <1> .sftFound:
  1821 00003EC8 53                  <1>     push rbx
  1822 00003EC9 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  1823 00003ECE 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1824 00003ED5 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  1825 00003ED9 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1826 00003EE0 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  1827 00003EE4 5B                  <1>     pop rbx
  1828 00003EE5 F8                  <1>     clc
  1829                              <1>     return
    18                              <2> %%_ret:
    19 00003EE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1830                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  1831                              <1> ;Return a pointer to the SFT entry in rdi
  1832                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  1833                              <1> ;Output: rdi = SFT pointer
  1834 00003EE7 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  1835                              <1> .walk:
  1836 00003EEE 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  1837 00003EF2 7212                <1>     jb .thisTable
  1838 00003EF4 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  1839 00003EF8 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  1840 00003EFB 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1841 00003F02 75EA                <1>     jne .walk
  1842 00003F04 F9                  <1>     stc
  1843                              <1>     return
    18                              <2> %%_ret:
    19 00003F05 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1844                              <1> .thisTable:
  1845 00003F06 50                  <1>     push rax
  1846 00003F07 52                  <1>     push rdx
  1847 00003F08 B84F000000          <1>     mov eax, sft_size
  1848 00003F0D F7E3                <1>     mul ebx
  1849 00003F0F 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  1850 00003F12 5A                  <1>     pop rdx
  1851 00003F13 58                  <1>     pop rax
  1852 00003F14 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  1853                              <1>     return
    18                              <2> %%_ret:
    19 00003F1B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1854                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  1855                              <1> ;Return a zero extended value in rdi for the SFT entry
  1856                              <1> ;Input: bx = JFT handle (we zero extend)
  1857                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  1858                              <1> ;        CF=CY => al = Error code, Fail
  1859 00003F1C 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  1860 00003F1F 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  1861 00003F26 7204                <1>     jb .ok
  1862 00003F28 B006                <1>     mov al, errBadHdl
  1863 00003F2A F9                  <1>     stc
  1864                              <1>     return
    18                              <2> %%_ret:
    19 00003F2B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1865                              <1> .ok:
  1866 00003F2C 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
  1867 00003F33 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  1868 00003F38 F8                  <1>     clc
  1869                              <1>     return
    18                              <2> %%_ret:
    19 00003F39 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1870                              <1> findFreeJFTEntry:
  1871                              <1> ;Finds a free JFT entry in the currentPSP.
  1872                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  1873                              <1> ;        CF=CY => al=errNhl
  1874 00003F3A 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  1875                              <1> .searchLp:
  1876 00003F3C E8DBFFFFFF          <1>     call getJFTPtr
  1877 00003F41 7209                <1>     jc .badExit
  1878 00003F43 803FFF              <1>     cmp byte [rdi], -1
  1879                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003F46 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1880 00003F48 FFC3                <1>     inc ebx
  1881 00003F4A EBF0                <1>     jmp short .searchLp
  1882                              <1> .badExit:
  1883 00003F4C B004                <1>     mov al, errNhl
  1884 00003F4E F9                  <1>     stc
  1885                              <1>     return
    18                              <2> %%_ret:
    19 00003F4F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1886                              <1> getSFTPtr:
  1887                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  1888                              <1> ;Input: bx = JFT handle
  1889                              <1> ;Output: CF=NC: rdi = SFT pointer
  1890                              <1> ;        CF=CY: Error, ax=Error code
  1891 00003F50 E815000000          <1>     call derefSFTPtr
  1892                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003F55 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1893 00003F57 50                  <1>     push rax
  1894 00003F58 0FB705(A5C30300)    <1>     movzx eax, word [machineNum]
  1895 00003F5F 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  1896 00003F63 58                  <1>     pop rax
  1897                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003F64 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1898 00003F66 B006                <1>     mov al, errBadHdl   ;Error code
  1899 00003F68 F9                  <1>     stc         ;Reset CF
  1900                              <1>     return
    18                              <2> %%_ret:
    19 00003F69 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1901                              <1> 
  1902                              <1> derefSFTPtr:
  1903                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  1904                              <1> ;Input: bx = File handle (gets zero extended)
  1905                              <1> ;Output: CF=NC: rdi = SFT pointer
  1906                              <1> ;        CF=CY: Error, ax=Error code
  1907 00003F6A E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  1908 00003F6F 7205                <1>     jb .fail
  1909 00003F71 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  1910 00003F74 7504                <1>     jne .ok
  1911                              <1> .fail:
  1912 00003F76 B006                <1>     mov al, errBadHdl
  1913 00003F78 F9                  <1>     stc
  1914                              <1>     return
    18                              <2> %%_ret:
    19 00003F79 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1915                              <1> .ok:
  1916 00003F7A 53                  <1>     push rbx    ;Preserve the JFT handle
  1917 00003F7B 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  1918 00003F7E E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  1919 00003F83 5B                  <1>     pop rbx 
  1920                              <1>     return
    18                              <2> %%_ret:
    19 00003F84 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1921                              <1> 
  1922                              <1> getBytesTransferred:
  1923 00003F85 8B0D(CEC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  1924 00003F8B F7D9                <1>     neg ecx ;Multiply by -1
  1925 00003F8D 030D(CAC60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  1926                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 00003F93 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1927                              <1> 
  1928                              <1> readWriteBytesBinary:
  1929                              <1> ;Input: ecx = number of bytes to read in Binary mode
  1930                              <1> ;       rdi = Points to where in caller buffer to read/write bytes
  1931                              <1> ;       rsi = Points to where in DOS buffer to write/read pointer
  1932                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
  1933                              <1> ;Preserve rcx so we know how many bytes transferred
  1934                              <1> ;Update the currByteA variable
  1935                              <1> ;Returns (rsi and rdi) + (ecx on entry)
  1936 00003F94 51                  <1>     push rcx
  1937 00003F95 F605(5AC60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
  1938 00003F9C 7403                <1>     jz .noSwap
  1939 00003F9E 4887FE              <1>     xchg rdi, rsi
  1940                              <1> .noSwap:
  1941 00003FA1 F3A4                <1>     rep movsb
  1942 00003FA3 59                  <1>     pop rcx
  1943 00003FA4 010D(B9C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1944 00003FAA 290D(CEC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1945                              <1>     return
    18                              <2> %%_ret:
    19 00003FB0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1946                              <1> 
  1947                              <1> findFreeJFTSpace:
  1948                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
  1949                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
  1950                              <1> ;Else, a pointer to the free space in rsi and al = -1
  1951 00003FB1 51                  <1>     push rcx
  1952 00003FB2 488B35(81C30300)    <1>     mov rsi, qword [currentPSP]
  1953 00003FB9 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
  1954 00003FC0 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
  1955                              <1> .search:
  1956 00003FC4 AC                  <1>     lodsb
  1957 00003FC5 3CFF                <1>     cmp al, -1
  1958 00003FC7 7407                <1>     je .exit
  1959 00003FC9 FFC9                <1>     dec ecx
  1960 00003FCB 75F7                <1>     jnz .search
  1961 00003FCD B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
  1962 00003FCF F9                  <1>     stc ;Set error bit
  1963                              <1> .exit:
  1964 00003FD0 59                  <1>     pop rcx
  1965                              <1>     return
    18                              <2> %%_ret:
    19 00003FD1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1966                              <1> 
  1967                              <1> getSFTndxInheritable:
  1968                              <1> ;Given a SFTndx this function will verify if it is inheritable
  1969                              <1> ;Input: ebx = SFTndx (word)
  1970                              <1> ;Output: 
  1971                              <1> ;   ZF=ZE => Inheritable
  1972                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  1973 00003FD2 57                  <1>     push rdi
  1974 00003FD3 E80FFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  1975 00003FD8 7208                <1>     jc .badNdx
  1976 00003FDA 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  1977 00003FE0 5F                  <1>     pop rdi
  1978                              <1>     return
    18                              <2> %%_ret:
    19 00003FE1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1979                              <1> .badNdx:
  1980 00003FE2 31FF                <1>     xor edi, edi
  1981 00003FE4 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  1982 00003FE6 F8                  <1>     clc
  1983 00003FE7 5F                  <1>     pop rdi
  1984                              <1>     return
    18                              <2> %%_ret:
    19 00003FE8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1985                              <1> 
  1986                              <1> incrementOpenCount:
  1987                              <1> ;Given a SFTndx, this function will increment it's open count
  1988                              <1> ;Output:
  1989                              <1> ;   CF=NC => sftndx ok, count incremented
  1990                              <1> ;   CF=CY => Bad ndx
  1991 00003FE9 57                  <1>     push rdi
  1992 00003FEA E8F8FEFFFF          <1>     call getSFTPtrfromSFTNdx
  1993 00003FEF 7203                <1>     jc .exit
  1994 00003FF1 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  1995                              <1> .exit:
  1996 00003FF4 5F                  <1>     pop rdi
  1997                              <1>     return
    18                              <2> %%_ret:
    19 00003FF5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1998                              <1> 
  1999                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2000                              <1> ;Input: rdi = SFT pointer
  2001                              <1> ;Output: ax = Original wNumHandles count
  2002 00003FF6 9C                  <1>     pushfq
  2003 00003FF7 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2004 00003FFA FFC8                <1>     dec eax     ;Decrement count
  2005 00003FFC 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2006 00003FFE FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2007                              <1> .exit:
  2008 00004000 9D                  <1>     popfq
  2009 00004001 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2010                              <1>     return
    18                              <2> %%_ret:
    19 00004004 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    32                              <1> ioctrl:            ;ah = 44h, handle function
    33                              <1> ;Possible subfunctions
    34                              <1> ;al = 00h => Get Handle Information word in dx  x
    35                              <1> ;al = 01h => Set Handle Information word        x
    36                              <1> ;al = 02h => Read from Char device              
    37                              <1> ;al = 03h => Write to Char device               
    38                              <1> ;al = 04h => Read from Block device             
    39                              <1> ;al = 05h => Write to Block device              
    40                              <1> ;al = 06h => Get input status                   
    41                              <1> ;al = 07h => Get output status                  
    42                              <1> ;al = 08h => Is a block device removable?       
    43                              <1> ;al = 09h => Is a logical device local or remote?   
    44                              <1> ;al = 0Ah => Is a handle to a local or remote file? 
    45                              <1> ;al = 0Bh => Change sharing retry count (RESERVED)  
    46                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    47                              <1> ;al = 0Dh => Block device Generic IOCTL request     
    48                              <1> ;al = 0Eh => Get logical device                 
    49                              <1> ;al = 0Fh => Set logical device                 
    50 00004005 84C0                <1>     test al, al
    51 00004007 740B                <1>     jz .getDevWord
    52 00004009 3C01                <1>     cmp al, 1
    53 0000400B 7422                <1>     je .setDevWord
    54 0000400D B001                <1>     mov al, errInvFnc
    55 0000400F E95D180000          <1>     jmp extErrExit
    56                              <1> .getDevWord:
    57                              <1>     ;Input: bx = File Handle
    58 00004014 E851FFFFFF          <1>     call derefSFTPtr
    59 00004019 0F8252180000        <1>     jc extErrExit
    60                              <1>     ;Now rdi has ptr to SFT handle
    61 0000401F 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    62 00004023 30C0                <1>     xor al, al
    63 00004025 E8B4130000          <1>     call getUserRegs
    64 0000402A 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    65                              <1>     return
    18                              <2> %%_ret:
    19 0000402E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> .setDevWord:
    67                              <1>     ;Input: bx = File Handle
    68                              <1>     ;       dl = Low byte of Device information word 
    69 0000402F E836FFFFFF          <1>     call derefSFTPtr
    70 00004034 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    71                              <1>     return
    18                              <2> %%_ret:
    19 00004037 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    33                              <1> ;Memory related functions
    34                              <1> 
    35                              <1> ;-----------------------------------:
    36                              <1> ;  Memory related Kernel routines   :
    37                              <1> ;-----------------------------------:
    38                              <1> allocateMemory:    ;ah = 48h
    39                              <1> ;Input: ebx = Number of paragraphs requested
    40                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    41                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    42 00004038 E8F5170000          <1>     call dosCrit1Enter
    43 0000403D 31D2                <1>     xor edx, edx
    44                              <1>     ;Clear the pointers
    45 0000403F 488915(A7C30300)    <1>     mov qword [firstMCB], rdx
    46 00004046 488915(AFC30300)    <1>     mov qword [bestMCB], rdx
    47 0000404D 488915(B7C30300)    <1>     mov qword [lastMCB], rdx
    48 00004054 31ED                <1>     xor ebp, ebp    
    49 00004056 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    50 00004058 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    51                              <1> .walk:
    52 0000405F 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    53 00004062 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    54 00004065 7409                <1>     je .walk1
    55 00004067 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    56 0000406A 0F850B050000        <1>     jne badMCBChain
    57                              <1> .walk1:
    58                              <1>     ;Here if valid but not the last block
    59 00004070 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    60 00004078 0F8582000000        <1>     jne .walk2
    61                              <1>     ;Here we consolidate adjacent free blocks if there are any
    62                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    63                              <1>     ;End consolidation at first non free block or at last block in chain
    64 0000407E 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    65 00004081 744A                <1>     je .det0    ;Determine if this block is useful
    66 00004083 31C9                <1>     xor ecx, ecx
    67 00004085 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    68 00004088 4881C610000000      <1>     add rsi, mcb.program
    69                              <1> .cons0:
    70 0000408F 48C1E104            <1>     shl rcx, 4
    71 00004093 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    72 00004096 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    73 00004099 7409                <1>     je .cons1
    74 0000409B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    75 0000409E 0F85D7040000        <1>     jne badMCBChain 
    76                              <1> .cons1:
    77 000040A4 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    78 000040AC 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    79                              <1>     ;Here rsi, points to a free block, add it to rdi
    80 000040AE 31C9                <1>     xor ecx, ecx
    81 000040B0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    82 000040B3 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    83 000040B9 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    84 000040BC 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    85 000040BE 31D2                <1>     xor edx, edx
    86 000040C0 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    87 000040C3 48895608            <1>     mov qword [rsi + 8], rdx
    88 000040C7 3C5A                <1>     cmp al, mcbMarkEnd
    89 000040C9 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    90                              <1>     ;Here we deal with if the block was the last one 
    91 000040CB 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    92                              <1> .det0:  ;Now determine if pointer in rdi is useful
    93 000040CD 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    94                              <1> ;ebx must be less than the arena size for the arena to be useful!
    95 000040D0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    96 000040D3 39D9                <1>     cmp ecx, ebx
    97 000040D5 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    98 000040D7 488935(B7C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    99 000040DE 488B05(A7C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   100 000040E5 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   101 000040E8 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   102 000040EA 488935(A7C30300)    <1>     mov qword [firstMCB], rsi
   103                              <1> .det1:
   104                              <1>     ;Now test for best fit.
   105 000040F1 29D9                <1>     sub ecx, ebx    ;Block - ebx
   106 000040F3 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   107 000040F5 7209                <1>     jb .walk2
   108 000040F7 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   109 000040F9 488935(AFC30300)    <1>     mov qword [bestMCB], rsi
   110                              <1> .walk2:
   111 00004100 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   112 00004103 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   113 00004105 31C9                <1>     xor ecx, ecx
   114 00004107 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   115 0000410A 48C1E104            <1>     shl rcx, 4
   116 0000410E 4881C610000000      <1>     add rsi, mcb.program
   117 00004115 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   118 00004118 E942FFFFFF          <1>     jmp .walk
   119                              <1> .allocate:
   120                              <1>     ;Allocation fails IF the pointer is the null pointer
   121 0000411D 803D(35C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   122 00004124 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   123                              <1>     ;Fall thru if last fit
   124 00004126 488B35(B7C30300)    <1>     mov rsi, qword [lastMCB]
   125 0000412D 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   126 00004130 0F84D8000000        <1>     jz .allocFail
   127 00004136 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   128 00004138 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   129 0000413B 31C9                <1>     xor ecx, ecx
   130 0000413D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   131 00004140 29D9                <1>     sub ecx, ebx
   132 00004142 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   133 00004148 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   134 0000414B 48C1E104            <1>     shl rcx, 4
   135 0000414F 4881C610000000      <1>     add rsi, mcb.program
   136 00004156 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   137 00004159 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   138 0000415B 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   139 0000415E 488B15(81C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   140 00004165 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   141 00004169 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   142 00004170 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   143 00004177 4889F0              <1>     mov rax, rsi
   144 0000417A 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   145 0000417D 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   146 00004181 E8C8030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   147 00004186 E8B1160000          <1>     call dosCrit1Exit
   148                              <1>     return
    18                              <2> %%_ret:
    19 0000418B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> .bfCommon:
   150 0000418C 488B35(A7C30300)    <1>     mov rsi, qword [firstMCB]
   151 00004193 803D(35C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   152 0000419A 480F4435(AFC30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   153 000041A2 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   154 000041A5 7467                <1>     jz .allocFail
   155 000041A7 8A06                <1>     mov al, byte [rsi + mcb.marker]
   156 000041A9 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   157 000041AC 31C9                <1>     xor ecx, ecx
   158 000041AE 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   159 000041B1 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   160 000041B3 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   161 000041B9 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   162 000041BC 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   163 000041C3 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   164 000041C7 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   165 000041CA 4881C610000000      <1>     add rsi, mcb.program
   166 000041D1 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   167 000041D7 48C1E304            <1>     shl rbx, 4
   168 000041DB 4801DE              <1>     add rsi, rbx
   169 000041DE 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   170 000041E0 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   171 000041E8 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   172 000041EB 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   173 000041F2 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   174 000041F9 4889F8              <1>     mov rax, rdi
   175 000041FC 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   176 000041FF 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   177 00004203 E846030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   178 00004208 E82F160000          <1>     call dosCrit1Exit
   179                              <1>     return
    18                              <2> %%_ret:
    19 0000420D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> .allocFail:
   181                              <1>     ;Walk the MCB chain to determine the biggest block size
   182 0000420E 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   183 00004215 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   184                              <1> .af0:
   185 00004217 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   186 0000421A 7409                <1>     je .af1
   187 0000421C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   188 0000421F 0F8556030000        <1>     jne badMCBChain
   189                              <1> .af1:
   190 00004225 31C9                <1>     xor ecx, ecx
   191 00004227 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   192 0000422A 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   193 00004232 7505                <1>     jne .af2
   194 00004234 39D9                <1>     cmp ecx, ebx
   195 00004236 0F47D9              <1>     cmova ebx, ecx
   196                              <1> .af2:
   197 00004239 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   198 0000423C 7410                <1>     je .afExit
   199 0000423E 48C1E104            <1>     shl rcx, 4
   200 00004242 4881C610000000      <1>     add rsi, mcb.program
   201 00004249 4801CE              <1>     add rsi, rcx
   202 0000424C EBD7                <1>     jmp short .af1
   203                              <1> .afExit:
   204 0000424E B808000000          <1>     mov eax, errNoMem
   205 00004253 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   206 0000425A 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   207 0000425D E91B030000          <1>     jmp mcbErrHdlr
   208                              <1> freeMemory:        ;ah = 49h
   209                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   210                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   211                              <1> ;Always skip the first block as this is the anchor for DOS
   212 00004262 E8CB150000          <1>     call dosCrit1Enter
   213 00004267 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   214 0000426E 31C9                <1>     xor ecx, ecx
   215 00004270 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   216 00004277 4889F7              <1>     mov rdi, rsi
   217 0000427A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   218 0000427D 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   219 00004281 4881C610000000      <1>     add rsi, mcb.program
   220 00004288 4801CE              <1>     add rsi, rcx    ;Go to next block
   221                              <1> .mainLoop:
   222 0000428B 31C9                <1>     xor ecx, ecx
   223 0000428D 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   224 00004290 7409                <1>     je .valid
   225 00004292 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   226 00004295 0F85E0020000        <1>     jne badMCBChain
   227                              <1> .valid:
   228 0000429B 4939F0              <1>     cmp r8, rsi
   229 0000429E 741C                <1>     je .blockFound
   230                              <1>     ;Not valid, check if last block in chain
   231 000042A0 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   232 000042A3 0F84A5000000        <1>     je .blockError
   233 000042A9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 000042AC 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 000042B0 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   236 000042B7 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 000042BA EBCF                <1>     jmp short .mainLoop
   238                              <1> .blockFound:
   239                              <1>     ;If hole, error.
   240                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   241 000042BC 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   242 000042C4 0F8484000000        <1>     je .blockError
   243 000042CA 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   244 000042D2 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   245 000042DA 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   246                              <1>     ;It is, let it absorb this space
   247 000042DC 31C9                <1>     xor ecx, ecx
   248 000042DE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   249 000042E1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   250 000042E7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   251                              <1>     ;Replace block marker
   252 000042EA 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   253 000042EC 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   254 000042EE 31C9                <1>     xor ecx, ecx
   255 000042F0 48890E              <1>     mov qword [rsi], rcx
   256 000042F3 48894E08            <1>     mov qword [rsi + 8], rcx
   257 000042F7 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   258                              <1> .blockFoundCheckFollowing:
   259                              <1>     ;First check if we are the last block in chain
   260 000042FA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   261 000042FD 7439                <1>     je .blockFoundExit  ;If yes, exit!
   262 000042FF 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   263 00004302 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   264 00004305 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   265 00004309 4881C110000000      <1>     add rcx, mcb.program
   266 00004310 4801CE              <1>     add rsi, rcx    ;Go to next block
   267 00004313 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   268 0000431B 751B                <1>     jne .blockFoundExit ;If not free, exit
   269                              <1>     ;If free, absorb into block pointed to by rdi
   270 0000431D 31C9                <1>     xor ecx, ecx
   271 0000431F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   272 00004322 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   273 00004328 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   274                              <1>     ;Replace block marker
   275 0000432B 8A06                <1>     mov al, byte [rsi + mcb.marker]
   276 0000432D 8807                <1>     mov byte [rdi + mcb.marker], al
   277 0000432F 31C9                <1>     xor ecx, ecx
   278 00004331 48890E              <1>     mov qword [rsi], rcx
   279 00004334 48894E08            <1>     mov qword [rsi + 8], rcx
   280                              <1> .blockFoundExit:
   281 00004338 E811020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   282 0000433D E8FA140000          <1>     call dosCrit1Exit
   283 00004342 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   284 00004349 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   285                              <1>     return
    18                              <2> %%_ret:
    19 0000434D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   286                              <1> .blockError:
   287 0000434E C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   288 00004355 B809000000          <1>     mov eax, errMemAddr
   289 0000435A E812150000          <1>     call extErrExit ;Error thru the unified error handler
   290 0000435F E8EA010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   291 00004364 E8D3140000          <1>     call dosCrit1Exit
   292                              <1>     return
    18                              <2> %%_ret:
    19 00004369 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> reallocMemory:     ;ah = 4Ah
   294                              <1> ;Input: r8 = address of the block to be realloc'ed
   295                              <1> ;       ebx = How many paras this block should contain after realloc. 
   296                              <1> ;               If ebx = 0, jump to free memory
   297 0000436A E8C3140000          <1>     call dosCrit1Enter
   298 0000436F 85DB                <1>     test ebx, ebx
   299 00004371 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   300 00004377 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   301 0000437E 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   302 00004381 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   303 00004384 7409                <1>     je .ctn
   304 00004386 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   305 00004389 0F856F010000        <1>     jne .badAddrGiven
   306                              <1> .ctn:
   307                              <1>     ;Provided block is valid and not a hole
   308                              <1>     ;Check if Growth or Shrink
   309 0000438F 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   310 00004397 74B5                <1>     je freeMemory.blockError
   311 00004399 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   312 0000439C 31C9                <1>     xor ecx, ecx
   313 0000439E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   314 000043A1 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   315 000043A3 0F8791000000        <1>     ja .growth
   316 000043A9 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   317                              <1> ;We can always shrink
   318 000043AF 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   319 000043B1 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   320 000043B7 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   321 000043BA 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   322 000043C0 48C1E304            <1>     shl rbx, 4
   323 000043C4 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   324 000043CB 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   325 000043CE 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   326 000043D0 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   327 000043D3 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   328 000043D5 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   329 000043DD 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   330 000043E0 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   331 000043E2 0F84E6000000        <1>     je .exit
   332                              <1> ;Else, now see if the block following is also free and absorb it
   333 000043E8 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   334 000043EB 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   335 000043EF 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   336 000043F6 4801CE              <1>     add rsi, rcx    ;Goto next arena
   337 000043F9 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   338 000043FC 7409                <1>     je .shrinkAbsorb
   339 000043FE 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   340 00004401 0F8574010000        <1>     jne badMCBChain
   341                              <1> .shrinkAbsorb:
   342 00004407 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   343 0000440F 0F85B9000000        <1>     jne .exit
   344                              <1>     ;It is free, absorb it
   345 00004415 8A06                <1>     mov al, byte [rsi + mcb.marker]
   346 00004417 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   347 00004419 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   348 0000441C 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   349 0000441F 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   350 00004422 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   351 00004425 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   352 00004429 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   353 0000442C 31C9                <1>     xor ecx, ecx
   354                              <1>     ;Clear absorbed MCB
   355 0000442E 48890E              <1>     mov qword [rsi], rcx
   356 00004431 48894E08            <1>     mov qword [rsi + 8], rcx
   357 00004435 E994000000          <1>     jmp .exit
   358                              <1> .growth:
   359                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   360 0000443A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   361 0000443D 0F84A5000000        <1>     je .notEnuffMem
   362                              <1> ;Now check the following space is free. If not, not enuff mem err
   363 00004443 31C9                <1>     xor ecx, ecx
   364 00004445 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   365 00004448 48C1E104            <1>     shl rcx, 4
   366 0000444C 4889F7              <1>     mov rdi, rsi    
   367 0000444F 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   368 00004456 4801CE              <1>     add rsi, rcx
   369 00004459 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   370 0000445C 7409                <1>     je .growthOK
   371 0000445E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   372 00004461 0F8514010000        <1>     jne badMCBChain
   373                              <1> .growthOK:
   374                              <1>     ;rdi points to block we are growing
   375 00004467 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   376 0000446F 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   377                              <1>     ;rsi must own all memory up to the next owned arena
   378 00004471 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   379 00004473 31C9                <1>     xor ecx, ecx
   380 00004475 31D2                <1>     xor edx, edx
   381 00004477 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   382 0000447A 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   383 00004480 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   384 00004483 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   385 00004485 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   386 00004487 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   387 0000448A 775E                <1>     ja .notEnuffMem1
   388 0000448C 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   389 0000448E 81FA01000000        <1>     cmp edx, 1
   390 00004494 744E                <1>     je .notEnuffMem2
   391 00004496 31C9                <1>     xor ecx, ecx
   392 00004498 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   393 0000449B 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   394 0000449F 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   395 000044A2 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   396 000044A5 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   397 000044AC 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   398 000044B0 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   399 000044B3 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   400 000044B7 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   401                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   402                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   403 000044B9 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   404 000044BB 7411                <1>     jz .exit
   405 000044BD 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   406 000044C3 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   407 000044C6 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   408                              <1> .exit:
   409 000044CE E87B000000          <1>     call verifyIntegrityOfMCBChain
   410 000044D3 E864130000          <1>     call dosCrit1Exit
   411 000044D8 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   412 000044DF 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   413                              <1>     return
    18                              <2> %%_ret:
    19 000044E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   414                              <1> .notEnuffMem2:
   415 000044E4 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   416 000044E6 EB02                <1>     jmp short .notEnuffMem1
   417                              <1> .notEnuffMem:
   418 000044E8 31DB                <1>     xor ebx, ebx    ;No space to grow
   419                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   420 000044EA B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   421 000044EF 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   422 000044F6 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   423 000044F9 E97F000000          <1>     jmp mcbErrHdlr
   424                              <1> .badAddrGiven:
   425 000044FE B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   426 00004503 E975000000          <1>     jmp mcbErrHdlr
   427                              <1> getsetMallocStrat: ;ah = 58h
   428 00004508 84C0                <1>     test al, al
   429 0000450A 741F                <1>     jz .get
   430 0000450C 3C02                <1>     cmp al, 2
   431 0000450E 7337                <1>     jae .bad
   432                              <1> ;Set here
   433 00004510 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   434 00004517 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   435 0000451B 8805(35C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   436 00004521 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   437 00004525 E824000000          <1>     call verifyIntegrityOfMCBChain
   438                              <1>     return
    18                              <2> %%_ret:
    19 0000452A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   439                              <1> .get:
   440 0000452B 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   441 00004532 31C0                <1>     xor eax, eax
   442 00004534 8A05(35C30300)      <1>     mov al, byte [allocStrat]
   443 0000453A 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   444 0000453D 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   445 00004541 E808000000          <1>     call verifyIntegrityOfMCBChain
   446                              <1>     return
    18                              <2> %%_ret:
    19 00004546 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   447                              <1> .bad:
   448 00004547 B801000000          <1>     mov eax, errInvFnc
   449 0000454C EB2F                <1>     jmp short mcbErrHdlr
   450                              <1> ;-----------------------------------:
   451                              <1> ;      Memory related routines      :
   452                              <1> ;-----------------------------------:
   453                              <1> verifyIntegrityOfMCBChain:
   454 0000454E 50                  <1>     push rax
   455 0000454F 53                  <1>     push rbx
   456 00004550 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   457                              <1> .ok:
   458 00004557 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   459 0000455A 7408                <1>     je .ok1
   460 0000455C 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   461 0000455F 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   462                              <1> .exit:
   463 00004561 5B                  <1>     pop rbx
   464 00004562 58                  <1>     pop rax
   465                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00004563 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   466                              <1> .ok1:
   467 00004564 31C0                <1>     xor eax, eax
   468 00004566 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   469 00004569 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   470 0000456D 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   471 00004574 4801C3              <1>     add rbx, rax
   472 00004577 EBDE                <1>     jmp short .ok
   473                              <1> .bmcbPrep:
   474 00004579 5B                  <1>     pop rbx ;Pop off the stack first!
   475 0000457A 58                  <1>     pop rax
   476                              <1> badMCBChain:
   477 0000457B B007                <1>     mov al, errMCBbad   ;Yikes!
   478                              <1> mcbErrHdlr:
   479                              <1>     ;Jumped to with eax = error code
   480 0000457D C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   481 00004584 E8E8120000          <1>     call extErrExit ;Error thru the unified error handler
   482 00004589 3C07                <1>     cmp al, errMCBbad
   483                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000458B 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   484 0000458D EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    33                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    34                              <1> ;EXEC and all default terminates are here
    35                              <1> 
    36                              <1> ;========================
    37                              <1> ;   Interrupt handlers
    38                              <1> ;========================
    39                              <1> terminateProcess:   ;Int 40h
    40 0000458F 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    41 00004591 E914110000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    42                              <1> terminateRes:       ;Int 47h
    43                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    44 00004596 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    45 0000459C C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    46 0000459F B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    47 000045A4 E901110000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    48                              <1> ;========================
    49                              <1> ;    Int 21h functions
    50                              <1> ;========================
    51                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    52                              <1> ;Input:
    53                              <1> ;rdx = Pointer to new PSP in memory.
    54                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    55                              <1> ;   Officially document that this MUST be paragraph aligned.
    56                              <1> ;rsi = alloc size for new psp block
    57 000045A9 C605(76C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    58 000045B0 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    59 000045B7 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    60 000045B9 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    61 000045BA EB0C                <1>     jmp short copyPSP.pspCommon
    62                              <1> copyPSP:      ;ah = 26h
    63                              <1> ;Input:
    64                              <1> ;rdx = Pointer to new PSP in memory.
    65                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    66                              <1> ;   Officially document that this MUST be paragraph aligned.
    67 000045BC 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    68 000045C3 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    69 000045C7 53                  <1>     push rbx    ;Save this value for PSP allocsize
    70                              <1> .pspCommon:
    71 000045C8 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    72 000045CF 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    73 000045D3 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    74                              <1> ;r8 is current PSP, now copy psp to rdx
    75                              <1> ;Preserve rdx and r8 until the end
    76 000045D7 4C89C6              <1>     mov rsi, r8
    77 000045DA 4889D7              <1>     mov rdi, rdx
    78 000045DD B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    79 000045E2 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    80 000045E5 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    81 000045ED F605(76C40300)FF    <1>     test byte [pspCopyFlg], -1
    82 000045F4 7449                <1>     jz .copy
    83                              <1>     ;Now reset the parent psp data
    84 000045F6 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    85 000045FE 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    86                              <1>     ;Now reset the copied jobFileTable
    87 00004602 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    88 00004606 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    89 0000460D B0FF                <1>     mov al, -1
    90 0000460F F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    91                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    92 00004611 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    93 00004615 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    94 00004619 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    95                              <1> .xfrJFT:
    96 00004620 67E31C              <1>     jecxz .copy
    97 00004623 FFC9                <1>     dec ecx
    98 00004625 AC                  <1>     lodsb   ;Get the SFTndx in al
    99 00004626 0FB6D8              <1>     movzx ebx, al
   100 00004629 53                  <1>     push rbx
   101 0000462A E8A3F9FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   102 0000462F 58                  <1>     pop rax
   103 00004630 7508                <1>     jnz .badJFT
   104 00004632 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   105 00004633 E8B1F9FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   106 00004638 EBE6                <1>     jmp short .xfrJFT
   107                              <1> .badJFT:
   108 0000463A 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   109 0000463D EBE1                <1>     jmp short .xfrJFT 
   110                              <1> .copy:
   111 0000463F C605(76C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   112 00004646 58                  <1>     pop rax ;Pop the allocsize back into rax
   113 00004647 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   114                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   115 0000464A 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   116 0000464E B042                <1>     mov al, 42h
   117 00004650 E87B0D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   118 00004655 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   119 00004658 48AB                <1>     stosq   ;Move rdi to next entry and store
   120 0000465A B043                <1>     mov al, 43h
   121 0000465C E86F0D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   122 00004661 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   123 00004664 48AB                <1>     stosq   ;Move rdi to next entry and store
   124 00004666 B044                <1>     mov al, 44h
   125 00004668 E8630D0000          <1>     call muxGetIntVector    ;Get vector in rbx
   126 0000466D 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   127 00004670 48AB                <1>     stosq   ;Move rdi to next entry and store
   128                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   129 00004672 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   130 00004677 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   131 0000467D C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
   132                              <1>     return
    18                              <2> %%_ret:
    19 00004681 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   133                              <1> 
   134                              <1> terminateStayRes:  ;ah = 31h
   135                              <1> ;Input: al  = Error code
   136                              <1> ;       edx = Number of paragraphs to keep resident
   137 00004682 C605(60C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   138                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   139 00004689 81FA06000000        <1>     cmp edx, 6
   140 0000468F 7305                <1>     jae .aboveMinimum
   141 00004691 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   142                              <1> .aboveMinimum:
   143                              <1> ;Now we setup a call to Realloc 
   144                              <1> ;Setup regs with: 
   145                              <1> ;   r8 = address of the block to be realloc'ed
   146                              <1> ;   ebx = How many paras this block should contain after realloc.
   147 00004696 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   148 0000469D 89D3                <1>     mov ebx, edx
   149 0000469F 50                  <1>     push rax    ;Preserve errorlevel across call
   150 000046A0 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   151 000046A1 E8C4FCFFFF          <1>     call reallocMemory
   152 000046A6 5B                  <1>     pop rbx
   153 000046A7 58                  <1>     pop rax
   154 000046A8 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   155 000046AA 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   156                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   157 000046AE EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   158                              <1> 
   159                              <1> simpleTerminate:   ;ah = 00h
   160 000046B0 31C0                <1>     xor eax, eax    ;Just fall through as normal
   161                              <1> terminateClean:    ;ah = 4Ch, EXIT
   162                              <1> ;Here we must:
   163                              <1> ;0) Build errorlevel and adjust variables accordingly
   164                              <1> ;1) Call Network Termination hook.
   165                              <1> ;2) Check if the program is it's own parent. If so, return.
   166                              <1> ;3) Swap the console back to the original driver if it is swapped.
   167                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   168                              <1> ;4) Free all file handles associated to the current process.
   169                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   170                              <1> ;5) Free all memory blocks that have the signature of current PSP
   171                              <1> ;6) Set current PSP to parent PSP
   172                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   173                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   174                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   175                              <1> ;10) Exit all critical sections.
   176                              <1> ;
   177                              <1> ; Step 0
   178                              <1> ;For now, just adjust error level in var
   179 000046B2 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   180 000046B4 8625(60C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   181 000046BA F605(EDC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   182 000046C1 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   183 000046C3 C605(60C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   184                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   185 000046CA 8A25(60C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   186                              <1> .storeELvl:
   187 000046D0 668905(91C30300)    <1>     mov word [errorLevel], ax   ;Store word
   188                              <1>     
   189                              <1> ; Step 1 Tell network a process is terminating
   190 000046D7 B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   191 000046DC 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   192 000046E3 CD4F                <1>     int 4Fh
   193                              <1> 
   194                              <1> ; Step 2
   195                              <1> .step1:
   196 000046E5 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   197 000046EC 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   198 000046EF 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   199 000046F3 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   200                              <1>     ;rete            ;If it is, simply return (al has errorLevel)
   201 000046F6 0F84D1000000        <1>     je .exit
   202                              <1> ; Step 3
   203 000046FC E879DEFFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   204                              <1> ; Step 3.5
   205 00004701 803D(60C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   206 00004708 0F8491000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   207                              <1> ; Step 4
   208 0000470E 803D(60C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   209 00004715 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   210 00004717 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   211 0000471C CD4F                <1>     int 4Fh
   212                              <1> .skipAbortNetClose:
   213 0000471E 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   214 00004725 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   215 00004728 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   216                              <1> .s4lp:
   217 0000472F AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   218 00004730 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   219 00004732 7429                <1>     je .step5
   220 00004734 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   221                              <1>     ;Replace with a call to close the handle eventually
   222 00004737 57                  <1>     push rdi
   223 00004738 E82DF8FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   224 0000473D 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   225 0000473F FF35(84C60300)      <1>     push qword [currentSFT]
   226 00004745 E877F6FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   227 0000474A E8F6EEFFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   228                              <1>     ;closeMain also flushes all sectors associated to the file
   229                              <1>     ;Ignore errors, simply keep closing files
   230 0000474F 8F05(84C60300)      <1>     pop qword [currentSFT]
   231                              <1> .badHdl:
   232 00004755 5F                  <1>     pop rdi
   233 00004756 B0FF                <1>     mov al, -1
   234 00004758 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   235 00004759 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   236 0000475B 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   237                              <1> ;Step 5
   238                              <1> .step5:
   239 0000475D 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   240                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   241                              <1>     ; with the currentPSP signature and free them.
   242 00004764 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   243                              <1> .s5lp:  ;And walk the chain
   244                              <1> ;First verify the address in rsi is a valid mcb
   245 0000476B 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   246 0000476D 80F94D              <1>     cmp cl, mcbMarkCtn
   247 00004770 7405                <1>     je .checkToFree
   248 00004772 80F95A              <1>     cmp cl, mcbMarkEnd
   249 00004775 7528                <1>     jne .step6  ;Something wrong so stop freeing
   250                              <1> .checkToFree:
   251 00004777 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   252 0000477B 750F                <1>     jne .noFree
   253 0000477D 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   254 00004781 53                  <1>     push rbx
   255 00004782 51                  <1>     push rcx
   256 00004783 56                  <1>     push rsi
   257 00004784 E8D9FAFFFF          <1>     call freeMemory ;Free this memory block
   258 00004789 5E                  <1>     pop rsi
   259 0000478A 59                  <1>     pop rcx
   260 0000478B 5B                  <1>     pop rbx
   261                              <1>     ;If an error occured, the internal vars will be set.
   262                              <1> .noFree:
   263 0000478C 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   264 0000478F 740E                <1>     je .step6   ;Skip if we are
   265 00004791 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   266 00004794 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   267 00004798 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   268 0000479D EBCC                <1>     jmp short .s5lp
   269                              <1> ;Step 6
   270                              <1> .step6:
   271 0000479F 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   272 000047A3 488905(81C30300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   273                              <1> ;Step 7
   274                              <1>     ;rbx points to current PSP, the old parent task
   275                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   276 000047AA 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   277 000047AE B044                <1>     mov al, 44h
   278 000047B0 E869120000          <1>     call setIntVector
   279 000047B5 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   280 000047B9 B043                <1>     mov al, 43h
   281 000047BB E85E120000          <1>     call setIntVector
   282 000047C0 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   283 000047C4 B042                <1>     mov al, 42h
   284 000047C6 52                  <1>     push rdx
   285 000047C7 E852120000          <1>     call setIntVector
   286 000047CC 5A                  <1>     pop rdx
   287                              <1> ;Step 8
   288                              <1> .exit:
   289 000047CD B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   290 000047CF CD4A                <1>     int 4ah
   291                              <1> 
   292 000047D1 FA                  <1>     cli
   293 000047D2 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP]
   294 000047D9 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   295                              <1>     ;Make the parent register frame the current one
   296                              <1>     ;Make RSP point to user stack from parent entry to exec
   297 000047DD 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   298                              <1> 
   299 000047E1 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   300 000047E6 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   301                              <1> 
   302 000047EF C605(F7C30300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   303 000047F6 C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   304 000047FD C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   305 00004804 E8FB0F0000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   306                              <1>     
   307 00004809 48CF                <1>     iretq   ;and return to address that was in rdx
    34                                  %include "./Source/Kernel/MemExec/exec.asm"
    35                              <1> 
    36                              <1> 
    37                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    38                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    39                              <1> ;       rbx = Ptr to the parameter block used for loading
    40                              <1> ;       al = Subfunction:
    41                              <1> ;            00h = Load Program and transfer control to it
    42                              <1> ;            01h = Load Program but do not transfer ctrl to it
    43                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    44                              <1> ;      Reserved for future expansion:
    45                              <1> ;            04h = Load in background execution mode (PE only)
    46                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    47                              <1> ;               function but in 16-bit mode. 
    48                              <1> ;
    49                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    50                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    51                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    52                              <1> 
    53                              <1> ;If AL = 0 :
    54                              <1> ;            Load Child Program and Xfr control to it
    55                              <1> ; rbx ------>   |-------------------------------|
    56                              <1> ;               |   Ptr to Environment Block    |
    57                              <1> ;               |                               |
    58                              <1> ;               | Can be 0 => Get pointer to    |
    59                              <1> ;               | parent Environment Block      |
    60                              <1> ;               |-------------------------------|
    61                              <1> ;               |   Ptr to Command Line to be   |
    62                              <1> ;               |   placed at PSP + 80h         |
    63                              <1> ;               |-------------------------------|
    64                              <1> ;               |   Ptr to first default FCB    |
    65                              <1> ;               |      to copy to PSP.fcb1      |
    66                              <1> ;               |                               |
    67                              <1> ;               | Should be used to parse the   |
    68                              <1> ;               |  first two command line args  |
    69                              <1> ;               |-------------------------------|
    70                              <1> ;               |   Ptr to second default FCB   |
    71                              <1> ;               |      to copy to PSP.fcb2      |
    72                              <1> ;               |-------------------------------|
    73                              <1> ;
    74                              <1> ;If AL = 1 :
    75                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    76                              <1> ; rbx ------>   |-------------------------------|
    77                              <1> ;               |         AS IN AL=00H          |
    78                              <1> ;               |-------------------------------|
    79                              <1> ;               |     Initial Value of RSP      |
    80                              <1> ;               |       on program launch       |
    81                              <1> ;               |                               |
    82                              <1> ;               |     This is returned to the   |
    83                              <1> ;               |         caller by DOS         |
    84                              <1> ;               |-------------------------------|
    85                              <1> ;               |     Initial Value of RIP      |
    86                              <1> ;               |       on program launch       |
    87                              <1> ;               |                               |
    88                              <1> ;               |     This is returned to the   |
    89                              <1> ;               |         caller by DOS         |
    90                              <1> ;               |-------------------------------|
    91                              <1> ;
    92                              <1> ;                      !!Important Note!!
    93                              <1> ;   The block pointed to by rbx must reserve the space for 
    94                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    95                              <1> ;
    96                              <1> ;If AL = 3 :
    97                              <1> ;                      Load program overlay
    98                              <1> ; rbx ------>   |-------------------------------|
    99                              <1> ;               |  Pointer to the byte in the   |
   100                              <1> ;               |  prog space to start writing  |
   101                              <1> ;               |        the overlay at         |
   102                              <1> ;               |-------------------------------|
   103                              <1> ;               | DWORD offset from the base of |
   104                              <1> ;               |  the program to the location  |
   105                              <1> ;               |  the overlay is being loaded  |
   106                              <1> ;               |              in               |
   107                              <1> ;               |  (Called a Relocation Factor) |
   108                              <1> ;               |     Only FOR EXE Overlays     |
   109                              <1> ;               |        for CODE fixups        |
   110                              <1> ;               |  For COM, Current PSP + 100h  |
   111                              <1> ;               |      assumed to suffice       |
   112                              <1> ;               |-------------------------------|
   113                              <1> ;
   114                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   115                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   116                              <1> ;
   117                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   118 0000480B 55                  <1>     push rbp
   119 0000480C 4889E5              <1>     mov rbp, rsp
   120 0000480F 4881EC70000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   121                              <1>     ;Clear up the pointers on the stack frame
   122 00004816 31C0                <1>     xor eax, eax
   123 00004818 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   124 0000481C 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax
   125 00004820 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   126 00004824 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   127 00004828 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   128                              <1> 
   129                              <1> 
   130 0000482C 3C03                <1>     cmp al, execOverlay
   131 0000482E 7615                <1>     jbe .validSubfunction
   132                              <1> .badSubFunction:
   133 00004830 B801000000          <1>     mov eax, errInvFnc
   134 00004835 C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   135                              <1> .badExit:
   136 0000483C 4889EC              <1>     mov rsp, rbp
   137 0000483F 5D                  <1>     pop rbp
   138 00004840 E92C100000          <1>     jmp extErrExit
   139                              <1> 
   140                              <1> .validSubfunction:
   141 00004845 3C02                <1>     cmp al, execInvld
   142 00004847 74E7                <1>     je .badSubFunction
   143                              <1>     ;Save registers for each function call
   144 00004849 48895DD8            <1>     mov qword [rbp - execFrame.pParam], rbx
   145 0000484D 488955D0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   146 00004851 0FB6C0              <1>     movzx eax, al
   147 00004854 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   148 00004858 4889D7              <1>     mov rdi, rdx
   149 0000485B E8CB0C0000          <1>     call strlen ;Get string length in cx
   150 00004860 66894DE0            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   151                              <1>     ;Now open the file we wanna yeet to
   152 00004864 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   153 00004866 55                  <1>     push rbp    ;Preserve local frame ptr
   154 00004867 E880E3FFFF          <1>     call openFileHdl
   155 0000486C 5D                  <1>     pop rbp
   156 0000486D 72CD                <1>     jc .badExit ;Exit preserving error code in al
   157                              <1>     ;Now ax has the file handle
   158 0000486F 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   159 00004873 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   160 00004876 E8EFF6FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   161 0000487B 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   162 0000487F F7C280000000        <1>     test edx, devCharDev
   163 00004885 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   164 00004887 B002                <1>     mov al, errFnf
   165 00004889 E9E3040000          <1>     jmp .cleanAndFail
   166                              <1> .validDiskFile:
   167 0000488E 31C0                <1>     xor eax, eax
   168 00004890 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   169 00004894 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   170 00004898 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   171 0000489C 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   172 000048A2 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   173 000048A6 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   174 000048A9 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   175 000048AC 7514                <1>     jnz .copyEnvironmentBlock
   176 000048AE 488B35(81C30300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   177 000048B5 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   178 000048B9 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   179 000048BD 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   180 000048C0 746D                <1>     jz .loadProgram
   181                              <1> .copyEnvironmentBlock:
   182 000048C2 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   183                              <1>     ;Get the length of the environment
   184 000048C5 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   185 000048CA 31C0                <1>     xor eax, eax
   186 000048CC 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   187                              <1> .envVerifyLp:
   188 000048CF F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   189 000048D1 7531                <1>     jnz .invalidEnvironmentError
   190 000048D3 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   191 000048D6 FFC9                <1>     dec ecx
   192 000048D8 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   193 000048D9 75F4                <1>     jnz .envVerifyLp
   194                              <1> 
   195 000048DB 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   196 000048DE 57                  <1>     push rdi     ;Save the length of the environment block
   197 000048DF 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   198 000048E5 0FB75DE0            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   199 000048E9 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   200 000048EB 89FB                <1>     mov ebx, edi
   201 000048ED C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   202 000048F0 55                  <1>     push rbp
   203 000048F1 E842F7FFFF          <1>     call allocateMemory
   204 000048F6 5D                  <1>     pop rbp
   205 000048F7 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   206 000048F8 7314                <1>     jnc .copyEnvironment
   207                              <1>     ;Fall thru if not enuff memory
   208                              <1> .insufficientMemory:
   209 000048FA B808000000          <1>     mov eax, errNoMem
   210 000048FF E96D040000          <1>     jmp .cleanAndFail
   211                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   212 00004904 B80A000000          <1>     mov eax, errBadEnv
   213 00004909 E963040000          <1>     jmp .cleanAndFail
   214                              <1> 
   215                              <1> .copyEnvironment:
   216                              <1>     ;rax has the ptr to allocated memory block
   217                              <1>     ;rcx has the number of chars to copy from the source env block
   218 0000490E 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   219 00004911 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   220 00004915 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   221 00004919 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   222 0000491C F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   223 0000491E B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   224 00004923 66AB                <1>     stosw       ;Away you go!
   225 00004925 488B75D0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   226 00004929 0FB74DE0            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   227 0000492D F3A4                <1>     rep movsb   ;Move the bytes to rdi
   228                              <1> ;Done with the environment... more or less
   229                              <1> .loadProgram:
   230 0000492F B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   231 00004934 488D15(EAD80300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   232 0000493B E84D040000          <1>     call .readDataFromHdl
   233 00004940 0F8226040000        <1>     jc .badFmtErr
   234 00004946 85C0                <1>     test eax, eax   ;Were zero bytes read?
   235 00004948 0F841E040000        <1>     jz .badFmtErr
   236 0000494E 3D40000000          <1>     cmp eax, imageDosHdr_size
   237 00004953 0F8272020000        <1>     jb .loadCom
   238                              <1> 
   239 00004959 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   240 0000495E 740B                <1>     je .proceedEXE
   241 00004960 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   242 00004965 0F8560020000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   243                              <1> .proceedEXE:
   244                              <1>     ;Now we need to read e_lfanew
   245 0000496B 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   246 0000496C 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   247 0000496F 8955A8              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   248 00004972 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   249 00004974 30C0                <1>     xor al, al  ;Set file pointer from start of file
   250 00004976 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   251 0000497A E8ACE4FFFF          <1>     call lseekHdl   ;Move to that position in the file
   252                              <1> 
   253 0000497F 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   254 00004980 B914000000          <1>     mov ecx, imageFileHeader_size
   255 00004985 E803040000          <1>     call .readDataFromHdl       ;Now read the COFF header
   256 0000498A 85C0                <1>     test eax, eax   ;Were zero bytes read?
   257 0000498C 0F84DA030000        <1>     jz .badFmtErr
   258 00004992 3D14000000          <1>     cmp eax, imageFileHeader_size
   259 00004997 0F82CF030000        <1>     jb .badFmtErr
   260                              <1>     ;So now rdx points to the imageFileHeader
   261 0000499D 66813A6486          <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   262 000049A2 0F85C4030000        <1>     jne .badFmtErr
   263 000049A8 66817A107000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   264 000049AE 0F82B8030000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   265                              <1>     ;Now save the number of sections in the the file
   266 000049B4 0FB74202            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   267 000049B8 85C0                <1>     test eax, eax   ;If this is 0, what?
   268 000049BA 0F84AC030000        <1>     jz .badFmtErr
   269 000049C0 668945A0            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   270                              <1> 
   271                              <1>     ;Now load Optional header, file ptr points to it so all good!
   272 000049C4 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   273                              <1>     ;rdx points to exeHdrSpace
   274 000049C9 E8BF030000          <1>     call .readDataFromHdl
   275 000049CE 85C0                <1>     test eax, eax   ;Were zero bytes read?
   276 000049D0 0F8496030000        <1>     jz .badFmtErr
   277 000049D6 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   278 000049DB 0F828B030000        <1>     jb .badFmtErr
   279                              <1>     ;Now File Ptr points to data dirs, not an issue
   280 000049E1 81459870000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   281                              <1>     ;We load the program in, one section at a time, reading section headers in
   282                              <1>     ; one at a time to the section header internal buffer.
   283 000049E8 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   284 000049EC 744B                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   285 000049EE 8B1D(22D90300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   286 000049F4 488B05(32D90300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   287 000049FB 4885C0              <1>     test rax, rax
   288 000049FE 750A                <1>     jnz .notDefaultStackAlloc
   289 00004A00 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   289 00004A09 00                  <1>
   290                              <1> .notDefaultStackAlloc:
   291 00004A0A 01C3                <1>     add ebx, eax    ;Add stack allocation
   292 00004A0C 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   293 00004A12 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   294 00004A15 81C30B000000        <1>     add ebx, 11
   295 00004A1B C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   296 00004A1E E815F6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   297 00004A23 0F82D1FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   298 00004A29 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   299 00004A2D 480500010000        <1>     add rax, psp_size
   300 00004A33 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   301 00004A37 EB0B                <1>     jmp short .exeProceed1
   302                              <1> .exeOvlySkipAlloc:
   303 00004A39 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   304 00004A3D 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   305 00004A40 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   306                              <1> .exeProceed1:
   307                              <1>     ;So now copy one section at a time, read section header in
   308                              <1>     ;File pointer points to the directory table, so skip that
   309 00004A44 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   310 00004A4A 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   311 00004A50 0F8216030000        <1>     jb .badFmtErr
   312 00004A56 FFCA                <1>     dec edx ;Decrement by 1 to make into a 0 based offset
   313                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   314 00004A58 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   315 00004A5B 31C9                <1>     xor ecx, ecx
   316 00004A5D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   317 00004A61 B001                <1>     mov al, 1   ;Move handle forwards from current position
   318 00004A63 E8C3E3FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   319                              <1>     ;eax has pointer location after adjustment
   320 00004A68 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   321                              <1>     ;File now points to start of Section headers. Read first header in.
   322                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   323 00004A6B 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   324 00004A6F 0FB74DA0            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   325                              <1> .loadLp:
   326 00004A73 51                  <1>     push rcx    ;Save # of segments left on stack
   327 00004A74 57                  <1>     push rdi    ;Save the current buffer ptr here
   328 00004A75 B928000000          <1>     mov ecx, imageSectionHdr_size
   329 00004A7A 488D15(5AD90300)    <1>     lea rdx, sectHdr    ;Read section headers here
   330 00004A81 E807030000          <1>     call .readDataFromHdl
   331 00004A86 5F                  <1>     pop rdi
   332 00004A87 59                  <1>     pop rcx
   333 00004A88 85C0                <1>     test eax, eax
   334 00004A8A 0F84DC020000        <1>     jz .badFmtErr
   335 00004A90 3D28000000          <1>     cmp eax, imageSectionHdr_size
   336 00004A95 0F85D1020000        <1>     jne .badFmtErr
   337                              <1>     ;File ptr moved forwards to next section header
   338 00004A9B 81459828000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   339                              <1>     ;Section header read, now we load section into memory
   340                              <1>     ;Move file ptr to data location
   341 00004AA2 8B15(6ED90300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   342 00004AA8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   343 00004AAC 31C0                <1>     xor eax, eax    ;Seek from start of file
   344 00004AAE 51                  <1>     push rcx
   345 00004AAF 57                  <1>     push rdi
   346 00004AB0 E876E3FFFF          <1>     call lseekHdl
   347 00004AB5 5F                  <1>     pop rdi
   348 00004AB6 59                  <1>     pop rcx
   349                              <1> 
   350 00004AB7 51                  <1>     push rcx
   351 00004AB8 57                  <1>     push rdi    ;Save current buffer offset
   352 00004AB9 8B0D(6AD90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   353 00004ABF 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   354 00004AC2 E8C6020000          <1>     call .readDataFromHdl
   355 00004AC7 5F                  <1>     pop rdi
   356 00004AC8 59                  <1>     pop rcx
   357 00004AC9 0F829D020000        <1>     jc .badFmtErr
   358 00004ACF 85C0                <1>     test eax, eax
   359 00004AD1 0F8495020000        <1>     jz .badFmtErr
   360 00004AD7 3B05(6AD90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   361 00004ADD 0F8589020000        <1>     jne .badFmtErr
   362                              <1>     ;Data read ok, now fill in any zeros needed
   363 00004AE3 8B05(6AD90300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   364 00004AE9 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   365 00004AEC 3B05(62D90300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   366 00004AF2 730E                <1>     jae .skipPadding
   367 00004AF4 51                  <1>     push rcx
   368 00004AF5 8B0D(62D90300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   369 00004AFB 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   370                              <1>     ;rdi points to pad space
   371 00004AFD 31C0                <1>     xor eax, eax
   372 00004AFF F3AA                <1>     rep stosb   ;Pad that many zeros
   373 00004B01 59                  <1>     pop rcx
   374                              <1> .skipPadding:
   375 00004B02 FFC9                <1>     dec ecx ;Decrement our section counter
   376 00004B04 7419                <1>     jz .doExeFixups
   377                              <1>     ;Read next section header in here
   378 00004B06 51                  <1>     push rcx
   379 00004B07 57                  <1>     push rdi
   380 00004B08 30C0                <1>     xor al, al  ;Move rel start of file
   381 00004B0A 8B5598              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   382 00004B0D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   383 00004B11 31C9                <1>     xor ecx, ecx
   384 00004B13 E813E3FFFF          <1>     call lseekHdl
   385 00004B18 5F                  <1>     pop rdi
   386 00004B19 59                  <1>     pop rcx
   387 00004B1A E954FFFFFF          <1>     jmp .loadLp
   388                              <1> .doExeFixups:
   389                              <1> ;Here we fixup addresses as needed
   390                              <1> ;Program Entrypoint is saved in the header structure in the SDA
   391                              <1> ;Move File pointer to COFF header Coff + optional header sizes
   392                              <1> ;We look only for .reloc segment. We have it in memory too so use it to make 
   393                              <1> ; fixups. Zero the in memory image of reloc segment once we are done with it. 
   394                              <1> ;We checked that .reloc exists so all ok
   395 00004B1F 8B15(56D90300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   396 00004B25 8B55A8              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   397 00004B28 81C2AC000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   398                              <1>     ;eax now points to position in file of direcotry entry for reloc
   399 00004B2E 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   400 00004B32 31C0                <1>     xor eax, eax
   401 00004B34 E8F2E2FFFF          <1>     call lseekHdl   ;Move handle there in file
   402 00004B39 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   403 00004B3C B908000000          <1>     mov ecx, imageDataDirectory_size
   404                              <1>     ;Read 8 bytes into sectHdr space
   405 00004B41 488D15(5AD90300)    <1>     lea rdx, sectHdr
   406 00004B48 E840020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   407                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   408 00004B4D 8B35(5AD90300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   409 00004B53 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   410 00004B55 0F840F010000        <1>     jz .buildChildPSP   ;... including if overlay
   411 00004B5B 480375B8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   412                              <1>     ;Now rsi points to where in memory the relocation data table is
   413                              <1>     ;Now compute the relocation factor 
   414 00004B5F 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   415 00004B63 482B05(02D90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   416                              <1>     ;The value in rax gives how much to subtract by
   417 00004B6A 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   418 00004B6E 7507                <1>     jne .notOverlayReloc
   419 00004B70 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   420 00004B74 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   421                              <1> .notOverlayReloc:
   422 00004B77 48894598            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   423 00004B7B 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   424                              <1>     ;rsi points to relocation data table in memory
   425 00004B7E 8B0D(5ED90300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   426 00004B84 81F900000000        <1>     cmp ecx, 0    ;If no relocations, skip
   427 00004B8A 0F84DA000000        <1>     jz .buildChildPSP
   428 00004B90 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   429                              <1>     ;rsi points to the first base relocation block. The relocations begin
   430                              <1>     ; after the first block
   431                              <1>     ;ecx has the number of base relocation blocks to process.
   432                              <1> .nextBlock:
   433 00004B94 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   434 00004B95 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   435 00004B97 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   436 00004B9A 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   437 00004B9D D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   438 00004B9F 67E311              <1>     jecxz .blockDone
   439                              <1> .blockNotDone:
   440 00004BA2 66AD                <1>     lodsw   ;Get the next page offset word
   441 00004BA4 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   442 00004BA9 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   443                              <1>     ;rdi points to qword to rebase
   444 00004BAC 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   445 00004BAF FFC9                <1>     dec ecx
   446 00004BB1 75EF                <1>     jnz .blockNotDone
   447                              <1> .blockDone:
   448 00004BB3 59                  <1>     pop rcx
   449 00004BB4 FFC9                <1>     dec ecx
   450 00004BB6 75DC                <1>     jnz .nextBlock
   451 00004BB8 8B05(FAD80300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   452 00004BBE 480345B8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   453 00004BC2 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   454 00004BC6 E99F000000          <1>     jmp .buildChildPSP
   455                              <1> .loadCom:
   456                              <1>     ;File is open here, so just read the file into memory. 
   457                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   458                              <1>     ;Allocate 64Kb of memory, or as much as we can
   459 00004BCB 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   460 00004BCF 744E                <1>     je .comOverlay
   461 00004BD1 BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   462 00004BD6 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   463 00004BD9 55                  <1>     push rbp
   464 00004BDA E859F4FFFF          <1>     call allocateMemory
   465 00004BDF 5D                  <1>     pop rbp
   466 00004BE0 734A                <1>     jnc .comallocOk
   467 00004BE2 3C08                <1>     cmp al, errNoMem
   468 00004BE4 0F8587010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   469                              <1>     ;rbx should have the amount available
   470                              <1>     ;We check if this value is psp_size more than filesize
   471 00004BEA 53                  <1>     push rbx    ;Save new minimum size
   472 00004BEB B802000000          <1>     mov eax, 2    ;Reposition to end of file
   473 00004BF0 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   474 00004BF4 31D2                <1>     xor edx, edx    ;Go to end of file
   475 00004BF6 E830E2FFFF          <1>     call lseekHdl
   476                              <1>     ;eax has file size
   477 00004BFB 5B                  <1>     pop rbx ;Get back max alloc size
   478 00004BFC 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   479 00004BFE 29C2                <1>     sub edx, eax
   480 00004C00 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   481 00004C06 0F82EEFCFFFF        <1>     jb .insufficientMemory   ;Fail
   482 00004C0C 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   483 00004C0F E824F4FFFF          <1>     call allocateMemory
   484 00004C14 0F8257010000        <1>     jc .cleanAndFail
   485 00004C1A E90D000000          <1>     jmp .comallocOk
   486                              <1> .comOverlay:
   487                              <1>     ;Here we simply read the file into the buffer provided
   488 00004C1F 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   489 00004C23 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   490 00004C26 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   491 00004C2A EB0A                <1>     jmp short .comRead
   492                              <1> .comallocOk:
   493                              <1>     ;rax should point to the first byte
   494 00004C2C 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   495 00004C30 480500010000        <1>     add rax, psp_size
   496                              <1> .comRead:
   497 00004C36 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   498                              <1> 
   499 00004C3A B802000000          <1>     mov eax, 2    ;Reposition to end of file
   500 00004C3F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   501 00004C43 31D2                <1>     xor edx, edx    ;Go to end of file
   502 00004C45 E8E1E1FFFF          <1>     call lseekHdl
   503                              <1>     ;eax has filesize now
   504 00004C4A 50                  <1>     push rax    ;Save filesize
   505 00004C4B 31C0                <1>     xor eax, eax    ;Reposition to start of file
   506 00004C4D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   507 00004C51 31D2                <1>     xor edx, edx    ;Go to start of file
   508 00004C53 E8D3E1FFFF          <1>     call lseekHdl
   509 00004C58 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   510 00004C59 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   511 00004C5D E82B010000          <1>     call .readDataFromHdl   ;Read from the file handle
   512 00004C62 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   513 00004C66 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   514                              <1> .buildChildPSP:
   515                              <1>     ;We can close handle now
   516 00004C6A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   517 00004C6E 55                  <1>     push rbp
   518 00004C6F E89CE0FFFF          <1>     call closeFileHdl   ;Close the file
   519 00004C74 5D                  <1>     pop rbp
   520                              <1> 
   521                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   522 00004C75 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   523 00004C79 0F84CB000000        <1>     je .overlayExit
   524                              <1>     ;Now build the PSP
   525 00004C7F 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   526 00004C82 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   527 00004C86 52                  <1>     push rdx
   528 00004C87 55                  <1>     push rbp
   529 00004C88 E81CF9FFFF          <1>     call createPSP
   530 00004C8D 5D                  <1>     pop rbp
   531 00004C8E 5A                  <1>     pop rdx
   532                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   533 00004C8F 488915(81C30300)    <1>     mov qword [currentPSP], rdx
   534 00004C96 E8970B0000          <1>     call dosCrit1Enter
   535 00004C9B E812010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   536                              <1> 
   537 00004CA0 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   538 00004CA7 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;and set it!
   539                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   540                              <1>     ; and set FS to point to the PSP
   541 00004CAE 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   542                              <1> 
   543 00004CB2 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   544 00004CB6 B925000000          <1>     mov ecx, fcb_size
   545 00004CBB 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   546 00004CBF 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   547 00004CC1 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   548 00004CC3 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   549 00004CC7 B925000000          <1>     mov ecx, fcb_size
   550 00004CCC 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   551 00004CD0 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   552 00004CD2 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   553 00004CD4 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   554 00004CD8 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   555 00004CDF B980000000          <1>     mov ecx, 80h
   556 00004CE4 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   557                              <1> 
   558 00004CE6 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   559 00004CE8 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   560                              <1> 
   561                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   562 00004CEB B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   563 00004CF0 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   564 00004CF2 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   565 00004CF6 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   566                              <1> 
   567 00004CF8 E8E1060000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   568 00004CFD 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   569 00004D01 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   570 00004D05 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   571 00004D08 B042                <1>     mov al, 42h
   572 00004D0A E80F0D0000          <1>     call setIntVector   ;bx preserved by this call
   573                              <1> 
   574                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   575 00004D0F 88D8                <1>     mov al, bl
   576 00004D11 30DB                <1>     xor bl, bl
   577 00004D13 E8EA060000          <1>     call setDrive
   578 00004D18 7302                <1>     jnc .drive1Ok
   579 00004D1A B3FF                <1>     mov bl, -1
   580                              <1> .drive1Ok:
   581 00004D1C 88F8                <1>     mov al, bh
   582 00004D1E 30FF                <1>     xor bh, bh
   583 00004D20 E8DD060000          <1>     call setDrive
   584 00004D25 7302                <1>     jnc .drive2Ok
   585 00004D27 B7FF                <1>     mov bh, -1
   586                              <1> .drive2Ok:
   587                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   588                              <1>     ;rdi has pointer to psp
   589 00004D29 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   590                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   591 00004D2C 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   592 00004D31 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   593 00004D35 741C                <1>     je .xfrProgram
   594 00004D37 488B45A8            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   595 00004D3B 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   596 00004D3F 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   597 00004D43 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   598 00004D47 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   599                              <1> .overlayExit:
   600 00004D4A 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   601 00004D4D 5D                  <1>     pop rbp ;Point rsp to the return address
   602 00004D4E E9100B0000          <1>     jmp extGoodExit ;And return!
   603                              <1> .xfrProgram:
   604 00004D53 FA                  <1>     cli
   605 00004D54 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   606 00004D57 C605(6AC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   607 00004D5E FB                  <1>     sti
   608 00004D5F FF75A8              <1>     push qword [rbp - execFrame.pProgEP]
   609 00004D62 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   610 00004D65 4989F9              <1>     mov r9, rdi
   611 00004D68 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   612                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 00004D6B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   613                              <1> 
   614                              <1> .badFmtErr:
   615 00004D6C B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   616                              <1> .cleanAndFail:
   617                              <1> ;Close the open file and any open resources and fail
   618 00004D71 E82D000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   619 00004D76 E8C10A0000          <1>     call dosCrit1Exit
   620 00004D7B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   621 00004D7F 50                  <1>     push rax    ;Save error code
   622 00004D80 55                  <1>     push rbp
   623 00004D81 E88ADFFFFF          <1>     call closeFileHdl
   624 00004D86 5D                  <1>     pop rbp
   625 00004D87 58                  <1>     pop rax
   626 00004D88 E9AFFAFFFF          <1>     jmp .badExit
   627                              <1> 
   628                              <1> .readDataFromHdl:
   629                              <1> ;Input: bx = File Handle
   630                              <1> ;       ecx = Number of bytes to transfer
   631                              <1> ;       rdx = Ptr to the buffer to use
   632 00004D8D E811000000          <1>     call .clearArenaOwner   ;Entering critical section!
   633 00004D92 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   634 00004D96 55                  <1>     push rbp
   635 00004D97 E8B3DFFFFF          <1>     call readFileHdl
   636 00004D9C 5D                  <1>     pop rbp
   637 00004D9D E810000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   638                              <1>     return
    18                              <2> %%_ret:
    19 00004DA2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   639                              <1> .clearArenaOwner:
   640 00004DA3 53                  <1>     push rbx
   641 00004DA4 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   642 00004DA6 E8870A0000          <1>     call dosCrit1Enter
   643 00004DAB E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   644 00004DB0 5B                  <1>     pop rbx
   645                              <1>     return
    18                              <2> %%_ret:
    19 00004DB1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   646                              <1> .setPSPArenaOwner:
   647                              <1> ;Sets the current PSP as the arena owner
   648 00004DB2 53                  <1>     push rbx
   649 00004DB3 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP]
   650 00004DBA E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   651 00004DBF E8780A0000          <1>     call dosCrit1Exit
   652 00004DC4 5B                  <1>     pop rbx
   653                              <1>     return
    18                              <2> %%_ret:
    19 00004DC5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   654                              <1> .setProgOrEnvArenaOwnerToRBX:
   655                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   656 00004DC6 9C                  <1>     pushfq
   657 00004DC7 50                  <1>     push rax
   658                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   659                              <1>     ;This is because they are set up at separate points in the routine!
   660 00004DC8 488B45C0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   661 00004DCC E80C000000          <1>     call .writeArenaHeaderOwner
   662 00004DD1 488B45C8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   663 00004DD5 E803000000          <1>     call .writeArenaHeaderOwner
   664 00004DDA 58                  <1>     pop rax
   665 00004DDB 9D                  <1>     popfq
   666                              <1>     return
    18                              <2> %%_ret:
    19 00004DDC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   667                              <1> .writeArenaHeaderOwner:
   668                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   669                              <1> ;       rbx = Owner ID
   670 00004DDD 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   671                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004DE0 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   672 00004DE2 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   673 00004DE8 48895801            <1>     mov qword [rax + 1], rbx
   674                              <1>     return
    18                              <2> %%_ret:
    19 00004DEC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    35                                  %include "./Source/Kernel/Local/Local.asm"
    36                              <1> ;Localisation based functions live here
    37                              <1> 
    38                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    39                              <1> ;al = 0 => Get the switch char
    40                              <1> ;al = 1 => Set the switch char to whats in DL
    41                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    42                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    43                              <1> ;       Always returns -1 => /DEV/ optional
    44                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    45                              <1> ;       Input value is ignored
    46 00004DED 3C01                <1>     cmp al, 01
    47 00004DEF 740B                <1>     je .setSC
    48 00004DF1 7210                <1>     jb .getSC
    49 00004DF3 3C03                <1>     cmp al, 03
    50 00004DF5 7214                <1>     jb .getDev
    51 00004DF7 741C                <1>     je .setDev
    52 00004DF9 B0FF                <1>     mov al, -1
    53                              <1>     return
    18                              <2> %%_ret:
    19 00004DFB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> .setSC:
    55 00004DFC 8815(33C30300)      <1>     mov byte [switchChar], dl
    56                              <1>     return
    18                              <2> %%_ret:
    19 00004E02 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> .getSC:
    58 00004E03 8A15(33C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    59 00004E09 EB02                <1>     jmp short .getRet
    60                              <1> .getDev:
    61 00004E0B B2FF                <1>     mov dl, -1
    62                              <1> .getRet:
    63 00004E0D E8CC050000          <1>     call getUserRegs
    64 00004E12 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    65                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    66                              <1>     return
    18                              <2> %%_ret:
    19 00004E15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> 
    69                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    70                              <1> ;Currently only accept subfunction al = 0, current country
    71                              <1> ;AL > 0 => errInvFnc, Subfunction error
    72                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    73 00004E16 84C0                <1>     test al, al
    74 00004E18 740A                <1>     jz .currentCountry
    75                              <1> .invalidFunction:
    76 00004E1A B801000000          <1>     mov eax, errInvFnc
    77 00004E1F E94D0A0000          <1>     jmp extErrExit
    78                              <1> .currentCountry:
    79 00004E24 4881FAFFFFFFFF      <1>     cmp rdx, -1
    80 00004E2B 74ED                <1>     je .invalidFunction
    81 00004E2D 488D35E6B1FFFF      <1>     lea rsi, ctryTbl
    82 00004E34 4889D7              <1>     mov rdi, rdx
    83 00004E37 B926000000          <1>     mov ecx, countryStruc_size
    84 00004E3C F3A4                <1>     rep movsb
    85 00004E3E 31C0                <1>     xor eax, eax
    86 00004E40 E91E0A0000          <1>     jmp extGoodExit
    87                              <1> 
    88                              <1> 
    89                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    90                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    91 00004E45 C3                  <1>     ret
    36                                  %include "./Source/Kernel/ctrlc.asm"
    37                              <1> diskDevErr:
    38                              <1> ;Called, NOT Jumped to. 
    39                              <1> ;Input: rdi = Disk Buffer pointer
    40                              <1> ;       eax = Status word (Zero Extended)
    41                              <1> ;       rbp = Disk DPB pointer
    42                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    43                              <1> ;Output: al = Int 44h response (0-3)
    44                              <1> ; All other registers preserved
    45 00004E46 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    46 00004E4D 89C7                <1>     mov edi, eax    ;Store status word in rdi
    47 00004E4F 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    48 00004E52 8A25(C9C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    49 00004E58 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    50                              <1>     ;Test for correct buffer data type
    51 00004E5B 53                  <1>     push rbx    ;Save rbx temporarily
    52 00004E5C 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    53 00004E5F F6C301              <1>     test bl, dosBuffer
    54 00004E62 7505                <1>     jnz .df0
    55 00004E64 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    56 00004E67 EB17                <1>     jmp short .df3
    57                              <1> .df0:
    58 00004E69 F6C302              <1>     test bl, fatBuffer
    59 00004E6C 7505                <1>     jnz .df1
    60 00004E6E 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    61 00004E71 EB0D                <1>     jmp short .df3
    62                              <1> .df1:
    63 00004E73 F6C304              <1>     test bl, dirBuffer
    64 00004E76 7505                <1>     jnz .df2
    65 00004E78 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    66 00004E7B EB03                <1>     jmp short .df3
    67                              <1> .df2:
    68 00004E7D 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    69                              <1> .df3:
    70 00004E80 5B                  <1>     pop rbx
    71 00004E81 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    72 00004E85 E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    73 00004E8A 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    74 00004E91 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    75                              <1>     return
    18                              <2> %%_ret:
    19 00004E98 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> charDevErr:
    78                              <1> ;Called with ah with additional bits
    79 00004E99 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    80                              <1> criticalErrorSetup:
    81 00004E9C 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    82 00004EA2 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    83 00004EA9 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    84                              <1>     ;For now, fall through, but need much work to change it later! 
    85                              <1> 
    86                              <1> 
    87                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    88                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    89                              <1> ; to the critical error handler.
    90                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    91                              <1> ; and with Int44Bitfield set
    92                              <1> ;               AH = Critical Error Bitfield
    93                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    94                              <1> ;               Bit 6 - Reserved
    95                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    96                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    97                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    98                              <1> ;               Bits [2-1] = Affected Disk Error
    99                              <1> ;                     0 0   DOS area
   100                              <1> ;                     0 1   FAT area
   101                              <1> ;                     1 0   Directory area
   102                              <1> ;                     1 1   Data area
   103                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   104                              <1> ;               AL  = Failing drive number if AH[7] = 0
   105                              <1> ;               DIL = Error code for errorMsg
   106                              <1> ;               RSI = EA of Device Header for which device the error occured
   107                              <1> ;Return:
   108                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   109                              <1> ;                  = 1 - Retry the Operation    (Retry)
   110                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   111                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   112                              <1> ; Return response from int 44h in al
   113                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   114                              <1> ; This function will terminate the program if an abort was requested!
   115                              <1> ; This function also destroys RBP
   116 00004EAF 803D(69C30300)01    <1>     cmp byte [critErrFlag], 1
   117 00004EB6 7204                <1>     jb .noIntError  ;If not 0, enter
   118 00004EB8 B003                <1>     mov al, critFail    ;Else, return Fail always
   119 00004EBA EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   120                              <1> .noIntError:
   121 00004EBC FA                  <1>     cli ;Disable Interrupts
   122 00004EBD FE05(69C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   123 00004EC3 FE0D(6AC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   124 00004EC9 488925(C1C30300)    <1>     mov qword [xInt44hRSP], rsp
   125 00004ED0 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   126 00004ED7 31ED                <1>     xor ebp, ebp    ;Always zeroed
   127 00004ED9 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   128 00004EDB 488B25(C1C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   129 00004EE2 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   130 00004EE9 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   131 00004EEF FB                  <1>     sti ;Reenable Interrupts
   132                              <1>     ;Now we check that the response given was allowed, and translate if needed
   133                              <1> .checkResponse:
   134 00004EF0 3C00                <1>     cmp al, critIgnore
   135 00004EF2 7421                <1>     je .checkIgnore
   136 00004EF4 3C01                <1>     cmp al, critRetry
   137 00004EF6 7428                <1>     je .checkRetry
   138 00004EF8 3C03                <1>     cmp al, critFail
   139 00004EFA 752F                <1>     jne .abort   ;Must be abort
   140                              <1> .setFail:   ;Here is for fail
   141 00004EFC B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   142 00004EFE FE05(CBC30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   143 00004F04 F605(C9C30300)08    <1>     test byte [Int44bitfld], critFailOK
   144 00004F0B 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   145                              <1> .exit:
   146 00004F0D C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   147                              <1>     return
    18                              <2> %%_ret:
    19 00004F14 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   148                              <1> .checkIgnore:
   149 00004F15 F605(C9C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   150 00004F1C 75EF                <1>     jnz .exit
   151 00004F1E EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   152                              <1> .checkRetry:
   153 00004F20 F605(C9C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   154 00004F27 75E4                <1>     jnz .exit   
   155 00004F29 EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   156                              <1> .abort:
   157                              <1> ;Prepare to abort. We abort from within!
   158                              <1> ;If a network request requests abort, translate to fail
   159 00004F2B 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1
   160 00004F32 7509                <1>     jne .kill   ;If this is zero, local invokation
   161 00004F34 C605(F7C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   162 00004F3B EBD0                <1>     jmp short .exit
   163                              <1> .kill:
   164 00004F3D 66893D(6DC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   165 00004F44 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   166 00004F46 C605(60C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   167 00004F4D E978F7FFFF          <1>     jmp terminateClean.altEP
   168                              <1> 
   169                              <1> ctrlBreakHdlr:
   170 00004F52 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   171 00004F54 E84FD5FFFF          <1>     call printCaretASCII
   172 00004F59 E87AD5FFFF          <1>     call printCRLF
   173                              <1>     ;Reset the console back to 0
   174 00004F5E C605(F5C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   175                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   176 00004F65 FA                  <1> 	cli
   177 00004F66 488B25(DCC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   178 00004F6D E892080000          <1> 	call dosPopRegs ;Get user state back
   179 00004F72 488925(89C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   180 00004F79 F8                  <1>     clc
   181 00004F7A CD43                <1>     int 43h ;Call critical error handler
   182 00004F7C FA                  <1>     cli ;Clear interrupts again
   183 00004F7D 488905(95C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   184 00004F84 9C                  <1>     pushfq  ;Get flags in rax
   185 00004F85 58                  <1>     pop rax 
   186 00004F86 483B25(89C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   187 00004F8D 750C                <1>     jne .checkCF
   188                              <1> .returnToDOS:
   189 00004F8F 488B05(95C30300)    <1>     mov rax, qword [oldRAX]
   190 00004F96 E90F070000          <1>     jmp functionDispatch    ;Goto int 41h
   191                              <1> .checkCF:
   192 00004F9B 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   193 00004FA2 A801                <1>     test al, 1  ;CF set?
   194 00004FA4 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   195 00004FA6 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   196 00004FAB C605(EDC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   197 00004FB2 E9F3060000          <1>     jmp functionDispatch
   198                              <1> 
    37                                  %include "./Source/Kernel/dosPrim.asm"
    38                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    39                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    40                              <1> 
    41                              <1> dosDefCritErrHdlr:
    42                              <1> ;The DOS default critical error handler always returns FAIL
    43 00004FB7 B003                <1>     mov al, critFail
    44 00004FB9 48CF                <1>     iretq
    45                              <1> goDriverChar:
    46                              <1> ;Shortcut for Char requests, make a driver request
    47                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    48 00004FBB 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    49                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    50                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    51                              <1> ;       rbx = Ptr to the request header for the driver call!
    52 00004FBF E882080000          <1>     call dosCrit2Enter
    53 00004FC4 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    54 00004FC7 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    55 00004FCA E881080000          <1>     call dosCrit2Exit
    56                              <1>     return
    18                              <2> %%_ret:
    19 00004FCF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    57                              <1> 
    58                              <1> setupPhysicalDiskRequest:
    59                              <1> ;Ensure that al has valid disk number
    60                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    61                              <1> ;If CF=NC, rbp = DPB ptr.
    62                              <1> ;If CF=CY, exit error
    63 00004FD0 84C0                <1>     test al, al
    64 00004FD2 723F                <1>     jc .diskError
    65 00004FD4 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    66 00004FDA 7337                <1>     jae .diskError
    67 00004FDC 50                  <1>     push rax
    68 00004FDD FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    69 00004FDF E887040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    70 00004FE4 58                  <1>     pop rax
    71 00004FE5 7235                <1>     jc .error
    72 00004FE7 8805(63C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    73 00004FED 488B2D(6CC60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    74 00004FF4 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    75 00004FFC 750A                <1>     jnz .netError
    76 00004FFE 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    77 00005002 E862030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    78                              <1>     return
    18                              <2> %%_ret:
    19 00005007 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    79                              <1> .netError:
    80 00005008 66C705(6DC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    80 00005010 00                  <1>
    81 00005011 EB09                <1>     jmp short .error
    82                              <1> .diskError:
    83 00005013 66C705(6DC30300)0F- <1>     mov word [errorExCde], errBadDrv
    83 0000501B 00                  <1>
    84                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    85 0000501C C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    86 00005023 C605(6FC30300)07    <1>     mov byte [errorAction], eActRetUsr
    87 0000502A C605(70C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    88 00005031 F9                  <1>     stc
    89                              <1>     return
    18                              <2> %%_ret:
    19 00005032 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    90                              <1> 
    91                              <1> setupAbsDiskEntry:
    92                              <1> ;Prepares to sets up the CDS and DPB for the request
    93 00005033 FE05(6AC30300)      <1>     inc byte [inDOS]
    94 00005039 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    95 0000503A FC                  <1>     cld ;Set string ops in the right direction
    96 0000503B E890FFFFFF          <1>     call setupPhysicalDiskRequest
    97 00005040 7223                <1>     jc .exit    ;Error exit
    98 00005042 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    99 00005049 56                  <1>     push rsi
   100 0000504A 50                  <1>     push rax
   101 0000504B 488D35(7FC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   102 00005052 8806                <1>     mov byte [rsi], al  ;Construct a path
   103 00005054 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   104 00005057 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   105 0000505B F8                  <1>     clc
   106                              <1> ;++++++++++++++++++++++++++++
   107                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   108                              <1> ;Entered with path in rsi (ah=03h)
   109 0000505C B800030000          <1>     mov eax, 0300h  
   110 00005061 CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   111                              <1> ;++++++++++++++++++++++++++++
   112 00005063 58                  <1>     pop rax
   113 00005064 5E                  <1>     pop rsi
   114                              <1> .exit:
   115 00005065 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   116                              <1>     return
    18                              <2> %%_ret:
    19 00005067 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> 
   118                              <1> absDiskWrite:       ;Int 46h
   119                              <1> ;al = Drive number
   120                              <1> ;rbx = Memory Buffer address to read from
   121                              <1> ;ecx = Number of sectors to write
   122                              <1> ;rdx = Start LBA to write to
   123 00005068 FA                  <1>     cli
   124 00005069 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   125 00005070 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   126 00005077 55                  <1>     push rbp
   127 00005078 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   128 00005079 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   129 0000507E 7252                <1>     jc absDiskExit
   130 00005080 E8CF010000          <1>     call primReqWriteSetup
   131 00005085 EB1D                <1>     jmp short absDiskReadWriteCommon
   132                              <1> absDiskRead:        ;Int 45h
   133                              <1> ;al = Drive number
   134                              <1> ;rbx = Memory Buffer address to write to
   135                              <1> ;ecx = Number of sectors to read
   136                              <1> ;rdx = Start LBA to read from
   137 00005087 FA                  <1>     cli 
   138 00005088 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   139 0000508F 488D25(E0D80300)    <1>     lea rsp, DiskStakTop
   140 00005096 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   141 00005097 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   142 00005098 E896FFFFFF          <1>     call setupAbsDiskEntry
   143 0000509D 7233                <1>     jc absDiskExit
   144 0000509F E8BB010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   145                              <1> absDiskReadWriteCommon:
   146                              <1> ;Entered with the appropriate function number in ah
   147                              <1> ; and primary request header in rbx
   148 000050A4 E83B000000          <1>     call absDiskDriverCall
   149 000050A9 7427                <1>     jz absDiskExit  ;Skip error code checking
   150 000050AB 8A05(25C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   151                              <1>     ;DOS uses the following pairs in a table
   152                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   153 000050B1 B480                <1>     mov ah, 80h ;Attachment failure
   154 000050B3 3C0C                <1>     cmp al, 0Ch ;Gen error
   155 000050B5 741A                <1>     je .absExit
   156 000050B7 B440                <1>     mov ah, 40h ;Seek error
   157 000050B9 3C06                <1>     cmp al, 06h
   158 000050BB 7414                <1>     je .absExit
   159 000050BD B408                <1>     mov ah, 08h ;Bad CRC
   160 000050BF 3C04                <1>     cmp al, 04h
   161 000050C1 740E                <1>     je .absExit
   162 000050C3 B404                <1>     mov ah, 04h ;Sector not found
   163 000050C5 3C08                <1>     cmp al, 08h
   164 000050C7 7408                <1>     je .absExit
   165 000050C9 30E4                <1>     xor ah, ah  ;Write Protect Violation
   166 000050CB 84C0                <1>     test al, al
   167 000050CD 7402                <1>     je .absExit
   168 000050CF B402                <1>     mov ah, 02h ;Other Error
   169                              <1> .absExit:
   170 000050D1 F9                  <1>     stc
   171                              <1> absDiskExit:
   172 000050D2 5B                  <1>     pop rbx
   173 000050D3 5D                  <1>     pop rbp
   174 000050D4 FA                  <1>     cli
   175 000050D5 FE0D(6AC30300)      <1>     dec byte [inDOS]
   176 000050DB 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]
   177 000050E2 FB                  <1>     sti ;Reenable interrupts
   178                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 000050E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   179                              <1> absDiskDriverCall:
   180                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   181                              <1> ;       rbx = Request header address
   182                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   183                              <1> ;       eax = Status word from request
   184                              <1> ;       ecx = Number of sectors transferred
   185 000050E4 56                  <1>     push rsi
   186                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   187 000050E5 8B0D(38C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   188                              <1>     ;Prepare for goDriver now
   189 000050EB 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   190 000050EF E8CBFEFFFF          <1>     call goDriver   ;Make request
   191 000050F4 5E                  <1>     pop rsi
   192 000050F5 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   193 000050FB 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   194 000050FD 0FB705(25C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   195 00005104 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   196                              <1>     return
    18                              <2> %%_ret:
    19 00005108 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> getDiskDPB:
   199                              <1> ;Gets the disk DPB if the Disk is valid
   200                              <1> ;Otherwise will return a pointer to the drive DPB
   201                              <1> ;Called with rdi pointing to the CDS
   202                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   203 00005109 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   204 0000510D 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   205 00005110 8805(63C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   206 00005116 E84E020000          <1>     call setWorkingDPB
   207 0000511B 57                  <1>     push rdi    ;Save the CDS ptr
   208 0000511C E85A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   209 00005121 5F                  <1>     pop rdi
   210 00005122 7233                <1>     jc .exitBad ;Preserve CF
   211 00005124 7530                <1>     jnz .exit
   212                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   213 00005126 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   214 0000512C 31C0                <1>     xor eax, eax
   215 0000512E 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   216 00005131 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   217 00005135 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   218                              <1> .checkCDS:
   219 0000513C 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   220 00005140 7509                <1>     jne .next
   221 00005142 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   222 00005146 7403                <1>     jz .next    ;IF yes, skip it
   223 00005148 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   224                              <1> .next:
   225 0000514B 4881C75B000000      <1>     add rdi, cds_size
   226 00005152 FEC9                <1>     dec cl
   227 00005154 75E6                <1>     jnz .checkCDS
   228                              <1> .exit:
   229 00005156 F8                  <1>     clc
   230                              <1> .exitBad:
   231                              <1>     return
    18                              <2> %%_ret:
    19 00005157 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> checkIfMedCheck:
   234                              <1> ;Input: rsi = DPB for disk
   235 00005158 50                  <1>     push rax
   236 00005159 53                  <1>     push rbx
   237                              <1>     ;!!!!!!!!!!!!
   238                              <1>     ;For now just if its the same disk, be ok with it.
   239                              <1>     ;!!!!!!!!!!!!
   240                              <1>     ;Read the clock record. Cross Day Bndry will always force a new operation
   241                              <1>     ;Read the time fields directly.
   242 0000515A E8C5D1FFFF          <1>     call swapPrimaryHeader  ;Save the primary header temporarily
   243 0000515F E812D8FFFF          <1>     call readDateTimeRecord ;Update the time
   244 00005164 F9                  <1>     stc ;Set CF, write backup to primary header
   245 00005165 E8BAD1FFFF          <1>     call swapPrimaryHeader
   246                              <1> 
   247                              <1> 
   248 0000516A 8A06                <1>     mov al, byte [rsi + dpb.bDriveNumber] 
   249 0000516C 3805(ACD90300)      <1>     cmp byte [lastDiskNum], al
   250 00005172 7500                <1>     jnz .exit
   251                              <1> 
   252                              <1> .exit:
   253 00005174 5B                  <1>     pop rbx
   254 00005175 58                  <1>     pop rax
   255                              <1>     return
    18                              <2> %%_ret:
    19 00005176 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> .okTime:
   257 00005177 31DB                <1>     xor ebx, ebx
   258 00005179 EBF9                <1>     jmp short .exit
   259                              <1> ensureDiskValid:
   260                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   261                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   262                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   263                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   264                              <1> .medChk:
   265 0000517B E828010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   266                              <1> ;Return in rbx the req hdr address
   267 00005180 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   268 00005184 E836FEFFFF          <1>     call goDriver   ;Request!
   269 00005189 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   270 0000518D F7C700800000        <1>     test edi, drvErrStatus
   271 00005193 756B                <1>     jnz .diskDrvCritErrMedChk
   272                              <1> .medChkIgnore:
   273 00005195 8A05(63C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   274 0000519B 30E4                <1>     xor ah, ah
   275 0000519D 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   276 000051A0 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   277 000051A3 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   278 000051A5 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   279 000051A7 E8C9B7FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   280 000051AC F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   281 000051AD 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   282                              <1>     ;ZF=NZ from test for dirty buffers
   283                              <1> .exit:
   284                              <1>     return
    18                              <2> %%_ret:
    19 000051AF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   285                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   286 000051B0 C605(E8D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   287 000051B7 E8DDB7FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   288                              <1>     ;Get a buffer to read BPB into in rdi
   289 000051BC 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   290 000051BE E8A5B9FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   291 000051C3 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   292 000051C5 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   293                              <1> .repeatEP:
   294 000051C9 E806010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   295 000051CE 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   296 000051D2 E8E8FDFFFF          <1>     call goDriver   ;Request!
   297 000051D7 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   298 000051DB A900800000          <1>     test eax, drvErrStatus
   299 000051E0 755C                <1>     jnz .diskDrvCritErrBPB
   300                              <1>     ;Now rebuild the dpb fields for this drive
   301 000051E2 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   302 000051E6 E847090000          <1>     call createDPB
   303                              <1>     ;Adjust the buffer header information
   304 000051EB 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   305 000051EE 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   306 000051F1 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   307 000051F4 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   308 000051F7 30E4                <1>     xor ah, ah
   309 000051F9 8825(E8D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   310                              <1>     return
    18                              <2> %%_ret:
    19 000051FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   311                              <1> .diskDrvCritErrMedChk:
   312                              <1> ;Critical Errors fall through here
   313                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   314 00005200 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   315 00005207 48892D(E0C60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   316 0000520E 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   317 00005211 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   318 00005213 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   319 00005219 E891FCFFFF          <1>     call criticalDOSError
   320 0000521E 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]
   321 00005225 488B2D(E0C60300)    <1>     mov rbp, qword [tmpDPBPtr]
   322 0000522C 3C01                <1>     cmp al, critRetry
   323 0000522E 0F8447FFFFFF        <1>     je .medChk
   324 00005234 3C00                <1>     cmp al, critIgnore
   325 00005236 0F8459FFFFFF        <1>     je .medChkIgnore
   326 0000523C F9                  <1>     stc ;Set error flag to indicate fail
   327                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 0000523D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   328                              <1> 
   329                              <1> .diskDrvCritErrBPB:
   330                              <1>     ;eax has status word, rbp has dpb ptr
   331                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   332 0000523E C605(C9C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   333 00005245 E8FCFBFFFF          <1>     call diskDevErr
   334 0000524A 3C01                <1>     cmp al, critRetry
   335 0000524C 0F8477FFFFFF        <1>     je .repeatEP
   336                              <1>     ;Else we fail (Ignore=Fail here)
   337 00005252 F9                  <1>     stc ;Set error flag to indicate fail
   338                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00005253 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   340                              <1> ;           Primitive Driver Requests
   341                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   342                              <1> ;First are Disk requests, then Char device requests
   343                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   344                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   345                              <1> 
   346                              <1> primReqWriteSetup:
   347 00005254 50                  <1>     push rax
   348 00005255 B408                <1>     mov ah, drvWRITE    ;Command code
   349 00005257 0225(32C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   350 0000525D EB03                <1>     jmp short primReqRWCommon
   351                              <1> primReqReadSetup:
   352 0000525F 50                  <1>     push rax
   353 00005260 B404                <1>     mov ah, drvREAD
   354                              <1> primReqRWCommon:
   355                              <1> ;Sets up the IO request packet with:
   356                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   357                              <1> ; rbx = Data storage buffer ptr
   358                              <1> ; ecx = Number of sectors to transfer
   359                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   360                              <1> ; ~~~~ Set by entry function ~~~~ 
   361                              <1> ; ah = Command code
   362                              <1> ; All regs preserved EXCEPT rbx.
   363                              <1> ; Return: rbx = Transfer Address
   364 00005262 48891D(30C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   365 00005269 890D(38C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   366 0000526F C605(22C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   367 00005276 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   368 0000527B 8905(23C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   369 00005281 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   370 00005284 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   371                              <1>     ;Disk operations only here!
   372 00005286 488915(3CC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   373 0000528D 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   374 00005290 8805(2FC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   375 00005296 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   376 00005299 8805(23C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   377                              <1> primReqCommonExit:
   378                              <1> ;Returns in rbx the primary request header as these functions
   379                              <1> ; setup the request in the primary request header space
   380 0000529F 58                  <1>     pop rax
   381 000052A0 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   382                              <1>     return
    18                              <2> %%_ret:
    19 000052A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> primReqMedCheckSetup:
   385                              <1> ;Prepare the diskIO packet for mediacheck
   386                              <1> ;rbp has DPB pointer for device to check media on
   387 000052A8 50                  <1>     push rax
   388 000052A9 C605(22C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   389 000052B0 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   390 000052B3 8805(2FC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   391 000052B9 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   392 000052BC 8805(23C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   393 000052C2 C605(24C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   394 000052C9 66C705(25C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   394 000052D1 00                  <1>
   395 000052D2 EBCB                <1>     jmp short primReqCommonExit
   396                              <1> 
   397                              <1> primReqGetBPBSetup:
   398                              <1> ;rbp has DPB pointer for device
   399                              <1> ;rdi has sector buffer header pointer for transfer
   400 000052D4 50                  <1>     push rax
   401 000052D5 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   402 000052D9 48893D(30C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   403 000052E0 C605(22C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   404 000052E7 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   405 000052EA 8805(2FC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   406 000052F0 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   407 000052F3 8805(23C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   408 000052F9 C605(24C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   409 00005300 66C705(25C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   409 00005308 00                  <1>
   410 00005309 EB94                <1>     jmp short primReqCommonExit
   411                              <1> 
   412                              <1> primReqOpenSetup:
   413                              <1> ;al = unit number if a disk device. Undefined otherwise
   414 0000530B 50                  <1>     push rax
   415 0000530C B40D                <1>     mov ah, drvOPEN
   416 0000530E EB03                <1>     jmp short primReqOCcommon
   417                              <1> primReqCloseSetup:
   418                              <1> ;al = unit number if a disk device. Undefined otherwise
   419 00005310 50                  <1>     push rax
   420 00005311 B40E                <1>     mov ah, drvCLOSE
   421                              <1> primReqOCcommon:
   422 00005313 C605(22C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   423 0000531A 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   424 0000531B 8905(23C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   425                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   426 00005321 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   427                              <1> 
   428                              <1> secdReqCharIOReq:
   429                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   430                              <1> ;Input:
   431                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   432                              <1> ; ecx = Length of buffer
   433                              <1> ; rdi = Buffer pointer
   434                              <1> ;Output: 
   435                              <1> ; rbx = Transfer Address 
   436 00005326 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   437 0000532D C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   438 00005330 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   439 00005333 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   440 00005339 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   441 0000533D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   442                              <1>     return
    18                              <2> %%_ret:
    19 00005340 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   443                              <1> ;If the device which will process this request is a disk device
   444                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   445                              <1> ;Then we will read the appropriate byte from that buffer to the 
   446                              <1> ; singleIOByt buffer.
   447                              <1> ;Such a request will require additional setup with the following fields:
   448                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    38                                  %include "./Source/Kernel/dosUtils.asm"
    39                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    40                              <1> 
    41                              <1> readFSRegister:
    42                              <1> ;Output: rax = Value of fs
    43 00005341 51                  <1>     push rcx
    44 00005342 52                  <1>     push rdx
    45 00005343 B9000100C0          <1>     mov ecx, 0C0000100h
    46 00005348 0F32                <1>     rdmsr   ;Get fs in edx:eax
    47 0000534A 48C1E220            <1>     shl rdx, 20h
    48 0000534E 4809D0              <1>     or rax, rdx
    49 00005351 5A                  <1>     pop rdx
    50 00005352 59                  <1>     pop rcx
    51                              <1>     return
    18                              <2> %%_ret:
    19 00005353 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> writeFSRegister:
    54                              <1> ;Input: rax = Value to write to fs
    55 00005354 51                  <1>     push rcx
    56 00005355 52                  <1>     push rdx
    57 00005356 4889C2              <1>     mov rdx, rax    ;Split rax to edx:eax
    58 00005359 48C1EA20            <1>     shr rdx, 20h    ;Shift the upper dword low
    59 0000535D 09C0                <1>     or eax, eax     ;Clear upper dword
    60 0000535F B9000100C0          <1>     mov ecx, 0C0000100h
    61 00005364 0F30                <1>     wrmsr
    62 00005366 5A                  <1>     pop rdx
    63 00005367 59                  <1>     pop rcx
    64                              <1>     return
    18                              <2> %%_ret:
    19 00005368 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> 
    66                              <1> ;Basic Drive related Utilities
    67                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    68                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    69                              <1> ; that gets set up)
    70                              <1> 
    71                              <1> setWorkingDPB:
    72                              <1> ;Gets dpb in rbp and saves to workingDPB
    73 00005369 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
    74                              <1>     return
    18                              <2> %%_ret:
    19 00005370 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> 
    76                              <1> testCDSNet:
    77                              <1> ;Checks if the workingCDS is a redirector drive
    78                              <1> ;Returns: CF=NC => Not net
    79                              <1> ;         CF=CY => Network redirector
    80                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    81                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    82                              <1> ;         rdi = workingCDS ptr
    83 00005371 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
    84 00005378 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    85 0000537F 7409                <1>     je .net
    86 00005381 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    87 00005387 7501                <1>     jnz .net ;Net with CDS
    88                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 00005389 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    89                              <1> .net:
    90 0000538A F9                  <1>     stc ;Set Net bit
    91                              <1>     return
    18                              <2> %%_ret:
    19 0000538B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    92                              <1> 
    93                              <1> getDiskData:
    94                              <1> ;This function returns:
    95                              <1> ;al = sectors per cluster
    96                              <1> ;ah = media ID byte
    97                              <1> ;ebx = total clusters
    98                              <1> ;cx = bytes per sector
    99                              <1> ;edx = number of available clusters
   100                              <1> ;
   101                              <1> ;If CF=CY on exit, al contains the error code
   102 0000538C E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
   103 00005391 7308                <1>     jnc .physical
   104                              <1>     ;Beep a redir request out
   105 00005393 B80C110000          <1>     mov eax, 110Ch 
   106 00005398 CD4F                <1>     int 4Fh
   107                              <1>     return
    18                              <2> %%_ret:
    19 0000539A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   108                              <1> .physical:
   109                              <1> ;Now we must lock the structures
   110 0000539B C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
   111 000053A2 E88B040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   112 000053A7 E85DFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
   113 000053AC 721C                <1>     jc .exit
   114 000053AE E8B1B9FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
   115 000053B3 7215                <1>     jc .exit
   116 000053B5 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   117 000053B8 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   118 000053BA 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
   119 000053BD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
   120 000053C0 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
   121 000053C2 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
   122 000053C6 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
   123 000053C9 F8                  <1>     clc
   124                              <1> .exit:
   125 000053CA E86D040000          <1>     call dosCrit1Exit
   126                              <1>     return
    18                              <2> %%_ret:
    19 000053CF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   127                              <1> 
   128                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   129                              <1> ;Input: al = Interrupt number
   130                              <1> ;Output: rbx = Interrupt Vector
   131 000053D0 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   132 000053D1 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   133 000053D2 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   134 000053D4 B807F00000          <1>     mov eax, 0F007h
   135 000053D9 CD35                <1>     int 35h
   136 000053DB 5A                  <1>     pop rdx
   137 000053DC 58                  <1>     pop rax
   138                              <1>     return
    18                              <2> %%_ret:
    19 000053DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   139                              <1> 
   140                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   141                              <1> ;Returns ptr to user regs in rsi
   142 000053DE 488B35(DCC30300)    <1>     mov rsi, qword [oldRSP]
   143                              <1>     return
    18                              <2> %%_ret:
    19 000053E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> 
   145                              <1> walkDPBchain:
   146                              <1> ;Called with al = 0 based drive number
   147                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   148 000053E6 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   149                              <1> .walk:
   150 000053ED 4881FEFFFFFFFF      <1>     cmp rsi, -1
   151 000053F4 740A                <1>     je .exitBad
   152 000053F6 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   153 000053F8 7407                <1>     je .exit    ;Drive found
   154 000053FA 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   155 000053FE EBED                <1>     jmp short .walk
   156                              <1> .exitBad:
   157 00005400 F9                  <1>     stc
   158                              <1> .exit:
   159                              <1>     return
    18                              <2> %%_ret:
    19 00005401 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   160                              <1> setDrive:   
   161                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   162                              <1> ;Input: al = 1-based drive number
   163                              <1> ;Output: al = 0-based drive number
   164                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   165                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   166                              <1> ;            set.
   167 00005402 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   168 00005407 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   169 00005409 56                  <1>     push rsi
   170 0000540A 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   171 00005411 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   172 00005417 5E                  <1>     pop rsi
   173 00005418 7401                <1>     jz .exit
   174 0000541A F9                  <1>     stc
   175                              <1> .exit:
   176                              <1>     return
    18                              <2> %%_ret:
    19 0000541B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   177                              <1> 
   178                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   179                              <1> ;Allows a redirector or subst/join to build a CDS
   180                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   181                              <1> ; volumes, that are made at system boot.
   182                              <1> ;Input: al = Drive Letter for drive
   183                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   184                              <1> ;Output: rdi = newly filled in workingCDS
   185                              <1> ;CF=NC => CDS valid and has a DPB
   186                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   187 0000541C 50                  <1>     push rax
   188 0000541D 2C40                <1>     sub al, "A"-1
   189 0000541F 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   190 00005425 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   191 0000542C 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   192 00005432 58                  <1>     pop rax
   193 00005433 7235                <1>     jb .exit    ;Exit with CF=CY
   194 00005435 50                  <1>     push rax
   195 00005436 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   196 0000543B 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   197 0000543D 58                  <1>     pop rax
   198 0000543E 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   199 00005444 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   200 0000544B 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   201 00005453 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   202                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   203 00005459 50                  <1>     push rax
   204 0000545A 56                  <1>     push rsi
   205 0000545B 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   206 0000545D E884FFFFFF          <1>     call walkDPBchain
   207 00005462 7204                <1>     jb .skipSettingDPB
   208 00005464 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   209                              <1> .skipSettingDPB:
   210 00005468 5E                  <1>     pop rsi
   211 00005469 58                  <1>     pop rax
   212                              <1> .exit:
   213                              <1>     return
    18                              <2> %%_ret:
    19 0000546A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   214                              <1> 
   215                              <1> getCDS:     ;Int 4Fh AX=1219h
   216                              <1> ;Gets the device DPB and saves it in the DOS variable
   217                              <1> ;This can be called to get CDS for network drives too!
   218                              <1> ;Input: al = 1 based drive number
   219                              <1> ;Sets workingCDS var with the CDS for the device. 
   220                              <1> ;   If device on a network, sets CF
   221                              <1> ;Returns al with 0-based drive number
   222 0000546B 84C0                <1>     test al, al
   223 0000546D 7508                <1>     jnz .skip
   224 0000546F 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   225 00005475 FEC0                <1>     inc al
   226                              <1> .skip:
   227 00005477 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   228 00005479 56                  <1>     push rsi
   229 0000547A C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   230 00005481 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   231 00005488 7423                <1>     jz .physDrive
   232                              <1>     ;Invokation via 21/5D00
   233 0000548A 50                  <1>     push rax
   234 0000548B 57                  <1>     push rdi
   235 0000548C 488D3D(FBC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   236 00005493 48893D(6CC60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   237 0000549A 0441                <1>     add al, "A" ;Convert to a drive letter
   238 0000549C E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   239 000054A1 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   240 000054A7 5F                  <1>     pop rdi
   241 000054A8 58                  <1>     pop rax
   242 000054A9 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   243 000054AB EB17                <1>     jmp short .exitOk   ;All oki
   244                              <1> .physDrive:
   245 000054AD E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   246 000054B2 7208                <1>     jc .exitBad
   247 000054B4 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   248 000054BA 7508                <1>     jnz .exitOk ;Exit with flag cleared
   249                              <1>     ;Else Return to unknown error locus
   250                              <1> .exitBad:
   251 000054BC C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   252                              <1> .exitBad1:
   253 000054C3 F9                  <1>     stc
   254                              <1> .exitOk:
   255 000054C4 5E                  <1>     pop rsi
   256                              <1>     return
    18                              <2> %%_ret:
    19 000054C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   259                              <1>     ;Gets the CDS for the current drive in al
   260                              <1>     ;Input: al = Drive number, 0 = A ...
   261                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   262                              <1>     ;        CF=CY => al not valid
   263 000054C6 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   264 000054CC 7202                <1>     jb .ctn
   265 000054CE F9                  <1>     stc 
   266                              <1>     return
    18                              <2> %%_ret:
    19 000054CF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   267                              <1> .ctn:
   268 000054D0 50                  <1>     push rax
   269 000054D1 52                  <1>     push rdx
   270 000054D2 0FB6C0              <1>     movzx eax, al
   271 000054D5 48BE5B000000000000- <1>     mov rsi, cds_size
   271 000054DE 00                  <1>
   272 000054DF 31D2                <1>     xor edx, edx
   273 000054E1 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   274 000054E3 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   275 000054EA 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   276 000054ED 488935(6CC60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   277 000054F4 5A                  <1>     pop rdx
   278 000054F5 58                  <1>     pop rax
   279 000054F6 F8                  <1>     clc
   280                              <1>     return
    18                              <2> %%_ret:
    19 000054F7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> 
   283                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   284                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   285                              <1> ;Input: AL = Char to normalise.
   286                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   287                              <1> ;If path separator, set ZF=ZE
   288 000054F8 3C5C                <1>     cmp al, "\"
   289 000054FA 7406                <1>     je .exit
   290 000054FC 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   291 000054FE 7502                <1>     jne .exit
   292 00005500 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   293                              <1> .exit:
   294                              <1>     return
    18                              <2> %%_ret:
    19 00005502 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> 
   296                              <1> uppercaseCharAtPtr:
   297                              <1> ;Get the char pointed to by rsi and then fall
   298 00005503 AC                  <1>     lodsb
   299                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   300                              <1> ;Convert a lowercase char to uppercase
   301                              <1> ; Leave alone uppercase chars and invalid chars
   302                              <1> ;Input: al = Char to convert to uppercase
   303                              <1> ;Output: al = Processed char
   304 00005504 53                  <1>     push rbx
   305 00005505 3C61                <1>     cmp al, "a"
   306 00005507 7214                <1>     jb .exit
   307 00005509 3C7A                <1>     cmp al, "z"
   308 0000550B 7702                <1>     ja .checkExt
   309 0000550D 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   310                              <1> .checkExt:
   311 0000550F 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   312 00005511 720A                <1>     jb .exit
   313 00005513 2C80                <1>     sub al, 80h ;Turn into table offset
   314 00005515 488B1D10ABFFFF      <1>     mov rbx, qword [ctryTbl + countryStruc.mapaddr]    ;Get ptr to extAsciiTable
   315 0000551C D7                  <1>     xlatb   ;Get converted extended byte into al
   316                              <1> .exit:
   317 0000551D 50                  <1>     push rax    ;Save al temporarily
   318 0000551E 488D1D2AADFFFF      <1>     lea rbx, asciiCharProperties
   319 00005525 D7                  <1>     xlatb   ;Get the signature in al
   320 00005526 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   321 00005528 58                  <1>     pop rax
   322 00005529 5B                  <1>     pop rbx
   323                              <1>     return
    18                              <2> %%_ret:
    19 0000552A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> strlen: ;Int 4Fh, AX=1212h
   326                              <1> ;Gets the length of a ASCIIZ string
   327                              <1> ;Input: rdi = Source buffer
   328                              <1> ;Output: ecx = Length of string
   329 0000552B 50                  <1>     push rax
   330 0000552C 57                  <1>     push rdi
   331 0000552D 30C0                <1>     xor al, al
   332 0000552F 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   333 00005531 FFC9                <1>     dec ecx ;rcx = -1
   334 00005533 F2AE                <1>     repne scasb
   335 00005535 F7D1                <1>     not ecx
   336 00005537 5F                  <1>     pop rdi
   337 00005538 58                  <1>     pop rax
   338                              <1>     return
    18                              <2> %%_ret:
    19 00005539 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> 
   340                              <1> strcpy:
   341                              <1> ;Copies a null terminated string from rsi to rdi
   342 0000553A AC                  <1>     lodsb
   343 0000553B AA                  <1>     stosb
   344 0000553C 84C0                <1>     test al, al
   345                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000553E 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   346 00005540 EBF8                <1>     jmp short strcpy
   347                              <1> 
   348                              <1> strcmp:
   349                              <1> ;Compares two ASCIIZ strings for equality.
   350                              <1> ;Input: rsi = First string
   351                              <1> ;       rdi = Second string
   352                              <1> ;       ecx = Number of bytes to compare
   353                              <1> ;Output: ZF=ZE => Equal
   354                              <1> ;        ZF=NZ => Not equal
   355 00005542 56                  <1>     push rsi
   356 00005543 57                  <1>     push rdi
   357 00005544 F3A6                <1>     repe cmpsb
   358 00005546 5F                  <1>     pop rdi
   359 00005547 5E                  <1>     pop rsi
   360                              <1>     return
    18                              <2> %%_ret:
    19 00005548 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   361                              <1> 
   362                              <1> 
   363                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   364                              <1> ;Converts lowercase to uppercase and / to "\"
   365                              <1> ;Input: rsi = Source buffer
   366                              <1> ;       rdi = Buffer to place normalised path
   367 00005549 50                  <1>     push rax
   368 0000554A 56                  <1>     push rsi
   369 0000554B 57                  <1>     push rdi
   370                              <1> .scan:
   371 0000554C AC                  <1>     lodsb
   372 0000554D 84C0                <1>     test al, al
   373 0000554F 740D                <1>     jz .exit
   374 00005551 E8A2FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   375 00005556 E8A9FFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   376 0000555B AA                  <1>     stosb
   377 0000555C EBEE                <1>     jmp short .scan
   378                              <1> .exit:
   379 0000555E 5F                  <1>     pop rdi
   380 0000555F 5E                  <1>     pop rsi
   381 00005560 58                  <1>     pop rax
   382                              <1>     return
    18                              <2> %%_ret:
    19 00005561 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   385                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   386                              <1> ;Input: rsi = One ASCIIZ pathname
   387                              <1> ;       rdi = Second ASCIIZ pathname
   388                              <1> ;Return:
   389                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   390 00005562 50                  <1>     push rax
   391 00005563 56                  <1>     push rsi
   392 00005564 57                  <1>     push rdi
   393                              <1> .scan:
   394 00005565 8A06                <1>     mov al, byte [rsi]
   395 00005567 84C0                <1>     test al, al
   396 00005569 7424                <1>     jz .endOfString
   397 0000556B 8A27                <1>     mov ah, byte [rdi]
   398 0000556D E886FFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   399 00005572 7410                <1>     jz .pathseps
   400 00005574 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   401 00005578 38E0                <1>     cmp al, ah
   402 0000557A 7515                <1>     jnz .exit
   403                              <1> .nextChar:
   404 0000557C 48FFC6              <1>     inc rsi
   405 0000557F 48FFC7              <1>     inc rdi
   406 00005582 EBE1                <1>     jmp short .scan
   407                              <1> .pathseps:
   408 00005584 86E0                <1>     xchg ah, al
   409 00005586 E86DFFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   410 0000558B 7504                <1>     jnz .exit
   411 0000558D EBED                <1>     jmp short .nextChar ;Else get the next chars
   412                              <1> .endOfString:
   413 0000558F 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   414                              <1> .exit:
   415 00005591 5F                  <1>     pop rdi
   416 00005592 5E                  <1>     pop rsi
   417 00005593 58                  <1>     pop rax
   418                              <1>     return
    18                              <2> %%_ret:
    19 00005594 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   419                              <1> checkPathspecOK:
   420                              <1> ;Input:
   421                              <1> ;rsi -> points to a path to verify if it is ok.
   422                              <1> ;Output:
   423                              <1> ;CF=NC => The path is totally clean and ok to use.
   424                              <1> ;CF=CY => the path is malformed and may be used ONLY if ZF=ZE. 
   425                              <1> ; If ZF=ZE then the only bad char in the path is followed by a ASCII null
   426                              <1> ;Here we check for OK chars only. Hence \ / ? * and . are considered acceptable
   427                              <1> 
   428                              <1> ;Full paths may start with \\<15-char machine name>\...
   429                              <1> ; or <Drive Letter>:\...
   430                              <1> ;CWD relative paths start with <Drive Letter>:...
   431                              <1> ;Current Drive Root Relative paths may start with \...
   432                              <1> ;Current Drive CWD relative paths start with any other char
   433                              <1> ;Server calls are checked separately. 
   434                              <1> ;Must be X:\ and cannot have . or .. entries or any "G L O B A L" chars
   435                              <1> 
   436                              <1> ;We accept lc and uc characters in this check function.
   437 00005595 50                  <1>     push rax
   438 00005596 51                  <1>     push rcx
   439 00005597 56                  <1>     push rsi
   440 00005598 57                  <1>     push rdi
   441                              <1>     ;First we verify that the first two chars are ok (either X: or \\ or chars)
   442 00005599 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   443 0000559C F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   444 000055A3 7539                <1>     jnz .serverCallCheck
   445 000055A5 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   446 000055A9 7417                <1>     je .okToScan
   447 000055AB 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   448 000055AF 7411                <1>     je .okToScan
   449 000055B1 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   450 000055B4 7402                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   451                              <1>     ;Is this a current drive CWD relative or current drive root relative path?
   452                              <1>     ;If so the pathspec is not different to normal, goto scanLoop
   453 000055B6 EB11                <1>     jmp short .scanLoop
   454                              <1> .diskPath:
   455                              <1> ;Disk Letter must be A-Z (or a-z)
   456 000055B8 0C20                <1>     or al, 20h  ;Force an UC char to LC
   457 000055BA 3C61                <1>     cmp al, "a"
   458 000055BC 7217                <1>     jb .badExit
   459 000055BE 3C7A                <1>     cmp al, "z"
   460 000055C0 7713                <1>     ja .badExit
   461                              <1> .okToScan:
   462 000055C2 4881C602000000      <1>     add rsi, 2  ;Skip first two chars now
   463                              <1> .scanLoop:
   464 000055C9 AC                  <1>     lodsb   ;Get char, inc rsi
   465 000055CA 84C0                <1>     test al, al  ;Is al=0, i.e string terminator?
   466 000055CC 740B                <1>     je .exit    ;Clear CF if al = 0
   467 000055CE E851000000          <1>     call checkCharOk    ;Check if char ok
   468 000055D3 75F4                <1>     jnz .scanLoop    ;If it is not, fall thru
   469                              <1> .badExit:
   470                              <1> ;Before we bad exit, we check if the next char is ascii null.
   471                              <1> ;If it is we set ZF
   472 000055D5 AC                  <1>     lodsb
   473 000055D6 84C0                <1>     test al, al ;Set ZF if only last char is malformed, else clear ZF
   474                              <1> .servBadExit:   ;Server paths must be null terminated
   475 000055D8 F9                  <1>     stc ;And set CF to indicate bad path
   476                              <1> .exit:
   477 000055D9 5F                  <1>     pop rdi
   478 000055DA 5E                  <1>     pop rsi
   479 000055DB 59                  <1>     pop rcx
   480 000055DC 58                  <1>     pop rax
   481                              <1>     return
    18                              <2> %%_ret:
    19 000055DD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   482                              <1> .serverCallCheck:
   483                              <1> ;Server calls are a bit stricter, . and .. are forbidden but dir and filenames
   484                              <1> ; may contain an extension separated by a .
   485 000055DE 80FC3A              <1>     cmp ah, ":"
   486 000055E1 75F5                <1>     jne .servBadExit
   487 000055E3 0C20                <1>     or al, 20h  ;Force an UC char to LC
   488 000055E5 3C61                <1>     cmp al, "a"
   489 000055E7 72EF                <1>     jb .servBadExit
   490 000055E9 3C7A                <1>     cmp al, "z"
   491 000055EB 77EB                <1>     ja .servBadExit
   492                              <1>     ;If a dot is found, must check if the . is within 4 chars of a pathsep or 0
   493                              <1> .servScanLoop:
   494 000055ED AC                  <1>     lodsb
   495 000055EE 84C0                <1>     test al, al
   496 000055F0 74E7                <1>     je .exit
   497 000055F2 3C2E                <1>     cmp al, "." ;Handle dots separately
   498 000055F4 7409                <1>     je .secondDotCheck
   499 000055F6 E829000000          <1>     call checkCharOk
   500 000055FB 75F0                <1>     jnz .servScanLoop
   501 000055FD EBEE                <1>     jmp short .servScanLoop
   502                              <1> .secondDotCheck:
   503 000055FF AC                  <1>     lodsb
   504 00005600 84C0                <1>     test al, al ;cannot be a dot followed by a null
   505 00005602 74D4                <1>     jz .servBadExit
   506 00005604 3C2E                <1>     cmp al, "." ;Was this a .. entry?
   507 00005606 74D0                <1>     je .servBadExit
   508 00005608 E8EBFEFFFF          <1>     call swapPathSeparator  ;Was second char a pathsep? Not allowed.
   509 0000560D 74C9                <1>     jz .servBadExit ;... else check if the char was valid
   510 0000560F EBDC                <1>     jmp short .servScanLoop ;Else keep searching.
   511                              <1> scanPathWC:
   512                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   513                              <1> ; even in the final path componant.
   514                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   515                              <1> ;Output: CF=NC => No wildcards present
   516                              <1> ;        CF=CY => Wildcards found
   517 00005611 50                  <1>     push rax
   518 00005612 56                  <1>     push rsi
   519                              <1> .scan:
   520 00005613 AC                  <1>     lodsb
   521 00005614 84C0                <1>     test al, al
   522 00005616 7409                <1>     jz .exit
   523 00005618 3C3F                <1>     cmp al, "?"
   524 0000561A 7404                <1>     je .wcFnd
   525 0000561C 3C2A                <1>     cmp al, "*"
   526 0000561E 75F3                <1>     jne .scan
   527                              <1> .wcFnd:
   528 00005620 F9                  <1>     stc
   529                              <1> .exit:
   530 00005621 5E                  <1>     pop rsi
   531 00005622 58                  <1>     pop rax
   532                              <1>     return
    18                              <2> %%_ret:
    19 00005623 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   533                              <1> 
   534                              <1> 
   535                              <1> checkCharOk:
   536                              <1> ;Same as checkCharValid except DOES not return error on * ? \ / .
   537                              <1> ;If ZF=ZE => Invalid Char
   538                              <1> ;If ZF=NZ => Ok Char
   539 00005624 3C2E                <1>     cmp al, "."
   540 00005626 740F                <1>     je .exitOk
   541 00005628 3C2A                <1>     cmp al, "*"
   542 0000562A 740B                <1>     je .exitOk
   543 0000562C 3C3F                <1>     cmp al, "?"
   544 0000562E 7407                <1>     je .exitOk
   545 00005630 E8C3FEFFFF          <1>     call swapPathSeparator  ;check if al is a path separator
   546 00005635 7505                <1>     jnz checkCharValid
   547                              <1> .exitOk:
   548 00005637 50                  <1>     push rax
   549 00005638 0C01                <1>     or al, 1    ;Always clears the ZF
   550 0000563A 58                  <1>     pop rax
   551                              <1>     return
    18                              <2> %%_ret:
    19 0000563B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   552                              <1> checkCharValid:
   553                              <1> ;If ZF=ZE => Invalid Char
   554                              <1> ;If ZF=NZ => Valid Char
   555 0000563C 51                  <1>     push rcx
   556 0000563D 57                  <1>     push rdi
   557 0000563E B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   558 00005643 488D3D55ABFFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   559 0000564A F2AE                <1>     repne scasb ;Scan. Stop when equal
   560 0000564C 5F                  <1>     pop rdi
   561 0000564D 59                  <1>     pop rcx
   562                              <1>     return
    18                              <2> %%_ret:
    19 0000564E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> 
   565                              <1> skipSpacesAndTabs:
   566                              <1> ;Input: rsi -> String 
   567                              <1> ;Output: rsi -> First non Space or Tab type char
   568 0000564F AC                  <1>     lodsb
   569 00005650 E815000000          <1>     call isCharSpaceType
   570 00005655 74F8                <1>     jz skipSpacesAndTabs
   571 00005657 48FFCE              <1>     dec rsi
   572                              <1>     return
    18                              <2> %%_ret:
    19 0000565A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   573                              <1> 
   574                              <1> isCharDelimType:
   575                              <1> ;Input: al = Char to check properties of
   576                              <1> ;Output:    ZF=NZ => Char not name delimiter
   577                              <1> ;           ZF=ZE => Char delimiter
   578 0000565B 50                  <1>     push rax
   579 0000565C 53                  <1>     push rbx
   580 0000565D 488D1DEBABFFFF      <1>     lea rbx, asciiCharProperties
   581 00005664 D7                  <1>     xlatb
   582 00005665 A802                <1>     test al, 2
   583 00005667 5B                  <1>     pop rbx
   584 00005668 58                  <1>     pop rax
   585                              <1>     return
    18                              <2> %%_ret:
    19 00005669 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> isCharSpaceType:
   588                              <1> ;Input: al = Char to check properties of
   589                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   590                              <1> ;           ZF=ZE => Char Space or Tab
   591 0000566A 50                  <1>     push rax
   592 0000566B 53                  <1>     push rbx
   593 0000566C 488D1DDCABFFFF      <1>     lea rbx, asciiCharProperties
   594 00005673 D7                  <1>     xlatb
   595 00005674 A804                <1>     test al, 4
   596 00005676 5B                  <1>     pop rbx
   597 00005677 58                  <1>     pop rax
   598                              <1>     return
    18                              <2> %%_ret:
    19 00005678 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   599                              <1> 
   600                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   601                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   602                              <1> ;Input: rsi = One pointer
   603                              <1> ;       rdi = Second pointer
   604                              <1> ;Output: ZF=ZE if equal
   605                              <1> ;        ZF=NZ if not
   606 00005679 4839FE              <1>     cmp rsi, rdi
   607                              <1>     return
    18                              <2> %%_ret:
    19 0000567C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   608                              <1> 
   609                              <1> checkPathNet:
   610                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   611                              <1> ;Output: ZF=ZE => Path is a net path
   612                              <1> ;        ZF=NZ => Path is not a net path
   613 0000567D 50                  <1>     push rax
   614 0000567E 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   615 00005681 E872FEFFFF          <1>     call swapPathSeparator
   616 00005686 7505                <1>     jnz .exit
   617 00005688 E86BFEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   618                              <1> .exit:
   619 0000568D 58                  <1>     pop rax
   620                              <1>     return
    18                              <2> %%_ret:
    19 0000568E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   621                              <1> 
   622                              <1> getCharDevDriverPtr:
   623                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   624                              <1> ;Input: rax = Device Driver name (space padded)
   625                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   626 0000568F 488D3D(73C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   627                              <1> .lp:
   628 00005696 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   629                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000569A 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   630 0000569C 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   631 0000569F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   632 000056A6 75EE                <1>     jne .lp ;If not loop
   633 000056A8 F9                  <1>     stc ;Else bad exit
   634                              <1>     return
    18                              <2> %%_ret:
    19 000056A9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   635                              <1> 
    39                                  %include "./Source/Kernel/dosMain.asm"
    40                              <1> ;-----------------------------------:
    41                              <1> ;        Main Kernel dispatch       :
    42                              <1> ;            and routines           :
    43                              <1> ;-----------------------------------:
    44                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    45                              <1> ;ah = Function number, all other registers have various meanings
    46                              <1>  %if DEBUG
    47                              <1>     ;Entry function
    48                              <1>     debugEnterM
    49                              <1>     lea rbp, .l0000
    50                              <1>     call debPrintNullString
    51                              <1>     call debPrintFunctionName
    52                              <1>     jmp short .l0001
    53                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    54                              <1> .l0001:    
    55                              <1>     debugExitM
    56                              <1>     %endif
    57 000056AA FA                  <1>     cli ;Halt external interrupts
    58 000056AB FC                  <1>     cld ;Ensure all string ops occur in the right direction
    59 000056AC 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    60 000056AF 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    61                              <1>     ;Cherry pick functions
    62 000056B5 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    63 000056B8 722C                <1>     jb .fsbegin   ;If below skip these checks
    64 000056BA 0F8470020000        <1>     je ctrlBreakCheck
    65 000056C0 80FC64              <1>     cmp ah, 64h
    66 000056C3 0F84B0020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    67 000056C9 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    68 000056CB 80FC51              <1>     cmp ah, 51h
    69 000056CE 0F8493020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    70 000056D4 80FC62              <1>     cmp ah, 62h
    71 000056D7 0F8493020000        <1>     je getPSPaddr          ;Calls the above function
    72 000056DD 80FC50              <1>     cmp ah, 50h
    73 000056E0 0F8478020000        <1>     je setCurrProcessID
    74                              <1> .fsbegin:
    75 000056E6 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    76 000056EB 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    77 000056F2 66C705(A5C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    77 000056FA 00                  <1>
    78 000056FB 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
    79 00005702 488905(CCC30300)    <1>     mov qword [oldoldRSP], rax
    80 00005709 FE05(6AC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    81 0000570F 488925(DCC30300)    <1>     mov qword [oldRSP], rsp
    82                              <1> ;Network related variable resetting
    83 00005716 C605(5CC60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    84                              <1> ;Here, we want to save oldRSP in the callers PSP
    85 0000571D 803D(6AC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    86 00005724 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    87 00005726 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    88 0000572D 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    89                              <1> .fsb1:
    90 00005731 58                  <1>     pop rax     ;Get old rax back
    91 00005732 50                  <1>     push rax    ;and push it back onto the stack
    92                              <1> .abortEP:
    93                              <1> .charFun0CEP:
    94                              <1> .serverEP:
    95 00005733 488D25(11CC0300)    <1>     lea rsp, critStakTop
    96 0000573A FB                  <1>     sti         ;Reenable interrupts
    97                              <1> 
    98 0000573B 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    99 0000573D 881D(F5C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   100 00005743 C605(F6C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   101 0000574A 881D(CBC30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   102 00005750 881D(ECC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   103                              <1> 
   104 00005756 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   105 00005757 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   106 00005759 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   107 0000575B 488D056DABFFFF      <1>     lea rax, kDispTbl
   108 00005762 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   109 00005765 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   110 00005769 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   111 0000576C 58                  <1>     pop rax
   112                              <1> 
   113 0000576D 84E4                <1>     test ah, ah     ;Simple Terminate function?
   114 0000576F 741C                <1>     jz .fddiskOp
   115 00005771 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   116 00005774 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   117 00005776 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   118 00005779 7712                <1>     ja .fddiskOp
   119                              <1> ;Char operations here
   120 0000577B F605(69C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   121 00005782 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   122 00005784 488D25(A0D20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   123 0000578B EB40                <1>     jmp short .fdGoToFunction
   124                              <1> .fddiskOp:
   125                              <1>     ;Disk operations go here
   126                              <1>     ;Save rax on entry to a disk funciton
   127 0000578D 488905(95C30300)    <1>     mov qword [oldRAX], rax
   128                              <1>     ;Clear up error info
   129 00005794 C605(6CC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   130 0000579B C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   131 000057A2 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   132                              <1> 
   133 000057A9 50                  <1>     push rax
   134 000057AA B482                <1>     mov ah, 82h ;Cancel all critical section!
   135 000057AC CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   136 000057AE 58                  <1>     pop rax
   137                              <1> 
   138 000057AF C605(F6C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   139 000057B6 488D25(E0D80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   140 000057BD F605(94C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   141 000057C4 7407                <1>     jz .fdGoToFunction
   142                              <1> ; HANDLE CTRL+BREAK HERE!
   143 000057C6 50                  <1>     push rax
   144 000057C7 E81ACDFFFF          <1>     call checkBreak   ; Check for a ^C
   145 000057CC 58                  <1>     pop rax
   146                              <1> .fdGoToFunction:
   147 000057CD 48871D(E4C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   148                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   149                              <1>     ;
   150                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   151                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   152                              <1>     ;
   153                              <1>     %if DEBUG && REGS
   154                              <1>     ;Print stack if necessary function
   155                              <1>     debugEnterM
   156                              <1>     call debPrintDOSStack
   157                              <1>     debugExitM
   158                              <1>     %endif
   159 000057D4 FF15(E4C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   160                              <1>     %if DEBUG
   161                              <1>     ;Entry function
   162                              <1>     debugEnterM
   163                              <1>     lea rbp, .l0002
   164                              <1>     call debPrintNullString
   165                              <1>     jmp short .l0003
   166                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   167                              <1> .l0003:    
   168                              <1>     debugExitM
   169                              <1>     %endif
   170                              <1>     %if DEBUG && REGS
   171                              <1>     ;Exit function
   172                              <1>     debugEnterM
   173                              <1>     call debPrintDOSStack
   174                              <1>     debugExitM
   175                              <1>     %endif
   176                              <1> .fdExit:
   177 000057DA FA                  <1>     cli     ;Redisable interrupts
   178 000057DB FE0D(6AC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   179 000057E1 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   180 000057E8 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   181 000057EB 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]
   182 000057F2 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   183 000057F9 E806000000          <1>     call dosPopRegs  ;Pop the frame
   184 000057FE 48CF                <1>     iretq
   185                              <1> .fdExitBad:
   186 00005800 30C0                <1>     xor al, al
   187                              <1> defaultIretq:
   188 00005802 48CF                <1>     iretq
   189                              <1> dosPopRegs:
   190 00005804 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   191 0000580A 58                  <1>     pop rax
   192 0000580B 5B                  <1>     pop rbx
   193 0000580C 59                  <1>     pop rcx
   194 0000580D 5A                  <1>     pop rdx
   195 0000580E 5E                  <1>     pop rsi
   196 0000580F 5F                  <1>     pop rdi
   197 00005810 5D                  <1>     pop rbp
   198 00005811 4158                <1>     pop r8
   199 00005813 4159                <1>     pop r9
   200 00005815 FF25(D4C30300)      <1>     jmp qword [dosReturn]
   201                              <1> dosPushRegs:
   202 0000581B 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   203 00005821 4151                <1>     push r9
   204 00005823 4150                <1>     push r8
   205 00005825 55                  <1>     push rbp
   206 00005826 57                  <1>     push rdi
   207 00005827 56                  <1>     push rsi
   208 00005828 52                  <1>     push rdx
   209 00005829 51                  <1>     push rcx
   210 0000582A 53                  <1>     push rbx
   211 0000582B 50                  <1>     push rax
   212 0000582C FF25(D4C30300)      <1>     jmp qword [dosReturn]
   213                              <1> dosCrit1Enter:
   214                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00005832 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   215 00005833 B801800000          <1>     mov eax, 8001h
   216 00005838 CD4A                <1>     int 4ah
   217 0000583A 58                  <1>     pop rax
   218                              <1>     return
    18                              <2> %%_ret:
    19 0000583B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   219                              <1> dosCrit1Exit:
   220                              <1>     return
    18                              <2> %%_ret:
    19 0000583C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   221 0000583D B801810000          <1>     mov eax, 8101h
   222 00005842 CD4A                <1>     int 4ah
   223 00005844 58                  <1>     pop rax
   224                              <1>     return
    18                              <2> %%_ret:
    19 00005845 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   225                              <1> dosCrit2Enter:
   226                              <1>     return
    18                              <2> %%_ret:
    19 00005846 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   227 00005847 B802800000          <1>     mov eax, 8002h
   228 0000584C CD4A                <1>     int 4ah
   229 0000584E 58                  <1>     pop rax
   230                              <1>     return
    18                              <2> %%_ret:
    19 0000584F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231                              <1> dosCrit2Exit:
   232                              <1>     return
    18                              <2> %%_ret:
    19 00005850 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   233 00005851 B802810000          <1>     mov eax, 8102h
   234 00005856 CD4A                <1>     int 4ah
   235 00005858 58                  <1>     pop rax
   236                              <1>     return
    18                              <2> %%_ret:
    19 00005859 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   237                              <1> 
   238                              <1> ;All good exits destroy AT LEAST ax 
   239                              <1> extGoodExit2:
   240                              <1> ;Good exit with an extended return code in eax
   241 0000585A E87FFBFFFF          <1>     call getUserRegs
   242 0000585F 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   243 00005861 EB08                <1>     jmp short extGoodExit.extGoodCommon
   244                              <1> extGoodExit:
   245                              <1> ;Good exit
   246                              <1> ;Return code in ax
   247 00005863 E876FBFFFF          <1>     call getUserRegs
   248 00005868 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   249                              <1> .extGoodCommon:
   250 0000586B 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   251 0000586F F8                  <1>     clc
   252                              <1>     return
    18                              <2> %%_ret:
    19 00005870 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> extErrExit:
   254                              <1> ;The extended error exit from DOS
   255                              <1> ;Jumped to with AL=Extended error code
   256                              <1> ;Can be called too.
   257                              <1> ;Input: al = Extended error code
   258                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   259                              <1> ;   Returns with: eax = xLat Error
   260                              <1> ;                 rsi = callerFrame
   261 00005871 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   262 00005874 E813000000          <1>     call xLatError
   263 00005879 E891000000          <1>     call checkFail
   264 0000587E E85BFBFFFF          <1>     call getUserRegs
   265 00005883 668906              <1>     mov word [rsi + callerFrame.rax], ax
   266 00005886 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   267 0000588A F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   268                              <1>     return
    18                              <2> %%_ret:
    19 0000588B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   269                              <1> xLatError:
   270                              <1> ;Translates the error code given in ax and sets error code in the var
   271                              <1> ; Input: ax = Extended Error Code
   272                              <1> ; Output: ax = Potentially translated Error Code
   273                              <1> ;         [errorExCde] = Original Error Code
   274                              <1> ;Preserves all registers except ax
   275                              <1> ;AH is always returned as 0
   276 0000588C 53                  <1>     push rbx
   277 0000588D 51                  <1>     push rcx
   278 0000588E 56                  <1>     push rsi
   279 0000588F 668905(6DC30300)    <1>     mov word [errorExCde], ax
   280 00005896 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   281 00005898 488D35F0A7FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   282                              <1> .readEntry:
   283 0000589F 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   284 000058A1 3CFF                <1>     cmp al, -1
   285 000058A3 741F                <1>     je .skipXlat
   286 000058A5 3A05(96C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   287 000058AB 7408                <1>     je .found
   288                              <1>     ;Here, entry not found, goto next entry
   289 000058AD 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   290 000058B0 4801C6              <1>     add rsi, rax    ;Goto next entry
   291 000058B3 EBEA                <1>     jmp short .readEntry
   292                              <1> .found:
   293                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   294 000058B5 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   295                              <1> .mainSearch:
   296 000058B8 AC                  <1>     lodsb   ;Get one byte into al
   297 000058B9 38C3                <1>     cmp bl, al  ;Check against the error code
   298 000058BB 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   299 000058BD FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   300 000058BF 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   301                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   302 000058C1 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   303                              <1> .skipXlat:
   304 000058C4 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   305 000058C6 5E                  <1>     pop rsi
   306 000058C7 59                  <1>     pop rcx
   307 000058C8 5B                  <1>     pop rbx
   308                              <1>     return
    18                              <2> %%_ret:
    19 000058C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   309                              <1> setErrorVars:
   310                              <1> ;Looks up the error code in the variable and sets the other error vars
   311                              <1> ;Called with the lookup table in rsi
   312                              <1> ;All regs preserved
   313 000058CA 50                  <1>     push rax
   314 000058CB 53                  <1>     push rbx
   315 000058CC 51                  <1>     push rcx
   316 000058CD 56                  <1>     push rsi
   317 000058CE 0FB71D(6DC30300)    <1>     movzx ebx, word [errorExCde]
   318 000058D5 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   319                              <1> .readEntry:
   320 000058DA AD                  <1>     lodsd   ;Read the dword table entry into eax
   321 000058DB 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   322 000058E0 7428                <1>     je .exit    
   323 000058E2 38D8                <1>     cmp al, bl  ;Compare the error codes
   324 000058E4 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   325 000058E6 D3E8                <1>     shr eax, cl
   326 000058E8 3CFF                <1>     cmp al, -1
   327 000058EA 7406                <1>     je .skipClass
   328 000058EC 8805(70C30300)      <1>     mov byte [errorClass], al
   329                              <1> .skipClass:
   330 000058F2 D3E8                <1>     shr eax, cl
   331 000058F4 3CFF                <1>     cmp al, -1
   332 000058F6 7406                <1>     je .skipAct
   333 000058F8 8805(6FC30300)      <1>     mov byte [errorAction], al
   334                              <1> .skipAct:
   335 000058FE D3E8                <1>     shr eax, cl
   336 00005900 3CFF                <1>     cmp al, -1
   337 00005902 7406                <1>     je .exit
   338 00005904 8805(6CC30300)      <1>     mov byte [errorLocus], al
   339                              <1> .exit:
   340 0000590A 5E                  <1>     pop rsi
   341 0000590B 59                  <1>     pop rcx
   342 0000590C 5B                  <1>     pop rbx
   343 0000590D 58                  <1>     pop rax
   344                              <1>     return
    18                              <2> %%_ret:
    19 0000590E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> checkFail:
   346                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   347                              <1> ; and swaps the var error code if so
   348 0000590F 803D(CBC30300)00    <1>     cmp byte [Int44Fail], 0
   349 00005916 7509                <1>     jnz .skipFail
   350 00005918 66C705(6DC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   350 00005920 00                  <1>
   351                              <1> .skipFail:
   352 00005921 56                  <1>     push rsi
   353 00005922 488D3502A8FFFF      <1>     lea rsi, extErrTbl
   354 00005929 E89CFFFFFF          <1>     call setErrorVars
   355 0000592E 5E                  <1>     pop rsi
   356                              <1>     return
    18                              <2> %%_ret:
    19 0000592F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   357                              <1> ;========================================:
   358                              <1> ;      Reentrant Kernel Functions        :
   359                              <1> ;========================================:
   360                              <1> ctrlBreakCheck:    ;ah = 33h
   361 00005930 84C0                <1>     test al, al
   362 00005932 7508                <1>     jnz .cbcget  ;Get the state or other functions
   363 00005934 8A15(94C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   364 0000593A 48CF                <1>     iretq
   365                              <1> .cbcget:
   366 0000593C 3C02                <1>     cmp al, 02h
   367 0000593E 771A                <1>     ja .cbcBad
   368 00005940 740D                <1>     jz .cbcxchg ;Function 2
   369 00005942 52                  <1>     push rdx
   370 00005943 80E201              <1>     and dl, 1   ;Get only the bottom bit
   371 00005946 8815(94C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   372 0000594C 5A                  <1>     pop rdx
   373 0000594D 48CF                <1>     iretq
   374                              <1> .cbcxchg:
   375 0000594F 80E201              <1>     and dl, 1
   376 00005952 8615(94C30300)      <1>     xchg byte [breakFlag], dl
   377 00005958 48CF                <1>     iretq
   378                              <1> .cbcBad:
   379 0000595A B0FF                <1>     mov al, -1
   380 0000595C 48CF                <1>     iretq
   381                              <1> 
   382                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   383 0000595E 48891D(81C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   384 00005965 48CF                <1>     iretq
   385                              <1> 
   386                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   387 00005967 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   388 0000596E 48CF                <1>     iretq
   389                              <1> 
   390                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   391 00005970 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   392 00005977 48CF                <1>     iretq
   393                              <1> 
   394                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   395 00005979 8805(E9D80300)      <1>     mov byte [lookahead], al    
   396 0000597F 48CF                <1>     iretq
   397                              <1> 
   398                              <1> ;========================================:
   399                              <1> ;            Kernel Functions            :
   400                              <1> ;========================================:
   401                              <1> diskReset:         ;ah = 0Dh
   402                              <1> ;Flush all dirty buffers to disk
   403 00005981 E8ACFEFFFF          <1>     call dosCrit1Enter
   404 00005986 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   405                              <1> .drCheckBuffer:
   406 0000598D F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   407 00005991 7407                <1>     jz .drGotoNextBuffer
   408                              <1> .drFlushBuffer:
   409 00005993 E812AFFFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   410 00005998 720C                <1>     jc .drExit
   411                              <1> .drGotoNextBuffer:
   412 0000599A 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   413 0000599D 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   414 000059A4 75E7                <1>     jne .drCheckBuffer
   415                              <1> .drExit:
   416 000059A6 E891FEFFFF          <1>     call dosCrit1Exit
   417 000059AB B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   418 000059B0 CD4F                <1>     int 4fh
   419                              <1>     return
    18                              <2> %%_ret:
    19 000059B2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   420                              <1> 
   421                              <1> selectDisk:        ;ah = 0Eh
   422                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   423 000059B3 88D0                <1>     mov al, dl
   424 000059B5 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   425 000059B7 E846FAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   426 000059BC 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   427 000059BE 8805(93C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   428                              <1> .skipSettingCurrent:
   429 000059C4 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   430                              <1>     return
    18                              <2> %%_ret:
    19 000059CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   431                              <1> 
   432                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   433 000059CC 8A05(93C30300)      <1>     mov al, byte [currentDrv]
   434                              <1>     return
    18                              <2> %%_ret:
    19 000059D2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> FATinfoDefault:    ;ah = 1Bh
   437 000059D3 30D2                <1>     xor dl, dl
   438                              <1> FATinfoDevice:     ;ah = 1Ch
   439                              <1> ;Input: dl = 1 based drive number
   440                              <1> ;Output:
   441                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   442                              <1> ;cx = bytes per sector
   443                              <1> ;edx = total number of clusters
   444                              <1> ;rbx = Ptr to media ID byte
   445 000059D5 88D0                <1>     mov al, dl  ;Move drive number into al
   446 000059D7 E88FFAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   447 000059DC 7307                <1>     jnc .fidCDSFound
   448 000059DE B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   449 000059E3 EB2E                <1>     jmp short .error 
   450                              <1> .fidCDSFound:
   451 000059E5 E8A2F9FFFF          <1>     call getDiskData
   452 000059EA 7227                <1>     jc .error
   453                              <1> ;Now we have that:
   454                              <1> ;al = sectors per cluster
   455                              <1> ;ah = media ID byte
   456                              <1> ;ebx = total clusters
   457                              <1> ;cx = bytes per sector
   458                              <1> ;edx = number of available clusters
   459 000059EC E8EDF9FFFF          <1>     call getUserRegs
   460 000059F1 8825(E8C60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   461 000059F7 30E4                <1>     xor ah, ah
   462 000059F9 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   463 000059FC 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   464 00005A00 488D1D(E8C60300)    <1>     lea rbx, mediaByte
   465 00005A07 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   466 00005A0B 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   467                              <1> .badExit:
   468 00005A0F 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   469                              <1>     return
    18                              <2> %%_ret:
    19 00005A12 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   470                              <1> .error:
   471 00005A13 E859FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   472 00005A18 66B8FFFF            <1>     mov ax, -1
   473 00005A1C EBF1                <1>     jmp short .badExit
   474                              <1> 
   475                              <1> setIntVector:      ;ah = 25h
   476                              <1> ;Called with:
   477                              <1> ;   rdx = Pointer to interrupt handler
   478                              <1> ;   al = Interrupt number
   479 00005A1E 50                  <1>     push rax    ;Preserve all registers in call
   480 00005A1F 53                  <1>     push rbx
   481 00005A20 51                  <1>     push rcx
   482 00005A21 52                  <1>     push rdx
   483 00005A22 56                  <1>     push rsi
   484 00005A23 55                  <1>     push rbp
   485 00005A24 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   486 00005A26 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   487                              <1> ;First call to get default BIOS segement selector and attribute word
   488 00005A2C 88C3                <1>     mov bl, al  ;Set interrupt number 
   489 00005A2E B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   490 00005A33 CD35                <1>     int 35h
   491 00005A35 E8A4F9FFFF          <1>     call getUserRegs
   492 00005A3A 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   493 00005A3E 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   494 00005A40 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   495                              <1> ;dx preserves the attribute word
   496 00005A42 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   497 00005A47 CD35                <1>     int 35h
   498 00005A49 5D                  <1>     pop rbp
   499 00005A4A 5E                  <1>     pop rsi
   500 00005A4B 5A                  <1>     pop rdx
   501 00005A4C 59                  <1>     pop rcx
   502 00005A4D 5B                  <1>     pop rbx
   503 00005A4E 58                  <1>     pop rax
   504                              <1>     return
    18                              <2> %%_ret:
    19 00005A4F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   505                              <1> 
   506                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   507 00005A50 8805(32C30300)      <1>     mov byte [verifyFlag], al
   508 00005A56 8025(32C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   509                              <1>     return
    18                              <2> %%_ret:
    19 00005A5D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   510                              <1> getDOSversion:     ;ah = 30h
   511 00005A5E E87BF9FFFF          <1>     call getUserRegs
   512 00005A63 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   513 00005A65 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   514 00005A68 668B0591A5FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   515 00005A6F 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   516                              <1>     return
    18                              <2> %%_ret:
    19 00005A72 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   517                              <1> 
   518                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   519                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   520 00005A73 30D2                <1>     xor dl, dl
   521                              <1> getDeviceDPBptr:   ;ah = 32h
   522                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   523                              <1> ;On exit: rbx = DPB pointer
   524 00005A75 88D0                <1>     mov al, dl
   525 00005A77 E8EFF9FFFF          <1>     call getCDS
   526 00005A7C 722C                <1>     jc .bad
   527 00005A7E 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   528 00005A85 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   529 00005A8B 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   530                              <1>     ;Here ONLY if accessing critical Disk data structures
   531 00005A8D E8A0FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   532 00005A92 E872F6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   533 00005A97 E8A0FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   534 00005A9C 720C                <1>     jc .bad
   535 00005A9E E83BF9FFFF          <1>     call getUserRegs
   536 00005AA3 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   537 00005AA7 30C0                <1>     xor al, al
   538                              <1>     return
    18                              <2> %%_ret:
    19 00005AA9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   539                              <1> .bad:
   540 00005AAA B0FF                <1>     mov al, -1
   541                              <1>     return
    18                              <2> %%_ret:
    19 00005AAC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   542                              <1> 
   543                              <1> getInDOSflagPtr:   ;ah = 34h
   544 00005AAD 488D15(6AC30300)    <1>     lea rdx, inDOS
   545 00005AB4 E825F9FFFF          <1>     call getUserRegs
   546 00005AB9 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   547                              <1>     return
    18                              <2> %%_ret:
    19 00005ABD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> getIntVector:      ;ah = 35h
   550                              <1> ;Called with:
   551                              <1> ;   al = Interrupt Number
   552                              <1> ;Returns:
   553                              <1> ;   rbx = Pointer to interrupt handler
   554 00005ABE E80DF9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   555 00005AC3 E816F9FFFF          <1>     call getUserRegs
   556 00005AC8 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   557 00005ACC 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   558                              <1>     return
    18                              <2> %%_ret:
    19 00005ACE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> getDiskFreeSpace:  ;ah = 36h
   561                              <1> ;Input: Drive number in dl (0 = Current)
   562                              <1> ;Output:    ax = sectors per cluster
   563                              <1> ;           ebx = number of free clusters
   564                              <1> ;           cx = bytes per sector
   565                              <1> ;           edx = total clusters on drive
   566 00005ACF 88D0                <1>     mov al, dl
   567 00005AD1 E895F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   568 00005AD6 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   569                              <1> ;Else, we at an error.
   570                              <1> ;Simply return with CY set and error code in al with extended error info
   571 00005AD8 B80F000000          <1>     mov eax, errBadDrv
   572 00005ADD E88FFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   573                              <1>     ;extErrExit sets rsi to caller regs
   574 00005AE2 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   575                              <1>     return
    18                              <2> %%_ret:
    19 00005AE7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   576                              <1> .gdfsCDSFound:
   577 00005AE8 E89FF8FFFF          <1>     call getDiskData
   578 00005AED 7219                <1>     jc .error
   579                              <1> ;Now we have that:
   580                              <1> ;al = sectors per cluster
   581                              <1> ;ah = media ID byte
   582                              <1> ;ebx = total clusters
   583                              <1> ;cx = bytes per sector
   584                              <1> ;edx = number of available clusters
   585 00005AEF E8EAF8FFFF          <1>     call getUserRegs
   586 00005AF4 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   587 00005AF6 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   588 00005AF9 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   589 00005AFD 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   590 00005B00 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   591                              <1> .badExit:
   592 00005B04 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   593                              <1>     return
    18                              <2> %%_ret:
    19 00005B07 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   594                              <1> .error:
   595 00005B08 E864FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   596 00005B0D 66B8FFFF            <1>     mov ax, -1
   597 00005B11 EBF1                <1>     jmp short .badExit
   598                              <1> 
   599                              <1> 
   600                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   601 00005B13 31C0                <1>     xor eax, eax
   602 00005B15 668705(91C30300)    <1>     xchg ax, word [errorLevel]
   603 00005B1C E942FDFFFF          <1>     jmp extGoodExit
   604                              <1> 
   605                              <1> getSysVarsPtr:     ;ah = 52h
   606 00005B21 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   607 00005B28 E8B1F8FFFF          <1>     call getUserRegs
   608 00005B2D 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   609                              <1>     return
    18                              <2> %%_ret:
    19 00005B31 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   610                              <1> 
   611                              <1> 
   612                              <1> ;AH = 53h - CREATE DPB
   613                              <1> createDPB:         ;generates a DPB from a given BPB
   614                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   615                              <1> ;This is done so that the other fields of the DPB can be recycled
   616                              <1> ;Input: rsi = ptr to the BPB
   617                              <1> ;       rbp = ptr to the DPB
   618                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   619                              <1> ;bMediaDescriptor
   620 00005B32 8A4615              <1>     mov al, byte [rsi + bpb.media]
   621 00005B35 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   622                              <1> ;dFirstFreeCluster
   623 00005B38 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   624                              <1> ;dNumberOfFreeClusters
   625 00005B3F C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   626                              <1> ;wBytesPerSector
   627 00005B46 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   628 00005B4A 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   629                              <1> ;bMaxSectorInCluster
   630 00005B4E 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   631 00005B51 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   632 00005B53 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   633                              <1> ;bSectorsPerClusterShift
   634 00005B56 FEC0                <1>     inc al
   635 00005B58 30C9                <1>     xor cl, cl
   636                              <1> .cd2:
   637 00005B5A D0E8                <1>     shr al, 1
   638 00005B5C 7404                <1>     jz .cd3
   639 00005B5E FEC1                <1>     inc cl
   640 00005B60 EBF8                <1>     jmp short .cd2
   641                              <1> .cd3:
   642 00005B62 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   643                              <1> ;wFAToffset, number of reserved sectors in partition
   644 00005B65 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   645 00005B69 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   646                              <1> ;bNumberOfFATs
   647 00005B6D 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   648 00005B70 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   649                              <1> ;wNumberRootDirEntries
   650                              <1> ;Gets the number of 32 byte entries in the root directory
   651                              <1> ;Only valid for FAT 12/16
   652 00005B73 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   653 00005B77 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   654                              <1> ;dFATlength, get the FAT length
   655 00005B7B 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   656 00005B7F 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   657 00005B82 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   658 00005B84 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   659 00005B87 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   660                              <1> ;Complex cases below...
   661                              <1> ;dClusterHeapOffset, start sector of the data area
   662 00005B8A 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   663 00005B8E 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   664 00005B91 85C0                <1>     test eax, eax
   665 00005B93 0F44C3              <1>     cmovz eax, ebx
   666                              <1> ;eax = FATsz
   667 00005B96 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   668 00005B9A 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   669 00005B9D 85DB                <1>     test ebx, ebx
   670 00005B9F 0F44D9              <1>     cmovz ebx, ecx 
   671                              <1> ;ebx = TotSec
   672 00005BA2 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   673 00005BA5 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   674                              <1> .cd4:
   675 00005BA7 01C2                <1>     add edx, eax
   676 00005BA9 FEC9                <1>     dec cl
   677 00005BAB 75FA                <1>     jnz .cd4
   678 00005BAD 89D0                <1>     mov eax, edx    ;Store product in eax
   679 00005BAF 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   680 00005BB3 01D0                <1>     add eax, edx
   681                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   682 00005BB5 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   683 00005BB9 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   684 00005BBC 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   685 00005BC0 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   686 00005BC1 89D0                <1>     mov eax, edx
   687 00005BC3 31D2                <1>     xor edx, edx
   688 00005BC5 F7F1                <1>     div ecx
   689 00005BC7 89C2                <1>     mov edx, eax
   690 00005BC9 58                  <1>     pop rax
   691 00005BCA 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   692                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   693                              <1>     ;aka eax = Start sector of the data area in volume
   694 00005BCC 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   695                              <1> ;dClusterCount
   696 00005BCF 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   697 00005BD1 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   698 00005BD3 31D2                <1>     xor edx, edx
   699 00005BD5 BB01000000          <1>     mov ebx, 1
   700 00005BDA 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   701 00005BDD D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   702 00005BDF F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   703 00005BE1 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   704 00005BE3 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   705                              <1> ;dFirstUnitOfRootDir
   706 00005BE6 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   707 00005BEB 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   708 00005BEE 770F                <1>     ja .cd5
   709                              <1>     ;Else, we need to find the first sector of the root directory
   710                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   711 00005BF0 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   712 00005BF4 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   713                              <1> .cd51:
   714 00005BF8 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   715 00005BFB FFC9                <1>     dec ecx
   716 00005BFD 75F9                <1>     jnz .cd51
   717                              <1> .cd5:
   718 00005BFF 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   719                              <1> ;Exit epilogue
   720 00005C02 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   721 00005C09 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   722                              <1>     %if DEBUG && DPBINFO
   723                              <1>     ;Print DPB 
   724                              <1>     debugEnterM
   725                              <1>     push rbp
   726                              <1>     lea rbp, .l0000
   727                              <1>     call debPrintNullString
   728                              <1>     pop rbp
   729                              <1>     call debDPBBPBptr
   730                              <1>     call debMakeDebuggerRespond
   731                              <1>     jmp short .l0001
   732                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   733                              <1> .l0001:
   734                              <1>     debugExitM
   735                              <1>     %endif
   736                              <1>     return
    18                              <2> %%_ret:
    19 00005C0B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   737                              <1> 
   738                              <1> getVerifySetting:  ;ah = 54h
   739 00005C0C 8A05(32C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   740                              <1>     return
    18                              <2> %%_ret:
    19 00005C12 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   741                              <1> 
   742                              <1> getExtendedError:  ;ah = 59h
   743 00005C13 E8C6F7FFFF          <1>     call getUserRegs
   744 00005C18 668B05(6DC30300)    <1>     mov ax, word [errorExCde]
   745 00005C1F 8A2D(6CC30300)      <1>     mov ch, byte [errorLocus]
   746 00005C25 8A3D(70C30300)      <1>     mov bh, byte [errorClass]
   747 00005C2B 8A1D(6FC30300)      <1>     mov bl, byte [errorAction]
   748 00005C31 668906              <1>     mov word [rsi + callerFrame.rax], ax
   749 00005C34 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   750 00005C38 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   751                              <1>     return
    18                              <2> %%_ret:
    19 00005C3B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   752                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   753                              <1> noOp:
   754                              <1>     return
    18                              <2> %%_ret:
    19 00005C3C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                                  %include "./Source/Kernel/Net/server.asm"
    41                              <1> ;Network functions here
    42                              <1> 
    43                              <1> dosServer:  ;ah = 5Dh
    44                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    45                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    46                              <1> ;   rdx = Pointer to DPL
    47 00005C3D 3C07                <1>     cmp al, 07h
    48 00005C3F 7204                <1>     jb .skip
    49 00005C41 3C09                <1>     cmp al, 09h
    50 00005C43 7619                <1>     jbe .skip2
    51                              <1> .skip:
    52 00005C45 4889D6              <1>     mov rsi, rdx
    53 00005C48 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    54 00005C4C 66891D(A5C30300)    <1>     mov word [machineNum], bx
    55 00005C53 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    56 00005C57 48891D(9DC30300)    <1>     mov qword [serverPSP], rbx
    57                              <1>     
    58                              <1> .skip2:
    59                              <1> serverDispatch: ;AX=5D00h
    60                              <1> ;Input: rsi points to the DOS parameter list
    61 00005C5E 58                  <1>     pop rax
    62 00005C5F 56                  <1>     push rsi    ;Put dpl ptr in rdi
    63 00005C60 5F                  <1>     pop rdi
    64 00005C61 E878F7FFFF          <1>     call getUserRegs
    65 00005C66 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    66 00005C69 56                  <1>     push rsi
    67 00005C6A B906000000          <1>     mov ecx, 6
    68 00005C6F F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    69 00005C72 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    70 00005C79 48A5                <1>     movsq   ;Transfer r8...
    71 00005C7B 48A5                <1>     movsq   ;... and r9
    72 00005C7D 5E                  <1>     pop rsi
    73 00005C7E 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    74 00005C81 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    75 00005C85 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    76 00005C89 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    77 00005C8D 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    78 00005C91 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    79 00005C95 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    80 00005C99 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    81 00005C9D 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx
    82 00005CA4 C605(5CC60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    83 00005CAB E983FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    84                              <1> 
    85                              <1> 
    86                              <1> netServices:   ;ah = 5Eh, do nothing
    87                              <1> netRedir:;ah = 5Fh, do nothing
    88                              <1>     return
    18                              <2> %%_ret:
    19 00005CB0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                                  %include "./Source/Kernel/Net/multiplx.asm"
    42                              <1> ;Default multiplexer. Current only installed function is ah=12h
    43                              <1> 
    44                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    45 00005CB1 80FC12              <1>     cmp ah, 12h
    46 00005CB4 751C                <1>     jne .exit       ;Exit if not for us
    47 00005CB6 3C1B                <1>     cmp al, mDispTblL / 2
    48 00005CB8 7318                <1>     jae .exit   ;If above or equal, exit
    49 00005CBA 53                  <1>     push rbx
    50 00005CBB 51                  <1>     push rcx
    51 00005CBC 31C9                <1>     xor ecx, ecx
    52 00005CBE 488D1DDEA6FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    53 00005CC5 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    54 00005CC7 D1E1                <1>     shl ecx, 1   ;multiply by 2
    55 00005CC9 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    56 00005CCC FFD3                <1>     call rbx
    57 00005CCE 59                  <1>     pop rcx
    58 00005CCF 5B                  <1>     pop rbx
    59 00005CD0 48CF                <1>     iretq
    60                              <1> .exit:
    61 00005CD2 804C241001          <1>     or byte [rsp + 8h*2], 1
    62 00005CD7 48CF                <1>     iretq
    63                              <1> multiplexTest:
    64 00005CD9 B0FF                <1>     mov al, -1
    65 00005CDB C3                  <1>     ret
    66                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    67                              <1> ;Return: r8 = Dos Data Segment Pointer
    68 00005CDC 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    69                              <1>     return
    18                              <2> %%_ret:
    19 00005CE3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                                  %include "./Source/Drivers/drvData.asm"
    43                              <1> ;-----------------------------------:
    44                              <1> ;          Driver routines          :
    45                              <1> ;-----------------------------------:
    46                              <1> drivers:
    47                              <1> conHdr:
    48 00005CE4 [065D000000000000]  <1>     dq auxHdr
    49 00005CEC 1380                <1>     dw 08013h
    50 00005CEE [845E000000000000]  <1>     dq commonStrat
    51 00005CF6 [935E000000000000]  <1>     dq conDriver
    52 00005CFE 434F4E2020202020    <1>     db "CON     "
    53                              <1> auxHdr:
    54 00005D06 [285D000000000000]  <1>     dq prnHdr
    55 00005D0E 0080                <1>     dw 08000h
    56 00005D10 [845E000000000000]  <1>     dq commonStrat
    57 00005D18 [4861000000000000]  <1>     dq com1Intr
    58 00005D20 4155582020202020    <1>     db "AUX     "
    59                              <1> prnHdr:
    60 00005D28 [4A5D000000000000]  <1>     dq clkHdr
    61 00005D30 40A0                <1>     dw 0A040h
    62 00005D32 [8C5E000000000000]  <1>     dq nulStrat
    63 00005D3A [925E000000000000]  <1>     dq nulIntr
    64 00005D42 50524E2020202020    <1>     db "PRN     "
    65                              <1> clkHdr:
    66 00005D4A [6C5D000000000000]  <1>     dq msdHdr
    67 00005D52 0880                <1>     dw 08008h
    68 00005D54 [845E000000000000]  <1>     dq commonStrat
    69 00005D5C [E05F000000000000]  <1>     dq clkDriver
    70 00005D64 434C4F434B242020    <1>     db "CLOCK$  "
    71                              <1> msdHdr:
    72 00005D6C [8E5D000000000000]  <1>     dq com1Hdr
    73 00005D74 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    74 00005D76 [845E000000000000]  <1>     dq commonStrat
    75 00005D7E [CC62000000000000]  <1>     dq msdDriver
    76 00005D86 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    77                              <1> com1Hdr:
    78 00005D8E [B05D000000000000]  <1>     dq com2Hdr
    79 00005D96 0080                <1>     dw 08000h
    80 00005D98 [845E000000000000]  <1>     dq commonStrat
    81 00005DA0 [4861000000000000]  <1>     dq com1Intr
    82 00005DA8 434F4D3120202020    <1>     db "COM1    "
    83                              <1> com2Hdr:
    84 00005DB0 [D25D000000000000]  <1>     dq com3Hdr
    85 00005DB8 0080                <1>     dw 08000h
    86 00005DBA [845E000000000000]  <1>     dq commonStrat
    87 00005DC2 [5161000000000000]  <1>     dq com2Intr
    88 00005DCA 434F4D3220202020    <1>     db "COM2    "
    89                              <1> com3Hdr:
    90 00005DD2 [F45D000000000000]  <1>     dq com4Hdr
    91 00005DDA 0080                <1>     dw 08000h
    92 00005DDC [845E000000000000]  <1>     dq commonStrat
    93 00005DE4 [5A61000000000000]  <1>     dq com3Intr
    94 00005DEC 434F4D3320202020    <1>     db "COM3    "
    95                              <1> com4Hdr:
    96 00005DF4 [165E000000000000]  <1>     dq lpt1Hdr
    97 00005DFC 0080                <1>     dw 08000h
    98 00005DFE [845E000000000000]  <1>     dq commonStrat
    99 00005E06 [6361000000000000]  <1>     dq com4Intr
   100 00005E0E 434F4D3420202020    <1>     db "COM4    "
   101                              <1> lpt1Hdr:
   102 00005E16 [385E000000000000]  <1>     dq lpt2Hdr
   103 00005E1E 40A0                <1>     dw 0A040h
   104 00005E20 [8C5E000000000000]  <1>     dq nulStrat
   105 00005E28 [925E000000000000]  <1>     dq nulIntr
   106 00005E30 4C50543120202020    <1>     db "LPT1    "
   107                              <1> lpt2Hdr:
   108 00005E38 [5A5E000000000000]  <1>     dq lpt3Hdr
   109 00005E40 40A0                <1>     dw 0A040h
   110 00005E42 [8C5E000000000000]  <1>     dq nulStrat
   111 00005E4A [925E000000000000]  <1>     dq nulIntr
   112 00005E52 4C50543220202020    <1>     db "LPT2    "
   113                              <1> lpt3Hdr:
   114 00005E5A FFFFFFFFFFFFFFFF    <1>     dq -1
   115 00005E62 40A0                <1>     dw 0A040h
   116 00005E64 [8C5E000000000000]  <1>     dq nulStrat
   117 00005E6C [925E000000000000]  <1>     dq nulIntr
   118 00005E74 4C50543320202020    <1>     dq "LPT3    "
   119 00005E7C 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    43                                  %include "./Source/Drivers/charDrv.asm"
    44                              <1> commonStrat:
    45                              <1> ;DOS calls this function with rbx=Ptr to request header
    46 00005E84 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    47 00005E8B C3                  <1>     ret
    48                              <1> nulStrat:
    49 00005E8C 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    50                              <1> nulIntr:
    51 00005E92 C3                  <1>     ret
    52                              <1> conDriver:
    53 00005E93 50                  <1>     push rax
    54 00005E94 53                  <1>     push rbx
    55 00005E95 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    56 00005E9C B003                <1>     mov al, 03h ;Unknown Command
    57 00005E9E 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    58 00005EA2 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    59                              <1> 
    60 00005EA4 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    61 00005EA7 3C04                <1>     cmp al, 4
    62 00005EA9 7441                <1>     jz .conRead
    63 00005EAB 3C05                <1>     cmp al, 5
    64 00005EAD 0F847F000000        <1>     jz .conNondestructiveRead
    65 00005EB3 3C06                <1>     cmp al, 6
    66 00005EB5 0F84A8000000        <1>     jz .conInputStatus
    67 00005EBB 3C07                <1>     cmp al, 7
    68 00005EBD 0F84B0000000        <1>     jz .conFlushInputBuffers
    69 00005EC3 3C08                <1>     cmp al, 8
    70 00005EC5 0F84CA000000        <1>     jz .conWrite
    71 00005ECB 3C09                <1>     cmp al, 9
    72 00005ECD 0F84C2000000        <1>     jz .conWrite
    73 00005ED3 3C0A                <1>     cmp al, 0Ah
    74 00005ED5 0F84E3000000        <1>     jz .conOutputStatus
    75 00005EDB EB06                <1>     jmp short .conExit  ;All other valid functions return done
    76                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    77 00005EDD B480                <1>     mov ah, 80h ;Set error bit
    78 00005EDF 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    79                              <1> .conExit:
    80 00005EE3 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    81 00005EE9 5B                  <1>     pop rbx
    82 00005EEA 58                  <1>     pop rax
    83 00005EEB C3                  <1>     ret
    84                              <1> .conRead:    ;Function 4
    85 00005EEC B005                <1>     mov al, 05h ;Bad request structure length?
    86 00005EEE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    87 00005EF1 75EA                <1>     jne .conWriteErrorCode
    88                              <1> 
    89 00005EF3 57                  <1>     push rdi
    90 00005EF4 51                  <1>     push rcx
    91 00005EF5 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    92 00005EF9 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    93                              <1> .cre1:
    94 00005EFB 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    95 00005EFE 741C                <1>     je .cre2
    96 00005F00 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    97 00005F07 751A                <1>     jnz .cre3   ;No, get the buffer value
    98 00005F09 31C0                <1>     xor eax, eax
    99 00005F0B CD36                <1>     int 36h
   100                              <1> .cre11:
   101 00005F0D AA                  <1>     stosb
   102 00005F0E 84C0                <1>     test al, al ;Was the ascii code stored 0?
   103 00005F10 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   104 00005F12 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   105                              <1> .cre12:
   106 00005F18 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   107 00005F1A EBDF                <1>     jmp short .cre1
   108                              <1> .cre2:
   109 00005F1C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   110 00005F1F 59                  <1>     pop rcx
   111 00005F20 5F                  <1>     pop rdi
   112 00005F21 EBC0                <1>     jmp short .conExit
   113                              <1> .cre3:
   114 00005F23 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   115 00005F29 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   116 00005F30 EBDB                <1>     jmp short .cre11
   117                              <1> 
   118                              <1> .conNondestructiveRead:  ;Function 5
   119 00005F32 B005                <1>     mov al, 05h ;Bad request structure length?
   120 00005F34 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   121 00005F37 75A4                <1>     jne .conWriteErrorCode
   122 00005F39 803D8E00000000      <1>     cmp byte [.conBuf], 0
   123 00005F40 7519                <1>     jnz .cnr2
   124 00005F42 B401                <1>     mov ah, 01h     ;Get key if exists
   125 00005F44 CD36                <1>     int 36h
   126 00005F46 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   127                              <1>     ;Keystroke available
   128                              <1> .cnr0:
   129 00005F48 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   130 00005F4B E993FFFFFF          <1>     jmp .conExit
   131                              <1> .cnr1: ;No keystroke available
   132 00005F50 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   133 00005F56 E988FFFFFF          <1>     jmp .conExit
   134                              <1> .cnr2:
   135 00005F5B 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   136 00005F61 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   137                              <1> 
   138                              <1> .conInputStatus:         ;Function 6
   139 00005F63 B005                <1>     mov al, 05h ;Bad request structure length?
   140 00005F65 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   141 00005F68 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   142 00005F6E E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   143                              <1> 
   144                              <1> .conFlushInputBuffers:   ;Function 7
   145 00005F73 B005                <1>     mov al, 05h ;Bad request structure length?
   146 00005F75 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   147 00005F78 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   148 00005F7E C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   149                              <1> .cfib0:
   150 00005F85 B401                <1>     mov ah, 01      ;Get buffer status
   151 00005F87 CD36                <1>     int 36h
   152 00005F89 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   153 00005F8F 30E4                <1>     xor ah, ah
   154 00005F91 CD36                <1>     int 36h ;Read key to flush from buffer
   155 00005F93 EBF0                <1>     jmp short .cfib0
   156                              <1> 
   157                              <1> .conWrite:   ;Function 8 and 9
   158 00005F95 B005                <1>     mov al, 05h ;Bad request structure length?
   159 00005F97 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   160 00005F9A 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   161                              <1> 
   162 00005FA0 56                  <1>     push rsi
   163 00005FA1 51                  <1>     push rcx
   164 00005FA2 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   165 00005FA6 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   166                              <1> .cw1: 
   167 00005FA8 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   168 00005FAB 7407                <1>     je .cw2
   169 00005FAD AC                  <1>     lodsb   ;Get char into al, and inc rsi
   170 00005FAE CD49                <1>     int 49h ;Fast print char
   171 00005FB0 FFC1                <1>     inc ecx
   172 00005FB2 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   173                              <1> .cw2:
   174 00005FB4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   175 00005FB7 59                  <1>     pop rcx
   176 00005FB8 5E                  <1>     pop rsi
   177 00005FB9 E925FFFFFF          <1>     jmp .conExit
   178                              <1> .conOutputStatus:   ;Function 0Ah
   179 00005FBE B005                <1>     mov al, 05h ;Bad request structure length?
   180 00005FC0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   181 00005FC3 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   182 00005FC9 E915FFFFFF          <1>     jmp .conExit
   183                              <1> 
   184 00005FCE 00                  <1> .conBuf db 0    ;Single byte buffer
   185                              <1> fastOutput:         ;This CON driver supports Int 49h
   186                              <1> ;Called with char to transfer in al
   187 00005FCF 50                  <1>     push rax
   188 00005FD0 B40E                <1>     mov ah, 0Eh
   189 00005FD2 CD30                <1>     int 30h
   190 00005FD4 58                  <1>     pop rax
   191 00005FD5 48CF                <1>     iretq
   192                              <1> ctrlBreak:
   193                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   194 00005FD7 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   195 00005FDE 48CF                <1>     iretq
   196                              <1> 
   197                              <1> clkDriver:
   198 00005FE0 50                  <1>     push rax
   199 00005FE1 53                  <1>     push rbx
   200 00005FE2 51                  <1>     push rcx
   201 00005FE3 52                  <1>     push rdx
   202 00005FE4 56                  <1>     push rsi
   203 00005FE5 55                  <1>     push rbp
   204 00005FE6 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   205 00005FED B003                <1>     mov al, 03h ;Unknown Command
   206 00005FEF 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   207 00005FF3 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   208                              <1> 
   209 00005FF5 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   210 00005FF8 3C04                <1>     cmp al, 04h
   211 00005FFA 7437                <1>     jz .clkRead
   212 00005FFC 3C06                <1>     cmp al, 06h
   213 00005FFE 0F8494000000        <1>     jz .clkInputStatus
   214 00006004 3C07                <1>     cmp al, 07h
   215 00006006 0F8498000000        <1>     jz .clkFlushInputBuffers
   216 0000600C 3C08                <1>     cmp al, 08h
   217 0000600E 0F84A0000000        <1>     jz .clkWrite
   218 00006014 3C09                <1>     cmp al, 09h
   219 00006016 0F8498000000        <1>     jz .clkWrite
   220 0000601C EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   221                              <1> .clkNotFunctioning:
   222 0000601E B002                <1>     mov al, 02h ;Device not ready error
   223                              <1> .clkWriteErrorCode:
   224 00006020 B480                <1>     mov ah, 80h ;Set error bit
   225 00006022 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   226                              <1> .clkExit:
   227 00006026 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   228 0000602C 5D                  <1>     pop rbp
   229 0000602D 5E                  <1>     pop rsi
   230 0000602E 5A                  <1>     pop rdx
   231 0000602F 59                  <1>     pop rcx
   232 00006030 5B                  <1>     pop rbx
   233 00006031 58                  <1>     pop rax
   234 00006032 C3                  <1>     ret
   235                              <1> 
   236                              <1> .clkRead:           ;Function 4
   237 00006033 B005                <1>     mov al, 05h ;Bad request structure length?
   238 00006035 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   239 00006038 75E6                <1>     jne .clkWriteErrorCode
   240                              <1> 
   241 0000603A 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   242 0000603D 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   243 00006041 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   244 00006048 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   245 0000604C 30E4                <1>     xor ah, ah
   246 0000604E CD3A                <1>     int 3Ah         ;Read the system timer
   247 00006050 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   248 00006052 740D                <1>     jz .clkr1       ;Nope, now just time 
   249 00006054 30E4                <1>     xor ah, ah
   250                              <1>     ;This works as al should keep count of the # of days passed since last read
   251 00006056 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   252 0000605A 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   253                              <1> .clkr1:
   254 00006061 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   255 00006064 0FB7D2              <1>     movzx edx, dx
   256 00006067 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   257 00006069 89D0                <1>     mov eax, edx
   258 0000606B 31D2                <1>     xor edx, edx
   259 0000606D 89D8                <1>     mov eax, ebx
   260 0000606F B944040000          <1>     mov ecx, 1092   
   261 00006074 F7F1                <1>     div ecx
   262 00006076 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   263 00006079 89D0                <1>     mov eax, edx    ;Get remainder in eax
   264 0000607B 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   265 0000607F 31D2                <1>     xor edx, edx
   266 00006081 B95B000000          <1>     mov ecx, 91 ;5*18.2
   267 00006086 F7F1                <1>     div ecx
   268 00006088 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   269 0000608B 89D0                <1>     mov eax, edx    ;Get remainder in eax
   270                              <1>     ;lea eax, dword [eax + 4*eax]
   271                              <1>     ;add eax, edx    ;Essentially multiply by 6
   272 0000608D 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   273 00006090 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   274 00006093 E98EFFFFFF          <1>     jmp .clkExit
   275                              <1> 
   276                              <1> .clkInputStatus:    ;Function 6
   277                              <1> ;Always return ready
   278 00006098 B005                <1>     mov al, 05h ;Bad request structure length?
   279 0000609A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   280 0000609D 7581                <1>     jne .clkWriteErrorCode
   281 0000609F E982FFFFFF          <1>     jmp .clkExit
   282                              <1> .clkFlushInputBuffers:  ;Function 7
   283                              <1> ;Always return done immediately
   284 000060A4 B005                <1>     mov al, 05h ;Bad request structure length?
   285 000060A6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   286 000060A9 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   287 000060AF E972FFFFFF          <1>     jmp .clkExit
   288                              <1> 
   289                              <1> .clkWrite:          ;Functions 8 and 9
   290 000060B4 B005                <1>     mov al, 05h ;Bad request structure length?
   291 000060B6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   292 000060B9 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   293                              <1> 
   294 000060BF 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   295 000060C2 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   296 000060C6 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   297 000060CA 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   298                              <1> 
   299 000060D1 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   300 000060D3 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   301 000060D7 B105                <1>     mov cl, 5
   302 000060D9 F6F1                <1>     div cl          ;Divide al by 5
   303 000060DB 30E4                <1>     xor ah, ah      ;Remove the remainder
   304 000060DD 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   305                              <1> ;Using the decimal part of this formula for the low count
   306                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   307 000060DF 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   308 000060E2 B912000000          <1>     mov ecx, 18
   309 000060E7 F7E1                <1>     mul ecx  
   310 000060E9 01C3                <1>     add ebx, eax
   311                              <1> 
   312 000060EB 31D2                <1>     xor edx, edx
   313 000060ED 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   314 000060F1 B944040000          <1>     mov ecx, 1092
   315 000060F6 F7E1                <1>     mul ecx
   316 000060F8 01C3                <1>     add ebx, eax
   317 000060FA 89DA                <1>     mov edx, ebx    ;edx now has low count
   318 000060FC 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   319 00006100 B401                <1>     mov ah, 01h     ;Set the system time
   320 00006102 CD3A                <1>     int 3Ah
   321                              <1> 
   322 00006104 4889F3              <1>     mov rbx, rsi
   323 00006107 E91AFFFFFF          <1>     jmp .clkExit
   324                              <1> 
   325                              <1> .clkBCDtoHex:
   326                              <1> ;Converts a BCD value to a Hex byte
   327                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   328 0000610C 51                  <1>     push rcx
   329 0000610D 0FB6C0              <1>     movzx eax, al   ;Zero extend
   330 00006110 89C1                <1>     mov ecx, eax    ;Save al in ecx
   331 00006112 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   332 00006117 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   333 0000611D C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   334                              <1> .cbth0:
   335 00006120 050A000000          <1>     add eax, 10
   336 00006125 E2F9                <1>     loop .cbth0
   337 00006127 59                  <1>     pop rcx
   338 00006128 C3                  <1>     ret
   339                              <1> 
   340                              <1> .clkHexToBCD:
   341                              <1> ;Converts a Hex byte into two BCD digits
   342                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   343 00006129 51                  <1>     push rcx
   344 0000612A 0FB6C0              <1>     movzx eax, al   ;Zero extend
   345 0000612D 31C9                <1>     xor ecx, ecx
   346                              <1> .chtb0:
   347 0000612F 3D0A000000          <1>     cmp eax, 10
   348 00006134 7209                <1>     jb .chtb1
   349 00006136 2D0A000000          <1>     sub eax, 10
   350 0000613B FFC1                <1>     inc ecx
   351 0000613D EBF0                <1>     jmp short .chtb0
   352                              <1> .chtb1:
   353 0000613F C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   354 00006142 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   355 00006144 59                  <1>     pop rcx
   356 00006145 C3                  <1>     ret
   357 00006146 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   358                              <1> 
   359                              <1> ;COM Driver headers and main interrupt strat
   360                              <1> com1Intr:
   361 00006148 C6057C01000000      <1>     mov byte [comIntr.comDevice], 0
   362 0000614F EB19                <1>     jmp short comIntr
   363                              <1> com2Intr:
   364 00006151 C6057301000001      <1>     mov byte [comIntr.comDevice], 1
   365 00006158 EB10                <1>     jmp short comIntr
   366                              <1> com3Intr:
   367 0000615A C6056A01000002      <1>     mov byte [comIntr.comDevice], 2
   368 00006161 EB07                <1>     jmp short comIntr
   369                              <1> com4Intr:
   370 00006163 C6056101000003      <1>     mov byte [comIntr.comDevice], 3
   371                              <1> comIntr:
   372 0000616A 50                  <1>     push rax
   373 0000616B 53                  <1>     push rbx
   374 0000616C 51                  <1>     push rcx
   375 0000616D 52                  <1>     push rdx
   376 0000616E 56                  <1>     push rsi
   377 0000616F 57                  <1>     push rdi
   378 00006170 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   379 00006177 B003                <1>     mov al, 03h ;Unknown Command
   380 00006179 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   381 0000617D 7758                <1>     ja .comWriteErrorCode ;If yes, error!
   382                              <1> 
   383 0000617F 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   384 00006182 3C04                <1>     cmp al, 4   ;Read Character(s)
   385 00006184 7464                <1>     jz .comRead
   386 00006186 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   387 00006188 0F849D000000        <1>     jz .comNondestructiveRead   
   388 0000618E 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   389 00006190 0F8486000000        <1>     jz .comReadInputStatus
   390 00006196 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   391 00006198 0F849C000000        <1>     jz .comFlushInputBuffers
   392 0000619E 3C08                <1>     cmp al, 8
   393 000061A0 0F84BA000000        <1>     jz .comWrite
   394 000061A6 3C09                <1>     cmp al, 9
   395 000061A8 0F84B2000000        <1>     jz .comWrite
   396 000061AE 3C0A                <1>     cmp al, 0Ah
   397 000061B0 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   398 000061B6 EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   399                              <1> .comErrorNoCount:
   400 000061B8 B002                <1>     mov al, 02h ;Unknown device
   401 000061BA EB1B                <1>     jmp short .comWriteErrorCode
   402                              <1> .comReadError:
   403 000061BC BA0B000000          <1>     mov edx, 0Bh
   404 000061C1 EB05                <1>     jmp short .comError
   405                              <1> .comWriteError:
   406 000061C3 BA0A000000          <1>     mov edx, 0Ah
   407                              <1> .comError:
   408 000061C8 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   409 000061CB B902000000          <1>     mov ecx, 02h    ;Unknown device
   410 000061D0 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   411 000061D2 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   412 000061D5 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   413                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   414 000061D7 B480                <1>     mov ah, 80h ;Set error bit
   415 000061D9 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   416                              <1> .comExit:
   417 000061DD 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   418 000061E3 5F                  <1>     pop rdi
   419 000061E4 5E                  <1>     pop rsi
   420 000061E5 5A                  <1>     pop rdx
   421 000061E6 59                  <1>     pop rcx
   422 000061E7 5B                  <1>     pop rbx
   423 000061E8 58                  <1>     pop rax
   424 000061E9 C3                  <1>     ret
   425                              <1> 
   426                              <1> .comRead:
   427 000061EA B005                <1>     mov al, 05h ;Bad request structure length?
   428 000061EC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   429 000061EF 75E6                <1>     jne .comWriteErrorCode
   430 000061F1 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   431 000061F5 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   432                              <1> .cr1:
   433 000061F7 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   434 000061FA 741B                <1>     je .cre2
   435                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   436 000061FC B800020000          <1>     mov eax, 0200h    ;Recieve 
   437 00006201 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   438 00006208 F8                  <1>     clc
   439 00006209 CD34                <1>     int 34h ;Recieve Char
   440 0000620B 72BB                <1>     jc .comError
   441 0000620D 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   442 00006210 74EA                <1>     je .cr11
   443 00006212 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   444 00006213 FFC1                <1>     inc ecx
   445 00006215 EBE0                <1>     jmp short .cr1
   446                              <1> .cre2:
   447 00006217 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   448 0000621A EBC1                <1>     jmp short .comExit
   449                              <1> 
   450                              <1> .comReadInputStatus:
   451 0000621C B005                <1>     mov al, 05h ;Bad request structure length?
   452 0000621E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   453 00006221 75B4                <1>     jne .comWriteErrorCode
   454 00006223 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   455 00006229 EBB2                <1>     jmp short .comExit
   456                              <1> 
   457                              <1> .comNondestructiveRead:
   458                              <1> ;The buffer is always empty for now (no keystroke available)
   459 0000622B B005                <1>     mov al, 05h ;Bad request structure length?
   460 0000622D 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   461 00006230 75A5                <1>     jne .comWriteErrorCode
   462 00006232 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   463 00006238 EBA3                <1>     jmp short .comExit
   464                              <1> 
   465                              <1> .comFlushInputBuffers:
   466 0000623A B005                <1>     mov al, 05h ;Bad request structure length?
   467 0000623C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   468 0000623F 7596                <1>     jne .comWriteErrorCode
   469                              <1> .cfib0:
   470 00006241 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   471 00006248 B800020000          <1>     mov eax, 0200h    ;Recieve
   472 0000624D F8                  <1>     clc
   473 0000624E CD34                <1>     int 34h
   474 00006250 0F8262FFFFFF        <1>     jc .comErrorNoCount
   475 00006256 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   476 00006259 75E6                <1>     jne .cfib0
   477 0000625B E97DFFFFFF          <1>     jmp .comExit
   478                              <1> 
   479                              <1> .comWrite:
   480 00006260 B005                <1>     mov al, 05h ;Bad request structure length?
   481 00006262 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   482 00006265 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   483                              <1> 
   484 0000626B 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   485 0000626F 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   486                              <1> .cw1: 
   487 00006271 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   488 00006274 7417                <1>     je .cw2
   489 00006276 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   490 00006277 B401                <1>     mov ah, 01h ;Move function number into ah
   491 00006279 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   492 00006280 F8                  <1>     clc
   493 00006281 CD34                <1>     int 34h ;Transmit char
   494 00006283 0F823FFFFFFF        <1>     jc .comError
   495 00006289 FFC1                <1>     inc ecx
   496 0000628B EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   497                              <1> .cw2:
   498 0000628D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   499 00006290 E948FFFFFF          <1>     jmp .comExit
   500                              <1> 
   501                              <1> .comOutputStatus:
   502                              <1> ;Read MODEM status
   503 00006295 B005                <1>     mov al, 05h ;Bad request structure length?
   504 00006297 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   505 0000629A 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   506                              <1> 
   507 000062A0 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   508 000062A7 B403                <1>     mov ah, 03h     ;Get status
   509 000062A9 F8                  <1>     clc
   510 000062AA CD34                <1>     int 34h
   511 000062AC 0F8206FFFFFF        <1>     jc .comErrorNoCount
   512 000062B2 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   513 000062B7 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   514 000062BA F7D0                <1>     not eax      ;Bitwise inversion
   515 000062BC 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   516 000062C1 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   517 000062C6 E912FFFFFF          <1>     jmp .comExit
   518 000062CB 00                  <1> .comDevice   db 0
    44                                  %include "./Source/Drivers/diskDrv.asm"
    45                              <1> msdDriver:
    46 000062CC 50                  <1>     push rax
    47 000062CD 53                  <1>     push rbx
    48 000062CE 51                  <1>     push rcx
    49 000062CF 52                  <1>     push rdx
    50 000062D0 56                  <1>     push rsi
    51 000062D1 57                  <1>     push rdi
    52 000062D2 55                  <1>     push rbp
    53 000062D3 4150                <1>     push r8
    54 000062D5 488B1DA0FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    55 000062DC 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    56 000062E0 B003                <1>     mov al, drvBadCmd
    57 000062E2 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    58 000062E8 B001                <1>     mov al, drvBadUnit 
    59 000062EA 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    60 000062EE 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    61 000062F4 488D353A030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    62 000062FB 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    63 000062FF C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    64 00006302 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    65 00006306 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    66 0000630A D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    67 0000630C 488D0D9A000000      <1>     lea rcx, .msdTable
    68 00006313 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    69 00006317 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    70 00006319 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    71 0000631B 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    72 0000631E FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    73                              <1> .msdDriverExit:
    74 00006320 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    75 00006326 4158                <1>     pop r8
    76 00006328 5D                  <1>     pop rbp
    77 00006329 5F                  <1>     pop rdi
    78 0000632A 5E                  <1>     pop rsi
    79 0000632B 5A                  <1>     pop rdx
    80 0000632C 59                  <1>     pop rcx
    81 0000632D 5B                  <1>     pop rbx
    82 0000632E 58                  <1>     pop rax
    83 0000632F C3                  <1>     ret
    84                              <1> 
    85                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    86 00006330 4889FB              <1>     mov rbx, rdi
    87 00006333 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    88 00006336 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    89 00006338 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    90                              <1> ;Now fall through to general error
    91                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    92 0000633B B401                <1>     mov ah, 01h
    93 0000633D CD33                <1>     int 33h ;Read status of last operation
    94 0000633F 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    95 00006342 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    96 00006344 7460                <1>     je .msdWriteErrorCode 
    97 00006346 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    98 00006348 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    99 0000634B 7459                <1>     je .msdWriteErrorCode 
   100 0000634D 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   101 00006350 7454                <1>     je .msdWriteErrorCode
   102                              <1> ;Device Not Ready
   103 00006352 B002                <1>     mov al, 02h  ;Device not ready code
   104 00006354 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   105 00006357 744D                <1>     je .msdWriteErrorCode
   106 00006359 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   107 0000635D 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   108                              <1> ;Write Protected
   109 00006361 30C0                <1>     xor al, al
   110 00006363 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   111 00006368 743C                <1>     je .msdWriteErrorCode
   112                              <1> ;CRC Error
   113 0000636A B004                <1>     mov al, 04h     ;CRC error code
   114 0000636C 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   115 00006371 7433                <1>     je .msdWriteErrorCode
   116 00006373 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   117 00006378 742C                <1>     je .msdWriteErrorCode
   118 0000637A 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   119 0000637F 7425                <1>     je .msdWriteErrorCode
   120                              <1> ;Seek Error
   121 00006381 B006                <1>     mov al, 06h     ;Seek error code
   122 00006383 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   123 00006386 741E                <1>     je .msdWriteErrorCode
   124                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   125                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   126 00006388 B007                <1>     mov al, 07h
   127 0000638A 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   128 0000638D 7417                <1>     je .msdWriteErrorCode
   129                              <1> ;Sector Not Found
   130 0000638F B008                <1>     mov al, 08h     ;Sector not found code
   131 00006391 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   132 00006394 7410                <1>     je .msdWriteErrorCode
   133                              <1> ;Write faults
   134 00006396 B00A                <1>     mov al, 0Ah     ;Write fault
   135 00006398 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   136 0000639B 7409                <1>     je .msdWriteErrorCode
   137                              <1> ;Read faults
   138 0000639D B00B                <1>     mov al, 0Bh     ;Read fault
   139 0000639F 80F911              <1>     cmp cl, 11h     ;Read error
   140 000063A2 7402                <1>     je .msdWriteErrorCode
   141                              <1> ;General Errors
   142 000063A4 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   143                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   144 000063A6 B480                <1>     mov ah, 80h ;Set error bit
   145 000063A8 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   146 000063AC C3                  <1>     ret ;Return to set done bit
   147                              <1> .msdTable:
   148 000063AD 0000                <1>     dw 0                            ;Function 0
   149 000063AF 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   150 000063B1 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   151 000063B3 F100                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   152 000063B5 FD00                <1>     dw .msdRead - .msdTable         ;Function 4
   153 000063B7 0000                <1>     dw 0                            ;Function 5
   154 000063B9 0000                <1>     dw 0                            ;Function 6
   155 000063BB 0000                <1>     dw 0                            ;Function 7
   156 000063BD 3501                <1>     dw .msdWrite - .msdTable        ;Function 8
   157 000063BF 6D01                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   158 000063C1 0000                <1>     dw 0                            ;Function 10
   159 000063C3 0000                <1>     dw 0                            ;Function 11
   160 000063C5 B201                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   161 000063C7 BE01                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   162 000063C9 D901                <1>     dw .msdDevClose - .msdTable     ;Function 14
   163 000063CB F401                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   164 000063CD 0000                <1>     dw 0                            ;Function 16
   165 000063CF 0000                <1>     dw 0                            ;Function 17
   166 000063D1 0000                <1>     dw 0                            ;Function 18
   167 000063D3 1F02                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   168 000063D5 0000                <1>     dw 0                            ;Function 20
   169 000063D7 0000                <1>     dw 0                            ;Function 21
   170 000063D9 0000                <1>     dw 0                            ;Function 22
   171 000063DB 2B02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   172 000063DD 4002                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   173                              <1> 
   174                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   175                              <1> .msdMedChk:          ;Function 1
   176 000063DF B005                <1>     mov al, 05h ;Bad request structure length
   177 000063E1 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   178 000063E4 75C0                <1>     jne .msdWriteErrorCode
   179                              <1> 
   180 000063E6 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   181 000063EB 488D0D39020000      <1>     lea rcx, .msdBIOSmap
   182 000063F2 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   183 000063F5 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   184 000063F8 753F                <1>     jnz .mmcNoChange
   185                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   186 000063FA B416                <1>     mov ah, 16h 
   187 000063FC CD33                <1>     int 33h
   188 000063FE 0F8237FFFFFF        <1>     jc .msdGenDiskError
   189 00006404 80FC80              <1>     cmp ah, 80h
   190 00006407 740E                <1>     je .mmcNoChangeLine
   191 00006409 80FC86              <1>     cmp ah, 86h
   192 0000640C 7409                <1>     je .mmcNoChangeLine
   193 0000640E 84E4                <1>     test ah, ah ;No change?
   194 00006410 7427                <1>     jz .mmcNoChange
   195 00006412 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   196 00006415 750D                <1>     jnz .mmcChange
   197                              <1> ;If nothing, fall through and test manually, should never happen though
   198                              <1> .mmcNoChangeLine:
   199                              <1> ;Now we test Media Descriptor
   200 00006417 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   201 0000641C 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   202 0000641F 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   203 00006422 7410                <1>     je .mmcUnsure
   204                              <1> .mmcChange:
   205 00006424 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   206 00006428 488D05F2010000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   207 0000642F 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   208                              <1>     ;Check here if there were any open handles on the device when it was changed
   209 00006433 C3                  <1>     ret
   210                              <1> .mmcUnsure:
   211 00006434 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   212 00006438 C3                  <1>     ret
   213                              <1> .mmcNoChange:
   214 00006439 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   215 0000643D C3                  <1>     ret
   216                              <1> 
   217                              <1> 
   218                              <1> .msdBuildBPB:        ;Function 2
   219 0000643E B005                <1>     mov al, 05h ;Bad request structure length
   220 00006440 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   221 00006443 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   222                              <1> 
   223 00006449 4889DE              <1>     mov rsi, rbx
   224 0000644C 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   225 00006451 488D0DD3010000      <1>     lea rcx, .msdBIOSmap
   226 00006458 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   227 0000645B 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   228 0000645F 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   229 00006461 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   230 00006464 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   231 00006469 CD33                <1>     int 33h
   232 0000646B 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   233                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   234 00006471 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   235 00006475 7418                <1>     je .mbbpb0
   236 00006477 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   237 0000647B 7412                <1>     je .mbbpb0
   238 0000647D 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   239 00006481 740C                <1>     je .mbbpb0
   240 00006483 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   241 00006487 B007                <1>     mov al, 07h ;Unknown media error code
   242 00006489 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   243                              <1> .mbbpb0:
   244 0000648F 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   245 00006492 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   246 00006495 B90F000000          <1>     mov ecx, bpbEx_size/8
   247 0000649A F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   248 0000649D C3                  <1>     ret
   249                              <1> .msdIOCTLRead:       ;Function 3, returns done
   250 0000649E B005                <1>     mov al, drvBadDrvReq
   251 000064A0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   252 000064A3 0F85FDFEFFFF        <1>     jne .msdWriteErrorCode
   253 000064A9 C3                  <1>     ret
   254                              <1> .msdRead:            ;Function 4
   255                              <1> ;Will read one sector at a time.
   256 000064AA B005                <1>     mov al, 05h ;Bad request structure length
   257 000064AC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   258 000064AF 0F85F1FEFFFF        <1>     jne .msdWriteErrorCode
   259                              <1> 
   260 000064B5 4889DF              <1>     mov rdi, rbx
   261 000064B8 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   262                              <1> .msdr0:
   263 000064BA B682                <1>     mov dh, 82h ;LBA Read Sectors
   264 000064BC E841010000          <1>     call .msdBlkIOCommon
   265 000064C1 0F8269FEFFFF        <1>     jc .msdIOError
   266 000064C7 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   267 000064CF 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   268 000064D7 FFC6                <1>     inc esi
   269 000064D9 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   270 000064DC 75DC                <1>     jne .msdr0
   271 000064DE 4889FB              <1>     mov rbx, rdi
   272 000064E1 C3                  <1>     ret
   273                              <1> .msdWrite:           ;Function 8
   274                              <1> ;Will write one sector at a time.
   275 000064E2 B005                <1>     mov al, 05h ;Bad request structure length
   276 000064E4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   277 000064E7 0F85B9FEFFFF        <1>     jne .msdWriteErrorCode
   278                              <1> 
   279 000064ED 4889DF              <1>     mov rdi, rbx
   280 000064F0 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   281                              <1> .msdw0:
   282 000064F2 B683                <1>     mov dh, 83h ;LBA Write Sectors
   283 000064F4 E809010000          <1>     call .msdBlkIOCommon
   284 000064F9 0F8231FEFFFF        <1>     jc .msdIOError
   285 000064FF 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   286 00006507 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   287 0000650F FFC6                <1>     inc esi
   288 00006511 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   289 00006514 75DC                <1>     jne .msdw0
   290 00006516 4889FB              <1>     mov rbx, rdi
   291 00006519 C3                  <1>     ret
   292                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   293                              <1> ;Will write one sector at a time and then verify it.
   294 0000651A B005                <1>     mov al, 05h ;Bad request structure length
   295 0000651C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   296 0000651F 0F8581FEFFFF        <1>     jne .msdWriteErrorCode
   297                              <1> 
   298 00006525 4889DF              <1>     mov rdi, rbx
   299 00006528 31F6                <1>     xor esi, esi  ;Set counter to zero
   300                              <1> .msdwv0:
   301 0000652A B683                <1>     mov dh, 83h ;LBA Write Sectors
   302 0000652C E8D1000000          <1>     call .msdBlkIOCommon
   303 00006531 0F82F9FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   304 00006537 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   305 00006539 E8C4000000          <1>     call .msdBlkIOCommon
   306 0000653E 0F82ECFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   307 00006544 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   308 0000654C 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   309 00006554 FFC6                <1>     inc esi
   310 00006556 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   311 00006559 75CF                <1>     jne .msdwv0
   312 0000655B 4889FB              <1>     mov rbx, rdi
   313 0000655E C3                  <1>     ret
   314                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   315 0000655F B005                <1>     mov al, drvBadDrvReq
   316 00006561 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   317 00006564 0F853CFEFFFF        <1>     jne .msdWriteErrorCode
   318                              <1> 
   319 0000656A C3                  <1>     ret
   320                              <1> .msdDevOpen:         ;Function 13
   321 0000656B B005                <1>     mov al, drvBadDrvReq
   322 0000656D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   323 00006570 0F8530FEFFFF        <1>     jne .msdWriteErrorCode
   324                              <1> 
   325 00006576 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   326 0000657B 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   327 00006582 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   328 00006585 C3                  <1>     ret
   329                              <1> .msdDevClose:        ;Function 14
   330 00006586 B005                <1>     mov al, drvBadDrvReq
   331 00006588 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   332 0000658B 0F8515FEFFFF        <1>     jne .msdWriteErrorCode
   333                              <1> 
   334 00006591 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   335 00006596 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   336 0000659D FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   337 000065A0 C3                  <1>     ret
   338                              <1> .msdRemovableMedia:  ;Function 15
   339 000065A1 B005                <1>     mov al, drvBadDrvReq
   340 000065A3 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   341 000065A6 0F85FAFDFFFF        <1>     jne .msdWriteErrorCode
   342                              <1> 
   343 000065AC 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   344 000065B1 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   345 000065B8 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   346 000065BB B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   347 000065C0 31D2                <1>     xor edx, edx    ;Busy bit clear
   348 000065C2 A880                <1>     test al, 80h
   349 000065C4 0F44CA              <1>     cmovz ecx, edx
   350 000065C7 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   351 000065CB C3                  <1>     ret
   352                              <1> .msdGenericIOCTL:    ;Function 19
   353 000065CC B005                <1>     mov al, drvBadDrvReq
   354 000065CE 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   355 000065D1 0F85CFFDFFFF        <1>     jne .msdWriteErrorCode
   356                              <1> 
   357 000065D7 C3                  <1>     ret
   358                              <1> .msdGetLogicalDev:   ;Function 23
   359 000065D8 B005                <1>     mov al, drvBadDrvReq
   360 000065DA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   361 000065DD 0F85C3FDFFFF        <1>     jne .msdWriteErrorCode
   362                              <1> 
   363 000065E3 8A0541000000        <1>     mov al, byte [.msdCurDev]
   364 000065E9 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   365 000065EC C3                  <1>     ret
   366                              <1> .msdSetLogicalDev:   ;Function 24
   367 000065ED B005                <1>     mov al, drvBadDrvReq
   368 000065EF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   369 000065F2 0F85AEFDFFFF        <1>     jne .msdWriteErrorCode
   370                              <1> 
   371 000065F8 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   372 000065FB 880529000000        <1>     mov byte [.msdCurDev], al
   373 00006601 C3                  <1>     ret
   374                              <1> 
   375                              <1> .msdBlkIOCommon:  ;Does block IO
   376                              <1> ;Called with rdi containing old rbx value and ah with function number
   377                              <1> ;rbp points to bpb
   378                              <1> ;Error handled by caller
   379                              <1> ;Sector count handled by caller
   380                              <1> ;Called with dh = BIOS function number
   381 00006602 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   382 00006607 8A90[2B660000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   383 0000660D 31C9                <1>     xor ecx, ecx
   384 0000660F 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   385 00006612 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   386 00006616 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   387 0000661A 88F4                <1>     mov ah, dh
   388 0000661C B001                <1>     mov al, 01h ;Do one sector at a time 
   389 0000661E CD33                <1>     int 33h
   390 00006620 C3                  <1>     ret
   391                              <1> 
   392 00006621 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   393                              <1> ;LASTDRIVE default is 5
   394                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   395                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   396 0000662A 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   397                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   398 0000662B 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   399 00006630 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   400 00006635 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   400 0000663E 000000000000000000- <1>
   400 00006647 000000000000000000- <1>
   400 00006650 000000000000000000- <1>
   400 00006659 00000000            <1>
   401                              <1> .msdBPBblks  defaultBPB ;Add two default BPB's. If no remdrv, these are used
   401                              <2> .msdBPBblks :
   181 0000665D E9                  <2>  db 0E9h
   182 0000665E 00                  <2>  db 00h
   183 0000665F 90                  <2>  db 90h
   184 00006660 534350444F537631    <2>  db 'SCPDOSv1'
   185 00006668 0002                <2>  dw 0200h
   186 0000666A 01                  <2>  db 01h
   187 0000666B 0100                <2>  dw 0001h
   188 0000666D 02                  <2>  db 02h
   189 0000666E E000                <2>  dw 00E0h
   190 00006670 400B                <2>  dw 0B40h
   191 00006672 F0                  <2>  db 0F0h
   192 00006673 0900                <2>  dw 0009h
   193 00006675 1200                <2>  dw 0012h
   194 00006677 0200                <2>  dw 0002h
   195 00006679 00000000            <2>  dd 0
   196 0000667D 00000000            <2>  dd 0
   197 00006681 00                  <2>  db 00h
   198 00006682 00                  <2>  db 00h
   199 00006683 29                  <2>  db 29h
   200 00006684 00000000            <2>  dd 0
   201 00006688 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00006691 2020                <2>
   202 00006693 4641543132202020    <2>  db 'FAT12   '
   203 0000669B 000000000000000000- <2>  db 58 dup 0
   203 000066A4 000000000000000000- <2>
   203 000066AD 000000000000000000- <2>
   203 000066B6 000000000000000000- <2>
   203 000066BF 000000000000000000- <2>
   203 000066C8 000000000000000000- <2>
   203 000066D1 00000000            <2>
   402                              <1>              defaultBPB ;If remdrvs found, these are overridden
   181 000066D5 E9                  <2>  db 0E9h
   182 000066D6 00                  <2>  db 00h
   183 000066D7 90                  <2>  db 90h
   184 000066D8 534350444F537631    <2>  db 'SCPDOSv1'
   185 000066E0 0002                <2>  dw 0200h
   186 000066E2 01                  <2>  db 01h
   187 000066E3 0100                <2>  dw 0001h
   188 000066E5 02                  <2>  db 02h
   189 000066E6 E000                <2>  dw 00E0h
   190 000066E8 400B                <2>  dw 0B40h
   191 000066EA F0                  <2>  db 0F0h
   192 000066EB 0900                <2>  dw 0009h
   193 000066ED 1200                <2>  dw 0012h
   194 000066EF 0200                <2>  dw 0002h
   195 000066F1 00000000            <2>  dd 0
   196 000066F5 00000000            <2>  dd 0
   197 000066F9 00                  <2>  db 00h
   198 000066FA 00                  <2>  db 00h
   199 000066FB 29                  <2>  db 29h
   200 000066FC 00000000            <2>  dd 0
   201 00006700 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00006709 2020                <2>
   202 0000670B 4641543132202020    <2>  db 'FAT12   '
   203 00006713 000000000000000000- <2>  db 58 dup 0
   203 0000671C 000000000000000000- <2>
   203 00006725 000000000000000000- <2>
   203 0000672E 000000000000000000- <2>
   203 00006737 000000000000000000- <2>
   203 00006740 000000000000000000- <2>
   203 00006749 00000000            <2>
   403 0000674D 000000000000000000- <1>              db 3*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   403 00006756 000000000000000000- <1>
   403 0000675F 000000000000000000- <1>
   403 00006768 000000000000000000- <1>
   403 00006771 000000000000000000- <1>
   403 0000677A 000000000000000000- <1>
   403 00006783 000000000000000000- <1>
   403 0000678C 000000000000000000- <1>
   403 00006795 000000000000000000- <1>
   403 0000679E 000000000000000000- <1>
   403 000067A7 000000000000000000- <1>
   403 000067B0 000000000000000000- <1>
   403 000067B9 000000000000000000- <1>
   403 000067C2 000000000000000000- <1>
   403 000067CB 000000000000000000- <1>
   403 000067D4 000000000000000000- <1>
   403 000067DD 000000000000000000- <1>
   403 000067E6 000000000000000000- <1>
   403 000067EF 000000000000000000- <1>
   403 000067F8 000000000000000000- <1>
   403 00006801 000000000000000000- <1>
   403 0000680A 000000000000000000- <1>
   403 00006813 000000000000000000- <1>
   403 0000681C 000000000000000000- <1>
   403 00006825 000000000000000000- <1>
   403 0000682E 000000000000000000- <1>
   403 00006837 000000000000000000- <1>
   403 00006840 000000000000000000- <1>
   403 00006849 000000000000000000- <1>
   403 00006852 000000000000000000- <1>
   403 0000685B 000000000000000000- <1>
   403 00006864 000000000000000000- <1>
   403 0000686D 000000000000000000- <1>
   403 00006876 000000000000000000- <1>
   403 0000687F 000000000000000000- <1>
   403 00006888 000000000000000000- <1>
   403 00006891 000000000000000000- <1>
   403 0000689A 000000000000000000- <1>
   403 000068A3 000000000000000000- <1>
   403 000068AC 000000000000000000  <1>
   404                              <1> endptr equ $
    45                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    46                                  ;Paragraph alignment
    47                                  %include "./Source/BSS/dosDynaDataArea.asm"
    48                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    49                              <1> ; the MCB chain!
    50                              <1> ddaStart:
    51 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    52                              <1> 
    53                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
    54                              <1> ;Create DPB chain of first 5 available DPB slots
    55 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
    56 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    57 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    58 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    59 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    60                              <1> 
    61                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    62                              <1> 
    63 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    64                              <1> 
    65 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    66 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    67                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    68                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    69                              <1> dynamicDataAreaLength equ $ - ddaStart
    69          ------------------  <1>  info: assembly required 1+12+2 passes

