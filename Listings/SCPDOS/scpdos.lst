     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvExtFun   equ 40h ;If set, functions 13, 17, 18 supported (must be)
    73                              <1>     devDrvIOCTL2   equ 80h ;If set, IOCTL function 19 supported
    74                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    75                              <1>     devDrvIOCTL    equ 4000h ;If set, Generic IOCTL supported
    76                              <1>     devDrvChar     equ 8000h ;If set, Char device
    77                              <1> ;Bit 0 1=console input
    78                              <1> ;    1 1=console output (character devices)
    79                              <1> ;    2 1=NUL device
    80                              <1> ;    3 1=CLOCK device
    81                              <1> ;    4 1=INT 49 output (CON)
    82                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    83                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    84                              <1> ;   11 1=open/close/removable media supported (3.0+)
    85                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    86                              <1> ;      1=media descriptor in FAT required (block devices)
    87                              <1> ;   14 1=IOCTL supported
    88                              <1> ;   15 0=block device
    89                              <1> ;      1=character device
    90                              <1> 
    91                              <1> ;Driver structures
    92                              <1> 
    93                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    94                              <1> 
    95                              <1>     .hdrlen resb 1  ;Length of the request header
    96                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    97                              <1>     .cmdcde resb 1  ;Command code
    98                              <1>     .status resw 1  ;Status word
    99                              <1>     .devptr resq 1  ;Device queue pointer field
   100                              <1> 
   101                              <1> %endmacro
   102                              <1> 
   103                              <1> struc drvReqHdr
   104                              <1>     drvReqHdrM
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   105                              <1> endstruc
   106                              <1> 
   107                              <1> struc initReqPkt  ;Init Request Packet
   108                              <1> 
   109                              <1>     drvReqHdrM   ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   110 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   111 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   112 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   113 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   118                              <1> 
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   120 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   121 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   122 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   129 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   130 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   131 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   132                              <1> 
   133                              <1> endstruc
   134                              <1> 
   135                              <1> struc ioReqPkt   ;IO Request Packet
   136                              <1> 
   137                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   138 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   139 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   140 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   141 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   142 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   143                              <1> 
   144                              <1> endstruc
   145                              <1> 
   146                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   147                              <1>     
   148                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   149 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc statusReqPkt   ;Status Request Packet
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   156                              <1> 
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc openReqPkt ;Open Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc closeReqPkt ;Close Device Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   180                              <1>      
   181                              <1> endstruc
   182                              <1> 
   183                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   184                              <1> 
   185                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   186 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   187 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   188 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   189 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   190 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   201                              <1>     
   202                              <1>     drvReqHdrM    ;Common Driver Header Macro
    94                              <2> 
    95 00000000 ??                  <2>  .hdrlen resb 1
    96 00000001 ??                  <2>  .unitnm resb 1
    97 00000002 ??                  <2>  .cmdcde resb 1
    98 00000003 ????                <2>  .status resw 1
    99 00000005 ????????????????    <2>  .devptr resq 1
   100                              <2> 
   203                              <1> 
   204                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
     8                                  %include "./Source/Include/dosStruc.inc"
     9                              <1> 
    10                              <1> ;-------------------------------------------------------;
    11                              <1> ; This include file contains miscellaneous internal     ;
    12                              <1> ; SCP/DOS structures.                                   ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> 
    15                              <1> ;------------------------------------------------------------------------;
    16                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    17                              <1> ; its file system structure. This is used to locate files and structures
    18                              <1> ; on the device itself and to translate file requests to cluster chains
    19                              <1> ; to LBAs to pass to the disk driver..
    20                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    21                              <1> ; drivers Initialise routine has been called.
    22                              <1> ;------------------------------------------------------------------------;
    23                              <1> struc dpb        ;Drive Parameter Block
    24                              <1> 
    25 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    26 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    27 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    28 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    29 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    30 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    31 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    32 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    33 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    34 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    35 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    36 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    37                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    38 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    39 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    40 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    41 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    42 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    43 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    44                              <1> 
    45                              <1> endstruc
    46                              <1> 
    47                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    48                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    49                              <1> ;------------------------------------------------------------------------;
    50                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    51                              <1> ; All disk pathing requests go via the CDS for that drive.
    52                              <1> ; The default drive is the last accessed drive, this number is stored
    53                              <1> ; in the DOS data area.
    54                              <1> ; The CDS is stored as an array with the offset into the array being 
    55                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    56                              <1> ;
    57                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> struc cds       ;Current Directory structure
    60 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    61 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    62 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    63 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    64 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    65 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    66                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    67                              <1> ; another, we save the number of chars to skip to that deep level).
    68                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    69                              <1> ; Only affects for SUBST drives, not JOIN
    70                              <1> ; Flags: Bit 15 set = Network drive
    71                              <1> ;        Bit 14 set = Physical drive
    72                              <1> ;        Bit 13 set = JOIN'ed drive
    73                              <1> ;        Bit 12 set = SUBST'ed drive
    74                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    75                              <1> endstruc
    76                              <1> ;CDS equates
    77                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    78                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    79                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    80                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    81                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    82                              <1> ;------------------------------------------------------------------------;
    83                              <1> ; The SFT is a way to allow applications to open file handles to files 
    84                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    85                              <1> ; under the first header, and then a second header will be linked to the 
    86                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    87                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    88                              <1> ; using the FCBS= command. Default FCBS=5.
    89                              <1> ;
    90                              <1> ; A file handle describes the file, and the location within the file that
    91                              <1> ; we are reading. The file handle can be manipulated without the file
    92                              <1> ; being in memory, thus allowing the user to access data without needing 
    93                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    94                              <1> ; accessing devices, by treating them as files with their drivers 
    95                              <1> ; responding and translating the manipulations of the file handle itself.
    96                              <1> ; Neither the driver nor the application should see or use the SFT for
    97                              <1> ; the handle, as it is subject to change (and will change when file 
    98                              <1> ; sharing provisions are included). The DOS will make requests to the 
    99                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   100                              <1> ; track of the information in the SFT entry for that handle. 
   101                              <1> ;
   102                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   103                              <1> ; can point to the same file. It all depends on what the applications 
   104                              <1> ; want to do with the File.
   105                              <1> ;
   106                              <1> ; !!!!IMPORTANT!!!!
   107                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   108                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   109                              <1> ;
   110                              <1> ;Each SFT may look like this:
   111                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   112                              <1> ;            |                |
   113                              <1> ;       wNumFiles*sft    wNumFiles*sft
   114                              <1> ;
   115                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   116                              <1> ; System FCBs.
   117                              <1> ;
   118                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   119                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   120                              <1> ;
   121                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   122                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   123                              <1> ;------------------------------------------------------------------------;
   124                              <1> struc sfth   ;System file table header
   125                              <1> ; This is the SFT header.
   126                              <1> ; This structure comes before the start of the first file in the array/table.
   127 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   128 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc sft
   132                              <1> ;This is the file struc itself
   133 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   134 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   135 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   136 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   137 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   138 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   139 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   140 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   141 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   142 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   143 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   144 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   145 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   146 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   147 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   148 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   149 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   150 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   151 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   152                              <1> ;                           0 means no record
   153                              <1> endstruc
   154                              <1> ;Open Mode equates
   155                              <1> ;Access modes   Bits[2:0]
   156                              <1> ReadAccess      equ 0h
   157                              <1> WriteAccess     equ 1h
   158                              <1> RWAccess        equ 2h
   159                              <1> ;Bit 3 reserved 0
   160                              <1> ;Sharing modes  Bits[6:4]
   161                              <1> CompatShare     equ 0h
   162                              <1> denyRWShare     equ 10h
   163                              <1> denyWriteShare  equ 20h
   164                              <1> denyReadShare   equ 30h
   165                              <1> denyNoneShare   equ 40h
   166                              <1> netFCBShare     equ 70h
   167                              <1> ;Bit 7 reserved 0
   168                              <1> ;Bits 8-12 reserved 0
   169                              <1> 
   170                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   171                              <1> ;Buffering on writes
   172                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   173                              <1> ;FCB opened file?
   174                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   175                              <1> ;Attribute Byte
   176                              <1> readOnlyFile    equ 1h
   177                              <1> hiddenFile      equ 2h
   178                              <1> systemFile      equ 4h
   179                              <1> volumeLabel     equ 8h
   180                              <1> directoryFile   equ 10h ;Directory entry
   181                              <1> archiveFile     equ 20h
   182                              <1> ;Device Info equates
   183                              <1> ;For a block device, bits [5:0] contain the drive number
   184                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   185                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   186                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   187                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   188                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   189                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   190                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   191                              <1> blokFileToFlush equ 40h ;Set if ANY writes are made to this handle!
   192                              <1> devCharDev      equ 80h ;If set, it is a char device!
   193                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   194                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   195                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   196                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   197                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   198                              <1> 
   199                              <1> ;openAddress   equ DOSSEG:367Ah   
   200                              <1> ;createAddress equ DOSSEG:35E3h   
   201                              <1> ;------------------------------------------------------------------------;
   202                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   203                              <1> ; to an internal buffer, and then copying it to the specified location
   204                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   205                              <1> ; another request for the same sector from the same device is made, so 
   206                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   207                              <1> ; size, selected according to the largest detected sector size during 
   208                              <1> ; the initial loadup.
   209                              <1> ;
   210                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   211                              <1> ;
   212                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   213                              <1> ;------------------------------------------------------------------------;
   214                              <1> 
   215                              <1> struc bufferHdr
   216 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   217 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   218 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   219 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   220 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   221 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   222 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   223 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   224 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   225                              <1>     .dataarea:             ;Points to the start of the data area
   226                              <1> endstruc
   227                              <1> ;Buffer Flag equates
   228                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   229                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   230                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   231                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   232                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   233                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   234                              <1> ;Note! A buffer is marked as referenced only when the application 
   235                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   236                              <1> ;------------------------------------------------------------------------;
   237                              <1> ; Memory control block for each memory arena
   238                              <1> ;------------------------------------------------------------------------;
   239                              <1> struc mcb
   240 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   241 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   242 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   243 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   244                              <1>     .program:
   245                              <1> endstruc
   246                              <1> ;MCB equates
   247                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   248                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   249                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   250                              <1> mcbMarkCtn      equ "M"
   251                              <1> mcbMarkEnd      equ "Z"
   252                              <1> 
   253                              <1> memFirstFit     equ 0   ;First free block goes to application
   254                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   255                              <1> memLastFit      equ 2   ;Last free block goes to application
   256                              <1> 
   257                              <1> ;Owner = Para aligned address => Owning application PSP
   258                              <1> ;...To consider...
   259                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   260                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   261                              <1> ;------------------------------------------------------------------------;
   262                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   263                              <1> ; following order, thus allowing for return values to be placed in the 
   264                              <1> ; registers by accessing the caller register stack frame.
   265                              <1> ;------------------------------------------------------------------------;
   266                              <1> struc callerFrame
   267 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   268 00000008 ????????????????    <1>     .rbx    resq 1    
   269 00000010 ????????????????    <1>     .rcx    resq 1
   270 00000018 ????????????????    <1>     .rdx    resq 1
   271 00000020 ????????????????    <1>     .rsi    resq 1
   272 00000028 ????????????????    <1>     .rdi    resq 1
   273 00000030 ????????????????    <1>     .rbp    resq 1
   274 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   275 00000040 ????????????????    <1>     .r9     resq 1
   276                              <1> ;Pushed by Processor when invoked via Interrupt
   277 00000048 ????????????????    <1>     .rip    resq 1
   278 00000050 ????????????????    <1>     .cs     resq 1
   279 00000058 ????????????????    <1>     .flags  resq 1
   280                              <1> endstruc
   281                              <1> 
   282                              <1> struc dpl
   283                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   284                              <1> ; server calls
   285 00000000 ????????????????    <1>     .rax    resq 1
   286 00000008 ????????????????    <1>     .rbx    resq 1
   287 00000010 ????????????????    <1>     .rcx    resq 1
   288 00000018 ????????????????    <1>     .rdx    resq 1
   289 00000020 ????????????????    <1>     .rsi    resq 1
   290 00000028 ????????????????    <1>     .rdi    resq 1
   291 00000030 ????????????????    <1>     .r8     resq 1
   292 00000038 ????????????????    <1>     .r9     resq 1
   293 00000040 ????????????????    <1>     .align  resq 1
   294 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   295 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   296                              <1> endstruc
   297                              <1> 
   298                              <1> struc fcb
   299                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   300 00000000 ??                  <1>     .driveNum   resb 1
   301 00000001 ????????????????    <1>     .filename   resb 8
   302 00000009 ??????              <1>     .fileext    resb 3
   303 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   304                              <1> ;One block consists of 128 records, of size denoted in the below
   305 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   306 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   307 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   308 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   309 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   310 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   311 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   312 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   313 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   314                              <1>     ;If record size > 64, high byte is ignored.
   315                              <1>     ;Used for random read and write operations to find the right record
   316                              <1> endstruc
   317                              <1> 
   318                              <1> struc filename
   319                              <1> ;8.3 File name struct
   320 00000000 ????????????????    <1>     .fName  resb 8
   321 00000008 ??????              <1>     .fExt   resb 3
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   325 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   326 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   327 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   328 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   329 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   330 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   331 00000016 ????                <1>     .fileTime   resw 1  ;File time
   332 00000018 ????                <1>     .fileDate   resw 1  ;File date
   333 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   334 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   335                              <1> endstruc
   336                              <1> 
   337                              <1> struc psp
   338 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   339 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   340 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   341 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   342 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   343 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   344 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   345 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   346 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   347 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   348 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   349 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   350 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   351 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   352                              <1> ;Extra handle arrays are grouped into a linked list
   353                              <1> ;The below are in the same place as in DOS
   354 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   355 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   356                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   357 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   358 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   359                              <1> endstruc
   360                              <1> 
   361                              <1> struc clkStruc
   362 00000000 ????                <1>     .dateWord   resw 1
   363 00000002 ??                  <1>     .minutes    resb 1
   364 00000003 ??                  <1>     .hours      resb 1
   365 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   366 00000005 ??                  <1>     .seconds    resb 1
   367                              <1> endstruc
   368                              <1> 
   369                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   370                              <1> ;for a space of 64Gb
   371                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   372                              <1> 
   373                              <1> ;Critical Error AH bitfield equates
   374                              <1> critRead    equ 0h
   375                              <1> critWrite   equ 1h
   376                              <1> critDOS     equ 0h
   377                              <1> critFAT     equ 2h
   378                              <1> critDir     equ 4h
   379                              <1> critData    equ 6h
   380                              <1> critFailOK  equ 8h
   381                              <1> critRetryOK equ 10h
   382                              <1> critIgnorOK equ 20h
   383                              <1> critCharDev equ 80h
   384                              <1> 
   385                              <1> critIgnore  equ 0
   386                              <1> critRetry   equ 1
   387                              <1> critAbort   equ 2
   388                              <1> critFail    equ 3
   389                              <1> 
   390                              <1> ;MISC ASCII control chars
   391                              <1> NUL equ 00h ;^@         | ASCII Null
   392                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   393                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   394                              <1> BEL equ 07h ;^G         | ASCII Bell
   395                              <1> BSP equ 08h ;^H         | ASCII Backspace
   396                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   397                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   398                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   399                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   400                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   401                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   402                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   403                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   404                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   405                              <1> SPC equ 20h ;Printable  | ASCII Space
   406                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   407                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   408                              <1> 
   409                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   410                              <1> ;Extended Ascii Codes
   411                              <1> eF1     equ 3Bh ;F1 second byte
   412                              <1> eF2     equ 3Ch ;F2 second byte
   413                              <1> eF3     equ 3Dh ;F3 second byte
   414                              <1> eF4     equ 3Eh ;F4 second byte
   415                              <1> eF5     equ 3Fh ;F5 second byte
   416                              <1> eF6     equ 40h ;F6 second byte
   417                              <1> eF7     equ 41h ;F7 second byte
   418                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   419                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   420                              <1> eIns    equ 52h ;Insert second byte
   421                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
     9                                  %include "./Source/Debug/debSym.inc"
    10                              <1> ;This file will include the debuging symbols
    11                              <1> 
    12                              <1> %define true 1
    13                              <1> %define false 0
    14                              <1> 
    15                              <1> ;Switch the DEBUG to false in production!
    16                              <1> %define DEBUG false
    17                              <1> %define DPBINFO false
    18                              <1> %define REGS false
    19                              <1> %define ENDSTATUS true
    20                              <1> %define ALLOCTEST false
    21                              <1> 
    22                              <1> 
    23                              <1> ;Use this space as the debug stack
    24                              <1> %define debStackTop 80000h
    10                                  %include "./Source/Include/dosError.inc"
    11                              <1> ;DOS Error codes
    12                              <1> 
    13                              <1> ;Extended Error Codes
    14                              <1> errInvFnc   equ 1   ;Invalid function number
    15                              <1> errFnf      equ 2   ;File not found
    16                              <1> errPnf      equ 3   ;Path not found
    17                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    18                              <1> errAccDen   equ 5   ;Access denied (to resource)
    19                              <1> errBadHdl   equ 6   ;Invalid handle
    20                              <1> errMCBbad   equ 7   ;MCB's destroyed
    21                              <1> errNoMem    equ 8   ;Insufficient memory
    22                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    23                              <1> errBadEnv   equ 10  ;Invalid environment
    24                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    25                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    26                              <1> errInvDat   equ 13  ;Invalid data
    27                              <1> ;           equ 14  ;Reserved
    28                              <1> errBadDrv   equ 15  ;Invalid drive specified
    29                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    30                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    31                              <1> errNoFil    equ 18  ;No more files
    32                              <1> ;The following are Driver error codes + 19
    33                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    34                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    35                              <1> errUnkUnt   equ 20  ;Unknown Unit
    36                              <1> errDrvNR    equ 21  ;Drive not ready
    37                              <1> errUnkCmd   equ 22  ;Unknown Command
    38                              <1> errCRCerr   equ 23  ;Data (CRC) error
    39                              <1> errBadRLn   equ 24  ;Bad request structure length
    40                              <1> errSekErr   equ 25  ;Seek error
    41                              <1> errUnkMed   equ 26  ;Unknown media type
    42                              <1> errSecNF    equ 27  ;Sector not Found
    43                              <1> errNoPap    equ 28  ;Printer out of paper
    44                              <1> errWF       equ 29  ;Write fault
    45                              <1> errRF       equ 30  ;Read fault
    46                              <1> errGF       equ 31  ;General fault
    47                              <1> ;----------------------------------------------
    48                              <1> ;The following two go inbetween the Disk errors
    49                              <1> errShrVio   equ 32  ;Sharing violations
    50                              <1> errLokVio   equ 33  ;File Lock violation
    51                              <1> ;----------------------------------------------
    52                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    53                              <1> errNoFCB    equ 35  ;FCB unavailable
    54                              <1> errShrFul   equ 36  ;Sharing buffer full
    55                              <1> 
    56                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    57                              <1> 
    58                              <1> errFilExist equ 80  ;File already exists
    59                              <1> errDirExist equ 82  ;Directory already exists
    60                              <1> errFI44     equ 83  ;Fail on INT 44h
    61                              <1> errRedir    equ 84  ;Too many levels of redirection
    62                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    63                              <1> errBadPass  equ 86  ;Bad password
    64                              <1> errBadParam equ 87  ;Bad parameter passed to request
    65                              <1> errNetWrite equ 88  ;Network Write Fault
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Loci
    68                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    69                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    70                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    71                              <1> eLocChr     equ 4   ;Serial/Character Device error
    72                              <1> eLocMem     equ 5   ;Related to RAM
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error Actions
    75                              <1> eActRet     equ 1   ;Retry
    76                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    77                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    78                              <1> eActAbt     equ 4   ;Abort with cleanup
    79                              <1> eActKil     equ 5   ;Abort without cleanup
    80                              <1> eActIgn     equ 6   ;Ignore error
    81                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    82                              <1> ;-----------------------------------------------------------------------------
    83                              <1> ;Error classes
    84                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    85                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    86                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    87                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    88                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    89                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    90                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    91                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    92                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    93                              <1> eClsLocked  equ 10  ;Resource Locked
    94                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    95                              <1> eClsClash   equ 12  ;Resource already exists!
    96                              <1> eClsUnk     equ 13  ;Unknown class
    11                                  Segment .text align=1   ;Init code
    12                                  %define currSegVBase 0
    13                                  %include "./Source/Sysinit/sysInit.asm"
    14                              <1> ; We arrive here with the following values in the registers.
    15                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    16                              <1> ; dx  = Int 33h boot device number
    17                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    18                              <1> 
    19 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    20 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    21 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    22 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    23 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    24 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    25 0000001A F348A5              <1>     rep movsq   ;Copy over
    26 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    27 00000022 50                  <1>     push rax
    28 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    29                              <1> sysInitldr:
    30                              <1> ;Now the tough part, load DOS to 800
    31 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    32                              <1> .read:
    33 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    34 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    34 00000035 00                  <1>
    35 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    36 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    37 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    38 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    39 0000003F CD33                <1>     int 33h
    40 00000041 0F83B9010000        <1>     jnc initBegin   ;No error? Yay, DOS loaded.
    41 00000047 FFCE                <1>     dec esi
    42 00000049 75DE                <1>     jnz .read
    43 0000004B 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    44 00000052 B804130000          <1>     mov eax, 1304h
    45 00000057 CD30                <1>     int 30h
    46 00000059 CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    47 0000005B 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    47 00000064 6F6164204572726F72- <1>
    47 0000006D 0A0D00              <1>
    48 00000070 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    48 00000079 000000000000000000- <1>
    48 00000082 000000000000000000- <1>
    48 0000008B 000000000000000000- <1>
    48 00000094 000000000000000000- <1>
    48 0000009D 000000000000000000- <1>
    48 000000A6 000000000000000000- <1>
    48 000000AF 000000000000000000- <1>
    48 000000B8 000000000000000000- <1>
    48 000000C1 000000000000000000- <1>
    48 000000CA 000000000000000000- <1>
    48 000000D3 000000000000000000- <1>
    48 000000DC 000000000000000000- <1>
    48 000000E5 000000000000000000- <1>
    48 000000EE 000000000000000000- <1>
    48 000000F7 000000000000000000  <1>
    49                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    50                              <1>     ;Store space for a static PSP
    51 00000100 000000000000000000- <1>     db 100h dup 00h
    51 00000109 000000000000000000- <1>
    51 00000112 000000000000000000- <1>
    51 0000011B 000000000000000000- <1>
    51 00000124 000000000000000000- <1>
    51 0000012D 000000000000000000- <1>
    51 00000136 000000000000000000- <1>
    51 0000013F 000000000000000000- <1>
    51 00000148 000000000000000000- <1>
    51 00000151 000000000000000000- <1>
    51 0000015A 000000000000000000- <1>
    51 00000163 000000000000000000- <1>
    51 0000016C 000000000000000000- <1>
    51 00000175 000000000000000000- <1>
    51 0000017E 000000000000000000- <1>
    51 00000187 000000000000000000- <1>
    51 00000190 000000000000000000- <1>
    51 00000199 000000000000000000- <1>
    51 000001A2 000000000000000000- <1>
    51 000001AB 000000000000000000- <1>
    51 000001B4 000000000000000000- <1>
    51 000001BD 000000000000000000- <1>
    51 000001C6 000000000000000000- <1>
    51 000001CF 000000000000000000- <1>
    51 000001D8 000000000000000000- <1>
    51 000001E1 000000000000000000- <1>
    51 000001EA 000000000000000000- <1>
    51 000001F3 000000000000000000- <1>
    51 000001FC 00000000            <1>
    52                              <1> ;END OF FIRST SECTOR!!
    53                              <1> ;DOS SYSINIT BEGINS HERE
    54                              <1> ;First move the alignment of the DOSSEG to 4Kb
    55                              <1> initBegin:
    56 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    57 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    58 00000206 0F32                <1>     rdmsr
    59 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    60 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    61 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    62 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    63 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    64 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    65 00000221 89F8                <1>     mov eax, edi
    66 00000223 4889FA              <1>     mov rdx, rdi
    67 00000226 48C1EA20            <1>     shr rdx, 20h
    68 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    69                              <1> ;------------------------------------------------;
    70                              <1> ;              Connect Debugger                  ;
    71                              <1> ;------------------------------------------------;
    72                              <1> %if DEBUG
    73                              <1> ;Only connect if in debug mode
    74                              <1>     mov eax, 0C501h ;Connect debugger
    75                              <1>     int 35h
    76                              <1> %endif
    77                              <1> ;------------------------------------------------;
    78                              <1> ;           Sanitise the data area               ;
    79                              <1> ;------------------------------------------------;
    80                              <1> ; This call initialises ALL fields in the DOS    ;
    81                              <1> ; data area with 0's. Thus any fields, which     ;
    82                              <1> ; need to be initialised with a 0 value, are     ;
    83                              <1> ; initialised for free.                          ;
    84                              <1> ;------------------------------------------------;
    85 0000022C B9[19D90300]        <1>     mov ecx, dSegLen
    86 00000231 30C0                <1>     xor al, al
    87 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    88 00000234 F3AA                <1>     rep stosb
    89 00000236 5F                  <1>     pop rdi
    90                              <1> ;------------------------------------------------;
    91                              <1> ;          Start saving Basic DOS data           ;
    92                              <1> ;------------------------------------------------;
    93 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    93 0000023C [10C00300]          <1>
    94                              <1> ;Copy DOS to its final resting place
    95 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    95 00000245 [00C00300]          <1>
    96 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    96 0000024E [08C00300]          <1>
    97 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    98 00000255 4881C7[19D90300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    99 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   100 00000263 B900100000          <1>     mov ecx, 1000h
   101 00000268 F348A5              <1>     rep movsq
   102                              <1> 
   103 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   104 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   105 00000271 664489C0            <1>     mov ax, r8w
   106 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   107 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   108 00000285 64C60425[70C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   108 0000028D 05                  <1>
   109                              <1>     ;mov byte fs:[numPhysVol], 0    ;Number of logical drives
   110 0000028E 64C60425[96C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 8 files, at start 5
   110 00000296 05                  <1>
   111 00000297 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
   111 0000029C [97C00300]1400      <1>
   112 000002A2 64C60425[71C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   112 000002AA 01                  <1>
   113                              <1>     ;If no detected Int 33h devices, halt 
   114 000002AB 49C1E810            <1>     shr r8, 2*8
   115 000002AF 4584C0              <1>     test r8b, r8b
   116 000002B2 0F84D90A0000        <1>     jz errorInit
   117                              <1> ;------------------------------------------------;
   118                              <1> ;          Add additional page tables            ;
   119                              <1> ;------------------------------------------------;
   120                              <1> ;This will allow for up to 64Gb of addressible space
   121 000002B8 4889EF              <1>     mov rdi, rbp
   122                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   123 000002BB B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   124 000002C0 57                  <1>     push rdi
   125 000002C1 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   125 000002CA 00                  <1>
   126                              <1> pdtLoop:
   127 000002CB 48AB                <1>     stosq
   128 000002CD 480500002000        <1>     add rax, 200000h
   129 000002D3 FFC9                <1>     dec ecx
   130 000002D5 75F4                <1>     jnz pdtLoop
   131 000002D7 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   132                              <1> ;Now we add every 4kb page to the page directory pointer table
   133                              <1> ;15 4kb pages to consider
   134 000002D8 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   135 000002DB 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   136 000002DE 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   137 000002E5 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   138 000002EC B93C000000          <1>     mov ecx, 60
   139 000002F1 480D03000000        <1>     or rax, 3h      ;present and r/w
   140                              <1> pdptLoop:
   141 000002F7 48AB                <1>     stosq
   142 000002F9 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   143 000002FF FFC9                <1>     dec ecx
   144 00000301 75F4                <1>     jnz pdptLoop
   145 00000303 0F20DF              <1>     mov rdi, cr3
   146 00000306 0F22DF              <1>     mov cr3, rdi
   147                              <1> 
   148                              <1> ;------------------------------------------------;
   149                              <1> ;                   MCB inits                    ;
   150                              <1> ;------------------------------------------------;
   151                              <1> mcbInit:
   152 00000309 B820E80000          <1>     mov eax, 0E820h
   153 0000030E CD35                <1>     int 35h
   154                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   155 00000310 E804010000          <1>     call .mcbFindAddress
   156 00000315 7349                <1>     jnc .mcbi1  ;If found, proceed
   157                              <1>     ;Here, we try use E801h
   158 00000317 B801E80000          <1>     mov eax, 0E801h
   159 0000031C CD35                <1>     int 35h
   160 0000031E 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   161 00000321 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   162 00000324 85C0                <1>     test eax, eax
   163 00000326 741B                <1>     jz .worst
   164 00000328 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   165 0000032B C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   166 0000032E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   167 00000336 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   168 0000033E E909010000          <1>     jmp mcbBuild
   169                              <1> .worst:
   170                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   171 00000343 B800002000          <1>     mov eax, 200000h
   172 00000348 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   172 0000034D [08C00300]          <1>
   173 00000351 29D8                <1>     sub eax, ebx
   174 00000353 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   175 0000035B E9EC000000          <1>     jmp mcbBuild 
   176                              <1> .mcbi1:
   177 00000360 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   178 00000363 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   178 0000036C 00                  <1>
   179 0000036D 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   180 00000371 0F85C2000000        <1>     jne .mcbFail
   181 00000377 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   182                              <1>     ;PCI hole always exists so this value will always be a dword
   183 0000037B 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   184 00000383 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   185 00000386 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   186 00000389 4881FB00000001      <1>     cmp rbx, 1000000h  
   187 00000390 773C                <1>     ja .skipISA
   188                              <1> ;Here we deal with ISA hole issues
   189 00000392 B820E80000          <1>     mov eax, 0E820h
   190 00000397 CD35                <1>     int 35h
   191 00000399 48B800000001000000- <1>     mov rax, 1000000h
   191 000003A2 00                  <1>
   192 000003A3 E871000000          <1>     call .mcbFindAddress
   193 000003A8 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   194 000003AE 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   194 000003B7 00                  <1>
   195 000003B8 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   196 000003BC 0F858A000000        <1>     jne mcbBuild  
   197 000003C2 488B5808            <1>     mov rbx, qword [rax + 8]
   198 000003C6 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   199                              <1> .skipISA:
   200 000003CE B820E80000          <1>     mov eax, 0E820h
   201 000003D3 CD35                <1>     int 35h
   202 000003D5 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   202 000003DE 00                  <1>
   203 000003DF E835000000          <1>     call .mcbFindAddress
   204 000003E4 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   205 000003E6 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   205 000003EF 00                  <1>
   206 000003F0 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   207 000003F4 7556                <1>     jne mcbBuild   
   208 000003F6 488B5808            <1>     mov rbx, qword [rax + 8]
   209                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   210 000003FA 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   210 00000403 00                  <1>
   211 00000404 4839CB              <1>     cmp rbx, rcx
   212 00000407 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   213 0000040B 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   213 00000410 [1BC00300]          <1>
   214 00000414 E933000000          <1>     jmp mcbBuild
   215                              <1> .mcbFindAddress:
   216                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   217                              <1> ;Entry: rax = Address of arena to search for
   218                              <1> ;       rsi = Pointer to memory map
   219                              <1> ;       ecx = Number of 24 byte entries
   220                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   221                              <1> ;       CF=CY : value in rax not found
   222 00000419 56                  <1>     push rsi
   223 0000041A 51                  <1>     push rcx
   224 0000041B 50                  <1>     push rax
   225                              <1> .mfa0:
   226 0000041C 483B06              <1>     cmp rax, qword [rsi]
   227 0000041F 7410                <1>     je .mcbAddressFound
   228 00000421 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   229 00000428 FFC9                <1>     dec ecx
   230 0000042A 79F0                <1>     jns .mfa0
   231                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   232 0000042C 58                  <1>     pop rax
   233 0000042D 59                  <1>     pop rcx
   234 0000042E 5E                  <1>     pop rsi
   235 0000042F F9                  <1>     stc
   236 00000430 C3                  <1>     ret
   237                              <1> .mcbAddressFound:
   238 00000431 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   239 00000434 59                  <1>     pop rcx ;Pop old rax value off
   240 00000435 59                  <1>     pop rcx
   241 00000436 5E                  <1>     pop rsi
   242 00000437 F8                  <1>     clc
   243 00000438 C3                  <1>     ret
   244                              <1> .mcbFail:
   245 00000439 488D2D78090000      <1>     lea rbp, mcbFailmsg
   246 00000440 B804130000          <1>     mov eax, 1304h
   247 00000445 CD30                <1>     int 30h
   248 00000447 E945090000          <1>     jmp errorInit
   249                              <1> 
   250                              <1> mcbBuild:
   251                              <1> ;Actually build the MCB chain here
   252                              <1> ;Start by computing the difference between userbase and DOS area
   253                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   254 0000044C 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   254 00000451 [08C00300]          <1>
   255 00000455 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   256 0000045C 56                  <1>     push rsi    ;Save ptr
   257 0000045D 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   258 00000464 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   259 00000467 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   260 0000046F 5B                  <1>     pop rbx
   261 00000470 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   262 00000473 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   263 0000047B 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   264 00000483 C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   265 00000486 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   266 00000489 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   266 0000048E [2BC00300]          <1>
   267                              <1> 
   268                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   269 00000492 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   269 0000049A 00000000            <1>
   270 0000049E 746E                <1>     jz .skipISA
   271                              <1>     ;Here if an ISA hole exists, place a MCB around it
   272 000004A0 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   273                              <1>     ;Remove one MCB worth of space from alloc
   274 000004A7 31C9                <1>     xor ecx, ecx
   275 000004A9 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   276 000004AC 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   277 000004B2 C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   278 000004B5 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   279 000004B8 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   280 000004BB C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   281 000004BE 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   282 000004C6 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   282 000004CF 00                  <1>
   283 000004D0 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   284 000004D3 480510000000        <1>     add rax, mcb_size
   285 000004D9 4829C1              <1>     sub rcx, rax    ;Take their difference
   286 000004DC C1E904              <1>     shr ecx, 4
   287 000004DF 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   288 000004E2 C1E104              <1>     shl ecx, 4  ;Get bytes again
   289 000004E5 4881C310000000      <1>     add rbx, mcb_size
   290 000004EC 4801CB              <1>     add rbx, rcx
   291                              <1>     ;RBX should now be at 16Mb
   292 000004EF C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   293 000004F2 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   294 000004FA 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   295 00000502 C1E904              <1>     shr ecx, 4  ;Get paragraphs
   296 00000505 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   297 0000050B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   298                              <1> .skipISA:
   299                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   300                              <1>     ;rbx points to a block with "Z" marker
   301 0000050E 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   301 00000516 00000000            <1>
   302 0000051A 7470                <1>     jz .exit
   303                              <1>     ;Add PCI hole MCB
   304 0000051C 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   305                              <1>     ;Remove one MCB worth of space from alloc
   306 00000523 31C9                <1>     xor ecx, ecx
   307 00000525 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   308 00000528 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   309 0000052E C1E104              <1>     shl ecx, 4  ;Get bytes
   310 00000531 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   311 00000534 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   312 00000537 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   313 0000053A 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   314 00000542 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   314 0000054B 00                  <1>
   315 0000054C 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   316 0000054F 480510000000        <1>     add rax, mcb_size
   317 00000555 4829C1              <1>     sub rcx, rax    ;Take their difference
   318 00000558 C1E904              <1>     shr ecx, 4
   319 0000055B 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   320 0000055E C1E104              <1>     shl ecx, 4  ;Get bytes again
   321 00000561 4881C310000000      <1>     add rbx, mcb_size
   322 00000568 4801CB              <1>     add rbx, rcx
   323                              <1>     ;RBX should now be at 4Gb
   324 0000056B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   325 0000056E 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   326 00000576 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   326 0000057B [1BC00300]          <1>
   327 0000057F 48C1E904            <1>     shr rcx, 4
   328 00000583 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   329 00000589 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   330                              <1> .exit:
   331                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   332 0000058C 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   333                              <1> ;------------------------------------------------;
   334                              <1> ;          Kernel inits and adjustments          ;
   335                              <1> ;------------------------------------------------;
   336                              <1> ;Adjust Interrupt Entries Int 40h-49h
   337                              <1> adjInts:
   338 00000593 B340                <1>     mov bl, 40h
   339 00000595 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   340 0000059A CD35                <1>     int 35h
   341 0000059C B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   342 000005A1 488D3D7F080000      <1>     lea rdi, intData
   343 000005A8 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   344                              <1> .ai0:
   345 000005AA B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   346 000005AF 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   347 000005B2 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   348                              <1> .ai1:
   349 000005B5 CD35                <1>     int 35h
   350 000005B7 4881C708000000      <1>     add rdi, 8
   351 000005BE FFC1                <1>     inc ecx
   352 000005C0 81F950000000        <1>     cmp ecx, 50h
   353 000005C6 75E2                <1>     jne .ai0
   354                              <1> 
   355                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   356                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   357                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   358                              <1>     %if DEBUG
   359                              <1> debugPopUpMsg:
   360                              <1>     push rbx
   361                              <1>     push rbp
   362                              <1>     push rcx
   363                              <1>     push rdx
   364                              <1>     mov ecx, 53 ;A large number of lines
   365                              <1>     xor edx, edx    ;COM 1
   366                              <1> .cls:
   367                              <1>     mov eax, 010Ah ;Transmit Line feed
   368                              <1>     int 34h
   369                              <1>     dec ecx
   370                              <1>     jnz .cls
   371                              <1>     lea rbx, qword [debPrintNullString + rbp]
   372                              <1>     lea rbp, .msg
   373                              <1>     call rbx
   374                              <1>     jmp short .exit
   375                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   376                              <1> .exit:
   377                              <1>     pop rdx
   378                              <1>     pop rcx
   379                              <1>     pop rbp
   380                              <1>     pop rbx
   381                              <1>     %endif
   382                              <1> 
   383                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   384 000005C8 488D15C2070000      <1>     lea rdx, errorInit ;Get segment start address
   385 000005CF B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   386 000005D4 CD41                <1>     int 41h
   387 000005D6 488D15B4070000      <1>     lea rdx, errorInit ;Get segment start address
   388 000005DD B844250000          <1>     mov eax, 2544h
   389 000005E2 CD41                <1>     int 41h
   390                              <1> ;------------------------------------------------;
   391                              <1> ;          Driver Adjustments and inits          ;
   392                              <1> ;------------------------------------------------;
   393                              <1> ;Modify the pointers in nData before putting them in the data area
   394 000005E4 48012DBC080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   395 000005EB 48012DBF080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   396 000005F2 48012DC0080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   397                              <1> ;Copy the Null driver to its location in Sysvars
   398 000005F9 B922000000          <1>     mov ecx, drvHdr_size
   399 000005FE 488D35A2080000      <1>     lea rsi, qword [nData]
   400 00000605 488DBD[73C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   401 0000060C F3A4                <1>     rep movsb   
   402                              <1> 
   403                              <1> ;Adjust the addresses in the other driver headers 
   404 0000060E 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   404 00000610 [D54A000000000000]  <1>
   405 00000618 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   406 0000061D 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   407                              <1> adjDrivers:
   408 00000621 E84F070000          <1>     call adjustDrvHdr
   409 00000626 E2F9                <1>     loop adjDrivers
   410                              <1> 
   411                              <1> ;Open NUL
   412                              <1> ;NUL opened
   413                              <1> ;Open CON
   414                              <1> conInit:    ;Rather than keeping this resident... do it here
   415                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   416 00000628 488D95[C04D0000]    <1>     lea rdx, qword [rbp + fastOutput]
   417 0000062F B849250000          <1>     mov eax, 2549h
   418 00000634 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   419 00000636 488D95[C84D0000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   420 0000063D B83B250000          <1>     mov eax, 253Bh
   421 00000642 CD41                <1>     int 41h ;Hook int 3Bh
   422                              <1> .ci0:
   423 00000644 B401                <1>     mov ah, 01      ;Get buffer status
   424 00000646 CD36                <1>     int 36h
   425 00000648 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   426 0000064A 30E4                <1>     xor ah, ah
   427 0000064C CD36                <1>     int 36h ;Read key to flush from buffer
   428 0000064E EBF4                <1>     jmp short .ci0
   429                              <1> .ci1:
   430 00000650 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   431 00000655 CD30                <1>     int 30h
   432 00000657 B402                <1>     mov ah, 02h
   433 00000659 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   434 0000065B 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   435 0000065D CD30                <1>     int 30h
   436 0000065F B707                <1>     mov bh, 07h     ;Grey/Black attribs
   437 00000661 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   438 00000666 CD30                <1>     int 30h
   439                              <1> 
   440                              <1>     ;Save ptr to ConHdr in Sysvars
   441 00000668 488D85[D54A0000]    <1>     lea rax, qword [rbp + conHdr]
   442 0000066F 6448890425-         <1>     mov qword fs:[vConPtr], rax
   442 00000674 [4BC00300]          <1>
   443                              <1> 
   444                              <1>     ;Fix the ext ESC function handler address
   445 00000678 488D85[83220000]    <1>     lea rax, qword [rbp + editKeys]
   446 0000067F 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   446 00000684 [59000000]          <1>
   447                              <1> 
   448                              <1> ;CLOCK init prock
   449                              <1> ;Set the time and date using the RTC (if present)
   450                              <1> clkInit:
   451                              <1>    ;Save ptr to ClkHdr in Sysvars first
   452 00000688 488D85[3B4B0000]    <1>     lea rax, qword [rbp + clkHdr]
   453 0000068F 6448890425-         <1>     mov qword fs:[clockPtr], rax
   453 00000694 [43C00300]          <1>
   454                              <1> ;CH - Hours, in BCD
   455                              <1> ;CL - Minutes, in BCD
   456                              <1> ;DH - Seconds, in BCD
   457 00000698 B402                <1>     mov ah, 02  ;Read RTC Time
   458 0000069A CD3A                <1>     int 3Ah
   459 0000069C 7271                <1>     jc .clkEnd  ;if error, just exit
   460                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   461 0000069E 0FB6C5              <1>     movzx eax, ch   ;Hours
   462 000006A1 E84D000000          <1>     call .bcd2Bin
   463 000006A6 88C5                <1>     mov ch, al
   464 000006A8 0FB6C1              <1>     movzx eax, cl     ;Mins
   465 000006AB E843000000          <1>     call .bcd2Bin
   466 000006B0 88C1                <1>     mov cl, al
   467 000006B2 0FB6C6              <1>     movzx eax, dh   ;Seconds
   468 000006B5 E839000000          <1>     call .bcd2Bin
   469 000006BA 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   470 000006BC 89C2                <1>     mov edx, eax
   471 000006BE B42D                <1>     mov ah, 2Dh ;DOS Set Time
   472 000006C0 CD41                <1>     int 41h
   473                              <1> ;Now get the date from RTC
   474                              <1> ;CL - Year, in BCD
   475                              <1> ;DH - Month, in BCD
   476                              <1> ;DL - Day, in BCD
   477 000006C2 B404                <1>     mov ah, 04  ;Read RTC Date
   478 000006C4 CD3A                <1>     int 3Ah
   479 000006C6 7247                <1>     jc .clkEnd
   480                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   481 000006C8 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   482 000006CB E823000000          <1>     call .bcd2Bin
   483 000006D0 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   484 000006D3 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   485 000006D9 0FB6C6              <1>     movzx eax, dh   ;Get Months
   486 000006DC E812000000          <1>     call .bcd2Bin
   487 000006E1 88C6                <1>     mov dh, al  
   488 000006E3 0FB6C2              <1>     movzx eax, dl   ;Get day
   489 000006E6 E808000000          <1>     call .bcd2Bin
   490 000006EB 88C2                <1>     mov dl, al
   491 000006ED B42B                <1>     mov ah, 2Bh ;DOS Set Date
   492 000006EF CD41                <1>     int 41h
   493 000006F1 EB1C                <1>     jmp short .clkEnd
   494                              <1> .bcd2Bin:
   495                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   496 000006F3 51                  <1>     push rcx
   497 000006F4 89C1                <1>     mov ecx, eax
   498 000006F6 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   499 000006FB 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   500 00000701 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   501 00000704 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   502                              <1> .b2blp:
   503 00000707 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   504 00000709 FFC9                <1>     dec ecx
   505 0000070B 75FA                <1>     jnz .b2blp
   506                              <1> .b2bexit:
   507 0000070D 59                  <1>     pop rcx
   508 0000070E C3                  <1>     ret
   509                              <1> .clkEnd:
   510                              <1> ;------------------------------------------------;
   511                              <1> ;         Link DOS to temporary Buffer           ;
   512                              <1> ;------------------------------------------------;
   513                              <1> tempBufferInit:
   514 0000070F 488DBD[19010000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   515 00000716 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   515 0000071B [55C00300]          <1>
   516 0000071F 31C0                <1>     xor eax, eax
   517 00000721 48FFC8              <1>     dec rax
   518 00000724 48AB                <1>     stosq   ;.nextBufPtr, end of list
   519 00000726 AA                  <1>     stosb   ;.driveNumber, Free entry
   520 00000727 48FFC0              <1>     inc rax
   521 0000072A AA                  <1>     stosb   ;.bufferFlags, No flags
   522                              <1> ;------------------------------------------------;
   523                              <1> ;         Init msd driver, create DPB            ;
   524                              <1> ;------------------------------------------------;
   525                              <1> storageInits:
   526                              <1> ;First save dpb pointer in sysvars
   527 0000072B 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   528 00000732 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   528 00000737 [33C00300]          <1>
   529                              <1> ;Open Mass Storage
   530                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   531                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   532                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   533                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   534                              <1>     ;mov al, byte fs:[numPhysVol]
   535                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   536                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   537                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   538                              <1>     ;Check if it returned OK first!
   539                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   540                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   541                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   542                              <1>     ;mov byte fs:[numPhysVol], al
   543                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   544                              <1> 
   545                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   546 0000073B E889070000          <1>     call diskInit
   547 00000740 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   548 00000743 648A0425[6FC00300]  <1>     mov al, byte fs:[numPhysVol]
   549 0000074B 488D95[5B540000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   550 00000752 30C9                <1>     xor cl, cl  ;Clear counter
   551 00000754 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   551 00000759 [33C00300]          <1>
   552                              <1> .si0:   
   553 0000075D 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   554 00000760 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   555 00000762 CD41                <1>     int 41h
   556                              <1> ;Add other data to DPB
   557 00000764 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   558 00000767 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   559 0000076A 50                  <1>     push rax
   560 0000076B 488D87[5D4B0000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   561 00000772 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   562 00000776 58                  <1>     pop rax
   563 00000777 FEC1                <1>     inc cl
   564 00000779 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   565 0000077B 7416                <1>     je .si1
   566 0000077D 50                  <1>     push rax
   567 0000077E 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   568 00000782 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   569 00000786 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   570 00000789 58                  <1>     pop rax
   571 0000078A 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   572 00000791 EBCA                <1>     jmp short .si0
   573                              <1> .si1:
   574                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   575 00000793 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   576 0000079B 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   577                              <1> ;------------------------------------------------;
   578                              <1> ;          Find largest sector size              ;
   579                              <1> ;------------------------------------------------;
   580                              <1> sectorSizeSearch:
   581                              <1> ;Done by reading BPB's for each drive
   582 0000079E 488D9D[5B540000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   583                              <1>     
   584                              <1>     ;Go thru each block individually
   585 000007A5 31C0                <1>     xor eax, eax
   586 000007A7 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   587                              <1> .findLargest:
   588 000007AA 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   589 000007AE 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   590 000007B3 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   591 000007BA 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   592 000007BD 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   593 000007C0 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   594 000007C2 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   594 000007C7 [53C00300]          <1>
   595                              <1>     
   596                              <1> ;------------------------------------------------;
   597                              <1> ;                 Temp CDS inits                 ;
   598                              <1> ;------------------------------------------------;
   599                              <1> tempCDS:
   600                              <1> ;Build a temporary CDS for Drive A to use it for booting
   601 000007CB 488DBD[FBC50300]    <1>     lea rdi, qword [rbp + tmpCDS]  ;Use Temp CDS in the SDA
   602 000007D2 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   602 000007D7 [5DC00300]          <1>
   603                              <1>     ;"A:\"+NULL char (in rev order because LITTLE ENDIAN!!)
   604 000007DB C707413A5C00        <1>     mov dword [rdi + cds.sCurrentPath], 005C3A41h  
   605 000007E1 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsValidDrive   ;Set the drive to be valid!
   606 000007E7 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   606 000007EC [33C00300]          <1>
   607 000007F0 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   608 000007F4 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   609                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   610                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   611                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   612                              <1>     ;cds.dStartCluster is 0 since we zero-ed the data area earlier
   613                              <1> ;------------------------------------------------;
   614                              <1> ;     Set up general PSP areas and DOS vars      ;
   615                              <1> ;------------------------------------------------;
   616                              <1> ;Additional DOS Vars init
   617                              <1>     ;xor eax, eax
   618                              <1>     ;mov byte fs:[currentDrv], al ;Current Drive = Drive A
   619                              <1>     ;mov byte fs:[breakFlag], al  ;Break off
   620                              <1>     ;mov byte fs:[verifyFlag], al ;Write only
   621                              <1>     ;mov byte fs:[singleDrv], al  ;Only used on single drive systems
   622                              <1>     ;mov byte fs:[critErrFlag], al   ;Not in critical error
   623                              <1>     ;mov byte fs:[inDOS], al      ;Not in DOS
   624 000007FA 64C60425[6BC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   624 00000802 FF                  <1>
   625                              <1>     ;mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   626                              <1>     ;mov byte fs:[allocStrat], al    ;First Fit
   627 00000803 64C60425[33C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   627 0000080B 2F                  <1>
   628                              <1>     ;mov byte fs:[vConUnread], al   ;vCon has no unread data!
   629                              <1> 
   630                              <1> ;Set network machine name to... nothing!
   631 0000080C 488DBD[38C30300]    <1>     lea rdi, qword [rbp + machineName]
   632 00000813 B910000000          <1>     mov ecx, 10h    ;16 chars long
   633 00000818 B020                <1>     mov al, SPC ;Space char
   634 0000081A F3AA                <1>     rep stosb   ;Fill with space chars
   635                              <1>     ;xor al, al
   636                              <1>     ;mov byte fs:[serverCnt], al ;Set server call count to zero
   637                              <1>     ;mov word fs:[machineNum], ax   ;Clear machine number
   638                              <1> 
   639                              <1> ;Patch Data Table init
   640 0000081C 488DBD[48C30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   641 00000823 488D85[98430000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   642 0000082A 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   643 0000082C 488D85[A2430000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   644 00000833 48AB                <1>     stosq
   645 00000835 488D85[AC430000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   646 0000083C 48AB                <1>     stosq
   647 0000083E 488D85[B6430000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   648 00000845 48AB                <1>     stosq
   649                              <1> 
   650                              <1> ;Initial PSP Init
   651 00000847 488D1DB2F8FFFF      <1>     lea rbx, qword [tempPSP]
   652 0000084E 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   652 00000853 [81C30300]          <1>
   653 00000857 53                  <1>     push rbx
   654 00000858 4881C380000000      <1>     add rbx, psp.dta
   655 0000085F 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   655 00000864 [79C30300]          <1>
   656 00000868 5B                  <1>     pop rbx
   657 00000869 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   658 0000086E C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   659 00000875 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   660 0000087D 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   661 00000881 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   662 00000885 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   663 00000889 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   663 00000892 FF                  <1>
   664 00000893 48AB                <1>     stosq   ;8 bytes
   665 00000895 31C0                <1>     xor eax, eax
   666 00000897 50                  <1>     push rax    ;Save 0 on the stack
   667 00000898 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   668 0000089B 48AB                <1>     stosq   ;16 bytes
   669 0000089D AB                  <1>     stosd   ;20 bytes
   670 0000089E 58                  <1>     pop rax ;Get 0 back
   671 0000089F 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   672 000008A7 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   673 000008AB C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   674 000008AF 4889DA              <1>     mov rdx, rbx
   675 000008B2 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   676 000008B7 CD41                <1>     int 41h
   677 000008B9 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   678 000008BD B843350000          <1>     mov eax, 3543h
   679 000008C2 CD41                <1>     int 41h
   680 000008C4 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   681 000008C8 B844350000          <1>     mov eax, 3544h
   682 000008CD CD41                <1>     int 41h
   683 000008CF 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   684                              <1> 
   685 000008D3 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   686 000008D8 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   687 000008DC F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   688                              <1> ;------------------------------------------------;
   689                              <1> ;          Default File Handle Creation          ;
   690                              <1> ;                                                ;
   691                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   692                              <1> ;------------------------------------------------;
   693                              <1> defaultFileHandles:
   694                              <1> ;Fill in the default file table entries
   695 000008DE 488D9D[99C00300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   696 000008E5 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   697 000008EC 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   698 000008F2 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   698 000008F7 [3BC00300]          <1>
   699 000008FB 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   699 00000904 20                  <1>
   700                              <1> ;GOTO FIRST FILE 
   701 00000905 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   702                              <1> ;Write AUX
   703 0000090C 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   704 00000911 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   705 00000917 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   706 0000091B C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   707                              <1>     ;No EOF when reading from the device
   708 0000091F 488B85[F74A0000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   709 00000926 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   710                              <1>     ;Ignore disk related fields and Date/Time of open
   711 0000092A 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   712                              <1>     ;11 chars in 8.3 name
   713 0000092E 488D35D2040000      <1>     lea rsi, auxName
   714 00000935 B903000000          <1>     mov ecx, 3
   715 0000093A F3A4                <1>     rep movsb   ;Move the three bytes
   716 0000093C 4889D0              <1>     mov rax, rdx
   717 0000093F 48AB                <1>     stosq   ;Eight spaces left to print
   718 00000941 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   718 00000946 [81C30300]          <1>
   719 0000094A 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   720                              <1> ;GOTO NEXT ENTRY
   721 0000094E 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   722                              <1>     ;Write CON
   723 00000955 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   724 0000095A 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   725 00000960 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   726 00000964 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   727                              <1>     ;No EOF when reading from the device
   728 00000968 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   728 0000096D [4BC00300]          <1>
   729 00000971 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   730                              <1>     ;Ignore disk related fields and Date/Time of open
   731 00000975 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   732                              <1>     ;11 chars in 8.3 name
   733 00000979 488D3583040000      <1>     lea rsi, conName
   734 00000980 B903000000          <1>     mov ecx, 3
   735 00000985 F3A4                <1>     rep movsb   ;Move the three bytes
   736 00000987 4889D0              <1>     mov rax, rdx
   737 0000098A 48AB                <1>     stosq   ;Eight spaces left to print
   738 0000098C 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   738 00000991 [81C30300]          <1>
   739 00000995 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   740                              <1> ;GOTO NEXT ENTRY
   741 00000999 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   742                              <1> ;Write PRN
   743 000009A0 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   744 000009A5 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   745 000009AB C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   746 000009AF C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   747                              <1>     ;Want EOF when reading from to the device
   748 000009B3 488B85[194B0000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   749 000009BA 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   750                              <1>     ;Ignore disk related fields and Date/Time of open
   751 000009BE 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   752                              <1>     ;11 chars in 8.3 name
   753 000009C2 488D3542040000      <1>     lea rsi, prnName
   754 000009C9 B903000000          <1>     mov ecx, 3
   755 000009CE F3A4                <1>     rep movsb   ;Move the three bytes
   756 000009D0 4889D0              <1>     mov rax, rdx
   757 000009D3 48AB                <1>     stosq   ;Eight spaces left to print
   758 000009D5 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   758 000009DA [81C30300]          <1>
   759 000009DE 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   760                              <1> ;Zero word 0 of entry 4 and 5
   761 000009E2 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   762 000009E9 31C0                <1>     xor eax, eax
   763                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   764                              <1>     ; which is ok as these are empty entries, ready to be used)
   765 000009EB 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   766 000009ED 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   767 000009F4 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   768                              <1> ;------------------------------------------------;
   769                              <1> ;               Load CONFIG.SYS                  ;
   770                              <1> ;------------------------------------------------;
   771                              <1> ;------------------------------------------------;
   772                              <1> ;              Process CONFIG.SYS                ;
   773                              <1> ;------------------------------------------------;
   774                              <1> ;------------------------------------------------;
   775                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   776                              <1> ;------------------------------------------------;
   777                              <1> ;------------------------------------------------;
   778                              <1> ;   Setup Final Data Areas With Overrides from   ;
   779                              <1> ;                  CONFIG.SYS                    ;
   780                              <1> ;------------------------------------------------;
   781                              <1> ;------------------------------------------------;
   782                              <1> ;           Load Command interpreter             ;
   783                              <1> ;------------------------------------------------;
   784 000009F6 488D15A5030000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   785 000009FD B409                <1>     mov ah, 09h
   786 000009FF CD41                <1>     int 41h
   787                              <1> ;Resize DOS allocation before loading COMMAND.COM
   788 00000A01 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   788 00000A06 [2BC00300]          <1>
   789 00000A0A 4981C010000000      <1>     add r8, mcb.program
   790 00000A11 BB49110000          <1>     mov ebx, dynamicDataAreaLength
   791 00000A16 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   792 00000A19 FFC3                <1>     inc ebx
   793 00000A1B B44A                <1>     mov ah, 4Ah
   794 00000A1D CD41                <1>     int 41h
   795                              <1>     
   796                              <1>     %if DEBUG && ALLOCTEST
   797                              <1> ;Test Allocation, Growth and Deallocation
   798                              <1>     mov r15, qword fs:[currentPSP]
   799                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   800                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   801                              <1>     mov ah, 48h ;Allocate
   802                              <1>     int 41h
   803                              <1> 
   804                              <1>     mov byte [rax - 10h], 0 ;Trash chain
   805                              <1>     mov r8, rax ;Move the pointer to r8
   806                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   807                              <1>     mov ah, 4Ah
   808                              <1>     int 41h
   809                              <1> 
   810                              <1>     mov ah, 49h ;Free r8
   811                              <1>     int 41h
   812                              <1>     mov qword fs:[currentPSP], r15
   813                              <1>     %endif
   814                              <1> 
   815                              <1>     %if ENDSTATUS
   816                              <1> debugFinal:
   817                              <1>     ;Print system state
   818 00000A1F 55                  <1>     push rbp    ;Only rbp really matters here
   819 00000A20 4989E8              <1>     mov r8, rbp
   820                              <1> 
   821 00000A23 488D2DD0020000      <1>     lea rbp, .msg2
   822 00000A2A 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   823 00000A31 41FFD1              <1>     call r9
   824                              <1> 
   825 00000A34 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   826 00000A3B 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   826 00000A40 [08C00300]          <1>
   827                              <1> 
   828 00000A44 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   829 00000A4B 41FFD1              <1>     call r9
   830                              <1> 
   831 00000A4E 4881C31B000000      <1>     add rbx, 19+8
   832 00000A55 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   832 00000A5A [00C00300]          <1>
   833 00000A5E 41FFD1              <1>     call r9
   834                              <1> 
   835 00000A61 4881C31B000000      <1>     add rbx, 19+8
   836 00000A68 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   836 00000A6D [2BC00300]          <1>
   837 00000A71 41FFD1              <1>     call r9
   838                              <1> 
   839 00000A74 4881C31C000000      <1>     add rbx, 20+8
   840 00000A7B 4D8D88[7C070000]    <1>     lea r9, qword [r8 + overlayDword]
   841 00000A82 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
   842 00000A8A 41FFD1              <1>     call r9
   843                              <1> 
   844 00000A8D 4881C312000000      <1>     add rbx, 10+8
   845 00000A94 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
   846 00000A9C 41FFD1              <1>     call r9
   847                              <1> 
   848 00000A9F 4881C312000000      <1>     add rbx, 10+8
   849 00000AA6 64488B0425-         <1>     mov rax, qword fs:[longMem]
   849 00000AAB [1BC00300]          <1>
   850 00000AAF 4D8D88[BF070000]    <1>     lea r9, qword [r8 + overlayQword]
   851 00000AB6 41FFD1              <1>     call r9
   852                              <1> 
   853 00000AB9 4881C31B000000      <1>     add rbx, 19+8
   854 00000AC0 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   854 00000AC5 [33C00300]          <1>
   855 00000AC9 41FFD1              <1>     call r9
   856                              <1> 
   857 00000ACC 4881C31B000000      <1>     add rbx, 19+8
   858 00000AD3 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   858 00000AD8 [3BC00300]          <1>
   859 00000ADC 41FFD1              <1>     call r9
   860                              <1> 
   861 00000ADF 4881C31B000000      <1>     add rbx, 19+8
   862 00000AE6 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   862 00000AEB [55C00300]          <1>
   863 00000AEF 41FFD1              <1>     call r9
   864                              <1> 
   865 00000AF2 4881C31B000000      <1>     add rbx, 19+8
   866 00000AF9 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   866 00000AFE [5DC00300]          <1>
   867 00000B02 41FFD1              <1>     call r9
   868                              <1> 
   869 00000B05 4D8D88[0A070000]    <1>     lea r9, qword [r8 + overlayByte]
   870                              <1> 
   871 00000B0C 4881C32C000000      <1>     add rbx, 25+19
   872 00000B13 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
   872 00000B19 [6FC00300]          <1>
   873 00000B1D 41FFD1              <1>     call r9
   874                              <1> 
   875 00000B20 4881C31E000000      <1>     add rbx, 30
   876 00000B27 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   876 00000B2D [12C00300]          <1>
   877 00000B31 41FFD1              <1>     call r9
   878                              <1> 
   879 00000B34 4881C31E000000      <1>     add rbx, 30
   880 00000B3B 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   880 00000B41 [11C00300]          <1>
   881 00000B45 41FFD1              <1>     call r9
   882                              <1> 
   883 00000B48 4881C310000000      <1>     add rbx, 16
   884 00000B4F 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   884 00000B55 [10C00300]          <1>
   885 00000B59 0441                <1>     add al, "A"
   886 00000B5B 8803                <1>     mov byte [rbx], al
   887                              <1> 
   888 00000B5D 488D2D10000000      <1>     lea rbp, .msg
   889 00000B64 4D8D88[84040000]    <1>     lea r9, qword [r8 + debPrintNullString]
   890 00000B6B 41FFD1              <1>     call r9
   891 00000B6E 5D                  <1>     pop rbp
   892 00000B6F E99E010000          <1>     jmp l1
   893 00000B74 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   893 00000B7D 206261736520464646- <1>
   893 00000B86 464646464646464646- <1>
   893 00000B8F 46464646680A0D      <1>
   894 00000B96 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   894 00000B9F 464646464646464646- <1>
   894 00000BA8 464646464646680A0D  <1>
   895 00000BB1 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   895 00000BBA 464646464646464646- <1>
   895 00000BC3 46464646464668200A- <1>
   895 00000BCC 0D                  <1>
   896 00000BCD 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   896 00000BD6 464646464646466820  <1>
   897 00000BDF 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   897 00000BE8 464646464646466820  <1>
   898 00000BF1 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   898 00000BFA 464646464646464646- <1>
   898 00000C03 464646464646680A0D  <1>
   899 00000C0C 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   899 00000C15 464646464646464646- <1>
   899 00000C1E 464646464646680A0D  <1>
   900 00000C27 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   900 00000C30 464646464646464646- <1>
   900 00000C39 464646464646680A0D  <1>
   901 00000C42 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   901 00000C4B 464646464646464646- <1>
   901 00000C54 464646464646680A0D  <1>
   902 00000C5D 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   902 00000C66 464646464646464646- <1>
   902 00000C6F 464646464646680A0D  <1>
   903 00000C78 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   903 00000C81 204C6F676963616C20- <1>
   903 00000C8A 447269766573204646- <1>
   903 00000C93 680A0D              <1>
   904 00000C96 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   904 00000C9F 204669786564204472- <1>
   904 00000CA8 697665732020204646- <1>
   904 00000CB1 680A0D              <1>
   905 00000CB4 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   905 00000CBD 2052656D6F7661626C- <1>
   905 00000CC6 652044727673204646- <1>
   905 00000CCF 680A0D              <1>
   906 00000CD2 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   906 00000CDB 65205A3A0A0D        <1>
   907 00000CE1 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   907 00000CEA 4F4D4D414E442E434F- <1>
   907 00000CF3 4D2E2E2E0A0D00      <1>
   908 00000CFA 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   908 00000D03 626F6F742073756D6D- <1>
   908 00000D0C 6172790A0D00        <1>
   909                              <1>     %endif
   910                              <1> l1:
   911 00000D12 B436                <1>     mov ah, 36h
   912 00000D14 B200                <1>     mov dl, 0
   913 00000D16 CD41                <1>     int 41h
   914 00000D18 488D154D030000      <1>     lea rdx, tmpDTA
   915 00000D1F B41A                <1>     mov ah, 1Ah
   916 00000D21 CD41                <1>     int 41h ;Set tempDTA to current DTA
   917 00000D23 B44E                <1>     mov ah, 4Eh
   918 00000D25 488D1522030000      <1>     lea rdx, tmpName
   919 00000D2C 0FB60D1A030000      <1>     movzx ecx, byte [tmpAttr] ;Get the search attribute
   920 00000D33 CD41                <1>     int 41h
   921 00000D35 B44F                <1>     mov ah, 4Fh
   922 00000D37 CD41                <1>     int 41h
   923 00000D39 B460                <1>     mov ah, 60h
   924 00000D3B 488D3513030000      <1>     lea rsi, tmpName2
   925 00000D42 488D3D23040000      <1>     lea rdi, tmpBuf2
   926 00000D49 CD41                <1>     int 41h
   927                              <1> l11:
   928 00000D4B B402                <1>     mov ah, 02h
   929 00000D4D B20A                <1>     mov dl, 0Ah
   930 00000D4F CD41                <1>     int 41h
   931 00000D51 B409                <1>     mov ah, 09h
   932 00000D53 488D1516000000      <1>     lea rdx, .str
   933 00000D5A CD41                <1>     int 41h
   934                              <1>     ;lea rdx, tmpBuffer
   935                              <1>     ;mov ah, 0Ah  ;Buffered input
   936 00000D5C B980000000          <1>     mov ecx, 80h
   937 00000D61 488D1584030000      <1>     lea rdx, tmpBuffer
   938 00000D68 31DB                <1>     xor ebx, ebx
   939 00000D6A B43F                <1>     mov ah, 3fh
   940 00000D6C CD41                <1>     int 41h
   941 00000D6E EBDB                <1>     jmp short l11
   942 00000D70 433A5C3E24          <1> .str: db "C:\>$"
   943                              <1> ;--------------------------------
   944                              <1> ;       PROCS FOR SYSINIT       :
   945                              <1> ;--------------------------------
   946                              <1> adjustDrvHdr:
   947                              <1> ;Input: rsi = Effective address of driver in DOS segment
   948                              <1> ;       rbp = Ptr to the start of the DOS segment
   949                              <1> ;Output: rsi = EA of next header in DOS segment
   950 00000D75 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   951 00000D79 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   952 00000D7D 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
   953 00000D84 740A                <1>     je .exit
   954 00000D86 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   955 00000D89 4881C622000000      <1>     add rsi, drvHdr_size
   956                              <1> .exit:
   957 00000D90 C3                  <1>     ret
   958                              <1> errorInit:
   959                              <1> ;If a critical error occurs during sysinit, fail through here
   960                              <1> ;Int 42h, 43h and 44h point here during sysinit
   961 00000D91 488D2D3A000000      <1>     lea rbp, hltmsg
   962 00000D98 B804130000          <1>     mov eax, 1304h
   963 00000D9D CD30                <1>     int 30h
   964                              <1>     ;cli ;Clear interrupts
   965                              <1>     ;mov al, -1
   966                              <1>     ;mov dx, 0A1h    ;PIC2 data
   967                              <1>     ;out dx, al      ;Mask all lines
   968                              <1>     ;mov dx, 21h     ;PIC1 data
   969                              <1>     ;out dx, al      ;Mask all lines
   970                              <1> .ei0:
   971 00000D9F F4                  <1>     hlt
   972 00000DA0 EBFD                <1>     jmp short .ei0
   973                              <1> ;--------------------------------
   974                              <1> ;       DATA FOR SYSINIT        :
   975                              <1> ;--------------------------------
   976 00000DA2 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   976 00000DAB 5343502F444F532E2E- <1>
   976 00000DB4 2E0A0D24            <1>
   977 00000DB8 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
   977 00000DC1 6C6F636174696F6E20- <1>
   977 00000DCA 4572726F720A0D00    <1>
   978 00000DD2 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   978 00000DDB 7469616C6973696E67- <1>
   978 00000DE4 20534350444F532E53- <1>
   978 00000DED 59532E205379737465- <1>
   978 00000DF6 6D2068616C74696E67- <1>
   978 00000DFF 2E2E2E00            <1>
   979 00000E03 434F4E00            <1> conName db "CON",0
   980 00000E07 41555800            <1> auxName db "AUX",0
   981 00000E0B 50524E00            <1> prnName db "PRN",0
   982                              <1> 
   983 00000E0F 4155544F455845432E- <1> aexec   db "AUTOEXEC.BAT",0 ;ASCIIZ for AUTOEXEC
   983 00000E18 42415400            <1>
   984 00000E1C 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
   984 00000E25 5300                <1>
   985                              <1> 
   986                              <1> intData:
   987 00000E27 [9537000000000000]  <1>     dq terminateProcess ;Int 40h
   988 00000E2F [1042000000000000]  <1>     dq functionDispatch ;Int 41h
   989 00000E37 [910D000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   990 00000E3F [6843000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   991 00000E47 [743B000000000000]  <1>     dq dosDefCritErrHdlr 
   992 00000E4F [443C000000000000]  <1>     dq absDiskRead      ;Int 45h
   993 00000E57 [253C000000000000]  <1>     dq absDiskWrite     ;Int 46h
   994 00000E5F [9C37000000000000]  <1>     dq terminateRes     ;Int 47h
   995 00000E67 [6843000000000000]  <1>     dq defaultIretq     ;Int 48h
   996 00000E6F [6843000000000000]  <1>     dq defaultIretq     ;Int 49h
   997 00000E77 [6843000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   998 00000E7F [6843000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   999 00000E87 [6843000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1000 00000E8F [6843000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1001 00000E97 [6843000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1002 00000E9F [0F48000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1003                              <1> nData:
  1004 00000EA7 [D54A000000000000]  <1>     dq conHdr
  1005 00000EAF 0480                <1>     dw 08004h
  1006 00000EB1 [7D4C000000000000]  <1>     dq nulStrat
  1007 00000EB9 [834C000000000000]  <1>     dq nulIntr
  1008 00000EC1 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1009                              <1> 
  1010                              <1> diskInit:
  1011                              <1>     ;We create a function to deal with BPB parsing etc
  1012                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1013                              <1>     ;   They dont have to be bootable
  1014                              <1>     ;Then go back and look for other partitions partitions. 
  1015                              <1>     ;   Add each other primary or logical ptn (until max)
  1016                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1017                              <1>     ;Use r8 as device counter
  1018 00000EC9 488DBD[83540000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1019 00000ED0 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1019 00000ED8 00                  <1>
  1020 00000ED9 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1021 00000EDF 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1021 00000EE8 00                  <1>
  1022 00000EE9 B280                <1>     mov dl, 80h ;Start with HDD 0
  1023                              <1> .primary:
  1024 00000EEB 64803C25[6FC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1024 00000EF3 03                  <1>
  1025 00000EF4 0F84AB000000        <1>     je .remInit
  1026 00000EFA 31C9                <1>     xor ecx, ecx    ;Sector 0
  1027 00000EFC E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1028 00000F01 0F8289000000        <1>     jc .primaryEpilog
  1029                              <1>     ;Here, check MBR or BPB
  1030 00000F07 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1031 00000F10 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1032                              <1>     ;Now check if BPB or MBR
  1033 00000F12 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1034 00000F14 8A6302              <1>     mov ah, byte [rbx + 2]
  1035 00000F17 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1036 00000F1B 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1037                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1038                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1039 00000F1D 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1040 00000F24 B104                <1>     mov cl, 4
  1041                              <1> .checkPrimary:
  1042 00000F26 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1043 00000F29 3C01                <1>     cmp al, 01
  1044 00000F2B 7421                <1>     je .primaryFound
  1045 00000F2D 3C04                <1>     cmp al, 04
  1046 00000F2F 741D                <1>     je .primaryFound
  1047 00000F31 3C06                <1>     cmp al, 06
  1048 00000F33 7419                <1>     je .primaryFound
  1049 00000F35 3C0B                <1>     cmp al, 0Bh
  1050 00000F37 7415                <1>     je .primaryFound
  1051 00000F39 3C0C                <1>     cmp al, 0Ch
  1052 00000F3B 7411                <1>     je .primaryFound
  1053 00000F3D 3C0E                <1>     cmp al, 0Eh
  1054 00000F3F 740D                <1>     je .primaryFound
  1055 00000F41 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1056 00000F48 FEC9                <1>     dec cl
  1057 00000F4A 7444                <1>     jz .primaryEpilog
  1058 00000F4C EBD8                <1>     jmp short .checkPrimary
  1059                              <1> .primaryFound:
  1060                              <1>     ;Copy the first sector of this partition into memory
  1061 00000F4E 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1062 00000F51 E8E9000000          <1>     call .initReadSector
  1063 00000F56 7238                <1>     jc .primaryEpilog
  1064                              <1>     ;Now verify this is a BPB
  1065 00000F58 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1066 00000F5A 8A6302              <1>     mov ah, byte [rbx + 2]
  1067 00000F5D 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1068 00000F61 752D                <1>     jne .primaryEpilog   ;If not, skip
  1069                              <1>     ;Now copy data to internal tables
  1070 00000F63 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1071 00000F66 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1072 00000F6B 57                  <1>     push rdi
  1073 00000F6C F348A5              <1>     rep movsq   ;Copy the BPB
  1074 00000F6F 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1075                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1076 00000F70 4A8D9C05[51540000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1077                              <1>     ;Add device count to rbx to point to correct entry
  1078 00000F78 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1079 00000F7A 4A8D9CC5[5B540000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1080 00000F82 488933              <1>     mov qword [rbx], rsi
  1081 00000F85 49FFC0              <1>     inc r8  ;Goto next logical drive
  1082 00000F88 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1083                              <1> .primaryEpilog:
  1084 00000F90 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1085 00000F92 88D6                <1>     mov dh, dl
  1086 00000F94 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1087 00000F97 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1088 00000F9F 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1089                              <1> .extended:
  1090                              <1> ;We have gone through all the devices once
  1091                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1092                              <1>     ;je .remInit ;If yes, get removable devices
  1093                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1094                              <1>     ;xor ecx, ecx    ;Get MBR back
  1095                              <1>     ;call .initReadSector
  1096                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1097                              <1> .remInit:
  1098                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1099 00000FA5 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1100 00000FA8 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1101 00000FAA 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1102                              <1>     ;rdi points to the space for the subsequent bpb's
  1103                              <1> .removables:
  1104 00000FAD 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1105 00000FAF E88B000000          <1>     call .initReadSector
  1106 00000FB4 7238                <1>     jc .removableEpilogue   ;Goto next device
  1107                              <1>     ;Now verify this is a BPB
  1108 00000FB6 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1109 00000FB8 8A6302              <1>     mov ah, byte [rbx + 2]
  1110 00000FBB 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1111 00000FBF 752D                <1>     jne .removableEpilogue   ;If not, skip
  1112                              <1>     ;Now copy data to internal tables
  1113 00000FC1 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1114 00000FC4 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1115 00000FC9 57                  <1>     push rdi
  1116 00000FCA F348A5              <1>     rep movsq   ;Copy the BPB
  1117 00000FCD 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1118                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1119 00000FCE 4A8D9C05[51540000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1120                              <1>     ;Add device count to rbx to point to correct entry
  1121 00000FD6 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1122 00000FD8 4A8D9CC5[5B540000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1123 00000FE0 488933              <1>     mov qword [rbx], rsi
  1124 00000FE3 49FFC0              <1>     inc r8  ;Goto next logical drive
  1125 00000FE6 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1126                              <1> .removableEpilogue:
  1127 00000FEE FEC2                <1>     inc dl  ;Goto next BIOS device now
  1128 00000FF0 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1129 00000FF8 7412                <1>     je .end
  1130 00000FFA 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1131 00001001 7403                <1>     je .re0
  1132 00001003 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1133                              <1> .re0:
  1134 00001006 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1135 0000100A 72A1                <1>     jb .removables
  1136                              <1> .end:
  1137 0000100C 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1137 00001014 01                  <1>
  1138 00001015 7401                <1>     je .singleRemDev
  1139 00001017 C3                  <1>     ret
  1140                              <1> .singleRemDev:
  1141                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1142 00001018 488D9D[51540000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1143 0000101F 8A95[51540000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1144 00001025 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1145 00001028 488D9D[5B540000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1146 0000102F 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1147 00001032 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1148 00001036 64FE0425[6FC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1149 0000103E C3                  <1>     ret
  1150                              <1> .initReadSector:
  1151                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1152 0000103F B482                <1>     mov ah, 82h ;Read
  1153 00001041 B001                <1>     mov al, 1   ;One sector
  1154 00001043 488D9D[49010000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1155 0000104A CD33                <1>     int 33h
  1156 0000104C C3                  <1>     ret
  1157 0000104D 16                  <1> tmpAttr     db dirInclusive ;Search for all files
  1158 0000104E 7363702A2E2A00      <1> tmpName     db "scp*.*",0
  1159 00001055 2F746573742F746573- <1> tmpName2    db "/test/test2/../another",0
  1159 0000105E 74322F2E2E2F616E6F- <1>
  1159 00001067 7468657200          <1>
  1160 0000106C 000000000000000000- <1> tmpDTA      db 80h dup 00h
  1160 00001075 000000000000000000- <1>
  1160 0000107E 000000000000000000- <1>
  1160 00001087 000000000000000000- <1>
  1160 00001090 000000000000000000- <1>
  1160 00001099 000000000000000000- <1>
  1160 000010A2 000000000000000000- <1>
  1160 000010AB 000000000000000000- <1>
  1160 000010B4 000000000000000000- <1>
  1160 000010BD 000000000000000000- <1>
  1160 000010C6 000000000000000000- <1>
  1160 000010CF 000000000000000000- <1>
  1160 000010D8 000000000000000000- <1>
  1160 000010E1 000000000000000000- <1>
  1160 000010EA 0000                <1>
  1161 000010EC 500000000000000000- <1> tmpBuffer   db 80, 0, 126 dup 00h 
  1161 000010F5 000000000000000000- <1>
  1161 000010FE 000000000000000000- <1>
  1161 00001107 000000000000000000- <1>
  1161 00001110 000000000000000000- <1>
  1161 00001119 000000000000000000- <1>
  1161 00001122 000000000000000000- <1>
  1161 0000112B 000000000000000000- <1>
  1161 00001134 000000000000000000- <1>
  1161 0000113D 000000000000000000- <1>
  1161 00001146 000000000000000000- <1>
  1161 0000114F 000000000000000000- <1>
  1161 00001158 000000000000000000- <1>
  1161 00001161 000000000000000000- <1>
  1161 0000116A 0000                <1>
  1162 0000116C 000000000000000000- <1> tmpBuf2     db 80h dup 00h
  1162 00001175 000000000000000000- <1>
  1162 0000117E 000000000000000000- <1>
  1162 00001187 000000000000000000- <1>
  1162 00001190 000000000000000000- <1>
  1162 00001199 000000000000000000- <1>
  1162 000011A2 000000000000000000- <1>
  1162 000011AB 000000000000000000- <1>
  1162 000011B4 000000000000000000- <1>
  1162 000011BD 000000000000000000- <1>
  1162 000011C6 000000000000000000- <1>
  1162 000011CF 000000000000000000- <1>
  1162 000011D8 000000000000000000- <1>
  1162 000011E1 000000000000000000- <1>
  1162 000011EA 0000                <1>
    14                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    15                                  %include "./Source/BSS/dosSeg.asm"
    16                              <1> ;This file contains the main DOS data segment
    17                              <1> dosAPT: ;Additional Page tables
    18 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    19                              <1> dosDataArea:
    20 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    21 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    22 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    23 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    24 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    25 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    26 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    27 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    28                              <1> ;Above is the system stats
    29                              <1> ;Below is the DOS vars
    30 0003C023 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    31                              <1>     ;   A value of 0 means no chars buffered.
    32 0003C02B ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    33                              <1> sysVarsPtr:
    34 0003C033 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    35 0003C03B ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    36 0003C043 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    37                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    38 0003C04B ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    39                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    40 0003C053 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    41 0003C055 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    42 0003C05D ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    43 0003C065 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    44 0003C06D ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    45                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    46 0003C06F ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    47 0003C070 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    48 0003C071 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    49 0003C072 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    50 0003C073 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    51                              <1> ;Additional internal variables
    52                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    53 0003C095 ??                  <1>     singleDrv   resb 1    ;Set if last drive accessed was drive B x
    54 0003C096 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    55 0003C097 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    56                              <1>     ;Share hook functions here
    57                              <1> ;Create SFT header and corresponding array of five default sft entries
    58 0003C099 <res Ah>            <1>     firstSftHeader  resb sfth_size
    59 0003C0A3 <res 4Fh>           <1>     firstSft    resb sft_size
    60 0003C0F2 <res 4Fh>           <1>     secondSft   resb sft_size
    61 0003C141 <res 4Fh>           <1>     thirdSft    resb sft_size
    62 0003C190 <res 4Fh>           <1>     fourthSft   resb sft_size
    63 0003C1DF <res 4Fh>           <1>     fifthSft    resb sft_size
    64                              <1> 
    65                              <1> ;Virtual CONsole Buffers
    66 0003C22E ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
    67                              <1>     ;Only incremented when CON device runs vCon
    68                              <1> vConBuf:    ;Proper buffer symbol
    69 0003C22F ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
    70 0003C230 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
    71                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
    72 0003C2B0 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
    73 0003C330 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
    74                              <1> 
    75 0003C331 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
    76 0003C332 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    77 0003C333 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
    78 0003C334 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
    79                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
    80                              <1> 
    81 0003C335 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    82                              <1> ;Server stuff. Default to all zeros (blank)
    83 0003C336 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
    84                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
    85 0003C337 ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5D01h call
    86 0003C338 <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5D01h) (set to SPC)    
    87                              <1> ;Swappable Data Area
    88 0003C348 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    89 0003C368 ??                  <1>                 resb 1  ;Alignment byte
    90                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    91 0003C369 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    92 0003C36A ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    93 0003C36B ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    94 0003C36C ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    95 0003C36D ????                <1>     errorExCde  resw 1  ;Extended Error Code
    96 0003C36F ??                  <1>     errorAction resb 1  ;Suggested action for error  
    97 0003C370 ??                  <1>     errorClass  resb 1  ;Error Class
    98 0003C371 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    99 0003C379 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   100 0003C381 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   101                              <1> 
   102 0003C389 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   103 0003C391 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   104                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   105                              <1>     ;Lower byte: User Specified
   106 0003C393 ??                  <1>     currentDrv  resb 1  ;Default drive x
   107 0003C394 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   108                              <1> ;SDA, needs to be replaced between processes
   109                              <1> sdaMainSwap:
   110 0003C395 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   111 0003C39D ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   112 0003C3A5 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   113 0003C3A7 ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   114 0003C3AF ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   115 0003C3B7 ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   116 0003C3BF ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   117 0003C3C1 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   118 0003C3C9 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   119 0003C3CA ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   120 0003C3CB ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   121                              <1> 
   122 0003C3CC ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   123 0003C3D4 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   124 0003C3DC ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   125 0003C3E4 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   126 0003C3EC ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   127                              <1> ;The below flag tells DOS to print ^C in the termination function
   128 0003C3ED ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   129 0003C3EE ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   130                              <1> ;Time stuff
   131                              <1> ;Read the below two as a word
   132 0003C3EF ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   133 0003C3F0 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   134 0003C3F1 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   135 0003C3F2 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   136 0003C3F4 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   137                              <1> 
   138 0003C3F5 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   139 0003C3F6 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   140 0003C3F7 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   141                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   142                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   143                              <1> ; without forcing to re-build the whole primary request block.
   144                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   145                              <1> ; with secondary char output going through the secondary header
   146                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   147                              <1> ; for output)
   148                              <1> ;ioReqPkt is the largest possible packet
   149 0003C3F8 <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   150 0003C422 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   151 0003C44C <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   152 0003C476 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   153                              <1> ;Swappable Buffers
   154 0003C477 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   155                              <1>     ;We add an additional byte to save ah too
   156 0003C47D ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   157 0003C47F <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   158 0003C4FF <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   159 0003C57F ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   160 0003C587 ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   161 0003C58F ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   162                              <1> ;Misc bookkeeping flags and vars
   163 0003C590 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal searching block
   164 0003C5BB <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   165 0003C5DB <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   166 0003C5E7 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards in fcbName
   167 0003C5F3 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   168 0003C5FB <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need tmp CDS
   169 0003C656 ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   170 0003C657 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   171 0003C658 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   172 0003C659 ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   173 0003C65A ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   174 0003C65B ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   175 0003C65C ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   176                              <1> 
   177 0003C65D ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   178 0003C65E ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   179 0003C65F ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   180 0003C660 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   181 0003C661 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   182 0003C662 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   183 0003C663 ??                  <1>     workingDrv  resb 1  ;Working drive number
   184                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   185                              <1> workingDD:  ;Create a symbol for the working device driver too
   186 0003C664 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   187 0003C66C ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   188                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   189                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   190 0003C674 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   191 0003C67C ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   192 0003C684 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   193 0003C68C ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   194 0003C68E ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   195 0003C690 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   196                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   197                              <1> ; and 32 byte offset into the sector for directory
   198 0003C698 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   199 0003C6A0 ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   200                              <1> ;***************************************************|
   201                              <1> ; Needs to be set up before any file access         |
   202                              <1> ; These vars keep track of file access properties   |
   203                              <1> ;   and must be used only for such purposes.        |
   204                              <1> ;***************************************************|
   205 0003C6A2 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   206 0003C6A6 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   207                              <1> 
   208 0003C6AA ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   209 0003C6AE ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   210 0003C6AF ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   211                              <1> 
   212 0003C6B7 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   213 0003C6B9 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   214                              <1> ;***************************************************|
   215 0003C6BD ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   216 0003C6C1 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   217 0003C6C5 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   218 0003C6C9 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   219 0003C6CD ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   220                              <1> ;Directory stuff
   221 0003C6D1 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   222 0003C6D5 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   223 0003C6D9 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   224 0003C6DB ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   225                              <1> ;Error DPB 
   226 0003C6DF ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   227 0003C6E7 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   228                              <1> ;Stacks and scratch SFT
   229 0003C6E8 <res 528h>          <1>     critStack   resq 165
   230 0003CC10 ????????????????    <1>     critStakTop resq 1
   231                              <1> 
   232 0003CC18 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   233                              <1> 
   234 0003CC67 <res 638h>          <1>     AuxStack    resq 199
   235 0003D29F ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   236 0003D2A7 <res 638h>          <1>     DiskStack   resq 199
   237 0003D8DF ????????????????    <1>     DiskStakTop resq 1
   238                              <1> 
   239 0003D8E7 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   240 0003D8E8 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls!  
   241                              <1>     sdaLen      equ     $ - sda 
   242                              <1>     sdaMSLen    equ     $ - sda
   243                              <1> 
   244                              <1> ;Additional variables NOT in the SDA
   245 0003D8E9 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   246                              <1>     ;for saving the current header when quickly doing a second request
   247                              <1> 
   248 0003D913 ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   249 0003D914 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   250                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   251                              <1> inExtASCII:
   252 0003D916 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   253 0003D917 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   254                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   255                              <1>     ; copy of the date/time record
   256                              <1>     dSegLen     equ     $
    16                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    17                                  %define currSegVBase section.resSeg.vstart
    18                                  %include "./Source/Data/staticData.asm"
    19                              <1> 
    20                              <1> ;-----------------------------------:
    21                              <1> ;       Static Data Variables       :
    22                              <1> ;-----------------------------------:
    23 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    24 00000001 01                  <1> dosMinor    db 01h      ;.01
    25 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    25 0000000B 535953              <1>
    26 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    26 00000017 535953              <1>
    27                              <1> 
    28                              <1> ;-----------------------------------:
    29                              <1> ;        Static Data Tables         :
    30                              <1> ;-----------------------------------:
    31                              <1> ctryTbl:
    32                              <1> ;Country Table (defaulting to UK)
    33 0000001A 0100                <1> .dtfmt:     dw 1            ;Date time format (2 bytes)
    34                              <1>                             ;0 = month day year hh:mm:ss
    35                              <1>                             ;1 = day month year hh:mm:ss
    36                              <1>                             ;2 = year month day hh:mm:ss
    37 0000001C C2A300000000        <1> .curr:      db "£",0,0,0,0  ;ASCIIZ Currency symbol (5 chars)
    38 00000022 2C00                <1> .thouSep:   db ",",0        ;ASCIIZ Thousands separator
    39 00000024 2E00                <1> .dcmlSep:   db ".",0        ;ASCIIZ Decimal separator
    40 00000026 2D00                <1> .dateSep:   db "-",0        ;ASCIIZ Date separator
    41 00000028 3A00                <1> .timeSep:   db ":",0        ;ASCIIZ Time separator
    42 0000002A 00                  <1> .currFmt:   db 0            ;Currency Format
    43                              <1>                 ;0 = Symbol leads, without space
    44                              <1>                 ;1 = Symbol follows, without space
    45                              <1>                 ;2 = Symbol leads, one space
    46                              <1>                 ;3 = Symbol follows, one space
    47                              <1>                 ;4 = Symbol replace decimal separator
    48 0000002B 02                  <1> .digtdpt:   db 2 ;Number of digits after the decimal point
    49 0000002C 00                  <1> .timefmt:   db 0 ;Time format, Bit 0 = 0 => 12 hour clock, = 1 => 24 hour clock
    50 0000002D 0000000000000000    <1> .mapaddr:   dq 0 ;Case map address (0 is nulptr)
    51 00000035 2C00                <1> .dataSep:   db ",",0    ;Data list separator
    52 00000037 000000000000000000- <1> .resv:      db 0,0,0,0,0,0,0,0,0,0  ;Reserve 10 bytes
    52 00000040 00                  <1>
    53                              <1> 
    54                              <1> ;IO Char table
    55                              <1> ;This table has Request header length, command code and error flags
    56                              <1> ; as a packed DWORD entry
    57                              <1> ioRqCmdErrTbl:
    58                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    59                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    60 00000041 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    61 00000045 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    62 00000049 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    63 0000004D 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    64 00000051 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    65 00000055 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    66                              <1> 
    67                              <1> 
    68                              <1> 
    69                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    70                              <1> ; wish to install their own custom logic.
    71 00000059 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    72 00000061 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    73 00000062 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    74                              <1> ;Extended ASCII keys with special meanings
    75 00000063 3B                  <1> extKeyTbl   db eF1
    76 00000064 6C21                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    77 00000066 3C                  <1>             db eF2
    78 00000067 5E21                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    79 00000069 3D                  <1>             db eF3
    80 0000006A 6521                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    81 0000006C 3E                  <1>             db eF4
    82 0000006D 9A21                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    83 0000006F 3F                  <1>             db eF5
    84 00000070 DF21                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    85 00000072 40                  <1>             db eF6
    86 00000073 F521                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    87 00000075 41                  <1>             db eF7
    88 00000076 FC21                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    89 00000078 4B                  <1>             db eCursL
    90 00000079 C320                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    91 0000007B 4D                  <1>             db eCursR
    92 0000007C 6C21                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    93 0000007E 52                  <1>             db eIns
    94 0000007F 0722                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    95 00000081 53                  <1>             db eDel
    96 00000082 0E22                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    97                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    98                              <1> 
    99                              <1> ;When counting the number of days, first compute the number of years since
   100                              <1> ; 1980 and your year. 
   101                              <1> ;Then, using the table below, find the number of leap years between 1980
   102                              <1> ; and (YourYear - 1). 
   103                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   104                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   105                              <1> ;
   106                              <1> ;Use the months table to get the number of days in a normal month as leap 
   107                              <1> ; years are added using the previous comment.
   108                              <1> 
   109                              <1> ;This table is the number of days in the month
   110                              <1> ;The function which updates the days in Feb writes the number to this table
   111                              <1> monthsTbl:  
   112 00000084 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   112 0000008D 1F1E1F              <1>
   113                              <1> 
   114                              <1> ;Error tables
   115                              <1> errXlatTbl:
   116                              <1> ;Each entry is n bytes long, defined as
   117                              <1> ; Byte 0      : DOS function number for which translation will occur
   118                              <1> ; Byte 1      : Length of the table entry - 2
   119                              <1> ; Bytes n - 3 : Acceptable Error codes
   120                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   121                              <1> ;The table is terminated with a single -1 byte
   122                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   123                              <1> ; only on entry to a disk function
   124 00000090 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   125 00000094 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   126 00000099 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   127 0000009F 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   128 000000A3 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   129 000000A9 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   130 000000B0 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   131 000000B3 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   132 000000B7 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   133 000000BB 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   134 000000C0 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   135 000000C4 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   136 000000CA 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   137 000000D1 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   138 000000D5 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   139 000000D9 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   140 000000DC 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   141 000000E0 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   142 000000E4 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   143 000000E9 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   144 000000F1 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   145 000000F3 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   146 000000F8 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   147 000000FB 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   148 00000101 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   149 00000105 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   150 00000108 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   151 0000010E 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   152 00000115 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   153 0000011B 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   154 0000011F 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   155 00000123 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   156 00000126 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   157 0000012B FF                  <1>     db -1   ;End Of Table marker
   158                              <1> 
   159                              <1> 
   160                              <1> extErrTbl:
   161                              <1> ;This table contains the default values for how to respond
   162                              <1> ; to particular errors. Fields with -1 need to be filled in before
   163                              <1> ; setting variables using this table.
   164                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   165                              <1> ; Byte 0: Extended Error Code as a byte
   166                              <1> ; Byte 1: Error Class
   167                              <1> ; Byte 2: Error Suggested Action
   168                              <1> ; Byte 3: Error Locus
   169                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   170                              <1> ;
   171                              <1> ;Error 01: Invalid function number
   172 0000012C 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   173                              <1> ;Error 02: File not found
   174 00000130 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   175                              <1> ;Error 03: Path not found
   176 00000134 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   177                              <1> ;Error 04: Too many open handles, and no handles are left
   178 00000138 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   179                              <1> ;Error 05: Access being denied
   180 0000013C 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   181                              <1> ;Error 06: Invalid File handle being provided
   182 00000140 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   183                              <1> ;Error 07: MCB chain destroyed
   184 00000144 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   185                              <1> ;Error 08: No Memory remaining
   186 00000148 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   187                              <1> ;Error 09: Invalid MCB block Address
   188 0000014C 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   189                              <1> ;Error 0A: Bad Environment block
   190 00000150 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   191                              <1> ;Error 0B: Data provided in a bad format
   192 00000154 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   193                              <1> ;Error 0C: Access Code Invalid
   194 00000158 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   195                              <1> ;Error 0D: Error due to Invalid Data provided
   196 0000015C 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   197                              <1> ;Error 0F: Error due to a bad drive letter being provided
   198 00000160 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   199                              <1> ;Error 10: Error due to attempting to delete the CWD
   200 00000164 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   201                              <1> ;Error 11: Error due to a unknown device being used
   202 00000168 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   203                              <1> ;Error 12: No more file handles available
   204 0000016C 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   205                              <1> ;Error 50: Network request not supported
   206 00000170 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   207                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   208 00000174 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   209                              <1> ;Error 21: File Locking Violation
   210 00000178 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   211                              <1> ;Error 54: Too many levels of redirection error
   212 0000017C 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   213                              <1> ;Error 56: Bad resource password provided
   214 00000180 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   215                              <1> ;Error 52: Directory already exists
   216 00000184 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   217                              <1> ;Error 32: Network request not supported by DOS
   218 00000188 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   219                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   220 0000018C 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   221                              <1> ;Error 57: Bad parameter in request
   222 00000190 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   223                              <1> ;Error 53: Fail was returned from Int 44h
   224 00000194 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   225                              <1> ;Error 24: Sharing Buffer Full
   226 00000198 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   227 0000019C FFFFFFFF            <1>     dd -1   ;End of table signature
   228                              <1> 
   229                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   230 000001A0 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   230 000001A9 090A0B0C0D0E0F      <1>
   231 000001B0 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   231 000001B9 191A1B1C1D1E1F      <1>
   232 000001C0 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   232 000001C9 3D3E3F5B5C5D7C      <1>
   233                              <1> badDirNameCharL equ $ - badDirNameChar
   234                              <1> ;The chars * ? . \ / need to always be handled separately
   235                              <1> 
   236                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   237 000001D0 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   237 000001D9 4545494949          <1>
   238 000001DE 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   238 000001E7 5559999A9B          <1>
   239 000001EC 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   239 000001F5 A5A6A7A8            <1>
   240 000001F9 A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   240 00000202 B2B3B4              <1>
   241 00000205 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   241 0000020E BEBFC0              <1>
   242 00000211 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   242 0000021A CACBCC              <1>
   243 0000021D CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   243 00000226 D6D7D8              <1>
   244 00000229 D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   244 00000232 E2E3E4              <1>
   245 00000235 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   245 0000023E EEEFF0              <1>
   246 00000241 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   246 0000024A FAFBFC              <1>
   247 0000024D FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   248                              <1> 
   249                              <1> extAsciiSig:   ;This table needs to replaces in other Codepages
   250 00000250 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   250 00000259 F0F6F6              <1>
   251 0000025C F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   251 00000265 F6F6F6              <1>
   252 00000268 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   252 00000271 FFF6FF              <1>
   253 00000274 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   253 0000027D FFFEF6              <1>
   254 00000280 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   254 00000289 FFF4F4              <1>
   255 0000028C F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   255 00000295 FFFFFF              <1>
   256 00000298 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   256 000002A1 FFFFFF              <1>
   257 000002A4 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   257 000002AD F6FFFF              <1>
   258 000002B0 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   258 000002B9 FFFFFF              <1>
   259 000002BC FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   259 000002C5 FFFFFF              <1>
   260 000002C8 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
    19                                  %include "./Source/Data/dispTbl.asm"
    20                              <1> ;Kernel Dispatch Function Table
    21                              <1> 
    22                              <1> kDispTbl:
    23 000002D0 E335                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    24 000002D2 F218                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    25 000002D4 FF18                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    26 000002D6 BC19                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    27 000002D8 E519                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    28 000002DA ED19                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    29 000002DC 051A                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    30 000002DE 381A                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    31 000002E0 5D1A                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    32 000002E2 BC1A                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    33 000002E4 6F1D                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    34 000002E6 CB1A                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    35 000002E8 D71A                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    36 000002EA 1142                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    37 000002EC 4342                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    38 000002EE AB22                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    39 000002F0 AB22                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    40 000002F2 AB22                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    41 000002F4 AB22                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    42 000002F6 AB22                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    43 000002F8 AB22                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    44 000002FA AB22                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    45 000002FC AB22                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    46 000002FE AB22                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    47 00000300 CA44                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    48 00000302 5C42                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    49 00000304 AC22                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    50 00000306 6342                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    51 00000308 6542                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    52 0000030A CA44                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    53 0000030C CA44                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    54 0000030E 0143                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    55 00000310 CA44                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    56 00000312 BF22                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    57 00000314 BF22                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    58 00000316 BF22                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    59 00000318 BF22                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    60 0000031A AE42                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    61 0000031C F234                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    62 0000031E BF22                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    63 00000320 BF22                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    64 00000322 BF22                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    65 00000324 E51F                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    66 00000326 0C20                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    67 00000328 1220                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    68 0000032A 3320                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    69 0000032C DE42                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    70 0000032E C022                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    71 00000330 EC42                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    72 00000332 B535                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    73 00000334 0343                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    74 00000336 C641                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    75 00000338 3B43                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    76 0000033A 4C43                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    77 0000033C 5D43                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    78 0000033E 0237                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    79 00000340 2B37                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    80 00000342 3315                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    81 00000344 7215                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    82 00000346 7215                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    83 00000348 D322                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    84 0000034A E422                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    85 0000034C C723                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    86 0000034E 0424                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    87 00000350 3F24                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    88 00000352 4B24                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    89 00000354 2725                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    90 00000356 9125                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    91 00000358 A12F                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    92 0000035A 7B26                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    93 0000035C B926                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    94 0000035E 4116                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    95 00000360 A12F                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    96 00000362 BC31                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    97 00000364 B532                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    98 00000366 0137                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    99 00000368 E535                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   100 0000036A A143                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   101 0000036C D926                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   102 0000036E 4227                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   103 00000370 F441                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   104 00000372 FD41                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   105 00000374 AF43                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   106 00000376 C043                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   107 00000378 9A44                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   108 0000037A DF34                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   109 0000037C 7227                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   110 0000037E 7A16                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   111 00000380 3E34                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   112 00000382 A144                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   113 00000384 8727                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   114 00000386 8727                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   115 00000388 8727                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   116 0000038A CB44                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   117 0000038C 3E45                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   118 0000038E 3E45                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   119 00000390 7A16                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   120 00000392 CA44                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   121 00000394 0642                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   122 00000396 CA44                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   123 00000398 0F42                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   124 0000039A 2B37                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   125 0000039C 2B37                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   126 0000039E 8C27                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   127 000003A0 9127                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   128 000003A2 CA44                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   129                              <1> kDispTblL  equ $ - kDispTbl 
   130                              <1> 
   131                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   132 000003A4 9344                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   133 000003A6 2329                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   134 000003A8 C33B                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   135 000003AA 9644                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   136 000003AC EB3C                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   137                              <1> mDispTblL   equ     $ - mDispTbl
   138                              <1> 
   139                              <1> serverDispTbl:  ;Server Dispatch functions
   140 000003AE 01                  <1>     db 01h  ;Number of entries needs to be 0Bh, but for now, 01h
   141 000003AF 0E44                <1>     dw serverDispatch - serverDispTbl
    20                                  %include "./Source/Debug/debug.asm"
    21                              <1> ;This file contains debugging macros, procs and strings
    22                              <1> ; that we can use to output to COM1 bypassing the operating system.
    23                              <1> ;A serial terminal must be connected for this to work.
    24                              <1> 
    25                              <1> ;Variables and equates
    26                              <1> 
    27 000003B1 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    28                              <1> 
    29 000003B9 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    29 000003C2 39414243444546      <1>
    30                              <1> ;Common procedures
    31                              <1> debMakeDebuggerRespond:
    32 000003C9 488D2D26000000      <1>     lea rbp, .msg
    33 000003D0 E8AF000000          <1>     call debPrintNullString
    34 000003D5 B900001000          <1>     mov ecx, 100000h
    35                              <1> .waiting:
    36 000003DA FFC9                <1>     dec ecx
    37 000003DC 740C                <1>     jz .timeout
    38 000003DE B402                <1>     mov ah, 02h ;Blocking recieve!
    39 000003E0 31D2                <1>     xor edx, edx
    40 000003E2 CD34                <1>     int 34h
    41 000003E4 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    42 000003E7 75F1                <1>     jnz .waiting
    43 000003E9 C3                  <1>     ret
    44                              <1> .timeout:
    45 000003EA 488D2D47000000      <1>     lea rbp, .msg2
    46 000003F1 E98E000000          <1>     jmp debPrintNullString
    47 000003F6 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    47 000003FF 6B6579206174207468- <1>
    47 00000408 65207465726D696E61- <1>
    47 00000411 6C20746F20636F6E74- <1>
    47 0000041A 696E7565206F722077- <1>
    47 00000423 61697420666F722074- <1>
    47 0000042C 696D656F75742E2E2E- <1>
    47 00000435 0A0D00              <1>
    48 00000438 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    48 00000441 436F6E74696E75696E- <1>
    48 0000044A 672E2E2E0A0D00      <1>
    49                              <1> debPrintHexByte:
    50                              <1> ;Print the hex byte in al as a hex value
    51 00000451 52                  <1>     push rdx
    52 00000452 53                  <1>     push rbx
    53 00000453 50                  <1>     push rax
    54                              <1> 
    55 00000454 88C2                <1>     mov dl, al           ;save byte in dl
    56 00000456 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    57 0000045A 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    58 0000045F 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    59 00000463 E80C000000          <1>     call .wrchar
    60 00000468 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    61 0000046B E804000000          <1>     call .wrchar
    62                              <1> 
    63 00000470 58                  <1>     pop rax
    64 00000471 5B                  <1>     pop rbx
    65 00000472 5A                  <1>     pop rdx
    66 00000473 C3                  <1>     ret
    67                              <1> .wrchar:
    68 00000474 6687DB              <1>     xchg bx, bx
    69 00000477 488D1D3BFFFFFF      <1>     lea rbx, debascii
    70 0000047E D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    71 0000047F B401                <1>     mov ah, 01h
    72 00000481 CD34                <1>     int 34h  ;print char
    73 00000483 C3                  <1>     ret
    74                              <1> 
    75                              <1> debPrintNullString:
    76                              <1> ;Print a null terminated string pointed to by rbp
    77 00000484 56                  <1>     push rsi
    78 00000485 50                  <1>     push rax
    79 00000486 52                  <1>     push rdx
    80 00000487 31D2                <1>     xor edx, edx    ;Select COM1
    81 00000489 4889EE              <1>     mov rsi, rbp
    82                              <1> .getChar:
    83 0000048C AC                  <1>     lodsb
    84 0000048D 84C0                <1>     test al, al
    85 0000048F 7406                <1>     jz .exit
    86 00000491 B401                <1>     mov ah, 01h
    87 00000493 CD34                <1>     int 34h
    88 00000495 EBF5                <1>     jmp short .getChar
    89                              <1> .exit:
    90 00000497 5A                  <1>     pop rdx
    91 00000498 58                  <1>     pop rax
    92 00000499 5E                  <1>     pop rsi
    93 0000049A C3                  <1>     ret
    94                              <1> 
    95                              <1> debPrintDOSStack:
    96                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    97                              <1> ;Shows me which function, and parameters passed and returned
    98 0000049B 488D2DA5010000      <1>     lea rbp, .a1
    99 000004A2 E8DDFFFFFF          <1>     call debPrintNullString
   100 000004A7 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   101 000004AE 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   102 000004B5 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   103 000004B8 E802030000          <1>     call overlayQword
   104 000004BD 4881C316000000      <1>     add rbx, 22
   105 000004C4 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   106 000004C8 E8F2020000          <1>     call overlayQword
   107 000004CD 4881C316000000      <1>     add rbx, 22
   108 000004D4 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   109 000004D8 E8E2020000          <1>     call overlayQword
   110 000004DD 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   111 000004E4 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   112 000004E8 E8D2020000          <1>     call overlayQword
   113 000004ED 4881C316000000      <1>     add rbx, 22 
   114 000004F4 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   115 000004F8 E8C2020000          <1>     call overlayQword
   116 000004FD 4881C316000000      <1>     add rbx, 22
   117 00000504 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   118 00000508 E8B2020000          <1>     call overlayQword
   119 0000050D 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   120 00000514 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   121 00000518 E8A2020000          <1>     call overlayQword
   122 0000051D 4881C316000000      <1>     add rbx, 22
   123 00000524 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
   124 0000052B 480560000000        <1>     add rax, callerFrame_size
   125 00000531 E889020000          <1>     call overlayQword
   126 00000536 4881C316000000      <1>     add rbx, 22
   127 0000053D 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   128 00000541 E879020000          <1>     call overlayQword
   129 00000546 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   130 0000054D 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   131 00000551 E869020000          <1>     call overlayQword
   132 00000556 488D2D06000000      <1>     lea rbp, .a0
   133 0000055D E822FFFFFF          <1>     call debPrintNullString
   134 00000562 C3                  <1>     ret
   135                              <1> 
   136 00000563 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   136 0000056C 303030303030303030- <1>
   136 00000575 30306820            <1>
   137 00000579 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   137 00000582 303030303030303030- <1>
   137 0000058B 30306820            <1>
   138 0000058F 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   138 00000598 303030303030303030- <1>
   138 000005A1 30306820            <1>
   139 000005A5 0A0D                <1>     db  0Ah,0Dh
   140 000005A7 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   140 000005B0 303030303030303030- <1>
   140 000005B9 30306820            <1>
   141 000005BD 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   141 000005C6 303030303030303030- <1>
   141 000005CF 30306820            <1>
   142 000005D3 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   142 000005DC 303030303030303030- <1>
   142 000005E5 30306820            <1>
   143 000005E9 0A0D                <1>     db 0Ah, 0Dh
   144 000005EB 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   144 000005F4 303030303030303030- <1>
   144 000005FD 30306820            <1>
   145 00000601 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   145 0000060A 303030303030303030- <1>
   145 00000613 30306820            <1>
   146 00000617 7269703D3030303030- <1>     db "rip=0000000000000000h"
   146 00000620 303030303030303030- <1>
   146 00000629 303068              <1>
   147 0000062C 0A0D                <1>     db 0Ah, 0Dh
   148 0000062E 666C673D3030303030- <1>     db "flg=0000000000000000h "
   148 00000637 303030303030303030- <1>
   148 00000640 30306820            <1>
   149 00000644 0A0D00              <1>     db 0Ah,0Dh,0
   150 00000647 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   150 00000650 206F6E20496E742034- <1>
   150 00000659 316820737461636B0A- <1>
   150 00000662 0D00                <1>
   151                              <1> 
   152                              <1> debDPBptr:
   153                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   154 00000664 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   155 0000066B 4889E8              <1>     mov rax, rbp
   156 0000066E E84C010000          <1>     call overlayQword
   157 00000673 488D2D06000000      <1>     lea rbp, .dpb
   158 0000067A E805FEFFFF          <1>     call debPrintNullString
   159 0000067F C3                  <1>     ret
   160                              <1> .dpb: 
   161 00000680 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   161 00000689 203030303030303030- <1>
   161 00000692 303030303030303068- <1>
   161 0000069B 200A0D00            <1>
   162                              <1> 
   163                              <1> debDPBBPBptr:
   164                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   165                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   166 0000069F 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   167 000006A6 4889E8              <1>     mov rax, rbp
   168 000006A9 E811010000          <1>     call overlayQword
   169 000006AE 4881C321000000      <1>     add rbx, 33
   170 000006B5 4889F0              <1>     mov rax, rsi
   171 000006B8 E802010000          <1>     call overlayQword
   172 000006BD 488D2D06000000      <1>     lea rbp, .dpb
   173 000006C4 E8BBFDFFFF          <1>     call debPrintNullString
   174 000006C9 C3                  <1>     ret
   175                              <1> .dpb: 
   176 000006CA 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   176 000006D3 203030303030303030- <1>
   176 000006DC 303030303030303068- <1>
   176 000006E5 2066726F6D20        <1>
   177 000006EB 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   177 000006F4 203030303030303030- <1>
   177 000006FD 303030303030303068- <1>
   177 00000706 200A0D00            <1>
   178                              <1> overlayByte:
   179                              <1>     ;Called with number in rax
   180                              <1>     ;pointer to START of 16 byte space for number in rbx
   181 0000070A 53                  <1>     push rbx
   182 0000070B 51                  <1>     push rcx
   183 0000070C 52                  <1>     push rdx
   184 0000070D 55                  <1>     push rbp
   185 0000070E 4889DD              <1>     mov rbp, rbx
   186 00000711 4889C2              <1>     mov rdx, rax
   187 00000714 48FFC5              <1>     inc rbp ;Go to end of number
   188                              <1> 
   189 00000717 488D1D9BFCFFFF      <1>     lea rbx, debascii
   190 0000071E 88D0                <1>     mov al, dl  ;Go low nybble first
   191 00000720 240F                <1>     and al, 0Fh
   192 00000722 D7                  <1>     xlatb
   193 00000723 884500              <1>     mov byte [rbp], al
   194 00000726 48FFCD              <1>     dec rbp ;Go down one char pos
   195 00000729 88D0                <1>     mov al, dl
   196 0000072B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   197 0000072D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   198 00000730 D7                  <1>     xlatb
   199 00000731 884500              <1>     mov byte [rbp], al  ;Store char
   200                              <1> 
   201 00000734 5D                  <1>     pop rbp
   202 00000735 5A                  <1>     pop rdx
   203 00000736 59                  <1>     pop rcx
   204 00000737 5B                  <1>     pop rbx
   205 00000738 C3                  <1>     ret
   206                              <1> 
   207                              <1> overlayWord:
   208                              <1>     ;Called with number in rax
   209                              <1>     ;pointer to START of 16 byte space for number in rbx
   210 00000739 53                  <1>     push rbx
   211 0000073A 51                  <1>     push rcx
   212 0000073B 52                  <1>     push rdx
   213 0000073C 55                  <1>     push rbp
   214 0000073D 4889DD              <1>     mov rbp, rbx
   215 00000740 4889C2              <1>     mov rdx, rax
   216 00000743 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   217 0000074A B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   218 0000074F 488D1D63FCFFFF      <1>     lea rbx, debascii
   219                              <1> .ow0:
   220 00000756 88D0                <1>     mov al, dl  ;Go low nybble first
   221 00000758 240F                <1>     and al, 0Fh
   222 0000075A D7                  <1>     xlatb
   223 0000075B 884500              <1>     mov byte [rbp], al
   224 0000075E 48FFCD              <1>     dec rbp ;Go down one char pos
   225 00000761 88D0                <1>     mov al, dl
   226 00000763 24F0                <1>     and al, 0F0h    ;Hi nybble next
   227 00000765 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   228 00000768 D7                  <1>     xlatb
   229 00000769 884500              <1>     mov byte [rbp], al  ;Store char
   230 0000076C 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   231 00000770 48FFCD              <1>     dec rbp
   232 00000773 FFC9                <1>     dec ecx
   233 00000775 75DF                <1>     jnz .ow0
   234 00000777 5D                  <1>     pop rbp
   235 00000778 5A                  <1>     pop rdx
   236 00000779 59                  <1>     pop rcx
   237 0000077A 5B                  <1>     pop rbx
   238 0000077B C3                  <1>     ret
   239                              <1> 
   240                              <1> overlayDword:
   241                              <1>     ;Called with number in rax
   242                              <1>     ;pointer to START of 16 byte space for number in rbx
   243 0000077C 53                  <1>     push rbx
   244 0000077D 51                  <1>     push rcx
   245 0000077E 52                  <1>     push rdx
   246 0000077F 55                  <1>     push rbp
   247 00000780 4889DD              <1>     mov rbp, rbx
   248 00000783 4889C2              <1>     mov rdx, rax
   249 00000786 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   250 0000078D B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   251 00000792 488D1D20FCFFFF      <1>     lea rbx, debascii
   252                              <1> .od0:
   253 00000799 88D0                <1>     mov al, dl  ;Go low nybble first
   254 0000079B 240F                <1>     and al, 0Fh
   255 0000079D D7                  <1>     xlatb
   256 0000079E 884500              <1>     mov byte [rbp], al
   257 000007A1 48FFCD              <1>     dec rbp ;Go down one char pos
   258 000007A4 88D0                <1>     mov al, dl
   259 000007A6 24F0                <1>     and al, 0F0h    ;Hi nybble next
   260 000007A8 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   261 000007AB D7                  <1>     xlatb
   262 000007AC 884500              <1>     mov byte [rbp], al  ;Store char
   263 000007AF 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   264 000007B3 48FFCD              <1>     dec rbp
   265 000007B6 FFC9                <1>     dec ecx
   266 000007B8 75DF                <1>     jnz .od0
   267 000007BA 5D                  <1>     pop rbp
   268 000007BB 5A                  <1>     pop rdx
   269 000007BC 59                  <1>     pop rcx
   270 000007BD 5B                  <1>     pop rbx
   271 000007BE C3                  <1>     ret
   272                              <1> 
   273                              <1> overlayQword:
   274                              <1>     ;Called with number in rax
   275                              <1>     ;pointer to START of 16 byte space for number in rbx
   276 000007BF 53                  <1>     push rbx
   277 000007C0 51                  <1>     push rcx
   278 000007C1 52                  <1>     push rdx
   279 000007C2 55                  <1>     push rbp
   280 000007C3 4889DD              <1>     mov rbp, rbx
   281 000007C6 4889C2              <1>     mov rdx, rax
   282 000007C9 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   283 000007D0 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   284 000007D5 488D1DDDFBFFFF      <1>     lea rbx, debascii
   285                              <1> .oq0:
   286 000007DC 88D0                <1>     mov al, dl  ;Go low nybble first
   287 000007DE 240F                <1>     and al, 0Fh
   288 000007E0 D7                  <1>     xlatb
   289 000007E1 884500              <1>     mov byte [rbp], al
   290 000007E4 48FFCD              <1>     dec rbp ;Go down one char pos
   291 000007E7 88D0                <1>     mov al, dl
   292 000007E9 24F0                <1>     and al, 0F0h    ;Hi nybble next
   293 000007EB C0E804              <1>     shr al, 4   ;Shift hi nybble low
   294 000007EE D7                  <1>     xlatb
   295 000007EF 884500              <1>     mov byte [rbp], al  ;Store char
   296 000007F2 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   297 000007F6 48FFCD              <1>     dec rbp
   298 000007F9 FFC9                <1>     dec ecx
   299 000007FB 75DF                <1>     jnz .oq0
   300 000007FD 5D                  <1>     pop rbp
   301 000007FE 5A                  <1>     pop rdx
   302 000007FF 59                  <1>     pop rcx
   303 00000800 5B                  <1>     pop rbx
   304 00000801 C3                  <1>     ret
   305                              <1> 
   306                              <1> debPrintFunctionName:
   307                              <1> ;Prints the DOS function that has been entered
   308                              <1> ;Entered with ah = Function number
   309 00000802 88E0                <1>     mov al, ah  ;Get dos function number
   310 00000804 488D1DAEFBFFFF      <1>     lea rbx, debascii
   311 0000080B 488D1535000000      <1>     lea rdx, .number
   312 00000812 24F0                <1>     and al, 0F0h    ;Get high nybble first
   313 00000814 C0E804              <1>     shr al, 4
   314 00000817 D7                  <1>     xlatb
   315 00000818 8802                <1>     mov byte [rdx], al
   316 0000081A 88E0                <1>     mov al, ah
   317 0000081C 240F                <1>     and al, 0Fh
   318 0000081E D7                  <1>     xlatb
   319 0000081F 884201              <1>     mov byte [rdx + 1], al
   320 00000822 488D2D06000000      <1>     lea rbp, .dosString
   321 00000829 E856FCFFFF          <1>     call debPrintNullString
   322 0000082E C3                  <1>     ret
   323 0000082F 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   323 00000838 696F6E20496E742034- <1>
   323 00000841 31682F41483D        <1>
   324 00000847 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   325                              <1> 
   326                              <1> ;----------------:
   327                              <1> ;!!!! MACROS !!!!:
   328                              <1> ;----------------:
   329                              <1> ;Insert macro when entering a debug block
   330                              <1> %macro debugEnterM 0
   331                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   332                              <1>     mov rsp, debStackTop
   333                              <1> ;Push all registers except rsp on stack
   334                              <1>     push rax
   335                              <1>     push rbx
   336                              <1>     push rcx
   337                              <1>     push rdx
   338                              <1>     push rsi
   339                              <1>     push rdi
   340                              <1>     push rbp
   341                              <1>     push r8
   342                              <1>     push r9
   343                              <1>     push r10
   344                              <1>     push r11
   345                              <1>     push r12
   346                              <1>     push r13
   347                              <1>     push r14
   348                              <1>     push r15
   349                              <1>     pushfq
   350                              <1> %endmacro
   351                              <1> ;Insert macro when exiting a debug block
   352                              <1> %macro debugExitM 0
   353                              <1>     popfq
   354                              <1>     pop r15
   355                              <1>     pop r14
   356                              <1>     pop r13
   357                              <1>     pop r12
   358                              <1>     pop r11
   359                              <1>     pop r10
   360                              <1>     pop r9
   361                              <1>     pop r8
   362                              <1>     pop rbp
   363                              <1>     pop rdi
   364                              <1>     pop rsi
   365                              <1>     pop rdx
   366                              <1>     pop rcx
   367                              <1>     pop rbx
   368                              <1>     pop rax
   369                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   370                              <1> %endmacro
    21                                  %include "./Source/Kernel/FAT/buffun.asm"
    22                              <1> ;This file contains FAT disk buffer related functions that
    23                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    24                              <1> ;----------------------------------------------------
    25                              <1> ;           Externally referenced functions         :
    26                              <1> ;----------------------------------------------------
    27                              <1> 
    28                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    29                              <1> ;Sets the buffer in rdi to the head of the chain
    30                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    31                              <1> ;Output: Buffer header set to the head of the chain
    32 0000084D 48393D(55C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    33 00000854 7428                <1>     je .exit
    34 00000856 56                  <1>     push rsi
    35 00000857 488B35(55C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    36                              <1> .mainlp:
    37 0000085E 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    38 00000861 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    39 00000863 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    40 00000866 EBF6                <1>     jmp short .mainlp
    41                              <1> .fnd:
    42 00000868 57                  <1>     push rdi
    43 00000869 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    44 0000086C 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    45 0000086F 5F                  <1>     pop rdi ;Get original buf back
    46 00000870 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    47 00000873 488735(55C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    48 0000087A 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    49 0000087D 5E                  <1>     pop rsi
    50                              <1> .exit:
    51                              <1>     return
    18                              <2> %%_ret:
    19 0000087E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> 
    53                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    54                              <1> ;1 External reference
    55                              <1> ;Input: rdi = Buffer header to flush and free
    56 0000087F E844000000          <1>     call flushBuffer
    57 00000884 7306                <1>     jnc .exit
    58                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    59 00000886 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    60                              <1> .exit:
    61                              <1>     return
    18                              <2> %%_ret:
    19 0000088C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    62                              <1> 
    63                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    64                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    65                              <1> ;Output: rdi = First disk buffer
    66 0000088D 488B3D(55C00300)    <1>     mov rdi, [bufHeadPtr]
    67 00000894 57                  <1>     push rdi
    68                              <1> .lp:
    69 00000895 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    70 00000899 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    71 0000089C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    72 000008A3 75F0                <1>     jne .lp
    73 000008A5 5F                  <1>     pop rdi
    74                              <1>     return
    18                              <2> %%_ret:
    19 000008A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    75                              <1> 
    76                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    77                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    78                              <1> ; second buffer in the chain in rdi
    79                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    80                              <1> ;Output: rdi = Second buffer in the chain
    81 000008A7 52                  <1>     push rdx
    82 000008A8 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    83 000008AB E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    84 000008B0 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    85 000008B3 5A                  <1>     pop rdx
    86                              <1>     return
    18                              <2> %%_ret:
    19 000008B4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    87                              <1> 
    88                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    89                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    90                              <1> ;Input: rdi = Buffer header to start searching at
    91                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    92                              <1> ;        ZF=ZE => No unreferenced buffer found
    93 000008B5 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    94 000008B9 750C                <1>     jnz .exit
    95 000008BB 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    96 000008BE 4881FFFFFFFFFF      <1>     cmp rdi, -1
    97 000008C5 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    98                              <1> .exit:
    99                              <1>     return
    18                              <2> %%_ret:
    19 000008C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   102                              <1> ;Flushes the data in a sector buffer to disk!
   103                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   104                              <1> ;Exit:  CF=NC : Success
   105                              <1> ;       CF=CY : Fail, terminate the request
   106                              <1> ;First make request to device driver
   107 000008C8 50                  <1>     push rax
   108 000008C9 53                  <1>     push rbx
   109 000008CA 51                  <1>     push rcx
   110 000008CB 52                  <1>     push rdx
   111 000008CC 56                  <1>     push rsi
   112 000008CD 55                  <1>     push rbp
   113                              <1> ;If the buffer is freed, skip flushing to avoid issues
   114 000008CE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   115 000008D2 7454                <1>     je .fbFreeExit  ;If it is free exit
   116 000008D4 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   117 000008D8 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   118                              <1> .fbRequest0:
   119 000008DA BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   120 000008DF F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   121 000008E3 7406                <1>     jz .fbRequest1
   122 000008E5 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   123                              <1> .fbRequest1:
   124 000008EB 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   125 000008EE B901000000          <1>     mov ecx, 1  ;One sector to copy
   126 000008F3 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   127 000008F7 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   128 000008FB 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   129 000008FF E811350000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   130 00000904 E898330000          <1>     call absDiskDriverCall    ;Make Driver Request
   131 00000909 7525                <1>     jnz .fbFail
   132                              <1> ;Now check if the buffer was a FAT, to write additional copies
   133 0000090B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   134 0000090F 7417                <1>     jz .fbFreeExit  ;If not, exit
   135 00000911 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   136 00000914 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   137 00000916 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   138 00000919 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   139 0000091D E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   140                              <1> .fbFreeExit1:
   141 00000922 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   142 00000925 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   143                              <1> .fbFreeExit:
   144 00000928 F8                  <1>     clc
   145                              <1> .fbExitFail:
   146 00000929 5D                  <1>     pop rbp
   147 0000092A 5E                  <1>     pop rsi
   148 0000092B 5A                  <1>     pop rdx
   149 0000092C 59                  <1>     pop rcx
   150 0000092D 5B                  <1>     pop rbx
   151 0000092E 58                  <1>     pop rax
   152                              <1>     return
    18                              <2> %%_ret:
    19 0000092F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> .fbFail:
   154                              <1> ;Enter here only if the request failed
   155 00000930 FFCE                <1>     dec esi
   156 00000932 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   157                              <1> ;Request failed thrice, critical error call
   158 00000934 C605(C9C30300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   159 0000093B E8BC300000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   160 00000940 3C01                <1>     cmp al, critRetry
   161 00000942 7496                <1>     je .fbRequest0
   162                              <1>     ;Else we fail (Ignore=Fail here)
   163 00000944 F9                  <1>     stc ;Set error flag to indicate fail
   164 00000945 E9DFFFFFFF          <1>     jmp .fbExitFail
   165                              <1> 
   166                              <1> testDirtyBufferForDrive:    ;External linkage
   167                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   168                              <1> ;Input: al = Drive number (0 based)
   169                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   170                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   171 0000094A 53                  <1>     push rbx
   172 0000094B 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   173                              <1> .tdbfdCheckBuffer:
   174 00000952 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   175 00000955 7509                <1>     jne .tdbfdGotoNextBuffer
   176 00000957 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   177 0000095B 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   178 0000095D F9                  <1>     stc ;Else dirty buffer found, set carry flag
   179                              <1> .tdbfdExit:
   180 0000095E 5B                  <1>     pop rbx
   181                              <1>     return
    18                              <2> %%_ret:
    19 0000095F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   182                              <1> .tdbfdGotoNextBuffer:
   183 00000960 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   184 00000963 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   185 0000096A 74F2                <1>     je .tdbfdExit
   186 0000096C EBE4                <1>     jmp short .tdbfdCheckBuffer
   187                              <1> 
   188                              <1> freeBuffersForDPB:
   189                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   190                              <1> ; to have a drive number of -1, thus freeing it
   191                              <1> ;Given DPB is in rbp
   192 0000096E 53                  <1>     push rbx
   193 0000096F 488B1D(55C00300)    <1>     mov rbx, qword [bufHeadPtr]
   194                              <1> .i0:
   195 00000976 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   196 0000097A 7506                <1>     jne .i1 ;If no, skip freeing
   197 0000097C 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   198                              <1> .i1:
   199 00000982 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   200 00000985 4881FBFFFFFFFF      <1>     cmp rbx, -1
   201 0000098C 75E8                <1>     jne .i0
   202                              <1> .exit:
   203 0000098E 5B                  <1>     pop rbx
   204                              <1>     return
    18                              <2> %%_ret:
    19 0000098F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   205                              <1> setBufferDirty:
   206 00000990 55                  <1>     push rbp
   207 00000991 9C                  <1>     pushfq
   208 00000992 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   209 00000999 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   210                              <1> setBufferReferenced:
   211                              <1> ;Sets the current buffer in the buffer variable as referenced.
   212                              <1> ; AKA DOS is done with it.
   213                              <1> ;Saves flag state too 
   214 0000099D 55                  <1>     push rbp
   215 0000099E 9C                  <1>     pushfq
   216 0000099F 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   217 000009A6 804D0920            <1>     or byte [rbp + bufferHdr.bufferFlags], refBuffer
   218 000009AA EB0D                <1>     jmp short clearBufferReferenced.exit
   219                              <1> clearBufferReferenced:
   220                              <1> ;Clears the referenced bit, if the buffer becomes referenced again
   221                              <1> ; Called if DOS is not quite done with this buffer.
   222 000009AC 55                  <1>     push rbp
   223 000009AD 9C                  <1>     pushfq
   224 000009AE 488B2D(90C60300)    <1>     mov rbp, qword [currBuff]
   225 000009B5 806509DF            <1>     and byte [rbp + bufferHdr.bufferFlags], ~refBuffer
   226                              <1> .exit:
   227 000009B9 9D                  <1>     popfq
   228 000009BA 5D                  <1>     pop rbp
   229                              <1>     return
    18                              <2> %%_ret:
    19 000009BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> 
   232                              <1> getBuffer: ;Internal Linkage ONLY
   233                              <1> ;
   234                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   235                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   236                              <1> ;Flushes if not in disk change mode. 
   237                              <1> ;If in disk change mode, will check to see if the selected buffer 
   238                              <1> ; has data referring a device using the same DPB as we are changing.
   239                              <1> ; If it is, skip flushing, if not, flush first!
   240                              <1> ;
   241                              <1> ;This function will return a pointer to the desired data sector OR 
   242                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   243                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   244                              <1> ;Entry: rax = Sector to read
   245                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   246                              <1> ;       rsi = DPB to use for transaction
   247                              <1> ;Exit:  CF=NC => 
   248                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   249                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   250 000009BC 51                  <1>     push rcx
   251 000009BD 52                  <1>     push rdx
   252 000009BE 56                  <1>     push rsi
   253 000009BF 57                  <1>     push rdi
   254 000009C0 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   255 000009C2 E831010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   256 000009C7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   257 000009CE 7419                <1>     je .rbReadNewSector
   258 000009D0 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   259 000009D7 E8D0FFFFFF          <1>     call clearBufferReferenced  ;Set buffer to unref again if it was referenced
   260                              <1> .rbExit:
   261 000009DC F8                  <1>     clc
   262                              <1> .rbExitNoFlag:
   263 000009DD 5F                  <1>     pop rdi
   264 000009DE 5E                  <1>     pop rsi
   265 000009DF 5A                  <1>     pop rdx
   266 000009E0 59                  <1>     pop rcx
   267 000009E1 488B1D(90C60300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   268                              <1>     return
    18                              <2> %%_ret:
    19 000009E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   269                              <1> .rbReadNewSector:
   270 000009E9 E8B3000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   271 000009EE 803D(E7D80300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   272 000009F5 7506                <1>     jne .flush  ;We are not, flush buffer
   273 000009F7 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   274 000009FB 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   275                              <1> .flush:
   276 000009FD E87DFEFFFF          <1>     call flushAndFreeBuffer
   277 00000A02 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   278                              <1> .skipFlush:
   279                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   280                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   281                              <1>     ; is no longer owned by that File so we mark the owner as none
   282 00000A04 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   283 00000A0C 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   284 00000A0F 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   285 00000A12 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   286 00000A16 80F902              <1>     cmp cl, fatBuffer
   287 00000A19 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   288 00000A1B 7503                <1>     jne .rbNonFATbuffer
   289 00000A1D 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   290                              <1> .rbNonFATbuffer:
   291 00000A20 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   292 00000A23 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   293 00000A26 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   294 00000A29 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   295 00000A2D C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   296 00000A31 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   297 00000A36 EBA5                <1>     jmp short .rbExitNoFlag
   298                              <1> 
   299                              <1> readSectorBuffer:   ;Internal Linkage
   300                              <1> ;Reads a sector into a built sector buffer
   301                              <1> ;Entry: rdi = Pointer to buffer header
   302                              <1> ;Exit:  CF=NC : Success
   303                              <1> ;       CF=CY : Fail, terminate the request
   304                              <1> ;       rbx pointing to buffer header
   305                              <1> ;First make request to device driver
   306 00000A38 50                  <1>     push rax
   307 00000A39 53                  <1>     push rbx
   308 00000A3A 51                  <1>     push rcx
   309 00000A3B 52                  <1>     push rdx
   310 00000A3C 56                  <1>     push rsi
   311 00000A3D 55                  <1>     push rbp
   312                              <1> .rsRequest0:
   313 00000A3E BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   314 00000A43 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   315 00000A47 7406                <1>     jz .rsRequest1
   316 00000A49 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   317                              <1> .rsRequest1:
   318 00000A4F 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   319 00000A52 B901000000          <1>     mov ecx, 1  ;One sector to copy
   320 00000A57 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   321 00000A5B 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   322 00000A5F 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   323 00000A63 E8B8330000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   324 00000A68 E834320000          <1>     call absDiskDriverCall    ;Make Driver Request
   325 00000A6D 7508                <1>     jnz .rsFail
   326                              <1> .rsExit:
   327 00000A6F F8                  <1>     clc
   328                              <1> .rsExitFail:
   329 00000A70 5D                  <1>     pop rbp
   330 00000A71 5E                  <1>     pop rsi
   331 00000A72 5A                  <1>     pop rdx
   332 00000A73 59                  <1>     pop rcx
   333 00000A74 5B                  <1>     pop rbx
   334 00000A75 58                  <1>     pop rax
   335                              <1>     return
    18                              <2> %%_ret:
    19 00000A76 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   336                              <1> .rsFail:
   337                              <1> ;Enter here only if the request failed
   338 00000A77 FFCE                <1>     dec esi
   339 00000A79 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   340                              <1> ;Request failed thrice, critical error call
   341                              <1> ;First free the buffer if we failed to read data into it 
   342 00000A7B 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   343 00000A7F 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   344 00000A85 C605(C9C30300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   345 00000A8C E86B2F0000          <1>     call diskDevErr
   346 00000A91 3C01                <1>     cmp al, critRetry
   347 00000A93 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   348 00000A95 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   349 00000A99 EBA3                <1>     jmp short .rsRequest0
   350                              <1> .fail:
   351 00000A9B F9                  <1>     stc ;Set error flag to indicate fail
   352 00000A9C E9CFFFFFFF          <1>     jmp .rsExitFail
   353                              <1>     
   354                              <1> findLRUBuffer: ;Internal Linkage
   355                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   356                              <1> ; in rbx and the currBuff variable
   357                              <1> ;Input: Nothing
   358                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   359                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   360 00000AA1 52                  <1>     push rdx
   361 00000AA2 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   362 00000AA9 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   363 00000AAD 7436                <1>     je .flbExit 
   364 00000AAF 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   365 00000AB6 742D                <1>     je .flbExit
   366                              <1> .flbWalk:
   367 00000AB8 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   368 00000ABB 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   369 00000ABE 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   370 00000AC2 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   371 00000AC4 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   372 00000ACB 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   373 00000ACD 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   374                              <1> .flbHeadLink:
   375 00000AD4 488B15(55C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   376 00000ADB 48893D(55C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   377 00000AE2 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   378                              <1> .flbExit:
   379 00000AE5 5A                  <1>     pop rdx
   380 00000AE6 48893D(90C60300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   381                              <1>     return
    18                              <2> %%_ret:
    19 00000AED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   382                              <1> .flbFreeLink:
   383 00000AEE 51                  <1>     push rcx
   384 00000AEF 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   385 00000AF2 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   386 00000AF5 59                  <1>     pop rcx
   387 00000AF6 EBDC                <1>     jmp short .flbHeadLink
   388                              <1> 
   389                              <1> findSectorInBuffer:     ;Internal linkage
   390                              <1> ;Finds the Buffer for a sector
   391                              <1> ;If the sector is not in a buffer, returns with a -1
   392                              <1> ;Input: rax = Sector number
   393                              <1> ;        dl = Drive number
   394                              <1> ;Output: rdi = Buffer hdr pointer or -1
   395 00000AF8 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   396                              <1> .fsiCheckBuffer:
   397 00000AFF 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   398 00000B02 7507                <1>     jne .fsiGotoNextBuffer
   399 00000B04 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   400 00000B08 7501                <1>     jne .fsiGotoNextBuffer
   401                              <1> .fsiExit:
   402                              <1>     return
    18                              <2> %%_ret:
    19 00000B0A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   403                              <1> .fsiGotoNextBuffer:
   404 00000B0B 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   405 00000B0E 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   406 00000B15 74F3                <1>     je .fsiExit
   407 00000B17 EBE6                <1>     jmp short .fsiCheckBuffer
   408                              <1> ;-----------------------------------------------------------------------------
   409                              <1> ;SPECIAL BUFFER FUNCTIONS
   410                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   411                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   412                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   413                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   414                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   415                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   416                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   417                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   418                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   419                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   420                              <1> ;-----------------------------------------------------------------------------
   421                              <1> getBufForFat:
   422                              <1> ;Returns a buffer to use for fat data in rbx
   423                              <1> ;Input: [workingDPB] = DPB to transact on
   424                              <1> ;       rax = Sector to transfer
   425                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   426 00000B19 51                  <1>     push rcx
   427 00000B1A B102                <1>     mov cl, fatBuffer
   428 00000B1C EB03                <1>     jmp short getBufCommon2
   429                              <1> getBufForDOS:
   430                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   431                              <1> ;Input: [workingDPB] = DPB to transact on
   432                              <1> ;       rax = Sector to transfer
   433                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   434 00000B1E 51                  <1>     push rcx
   435 00000B1F B101                <1>     mov cl, dosBuffer
   436                              <1> getBufCommon2:
   437 00000B21 56                  <1>     push rsi
   438 00000B22 57                  <1>     push rdi    ;Push rdi to preserve it
   439 00000B23 488B35(64C60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   440 00000B2A EB15                <1>     jmp short getBufCommon.makeReq
   441                              <1> getBufForDir:
   442                              <1> ;Returns a buffer to use for disk directory data in rbx
   443                              <1> ;Input: [currentSFT] = File to manipulate
   444                              <1> ;       rax = Sector to transfer
   445                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   446 00000B2C 51                  <1>     push rcx
   447 00000B2D B104                <1>     mov cl, dirBuffer
   448 00000B2F EB03                <1>     jmp short getBufCommon
   449                              <1> getBufForData:
   450                              <1> ;Returns a buffer to use for disk data in rbx
   451                              <1> ;Requires a File Handle.
   452                              <1> ;Input: [currentSFT] = File to manipulate
   453                              <1> ;       rax = Sector to transfer
   454                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   455 00000B31 51                  <1>     push rcx
   456 00000B32 B108                <1>     mov cl, dataBuffer
   457                              <1> getBufCommon:
   458 00000B34 56                  <1>     push rsi
   459 00000B35 57                  <1>     push rdi
   460 00000B36 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   461 00000B3D 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   462                              <1> .makeReq:
   463 00000B41 E876FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   464 00000B46 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   465                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   466                              <1>     ; flushed to the file!
   467                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   468                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   469                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   470 00000B48 F6C103              <1>     test cl, dosBuffer | fatBuffer
   471 00000B4B 7504                <1>     jnz .exit
   472 00000B4D 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   473                              <1> .exit:
   474 00000B51 5F                  <1>     pop rdi
   475 00000B52 5E                  <1>     pop rsi
   476 00000B53 59                  <1>     pop rcx
   477                              <1>     return
    18                              <2> %%_ret:
    19 00000B54 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   478                              <1> 
   479                              <1> flushFile:
   480                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   481                              <1> ; FAT/DOS buffers to flush
   482                              <1> ; We flush and free, and set to head of chain before continuing to search
   483                              <1> ;Input: rdi = is the file (sft) we wish to flush
   484                              <1> ;Output: CF=NC => All ok
   485                              <1> ;        CF=CY => A sector failed, exit. 
   486 00000B55 57                  <1>     push rdi
   487 00000B56 56                  <1>     push rsi
   488                              <1>     ;First check if the file has been written to?
   489 00000B57 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   490 00000B5D 742A                <1>     jz .exitNoFlush ;Exit without flushing
   491 00000B5F 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   492 00000B62 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   493                              <1> .ffLoop:
   494 00000B69 4881FFFFFFFFFF      <1>     cmp rdi, -1
   495 00000B70 7411                <1>     je .exit
   496 00000B72 F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   497 00000B76 7514                <1>     jnz .found  ;Flush if either bit is set
   498 00000B78 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   499 00000B7C 740E                <1>     je .found
   500 00000B7E 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   501 00000B81 EBE6                <1>     jmp short .ffLoop
   502                              <1> .exit:
   503                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   504 00000B83 66816605BFFF        <1>     and word [rsi + sft.wDeviceInfo], ~blokFileToFlush  ;Clear that bit!
   505                              <1> .exitNoFlush:
   506 00000B89 5E                  <1>     pop rsi
   507 00000B8A 5F                  <1>     pop rdi
   508                              <1>     return
    18                              <2> %%_ret:
    19 00000B8B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   509                              <1> .found:
   510                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   511                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   512 00000B8C E8EEFCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   513 00000B91 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   514                              <1>     ;If the sector has been successfully flushed, then it
   515                              <1>     ; is no longer owned by that File so we mark the owner as none
   516 00000B93 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   517 00000B9B E807FDFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   518 00000BA0 EBC7                <1>     jmp short .ffLoop
    22                                  %include "./Source/Kernel/FAT/fat.asm"
    23                              <1> ;-----------------------------------:
    24                              <1> ;       File System routines        :
    25                              <1> ;-----------------------------------:
    26                              <1> getFATtype:
    27                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    28                              <1> ;Entry: rbp = DPB to ascertain FAT
    29                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    30 00000BA2 53                  <1>     push rbx
    31 00000BA3 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    32 00000BA6 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    33 00000BAB 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    34 00000BB1 730F                <1>     jae .exit
    35 00000BB3 FFC9                <1>     dec ecx     ;FAT 12 marker
    36 00000BB5 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    37 00000BBB 7205                <1>     jb .exit
    38 00000BBD B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    39                              <1> .exit:
    40 00000BC2 5B                  <1>     pop rbx
    41                              <1>     return
    18                              <2> %%_ret:
    19 00000BC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> clust2FATEntry:
    44                              <1> ;Converts a cluster number to a offset in the FAT
    45                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    46                              <1> ;        eax = Cluster number to look for
    47                              <1> ;Exit:   eax = Sector on disk of FAT 
    48                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    49                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    50 00000BC4 53                  <1>     push rbx
    51 00000BC5 55                  <1>     push rbp
    52 00000BC6 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    53 00000BCD 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    54 00000BD0 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    55 00000BD6 731E                <1>     jae .fat32
    56 00000BD8 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    57 00000BDE 7209                <1>     jb .fat12
    58                              <1> ;FAT16
    59 00000BE0 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    60 00000BE2 6801000000          <1>     push qword 1
    61 00000BE7 EB15                <1>     jmp short .common
    62                              <1> .fat12:
    63 00000BE9 89C1                <1>     mov ecx, eax    ;ecx = eax
    64 00000BEB D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    65 00000BED 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    66 00000BEF 6800000000          <1>     push qword 0
    67 00000BF4 EB08                <1>     jmp short .common
    68                              <1> .fat32:
    69 00000BF6 6802000000          <1>     push qword 2
    70 00000BFB C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    71                              <1> .common:
    72                              <1> ;eax has the FAToffset
    73 00000BFE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    74 00000C02 31D2                <1>     xor edx, edx    ;edx = 0
    75 00000C04 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    76 00000C06 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    77 00000C0A 01D8                <1>     add eax, ebx
    78 00000C0C 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    79 00000C0D 5D                  <1>     pop rbp
    80 00000C0E 5B                  <1>     pop rbx
    81                              <1>     return
    18                              <2> %%_ret:
    19 00000C0F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    82                              <1> 
    83                              <1> getStartSectorOfCluster:
    84                              <1> ;Input: eax = Cluster Number
    85                              <1> ;       rbp = dpb pointer
    86                              <1> ;Output: rax = Starting Sector number for cluster
    87                              <1> ;Gives the data sector we are at in the current cluster
    88                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    89 00000C10 51                  <1>     push rcx
    90 00000C11 09C0                <1>     or eax, eax ;Zero upper dword
    91 00000C13 482D02000000        <1>     sub rax, 2
    92 00000C19 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    93 00000C1C 48D3E0              <1>     shl rax, cl
    94 00000C1F 31C9                <1>     xor ecx, ecx
    95 00000C21 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    96 00000C24 4801C8              <1>     add rax, rcx
    97                              <1>     ;rax now has the first sector of the current cluster
    98 00000C27 59                  <1>     pop rcx
    99                              <1>     return
    18                              <2> %%_ret:
    19 00000C28 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> allocateClusters:
   102                              <1> ;Working dpb must be set. 
   103                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   104                              <1> ;       ebx = Cluster to link to the new cluster
   105                              <1> ;Output:    
   106                              <1> ;   CF=NC => Complete.
   107                              <1> ;   If eax = -1, then no more free clusters. 
   108                              <1> ;   CF=CY => Hard error, exit
   109                              <1> ; ecx always has number of allocated clusters
   110 00000C29 53                  <1>     push rbx
   111 00000C2A 56                  <1>     push rsi
   112 00000C2B 51                  <1>     push rcx    ;Save tfr count on stack
   113 00000C2C 67E32B              <1>     jecxz .exit ;Allocating nothing? Exit
   114                              <1> .allocateLoop:
   115 00000C2F E860000000          <1>     call findFreeClusterData
   116 00000C34 7224                <1>     jc .exit
   117 00000C36 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   118 00000C3B 741D                <1>     je .exit    ;If the cluster number is -1, return immediately
   119                              <1>     ;eax has first free cluster value to use
   120                              <1>     ;First we link the previous cluster to this cluster
   121 00000C3D BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   122 00000C42 E8D0010000          <1>     call writeFAT   ;Allocate this cluster first
   123 00000C47 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   124                              <1>     ;eax points to this allocated cluster
   125                              <1>     ;ebx points to the previous last cluster
   126 00000C49 89C6                <1>     mov esi, eax    ;New cluster as "value"
   127 00000C4B 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   128 00000C4D E8C5010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   129 00000C52 7206                <1>     jc .exit
   130 00000C54 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   131 00000C56 FFC9                <1>     dec ecx ;One less cluster allocated
   132 00000C58 75D5                <1>     jnz .allocateLoop
   133                              <1> .exit:
   134 00000C5A 5E                  <1>     pop rsi ;Pop the tfr count into esi
   135 00000C5B F7D9                <1>     neg ecx
   136 00000C5D 01F1                <1>     add ecx, esi
   137 00000C5F 5E                  <1>     pop rsi
   138 00000C60 5B                  <1>     pop rbx
   139                              <1>     return
    18                              <2> %%_ret:
    19 00000C61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   140                              <1> 
   141                              <1> findFreeCluster:
   142                              <1> ;Walks the FAT to find a free cluster and returns the 
   143                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   144                              <1> ;Works on the workingDPB
   145                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   146 00000C62 53                  <1>     push rbx
   147 00000C63 52                  <1>     push rdx
   148 00000C64 55                  <1>     push rbp
   149 00000C65 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   150 00000C6C 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   151                              <1>     ;Use WALKFAT
   152                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   153                              <1>     ;If WALKFAT returns 0 then its a free cluster
   154 00000C70 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   155 00000C75 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   156                              <1> .fatLoop:
   157 00000C78 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   158 00000C7A E8EF000000          <1>     call walkFAT
   159 00000C7F 720F                <1>     jc .exitFail    ;If something goes wrong, just return
   160 00000C81 85C0                <1>     test eax, eax   ;Is this cluster free?
   161 00000C83 7408                <1>     jz .exit    ;If yes, exit
   162 00000C85 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   163 00000C89 39D0                <1>     cmp eax, edx
   164 00000C8B 76EB                <1>     jbe .fatLoop
   165                              <1> .exit:
   166 00000C8D 89D8                <1>     mov eax, ebx
   167 00000C8F F8                  <1>     clc
   168                              <1> .exitFail:      ;Keep carry flag
   169 00000C90 5D                  <1>     pop rbp
   170 00000C91 5A                  <1>     pop rdx
   171 00000C92 5B                  <1>     pop rbx
   172                              <1>     return
    18                              <2> %%_ret:
    19 00000C93 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   173                              <1> 
   174                              <1> findFreeClusterData:
   175                              <1> ;Walks the FAT to find a free cluster and returns the 
   176                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   177                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   178                              <1> ;Works on the workingDPB
   179                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   180 00000C94 53                  <1>     push rbx
   181 00000C95 52                  <1>     push rdx
   182 00000C96 55                  <1>     push rbp
   183 00000C97 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   184 00000C9E 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   185                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   186 00000CA2 31D2                <1>     xor edx, edx
   187 00000CA4 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   188 00000CA7 FFCA                <1>     dec edx
   189 00000CA9 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   190                              <1>     ;Use WALKFAT
   191                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   192                              <1>     ;If WALKFAT returns 0 then its a free cluster
   193 00000CAC B802000000          <1>     mov eax, 2  ;Start with cluster 2
   194 00000CB1 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   195                              <1> .fatLoop:
   196 00000CB4 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   197 00000CB6 E8B3000000          <1>     call walkFAT
   198 00000CBB 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   199 00000CBD 85C0                <1>     test eax, eax   ;Is this cluster free?
   200 00000CBF 750C                <1>     jne .fatProceed
   201 00000CC1 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   202 00000CC4 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   203 00000CCB 7410                <1>     je .fatFirst
   204                              <1> .fatProceed:
   205 00000CCD 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   206 00000CD1 39D0                <1>     cmp eax, edx
   207 00000CD3 76DF                <1>     jbe .fatLoop
   208                              <1> .exit:
   209 00000CD5 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   210 00000CD8 F8                  <1>     clc
   211                              <1> .exitFail:      ;Keep carry flag
   212 00000CD9 5D                  <1>     pop rbp
   213 00000CDA 5A                  <1>     pop rdx
   214 00000CDB 5B                  <1>     pop rbx
   215                              <1>     return
    18                              <2> %%_ret:
    19 00000CDC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216                              <1> .fatFirst:
   217 00000CDD 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   218 00000CE0 EBEB                <1>     jmp short .fatProceed
   219                              <1> 
   220                              <1> getNextSectorOfFile:
   221                              <1> ;This function will read the next sector for a file into a buffer.
   222                              <1> ;If the next sector to be read lives in the next cluster, it will update
   223                              <1> ; the vars appropriately
   224                              <1> ;
   225                              <1> ;Input: rbp = dpb pointer
   226                              <1> ;Output:
   227                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   228                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   229                              <1> ;       CF=CY => Critical error occurred and was FAILed
   230                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   231                              <1> ; next cluster and read first sector 
   232                              <1>     ;Check if we need to go to next cluster
   233 00000CE2 8A05(AEC60300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   234 00000CE8 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   235 00000CEB 7416                <1>     je .gotoNextCluster
   236                              <1>     ;Goto next sector in same cluster
   237 00000CED FE05(AEC60300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   238 00000CF3 48FF05(AFC60300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   239 00000CFA 488B05(AFC60300)    <1>     mov rax, qword [currSectD]
   240                              <1> .exitOK:
   241 00000D01 F8                  <1>     clc
   242                              <1> .exitFail:
   243                              <1>     return
    18                              <2> %%_ret:
    19 00000D02 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> .gotoNextCluster:
   245 00000D03 8B05(A6C60300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   246 00000D09 E860000000          <1>     call walkFAT
   247 00000D0E 72F2                <1>     jc .exitFail
   248                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   249 00000D10 3DFFFFFFFF          <1>     cmp eax, -1
   250 00000D15 74EA                <1>     je .exitOK
   251                              <1> ;Update the new cluster and sector information
   252 00000D17 8905(A6C60300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   253 00000D1D FF05(A2C60300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   254 00000D23 E8E8FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   255 00000D28 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save it
   256 00000D2F C605(AEC60300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   257 00000D36 EBC9                <1>     jmp short .exitOK
   258                              <1> 
   259                              <1> unlinkFAT:
   260                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   261                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   262                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   263                              <1> ; cluster must be set to EOC before this proc is called.
   264                              <1> ;Stops at first invalid cluster number.
   265                              <1> ;
   266                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   267                              <1> ;       rbp = Current DPB to use for disk
   268                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   269                              <1> 
   270 00000D38 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   271 00000D39 56                  <1>     push rsi
   272 00000D3A E80A000000          <1>     call truncateFAT    ;Preserved eax
   273 00000D3F 31F6                <1>     xor esi, esi  ;Free first cluster too
   274 00000D41 E8D1000000          <1>     call writeFAT
   275 00000D46 5E                  <1>     pop rsi
   276 00000D47 58                  <1>     pop rax
   277                              <1>     return
    18                              <2> %%_ret:
    19 00000D48 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   278                              <1> 
   279                              <1> truncateFAT:
   280                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   281                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   282                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   283                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   284                              <1> ;Stops at first invalid cluster number.
   285                              <1> ;
   286                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   287                              <1> ;       rbp = Current DPB to use for disk
   288                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   289 00000D49 50                  <1>     push rax
   290 00000D4A 53                  <1>     push rbx
   291 00000D4B 56                  <1>     push rsi
   292 00000D4C 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   293                              <1> .lp:
   294 00000D4E E81B000000          <1>     call walkFAT    ;Get the value of the cluster at this location in eax
   295 00000D53 7215                <1>     jc .exit    ;Error exit
   296 00000D55 3DFFFFFFFF          <1>     cmp eax, -1 ;End of chain?
   297 00000D5A 740E                <1>     je .exit
   298 00000D5C 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   299 00000D5D 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   300 00000D5F E8B3000000          <1>     call writeFAT
   301 00000D64 7204                <1>     jc .exit    ;Error exit
   302 00000D66 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   303 00000D68 EBE4                <1>     jmp short .lp
   304                              <1> .exit:
   305 00000D6A 5E                  <1>     pop rsi
   306 00000D6B 5B                  <1>     pop rbx
   307 00000D6C 58                  <1>     pop rax
   308                              <1>     return
    18                              <2> %%_ret:
    19 00000D6D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   309                              <1> walkFAT:
   310                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   311                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   312                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   313                              <1> ;       rbp = DPB
   314                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   315                              <1> ;If carry set, getBuffer failed!
   316 00000D6E 53                  <1>     push rbx
   317 00000D6F 51                  <1>     push rcx
   318 00000D70 52                  <1>     push rdx
   319 00000D71 57                  <1>     push rdi
   320 00000D72 55                  <1>     push rbp
   321 00000D73 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   322 00000D75 E84AFEFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   323                              <1>     ;and FAT type in ecx
   324 00000D7A E89AFDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   325 00000D7F 7237                <1>     jc .exitFail
   326                              <1>     ;Check if FAT 12, 16, 32
   327 00000D81 85C9                <1>     test ecx, ecx
   328 00000D83 743E                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   329 00000D85 F7C101000000        <1>     test ecx, 1
   330 00000D8B 7413                <1>     jz .goToNextClusterFat32
   331                              <1>     ;Here we handle FAT16
   332 00000D8D 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   333 00000D92 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   334 00000D97 721E                <1>     jb .exit
   335 00000D99 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   336 00000D9E EB17                <1>     jmp short .exit
   337                              <1> .goToNextClusterFat32:
   338 00000DA0 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   339 00000DA4 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   340 00000DA9 7207                <1>     jb .validCluster32   
   341 00000DAB B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   342 00000DB0 EB05                <1>     jmp short .exit
   343                              <1> .validCluster32:
   344 00000DB2 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   345                              <1> .exit:
   346 00000DB7 F8                  <1>     clc
   347                              <1> .exitFail:
   348 00000DB8 E8E0FBFFFF          <1>     call setBufferReferenced    ;We are done with the disk buffer
   349 00000DBD 5D                  <1>     pop rbp
   350 00000DBE 5F                  <1>     pop rdi
   351 00000DBF 5A                  <1>     pop rdx
   352 00000DC0 59                  <1>     pop rcx
   353 00000DC1 5B                  <1>     pop rbx
   354                              <1>     return
    18                              <2> %%_ret:
    19 00000DC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   355                              <1> .gotoNextClusterFat12:
   356                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   357                              <1> ;eax has the sector number of the FAT
   358                              <1> ;edx has byte offset into the sector
   359                              <1> ;edi has current cluster number
   360                              <1> ;rbx has ptr to buffer header
   361 00000DC3 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   362 00000DC9 7431                <1>     jz .gotoNextClusterFat12Even
   363                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   364 00000DCB 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   365 00000DCF 29D1                <1>     sub ecx, edx
   366 00000DD1 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   367 00000DD3 751D                <1>     jnz .gotoNextClusterFat12NoCross
   368                              <1>     ;Boundary cross, build entry properly
   369 00000DD5 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   370 00000DDA E8BEFBFFFF          <1>     call setBufferReferenced  ;We are done with the current buffer
   371 00000DDF FFC0                <1>     inc eax ;Get next FAT sector
   372 00000DE1 53                  <1>     push rbx
   373 00000DE2 E832FDFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   374 00000DE7 72CF                <1>     jc .exitFail
   375 00000DE9 58                  <1>     pop rax ;Get bl in al, the last entry from the previous buffer
   376 00000DEA 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   377 00000DED C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   378 00000DF0 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   379                              <1> .gotoNextClusterFat12NoCross:
   380 00000DF2 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   381 00000DF7 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   382 00000DFA EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   383                              <1> .gotoNextClusterFat12Even:
   384                              <1>     ;Here the cluster is even and can't cross a sector boundary
   385 00000DFC 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   386 00000E01 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   387                              <1> .checkIfLastFAT12Cluster:
   388 00000E06 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   389 00000E0B 72AA                <1>     jb .exit         ;If so, exit with it in eax
   390 00000E0D B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   391 00000E12 E9A0FFFFFF          <1>     jmp .exit
   392                              <1> 
   393                              <1> writeFAT:
   394                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   395                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   396                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   397                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   398                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   399 00000E17 53                  <1>     push rbx
   400 00000E18 51                  <1>     push rcx
   401 00000E19 52                  <1>     push rdx
   402 00000E1A 56                  <1>     push rsi
   403 00000E1B 57                  <1>     push rdi
   404 00000E1C 55                  <1>     push rbp
   405 00000E1D 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   406 00000E1F 89DE                <1>     mov esi, ebx    ;Save the cluster value in esi
   407 00000E21 E89EFDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   408                              <1>     ;and FAT type in ecx
   409 00000E26 E8EEFCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   410 00000E2B 721E                <1>     jc .exitFail
   411                              <1>     ;Check if FAT 12, 16, 32
   412 00000E2D 85C9                <1>     test ecx, ecx
   413 00000E2F 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   414 00000E31 F7C101000000        <1>     test ecx, 1
   415 00000E37 7407                <1>     jz .goToNextClusterFat32
   416                              <1>     ;Here we handle FAT16
   417 00000E39 66897C1330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], di ;Store the value
   418 00000E3E EB0A                <1>     jmp short .exit
   419                              <1> .goToNextClusterFat32:
   420 00000E40 81E7FFFFFF0F        <1>     and edi, 0FFFFFFFh  ;Zero upper nybble
   421 00000E46 897C1330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], edi
   422                              <1> .exit:
   423 00000E4A F8                  <1>     clc
   424                              <1> .exitFail:
   425 00000E4B E84DFBFFFF          <1>     call setBufferReferenced    ;We are done with the disk buffer
   426 00000E50 5D                  <1>     pop rbp
   427 00000E51 5F                  <1>     pop rdi
   428 00000E52 5E                  <1>     pop rsi
   429 00000E53 5A                  <1>     pop rdx
   430 00000E54 59                  <1>     pop rcx
   431 00000E55 5B                  <1>     pop rbx
   432                              <1>     return
    18                              <2> %%_ret:
    19 00000E56 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   433                              <1> .gotoNextClusterFat12:
   434                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   435                              <1> ;eax has the sector number of the FAT
   436                              <1> ;edx has byte offset into the sector
   437                              <1> ;edi has current cluster number
   438                              <1> ;rbx has ptr to buffer header
   439 00000E57 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   440 00000E5D F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   441 00000E63 7445                <1>     jz .gotoNextClusterFat12Even
   442                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   443 00000E65 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   444 00000E69 29D1                <1>     sub ecx, edx
   445 00000E6B FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   446 00000E6D 752C                <1>     jnz .gotoNextClusterFat12NoCross
   447                              <1>     ;Boundary cross, build entry properly
   448                              <1>     ;Replace the high nybble of the low byte 
   449 00000E6F 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   450 00000E74 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   451 00000E7A C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   452 00000E7D 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   453 00000E7F C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   454 00000E82 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   455 00000E86 E812FBFFFF          <1>     call setBufferReferenced  ;We are done with the current buffer
   456 00000E8B FFC0                <1>     inc eax ;Get next FAT sector
   457 00000E8D E887FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   458 00000E92 72B7                <1>     jc .exitFail
   459 00000E94 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   460 00000E96 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   461 00000E99 EBAF                <1>     jmp short .exit
   462                              <1> .gotoNextClusterFat12NoCross:
   463 00000E9B 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   464 00000EA0 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   465 00000EA5 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   466 00000EA8 EB0A                <1>     jmp short .fat12common
   467                              <1> .gotoNextClusterFat12Even:
   468                              <1>     ;Here the cluster is even and can't cross a sector boundary
   469 00000EAA 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   470 00000EAF 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   471                              <1> .fat12common:
   472 00000EB4 09F0                <1>     or eax, esi     ;Add the new entry bits
   473 00000EB6 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   474 00000EBB E98AFFFFFF          <1>     jmp .exit
    23                                  %include "./Source/Kernel/FAT/findfile.asm"
    24                              <1> ;Generic Find First and Find Next functions here
    25                              <1> findNextMain:
    26 00000EC0 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    27 00000EC7 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    28 00000ECA 7408                <1>     jz .notNet
    29 00000ECC B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    30 00000ED1 CD4F                <1>     int 4Fh
    31                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00000ED3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                              <1> .notNet:
    33 00000ED4 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    34 00000ED6 FEC0                <1>     inc al  ;Convert into 1 based number
    35 00000ED8 E8BB340000          <1>     call dosCrit1Enter
    36 00000EDD E8B7300000          <1>     call setDrive   ;Set CDS and current drive vars
    37 00000EE2 720C                <1>     jc .critError   ;Return error if this fails
    38 00000EE4 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
    39 00000EEB E8D62D0000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    40                              <1> .critError:
    41 00000EF0 E8AD340000          <1>     call dosCrit1Exit
    42                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000EF5 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    43 00000EF7 E801000000          <1>     call searchMoreDir
    44                              <1>     return
    18                              <2> %%_ret:
    19 00000EFC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    45                              <1> searchMoreDir:
    46                              <1> ;The three directory variables are set up from the ffblock. 
    47                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    48                              <1> ;Current DTA is also used to contain the ff block address
    49                              <1> ;All registers can be trashed
    50 00000EFD 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
    51                              <1>     ;First setup dirClustA and dirSect vars
    52 00000F04 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
    53 00000F0B 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    54 00000F0E 8805(56C60300)      <1>     mov byte [searchAttr], al   ;And save it
    55 00000F14 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    56 00000F17 8905(D5C60300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    57 00000F1D 8905(D1C60300)      <1>     mov dword [dirClustPar], eax
    58                              <1>     ;Get number of 32 byte entries in a sector
    59 00000F23 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    60                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    61 00000F26 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    62                              <1>     ;Now get bytes per cluster
    63 00000F29 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    64 00000F2B 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    65 00000F2F 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    66 00000F33 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    67 00000F35 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    68 00000F37 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    69 00000F39 31D2                <1>     xor edx, edx
    70 00000F3B F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    71                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    72                              <1>     ;edx has byte offset into cluster (or Root dir)
    73 00000F3D 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    74                              <1>     ;Now compute sector offset into cluster
    75 00000F3F 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    76 00000F43 89D0                <1>     mov eax, edx    ;Move offset into cluster
    77 00000F45 31D2                <1>     xor edx, edx
    78 00000F47 F7F1                <1>     div ecx 
    79                              <1>     ;eax now has sector offset into cluster (or root dir)
    80                              <1>     ;edx has byte offset into sector 
    81 00000F49 668905(D9C60300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    82 00000F50 C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    83 00000F53 8915(DBC60300)      <1>     mov dword [dirEntry], edx
    84 00000F59 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    85 00000F5F 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    86 00000F61 7461                <1>     jz .oldFat
    87                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    88 00000F63 89D9                <1>     mov ecx, ebx
    89 00000F65 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    90                              <1> .fatlp:
    91 00000F68 E801FEFFFF          <1>     call walkFAT
    92 00000F6D 3DFFFFFFFF          <1>     cmp eax, -1
    93 00000F72 7464                <1>     je .errorExit
    94 00000F74 FFC9                <1>     dec ecx
    95 00000F76 75F0                <1>     jnz .fatlp
    96 00000F78 8905(D5C60300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    97                              <1> .skipFatWalk:
    98 00000F7E 488D059B000000      <1>     lea rax, searchDir.nextEp
    99 00000F85 50                  <1>     push rax    ;Push the return address onto stack
   100 00000F86 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]
   101 00000F8C E87FFCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   102 00000F91 0FB71D(D9C60300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   103 00000F98 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   104                              <1> .common:
   105 00000F9B E87EFBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   106 00000FA0 0F8218010000        <1>     jc searchDir.hardError
   107 00000FA6 E816010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   108 00000FAB 8B05(DBC60300)      <1>     mov eax, dword [dirEntry]
   109 00000FB1 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   110 00000FB3 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   111 00000FB6 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   112                              <1>     ;We continue AS IF this entry was bad
   113                              <1>     ;Now setup al as upon normal entry 
   114 00000FB9 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   115 00000FBF E944010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within findInBuffer
   116                              <1>     ;The return address on the stack will return to the ep's pushed
   117                              <1> .oldFat:
   118                              <1> ;Old FAT 12/16 root dirs fall thru here only
   119 00000FC4 488D05D4000000      <1>     lea rax, searchDir.oldNextEP
   120 00000FCB 50                  <1>     push rax    ;Push return address onto the stack
   121 00000FCC 0FB705(D9C60300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   122 00000FD3 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   123 00000FD6 EBC3                <1>     jmp short .common
   124                              <1> .errorExit:
   125 00000FD8 F9                  <1>     stc
   126                              <1>     return
    18                              <2> %%_ret:
    19 00000FD9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   127                              <1> searchDir:
   128                              <1> ;Called in a level 1 critical section. 
   129                              <1> ;The three directory variables are set and the ffblock is setup
   130                              <1> ; with template, drive number and attribute fields. 
   131                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   132                              <1> ;Current DTA is also used to contain the ff block address
   133                              <1> ;All registers can be trashed
   134                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   135                              <1> 
   136                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   137                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   138 00000FDA 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   139 00000FE1 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   140 00000FE7 7408                <1>     jz .notNet
   141 00000FE9 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   142 00000FEE CD4F                <1>     int 4fh
   143                              <1>     return
    18                              <2> %%_ret:
    19 00000FF0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   144                              <1> .notNet:
   145 00000FF1 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   146 00000FF8 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   147 00000FFE 85C0                <1>     test eax, eax
   148 00001000 0F847E000000        <1>     jz .oldRoot
   149 00001006 E805FCFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   150                              <1> .sectorLoop:
   151 0000100B E80EFBFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   152 00001010 0F82A8000000        <1>     jc .hardError
   153 00001016 E8A6000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   154 0000101B E8B5000000          <1>     call findInBuffer
   155                              <1> .nextEp:
   156                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001020 73CE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   157                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   158                              <1>     ;IF however, the next cluster is -1, then we return fail
   159 00001022 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   160 00001028 8905(A6C60300)      <1>     mov dword [currClustD], eax
   161 0000102E 668B05(D9C60300)    <1>     mov ax, word [dirSect]
   162 00001035 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   163 0000103B 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   164 0000103F 488905(AFC60300)    <1>     mov qword [currSectD], rax  
   165 00001046 C705(A2C60300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   165 0000104E 0000                <1>
   166 00001050 E88DFCFFFF          <1>     call getNextSectorOfFile
   167 00001055 7267                <1>     jc .hardError
   168 00001057 483DFFFFFFFF        <1>     cmp rax, -1
   169 0000105D 745B                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   170 0000105F 66FF05(D9C60300)    <1>     inc word [dirSect]  ;Goto next sector
   171 00001066 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   172 0000106C 3B05(A6C60300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   173 00001072 7497                <1>     je .sectorLoop  ;If not, we advanced sectors only
   174 00001074 66C705(D9C60300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   174 0000107C 00                  <1>
   175 0000107D E81BF9FFFF          <1>     call setBufferReferenced    ;We are done with the current buffer
   176 00001082 EB87                <1>     jmp short .sectorLoop 
   177                              <1> 
   178                              <1> .oldRoot:
   179                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   180                              <1> ; one large contiguous cluster.
   181                              <1> ;   ecx = Number of entries per sector
   182                              <1> .oldSectorLp:
   183 00001084 0FB705(D9C60300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   184 0000108B 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   185 0000108E E88BFAFFFF          <1>     call getBufForDOS
   186 00001093 7229                <1>     jc .hardError
   187 00001095 E827000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   188 0000109A E836000000          <1>     call findInBuffer
   189                              <1> .oldNextEP:
   190                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 0000109F 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000010A1 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   191 000010A2 66FF05(D9C60300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   192 000010A9 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   193 000010AC 663905(DBC60300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   194 000010B3 E8E5F8FFFF          <1>     call setBufferReferenced    ;We are done with this buffer
   195 000010B8 72CA                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   196                              <1> .fnfError:
   197 000010BA B012                <1>     mov al, errNoFil
   198 000010BC F9                  <1>     stc
   199                              <1>     return
    18                              <2> %%_ret:
    19 000010BD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   200                              <1> .hardError:
   201 000010BE B0FF                <1>     mov al, -1
   202                              <1>     return
    18                              <2> %%_ret:
    19 000010C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   203                              <1> adjustDosDirBuffer:
   204 000010C1 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   205 000010C5 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   206 000010C9 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   207 000010CD 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   208 000010D1 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   209                              <1>     return
    18                              <2> %%_ret:
    19 000010D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> findInBuffer:
   212                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   213                              <1> ;       rsi = Sector buffer data area
   214                              <1> ;Output: CF=CY => No entries found
   215                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   216 000010D5 8A05(56C60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   217 000010DB E875000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   218                              <1> .searchMainLp:
   219 000010E0 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   220 000010E3 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   221 000010E6 803D(CAC30300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   222 000010ED 742C                <1>     je .exclusiveDir
   223 000010EF 80FC08              <1>     cmp ah, dirVolumeID
   224 000010F2 742E                <1>     je .volFile
   225 000010F4 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   226 000010F6 7710                <1>     ja .nextEntry
   227                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   228                              <1> .scanName:
   229 000010F8 56                  <1>     push rsi
   230 000010F9 488D3D(DBC50300)    <1>     lea rdi, fcbName ;Goto name template to search for
   231 00001100 E838000000          <1>     call .nameCompare
   232 00001105 5E                  <1>     pop rsi
   233 00001106 7420                <1>     je .searchEntryFound
   234                              <1> .nextEntry:
   235                              <1> ;Go to next entry
   236 00001108 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   237 0000110F FF05(DBC60300)      <1>     inc dword [dirEntry] ;And denote that in variable
   238 00001115 FFC9                <1>     dec ecx
   239 00001117 75C7                <1>     jnz .searchMainLp
   240 00001119 F9                  <1>     stc
   241                              <1>     return
    18                              <2> %%_ret:
    19 0000111A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> .exclusiveDir:
   243                              <1> ;Used when going down a path, dir bit simply need be set
   244 0000111B F6C410              <1>     test ah, dirDirectory
   245 0000111E 75D8                <1>     jnz .scanName
   246 00001120 EBE6                <1>     jmp short .nextEntry
   247                              <1> 
   248                              <1> .volFile:
   249 00001122 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   250 00001124 74D2                <1>     je .scanName       ;If so, scan the name agrees
   251 00001126 EBE0                <1>     jmp short .nextEntry    ;Else, goto next entry
   252                              <1> 
   253                              <1> .searchEntryFound:
   254                              <1> ;Here a good entry was found!
   255 00001128 57                  <1>     push rdi
   256 00001129 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   257 0000112B 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
   258 00001132 B904000000          <1>     mov ecx, 32/8
   259 00001137 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   260 0000113A 5F                  <1>     pop rdi
   261 0000113B F8                  <1>     clc
   262                              <1>     return
    18                              <2> %%_ret:
    19 0000113C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   263                              <1> 
   264                              <1> .nameCompare:
   265                              <1> ;Input: rsi = source string
   266                              <1> ;       rdi = string template to compare against
   267                              <1> ;Output: ZF=ZE => Strings are ok
   268                              <1> ;        ZF=NZ => Strings not ok
   269                              <1> ;Accepts wildcards. Trashes al
   270 0000113D 51                  <1>     push rcx
   271 0000113E 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   272                              <1> .ncLp:
   273 00001140 81F90B000000        <1>     cmp ecx, 11
   274 00001146 740B                <1>     je .ncExit
   275 00001148 FFC1                <1>     inc ecx
   276 0000114A A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   277 0000114B 74F3                <1>     je .ncLp    ;If equal, keep going
   278 0000114D 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   279 00001151 74ED                <1>     je .ncLp
   280                              <1> .ncExit:
   281 00001153 59                  <1>     pop rcx
   282                              <1>     return
    18                              <2> %%_ret:
    19 00001154 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> adjustSearchAttr:
   285                              <1> ;Converts the byte to a system only if the bit is set
   286                              <1> ;Input: eax = User selected search mask
   287                              <1> ;Output: eax = Modified search mask
   288 00001155 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   289 0000115A A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   290                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000115F 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   291 00001161 B808000000          <1>     mov eax, dirVolumeID
   292                              <1>     return
    18                              <2> %%_ret:
    19 00001166 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> 
   294                              <1> asciiToFCB:
   295                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   296                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   297                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   298                              <1> ;Name is space padded.
   299                              <1> ;Input: rsi = ASCII string buffer
   300                              <1> ;       rdi = FCB name buffer
   301                              <1> ;Output: al = Char that terminated the source string 
   302 00001167 53                  <1>     push rbx    
   303 00001168 57                  <1>     push rdi
   304 00001169 B90B000000          <1>     mov ecx, 11
   305 0000116E B020                <1>     mov al, " "
   306 00001170 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   307 00001172 5F                  <1>     pop rdi
   308 00001173 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   309                              <1> .processName:
   310 00001176 AC                  <1>     lodsb   ;Get the char in al
   311 00001177 E81E2F0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   312 0000117C 84C0                <1>     test al, al
   313 0000117E 742D                <1>     jz .exit
   314                              <1>     ;Test if the char is valid
   315 00001180 E847300000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   316 00001185 7426                <1>     jz .exit    ;If the char invalid, consider it a terminator
   317 00001187 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   318 00001189 7407                <1>     je .extSpace
   319 0000118B 3C2E                <1>     cmp al, "."
   320 0000118D 740C                <1>     je .ext
   321 0000118F AA                  <1>     stosb   ;Store the char
   322 00001190 EBE4                <1>     jmp short .processName
   323                              <1> .extSpace:
   324                              <1> ;Now we scan for a period in the name
   325 00001192 AC                  <1>     lodsb   ;Get a char and increase rsi
   326 00001193 84C0                <1>     test al, al
   327 00001195 7416                <1>     jz .exit
   328 00001197 3C2E                <1>     cmp al, "."     ;If al is not a period...
   329 00001199 75F7                <1>     jne .extSpace   ; keep searching
   330                              <1> .ext:
   331 0000119B 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   332                              <1> .processExt:
   333 0000119F AC                  <1>     lodsb
   334 000011A0 84C0                <1>     test al, al
   335 000011A2 7409                <1>     jz .exit
   336 000011A4 3C20                <1>     cmp al, " "
   337 000011A6 7405                <1>     je .exit
   338 000011A8 AA                  <1>     stosb
   339 000011A9 EBF4                <1>     jmp short .processExt
   340                              <1> .exitBadChar:
   341 000011AB 30C0                <1>     xor al, al  ;Return a null terminator
   342                              <1> .exit:
   343 000011AD 5B                  <1>     pop rbx
   344                              <1>     return
    18                              <2> %%_ret:
    19 000011AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> 
   346                              <1> FCBToAsciiz:
   347                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   348                              <1> ;Name is space padded too
   349                              <1> ;Input: rsi = FCB name buffer
   350                              <1> ;       rdi = ASCIIZ string buffer
   351 000011AF B908000000          <1>     mov ecx, 8
   352 000011B4 F3A4                <1>     rep movsb   ;Move the name over
   353                              <1> .scanNameSpace:
   354 000011B6 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   355 000011BA 750D                <1>     jne .ext
   356 000011BC 48FFCF              <1>     dec rdi
   357 000011BF FFC1                <1>     inc ecx
   358 000011C1 81F908000000        <1>     cmp ecx, 8
   359 000011C7 72ED                <1>     jb .scanNameSpace
   360                              <1> .ext:
   361 000011C9 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   362 000011CE 7506                <1>     jne .validExt
   363 000011D0 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   364 000011D4 7415                <1>     je .exit
   365                              <1> .validExt:
   366 000011D6 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   367 000011D8 AA                  <1>     stosb
   368 000011D9 B903000000          <1>     mov ecx, 3
   369 000011DE F3A4                <1>     rep movsb   ;Move the three extension chars over
   370                              <1> .scanExtSpace:
   371 000011E0 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   372 000011E4 7505                <1>     jne .exit
   373 000011E6 48FFCF              <1>     dec rdi
   374 000011E9 EBF5                <1>     jmp short .scanExtSpace
   375                              <1> .exit:
   376 000011EB 31C0                <1>     xor eax, eax
   377 000011ED AA                  <1>     stosb   ;Store a null at the end
   378                              <1>     return
    18                              <2> %%_ret:
    19 000011EE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   379                              <1> 
   380                              <1> setupFFBlock:
   381                              <1> ;Sets up the find first block for the search
   382                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   383 000011EF 50                  <1>     push rax
   384 000011F0 53                  <1>     push rbx
   385 000011F1 56                  <1>     push rsi
   386 000011F2 57                  <1>     push rdi
   387 000011F3 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   388 000011F6 8A05(56C60300)      <1>     mov al, byte [searchAttr]
   389 000011FC 243F                <1>     and al, 3Fh ;Clear upper two bits
   390 000011FE 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   391 00001201 0FB605(63C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   392 00001208 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   393                              <1>     ;xchg bx, bx
   394 0000120A 488D35(DBC50300)    <1>     lea rsi, fcbName
   395 00001211 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   396 00001215 57                  <1>     push rdi
   397 00001216 48B820202020202020- <1>     mov rax, "        "
   397 0000121F 20                  <1>
   398 00001220 48AB                <1>     stosq
   399 00001222 66AB                <1>     stosw
   400 00001224 AA                  <1>     stosb
   401 00001225 5F                  <1>     pop rdi
   402 00001226 48A5                <1>     movsq   ;Move 8 chars
   403 00001228 66A5                <1>     movsw   ;Move 2 chars
   404 0000122A A4                  <1>     movsb   ;Move the final char
   405                              <1> 
   406 0000122B 8B05(DBC60300)      <1>     mov eax, dword [dirEntry]
   407 00001231 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   408 00001234 8B05(D1C60300)      <1>     mov eax, dword [dirClustPar]
   409 0000123A 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   410 0000123D 8A05(C6C50300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   411 00001243 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   412 00001246 8B05(D1C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   413 0000124C 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   414 0000124F 8B05(D7C50300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   415 00001255 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   416 00001258 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   417 0000125C 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   418 00001263 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   419                              <1> 
   420 00001268 5F                  <1>     pop rdi
   421 00001269 5E                  <1>     pop rsi
   422 0000126A 5B                  <1>     pop rbx
   423 0000126B 58                  <1>     pop rax
   424                              <1>     return
    18                              <2> %%_ret:
    19 0000126C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   425                              <1> 
   426                              <1> getDrvLetterFromPath:
   427                              <1> ;Gets the drive letter for the path in al
   428                              <1> ;Input: rsi = Buffer to process
   429                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   430                              <1> ;       ZF=ZE and al = 0 => Null path
   431                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   432                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   433                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   434 0000126D 30C0                <1>     xor al, al
   435 0000126F 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   436                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001272 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   437 00001274 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   438                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001278 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   439 0000127A 66AD                <1>     lodsw   ;Get first word, rsi += 2
   440                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   441 0000127C 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   442 0000127E 2C60                <1>     sub al, 60h
   443                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001280 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   444 00001282 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   445                              <1>     return
    18                              <2> %%_ret:
    19 00001284 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   446                              <1> canonicaliseFileName:
   447                              <1> ;Always trying to build and qualify a full pathname
   448                              <1> ;Does getPath without hitting the disk
   449 00001285 B0FF                <1>     mov al, -1
   450 00001287 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   451 0000128D 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   452 00001293 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   453 0000129A FEC0                <1>     inc al  ;make al = 0
   454 0000129C 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   455 000012A2 EB21                <1>     jmp short getPath.epAlt
   456                              <1> getDirPath:
   457 000012A4 30C0                <1>     xor al, al   ;Set to Directory
   458 000012A6 EB02                <1>     jmp short getPath
   459                              <1> getFilePath:
   460 000012A8 B0FF                <1>     mov al, -1  ;Set to File
   461                              <1> getPath:
   462                              <1> ;Determines whether the path is spliced or not and transfers the chars
   463                              <1> ; from the user buffer into an internal buffer, normalising them.
   464                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   465                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   466                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   467                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   468                              <1> ; we let it do its thing and return.
   469                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   470                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   471                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   472                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   473                              <1> ; (converted from using machine name by the net client program).
   474                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   475                              <1> ; was good.
   476                              <1> ;Called with:
   477                              <1> ; rdi = SDA Buffer for filename
   478                              <1> ; rsi = Potentially unqualified filename
   479                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   480 000012AA 8805(CAC30300)      <1>     mov byte [fileDirFlag], al  
   481 000012B0 B0FF                <1>     mov al, -1
   482 000012B2 8805(5BC60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   483 000012B8 48893D(7FC50300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   484 000012BF 8805(8FC50300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   485                              <1> .epAlt:
   486 000012C5 C605(5FC60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   487 000012CC C605(5EC60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   488 000012D3 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   489 000012DA 7428                <1>     jz .notServer
   490                              <1>     ;In this case, the client network program will have correctly
   491                              <1>     ; substituted the drive letter for the path before making the request.
   492                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   493 000012DC E88CFFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   495                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   496                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   497                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   498                              <1>     ; these requirements.
   499                              <1>     ;When a server request is made, the request can ONLY be for a file on
   500                              <1>     ; a CDS drive.
   501 000012E1 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   502 000012E3 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   503 000012EA 50                  <1>     push rax
   504 000012EB E8A8300000          <1>     call dosCrit1Enter
   505 000012F0 E8D1290000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   506 000012F5 E8A8300000          <1>     call dosCrit1Exit
   507 000012FA 58                  <1>     pop rax
   508 000012FB 0F8382000000        <1>     jnc .driveOk
   509                              <1> .serverExit:
   510 00001301 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   511                              <1>     return
    18                              <2> %%_ret:
    19 00001303 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   512                              <1> .notServer:
   513                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   514 00001304 48C705(6CC60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   514 0000130C FFFFFF              <1>
   515 0000130F B823110000          <1>     mov eax, 1123h
   516 00001314 CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   517                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001316 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   518 00001318 E850FFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   519 0000131D 9C                  <1>     pushfq  ;Save the flag state on stack
   520 0000131E 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   521 0000131F 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   522 00001322 E8682D0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   523 00001327 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   524 00001329 E8612D0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   525 0000132E 7543                <1>     jnz .notNet
   526 00001330 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   527 00001332 753F                <1>     jne .notNet
   528 00001334 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   529 00001335 9D                  <1>     popfq
   530 00001336 66AD                <1>     lodsw
   531 00001338 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   532 0000133C 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   533                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   534                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   535                              <1> ; redirector Find First Without CDS
   536                              <1> 
   537 0000133E 8A1D(8FC50300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   538 00001344 C605(8FC50300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   539 0000134B 53                  <1>     push rbx
   540                              <1> .moveNetChars:
   541 0000134C AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   542 0000134D E8482D0000          <1>     call uppercaseChar  ;Make char in al uppercase
   543 00001352 84C0                <1>     test al, al
   544 00001354 740F                <1>     jz .netEnd
   545 00001356 E8342D0000          <1>     call swapPathSeparator  ;If path sep, swap it
   546 0000135B AA                  <1>     stosb
   547 0000135C 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   548 0000135E E86A000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   549 00001363 EBE7                <1>     jmp short .moveNetChars
   550                              <1> .netEnd:
   551 00001365 5B                  <1>     pop rbx
   552 00001366 AA                  <1>     stosb
   553 00001367 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   554                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001369 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   555 0000136B B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   556 00001370 CD4F                <1>     int 4Fh
   557                              <1>     return
    18                              <2> %%_ret:
    19 00001372 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   558                              <1> .notNet:
   559                              <1> ;This is the normal case; paths can be relative, or absolute.
   560 00001373 58                  <1>     pop rax ;Get the drive letter back
   561 00001374 9D                  <1>     popfq   ;Get the flag state back
   562 00001375 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   563                              <1> .pnfErr:
   564 00001377 B003                <1>     mov al, errPnf  ;Null path error
   565 00001379 F9                  <1>     stc
   566                              <1>     return
    18                              <2> %%_ret:
    19 0000137A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   567                              <1> .notNull:
   568 0000137B 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   569 0000137D 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   570 0000137F B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   571 00001381 F9                  <1>     stc
   572                              <1>     return
    18                              <2> %%_ret:
    19 00001382 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   573                              <1> .driveOk:
   574 00001383 84C0                <1>     test al, al
   575 00001385 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   576                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   577 00001387 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   578 0000138A 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   579 0000138C 50                  <1>     push rax    ;Save the drive letter
   580 0000138D AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   581 0000138E 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   582 00001391 E8F92C0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   583                              <1>     ;If al is a path separator, then this path is absolute.
   584 00001396 58                  <1>     pop rax ;Get back the drive letter
   585 00001397 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   586                              <1> .absoPath:
   587                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   588 00001399 48FFC6              <1>     inc rsi
   589 0000139C EB1A                <1>     jmp short .commonDir
   590                              <1> .curPath:
   591                              <1> ;This is only jumped to if we are relative the current drive
   592                              <1> ;rsi points to first char in path
   593                              <1> ;If this char is \ or /, then it is an absolute path.
   594 0000139E 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   595 000013A4 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   596 000013A6 50                  <1>     push rax    ;Save the current drive number
   597 000013A7 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   598 000013A9 E8E12C0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   599 000013AE 58                  <1>     pop rax ;Get back the current drive number
   600 000013AF 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   601                              <1> .relMain:
   602 000013B1 C605(5BC60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   603                              <1> .commonDir:
   604                              <1> ;rsi points to the start of the string we will be appending
   605 000013B8 E809000000          <1>     call pathWalk
   606 000013BD 7201                <1>     jc .badDriveExit
   607                              <1>     return
    18                              <2> %%_ret:
    19 000013BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   608                              <1> .badDriveExit:
   609 000013C0 B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   610                              <1>     return
    18                              <2> %%_ret:
    19 000013C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   611                              <1> 
   612                              <1> pathWalk:
   613                              <1> ;Input: rsi must point to source buffer for path to expand
   614                              <1> ;       rdi must point to a destination buffer
   615                              <1> ;       al must contain the drive 1 based number
   616 000013C6 E89E000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   617 000013CB 7265                <1>     jc .badDriveExit
   618                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   619                              <1>     ; resolution
   620                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   621 000013CD 4889FB              <1>     mov rbx, rdi
   622                              <1> .mainlp:
   623 000013D0 E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   624 000013D5 84C0                <1>     test al, al
   625 000013D7 7507                <1>     jnz .notFile
   626 000013D9 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   627                              <1> .notFile:
   628 000013E0 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   629 000013E1 E862030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   630 000013E6 58                  <1>     pop rax
   631 000013E7 736B                <1>     jnc .deviceFound
   632 000013E9 E824020000          <1>     call searchForPathspec  ;and search the directory
   633 000013EE 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   634 000013F0 E873020000          <1>     call addPathspecToBuffer
   635 000013F5 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   636 000013F7 84C0                <1>     test al, al ;Exit if this pathspec was a file
   637 000013F9 743D                <1>     jz .exitGood
   638                              <1>     ;Here I have to take the cluster data from the found directory entry
   639                              <1>     ; and setup the search for the next pathspec portion
   640                              <1>     ;Copy necessary data from the current directory copy
   641 000013FB 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   642 00001402 74CC                <1>     jz .mainlp
   643 00001404 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   644 0000140B C1E010              <1>     shl eax, 10h    ;Shift it high
   645 0000140E 668B05(D5C50300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   646                              <1>     ;eax now has the cluster number of the search
   647 00001415 8905(D5C60300)      <1>     mov dword [dirClustA], eax
   648 0000141B 8905(D1C60300)      <1>     mov dword [dirClustPar], eax
   649 00001421 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   650 00001423 8905(DBC60300)      <1>     mov dword [dirEntry], eax
   651 00001429 668905(D9C60300)    <1>     mov word [dirSect], ax
   652 00001430 EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   653                              <1> .badDriveExit:
   654 00001432 B812000000          <1>     mov eax, errNoFil ;No file for that spec found
   655                              <1>     return
    18                              <2> %%_ret:
    19 00001437 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   656                              <1> .exitGood:
   657 00001438 C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   658                              <1> .exit:
   659                              <1>     return
    18                              <2> %%_ret:
    19 0000143F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   660                              <1> .checkDev:
   661                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   662                              <1> ; we are in \DEV pseudo dir
   663 00001440 F605(CBC30300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   664 00001447 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   665                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   666 00001449 56                  <1>     push rsi
   667 0000144A 57                  <1>     push rdi
   668 0000144B E886020000          <1>     call checkDevPath
   669 00001450 5F                  <1>     pop rdi
   670 00001451 5E                  <1>     pop rsi
   671 00001452 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   672                              <1> .deviceFound:
   673 00001454 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   674 00001456 C605(5FC60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   675 0000145D C605(5EC60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   676 00001464 EBD9                <1>     jmp short .exit   
   677                              <1> .nodev:
   678 00001466 F9                  <1>     stc
   679 00001467 EBD6                <1>     jmp short .exit
   680                              <1> 
   681                              <1> prepareDir:
   682                              <1> ;Used to transfer the current directory if it is necessary.
   683                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   684                              <1> ; relative
   685                              <1> ;Input: al = 1-based drive letter
   686                              <1> ;Output: rdi = Pointing at where to place chars from source string
   687                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   688 00001469 56                  <1>     push rsi
   689 0000146A E8292F0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   690 0000146F E8252B0000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   691 00001474 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   692 00001476 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] 
   693 0000147D 57                  <1>     push rdi    ;Push CDS pointer on stack...
   694 0000147E E843280000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   695                              <1> .critExit:
   696 00001483 E81A2F0000          <1>     call dosCrit1Exit
   697 00001488 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   698 00001489 724A                <1>     jc .badDriveExit 
   699 0000148B 488B3D(7FC50300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   700                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   701                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   702                              <1>     ;   terminating char (\, / or Null)
   703                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   704                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   705 00001492 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   706 00001498 753D                <1>     jnz .prepDirJoin
   707 0000149A 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   708 000014A0 7556                <1>     jnz .prepDirSubst
   709                              <1> .prepMain:
   710                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   711 000014A2 F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   712 000014A9 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   713                              <1>     ;Else we copy the first two chars only (X:)
   714 000014AB 66A5                <1>     movsw  
   715 000014AD B05C                <1>     mov al, "\"
   716 000014AF AA                  <1>     stosb   ;Store the path separator and increment rdi
   717 000014B0 31C0                <1>     xor eax, eax    ;Get cluster 0
   718 000014B2 EB1B                <1>     jmp short .prepDirExitSkip
   719                              <1> .prepLoop:
   720 000014B4 AC                  <1>     lodsb
   721 000014B5 84C0                <1>     test al, al ;If al was null, then we stop
   722 000014B7 7403                <1>     jz .prepDirExit
   723 000014B9 AA                  <1>     stosb
   724 000014BA EBF8                <1>     jmp short .prepLoop
   725                              <1> .prepDirExit:
   726 000014BC 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   727 000014C0 7403                <1>     je .prepDirExitSkipPathsep
   728 000014C2 B05C                <1>     mov al, "\"
   729 000014C4 AA                  <1>     stosb   ;Store the path separator and increment rdi
   730                              <1> .prepDirExitSkipPathsep:
   731 000014C5 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   732 000014CC 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   733                              <1> .prepDirExitSkip:
   734 000014CF E837000000          <1>     call .prepSetupDirSearchVars
   735 000014D4 F8                  <1>     clc ;Clear carry before exiting
   736                              <1> .badDriveExit:
   737 000014D5 5E                  <1>     pop rsi
   738                              <1>     return
    18                              <2> %%_ret:
    19 000014D6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   739                              <1> .prepDirJoin:
   740 000014D7 51                  <1>     push rcx
   741 000014D8 56                  <1>     push rsi
   742 000014D9 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   743 000014E0 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   744                              <1> .prepDirJoin1:
   745 000014E5 AC                  <1>     lodsb   ;Get the char
   746 000014E6 84C0                <1>     test al, al ;Null char?
   747 000014E8 740B                <1>     jz .prepDirJoin2
   748 000014EA E8A02B0000          <1>     call swapPathSeparator
   749 000014EF 7404                <1>     jz .prepDirJoin2
   750 000014F1 FFC1                <1>     inc ecx ;Accrue length to copy
   751 000014F3 EBF0                <1>     jmp short .prepDirJoin1
   752                              <1> .prepDirJoin2:
   753 000014F5 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   754 000014F6 EB05                <1>     jmp short .prepDirCopy1
   755                              <1> .prepDirSubst:
   756 000014F8 51                  <1>     push rcx
   757 000014F9 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   758                              <1> .prepDirCopy1:
   759 000014FD F3A4                <1>     rep movsb   ;Copy the string over
   760 000014FF 59                  <1>     pop rcx
   761 00001500 F605(5BC60300)FF    <1>     test byte [spliceFlag], -1
   762 00001507 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   763 00001509 EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   764                              <1> .prepSetupDirSearchVars:
   765                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   766                              <1> ;       rbp = DPB pointer for the device which will do transaction
   767 0000150B 51                  <1>     push rcx
   768 0000150C 31C9                <1>     xor ecx, ecx
   769 0000150E 66890D(D9C60300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   770 00001515 890D(DBC60300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   771 0000151B E882F6FFFF          <1>     call getFATtype ;Get type of fat
   772 00001520 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   773 00001526 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   774                              <1>     ;FAT 32 here
   775 00001528 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   776 0000152A 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   777 0000152C 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   778                              <1> .psdsvExit:
   779 0000152F 8905(D5C60300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   780 00001535 8905(D1C60300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   781 0000153B 59                  <1>     pop rcx
   782                              <1>     return 
    18                              <2> %%_ret:
    19 0000153C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   783                              <1> 
   784                              <1> copyPathspec:
   785                              <1> ;1) Copies a path portion from the source buffer to the destination
   786                              <1> ;2) Advances rsi to the next null, \ or /
   787                              <1> ;3) Expands all * to ?'s
   788                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   789                              <1> ;    next path separator
   790                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   791                              <1> ;    with rsi moving to path separator
   792                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   793                              <1> ;
   794                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   795                              <1> ;           rdi = Points to where to store it
   796                              <1> ;
   797                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   798                              <1> ;           rdi = First char of next space to store next pathspec
   799                              <1> ;           al = Last char stored (either \ or NULL)
   800                              <1> ;           CF=NC = OK path
   801                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   802                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   803 0000153D 57                  <1>     push rdi    ;Save the pointer into the user buffer
   804 0000153E C605(EEC30300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   805 00001545 488D3D(DBC50300)    <1>     lea rdi, fcbName
   806 0000154C 57                  <1>     push rdi
   807 0000154D B903000000          <1>     mov ecx, 3
   808 00001552 B820202020          <1>     mov eax, "    " ;Four spaces
   809 00001557 F3AB                <1>     rep stosd   ;Store 12 spaces
   810 00001559 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   811                              <1> 
   812 0000155A B908000000          <1>     mov ecx, 8 ;8 chars to move over, when ecx = 0, the char must be . or term
   813 0000155F B501                <1>     mov ch, 1   ;Set that we are in name field
   814 00001561 AC                  <1>     lodsb   ;Get first char from user path in al
   815 00001562 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   816 00001564 7459                <1>     je .cpsDots
   817 00001566 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   818                              <1> ;First char is not a dot, so now check if starts with E5h? 
   819                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   820 00001569 3CE5                <1>     cmp al, 0E5h
   821 0000156B 7508                <1>     jne .cpsMainLoop
   822 0000156D 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   823 00001570 B005                <1>     mov al, 05h
   824 00001572 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   825 00001573 FEC9                <1>     dec cl  ;One less char to tfr
   826                              <1> .cpsMainLoop:
   827 00001575 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   828 00001576 84C0                <1>     test al, al ;Is it the null char?
   829 00001578 0F848A000000        <1>     jz .cpsProcessName  ;If so, terminate immediately
   830 0000157E E80C2B0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   831 00001583 7449                <1>     jz .cpsCharSkip2 ; and then exit with the final converted pathsep in al
   832 00001585 3C2E                <1>     cmp al, "." ;Filename extension separator
   833 00001587 7428                <1>     je .cpsExtension
   834 00001589 81F900010000        <1>     cmp ecx, 0100h  ;If ch = 1 and cl = 0, then look for either . or terminator
   835 0000158F 74E4                <1>     je .cpsMainLoop
   836 00001591 67E333              <1>     jecxz .cpsCharSkip ;If ch = 0 and cl = 0, scan for next terminator
   837                              <1>     ;If we have space in the filename, we check to see if the next char is *
   838 00001594 3C2A                <1>     cmp al, "*" ;Wildcard?
   839 00001596 743D                <1>     je .cpsWildcard
   840 00001598 3C3F                <1>     cmp al, "?" ;Good wildcard?
   841 0000159A 740C                <1>     je .store
   842 0000159C E8F92A0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   843 000015A1 E8262C0000          <1>     call checkCharValid ; and check it is a valid char
   844 000015A6 7405                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   845                              <1> .store:
   846 000015A8 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   847 000015A9 FEC9                <1>     dec cl  ;One less char left to tfr
   848 000015AB EBC8                <1>     jmp short .cpsMainLoop
   849                              <1> .cpsInvalidChar:
   850 000015AD 30C0                <1>     xor al, al
   851 000015AF EB57                <1>     jmp short .cpsProcessName
   852                              <1> .cpsExtension:
   853                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   854 000015B1 B903000000          <1>     mov ecx, 3  ;Set to 3 chars left, in extension (ch = 0)
   855 000015B6 488D3D(E3C50300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   856 000015BD EBB6                <1>     jmp short .cpsMainLoop
   857                              <1> .cpsDots:
   858 000015BF AA                  <1>     stosb   ;Store the first dot
   859 000015C0 8A06                <1>     mov al, byte [rsi]
   860 000015C2 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   861 000015C4 7501                <1>     jne .cpsCharSkip
   862 000015C6 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   863                              <1> .cpsCharSkip:
   864 000015C7 E819000000          <1>     call .cpsPtrSkip    ;Now we are skipping any chars that arent terminators
   865 000015CC EB3A                <1>     jmp short .cpsProcessName
   866                              <1> .cpsCharSkip2:
   867 000015CE E81F000000          <1>     call .cpsPtrSkip2
   868 000015D3 EB33                <1>     jmp short .cpsProcessName
   869                              <1> .cpsWildcard:
   870                              <1>     ;cl has the number of chars of ? to store 
   871 000015D5 B03F                <1>     mov al, "?"
   872 000015D7 51                  <1>     push rcx
   873 000015D8 0FB6C9              <1>     movzx ecx, cl   ;Temporarily extend cl to ecx
   874 000015DB F3AA                <1>     rep stosb   ;Store that many ? in buffer and return cl to 0
   875 000015DD 59                  <1>     pop rcx
   876 000015DE F6C501              <1>     test ch, 1  ;Is this bit set? If so, we jump to .cpsExtension
   877 000015E1 75CE                <1>     jnz .cpsExtension   ;Now fill the extension field
   878                              <1>     ;Else, we process filename
   879 000015E3 EBE2                <1>     jmp short .cpsCharSkip
   880                              <1> .cpsPtrSkip:
   881                              <1> ;Now advance rsi past the next pathsep or null char
   882                              <1> ;If an invalid char is detected, it is considered to be a terminator
   883                              <1> ;Output: al = Terminator char (either \ or null)
   884                              <1> ;        rsi -> First char of next pathspec (if al = \)
   885 000015E5 AC                  <1>     lodsb
   886 000015E6 E8C92B0000          <1>     call checkCharOk
   887 000015EB 7418                <1>     je .cpsBadChar
   888 000015ED 84C0                <1>     test al, al ;Is this null?
   889                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 000015EF 7501                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000015F1 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   890                              <1> ;If the next char that will be read is a pathsep, inc rsi to it
   891                              <1> ;This is to avoid multiple successive pathseps
   892                              <1> .cpsPtrSkip2:
   893 000015F2 803E5C              <1>     cmp byte [rsi], "\"
   894 000015F5 74EE                <1>     je .cpsPtrSkip 
   895 000015F7 803E2F              <1>     cmp byte [rsi], "/"
   896 000015FA 74E9                <1>     je .cpsPtrSkip 
   897                              <1>     ;If the current char is the final pathsep, exit
   898 000015FC E88E2A0000          <1>     call swapPathSeparator
   899                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001601 74EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   900 00001603 EBE0                <1>     jmp short .cpsPtrSkip
   901                              <1> 
   902                              <1> .cpsBadChar:
   903 00001605 30C0                <1>     xor al, al  ;Convert the char to a terminator
   904                              <1>     return
    18                              <2> %%_ret:
    19 00001607 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   905                              <1> .cpsProcessName:
   906                              <1> ;Store the final char in the 12 space in the FCB name field
   907 00001608 488D3D(E6C50300)    <1>     lea rdi, fcbName+11
   908 0000160F AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   909 00001610 5F                  <1>     pop rdi
   910                              <1>     return
    18                              <2> %%_ret:
    19 00001611 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   911                              <1> 
   912                              <1> searchForPathspec:
   913                              <1>     ;Now search the current directory for this filename
   914                              <1>     ;Find first using SDA ffBlock
   915                              <1>     ;If al = 0, we have final file name or directory name
   916                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   917                              <1>     ;Output: CF=CY => Error occured
   918                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   919                              <1>     ;                 FF block somewhat setup
   920                              <1>     ;Preserves rax, rbx, rsi,  rdi
   921 00001612 50                  <1>     push rax
   922 00001613 53                  <1>     push rbx
   923 00001614 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   924 00001615 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   925 00001616 0FB61D(CAC30300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   926 0000161D 53                  <1>     push rbx    ;and push it onto the stack
   927                              <1> ;Evaluate whether we are searching for a file for a directory
   928 0000161E 84C0                <1>     test al, al
   929 00001620 741D                <1>     jz .sfpPNfile
   930                              <1>     ;Fall if subdir
   931 00001622 488D3D(DBC50300)    <1>     lea rdi, fcbName
   932 00001629 B03F                <1>     mov al, "?" ;Search for wildcard
   933 0000162B B90C000000          <1>     mov ecx, 12
   934 00001630 F2AE                <1>     repne scasb
   935 00001632 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   936 00001634 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   937 00001636 C605(CAC30300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   938 0000163D EB07                <1>     jmp short .sfpPNMain
   939                              <1> .sfpPNfile:
   940                              <1>     ;Here if we are searching for a file or directory as setup by search init
   941 0000163F 0FB605(56C60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   942                              <1> .sfpPNMain:
   943 00001646 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   944 0000164D 7405                <1>     je .sfpPNNoDisk
   945 0000164F E886F9FFFF          <1>     call searchDir
   946                              <1> .sfpPNNoDisk:
   947 00001654 5B                  <1>     pop rbx
   948 00001655 881D(CAC30300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
   949 0000165B 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
   950 0000165C 5E                  <1>     pop rsi
   951 0000165D 5B                  <1>     pop rbx
   952 0000165E 58                  <1>     pop rax
   953                              <1>     return
    18                              <2> %%_ret:
    19 0000165F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   954                              <1> .sfpPnf:
   955 00001660 B803000000          <1>     mov eax, errPnf
   956                              <1> .sfpErrExit:
   957 00001665 F9                  <1>     stc ;Set carry
   958 00001666 EBEC                <1>     jmp short .sfpPNNoDisk
   959                              <1> 
   960                              <1> addPathspecToBuffer:
   961                              <1> ;Input: fcbName = Qualified pathname portion
   962                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
   963                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
   964                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
   965                              <1> ;rbx points to the "head of the path"
   966 00001668 803D(DBC50300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
   967 0000166F 741F                <1>     je .aptbPNDots
   968                              <1>     ;Copy filename over to internal buffer
   969 00001671 56                  <1>     push rsi    ;Save source pointer position
   970 00001672 488D35(DBC50300)    <1>     lea rsi, fcbName
   971 00001679 E831FBFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   972 0000167E 48FFCF              <1>     dec rdi ;Go back to the copied Null char
   973 00001681 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
   974                              <1> .aptbOkExit:
   975 00001682 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
   976 00001685 E8052A0000          <1>     call swapPathSeparator
   977 0000168A 7402                <1>     jz .aptbPNexit
   978 0000168C 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
   979                              <1> .aptbPNexit:
   980 0000168E AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
   981                              <1>     return
    18                              <2> %%_ret:
    19 0000168F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   982                              <1> .aptbPNDots:
   983                              <1> ;For one dot, we leave rdi where it is
   984                              <1> ;For two dots, we search backwards for the previous "\"
   985 00001690 803D(DCC50300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
   986 00001697 F8                  <1>     clc ;Ensure we clear CF if we return via here
   987 00001698 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
   988                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000169B 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   989                              <1>     ;Here we have two dots
   990                              <1>     ;Walk rdi backwards until a \ is found
   991 0000169D 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
   992 000016A0 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
   993 000016A6 7427                <1>     je .aptbPnf
   994 000016A8 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
   995 000016AE 741F                <1>     je .aptbPnf
   996                              <1> .aptbPNDotsLp:
   997 000016B0 48FFCF              <1>     dec rdi
   998 000016B3 803F5C              <1>     cmp byte [rdi], "\"
   999 000016B6 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1000                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1001 000016B8 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1002 000016BF 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1003 000016C1 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1004 000016C4 7209                <1>     jb .aptbPnf
  1005 000016C6 EBBA                <1>     jmp short .aptbOkExit
  1006                              <1> .aptbSearchError:
  1007 000016C8 B812000000          <1>     mov eax, errNoFil
  1008 000016CD EB05                <1>     jmp short .aptbErrExit
  1009                              <1> .aptbPnf:
  1010 000016CF B803000000          <1>     mov eax, errPnf
  1011                              <1> .aptbErrExit:
  1012 000016D4 F9                  <1>     stc ;Set carry
  1013                              <1>     return
    18                              <2> %%_ret:
    19 000016D5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1014                              <1> 
  1015                              <1> checkDevPath:
  1016                              <1> ;Called only if the file/directory was not found on disk.
  1017                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1018                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1019                              <1> ; and check to see if it is a char device. If it is, build a directory
  1020                              <1> ; If it is not, proceed with the request fail.
  1021                              <1> ;
  1022                              <1> ;Input: rsi = Pointer to the next path spec
  1023                              <1> ;Output: CF=NC => Char device found, directory built
  1024                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1025 000016D6 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1026                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000016DD 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1027 000016DF 803D(E6C50300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1028 000016E6 7459                <1>     je .notOk                      
  1029                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1030 000016E8 50                  <1>     push rax
  1031 000016E9 48B844455620202020- <1>     mov rax, "DEV     "
  1031 000016F2 20                  <1>
  1032 000016F3 483905(DBC50300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1033 000016FA 58                  <1>     pop rax
  1034 000016FB 7544                <1>     jne .notOk
  1035 000016FD 813D(E3C50300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1035 00001705 205C                <1>
  1036 00001707 7538                <1>     jne .notOk
  1037                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1038                              <1>     ; looking for a device driver
  1039                              <1>     ;First append it to rdi 
  1040 00001709 B84445565C          <1>     mov eax, "DEV\" 
  1041 0000170E AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1042 0000170F 57                  <1>     push rdi
  1043 00001710 488D3D(DBC50300)    <1>     lea rdi, fcbName
  1044 00001717 E84BFAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1045                              <1>     ;Returns in al the terminating char of the source string
  1046 0000171C 5F                  <1>     pop rdi
  1047                              <1>     ;If al is a pathsep, fail
  1048 0000171D E86D290000          <1>     call swapPathSeparator
  1049 00001722 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1050 00001724 30C0                <1>     xor al, al
  1051 00001726 8805(E6C50300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1052 0000172C 53                  <1>     push rbx
  1053 0000172D E844000000          <1>     call checkIfCharDevice
  1054 00001732 5B                  <1>     pop rbx ;Don't need bh yet
  1055 00001733 720C                <1>     jc .notOk
  1056 00001735 E86D000000          <1>     call buildCharDir
  1057                              <1>     ;Here the device was determined to be a char device.
  1058                              <1>     ;A dummy directory entry was built for it.
  1059                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1060                              <1>     ; Do not Find Next!
  1061                              <1> .copyName:
  1062 0000173A E870FAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1063 0000173F F8                  <1>     clc
  1064                              <1>     return
    18                              <2> %%_ret:
    19 00001740 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1065                              <1> .notOk:
  1066 00001741 B812000000          <1>     mov eax, errNoFil
  1067 00001746 F9                  <1>     stc
  1068                              <1>     return
    18                              <2> %%_ret:
    19 00001747 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1069                              <1> .charDevSearch:
  1070 00001748 53                  <1>     push rbx
  1071 00001749 E828000000          <1>     call checkIfCharDevice
  1072 0000174E 5B                  <1>     pop rbx ;Dont need bh yet
  1073 0000174F 72F0                <1>     jc .notOk
  1074 00001751 E851000000          <1>     call buildCharDir
  1075 00001756 803D(E6C50300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1076 0000175D 750C                <1>     jne .cds2
  1077 0000175F 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1078 00001763 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1079 00001765 48FFCF              <1>     dec rdi
  1080 00001768 B02F                <1>     mov al, "/" ;Replace \ with "/"
  1081 0000176A AA                  <1>     stosb   ;Store that and let the dir write the filename
  1082                              <1> .cds2:
  1083 0000176B 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1084 00001772 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1085 00001774 F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1086                              <1>     return
    18                              <2> %%_ret:
    19 00001775 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1087                              <1> 
  1088                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1089                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1090                              <1> ; device driver chain. 
  1091                              <1> ;Output: CF=CY if not found
  1092                              <1> ;        CF=NC if found
  1093                              <1> ;           BH = Low byte of the device attribute word
  1094 00001776 50                  <1>     push rax
  1095 00001777 57                  <1>     push rdi
  1096 00001778 488B05(DBC50300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1097 0000177F 488D3D(73C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1098                              <1> .checkName:
  1099 00001786 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1100 0000178A 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1101 0000178C F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1102 0000178F 7406                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1103 00001791 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1104 00001795 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1105                              <1> .walkList:
  1106 00001797 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1107 0000179A 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1108 000017A1 75E3                <1>     jne .checkName  ;If no, rdi points to char device
  1109 000017A3 F9                  <1>     stc
  1110                              <1> .exit:
  1111 000017A4 5F                  <1>     pop rdi
  1112 000017A5 58                  <1>     pop rax
  1113                              <1>     return
    18                              <2> %%_ret:
    19 000017A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1114                              <1> 
  1115                              <1> buildCharDir:
  1116                              <1> ;Build a dummy directory entry for the char device in FCBName
  1117                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1118 000017A7 803D(8FC50300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1119                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017AE 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1120 000017B0 50                  <1>     push rax
  1121 000017B1 57                  <1>     push rdi
  1122 000017B2 C605(E6C50300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1123 000017B9 488D3D(BBC50300)    <1>     lea rdi, curDirCopy
  1124                              <1>     ;Zero the directory copy (32 bytes)
  1125 000017C0 50                  <1>     push rax
  1126 000017C1 51                  <1>     push rcx
  1127 000017C2 57                  <1>     push rdi
  1128 000017C3 31C0                <1>     xor eax, eax    ;Zero rax
  1129 000017C5 B904000000          <1>     mov ecx, 4
  1130 000017CA F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1131 000017CD 5F                  <1>     pop rdi
  1132 000017CE 59                  <1>     pop rcx
  1133 000017CF 58                  <1>     pop rax
  1134 000017D0 488B05(DBC50300)    <1>     mov rax, qword [fcbName]
  1135 000017D7 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1136 000017DA B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1137 000017DF 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1138 000017E2 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1139                              <1>     ;Get date and time and set the write time in the directory entry
  1140 000017E6 E8480C0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1141 000017EB E82E0D0000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1142 000017F0 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1143 000017F3 31C0                <1>     xor eax, eax
  1144 000017F5 5F                  <1>     pop rdi
  1145 000017F6 58                  <1>     pop rax
  1146                              <1>     return
    18                              <2> %%_ret:
    19 000017F7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1147                              <1> 
  1148                              <1> checkFailingComp:
  1149                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1150                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1151                              <1> ;Returns: ZF=ZE => Last path componant
  1152                              <1> ;         ZF=NZ => Not last path componant
  1153 000017F8 50                  <1>     push rax
  1154 000017F9 8A05(E6C50300)      <1>     mov al, byte [fcbName + 11]
  1155 000017FF 84C0                <1>     test al, al
  1156 00001801 58                  <1>     pop rax
  1157                              <1>     return
    18                              <2> %%_ret:
    19 00001802 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    24                                  %include "./Source/Kernel/FAT/dirfun.asm"
    25                              <1> ;---------------------------------------------------:
    26                              <1> ;                   KERNEL FUNCTIONS                :
    27                              <1> ;---------------------------------------------------:
    28                              <1> makeDIR:           ;ah = 39h
    29                              <1> ;For make, the path must exist but the final componant must not exist.
    30                              <1> ;Input: rdx = Pointer to ASCIIZ string
    31 00001803 4889D7              <1>     mov rdi, rdx
    32                              <1> .okLength:
    33 00001806 4889D6              <1>     mov rsi, rdx
    34 00001809 E817290000          <1>     call checkPathspecOK
    35 0000180E 7307                <1>     jnc .pathOk  ;Don't allow any malformed chars
    36                              <1> .badPath:
    37 00001810 B003                <1>     mov al, errPnf
    38 00001812 E9C02B0000          <1>     jmp extErrExit
    39                              <1> .pathOk:
    40 00001817 E885290000          <1>     call scanPathWC
    41 0000181C 72F2                <1>     jc .badPath ;Dont allow wildcards
    42 0000181E E8C0290000          <1>     call checkPathNet
    43 00001823 74EB                <1>     jz .badPath ;or network paths
    44                              <1>     ;Path is ok, now proceed
    45 00001825 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    46 0000182C E873FAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    47                              <1>     ;If the path exists, exit error
    48 00001831 0F83A02B0000        <1>     jnc extErrExit
    49                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    50 00001837 E8BCFFFFFF          <1>     call checkFailingComp
    51 0000183C 0F85952B0000        <1>     jnz extErrExit
    52                              <1>     ;So all is well, the new subdirectories name is in fcbName
    53                              <1>     ;The parent dir's directory entry is in the curDirCopy
    54                              <1> 
    55                              <1> removeDIR:         ;ah = 3Ah
    56                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
    57                              <1> ;Input: rdx = Pointer to ASCIIZ string
    58 00001842 4889D7              <1>     mov rdi, rdx
    59 00001845 E877280000          <1>     call strlen
    60 0000184A 81F940000000        <1>     cmp ecx, 64
    61 00001850 7607                <1>     jbe .okLength
    62                              <1> .badPath:
    63 00001852 B003                <1>     mov al, errPnf
    64 00001854 E97E2B0000          <1>     jmp extErrExit
    65                              <1> .okLength:
    66 00001859 4889D6              <1>     mov rsi, rdx
    67 0000185C E8C4280000          <1>     call checkPathspecOK
    68 00001861 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    69 00001863 E839290000          <1>     call scanPathWC
    70 00001868 72E8                <1>     jc .badPath ;Or wildcards
    71 0000186A E874290000          <1>     call checkPathNet
    72 0000186F 74E1                <1>     jz .badPath ;Or Net paths
    73                              <1>     ;Path is ok, now proceed
    74 00001871 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    75 00001878 E827FAFFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
    76 0000187D 0F82542B0000        <1>     jc extErrExit   ;Exit with error code in eax
    77                              <1>     ;The path must've been ok, so now copy the path into the CDS
    78                              <1>     ;The copy of the directory entry has the start cluster of this dir file
    79 00001883 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
    80 0000188A 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
    81 00001890 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
    82 00001892 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
    83 00001899 B95B000000          <1>     mov ecx, cds_size
    84 0000189E F3A4                <1>     rep movsb
    85                              <1>     ;If the path is longer than 67, call it an invalid path
    86 000018A0 488D3D(7FC40300)    <1>     lea rdi, buffer1
    87 000018A7 E815280000          <1>     call strlen ;Get the length of this path
    88 000018AC 81F943000000        <1>     cmp ecx, 67
    89 000018B2 779E                <1>     ja .badPath
    90 000018B4 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
    91 000018B7 488D3D(FBC50300)    <1>     lea rdi, tmpCDS
    92 000018BE F3A4                <1>     rep movsb   ;Copy the path over
    93                              <1>     ;Now get the start cluster from the directory copy
    94 000018C0 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
    95 000018C7 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
    96 000018CE C1E010              <1>     shl eax, 10h
    97 000018D1 09D0                <1>     or eax, edx ;Add low bits to eax
    98 000018D3 8905(48C60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
    99 000018D9 488D35(FBC50300)    <1>     lea rsi, tmpCDS
   100 000018E0 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   101 000018E7 B95B000000          <1>     mov ecx, cds_size
   102 000018EC E8A72A0000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   103 000018F1 F3A4                <1>     rep movsb
   104 000018F3 E8AA2A0000          <1>     call dosCrit1Exit
   105 000018F8 31C0                <1>     xor eax, eax
   106 000018FA E9CA2A0000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   107                              <1> .net:
   108                              <1> ;SDA Vars are setup for this request
   109 000018FF B805110000          <1>     mov eax, 1105h
   110 00001904 CD4F                <1>     int 4fh
   111 00001906 0F82CB2A0000        <1>     jc extErrExit
   112 0000190C E9B82A0000          <1>     jmp extGoodExit
   113                              <1> getCurrentDIR:     ;ah = 47h
   114                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   115                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   116 00001911 88D0                <1>     mov al, dl  ;Move drive number into al
   117 00001913 E8EA260000          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   118 00001918 0F82B92A0000        <1>     jc extErrExit
   119                              <1> .okDrive:
   120 0000191E 4889F7              <1>     mov rdi, rsi    ;Save destination in rdi
   121 00001921 E8722A0000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   122 00001926 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   123 0000192D 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   124 00001931 FFC0                <1>     inc eax ;Go past the backslash
   125 00001933 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   126 00001936 E896270000          <1>     call strcpy
   127 0000193B E8622A0000          <1>     call dosCrit1Exit
   128 00001940 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   129 00001945 E97F2A0000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   130                              <1> 
   131                              <1> getSetFileDateTime:;ah = 57h
   132                              <1> trueName:          ;ah = 60h, get fully qualified name. Int 4Fh, AX=1221h
   133                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   134 0000194A E8D6270000          <1>     call checkPathspecOK    ;This preserves rsi
   135 0000194F 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   136 00001951 740A                <1>     jz .pathspecOk  ;If the last char in the path is malformed allow it here
   137                              <1> .badPath:
   138 00001953 B803000000          <1>     mov eax, errPnf
   139 00001958 E97A2A0000          <1>     jmp extErrExit
   140                              <1> .pathspecOk:
   141 0000195D 57                  <1>     push rdi    ;Save the destination
   142 0000195E 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   143 00001965 E81BF9FFFF          <1>     call canonicaliseFileName
   144 0000196A C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   145 0000196D 5F                  <1>     pop rdi
   146 0000196E 0F82632A0000        <1>     jc extErrExit
   147 00001974 488D35(7FC40300)    <1>     lea rsi, buffer1
   148 0000197B E851270000          <1>     call strcpy
   149 00001980 31C0                <1>     xor eax, eax
   150 00001982 E9422A0000          <1>     jmp extGoodExit
   151                              <1> 
   152                              <1> ;-----------------------------------
   153                              <1> ;    General Directory Routines    :
   154                              <1> ;-----------------------------------
   155                              <1> 
   156                              <1> getDiskDirectoryEntry:
   157                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   158                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   159                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   160                              <1> ;        qword [tempSect] = Disk sector number of directory
   161                              <1> ;        word [entry] = 32 byte offset into sector
   162                              <1> ;        CF=CY => Error, exit 
   163 00001987 53                  <1>     push rbx
   164 00001988 8B05(D5C60300)      <1>     mov eax, dword [dirClustA]  
   165                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   166                              <1>     ; root directories of FAT12/16 drives.
   167 0000198E 0FB71D(D9C60300)    <1>     movzx ebx, word [dirSect]
   168 00001995 85C0                <1>     test eax, eax
   169 00001997 7405                <1>     jz .skipCluster
   170 00001999 E872F2FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   171                              <1> .skipCluster:
   172 0000199E 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   173 000019A1 488905(98C60300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   174 000019A8 E871F1FFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   175 000019AD 722A                <1>     jc .exit
   176 000019AF E80DF7FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   177                              <1>     ;Above function moves buffer ptr to rsi
   178 000019B4 0FB705(D9C60300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   179 000019BB 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   180 000019BF F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   181                              <1>     ; the current sector
   182 000019C1 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   183 000019C4 8B1D(DBC60300)      <1>     mov ebx, dword [dirEntry]
   184 000019CA 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   185 000019CC C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   186 000019CF 66891D(A0C60300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   187 000019D6 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   188                              <1> .exit:
   189 000019D9 5B                  <1>     pop rbx
   190                              <1>     return
    18                              <2> %%_ret:
    19 000019DA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   191                              <1> 
   192                              <1> findFreeDiskDirEntry:
   193                              <1> ;Find a space in the directory we are searching for a directory entry
   194                              <1> ;Accept first entry starting with a 0E5h or 00h
   195                              <1> 
   196                              <1> updateDirectoryEntryForFile:    
   197                              <1> ;Updates the directory entry for disk files
   198                              <1> ;Called with:
   199                              <1> ;   [workingDPB] = DPB pointer for the disk device
   200                              <1> ;   [currentSFT] = Current SFT pointer
   201 000019DB 50                  <1>     push rax
   202 000019DC 53                  <1>     push rbx
   203 000019DD 57                  <1>     push rdi
   204 000019DE 55                  <1>     push rbp
   205                              <1> 
   206 000019DF 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   207 000019E6 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB]
   208 000019ED 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   209 000019F3 751D                <1>     jnz .skipDT
   210                              <1>     ;Get date and time words and add them to the directory entry
   211 000019F5 E8390A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   212 000019FA 7265                <1>     jc .exit  ;If we fail to get time/date, fail the request
   213                              <1>     ;Build date and time words
   214 000019FC E81D0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   215                              <1>     ;Update SFT fields
   216 00001A01 66894713            <1>     mov word [rdi + sft.wTime], ax
   217 00001A05 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   218 00001A08 66894715            <1>     mov word [rdi + sft.wDate], ax
   219 00001A0C 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush  ;We update DT, so flush
   220                              <1> .skipDT:
   221                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   222                              <1> ; we skip all of this
   223 00001A12 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileToFlush
   224 00001A18 7447                <1>     jz .exit ;If the file was never written to, don't bother updating DIR data
   225 00001A1A 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   226 00001A1E E809F1FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   227 00001A23 723C                <1>     jc .exit    ;If an error is to be returned from, we skip the rest of this
   228                              <1>     ;Now we write the changes to the sector
   229 00001A25 4889DD              <1>     mov rbp, rbx    ;Move disk buffer header into rbp
   230                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   231 00001A28 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer 
   232 00001A2C 488D6D30            <1>     lea rbp, qword [rbp + bufferHdr.dataarea]   ;Goto data area
   233 00001A30 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   234 00001A34 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   235 00001A37 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   236 00001A3A 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   237 00001A3D 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   238 00001A40 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   239 00001A44 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   240 00001A48 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   241 00001A4C 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   242 00001A50 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   243                              <1>     ;Directory sector updated and marked to be flushed to disk!
   244                              <1>     ;Now mark that the file has sectors not yet flushed to disk
   245 00001A54 E844EFFFFF          <1>     call setBufferReferenced
   246 00001A59 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   247 00001A5A 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], blokFileToFlush
   248 00001A60 9D                  <1>     popfq
   249                              <1> .exit:
   250 00001A61 5D                  <1>     pop rbp
   251 00001A62 5F                  <1>     pop rdi
   252 00001A63 5B                  <1>     pop rbx
   253 00001A64 58                  <1>     pop rax
   254                              <1>     return
    18                              <2> %%_ret:
    19 00001A65 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    25                                  %include "./Source/Kernel/FileIO/devio.asm"
    26                              <1> ;This file contains the primitive dev io function, which will be called 
    27                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    28                              <1> ; make requests for device IO.
    29                              <1> 
    30                              <1> mainCharIO:
    31                              <1> ;This is the main IO clearing function for Char IO.
    32                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    33                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    34                              <1> ;
    35                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    36                              <1> ;       ah = {0,..., 5}, a subfunction number
    37                              <1> ;       Function 0: Read Char (drvREAD)
    38                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    39                              <1> ;       Function 2: Write Char (drvWrite)
    40                              <1> ; In the case the below functions are called for Disk/Net files
    41                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    42                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    43                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    44                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    45                              <1> ;
    46                              <1> ; If and only if ah = 02h, al = Char to write to device
    47                              <1> ;
    48                              <1> ;
    49                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    50                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    51                              <1> ;                                           ZF = NZ => Device ready (not busy)
    52                              <1> ;                                               If ND read, AL = Next Char
    53                              <1> ; For Files/Net:
    54                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    55                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    56                              <1> ;           For Read and ND Read:
    57                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    58                              <1> ;               Read returns ^Z on EOF.
    59                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    60                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    61                              <1> ;
    62                              <1> ;All registers preserved EXCEPT for ax and flags
    63                              <1> 
    64                              <1> ;Reference Request Header
    65                              <1> ;Common Section:
    66                              <1> ;    .hdrlen resb 1  ;Length of the request header
    67                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    68                              <1> ;    .cmdcde resb 1  ;Command code
    69                              <1> ;    .status resw 1  ;Status word
    70                              <1> ;    .devptr resq 1  ;Reserved. Unused
    71                              <1> ;Below used by calls 0,1,2,5
    72                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    73                              <1> ;Below used by calls 0,2
    74                              <1> ;    .bufptr resq 1
    75                              <1> ;    .tfrlen resd 1
    76                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    77                              <1> ;    .strtsc resq 1
    78                              <1> ;    .desptr resq 1
    79                              <1> 
    80                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    81 00001A66 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    82 00001A67 488D1D(7DC40300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    83 00001A6E 48891D(06C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    84 00001A75 5B                  <1>     pop rbx
    85 00001A76 C705(0EC40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    85 00001A7E 0000                <1>
    86 00001A80 668905(7DC40300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    87 00001A87 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    88 00001A8D 0F85A1000000        <1>     jnz .notChar
    89 00001A93 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    90 00001A99 0F8495000000        <1>     jz .notChar
    91                              <1> ;Char devices only here
    92 00001A9F E8DD280000          <1>     call dosPushRegs    ;Save context here
    93 00001AA4 488D1D96E5FFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    94 00001AAB 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    95 00001AAE C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    96 00001AB1 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    97 00001AB4 890D(F8C30300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
    98                              <1>     ;Now set up cx for status word
    99 00001ABA 31C9                <1>     xor ecx, ecx
   100 00001ABC 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   101 00001ABF 7506                <1>     jne .skipBsySet
   102 00001AC1 81C900020000        <1>     or ecx, drvBsyStatus
   103                              <1> .skipBsySet:
   104 00001AC7 66870D(FBC30300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   105                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   106 00001ACE 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   107 00001AD5 E89E200000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   108 00001ADA 668B3D(FBC30300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   109 00001AE1 F7C700800000        <1>     test edi, drvErrStatus
   110 00001AE7 752D                <1>     jnz .error
   111                              <1> .ignoreRet:
   112 00001AE9 803D(FAC30300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   113 00001AF0 750C                <1>     jne .notNDRead
   114 00001AF2 8A05(05C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   115 00001AF8 8805(7DC40300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   116                              <1> .notNDRead:
   117 00001AFE 8A25(FCC30300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   118 00001B04 F6D4                <1>     not ah
   119 00001B06 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   120 00001B09 E85C280000          <1>     call dosPopRegs ;Get back the context
   121 00001B0E 668B05(7DC40300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   122                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00001B15 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   123                              <1> .error:
   124                              <1>     ;cl has flags
   125 00001B16 88CC                <1>     mov ah, cl
   126 00001B18 E8321F0000          <1>     call charDevErr
   127 00001B1D 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   128 00001B1F 750A                <1>     jne .errorIgnore
   129                              <1>     ;Fallthrough => Retry
   130 00001B21 E844280000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   131 00001B26 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   132                              <1> .errorIgnore:
   133                              <1>     ;Clear the busy bit in the status word
   134 00001B2B 8025(FCC30300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   135 00001B32 EBB5                <1>     jmp short .ignoreRet
   136                              <1> .notChar:
   137                              <1> ;Just return with ZF=NZ for now
   138 00001B34 50                  <1>     push rax
   139 00001B35 31C0                <1>     xor eax, eax
   140 00001B37 FEC0                <1>     inc al
   141 00001B39 58                  <1>     pop rax
   142                              <1>     return
    18                              <2> %%_ret:
    19 00001B3A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   143                              <1> 
   144                              <1> openSFT:
   145                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   146                              <1> ;Input: rdi = SFT pointer
   147 00001B3B E841280000          <1>     call dosPushRegs
   148 00001B40 B00D                <1>     mov al, drvOPEN
   149 00001B42 EB07                <1>     jmp short openCloseCommon
   150                              <1> closeSFT:
   151                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   152 00001B44 E838280000          <1>     call dosPushRegs
   153 00001B49 B00E                <1>     mov al, drvCLOSE
   154                              <1> openCloseCommon:
   155                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   156 00001B4B 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   157 00001B51 7469                <1>     jz .exit    ;Exit if so
   158 00001B53 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   159 00001B57 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   160 00001B5B 7512                <1>     jnz .charDev
   161                              <1>     ;Here a disk drive, rdi is a DPB ptr
   162 00001B5D 803D(36C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   163 00001B64 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   164 00001B66 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   165 00001B69 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   166 00001B6B 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   167                              <1> .charDev:
   168 00001B6F 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   169 00001B75 7445                <1>     jz .exit    ;No, exit!
   170 00001B77 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   171 00001B7A 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   172 00001B81 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   173                              <1> .retryEP:
   174 00001B84 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   175 00001B87 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   176 00001B8A 50                  <1>     push rax    ;Save the dword
   177 00001B8B E8EC1F0000          <1>     call goDriver
   178 00001B90 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   179 00001B97 F7C700800000        <1>     test edi, drvErrStatus
   180 00001B9D 741C                <1>     jz .exitPop
   181                              <1>     ;Error here, check if char or block drive
   182 00001B9F 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   183 00001BA5 7404                <1>     jz .blockError
   184                              <1>     ;Char error here
   185 00001BA7 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   186 00001BA9 EB04                <1>     jmp short .errorCmn
   187                              <1> .blockError:
   188 00001BAB 88C8                <1>     mov al, cl  ;Move drive number into al
   189 00001BAD B406                <1>     mov ah, critData    ;Data on block dev error
   190                              <1> .errorCmn:
   191                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   192 00001BAF E89B1E0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   193 00001BB4 B001                <1>     mov al, critRetry   ;al returns user response
   194 00001BB6 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   195 00001BB8 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   196 00001BB9 EBC9                <1>     jmp short .retryEP  ;Reset
   197                              <1> .exitPop:
   198 00001BBB 58                  <1>     pop rax    
   199                              <1> .exit:
   200 00001BBC E8A9270000          <1>     call dosPopRegs
   201                              <1>     return
    18                              <2> %%_ret:
    19 00001BC1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    27                              <1> ;-----------------------------------------------------------------------:
    28                              <1> ;                  DOS default char functions live here                 :
    29                              <1> ;                                                                       :
    30                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    31                              <1> ;                                                                       :
    32                              <1> ;Rules for the naming of the DOS functions                              :
    33                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    34                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    35                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    36                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    37                              <1> ;                                                                       :
    38                              <1> ;-----------------------------------------------------------------------:
    39                              <1> 
    40                              <1> charIn_BE:     ;ah = 01h
    41                              <1> ;Return char that has been read and echoed in al
    42 00001BC2 E866010000          <1>     call charIn_B
    43 00001BC7 50                  <1>     push rax
    44 00001BC8 E804000000          <1>     call charOut_B.in    ;Output it to screen
    45 00001BCD 58                  <1>     pop rax
    46                              <1>     return
    18                              <2> %%_ret:
    19 00001BCE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> 
    48                              <1> charOut_B:       ;ah = 02h
    49                              <1> ;Bspace is regular cursor left, does not insert a blank
    50 00001BCF 88D0                <1>     mov al, dl
    51                              <1> .in:  ;Internal function Entry Point, with char in al
    52 00001BD1 3C20                <1>     cmp al, asciiCaret
    53 00001BD3 7277                <1>     jb .control
    54 00001BD5 3C7F                <1>     cmp al, DEL ;DEL char?
    55 00001BD7 7406                <1>     je .skipCurs
    56 00001BD9 FE05(2EC20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    57                              <1> .skipCurs:
    58 00001BDF FE05(34C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    59 00001BE5 8025(34C30300)03    <1>     and byte [vConErr], 3
    60 00001BEC 56                  <1>     push rsi
    61 00001BED 7507                <1>     jnz .skipErrorCheck
    62 00001BEF 50                  <1>     push rax
    63 00001BF0 E884020000          <1>     call vConCtrlCheck
    64 00001BF5 58                  <1>     pop rax
    65                              <1> .skipErrorCheck:
    66 00001BF6 E80C020000          <1>     call outputOnStdout
    67 00001BFB 5E                  <1>     pop rsi
    68 00001BFC F605(31C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    69                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001C03 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    70 00001C05 53                  <1>     push rbx
    71 00001C06 56                  <1>     push rsi
    72 00001C07 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    73 00001C0C E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    74 00001C11 7236                <1>     jc .exitPrintEcho
    75                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    76 00001C13 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    77 00001C17 F7C300800000        <1>     test ebx, devRedirDev
    78 00001C1D 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    79 00001C1F F7C380000000        <1>     test ebx, devCharDev
    80 00001C25 7422                <1>     jz .exitPrintEcho
    81 00001C27 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    82 00001C2C E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    83 00001C31 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    84 00001C33 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    85 00001C39 7407                <1>     jz .netSpool
    86 00001C3B E8FB010000          <1>     call outputOnSFT
    87 00001C40 EB07                <1>     jmp short .exitPrintEcho
    88                              <1> .netSpool:
    89 00001C42 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    90                              <1> .exitPrintEcho:
    91 00001C49 5E                  <1>     pop rsi
    92 00001C4A 5B                  <1>     pop rbx
    93                              <1>     return
    18                              <2> %%_ret:
    19 00001C4B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    94                              <1> .control:
    95 00001C4C 3C0D                <1>     cmp al, CR
    96 00001C4E 7425                <1>     je .newline
    97 00001C50 3C08                <1>     cmp al, BSP
    98 00001C52 742D                <1>     je .back
    99 00001C54 3C09                <1>     cmp al, TAB
   100 00001C56 7587                <1>     jne .skipCurs   ;Treat as normal
   101                              <1>     ;TAB key here
   102                              <1> .tab:
   103 00001C58 51                  <1>     push rcx
   104 00001C59 0FB60D(2EC20300)    <1>     movzx ecx, byte [vConCursPos]
   105 00001C60 80C9F8              <1>     or cl, ~7
   106 00001C63 F6D9                <1>     neg cl
   107 00001C65 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   108                              <1> .tabloop:
   109 00001C68 B020                <1>     mov al, SPC
   110 00001C6A E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   111 00001C6F FEC9                <1>     dec cl
   112 00001C71 75F5                <1>     jnz .tabloop
   113                              <1> .stopTab:
   114 00001C73 59                  <1>     pop rcx
   115                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 00001C74 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   116                              <1> .newline:
   117 00001C75 C605(2EC20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   118 00001C7C E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   119                              <1> .back:
   120 00001C81 FE0D(2EC20300)      <1>     dec byte [vConCursPos]
   121 00001C87 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   122                              <1> 
   123                              <1> auxIn_B:        ;ah = 03h
   124 00001C8C E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   125 00001C91 BB03000000          <1>     mov ebx, 3
   126 00001C96 E8A5020000          <1>     call getCharDevSFT
   127                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001C9B 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   128                              <1> .auxloop:
   129 00001C9D B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   130 00001C9F E8C2FDFFFF          <1>     call mainCharIO
   131 00001CA4 7408                <1>     jz .signalLoop
   132 00001CA6 30E4                <1>     xor ah, ah  ;Read the char in
   133 00001CA8 E8B9FDFFFF          <1>     call mainCharIO
   134                              <1>     return
    18                              <2> %%_ret:
    19 00001CAD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   135                              <1> .signalLoop:
   136 00001CAE E8A3010000          <1>     call callInt48h
   137 00001CB3 EBE8                <1>     jmp short .auxloop
   138                              <1> 
   139                              <1> auxOut_B:       ;ah = 04h
   140 00001CB5 53                  <1>     push rbx
   141 00001CB6 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   142 00001CBB EB06                <1>     jmp short auxOutCmn
   143                              <1> prnOut_B:       ;ah = 05h
   144 00001CBD 53                  <1>     push rbx
   145 00001CBE BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   146                              <1> auxOutCmn: ;Auxilliary output device common 
   147 00001CC3 88D0                <1>     mov al, dl  ;Get the char into al
   148 00001CC5 50                  <1>     push rax
   149 00001CC6 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   150 00001CCB 58                  <1>     pop rax
   151 00001CCC 56                  <1>     push rsi
   152 00001CCD E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   153 00001CD2 5E                  <1>     pop rsi
   154 00001CD3 5B                  <1>     pop rbx
   155                              <1>     return
    18                              <2> %%_ret:
    19 00001CD4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> 
   157                              <1> directConIO:    ;ah = 06h
   158 00001CD5 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   159 00001CD7 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   160 00001CD9 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   161                              <1> ;Here is the read char direct function
   162 00001CDF 31DB                <1>     xor ebx, ebx    
   163 00001CE1 E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   164                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001CE6 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   165 00001CE8 488B2D(DCC30300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   166 00001CEF B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   167 00001CF1 E870FDFFFF          <1>     call mainCharIO
   168 00001CF6 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   169 00001CFB 7507                <1>     jnz .readChar
   170 00001CFD 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   171 00001D01 30C0                <1>     xor al, al  ;Set caller return code to 0
   172                              <1>     return
    18                              <2> %%_ret:
    19 00001D03 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   173                              <1> .readChar:
   174 00001D04 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   175                              <1>     ;Fallthrough here to get the char at STDIN
   176                              <1> charIn:         ;ah = 07h
   177                              <1> ;Return char in al from STDIN without waiting
   178 00001D08 31DB                <1>     xor ebx, ebx
   179 00001D0A E831020000          <1>     call getCharDevSFT
   180                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001D0F 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   181 00001D11 B401                <1>     mov ah, 01  ;ND read for char
   182 00001D13 E84EFDFFFF          <1>     call mainCharIO
   183 00001D18 750B                <1>     jnz .getChar
   184 00001D1A B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   185 00001D1C CD4A                <1>     int 4Ah
   186 00001D1E E833010000          <1>     call callInt48h
   187 00001D23 EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   188                              <1> .getChar:
   189                              <1>     ;Get the char in al and exit
   190 00001D25 30E4                <1>     xor ah, ah
   191 00001D27 E83AFDFFFF          <1>     call mainCharIO
   192                              <1>     return
    18                              <2> %%_ret:
    19 00001D2C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   193                              <1> charIn_B:       ;ah = 08h
   194                              <1> ;Return char in al from STDIN
   195 00001D2D 56                  <1>     push rsi
   196                              <1> .readAgain:
   197 00001D2E E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   198                              <1>     ;Also sets rsi to point to the device SFT for 
   199 00001D33 7543                <1>     jnz .pullChar
   200 00001D35 803D(E8D80300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   201 00001D3C 7507                <1>     jne .skiplookahead
   202 00001D3E B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   203 00001D40 E821FDFFFF          <1>     call mainCharIO
   204                              <1> .skiplookahead:
   205 00001D45 B484                <1>     mov ah, 84h
   206 00001D47 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   207 00001D49 66813D(17D90300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   207 00001D51 FF                  <1>
   208 00001D52 751B                <1>     jne .skipClockRead
   209 00001D54 E828260000          <1>     call dosPushRegs
   210 00001D59 F8                  <1>     clc ;Clear CF, write primary header to backup
   211 00001D5A E882000000          <1>     call swapPrimaryHeader
   212 00001D5F E8CF060000          <1>     call readDateTimeRecord
   213 00001D64 F9                  <1>     stc ;Set CF, write backup to primary header
   214 00001D65 E877000000          <1>     call swapPrimaryHeader
   215 00001D6A E8FB250000          <1>     call dosPopRegs
   216                              <1> .skipClockRead:
   217 00001D6F 66FF05(17D90300)    <1>     inc word [keybTicks]
   218 00001D76 EBB6                <1>     jmp short .readAgain
   219                              <1> .pullChar:
   220 00001D78 30E4                <1>     xor ah, ah
   221 00001D7A E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   222 00001D7F 5E                  <1>     pop rsi
   223 00001D80 3C00                <1>     cmp al, NUL ;Is this the null char?
   224 00001D82 7507                <1>     jne .exit
   225                              <1>     ;We are mid extended ascii, prevent printer toggling
   226 00001D84 C605(16D90300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   227                              <1> .exit:
   228                              <1>     return
    18                              <2> %%_ret:
    19 00001D8B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> 
   230                              <1> printString_B:      ;ah = 09h
   231 00001D8C 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   232                              <1> .ps0:
   233 00001D8F AC                  <1>     lodsb   ;Get char in al and inc rsi
   234 00001D90 3C24                <1>     cmp al, "$" ;End of string char?
   235                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001D92 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   236 00001D94 E838FEFFFF          <1>     call charOut_B.in
   237 00001D99 EBF4                <1>     jmp short .ps0
   238                              <1> 
   239                              <1> checkStdinStatus:  ;ah = 0Bh
   240                              <1> ;Returns the status of the driver controlling vCon
   241 00001D9B E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   242 00001DA0 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   243                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001DA2 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   244 00001DA4 FEC8                <1>     dec al  ;Set al to -1 if char available
   245                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00001DA6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   246                              <1> clearbuffDoFunc:   ;ah = 0Ch
   247                              <1> ;Clears any buffers and issues a console read command (the command in al)
   248                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   249 00001DA7 50                  <1>     push rax
   250 00001DA8 52                  <1>     push rdx
   251 00001DA9 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   252 00001DAB E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   253 00001DB0 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   254 00001DB2 B404                <1>     mov ah, 04h ;Flush input buffers
   255 00001DB4 E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   256                              <1> .skipFlush:
   257 00001DB9 5A                  <1>     pop rdx
   258 00001DBA 58                  <1>     pop rax
   259 00001DBB 88C4                <1>     mov ah, al  ;Move function number into ah
   260 00001DBD 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   261 00001DBF 7507                <1>     jne .others
   262 00001DC1 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   263 00001DC4 7412                <1>     jz .bad ;Yes, exit
   264 00001DC6 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   265                              <1> .others:
   266 00001DC8 3C01                <1>     cmp al, 01h
   267 00001DCA 740F                <1>     je .callFunction
   268 00001DCC 3C07                <1>     cmp al, 07h
   269 00001DCE 740B                <1>     je .callFunction
   270 00001DD0 3C08                <1>     cmp al, 08h
   271 00001DD2 7407                <1>     je .callFunction
   272 00001DD4 3C0A                <1>     cmp al, 0Ah
   273 00001DD6 7403                <1>     je .callFunction
   274                              <1> .bad:
   275 00001DD8 30C0                <1>     xor al, al
   276                              <1>     return
    18                              <2> %%_ret:
    19 00001DDA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   277                              <1> .callFunction:
   278 00001DDB FA                  <1>     cli ;Prepare to swap stack pointer
   279                              <1>     ;The below address avoids "properly" reentering DOS
   280                              <1>     ;We simply reuse the function dispatch aspect. 
   281                              <1>     ;this means we dont trash the caller's register frame 
   282 00001DDC E9B8240000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   283                              <1> ;------------------------
   284                              <1> ;  Primitive functions  :
   285                              <1> ;------------------------
   286                              <1> swapPrimaryHeader:
   287                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   288                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   289 00001DE1 56                  <1>     push rsi
   290 00001DE2 57                  <1>     push rdi
   291 00001DE3 51                  <1>     push rcx
   292 00001DE4 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   292 00001DED 00                  <1>
   293 00001DEE 488D35(22C40300)    <1>     lea rsi, primReqHdr
   294 00001DF5 488D3D(E9D80300)    <1>     lea rdi, bkupReqHdr
   295 00001DFC 7303                <1>     jnc .read
   296 00001DFE 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   297                              <1> .read:
   298 00001E01 F3A4                <1>     rep movsb   ;Swap
   299 00001E03 59                  <1>     pop rcx
   300 00001E04 5F                  <1>     pop rdi
   301 00001E05 5E                  <1>     pop rsi
   302                              <1>     return
    18                              <2> %%_ret:
    19 00001E06 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   303                              <1> outputOnStdout:
   304                              <1> ;Input: al = Char to output
   305                              <1> ;Output: CF=CY, all good
   306 00001E07 53                  <1>     push rbx
   307 00001E08 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   308 00001E0D E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   309 00001E12 7217                <1>     jc .exit
   310 00001E14 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   311 00001E1A 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   312 00001E1C 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   313 00001E20 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   314 00001E26 7405                <1>     jz .notCharDevOrFast
   315 00001E28 CD49                <1>     int 49h ;Fast output
   316                              <1> .exitOk:
   317 00001E2A F8                  <1>     clc
   318                              <1> .exit:
   319 00001E2B 5B                  <1>     pop rbx
   320                              <1>     return
    18                              <2> %%_ret:
    19 00001E2C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> .notCharDevOrFast:
   322 00001E2D E809000000          <1>     call outputOnSFT
   323 00001E32 5B                  <1>     pop rbx
   324                              <1>     return
    18                              <2> %%_ret:
    19 00001E33 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   325                              <1> 
   326                              <1> outputToHandle:
   327                              <1> ;Char to output must be in al
   328 00001E34 E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   329                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E39 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   330                              <1> outputOnSFT:
   331                              <1> ;Output char in al to SFT in rsi
   332                              <1> ;Waits until device is not busy to send char.
   333                              <1> ;Calls int 48h if device busy
   334 00001E3B 50                  <1>     push rax
   335 00001E3C B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   336 00001E3E E823FCFFFF          <1>     call mainCharIO
   337 00001E43 58                  <1>     pop rax
   338 00001E44 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   339 00001E46 B402                <1>     mov ah, 02h ;Output char in al
   340 00001E48 E819FCFFFF          <1>     call mainCharIO
   341 00001E4D F8                  <1>     clc
   342                              <1>     return
    18                              <2> %%_ret:
    19 00001E4E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   343                              <1> .signalLoop:
   344 00001E4F E802000000          <1>     call callInt48h
   345 00001E54 EBE5                <1>     jmp short outputOnSFT
   346                              <1> 
   347                              <1> callInt48h:
   348                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   349 00001E56 9C                  <1>     pushfq
   350 00001E57 F605(F6C30300)FF    <1>     test byte [int48Flag], -1
   351 00001E5E 7417                <1>     jz .exit    ;If zero, not safe
   352 00001E60 F605(69C30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   353 00001E67 750E                <1>     jnz .exit
   354                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   355 00001E69 FF35(F6C30300)      <1>     push qword [int48Flag] 
   356 00001E6F CD48                <1>     int 48h
   357 00001E71 8F05(F6C30300)      <1>     pop qword [int48Flag]    ;Return original value
   358                              <1> .exit:
   359 00001E77 9D                  <1>     popfq
   360                              <1>     return
    18                              <2> %%_ret:
    19 00001E78 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   361                              <1> 
   362                              <1> 
   363                              <1> vConCtrlCheck:
   364                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   365                              <1> ; the processing. 
   366                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   367                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   368                              <1> ;
   369                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   370                              <1> ;^S will pause screen processing until another key is processed by vCon input
   371                              <1> ;^P will toggle the printer echo feature of the vConsole
   372                              <1> ;
   373                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   374                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   375                              <1> ;
   376                              <1> ;Output: 
   377                              <1> ;   CF=CY : Error
   378                              <1> ;   CF=NC : ...
   379                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   380                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   381 00001E79 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   382 00001E7E 53                  <1>     push rbx
   383 00001E7F 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   384 00001E81 E8BA000000          <1>     call getCharDevSFT
   385 00001E86 5B                  <1>     pop rbx
   386                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001E87 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   387 00001E89 B401                <1>     mov ah, 01  ;Non destructively read CON
   388 00001E8B E8D6FBFFFF          <1>     call mainCharIO
   389 00001E90 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   390                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   391 00001E92 3C13                <1>     cmp al, DC3 ;^S ?
   392 00001E94 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   393 00001E96 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   394 00001E98 E8C9FBFFFF          <1>     call mainCharIO
   395 00001E9D E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   396                              <1> .checkPrintOrExit:
   397 00001EA2 3C10                <1>     cmp al, DLE ;Do we have ^P?
   398 00001EA4 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   399 00001EA6 3C03                <1>     cmp al, ETX ;Do we have ^C?
   400 00001EA8 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   401                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   402                              <1>     return 
    18                              <2> %%_ret:
    19 00001EAA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   403                              <1> .printToggle:
   404 00001EAB F615(31C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   405 00001EB1 53                  <1>     push rbx
   406 00001EB2 BB04000000          <1>     mov ebx, 4  ;PRN handle
   407 00001EB7 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   408 00001EBC 5B                  <1>     pop rbx
   409                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001EBD 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   410 00001EBF 57                  <1>     push rdi
   411 00001EC0 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   412 00001EC3 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   413 00001EC9 741D                <1>     jz .notNet
   414 00001ECB 50                  <1>     push rax
   415 00001ECC B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   416 00001ED1 CD4F                <1>     int 4Fh
   417 00001ED3 58                  <1>     pop rax
   418 00001ED4 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   419                              <1>     ;If something went wrong, turn off echo
   420 00001ED6 C605(31C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   421 00001EDD 50                  <1>     push rax
   422 00001EDE B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   423 00001EE3 CD4F                <1>     int 4Fh
   424 00001EE5 58                  <1>     pop rax
   425 00001EE6 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   426                              <1> .notNet:
   427                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   428                              <1> ; 0Dh or 0Eh
   429 00001EE8 803D(31C30300)00    <1>     cmp byte [printEcho], 00
   430 00001EEF 7507                <1>     jnz .echoOn
   431 00001EF1 E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   432 00001EF6 EB05                <1>     jmp short .printExit
   433                              <1> .echoOn:
   434 00001EF8 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   435                              <1> .printExit:
   436 00001EFD 5F                  <1>     pop rdi
   437                              <1>     return
    18                              <2> %%_ret:
    19 00001EFE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   438                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   439 00001EFF E852FFFFFF          <1>     call callInt48h
   440                              <1> .waitNextChar:   ;Here get next char
   441 00001F04 B401                <1>     mov ah, 01h ;ND read
   442 00001F06 E85BFBFFFF          <1>     call mainCharIO
   443 00001F0B 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   444                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   445 00001F0D 53                  <1>     push rbx
   446 00001F0E 31DB                <1>     xor ebx, ebx
   447 00001F10 E82B000000          <1>     call getCharDevSFT
   448 00001F15 5B                  <1>     pop rbx
   449                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F16 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   450 00001F18 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   451 00001F1A E847FBFFFF          <1>     call mainCharIO
   452 00001F1F 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   453 00001F21 7514                <1>     jnz .checkBreak2
   454 00001F23 803D(16D90300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   455 00001F2A 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   456 00001F30 C605(16D90300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   457                              <1> .checkBreak2:
   458 00001F37 3C03                <1>     cmp al, ETX
   459                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F39 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   460 00001F3B E9CF1B0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   461                              <1> 
   462                              <1> 
   463                              <1> getCharDevSFT:
   464                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   465                              <1> ;Input: bx = zero extended handle number
   466                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   467                              <1> ;        CF=CY => al = Error code, abort operation
   468 00001F40 F605(F5C30300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   469 00001F47 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   470                              <1> .getSFT:
   471 00001F49 57                  <1>     push rdi
   472 00001F4A E887120000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   473 00001F4F 4889FE              <1>     mov rsi, rdi
   474 00001F52 5F                  <1>     pop rdi
   475                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 00001F53 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   476                              <1> .swap:
   477                              <1> ;workingSFT is only set for CON calls
   478 00001F54 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   479 00001F5A 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   480 00001F5C 488B35(74C60300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   481 00001F63 F8                  <1>     clc
   482                              <1>     return
    18                              <2> %%_ret:
    19 00001F64 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   483                              <1> 
   484                              <1> ;------------------------
   485                              <1> ;   Utility functions   :
   486                              <1> ;------------------------
   487                              <1> printCaretASCII:
   488                              <1> ;Input: al = Char to print with a caret
   489                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   490                              <1> ;First check if the char should be careted, and then print normally if so
   491 00001F65 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   492 00001F67 0F8364FCFFFF        <1>     jae charOut_B.in
   493 00001F6D 3C09                <1>     cmp al, TAB
   494 00001F6F 0F845CFCFFFF        <1>     je charOut_B.in
   495 00001F75 3C15                <1>     cmp al, NAK
   496 00001F77 0F8454FCFFFF        <1>     je charOut_B.in
   497 00001F7D 3C14                <1>     cmp al, DC4
   498 00001F7F 0F844CFCFFFF        <1>     je charOut_B.in
   499 00001F85 50                  <1>     push rax
   500 00001F86 B05E                <1>     mov al, "^" ;Get caret in place
   501 00001F88 E844FCFFFF          <1>     call charOut_B.in
   502 00001F8D 58                  <1>     pop rax
   503 00001F8E 0440                <1>     add al, "@" ;Turn into an ASCII Char
   504 00001F90 E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   505                              <1> printCRLF:
   506 00001F95 B00D                <1>     mov al, CR
   507 00001F97 E835FCFFFF          <1>     call charOut_B.in
   508 00001F9C B00A                <1>     mov al, LF
   509 00001F9E E92EFCFFFF          <1>     jmp charOut_B.in
   510                              <1> 
   511                              <1> checkBreak:
   512                              <1> ;Reads bytes from CON if there are any bytes to read and 
   513                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   514 00001FA3 803D(6AC30300)01    <1>     cmp byte [inDOS], 1
   515                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001FAA 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   516                              <1> ;Returns in al the keystroke that is available IF one is available
   517                              <1> ; or al=0 if no keystroke available
   518 00001FAC 53                  <1>     push rbx
   519 00001FAD 56                  <1>     push rsi
   520 00001FAE 488B35(4BC00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   521                              <1>     ;Place command code and a zero status word at the same time
   522 00001FB5 C705(4EC40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   522 00001FBD 0000                <1>
   523                              <1>     ;Place the packet size in the hdrlen field
   524 00001FBF C605(4CC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   525 00001FC6 488D1D(4CC40300)    <1>     lea rbx, critReqHdr
   526 00001FCD E8AA1B0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   527                              <1>     ;Check if the busy bit is set (No keystroke available)
   528 00001FD2 66F705(4FC40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   528 00001FDA 02                  <1>
   529 00001FDB 7405                <1>     jz .charFound
   530                              <1> .exit:
   531 00001FDD 30C0                <1>     xor al, al
   532 00001FDF 5E                  <1>     pop rsi
   533 00001FE0 5B                  <1>     pop rbx
   534                              <1>     return
    18                              <2> %%_ret:
    19 00001FE1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   535                              <1> .charFound:
   536                              <1> ;Keystroke available, proceed
   537 00001FE2 8A05(59C40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   538 00001FE8 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   539 00001FEA 75F1                <1>     jne .exit   ;If not equal exit
   540                              <1> ;Now we pull the char out of the buffer
   541 00001FEC C705(4EC40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   541 00001FF4 0000                <1>
   542 00001FF6 C605(4CC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   543                              <1>     ;Place pointers and number of chars
   544 00001FFD C705(62C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   544 00002005 0000                <1>
   545                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   546 00002007 488D05(59C40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   547 0000200E 488905(5AC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   548 00002015 E8621B0000          <1>     call goDriver   ;RSI and RBX as before
   549 0000201A E9F01A0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   550                              <1> 
   551                              <1> vConSwapDriver:
   552                              <1> ;Sets up the vCon to use the alternative SFT pointer
   553 0000201F 57                  <1>     push rdi
   554 00002020 C605(F5C30300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   555 00002027 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   556 0000202E 48893D(74C60300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   557 00002035 5F                  <1>     pop rdi
   558                              <1>     return
    18                              <2> %%_ret:
    19 00002036 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> vConRetDriver:
   561                              <1> ;Returns the original driver (sets flag down)
   562 00002037 C605(F5C30300)00    <1>     mov byte [vConDrvSwp], 0
   563                              <1>     return
    18                              <2> %%_ret:
    19 0000203E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   564                              <1> 
   565                              <1> ;--------------------------------------------------
   566                              <1> ;      Main Keyboard Buffered Input Function      :
   567                              <1> ;--------------------------------------------------
   568                              <1> buffCharInput_BE:  ;ah = 0Ah
   569                              <1> ;Buffer pointer in rdx
   570                              <1> ; byte [rdx + 0], buffer length
   571                              <1> ; byte [rdx + 1], number of chars in buffer
   572                              <1> ; byte [rdx + 2], buffer start
   573                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   574                              <1> ;Register use
   575                              <1> ; dh = Char offset in internal buffer
   576                              <1> ; dl = Buffer length
   577                              <1> ; bh = Char offset in user buffer
   578                              <1> ; bl = Number of chars already in the buffer
   579                              <1> ; rdi = Internal buffer
   580                              <1> ; rsi = User buffer
   581 0000203F 4889D6              <1>     mov rsi, rdx
   582 00002042 66AD                <1>     lodsw   ;Get buffer metadata in ax
   583 00002044 84C0                <1>     test al, al
   584                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002046 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   585 00002048 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   586 0000204B 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   587 0000204D 7606                <1>     jbe .avoidcheck
   588 0000204F 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   589 00002053 7402                <1>     je .functionKeyOk
   590                              <1> .avoidcheck:
   591 00002055 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   592                              <1> .functionKeyOk:
   593 00002057 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   594 0000205A FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   595                              <1> .breakEP:
   596 0000205C 8A05(2EC20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   597 00002062 8805(2FC20300)      <1>     mov byte [vConCurCnt], al
   598 00002068 56                  <1>     push rsi    ;Push user buffer address
   599 00002069 488D3D(30C20300)    <1>     lea rdi, vConBuffer
   600 00002070 C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   601                              <1> .mainLoop:
   602 00002077 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   603 0000207C 3C0A                <1>     cmp al, LF
   604 0000207E 7505                <1>     jne .checkControlChars
   605                              <1> .mainLoop2:
   606 00002080 E8A8FCFFFF          <1>     call charIn_B
   607                              <1> .checkControlChars:
   608 00002085 3C06                <1>     cmp al, ACK
   609 00002087 74F7                <1>     je .mainLoop2   ;Get another char
   610 00002089 3A05D2DFFFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   611 0000208F 0F8426010000        <1>     je .escape
   612 00002095 3C7F                <1>     cmp al, DEL
   613 00002097 0F8489000000        <1>     je .delete
   614 0000209D 3C08                <1>     cmp al, BSP
   615 0000209F 0F8481000000        <1>     je .delete
   616 000020A5 3C17                <1>     cmp al, ETB
   617                              <1>     ;Add space for patched jump instructions
   618 000020A7 9090909090          <1>     db 5 dup (90h)  ;NOP
   619 000020AC 3C15                <1>     cmp al, NAK
   620 000020AE 9090909090          <1>     db 5 dup (90h)
   621 000020B3 3C0D                <1>     cmp al, CR
   622 000020B5 744C                <1>     je .carriageReturn
   623 000020B7 3C0A                <1>     cmp al, LF
   624 000020B9 7461                <1>     je .lineFeed
   625 000020BB 3A05A1DFFFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   626 000020C1 7429                <1>     je .break
   627                              <1> .checkIfCanInsert:
   628 000020C3 38D6                <1>     cmp dh, dl
   629 000020C5 731C                <1>     jae .bufOflw
   630 000020C7 AA                  <1>     stosb   ;Store the byte and increment rdi!
   631 000020C8 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   632 000020CA E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   633 000020CF 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   634 000020D6 75A8                <1>     jne .mainLoop2
   635                              <1>     ;IF not in insert mode, we fall here
   636                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   637                              <1>     ; or insert chars if needed.
   638 000020D8 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   639 000020DA 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   640 000020DC 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   641 000020DF FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   642 000020E1 EB9D                <1>     jmp short .mainLoop2
   643                              <1> .bufOflw:
   644                              <1> ;Buffer overflow
   645 000020E3 B007                <1>     mov al, BEL ;Sound the bell
   646 000020E5 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   647 000020EA EB94                <1>     jmp short .mainLoop2
   648                              <1> .break:
   649                              <1> ;Break, Place a "\", and do a CRLF
   650 000020EC B05C                <1>     mov al, "\"
   651 000020EE E8DEFAFFFF          <1>     call charOut_B.in
   652 000020F3 5E                  <1>     pop rsi ;Realign stack
   653                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   654 000020F4 E89CFEFFFF          <1>     call printCRLF
   655                              <1>     ;Align to next tabstop
   656 000020F9 E85AFBFFFF          <1>     call charOut_B.tab
   657 000020FE E959FFFFFF          <1>     jmp .breakEP
   658                              <1> .carriageReturn:
   659 00002103 AA                  <1>     stosb
   660 00002104 E8C8FAFFFF          <1>     call charOut_B.in
   661 00002109 5F                  <1>     pop rdi ;User buffer address was pushed 
   662 0000210A 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   663 0000210D FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   664                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   665 0000210F 488D35(30C20300)    <1>     lea rsi, vConBuffer
   666 00002116 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   667 00002119 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   668                              <1>     return
    18                              <2> %%_ret:
    19 0000211B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   669                              <1> .lineFeed:
   670 0000211C E874FEFFFF          <1>     call printCRLF
   671 00002121 E95AFFFFFF          <1>     jmp .mainLoop2
   672                              <1> .delete:
   673 00002126 E805000000          <1>     call .removeChar
   674 0000212B E950FFFFFF          <1>     jmp .mainLoop2
   675                              <1> .removeChar:
   676 00002130 84F6                <1>     test dh, dh ;Is char count 0?
   677 00002132 741C                <1>     jz .normalChar   ;If so, skip going back!
   678 00002134 E868000000          <1>     call .vConErase
   679 00002139 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   680 0000213B 3C20                <1>     cmp al, SPC
   681 0000213D 7311                <1>     jae .normalChar
   682 0000213F 3C09                <1>     cmp al, TAB
   683 00002141 7420                <1>     je .eraTab
   684 00002143 3C15                <1>     cmp al, NAK
   685 00002145 7409                <1>     je .normalChar
   686 00002147 3C14                <1>     cmp al, DC4
   687 00002149 7405                <1>     je .normalChar
   688 0000214B E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   689                              <1> .normalChar:
   690 00002150 803D(5DC60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   691                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002157 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   692 00002159 84FF                <1>     test bh, bh ;Beginning of user buffer?
   693                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000215B 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   694 0000215D 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   695 00002160 FECF                <1>     dec bh
   696                              <1>     return
    18                              <2> %%_ret:
    19 00002162 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   697                              <1> .eraTab:
   698                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   699                              <1> ; up to a tab stop worth of space chars printed
   700 00002163 57                  <1>     push rdi
   701 00002164 48FFCF              <1>     dec rdi
   702 00002167 FD                  <1>     std ;Go backwards
   703 00002168 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   704 0000216B B020                <1>     mov al, SPC
   705 0000216D 53                  <1>     push rbx
   706 0000216E BB07000000          <1>     mov ebx, 7
   707 00002173 67E30D              <1>     jecxz .onTabstop
   708                              <1> .scanString:
   709 00002176 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   710 00002177 7608                <1>     jbe .notChar    ;No, skip handling
   711 00002179 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   712 0000217D 740A                <1>     je .tabChar
   713 0000217F FECB                <1>     dec bl
   714                              <1> .notChar:
   715 00002181 E2F3                <1>     loop .scanString
   716                              <1> .onTabstop:
   717 00002183 2A1D(2FC20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   718                              <1> .tabChar:
   719 00002189 28F3                <1>     sub bl, dh  ;Same on tabstop
   720 0000218B 00D9                <1>     add cl, bl
   721 0000218D 80E107              <1>     and cl, 7
   722 00002190 5B                  <1>     pop rbx
   723 00002191 5F                  <1>     pop rdi
   724 00002192 FC                  <1>     cld
   725 00002193 74BB                <1>     jz .normalChar
   726                              <1>     ;Now erase all the spaces placed on the vCon
   727                              <1> .vConDelTab:
   728 00002195 E80C000000          <1>     call .vConEraseNoDec
   729 0000219A E2F9                <1>     loop .vConDelTab
   730 0000219C E9AFFFFFFF          <1>     jmp .normalChar
   731                              <1> .vConErase:
   732                              <1> ;Erase the char on the vCon
   733                              <1> ;Return through the output function
   734 000021A1 48FFCF              <1>     dec rdi ;Go back a space in the 
   735 000021A4 FECE                <1>     dec dh  ;Decrement char count in the buffer
   736                              <1> .vConEraseNoDec:
   737 000021A6 B008                <1>     mov al, BSP ;Move cursor back
   738 000021A8 E824FAFFFF          <1>     call charOut_B.in
   739 000021AD B020                <1>     mov al, SPC ;Replace with a space
   740 000021AF E81DFAFFFF          <1>     call charOut_B.in
   741 000021B4 B008                <1>     mov al, BSP ;Move cursor back again
   742 000021B6 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   743                              <1> .escape:
   744                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   745                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   746                              <1> ; including the function keys.
   747 000021BB FF2598DEFFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   748                              <1> .f2:
   749 000021C1 E846000000          <1>     call .fCommon2
   750 000021C6 EB0C                <1>     jmp short .fCommon
   751                              <1> .f3:
   752 000021C8 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   753 000021CB 28F9                <1>     sub cl, bh  ;Sub our current position
   754 000021CD EB05                <1>     jmp short .fCommon
   755                              <1> .f1:
   756 000021CF B901000000          <1>     mov ecx, 1  ;Get one char
   757                              <1> .fCommon:
   758 000021D4 C605(5DC60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   759 000021DB 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   760 000021DD 0F849DFEFFFF        <1>     je .mainLoop2
   761 000021E3 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   762 000021E5 0F8495FEFFFF        <1>     je .mainLoop2
   763                              <1>     ;Else, copy byte by byte, and retain char in al
   764 000021EB AC                  <1>     lodsb
   765 000021EC AA                  <1>     stosb
   766 000021ED E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   767 000021F2 FEC7                <1>     inc bh
   768 000021F4 FEC6                <1>     inc dh
   769 000021F6 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   770 000021F8 E983FEFFFF          <1>     jmp .mainLoop2
   771                              <1> .f4:
   772 000021FD E80A000000          <1>     call .fCommon2
   773 00002202 4801CE              <1>     add rsi, rcx
   774 00002205 00CF                <1>     add bh, cl
   775 00002207 E974FEFFFF          <1>     jmp .mainLoop2
   776                              <1> .fCommon2:
   777 0000220C E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   778 00002211 3A054ADEFFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   779 00002217 750B                <1>     jne .fnotEscape
   780                              <1>     ;Get another char if they typed escape and force it in the buffer
   781                              <1>     ; Do not return to caller
   782 00002219 E80FFBFFFF          <1>     call charIn_B
   783                              <1> .fforceExit:
   784 0000221E 59                  <1>     pop rcx ;Get original return address from stack
   785 0000221F E95CFEFFFF          <1>     jmp .mainLoop2
   786                              <1> .fnotEscape:
   787 00002224 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   788 00002227 28F9                <1>     sub cl, bh
   789 00002229 74F3                <1>     jz .fforceExit
   790 0000222B FFC9                <1>     dec ecx
   791 0000222D 74EF                <1>     jz .fforceExit
   792 0000222F 57                  <1>     push rdi
   793 00002230 4889F7              <1>     mov rdi, rsi
   794 00002233 48FFC7              <1>     inc rdi
   795 00002236 F2AE                <1>     repne scasb ;Search for the char to start printing from
   796 00002238 5F                  <1>     pop rdi
   797 00002239 75E3                <1>     jne .fforceExit ;If char not found, return
   798 0000223B F6D1                <1>     not cl
   799 0000223D 00D9                <1>     add cl, bl
   800 0000223F 28F9                <1>     sub cl, bh
   801                              <1>     return
    18                              <2> %%_ret:
    19 00002241 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   802                              <1> .f5:
   803 00002242 B040                <1>     mov al, "@"
   804 00002244 E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   805 00002249 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   806 0000224A 57                  <1>     push rdi
   807 0000224B E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   808 00002250 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   809 00002251 88F3                <1>     mov bl, dh
   810 00002253 E99CFEFFFF          <1>     jmp .breakAlt
   811                              <1> .f6:
   812                              <1> ;If the user wants to insert a EOF, they can use F6
   813 00002258 B01A                <1>     mov al, EOF
   814 0000225A E964FEFFFF          <1>     jmp .checkIfCanInsert
   815                              <1> .f7:
   816                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   817 0000225F 8A05FCDDFFFF        <1>     mov al, byte [extESC]
   818 00002265 E959FEFFFF          <1>     jmp .checkIfCanInsert
   819                              <1> .toggleIns:
   820 0000226A F615(5DC60300)      <1>     not byte [vConInsert]   ;Toggle
   821                              <1>     return
    18                              <2> %%_ret:
    19 00002270 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   822                              <1> .eDel:
   823 00002271 38DF                <1>     cmp bh, bl
   824 00002273 0F8407FEFFFF        <1>     je .mainLoop2
   825 00002279 FEC7                <1>     inc bh
   826 0000227B 48FFC6              <1>     inc rsi
   827 0000227E E9FDFDFFFF          <1>     jmp .mainLoop2
   828                              <1> 
   829                              <1> editKeys:
   830                              <1> ;Our Default Extended keys handler
   831 00002283 E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   832 00002288 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   833 0000228D 57                  <1>     push rdi    ;Preserve rdi
   834 0000228E 488D3DCEDDFFFF      <1>     lea rdi, extKeyTbl
   835 00002295 57                  <1>     push rdi
   836                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   837                              <1>     ; offset of function from extKeyTbl
   838                              <1> .lp:
   839 00002296 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   840 00002297 7411                <1>     je .charFound
   841 00002299 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   842 0000229B 0F84DFFDFFFF        <1>     jz buffCharInput_BE.mainLoop2
   843 000022A1 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   844 000022A8 EBEC                <1>     jmp short .lp
   845                              <1> .charFound:
   846 000022AA 59                  <1>     pop rcx ;Pop back the effective address of the table
   847 000022AB 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   848 000022AF 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   849 000022B2 5F                  <1>     pop rdi
   850 000022B3 FFE1                <1>     jmp rcx
    27                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    28                              <1> ;Major kernel date time functions and subroutines
    29                              <1> 
    30                              <1> getDate:           ;ah = 2Ah
    31 000022B5 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    32 000022BA E8B61C0000          <1>     call getUserRegs
    33 000022BF 668B15(EFC30300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    34                              <1> ;    mov dh, byte [monthOfYear]
    35 000022C6 0FB60D(F1C30300)    <1>     movzx ecx, byte [years]
    36 000022CD 8A05(F4C30300)      <1>     mov al, byte [dayOfWeek]
    37 000022D3 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    38 000022D7 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    39                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 000022DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                              <1> setDate:           ;ah = 2Bh
    41                              <1> ;	CX = year (1980-2099)
    42                              <1> ;   DH = month (1-12)
    43                              <1> ;	DL = day (1-31)
    44 000022DC E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    45                              <1>     return
    18                              <2> %%_ret:
    19 000022E1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    46                              <1> getTime:           ;ah = 2Ch
    47 000022E2 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    48 000022E7 E8891C0000          <1>     call getUserRegs
    49 000022EC 668B0D(7AC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.hours]
    50 000022F3 668B15(7BC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    51 000022FA 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    52 000022FE 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    53                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002302 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> setTime:           ;ah = 2Dh
    55                              <1> ;   CH = hour (0-23)
    56                              <1> ;	CL = minutes (0-59)
    57                              <1> ;	DH = seconds (0-59)
    58                              <1> ;	DL = hundredths (0-99)
    59 00002303 80FD17              <1>     cmp ch, 23
    60 00002306 7749                <1>     ja .exitBad
    61 00002308 80F93B              <1>     cmp cl, 59
    62 0000230B 7744                <1>     ja .exitBad
    63 0000230D 80FE3B              <1>     cmp dh, 59
    64 00002310 773F                <1>     ja .exitBad
    65 00002312 80FA63              <1>     cmp dl, 99
    66 00002315 773A                <1>     ja .exitBad
    67                              <1> ;Now we read date (updating internal count if necessary)
    68 00002317 E817010000          <1>     call readDateTimeRecord
    69 0000231C 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    70 00002323 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    71 0000232A 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    72 0000232D 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    73 00002331 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    74 00002335 B906000000          <1>     mov ecx, 6
    75 0000233A 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    76 0000233D E8D31A0000          <1>     call primReqWriteSetup   ;rbx now points to request header
    77 00002342 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    78 00002349 E82E180000          <1>     call goDriver
    79 0000234E 30C0                <1>     xor al, al
    80                              <1>     return
    18                              <2> %%_ret:
    19 00002350 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    81                              <1> .exitBad:
    82 00002351 B0FF                <1>     mov al, -1
    83                              <1>     return
    18                              <2> %%_ret:
    19 00002353 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> ;------------------------
    85                              <1> ;   Utility functions   :
    86                              <1> ;------------------------
    87                              <1> writeDate:
    88 00002354 6681F97800          <1>     cmp cx, 120
    89 00002359 0F83D1000000        <1>     jae .exitBad
    90 0000235F 80FE0C              <1>     cmp dh, 12
    91 00002362 0F87C8000000        <1>     ja .exitBad
    92 00002368 80FA1F              <1>     cmp dl, 31
    93 0000236B 0F87BF000000        <1>     ja .exitBad
    94 00002371 668915(EFC30300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    95                              <1>     ;mov byte [monthOfYear], dh
    96 00002378 880D(F1C30300)      <1>     mov byte [years], cl    ;Save the years count
    97 0000237E E878010000          <1>     call setDaysInFeb   ;Set days in february this year
    98 00002383 88CD                <1>     mov ch, cl ;Get years count in ch
    99 00002385 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   100 00002388 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   101 0000238B 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   102 0000238E BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   103 00002393 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   104                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   105 00002395 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   106 00002398 67E316              <1>     jecxz .addDay    ;Skip adding years
   107 0000239B 056E010000          <1>     add eax, 366    ;First add for a leap year
   108                              <1> .addYears:
   109 000023A0 FFC9                <1>     dec ecx
   110 000023A2 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   111 000023A5 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   112 000023AA EBF4                <1>     jmp short .addYears
   113                              <1> .addLeap:
   114 000023AC 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   115                              <1> .addDay:
   116 000023B1 89C2                <1>     mov edx, eax    ;Save this number in edx
   117                              <1>     ;Now to add day offset
   118 000023B3 0FB60D(F0C30300)    <1>     movzx ecx, byte [monthOfYear]
   119 000023BA 488D35C3DCFFFF      <1>     lea rsi, monthsTbl
   120                              <1> .addDaysInMonth:
   121 000023C1 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   122 000023C3 67E308              <1>     jecxz .addMonthOffset
   123 000023C6 AC                  <1>     lodsb   ;Get the number of days in the month in al
   124 000023C7 0FB6C0              <1>     movzx eax, al
   125 000023CA 01C2                <1>     add edx, eax
   126 000023CC EBF3                <1>     jmp short .addDaysInMonth
   127                              <1> .addMonthOffset:
   128 000023CE 0FB60D(EFC30300)    <1>     movzx ecx, byte [dayOfMonth]
   129 000023D5 FFC9                <1>     dec ecx
   130 000023D7 01CA                <1>     add edx, ecx    ;Add month offset
   131                              <1>     ;edx has the number of days since 01/01/1980
   132 000023D9 668915(F2C30300)    <1>     mov word [daysOffset], dx   ;Store!
   133                              <1> ;Now read and then write CLOCKrecrd
   134 000023E0 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   135 000023E7 B906000000          <1>     mov ecx, 6
   136 000023EC 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   137 000023EF E82C1A0000          <1>     call primReqReadSetup   ;rbx now points to request header
   138 000023F4 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   139 000023FB E87C170000          <1>     call goDriver
   140                              <1> ;Now we change daycount and write it back
   141 00002400 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   142 00002407 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   143 0000240E 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   144 00002411 B906000000          <1>     mov ecx, 6
   145 00002416 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   146 00002419 E8F7190000          <1>     call primReqWriteSetup   ;rbx now points to request header
   147 0000241E 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   148 00002425 E852170000          <1>     call goDriver
   149 0000242A E8AE000000          <1>     call setDayofWeek
   150                              <1>     return
    18                              <2> %%_ret:
    19 0000242F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   151                              <1> .exitBad:
   152 00002430 B0FF                <1>     mov al, -1
   153                              <1>     return
    18                              <2> %%_ret:
    19 00002432 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   154                              <1> 
   155                              <1> readDateTimeRecord:
   156                              <1> ;Will read the clock using the primary request header
   157                              <1> ;Preserves all regs except eax and flags
   158 00002433 53                  <1>     push rbx
   159 00002434 51                  <1>     push rcx
   160 00002435 52                  <1>     push rdx
   161 00002436 56                  <1>     push rsi
   162 00002437 55                  <1>     push rbp
   163                              <1> 
   164 00002438 66C705(17D90300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   164 00002440 00                  <1>
   165 00002441 488D1D(77C40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   166 00002448 B906000000          <1>     mov ecx, 6
   167 0000244D 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   168                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   169                              <1> ; rbx = Data storage buffer ptr
   170                              <1> ; ecx = Number of sectors to transfer
   171                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   172 00002450 E8CB190000          <1>     call primReqReadSetup   ;rbx now points to request header
   173 00002455 488B35(43C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   174 0000245C E81B170000          <1>     call goDriver
   175 00002461 0FB705(77C40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   176                              <1> ;Here we have:  ax = Days since 1/1/1980
   177                              <1> ;Updates the internal date fields
   178                              <1> ;Internal time fields are in the clock record
   179                              <1> ;So now we check if the number of days since 1980 are the same.
   180                              <1> ;If so, we can skip updating.
   181 00002468 663B05(F2C30300)    <1>     cmp ax, word [daysOffset]
   182 0000246F 7466                <1>     je .exit    ;Return if equal
   183 00002471 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   184 00002476 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   185 00002478 668905(F2C30300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   186                              <1>     ;Now want to update years, month and day fields
   187                              <1>     ;ax has the number of days since 01/01/1980
   188                              <1>     ;Get days in a 4 year period
   189 0000247F BBB5050000          <1>     mov ebx, 365*4 + 1
   190 00002484 31D2                <1>     xor edx, edx
   191 00002486 89D1                <1>     mov ecx, edx  ;Zero ecx
   192 00002488 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   193                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   194                              <1>     ;edx has offset into current 4 year bunch
   195 0000248A BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   196 0000248F 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   197 00002491 7210                <1>     jb .foundBunch
   198 00002493 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   199 00002495 FFC1                <1>     inc ecx
   200 00002497 FFCB                <1>     dec ebx ;Number of days in a normal year
   201                              <1> .findBunch:
   202 00002499 39DA                <1>     cmp edx, ebx
   203 0000249B 7206                <1>     jb .foundBunch
   204 0000249D 29DA                <1>     sub edx, ebx
   205 0000249F FFC1                <1>     inc ecx
   206 000024A1 EBF6                <1>     jmp short .findBunch
   207                              <1> .foundBunch:
   208                              <1>     ;If ecx = 0, february has 29 days!
   209                              <1>     ;eax has number of four year bunches elapsed since 1980
   210 000024A3 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   211 000024A6 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   212                              <1>     ;ecx now has the number of years since 1980
   213 000024A8 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   214                              <1> ;edx has number of days into the year we are in
   215                              <1> ;eax has number of days in Feb for this year
   216 000024AD 488D35D0DBFFFF      <1>     lea rsi, monthsTbl
   217 000024B4 31C9                <1>     xor ecx, ecx    ;Use as month counter
   218                              <1> .monthSearch:
   219 000024B6 FFC1                <1>     inc ecx ;Start from 1
   220 000024B8 AC                  <1>     lodsb   ;Get value in al and inc rsi
   221 000024B9 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   222 000024BC 39C2                <1>     cmp edx, eax
   223 000024BE 7204                <1>     jb .monthFound
   224 000024C0 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   225 000024C2 EBF2                <1>     jmp short .monthSearch
   226                              <1> .monthFound:
   227                              <1>     ;cl has the month (01h-0Ch)
   228                              <1>     ;dl has the day of the month - 1
   229 000024C4 FFC2                <1>     inc edx
   230 000024C6 880D(F0C30300)      <1>     mov byte [monthOfYear], cl
   231 000024CC 8815(EFC30300)      <1>     mov byte [dayOfMonth], dl
   232 000024D2 E806000000          <1>     call setDayofWeek
   233                              <1> .exit:
   234 000024D7 5D                  <1>     pop rbp
   235 000024D8 5E                  <1>     pop rsi
   236 000024D9 5A                  <1>     pop rdx
   237 000024DA 59                  <1>     pop rcx
   238 000024DB 5B                  <1>     pop rbx
   239                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 000024DC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDayofWeek:
   242                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   243 000024DD 0FB705(F2C30300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   244 000024E4 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   245                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   246 000024E9 31D2                <1>     xor edx, edx
   247 000024EB B907000000          <1>     mov ecx, 7   
   248 000024F0 F7F1                <1>     div ecx  ;Get remainder in dl
   249 000024F2 8815(F4C30300)      <1>     mov byte [dayOfWeek], dl
   250                              <1> ;Set ZF to indicate all ok
   251 000024F8 31C0                <1>     xor eax, eax
   252                              <1>     return
    18                              <2> %%_ret:
    19 000024FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   253                              <1> 
   254                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   255                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   256                              <1> ;Input: cl = Year - 1980
   257                              <1> ;Output: al = Number of days in February
   258 000024FB 880D(F1C30300)      <1>     mov byte [years], cl    ;Save this figure
   259 00002501 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   260 00002504 51                  <1>     push rcx
   261 00002505 57                  <1>     push rdi
   262 00002506 B81C000000          <1>     mov eax, 28  ;Usual days in february
   263 0000250B B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   264 00002510 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   265 00002513 488D3D6BDBFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   266 0000251A AA                  <1>     stosb   ;Store the word in rdi
   267 0000251B 5F                  <1>     pop rdi
   268 0000251C 59                  <1>     pop rcx
   269                              <1>     return
    18                              <2> %%_ret:
    19 0000251D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> getDirDTwords:
   272                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   273                              <1> ; High word of eax = Date
   274                              <1> ; Low word of eax = Time
   275                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   276                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   277                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   278                              <1> 
   279                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   280                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   281                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   282                              <1> ;Preserves all registers except eax
   283 0000251E 53                  <1>     push rbx
   284 0000251F 0FB61D(7CC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   285 00002526 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   286 00002528 89D8                <1>     mov eax, ebx
   287 0000252A 0FB61D(79C40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   288 00002531 C1E305              <1>     shl ebx, 5
   289 00002534 09D8                <1>     or eax, ebx
   290 00002536 0FB61D(7AC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   291 0000253D C1E30B              <1>     shl ebx, 11
   292 00002540 09D8                <1>     or eax, ebx
   293 00002542 0FB61D(EFC30300)    <1>     movzx ebx, byte [dayOfMonth]
   294 00002549 C1E310              <1>     shl ebx, 16
   295 0000254C 09D8                <1>     or eax, ebx
   296 0000254E 0FB61D(F0C30300)    <1>     movzx ebx, byte [monthOfYear]
   297 00002555 C1E315              <1>     shl ebx, 21
   298 00002558 09D8                <1>     or eax, ebx
   299 0000255A 0FB61D(F1C30300)    <1>     movzx ebx, byte [years]
   300 00002561 C1E319              <1>     shl ebx, 25
   301 00002564 09D8                <1>     or eax, ebx
   302 00002566 5B                  <1>     pop rbx
   303                              <1>     return
    18                              <2> %%_ret:
    19 00002567 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   304                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   305                              <1> ;Returns edx = time
   306                              <1> ;        eax = date
   307                              <1> ; Formally ax and dx but we clear the upper words
   308 00002568 E8C6FEFFFF          <1>     call readDateTimeRecord
   309 0000256D E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   310 00002572 31D2                <1>     xor edx, edx
   311 00002574 6689C2              <1>     mov dx, ax  ;Save time
   312 00002577 C1E810              <1>     shr eax, 10h    ;Get date into rax
   313                              <1>     return
    18                              <2> %%_ret:
    19 0000257A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    29                              <1> openFileFCB:       ;ah = 0Fh
    30                              <1> closeFileFCB:      ;ah = 10h
    31                              <1> findFirstFileFCB:  ;ah = 11h
    32                              <1> findNextFileFCB:   ;ah = 12h
    33                              <1> deleteFileFCB:     ;ah = 13h
    34                              <1> sequentialReadFCB: ;ah = 14h
    35                              <1> sequentialWriteFCB:;ah = 15h
    36                              <1> createFileFCB:     ;ah = 16h
    37                              <1> renameFileFCB:     ;ah = 17h
    38 0000257B C3                  <1>     ret
    39                              <1> setDTA:            ;ah = 1Ah
    40                              <1> ;Called with:
    41                              <1> ;   rdx = Pointer to the new default DTA
    42 0000257C 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
    43 00002583 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    44 00002587 488915(79C30300)    <1>     mov qword [currentDTA], rdx
    45 0000258E C3                  <1>     ret
    46                              <1> randomReadFCB:     ;ah = 21h
    47                              <1> randomWriteFCB:    ;ah = 22h
    48                              <1> getFileSizeFCB:    ;ah = 23h
    49                              <1> setRelRecordFCB:   ;ah = 24h
    50                              <1> randBlockReadFCB:  ;ah = 27h
    51                              <1> randBlockWriteFCB: ;ah = 28h
    52                              <1> parseFilenameFCB:  ;ah = 29h
    53 0000258F C3                  <1>     ret
    54                              <1> getDTA:            ;ah = 2Fh
    55 00002590 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
    56 00002597 488B1D(79C30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    57 0000259E 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    58 000025A2 C3                  <1>     ret
    29                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    30                              <1> ;-----------------------------------:
    31                              <1> ;    File Handle Kernel routines    :
    32                              <1> ;-----------------------------------:
    33                              <1> 
    34                              <1> createFileHdl:     ;ah = 3Ch, handle function
    35                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    36                              <1> ;       rdx = Ptr to ASCIZ filename to create
    37                              <1> ;Output: CF=CY => ax = File handle
    38                              <1> ;        CF=NC => al = Error code
    39 000025A3 51                  <1>     push rcx    ;Save file attributes on stack
    40 000025A4 488D0D78050000      <1>     lea rcx, createMain
    41 000025AB C605(56C60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
    42 000025B2 EB20                <1>     jmp short openFileHdl.openCommon
    43                              <1> openFileHdl:       ;ah = 3Dh, handle function
    44                              <1> ;Input: al = Open mode, to open file with
    45                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    46                              <1> ;If called from 5D00h, cl = File attributes too
    47                              <1> ;Output: CF=CY => ax = File handle
    48                              <1> ;        CF=NC => al = Error code
    49 000025B4 BB16000000          <1>     mov ebx, dirInclusive
    50 000025B9 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
    51 000025C0 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    52 000025C3 880D(56C60300)      <1>     mov byte [searchAttr], cl
    53 000025C9 48B9-               <1>     mov rcx, openMain  
    53 000025CB [222B000000000000]  <1>
    54 000025D3 50                  <1>     push rax    ;Save open mode on stack
    55                              <1> .openCommon:
    56 000025D4 E8BF1D0000          <1>     call dosCrit1Enter
    57 000025D9 E8160B0000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    58 000025DE E8BF1D0000          <1>     call dosCrit1Exit
    59 000025E3 0F82EE1D0000        <1>     jc extErrExit
    60                              <1>     ;Now save variables
    61 000025E9 E83C0A0000          <1>     call setCurrentSFT
    62 000025EE 66891D(8CC60300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    63 000025F5 E8AC0B0000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    64 000025FA 0F82D71D0000        <1>     jc extErrExit
    65 00002600 66891D(8EC60300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    66 00002607 48893D(7CC60300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    67 0000260E 0FB71D(8CC60300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    68 00002615 881F                <1>     mov byte [rdi], bl  ;And open the file
    69                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    70 00002617 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    71 0000261A 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
    72 00002621 51                  <1>     push rcx    ;Save the procedure to call on stack
    73 00002622 E881ECFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    74 00002627 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    75 00002628 488D05F3040000      <1>     lea rax, openMain   ;Get EA for open procedure
    76 0000262F 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    77 00002636 7318                <1>     jnc .proceedCall
    78                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good.
    79                              <1> ;If CF=CY => Path doesnt all exist:
    80                              <1> ;      If parDirExists = -1 => For Open, Bad.  For Create, Good. 
    81                              <1> ;Now we check if we are creating or opening.
    82 00002638 4839C3              <1>     cmp rbx, rax
    83 0000263B 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    84 0000263D F605(5FC60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    85 00002644 750A                <1>     jnz .proceedCall    ;If so, proceed.
    86                              <1> .badPathspec:
    87 00002646 B802000000          <1>     mov eax, errFnf
    88 0000264B E941000000          <1>     jmp .exitBad    ;Need to deallocate the SFT before returning
    89                              <1> .proceedCall:
    90                              <1> ;If the pathspec exists, recall that for create, we truncate.
    91 00002650 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    92 00002652 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    93 00002655 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    94 00002656 750B                <1>     jne .callProc   ;Jump if we are creating
    95                              <1>     ;al means openmode here
    96 00002658 A880                <1>     test al, 80h    ;No Inherit bit set?
    97 0000265A 7407                <1>     jz .callProc
    98 0000265C 247F                <1>     and al, 7Fh     ;Clear this bit
    99 0000265E B900100000          <1>     mov ecx, devNoInherit
   100                              <1> .callProc:
   101 00002663 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   102 00002669 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   103 0000266F 51                  <1>     push rcx    ;Save the device word 
   104 00002670 FFD3                <1>     call rbx
   105 00002672 59                  <1>     pop rcx
   106 00002673 488B35(84C60300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   107 0000267A 7215                <1>     jc .exitBad
   108 0000267C 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   109 00002681 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   110 00002685 0FB705(8EC60300)    <1>     movzx eax, word [currentHdl]
   111                              <1>     ;SHARE HOOK, DOS DS:[008Ch]
   112 0000268C E9381D0000          <1>     jmp extGoodExit ;Save ax and return OK
   113                              <1> .exitBad:
   114 00002691 5B                  <1>     pop rbx ;Pop the word from the stack
   115 00002692 E9401D0000          <1>     jmp extErrExit 
   116                              <1> 
   117                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   118                              <1> ;Input: bx = file handle to close
   119 00002697 E8200B0000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   120 0000269C 0F82351D0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   121 000026A2 E883090000          <1>     call setCurrentSFT  ;Set this as the current SFT
   122                              <1>     ;Check count to see if we need to check share mode
   123 000026A7 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared
   124 000026AC 7409                <1>     je .skipNetCheck
   125                              <1>     ;Now check sharing mode
   126 000026AE 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   127 000026B2 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   128 000026B4 3C70                <1>     cmp al, netFCBShare
   129 000026B6 9C                  <1>     pushfq  ;Save the result of this for after closing the file
   130                              <1> .skipNetCheck:
   131 000026B7 E80B060000          <1>     call closeMain  ;Call close main!
   132 000026BC 0F82151D0000        <1>     jc extErrExit   ;If an error, exit through error exit
   133 000026C2 9D                  <1>     popfq
   134 000026C3 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   135 000026C5 E8BE0A0000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   136 000026CA C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   137                              <1> .exitOk:
   138 000026CD 31C0                <1>     xor eax, eax    ;Return value
   139 000026CF E9F51C0000          <1>     jmp extGoodExit
   140                              <1> 
   141                              <1> readFileHdl:       ;ah = 3Fh, handle function
   142 000026D4 488D355E060000      <1>     lea rsi, readBytes
   143                              <1> .common:
   144 000026DB E8DC0A0000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   145 000026E0 0F82F11C0000        <1>     jc extErrExit   ;Error code in al and exit
   146 000026E6 E83F090000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   147 000026EB 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   148 000026ED FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   149 000026F3 488915(79C30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   150 000026FA FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   151 000026FC 8F05(79C30300)      <1>     pop qword [currentDTA]
   152 00002702 0F82CF1C0000        <1>     jc extErrExit   ;Error code in al and exit
   153 00002708 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   154 0000270A E9B11C0000          <1>     jmp extGoodExit2    ;and exit!
   155                              <1> 
   156                              <1> writeFileHdl:      ;ah = 40h, handle function
   157 0000270F 488D35E0080000      <1>     lea rsi, writeBytes
   158 00002716 E9C0FFFFFF          <1>     jmp readFileHdl.common
   159                              <1> 
   160                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   161                              <1> ;Here don't allow malformed chars unless it is a network CDS
   162 0000271B BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   163 00002720 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   164 00002727 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   165 0000272A 880D(56C60300)      <1>     mov byte [searchAttr], cl
   166 00002730 4889D6              <1>     mov rsi, rdx
   167 00002733 E8ED190000          <1>     call checkPathspecOK
   168 00002738 730A                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   169                              <1> .badPath:
   170 0000273A B803000000          <1>     mov eax, errPnf
   171 0000273F E9931C0000          <1>     jmp extErrExit
   172                              <1> .pathOk:
   173 00002744 488D3D(7FC40300)    <1>     lea rdi, buffer1
   174 0000274B 52                  <1>     push rdx
   175 0000274C E857EBFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   176 00002751 5A                  <1>     pop rdx
   177 00002752 0F827F1C0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   178                              <1>     ;In the case of a wildcard, recall this will return the first file
   179 00002758 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   180 0000275F 0F85721C0000        <1>     jnz extErrExit
   181                              <1> ;Internal current dir is now populated with dir entry
   182                              <1> ; and internal DOS directory variables now point to this entry.
   183                              <1> ;Check if the file is a char device or read only.
   184 00002765 B805000000          <1>     mov eax, errAccDen  
   185 0000276A F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   186 00002771 0F85601C0000        <1>     jnz extErrExit  ;Can't delete a char dev
   187 00002777 F605(C6C50300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
   188 0000277E 0F85531C0000        <1>     jnz extErrExit  ;Can't delete a read only file
   189                              <1>     ;Now check if the cds is redir, or we entered via server to allow wildcards.
   190 00002784 E87F170000          <1>     call testCDSNet ;Gets working CDS in rdi
   191 00002789 7210                <1>     jc .gotoDelete
   192 0000278B 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   193 00002792 7407                <1>     je .gotoDelete
   194                              <1>     ;Now we check to see if we have wildcards. We do not generally allow them.
   195                              <1>     ;Network CDS and server invokations allow wildcards
   196 00002794 E8081A0000          <1>     call scanPathWC
   197 00002799 729F                <1>     jc .badPath ;Dont allow wildcards
   198                              <1> .gotoDelete:
   199 0000279B E835030000          <1>     call deleteMain
   200 000027A0 E8F8E1FFFF          <1>     call setBufferReferenced
   201 000027A5 0F822C1C0000        <1>     jc extErrExit
   202 000027AB 803D(5CC60300)FF    <1>     cmp byte [dosInvoke], -1    ;Server invoke?
   203 000027B2 0F85111C0000        <1>     jne extGoodExit
   204                              <1>     ;Here is server invoke, pass through call again.
   205                              <1>     ;We found first, so build a ffblock from the curDir data and find next
   206                              <1>     ;If there are more, delete until no more files match wildcard pattern
   207                              <1> .serverWCloop:
   208 000027B8 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   209 000027BE 488D3D(90C50300)    <1>     lea rdi, dosffblock
   210 000027C5 57                  <1>     push rdi    ;Push this address onto the stack
   211 000027C6 E824EAFFFF          <1>     call setupFFBlock   ;Setup FFblock internally
   212 000027CB 8F05(79C30300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
   213 000027D1 E8EAE6FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
   214 000027D6 8F05(79C30300)      <1>     pop qword [currentDTA]
   215 000027DC E8F4020000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
   216 000027E1 E8B7E1FFFF          <1>     call setBufferReferenced
   217 000027E6 73D0                <1>     jnc .serverWCloop     
   218                              <1> ;Stop as soon as an error occurs
   219 000027E8 3C12                <1>     cmp al, errNoFil    ;Check if no more files (not considered error here)
   220 000027EA 0F85E71B0000        <1>     jne extErrExit
   221 000027F0 31C0                <1>     xor eax, eax
   222 000027F2 E9D21B0000          <1>     jmp extGoodExit
   223                              <1> 
   224                              <1> 
   225                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   226                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   227 000027F7 E8C0090000          <1>     call getSFTPtr
   228 000027FC 0F82D51B0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   229 00002802 3C03                <1>     cmp al, 3
   230 00002804 720A                <1>     jb .validFunction
   231 00002806 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   232 0000280B E9C71B0000          <1>     jmp extErrExit
   233                              <1> .validFunction:
   234 00002810 3C01                <1>     cmp al, 1
   235 00002812 7713                <1>     ja .seekend
   236 00002814 7203                <1>     jb .seekset
   237                              <1> ;Here we are at seekcur, seek from current (signed)
   238 00002816 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   239                              <1> .seekset:
   240                              <1> ;Seek from the start (unsigned)
   241 00002819 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   242 0000281C E854170000          <1>     call getUserRegs    ;Get user regs in rsi
   243 00002821 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   244                              <1> .seekExit:
   245 00002824 30C0                <1>     xor al, al  ;Return OK!
   246                              <1>     return 
    18                              <2> %%_ret:
    19 00002826 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1> .seekend:
   248                              <1> ;Here we are at seekend, seek from end (signed)
   249 00002827 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   250 0000282D 7505                <1>     jnz .netCheck
   251                              <1> .proceedDisk:
   252 0000282F 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   253 00002832 EBE5                <1>     jmp short .seekset
   254                              <1> .netCheck:
   255 00002834 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   256 0000283A 75F3                <1>     jnz .proceedDisk
   257 0000283C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   258                              <1>     ;Check it's share mode
   259 00002840 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   260 00002845 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   261 0000284A 7407                <1>     je .netSeek
   262 0000284C 3D30000000          <1>     cmp eax, denyReadShare
   263 00002851 75DC                <1>     jne .proceedDisk
   264                              <1> .netSeek:
   265 00002853 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   266 00002858 CD4F                <1>     int 4Fh
   267 0000285A 73C8                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   268 0000285C E9761B0000          <1>     jmp extErrExit
   269                              <1> 
   270                              <1> 
   271                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   272 00002861 3C01                <1>     cmp al, 1
   273 00002863 760A                <1>     jbe .subFuncOk
   274 00002865 B801000000          <1>     mov eax, errInvFnc
   275 0000286A E9681B0000          <1>     jmp extErrExit
   276                              <1> .subFuncOk:
   277 0000286F 4889D6              <1>     mov rsi, rdx
   278 00002872 89C3                <1>     mov ebx, eax    ;Store function code in bl
   279 00002874 53                  <1>     push rbx
   280 00002875 51                  <1>     push rcx
   281 00002876 E8AA180000          <1>     call checkPathspecOK
   282 0000287B 730E                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   283 0000287D 740C                <1>     jz .pathOk  ;Can be terminated with a silly char
   284                              <1> .badPath:
   285 0000287F 59                  <1>     pop rcx
   286 00002880 5B                  <1>     pop rbx
   287 00002881 B803000000          <1>     mov eax, errPnf
   288 00002886 E94C1B0000          <1>     jmp extErrExit
   289                              <1> .pathOk:
   290 0000288B E853190000          <1>     call checkPathNet 
   291 00002890 74ED                <1>     jz .badPath ;Or Net paths
   292 00002892 E80A190000          <1>     call scanPathWC
   293 00002897 72E6                <1>     jc .badPath ;Dont allow wildcards
   294 00002899 488D3D(7FC40300)    <1>     lea rdi, buffer1
   295 000028A0 52                  <1>     push rdx
   296 000028A1 C605(56C60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   297 000028A8 E8FBE9FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   298 000028AD 5A                  <1>     pop rdx
   299 000028AE 59                  <1>     pop rcx
   300 000028AF 5B                  <1>     pop rbx
   301 000028B0 0F82211B0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   302                              <1>     ;In the case of a wildcard, recall this will return the first file
   303 000028B6 803D(5EC60300)FF    <1>     cmp byte [fileExist], -1
   304 000028BD 0F85141B0000        <1>     jnz extErrExit
   305                              <1> 
   306 000028C3 E840160000          <1>     call testCDSNet
   307 000028C8 730C                <1>     jnc .notNet
   308 000028CA 750A                <1>     jnz .notNet ;This type of net ok
   309 000028CC B805000000          <1>     mov eax, errAccDen
   310 000028D1 E9011B0000          <1>     jmp extErrExit
   311                              <1> .notNet:
   312 000028D6 84DB                <1>     test bl, bl
   313 000028D8 7526                <1>     jnz .setAttribs
   314                              <1>     ;Get attribs here
   315 000028DA 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   316 000028E0 7412                <1>     jz .getDiskAttribs
   317 000028E2 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   318 000028E7 CD4F                <1>     int 4Fh
   319 000028E9 0F82E81A0000        <1>     jc extErrExit
   320 000028EF E9D51A0000          <1>     jmp extGoodExit
   321                              <1> .getDiskAttribs:
   322 000028F4 0FB605(C6C50300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   323 000028FB E9C91A0000          <1>     jmp extGoodExit
   324                              <1> .setAttribs:
   325                              <1>     ;Set attribs here
   326 00002900 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   327 00002906 7417                <1>     jz .setDiskAttribs
   328 00002908 0FB7C9              <1>     movzx ecx, cx
   329 0000290B 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   330 0000290C B80E110000          <1>     mov eax, 110Eh
   331 00002911 CD4F                <1>     int 4Fh
   332 00002913 59                  <1>     pop rcx
   333 00002914 0F82BD1A0000        <1>     jc extErrExit
   334 0000291A E9AA1A0000          <1>     jmp extGoodExit
   335                              <1> .setDiskAttribs:
   336 0000291F E863F0FFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   337 00002924 0F82AD1A0000        <1>     jc extErrExit
   338 0000292A F6C118              <1>     test cl, dirVolumeID | dirDirectory
   339 0000292D 740A                <1>     jz .set
   340 0000292F B805000000          <1>     mov eax, errAccDen
   341 00002934 E99E1A0000          <1>     jmp extErrExit
   342                              <1> .set:
   343 00002939 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   344 0000293C 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   345 0000293F 08E9                <1>     or cl, ch
   346 00002941 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   347 00002944 31C0                <1>     xor eax, eax
   348 00002946 E97E1A0000          <1>     jmp extGoodExit
   349                              <1> 
   350                              <1> 
   351                              <1> duplicateHandle:   ;ah = 45h, handle function
   352                              <1> ;Input: bx = Handle to duplicate
   353                              <1> ;Output: If ok then ax = New handle
   354 0000294B E8CD080000          <1>     call findFreeJFTSpace    ;First find a free space in the JFT
   355 00002950 0F82811A0000        <1>     jc extErrExit   ;Exit if no space
   356                              <1>     ;rsi points to the free space
   357                              <1> .duplicateCommon:
   358 00002956 E82D080000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   359 0000295B 4887F7              <1>     xchg rsi, rdi
   360 0000295E AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   361 0000295F AA                  <1>     stosb
   362 00002960 48FFCE              <1>     dec rsi
   363 00002963 48FFCF              <1>     dec rdi
   364                              <1>     ;rdi now points to new position
   365                              <1>     ;rsi points to old position
   366                              <1>     ;al has SFT ndx
   367 00002966 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   368 00002969 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   369 0000296C E8E2070000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   370 00002971 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   371                              <1>     ;Now we must return in ax the entry in the JFT 
   372 00002974 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
   373 0000297B 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   374 0000297F 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   375 00002982 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   376 00002984 E9401A0000          <1>     jmp extGoodExit
   377                              <1> 
   378                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   379                              <1> ;Input: bx = Handle to duplicate
   380                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   381                              <1>     ;First we close cx
   382 00002989 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   383 0000298B 53                  <1>     push rbx
   384 0000298C 51                  <1>     push rcx
   385 0000298D E805FDFFFF          <1>     call closeFileHdl   ;Close handle 
   386 00002992 59                  <1>     pop rcx
   387 00002993 5B                  <1>     pop rbx
   388                              <1>     retc    ;The error code is set by errExtExit and CF is set on callerFrame
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00002994 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00002996 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   389                              <1>     ;Else, close was ok, lets duplicate now
   390 00002997 E8EC070000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   391 0000299C 0F82351A0000        <1>     jc extErrExit   ;Return bad with error code in al
   392 000029A2 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   393 000029A4 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   394 000029A7 EBAD                <1>     jmp short duplicateHandle.duplicateCommon
   395                              <1> 
   396                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   397                              <1> ;Input: cx = Search Attributes, cl only used
   398                              <1> ;       rdx = Ptr to path to file to look for
   399                              <1> ;       al = Document as needing to be 0 for now
   400                              <1> ;Return:
   401                              <1> ;Data in the DTA or error through AX with CF=CY
   402                              <1> ;CAVEATS!
   403                              <1> ;DTA:attribFnd = 40h => Char dev
   404                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   405 000029A9 880D(56C60300)      <1>     mov byte [searchAttr], cl
   406 000029AF 4889D6              <1>     mov rsi, rdx
   407 000029B2 E86E170000          <1>     call checkPathspecOK    ;This uses rsi and preserves it
   408 000029B7 730A                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   409                              <1>     ;Dont allow paths which end in a malformed char for ASCIIZ
   410                              <1>     ;ONLY ALLOW TRUENAME TO RESOLVE SUCH PATHS 
   411                              <1> .badPath:
   412 000029B9 B803000000          <1>     mov eax, errPnf
   413 000029BE E9141A0000          <1>     jmp extErrExit
   414                              <1> .pathspecOk:
   415 000029C3 FF35(79C30300)      <1>     push qword [currentDTA]
   416 000029C9 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   417 000029D0 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   418 000029D7 488D3D(7FC40300)    <1>     lea rdi, buffer1    ;Build the full path here
   419 000029DE E8C5E8FFFF          <1>     call getFilePath
   420                              <1> .findfileExit:
   421 000029E3 8F05(79C30300)      <1>     pop qword [currentDTA]
   422 000029E9 0F82E8190000        <1>     jc extErrExit
   423 000029EF 488D3D(90C50300)    <1>     lea rdi, dosffblock
   424 000029F6 57                  <1>     push rdi
   425 000029F7 E8F3E7FFFF          <1>     call setupFFBlock
   426 000029FC 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   427 000029FD 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
   428 00002A04 B92B000000          <1>     mov ecx, ffBlock_size
   429 00002A09 F3A4                <1>     rep movsb   ;Copy the whole block. 
   430                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   431 00002A0B 31C0                <1>     xor eax, eax    ;Return value
   432 00002A0D E9B7190000          <1>     jmp extGoodExit ;Exit well
   433                              <1> 
   434                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   435                              <1> ;Input: DTA has the find first block from the previous search
   436 00002A12 488B35(79C30300)    <1>     mov rsi, qword [currentDTA]
   437 00002A19 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   438 00002A20 B92B000000          <1>     mov ecx, ffBlock_size
   439 00002A25 F3A4                <1>     rep movsb
   440 00002A27 FF35(79C30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   441 00002A2D 488D3D(90C50300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   442 00002A34 48893D(79C30300)    <1>     mov qword [currentDTA], rdi
   443 00002A3B E880E4FFFF          <1>     call findNextMain
   444 00002A40 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   445                              <1> 
   446                              <1> renameFile:        ;ah = 56h
   447 00002A42 BB16000000          <1>     mov ebx, dirInclusive
   448 00002A47 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   449 00002A4E 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   450 00002A51 880D(56C60300)      <1>     mov byte [searchAttr], cl
   451                              <1> 
   452                              <1> 
   453                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   454                              <1> createNewFile:     ;ah = 5Bh
   455                              <1> 
   456                              <1> lockUnlockFile:    ;ah = 5Ch
   457 00002A57 E97B190000          <1>     jmp extErrExit
   458                              <1> setHandleCount:    ;ah = 67h
   459 00002A5C E976190000          <1>     jmp extErrExit
   460                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   461                              <1>     ;Input: bx = File to flush
   462 00002A61 E856070000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   463 00002A66 0F826B190000        <1>     jc extErrExit
   464 00002A6C E8B9050000          <1>     call setCurrentSFT
   465                              <1>     ;Now we check if the device is a char, disk or net file
   466 00002A71 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   467 00002A75 66A90080            <1>     test ax, devRedirDev
   468 00002A79 7512                <1>     jnz .notNet
   469                              <1>     ;Commit file net redir call and exit
   470 00002A7B B807110000          <1>     mov eax, 1107h
   471 00002A80 CD4F                <1>     int 4Fh
   472 00002A82 0F824F190000        <1>     jc extErrExit
   473 00002A88 E93D000000          <1>     jmp .exitOk
   474                              <1> .notNet:
   475 00002A8D 66A98000            <1>     test ax, devCharDev
   476 00002A91 7418                <1>     jz .blokDev
   477                              <1>     ;Here we simply update date/time fields in the SFT structure before exiting
   478 00002A93 E89BF9FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   479 00002A98 0F8239190000        <1>     jc extErrExit  ;If we fail to get time/date, fail the request
   480                              <1>     ;Build date and time words
   481 00002A9E E87BFAFFFF          <1>     call getDirDTwords  ;Get date time words packed in eax
   482 00002AA3 894713              <1>     mov dword [rdi + sft.wTime], eax    ;Store them at the same time
   483 00002AA6 E91F000000          <1>     jmp .exitOk
   484                              <1> .blokDev:
   485 00002AAB 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   486 00002AAF E84C140000          <1>     call setWorkingDPB
   487 00002AB4 E822EFFFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   488 00002AB9 0F8218190000        <1>     jc extErrExit
   489 00002ABF E891E0FFFF          <1>     call flushFile  ;Now the file gets flushed
   490 00002AC4 0F820D190000        <1>     jc extErrExit
   491                              <1> .exitOk:
   492 00002ACA 30C0                <1>     xor al, al
   493 00002ACC E8A4140000          <1>     call getUserRegs
   494 00002AD1 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   495                              <1>     return
    18                              <2> %%_ret:
    19 00002AD4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   496                              <1> ;-----------------------------------:
   497                              <1> ;       Main File IO Routines       :
   498                              <1> ;-----------------------------------:
   499                              <1> deleteMain:
   500                              <1> ;Now unlink FAT chain and then clear directory entry
   501                              <1> ;Get the start cluster of this file
   502                              <1> ;Input: rdi = cds for the drive
   503                              <1> ; The file must have NOT be read-only.
   504                              <1> ; If the CDS is NOT a net cds then the following must hold:
   505                              <1> ;     - curDirCopy must be filled with the file directory information
   506                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
   507                              <1> ;Output: CF=NC => Success, 
   508                              <1> ; If not net CDS:
   509                              <1> ;   rsi keeps pointing to directory entry.
   510                              <1> ;   al = First char of the file that was deleted.
   511                              <1> ;        CF=CY => Error
   512                              <1> ;The dir buffer must be marked as referenced once we are done with it
   513 00002AD5 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
   514 00002ADC E827140000          <1>     call testCDSNet ;CF=CY => Not net
   515 00002AE1 7208                <1>     jc .notNet
   516 00002AE3 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
   517 00002AE8 CD4F                <1>     int 4Fh
   518                              <1>     return
    18                              <2> %%_ret:
    19 00002AEA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   519                              <1> .notNet:
   520 00002AEB 52                  <1>     push rdx
   521 00002AEC 0FB715(D5C50300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   522 00002AF3 0FB705(CFC50300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   523 00002AFA C1E010              <1>     shl eax, 10h
   524 00002AFD 09D0                <1>     or eax, edx ;Add low bits to eax
   525 00002AFF 5A                  <1>     pop rdx
   526 00002B00 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
   527 00002B02 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
   528 00002B04 488B2D(64C60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
   529 00002B0B E828E2FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
   530 00002B10 720F                <1>     jc .exit
   531                              <1> .skipUnlink:
   532                              <1>     ;Now replace the first char of the directory to 0E5h
   533                              <1>     ;Get the disk directory in a buffer to manipulate the entry
   534 00002B12 E870EEFFFF          <1>     call getDiskDirectoryEntry
   535 00002B17 7208                <1>     jc .exit
   536 00002B19 8A05(62C60300)      <1>     mov al, byte [delChar]
   537 00002B1F 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
   538                              <1>     ;CF must be clear
   539                              <1> .exit:
   540                              <1>     return
    18                              <2> %%_ret:
    19 00002B21 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   541                              <1> 
   542                              <1> openMain:
   543                              <1>     return
    18                              <2> %%_ret:
    19 00002B22 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   544                              <1> createMain:
   545                              <1> ;Input: ax (formally al) = File attributes
   546                              <1> ;       [currentSFT] = SFT we are building
   547                              <1> ;       [workingCDS] = CDS of drive to access
   548                              <1> ;       [workingDPB] = DPB of drive to access
   549 00002B23 0FB6C0              <1>     movzx eax, al
   550 00002B26 A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
   551 00002B28 750A                <1>     jnz .invalidAttrib
   552 00002B2A A808                <1>     test al, dirVolumeID
   553 00002B2C 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
   554 00002B2E 0C20                <1>     or al, dirArchive   ;Set archive bit
   555 00002B30 A810                <1>     test al, dirDirectory   
   556 00002B32 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
   557                              <1> .invalidAttrib:
   558 00002B34 B805000000          <1>     mov eax, errAccDen
   559 00002B39 F9                  <1>     stc
   560                              <1>     return
    18                              <2> %%_ret:
    19 00002B3A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   561                              <1> .validAttr:
   562 00002B3B 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   563 00002B42 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS]
   564 00002B49 4881FEFFFFFFFF      <1>     cmp rsi, -1
   565 00002B50 750A                <1>     jne .diskFile
   566 00002B52 50                  <1>     push rax    ;Save the new attributes
   567 00002B53 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
   568 00002B58 CD4F                <1>     int 4Fh
   569 00002B5A 5B                  <1>     pop rbx
   570                              <1>     return
    18                              <2> %%_ret:
    19 00002B5B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   571                              <1> .diskFile:
   572 00002B5C 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
   573 00002B62 740A                <1>     jz .hardFile
   574 00002B64 50                  <1>     push rax    ;Save the new attributes
   575 00002B65 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
   576 00002B6A CD4F                <1>     int 4Fh
   577 00002B6C 5B                  <1>     pop rbx
   578                              <1>     return
    18                              <2> %%_ret:
    19 00002B6D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   579                              <1> .hardFile:
   580 00002B6E 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
   581 00002B74 C605(61C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
   582 00002B7B C605(62C60300)E5    <1>     mov byte [delChar], 0E5h
   583 00002B82 E811180000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
   584 00002B87 50                  <1>     push rax    ;Save the file attributes on stack
   585 00002B88 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
   586 00002B8D E807000000          <1>     call buildSFTEntry
   587 00002B92 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
   588 00002B93 E80A180000          <1>     call dosCrit1Exit
   589                              <1>     return
    18                              <2> %%_ret:
    19 00002B98 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   590                              <1> buildSFTEntry:
   591                              <1> ;Called in a critical section.
   592                              <1> ;Input: al = Open mode
   593                              <1> ;       STACK: File attributes
   594                              <1> ;       [currentSFT] = SFT we are building
   595                              <1> ;       [workingCDS] = CDS of drive to access
   596                              <1> ;       [workingDPB] = DPB of drive to access
   597                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
   598                              <1> ;
   599                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
   600                              <1> ;                  - wDeviceInfo is set except for inherit bit
   601                              <1> ;        If CF=CY: - Return fail
   602                              <1> ;
   603                              <1> ;
   604                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
   605                              <1> ;   If not, create disk entry.
   606                              <1> ;Check if the device was a char device by checking curDirCopy.
   607                              <1> ;If disk, get dpb. We check if the parent dir was found.
   608                              <1> 
   609                              <1> ;First set the open mode, time and date, name, ownerPSP and file pointer
   610                              <1> ; to start of file fields of the SFT
   611 00002B99 55                  <1>     push rbp    ;file attribute is rbp + 10h
   612 00002B9A 4889E5              <1>     mov rbp, rsp
   613 00002B9D 488B35(84C60300)    <1>     mov rsi, qword [currentSFT]
   614                              <1> ;Set the open mode
   615 00002BA4 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
   616                              <1> ;Get current time
   617 00002BA8 E886F8FFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   618 00002BAD E86CF9FFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
   619 00002BB2 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
   620                              <1> ;Now save the name
   621 00002BB5 56                  <1>     push rsi    ;Save the sft ptr
   622 00002BB6 488D7E30            <1>     lea rdi, qword [rsi + sft.sFileName]    ;Store in file name field
   623 00002BBA 488D35(BBC50300)    <1>     lea rsi, qword [curDirCopy + fatDirEntry.name]  ;Copy from dir 
   624 00002BC1 48A5                <1>     movsq   ;Copy over the space padded name to the sft
   625 00002BC3 66A5                <1>     movsw
   626 00002BC5 A4                  <1>     movsb
   627 00002BC6 5E                  <1>     pop rsi
   628                              <1> ;Set current Owner
   629 00002BC7 488B05(81C30300)    <1>     mov rax, qword [currentPSP]
   630 00002BCE 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
   631                              <1> ;Set file pointer to first byte
   632 00002BD2 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
   633                              <1> ;Common fields set
   634 00002BD9 F605(61C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
   635 00002BE0 0F84A5000000        <1>     jz .openProc
   636                              <1>     ;Here if Creating a file.
   637 00002BE6 F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   638 00002BED 0F85A1000000        <1>     jnz .charDev
   639 00002BF3 F605(5EC60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
   640 00002BFA 0F8489000000        <1>     jz .createFile
   641                              <1>     ;Here disk file exists, so recreating the file.
   642 00002C00 E8D0FEFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
   643                              <1>     ;al has the char for the filename
   644                              <1>     ;Sets vars for the sector/offset into the sector
   645 00002C05 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   646 00002C0C 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
   647 00002C0E 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
   648                              <1>     ;al has file attributes.
   649 00002C12 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
   650 00002C14 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
   651 00002C17 31C0                <1>     xor eax, eax
   652                              <1>     ;Clear all the fields south of ntRes (20 bytes)
   653 00002C19 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
   654 00002C1D 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
   655 00002C21 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
   656 00002C24 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
   657 00002C27 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
   658 00002C2A 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
   659                              <1> 
   660 00002C2D 57                  <1>     push rdi    ;Save SFT pointer
   661 00002C2E 488D3D(BBC50300)    <1>     lea rdi, curDirCopy ;Copy this directory entry
   662 00002C35 B920000000          <1>     mov ecx, fatDirEntry_size
   663 00002C3A F3A4                <1>     rep movsb
   664 00002C3C E84FDDFFFF          <1>     call setBufferDirty ;We wrote to this buffer
   665 00002C41 E857DDFFFF          <1>     call setBufferReferenced    ;We are now done with this buffer, reclaimable
   666 00002C46 5F                  <1>     pop rdi
   667                              <1> 
   668                              <1>     ;Now populate the remaining SFT fields 
   669 00002C47 488D35(BBC50300)    <1>     lea rsi, curDirCopy
   670 00002C4E 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
   671 00002C51 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
   672 00002C54 488B05(98C60300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
   673 00002C5B 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
   674 00002C5F 0FB705(A0C60300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
   675 00002C66 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
   676 00002C69 31C0                <1>     xor eax, eax
   677 00002C6B 57                  <1>     push rdi
   678 00002C6C 488D7F17            <1>     lea rdi, qword [rdi + sft.dFileSize]
   679 00002C70 48AB                <1>     stosq    ;Clear fileSzie and curntOff
   680 00002C72 48AB                <1>     stosq
   681 00002C74 5F                  <1>     pop rdi  ;Clear relClust and AbdClusr
   682                              <1>     ;Now set DeviceInfo to zero and get the dpb for this disk file
   683 00002C75 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax
   684 00002C79 488B05(64C60300)    <1>     mov rax, qword [workingDPB]
   685 00002C80 48894707            <1>     mov qword [rdi + sft.qPtr], rax
   686                              <1>     ;SFT filled, now we can return
   687 00002C84 E939000000          <1>     jmp .exit
   688                              <1> .createFile:
   689                              <1>     ;Create a new file directory entry
   690                              <1>     ;tempSect and entry must be set correctly when finding the directory 
   691                              <1>     ; sector and entry
   692 00002C89 EB09                <1>     jmp short .open
   693                              <1> .openProc:
   694                              <1>     ;Here if Opening a file.
   695 00002C8B F605(C6C50300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
   696 00002C92 7500                <1>     jnz .charDev
   697                              <1> .open:
   698                              <1> .charDev:
   699 00002C94 488B05(BBC50300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
   700 00002C9B E855150000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
   701 00002CA0 7307                <1>     jnc .notBadCharDevName
   702 00002CA2 B805000000          <1>     mov eax, errAccDen
   703 00002CA7 EB19                <1>     jmp short .exit ;CF already set
   704                              <1> .notBadCharDevName:
   705 00002CA9 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
   706 00002CAD 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
   707 00002CB1 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
   708 00002CB4 80CB60              <1>     or bl, charDevBinary | charDevNoEOF ;Set binary mode and noEOF on read
   709 00002CB7 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
   710 00002CBB C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
   711                              <1> .exit:
   712 00002CC2 5D                  <1>     pop rbp
   713                              <1>     return
    18                              <2> %%_ret:
    19 00002CC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   714                              <1> .bad:
   715 00002CC4 F9                  <1>     stc
   716 00002CC5 EBFB                <1>     jmp short .exit
   717                              <1> closeMain: ;Int 4Fh AX=1201h
   718                              <1> ;Gets the directory entry for a file
   719                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
   720                              <1> ;If CF=CY on return: Error, return error with al = error code
   721                              <1> ;Preserve all regs except eax and rdi
   722                              <1> ; If CF=NC on return: eax = Unknown
   723                              <1> ;                     rdi = current SFT ptr
   724 00002CC7 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
   725 00002CCE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
   726 00002CD4 7508                <1>     jnz .physical
   727                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
   728 00002CD6 B806110000          <1>     mov eax, 1106h  ;Make request
   729 00002CDB CD4F                <1>     int 4Fh ;Beep!
   730                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 00002CDD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   731                              <1> .physical:  
   732                              <1> ; We make a request to the dev dir to close the device
   733                              <1> ; If the device is disk, we then update the directory entry for the disk file
   734 00002CDE E8B5160000          <1>     call dosCrit1Enter  ;Enter critical section 1
   735 00002CE3 53                  <1>     push rbx
   736 00002CE4 56                  <1>     push rsi
   737 00002CE5 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
   738 00002CE9 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   739 00002CEF 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
   740                              <1>     ;rsi has DPB pointer here
   741                              <1>     ;rdi has the SFT pointer
   742 00002CF1 55                  <1>     push rbp
   743 00002CF2 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
   744 00002CF5 E806120000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
   745 00002CFA E8DCECFFFF          <1>     call updateDirectoryEntryForFile
   746 00002CFF 5D                  <1>     pop rbp
   747                              <1>     ;If CF is set, Fail was requested and ax has an error code
   748 00002D00 722F                <1>     jc .exit
   749 00002D02 E84EDEFFFF          <1>     call flushFile
   750 00002D07 7228                <1>     jc .exit    ;If something went wrong, exit
   751 00002D09 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
   752 00002D0D 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
   753                              <1> .charClose:
   754                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
   755                              <1>     ;We now decrement handle count in SFT structure
   756 00002D11 E84C050000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
   757 00002D16 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
   758 00002D19 7503                <1>     jnz .driverClose
   759 00002D1B 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
   760                              <1> .driverClose:
   761 00002D1E 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
   762                              <1>     ;and if the device is a disk device, cl will have the unit number
   763                              <1>     ;We first check if the driver supports oper/close requests
   764 00002D1F 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
   765 00002D25 750A                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
   766                              <1>     ;rsi has device driver ptr for device, make request
   767 00002D27 E8A3110000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
   768 00002D2C E84B0E0000          <1>     call goDriver   ;Make request
   769                              <1>     ;Don't check the status here, as we are simply informing the driver 
   770                              <1>     ; of an operation. Nothing should be able to go wrong. 
   771                              <1>     ;Functionally, an ignore if anything does go wrong.
   772                              <1> .exit:
   773 00002D31 5E                  <1>     pop rsi
   774 00002D32 5B                  <1>     pop rbx
   775 00002D33 E86A160000          <1>     call dosCrit1Exit
   776                              <1>     return
    18                              <2> %%_ret:
    19 00002D38 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   777                              <1> 
   778                              <1> readBytes:
   779                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
   780                              <1> ;Input: ecx = Number of bytes to read
   781                              <1> ;Output: ecx = Number of bytes read
   782                              <1> ;Number of bytes read 
   783                              <1> ;If CF=CY, return with error code in ax
   784 00002D39 E8F4020000          <1>     call getCurrentSFT  ;Get current SFT in rdi
   785 00002D3E 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   786 00002D42 240F                <1>     and al, 0Fh ;Eliminate except access mode
   787 00002D44 3C01                <1>     cmp al, WriteAccess
   788 00002D46 7509                <1>     jne .readable
   789 00002D48 B805000000          <1>     mov eax, errAccDen
   790 00002D4D 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
   791 00002D4F F9                  <1>     stc
   792                              <1>     return
    18                              <2> %%_ret:
    19 00002D50 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   793                              <1> .readable:
   794 00002D51 E81D030000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
   795 00002D56 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
   796 00002D59 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   797 00002D5F 740A                <1>     jz .notRedir
   798 00002D61 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
   799 00002D66 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
   800                              <1>     return 
    18                              <2> %%_ret:
    19 00002D68 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   801                              <1> .exitOk:
   802 00002D69 F8                  <1>     clc
   803                              <1>     return 
    18                              <2> %%_ret:
    19 00002D6A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   804                              <1> .notRedir:
   805 00002D6B 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   806 00002D71 7510                <1>     jnz readCharDev
   807 00002D73 E820160000          <1>     call dosCrit1Enter
   808 00002D78 E898010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
   809 00002D7D E820160000          <1>     call dosCrit1Exit
   810                              <1>     return 
    18                              <2> %%_ret:
    19 00002D82 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   811                              <1> readCharDev:
   812                              <1> ;rdi points to sft for char dev to read
   813                              <1> ;ecx has the number of bytes to transfer
   814                              <1> ;Vars have been set up and DTA has the transfer address
   815                              <1> ;Returns in ecx, the actual bytes transferred
   816                              <1> ;If CF=CY, return with error code in ax
   817 00002D83 C605(6CC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
   818 00002D8A 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
   819 00002D8E 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
   820 00002D95 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
   821 00002D98 0F8475020000        <1>     jz rwExitOk    ;If it does, jump to exit as if EOF has been hit
   822 00002D9E F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
   823 00002DA1 7407                <1>     jz .notNul
   824                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
   825                              <1>     ;NUL never transfers bytes 
   826 00002DA3 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
   827 00002DA5 E969020000          <1>     jmp rwExitOk    ;Goto exit
   828                              <1> .notNul:
   829 00002DAA F6C320              <1>     test bl, charDevBinary
   830 00002DAD 757F                <1>     jnz .binary
   831                              <1>     ;Here if the device is in ASCII mode
   832 00002DAF F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
   833 00002DB2 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
   834                              <1> .consoleInput:
   835                              <1>     ;Console input here
   836 00002DB8 E862F2FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
   837                              <1>     ;Get current offset into buffer (if one exists)
   838 00002DBD 488B35(23C00300)    <1>     mov rsi, qword [vConHdlOff]
   839 00002DC4 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
   840 00002DC7 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
   841 00002DC9 803D(B0C20300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
   842 00002DD0 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
   843                              <1>     ;Else, reset the buffer
   844 00002DD2 66C705(B0C20300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
   844 00002DDA FF                  <1>
   845                              <1> .oldBuf:
   846                              <1> ;Preserve the dta and number of chars to tfr
   847 00002DDB 51                  <1>     push rcx
   848 00002DDC 57                  <1>     push rdi
   849 00002DDD 488D15(B0C20300)    <1>     lea rdx, vConInBuf
   850 00002DE4 E856F2FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
   851 00002DE9 5F                  <1>     pop rdi
   852 00002DEA 59                  <1>     pop rcx
   853 00002DEB 488D35(B2C20300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
   854 00002DF2 803E1A              <1>     cmp byte [rsi], EOF
   855 00002DF5 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
   856 00002DF7 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
   857 00002DFA B00A                <1>     mov al, LF
   858 00002DFC E8D0EDFFFF          <1>     call charOut_B.in   ;Echo CRLF
   859 00002E01 31F6                <1>     xor esi, esi    ;Set ZF = ZE
   860 00002E03 EB18                <1>     jmp short .exit
   861                              <1> .tfrBuf:
   862 00002E05 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
   863 00002E06 AA                  <1>     stosb
   864 00002E07 3C0D                <1>     cmp al, CR 
   865 00002E09 7503                <1>     jne .noCRLF
   866 00002E0B C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
   867                              <1> .noCRLF:
   868 00002E0E 3C0A                <1>     cmp al, LF  ;Compare if al is LF
   869 00002E10 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
   870 00002E12 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
   871                              <1>     ;This only applies if the reason for exiting the loop is al=LF
   872 00002E14 E8B8EDFFFF          <1>     call charOut_B.in   ;Echo CRLF
   873 00002E19 31F6                <1>     xor esi, esi
   874 00002E1B 0C01                <1>     or al, 1    ;Set ZF = NZ
   875                              <1> .exit:
   876 00002E1D E815F2FFFF          <1>     call vConRetDriver
   877 00002E22 488935(23C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
   878 00002E29 E9E5010000          <1>     jmp rwExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
   879                              <1> 
   880                              <1> .binary:
   881                              <1>     ;Setup registers for transfer
   882 00002E2E 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
   883 00002E31 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
   884                              <1>     ;ecx has the number of bytes to transfer directly
   885 00002E34 E8E70F0000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
   886 00002E39 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
   887 00002E40 E8370D0000          <1>     call goDriver   ;Make the request
   888 00002E45 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
   889 00002E48 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   890 00002E4F F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   891 00002E55 7422                <1>     jz .binNoError
   892                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
   893 00002E57 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
   894 00002E59 E8F10B0000          <1>     call charDevErr   ;ah = has part of the error 
   895                              <1>     ;al now has the response
   896 00002E5E 3C00                <1>     cmp al, critIgnore
   897 00002E60 7417                <1>     je .binNoError ;Simply proceed as normal
   898 00002E62 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
   899 00002E65 3C03                <1>     cmp al, critFail
   900 00002E67 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
   901                              <1>     ;Fallthrough here for fail!
   902                              <1> .failExit:
   903 00002E69 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
   904 00002E70 31C9                <1>     xor ecx, ecx
   905 00002E72 B805000000          <1>     mov eax, errAccDen
   906 00002E77 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
   907                              <1>     return
    18                              <2> %%_ret:
    19 00002E78 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   908                              <1> .binNoError:
   909                              <1>     ;Get number of bytes transferred into 
   910 00002E79 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
   911 00002E7F F7D8                <1>     neg eax ;make it into -eax
   912 00002E81 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
   913                              <1>     ;ecx now has bytes left to transfer
   914 00002E85 50                  <1>     push rax    ;Save value on stack
   915 00002E86 31C0                <1>     xor eax, eax ;Set ZF
   916 00002E88 FFC0                <1>     inc eax ;Clear ZF
   917 00002E8A 58                  <1>     pop rax ;Get back the original value
   918 00002E8B E983010000          <1>     jmp rwExitOk    ;GoExit with ecx=Bytes left to read
   919                              <1> .generalASCII:
   920                              <1>     ;ecx has bytes to transfer here
   921                              <1>     ;Setup registers for transfer
   922 00002E90 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
   923 00002E93 51                  <1>     push rcx
   924 00002E94 B901000000          <1>     mov ecx, 1  ;Get one char
   925 00002E99 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
   926 00002E9C E87F0F0000          <1>     call primReqReadSetup   ;Setup request
   927 00002EA1 59                  <1>     pop rcx
   928                              <1>     ;rbx now has request header ptr
   929 00002EA2 488B35(64C60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
   930                              <1> .asciiReadChar:
   931 00002EA9 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
   932 00002EAC E8F2F0FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
   933 00002EB1 E8C60C0000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
   934 00002EB6 0FB73D(25C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
   935 00002EBD F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
   936 00002EC3 741E                <1>     jz .asciiNoError
   937 00002EC5 E8850B0000          <1>     call charDevErr    ;Call Int 44h
   938                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
   939 00002ECA C705(38C40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
   939 00002ED2 0000                <1>
   940 00002ED4 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   941 00002ED7 3C03                <1>     cmp al, critFail
   942 00002ED9 748E                <1>     je .failExit
   943 00002EDB 3C01                <1>     cmp al, critRetry
   944 00002EDD 74CA                <1>     je .asciiReadChar
   945                              <1>     ;Ignore here, pretend NULL CHAR was read
   946 00002EDF 30C0                <1>     xor al, al
   947 00002EE1 EB15                <1>     jmp short .asciiIgnoreEP
   948                              <1> .asciiNoError:
   949                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
   950                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
   951                              <1> ;Preserve RBX, RSI
   952                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
   953 00002EE3 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
   954 00002EE6 813D(38C40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
   954 00002EEE 0000                <1>
   955 00002EF0 0F851D010000        <1>     jne rwExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
   956 00002EF6 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
   957                              <1> .asciiIgnoreEP:
   958 00002EF8 48FF05(30C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
   959 00002EFF 48FFC7              <1>     inc rdi ;Also advance register pointer
   960 00002F02 3C1A                <1>     cmp al, EOF ;Was this char EOF?
   961 00002F04 0F8409010000        <1>     je rwExitOk
   962 00002F0A 3C0D                <1>     cmp al, CR  ;Was this char CR?
   963 00002F0C E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
   964                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
   965 00002F0E FEC0                <1>     inc al  ;make ZF=NZ
   966 00002F10 E9FE000000          <1>     jmp rwExitOk    ;Called with ecx = Number of bytes LEFT to transfer
   967                              <1> 
   968                              <1> readDiskFile:
   969                              <1> ;rdi = Current SFT
   970                              <1> ;rbp = WorkingDPB
   971 00002F15 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
   972 00002F1C C605(5AC60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
   973 00002F23 E86D010000          <1>     call setupVarsForDiskTransfer   ;Now setup disk vars too
   974                              <1>     retc    ;If carry set, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00002F28 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00002F2A C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   975 00002F2B 85C9                <1>     test ecx, ecx   ;If the number of chars to tfr are zero, exit ecx = 0
   976                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002F2D 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   977                              <1>     ;We have the following vars setup:
   978                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
   979                              <1>     ;currClustF
   980                              <1>     ;Now convert currSectC to disk sector by using currClustF
   981                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
   982 00002F2F 8B15(A2C60300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
   983 00002F35 8B460F              <1>     mov eax, dword [rsi + sft.dStartClust]  ;Get starting cluster
   984 00002F38 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
   985 00002F3A 8B0D(C9C60300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
   986 00002F40 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
   987 00002F42 741E                <1>     jz .skipWalk
   988                              <1> .goToCurrentCluster:
   989 00002F44 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
   990 00002F49 0F84C4000000        <1>     je rwExitOk ;Exit with no bytes transferred
   991 00002F4F 89C3                <1>     mov ebx, eax    ;Save eax as current cluster
   992 00002F51 E818DEFFFF          <1>     call walkFAT    ;Get in eax the next cluster
   993 00002F56 0F828B000000        <1>     jc .badExit   ;This can only return Fail
   994 00002F5C FFCA                <1>     dec edx ;Decrement counter
   995 00002F5E 75E4                <1>     jnz .goToCurrentCluster
   996                              <1> ;Now we fall out with ebx = Current cluster
   997 00002F60 89D8                <1>     mov eax, ebx    ;Get the current cluster in eax
   998                              <1> .skipWalk:
   999 00002F62 E8A9DCFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1000                              <1>     ;Now we add the offset to this
  1001 00002F67 0FB61D(AEC60300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1002 00002F6E 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1003 00002F71 488905(AFC60300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1004                              <1> ;Main
  1005 00002F78 EB05                <1>     jmp short .mainSkipBufferSet
  1006                              <1> .mainRead:
  1007 00002F7A E81EDAFFFF          <1>     call setBufferReferenced
  1008                              <1> .mainSkipBufferSet:
  1009 00002F7F E8ADDBFFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1010 00002F84 7261                <1>     jc .badExit
  1011 00002F86 4889DE              <1>     mov rsi, rbx    ;Move the buffer pointer into rsi
  1012 00002F89 0FB71D(B7C60300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1013 00002F90 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1014                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1015                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1016 00002F93 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1017 00002F96 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1018 00002F99 8B1D(CDC60300)      <1>     mov ebx, dword [tfrCntr]
  1019 00002F9F 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1020 00002FA1 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1021 00002FA4 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1022 00002FA8 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1023 00002FAA 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1024 00002FAD 57                  <1>     push rdi
  1025 00002FAE 488B3D(79C30300)    <1>     mov rdi, qword [currentDTA]
  1026 00002FB5 E846020000          <1>     call readWriteBytesBinary
  1027 00002FBA 48893D(79C30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1028 00002FC1 5F                  <1>     pop rdi
  1029 00002FC2 8B0D(CDC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1030 00002FC8 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1031 00002FCA 7447                <1>     jz rwExitOk ;Exit if so!
  1032 00002FCC E811DDFFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1033 00002FD1 7214                <1>     jc .badExit
  1034 00002FD3 743E                <1>     jz rwExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1035                              <1>     ;Else repeat
  1036                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1037 00002FD5 66C705(B7C60300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1037 00002FDD 00                  <1>
  1038 00002FDE 488B05(AFC60300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1039 00002FE5 EB93                <1>     jmp short .mainRead
  1040                              <1> .badExit:
  1041                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1042                              <1>     ; we need to update the SFT before returning
  1043 00002FE7 8B0D(CDC60300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1044 00002FED 30C0                <1>     xor al, al  ;Set ZF flag
  1045 00002FEF E81F000000          <1>     call rwExitOk   ;We call this
  1046 00002FF4 F9                  <1>     stc ;All calls which end up here return Fail!
  1047 00002FF5 C3                  <1>     ret
  1048                              <1> writeBytes:
  1049                              <1> ;Writes the bytes from the user buffer
  1050 00002FF6 E837000000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1051 00002FFB 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1052 00002FFF 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1053 00003001 3C00                <1>     cmp al, ReadAccess
  1054 00003003 7509                <1>     jne .writeable
  1055 00003005 B805000000          <1>     mov eax, errAccDen
  1056 0000300A 31C9                <1>     xor ecx, ecx
  1057 0000300C F9                  <1>     stc
  1058 0000300D C3                  <1>     ret
  1059                              <1> .writeable:
  1060 0000300E E860000000          <1>     call setupVarsForTransfer
  1061                              <1> 
  1062                              <1> rwExitOk:
  1063                              <1> ;Input: ecx = Number of bytes left to transfer!
  1064                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1065 00003013 890D(CDC60300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1066 00003019 7509                <1>     jnz .skipbitClear
  1067 0000301B E812000000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  1068                              <1>     ;The disk transfer must've flushed by now. 
  1069 00003020 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~(blokFileToFlush|charDevNoEOF) ;OR
  1070                              <1>     ;Next char dev read should give EOF.
  1071                              <1> .skipbitClear:  ;Or skip that entirely
  1072 00003024 E811000000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1073                              <1>     return 
    18                              <2> %%_ret:
    19 00003029 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1074                              <1> ;-----------------------------------:
  1075                              <1> ;        File Handle routines       :
  1076                              <1> ;-----------------------------------:
  1077                              <1> 
  1078                              <1> setCurrentSFT:
  1079                              <1> ;Set the pointer in rdi as current SFT 
  1080 0000302A 48893D(84C60300)    <1>     mov qword [currentSFT], rdi
  1081                              <1>     return 
    18                              <2> %%_ret:
    19 00003031 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1082                              <1> getCurrentSFT:
  1083                              <1> ;Get the current SFT pointer in rdi
  1084 00003032 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1085                              <1>     return 
    18                              <2> %%_ret:
    19 00003039 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1086                              <1> updateCurrentSFT:
  1087                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  1088                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  1089 0000303A 57                  <1>     push rdi
  1090 0000303B 488B3D(84C60300)    <1>     mov rdi, qword [currentSFT]
  1091 00003042 8B0D(C9C60300)      <1>     mov ecx, dword [tfrLen]     ;Get bytes to transfer
  1092 00003048 2B0D(CDC60300)      <1>     sub ecx, dword [tfrCntr]    ;Subtract bytes left to transfer
  1093                              <1>     ;ecx has bytes transferred
  1094 0000304E 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  1095 00003054 751A                <1>     jnz .exit
  1096 00003056 50                  <1>     push rax
  1097 00003057 8B05(A6C60300)      <1>     mov eax, dword [currClustD]
  1098 0000305D 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  1099 00003060 8B05(A2C60300)      <1>     mov eax, dword [currClustF]
  1100 00003066 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  1101 00003069 58                  <1>     pop rax
  1102 0000306A 67E303              <1>     jecxz .exit ;Skip this if ecx = 0
  1103 0000306D 014F1B              <1>     add dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  1104                              <1> .exit:
  1105 00003070 5F                  <1>     pop rdi
  1106 00003071 F8                  <1>     clc
  1107                              <1>     return 
    18                              <2> %%_ret:
    19 00003072 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1108                              <1> setupVarsForTransfer:
  1109                              <1> ;Computes the actual bytes to be transferred and 
  1110                              <1> ; sets up internal variables for the transfer. 
  1111                              <1> ;Works for both reading and writing
  1112                              <1> ;Input: ecx = User desired Bytes to transfer
  1113                              <1> ;       rdi = SFT pointer for the file
  1114                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  1115                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  1116                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  1117                              <1> ;
  1118                              <1> ;Note: Does not account for a FULL disk. When writing,
  1119                              <1> ; if the disk will get full as a result of the write,
  1120                              <1> ; stop at the last byte before the transfer. If the 
  1121                              <1> ; file pointer is past the last free byte, write 0
  1122 00003073 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  1123 00003077 488935(64C60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  1124 0000307E 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  1125 00003081 8905(B9C60300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  1126 00003087 890D(C9C60300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  1127 0000308D 890D(CDC60300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  1128 00003093 F8                  <1>     clc
  1129                              <1>     return
    18                              <2> %%_ret:
    19 00003094 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1130                              <1> 
  1131                              <1> setupVarsForDiskTransfer:
  1132                              <1> ;Extension of the above, but for Disk files only
  1133                              <1> ;Input: ecx = User desired Bytes to transfer
  1134                              <1> ;       rdi = SFT pointer for the file
  1135                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred 
  1136                              <1> ;        CF=CY: Error exit
  1137 00003095 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  1138 00003098 8905(B9C60300)      <1>     mov dword [currByteF], eax
  1139 0000309E 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1140 000030A1 85D2                <1>     test edx, edx
  1141 000030A3 0F44CA              <1>     cmovz ecx, edx  ;If the file size is zero, exit
  1142 000030A6 67E349              <1>     jecxz .exit
  1143 000030A9 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  1144                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  1145 000030AD 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
  1146 000030B4 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  1147 000030B7 881D(63C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  1148 000030BD 8B05(B9C60300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1149 000030C3 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1150 000030C7 31D2                <1>     xor edx, edx    ;Zero rdx
  1151 000030C9 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1152                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  1153                              <1>     ;edx has the offset into that sector
  1154 000030CB 8905(AAC60300)      <1>     mov dword [currSectF], eax
  1155 000030D1 668915(B7C60300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1156 000030D8 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  1157 000030DA 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  1158 000030DD 8805(AEC60300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  1159 000030E3 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  1160 000030E5 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  1161 000030E8 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  1162 000030EA 8915(A2C60300)      <1>     mov dword [currClustF], edx ;Save in var
  1163 000030F0 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in eax
  1164                              <1> .exit:
  1165 000030F2 F8                  <1>     clc
  1166                              <1>     return 
    18                              <2> %%_ret:
    19 000030F3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1167                              <1> findFreeSFT:
  1168                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  1169                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  1170                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  1171                              <1> ;        CF=CY => eax = errNhl, error exit
  1172 000030F4 31DB                <1>     xor ebx, ebx
  1173                              <1> .mainLp:
  1174 000030F6 53                  <1>     push rbx    ;Save the sft ndx
  1175 000030F7 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  1176 000030FC 5B                  <1>     pop rbx
  1177 000030FD 7307                <1>     jnc .sftExists
  1178 000030FF B804000000          <1>     mov eax, errNhl
  1179 00003104 F9                  <1>     stc
  1180                              <1>     return
    18                              <2> %%_ret:
    19 00003105 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1181                              <1> .sftExists:
  1182 00003106 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  1183 0000310B 7427                <1>     je .sftFound
  1184 0000310D 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  1185 00003112 751C                <1>     jne .gotoNextNdx
  1186                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  1187 00003114 53                  <1>     push rbx
  1188 00003115 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1189 0000311C 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  1190 00003120 750B                <1>     jne .netGoToNextNdx
  1191 00003122 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1192 00003129 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  1193                              <1> .netGoToNextNdx:
  1194 0000312D 5B                  <1>     pop rbx
  1195 0000312E 7404                <1>     je .sftFound
  1196                              <1> .gotoNextNdx:
  1197 00003130 FFC3                <1>     inc ebx
  1198 00003132 EBC2                <1>     jmp short .mainLp
  1199                              <1> .sftFound:
  1200 00003134 53                  <1>     push rbx
  1201 00003135 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  1202 0000313A 488B1D(9DC30300)    <1>     mov rbx, qword [serverPSP]
  1203 00003141 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  1204 00003145 0FB71D(A5C30300)    <1>     movzx ebx, word [machineNum]
  1205 0000314C 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  1206 00003150 5B                  <1>     pop rbx
  1207 00003151 F8                  <1>     clc
  1208                              <1>     return
    18                              <2> %%_ret:
    19 00003152 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1209                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216
  1210                              <1> ;Return a pointer to the SFT entry in rdi
  1211                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  1212                              <1> ;Output: rdi = SFT pointer
  1213 00003153 488B3D(3BC00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  1214                              <1> .walk:
  1215 0000315A 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  1216 0000315E 7212                <1>     jb .thisTable
  1217 00003160 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  1218 00003164 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  1219 00003167 4881FFFFFFFFFF      <1>     cmp rdi, -1
  1220 0000316E 75EA                <1>     jne .walk
  1221 00003170 F9                  <1>     stc
  1222                              <1>     return
    18                              <2> %%_ret:
    19 00003171 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1223                              <1> .thisTable:
  1224 00003172 50                  <1>     push rax
  1225 00003173 52                  <1>     push rdx
  1226 00003174 B84F000000          <1>     mov eax, sft_size
  1227 00003179 F7E3                <1>     mul ebx
  1228 0000317B 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  1229 0000317E 5A                  <1>     pop rdx
  1230 0000317F 58                  <1>     pop rax
  1231 00003180 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  1232                              <1>     return
    18                              <2> %%_ret:
    19 00003187 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1233                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  1234                              <1> ;Return a zero extended value in rdi for the SFT entry
  1235                              <1> ;Input: bx = JFT handle (we zero extend)
  1236                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  1237                              <1> ;        CF=CY => al = Error code, Fail
  1238 00003188 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  1239 0000318B 663B1D(97C00300)    <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  1240 00003192 7204                <1>     jb .ok
  1241 00003194 B006                <1>     mov al, errBadHdl
  1242 00003196 F9                  <1>     stc
  1243                              <1>     return
    18                              <2> %%_ret:
    19 00003197 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1244                              <1> .ok:
  1245 00003198 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP]
  1246 0000319F 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  1247 000031A4 F8                  <1>     clc
  1248                              <1>     return
    18                              <2> %%_ret:
    19 000031A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1249                              <1> findFreeJFTEntry:
  1250                              <1> ;Finds a free JFT entry in the currentPSP.
  1251                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  1252                              <1> ;        CF=CY => al=errNhl
  1253 000031A6 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  1254                              <1> .searchLp:
  1255 000031A8 E8DBFFFFFF          <1>     call getJFTPtr
  1256 000031AD 7209                <1>     jc .badExit
  1257 000031AF 803FFF              <1>     cmp byte [rdi], -1
  1258                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000031B2 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1259 000031B4 FFC3                <1>     inc ebx
  1260 000031B6 EBF0                <1>     jmp short .searchLp
  1261                              <1> .badExit:
  1262 000031B8 B004                <1>     mov al, errNhl
  1263 000031BA F9                  <1>     stc
  1264                              <1>     return
    18                              <2> %%_ret:
    19 000031BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1265                              <1> getSFTPtr:
  1266                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  1267                              <1> ;Input: bx = JFT handle
  1268                              <1> ;Output: CF=NC: rdi = SFT pointer
  1269                              <1> ;        CF=CY: Error, ax=Error code
  1270 000031BC E815000000          <1>     call derefSFTPtr
  1271                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000031C1 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1272 000031C3 50                  <1>     push rax
  1273 000031C4 0FB705(A5C30300)    <1>     movzx eax, word [machineNum]
  1274 000031CB 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  1275 000031CF 58                  <1>     pop rax
  1276                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000031D0 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1277 000031D2 B006                <1>     mov al, errBadHdl   ;Error code
  1278 000031D4 F9                  <1>     stc         ;Reset CF
  1279                              <1>     return
    18                              <2> %%_ret:
    19 000031D5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1280                              <1> 
  1281                              <1> derefSFTPtr:
  1282                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  1283                              <1> ;Input: bx = File handle (gets zero extended)
  1284                              <1> ;Output: CF=NC: rdi = SFT pointer
  1285                              <1> ;        CF=CY: Error, ax=Error code
  1286 000031D6 E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  1287 000031DB 7205                <1>     jb .fail
  1288 000031DD 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  1289 000031E0 7504                <1>     jne .ok
  1290                              <1> .fail:
  1291 000031E2 B006                <1>     mov al, errBadHdl
  1292 000031E4 F9                  <1>     stc
  1293                              <1>     return
    18                              <2> %%_ret:
    19 000031E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1294                              <1> .ok:
  1295 000031E6 53                  <1>     push rbx    ;Preserve the JFT handle
  1296 000031E7 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  1297 000031EA E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  1298 000031EF 5B                  <1>     pop rbx 
  1299                              <1>     return
    18                              <2> %%_ret:
    19 000031F0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1300                              <1> 
  1301                              <1> getBytesTransferred:
  1302 000031F1 8B0D(CDC60300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  1303 000031F7 F7D9                <1>     neg ecx ;Multiply by -1
  1304 000031F9 030D(C9C60300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  1305                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 000031FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1306                              <1> 
  1307                              <1> readWriteBytesBinary:
  1308                              <1> ;Input: ecx = number of bytes to read in Binary mode
  1309                              <1> ;       rdi = Points to where in caller buffer to place bytes
  1310                              <1> ;       rsi = Points to where in DOS buffer to place pointer
  1311                              <1> ;xchg rdi and rsi if rwFlag is set (i.e. a write operation)
  1312                              <1> ;Preserve rcx so we know how many bytes transferred
  1313                              <1> ;Update the currByteA variable
  1314                              <1> ;Returns (rsi and rdi) + (ecx on entry)
  1315 00003200 51                  <1>     push rcx
  1316 00003201 F605(5AC60300)FF    <1>     test byte [rwFlag], -1   ;Is this a write operaiton
  1317 00003208 7403                <1>     jz .noSwap
  1318 0000320A 4887FE              <1>     xchg rdi, rsi
  1319                              <1> .noSwap:
  1320 0000320D F3A4                <1>     rep movsb
  1321 0000320F 59                  <1>     pop rcx
  1322 00003210 010D(B9C60300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1323 00003216 290D(CDC60300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1324                              <1>     return
    18                              <2> %%_ret:
    19 0000321C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1325                              <1> 
  1326                              <1> findFreeJFTSpace:
  1327                              <1> ;Input: [currentPSP] = Task whose PSP we will look through
  1328                              <1> ;If there are no free spaces, then we return with al = errNhl and CF=CY
  1329                              <1> ;Else, a pointer to the free space in rsi and al = -1
  1330 0000321D 51                  <1>     push rcx
  1331 0000321E 488B35(81C30300)    <1>     mov rsi, qword [currentPSP]
  1332 00003225 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]
  1333 0000322C 488D762A            <1>     lea rsi, qword [rsi + psp.jobFileTbl]   ;Point to start of table
  1334                              <1> .search:
  1335 00003230 AC                  <1>     lodsb
  1336 00003231 3CFF                <1>     cmp al, -1
  1337 00003233 7407                <1>     je .exit
  1338 00003235 FFC9                <1>     dec ecx
  1339 00003237 75F7                <1>     jnz .search
  1340 00003239 B004                <1>     mov al, errNhl  ;No free handles buddy, sorry
  1341 0000323B F9                  <1>     stc ;Set error bit
  1342                              <1> .exit:
  1343 0000323C 59                  <1>     pop rcx
  1344                              <1>     return
    18                              <2> %%_ret:
    19 0000323D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1345                              <1> 
  1346                              <1> getSFTndxInheritable:
  1347                              <1> ;Given a SFTndx this function will verify if it is inheritable
  1348                              <1> ;Input: ebx = SFTndx (word)
  1349                              <1> ;Output: 
  1350                              <1> ;   ZF=ZE => Inheritable
  1351                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  1352 0000323E 57                  <1>     push rdi
  1353 0000323F E80FFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  1354 00003244 7208                <1>     jc .badNdx
  1355 00003246 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  1356 0000324C 5F                  <1>     pop rdi
  1357                              <1>     return
    18                              <2> %%_ret:
    19 0000324D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1358                              <1> .badNdx:
  1359 0000324E 31FF                <1>     xor edi, edi
  1360 00003250 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  1361 00003252 F8                  <1>     clc
  1362 00003253 5F                  <1>     pop rdi
  1363                              <1>     return
    18                              <2> %%_ret:
    19 00003254 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1364                              <1> 
  1365                              <1> incrementOpenCount:
  1366                              <1> ;Given a SFTndx, this function will increment it's open count
  1367                              <1> ;Output:
  1368                              <1> ;   CF=NC => sftndx ok, count incremented
  1369                              <1> ;   CF=CY => Bad ndx
  1370 00003255 57                  <1>     push rdi
  1371 00003256 E8F8FEFFFF          <1>     call getSFTPtrfromSFTNdx
  1372 0000325B 7203                <1>     jc .exit
  1373 0000325D 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  1374                              <1> .exit:
  1375 00003260 5F                  <1>     pop rdi
  1376                              <1>     return
    18                              <2> %%_ret:
    19 00003261 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1377                              <1> 
  1378                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  1379                              <1> ;Input: rdi = SFT pointer
  1380                              <1> ;Output: ax = Original wNumHandles count
  1381 00003262 9C                  <1>     pushfq
  1382 00003263 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  1383 00003266 FFC8                <1>     dec eax     ;Decrement count
  1384 00003268 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  1385 0000326A FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  1386                              <1> .exit:
  1387 0000326C 9D                  <1>     popfq
  1388 0000326D 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  1389                              <1>     return
    18                              <2> %%_ret:
    19 00003270 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    31                              <1> ioctrl:            ;ah = 44h, handle function
    31                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    32                              <1> ;Memory related functions
    33                              <1> 
    34                              <1> ;-----------------------------------:
    35                              <1> ;  Memory related Kernel routines   :
    36                              <1> ;-----------------------------------:
    37                              <1> allocateMemory:    ;ah = 48h
    38                              <1> ;Input: ebx = Number of paragraphs requested
    39                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    40                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    41 00003271 31D2                <1>     xor edx, edx
    42                              <1>     ;Clear the pointers
    43 00003273 488915(A7C30300)    <1>     mov qword [firstMCB], rdx
    44 0000327A 488915(AFC30300)    <1>     mov qword [bestMCB], rdx
    45 00003281 488915(B7C30300)    <1>     mov qword [lastMCB], rdx
    46 00003288 31ED                <1>     xor ebp, ebp    
    47 0000328A FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    48 0000328C 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    49                              <1> .walk:
    50 00003293 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    51 00003296 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    52 00003299 7409                <1>     je .walk1
    53 0000329B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    54 0000329E 0F85DD040000        <1>     jne badMCBChain
    55                              <1> .walk1:
    56                              <1>     ;Here if valid but not the last block
    57 000032A4 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    58 000032AC 0F8582000000        <1>     jne .walk2
    59                              <1>     ;Here we consolidate adjacent free blocks if there are any
    60                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    61                              <1>     ;End consolidation at first non free block or at last block in chain
    62 000032B2 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    63 000032B5 744A                <1>     je .det0    ;Determine if this block is useful
    64 000032B7 31C9                <1>     xor ecx, ecx
    65 000032B9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    66 000032BC 4881C610000000      <1>     add rsi, mcb.program
    67                              <1> .cons0:
    68 000032C3 48C1E104            <1>     shl rcx, 4
    69 000032C7 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    70 000032CA 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    71 000032CD 7409                <1>     je .cons1
    72 000032CF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    73 000032D2 0F85A9040000        <1>     jne badMCBChain 
    74                              <1> .cons1:
    75 000032D8 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    76 000032E0 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    77                              <1>     ;Here rsi, points to a free block, add it to rdi
    78 000032E2 31C9                <1>     xor ecx, ecx
    79 000032E4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    80 000032E7 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    81 000032ED 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    82 000032F0 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    83 000032F2 31D2                <1>     xor edx, edx
    84 000032F4 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    85 000032F7 48895608            <1>     mov qword [rsi + 8], rdx
    86 000032FB 3C5A                <1>     cmp al, mcbMarkEnd
    87 000032FD 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    88                              <1>     ;Here we deal with if the block was the last one 
    89 000032FF 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    90                              <1> .det0:  ;Now determine if pointer in rdi is useful
    91 00003301 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    92                              <1> ;ebx must be less than the arena size for the arena to be useful!
    93 00003304 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    94 00003307 39D9                <1>     cmp ecx, ebx
    95 00003309 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    96 0000330B 488935(B7C30300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    97 00003312 488B05(A7C30300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    98 00003319 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    99 0000331C 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   100 0000331E 488935(A7C30300)    <1>     mov qword [firstMCB], rsi
   101                              <1> .det1:
   102                              <1>     ;Now test for best fit.
   103 00003325 29D9                <1>     sub ecx, ebx    ;Block - ebx
   104 00003327 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   105 00003329 7209                <1>     jb .walk2
   106 0000332B 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   107 0000332D 488935(AFC30300)    <1>     mov qword [bestMCB], rsi
   108                              <1> .walk2:
   109 00003334 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   110 00003337 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   111 00003339 31C9                <1>     xor ecx, ecx
   112 0000333B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   113 0000333E 48C1E104            <1>     shl rcx, 4
   114 00003342 4881C610000000      <1>     add rsi, mcb.program
   115 00003349 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   116 0000334C E942FFFFFF          <1>     jmp .walk
   117                              <1> .allocate:
   118                              <1>     ;Allocation fails IF the pointer is the null pointer
   119 00003351 803D(35C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   120 00003358 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   121                              <1>     ;Fall thru if last fit
   122 0000335A 488B35(B7C30300)    <1>     mov rsi, qword [lastMCB]
   123 00003361 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   124 00003364 0F84CE000000        <1>     jz .allocFail
   125 0000336A 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   126 0000336C C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   127 0000336F 31C9                <1>     xor ecx, ecx
   128 00003371 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   129 00003374 29D9                <1>     sub ecx, ebx
   130 00003376 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   131 0000337C 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   132 0000337F 48C1E104            <1>     shl rcx, 4
   133 00003383 4881C610000000      <1>     add rsi, mcb.program
   134 0000338A 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   135 0000338D 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   136 0000338F 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   137 00003392 488B15(81C30300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   138 00003399 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   139 0000339D 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   140 000033A4 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   141 000033AB 4889F0              <1>     mov rax, rsi
   142 000033AE 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   143 000033B1 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   144 000033B5 E89A030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   145                              <1>     return
    18                              <2> %%_ret:
    19 000033BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   146                              <1> .bfCommon:
   147 000033BB 488B35(A7C30300)    <1>     mov rsi, qword [firstMCB]
   148 000033C2 803D(35C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   149 000033C9 480F4435(AFC30300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   150 000033D1 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   151 000033D4 7462                <1>     jz .allocFail
   152 000033D6 8A06                <1>     mov al, byte [rsi + mcb.marker]
   153 000033D8 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   154 000033DB 31C9                <1>     xor ecx, ecx
   155 000033DD 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   156 000033E0 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   157 000033E2 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   158 000033E8 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   159 000033EB 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   160 000033F2 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   161 000033F6 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   162 000033F9 4881C610000000      <1>     add rsi, mcb.program
   163 00003400 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   164 00003406 48C1E304            <1>     shl rbx, 4
   165 0000340A 4801DE              <1>     add rsi, rbx
   166 0000340D 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   167 0000340F 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   168 00003417 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   169 0000341A 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   170 00003421 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   171 00003428 4889F8              <1>     mov rax, rdi
   172 0000342B 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   173 0000342E 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   174 00003432 E81D030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   175                              <1>     return
    18                              <2> %%_ret:
    19 00003437 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   176                              <1> .allocFail:
   177                              <1>     ;Walk the MCB chain to determine the biggest block size
   178 00003438 488B35(2BC00300)    <1>     mov rsi, [mcbChainPtr]
   179 0000343F 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   180                              <1> .af0:
   181 00003441 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   182 00003444 7409                <1>     je .af1
   183 00003446 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   184 00003449 0F8532030000        <1>     jne badMCBChain
   185                              <1> .af1:
   186 0000344F 31C9                <1>     xor ecx, ecx
   187 00003451 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   188 00003454 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   189 0000345C 7505                <1>     jne .af2
   190 0000345E 39D9                <1>     cmp ecx, ebx
   191 00003460 0F47D9              <1>     cmova ebx, ecx
   192                              <1> .af2:
   193 00003463 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   194 00003466 7410                <1>     je .afExit
   195 00003468 48C1E104            <1>     shl rcx, 4
   196 0000346C 4881C610000000      <1>     add rsi, mcb.program
   197 00003473 4801CE              <1>     add rsi, rcx
   198 00003476 EBD7                <1>     jmp short .af1
   199                              <1> .afExit:
   200 00003478 B808000000          <1>     mov eax, errNoMem
   201 0000347D 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   202 00003484 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   203 00003487 E9F7020000          <1>     jmp mcbErrHdlr
   204                              <1> freeMemory:        ;ah = 49h
   205                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   206                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   207                              <1> ;Always skip the first block as this is the anchor for DOS
   208 0000348C 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   209 00003493 31C9                <1>     xor ecx, ecx
   210 00003495 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   211 0000349C 4889F7              <1>     mov rdi, rsi
   212 0000349F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   213 000034A2 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   214 000034A6 4881C610000000      <1>     add rsi, mcb.program
   215 000034AD 4801CE              <1>     add rsi, rcx    ;Go to next block
   216                              <1> .mainLoop:
   217 000034B0 31C9                <1>     xor ecx, ecx
   218 000034B2 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   219 000034B5 7409                <1>     je .valid
   220 000034B7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   221 000034BA 0F85C1020000        <1>     jne badMCBChain
   222                              <1> .valid:
   223 000034C0 4939F0              <1>     cmp r8, rsi
   224 000034C3 741C                <1>     je .blockFound
   225                              <1>     ;Not valid, check if last block in chain
   226 000034C5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   227 000034C8 0F84A0000000        <1>     je .blockError
   228 000034CE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   229 000034D1 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   230 000034D5 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   231 000034DC 4801CE              <1>     add rsi, rcx    ;Go to next block
   232 000034DF EBCF                <1>     jmp short .mainLoop
   233                              <1> .blockFound:
   234                              <1>     ;If hole, error.
   235                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   236 000034E1 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   237 000034E9 0F847F000000        <1>     je .blockError
   238 000034EF 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   239 000034F7 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   240 000034FF 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   241                              <1>     ;It is, let it absorb this space
   242 00003501 31C9                <1>     xor ecx, ecx
   243 00003503 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   244 00003506 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   245 0000350C 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   246                              <1>     ;Replace block marker
   247 0000350F 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   248 00003511 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   249 00003513 31C9                <1>     xor ecx, ecx
   250 00003515 48890E              <1>     mov qword [rsi], rcx
   251 00003518 48894E08            <1>     mov qword [rsi + 8], rcx
   252 0000351C 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   253                              <1> .blockFoundCheckFollowing:
   254                              <1>     ;First check if we are the last block in chain
   255 0000351F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   256 00003522 7439                <1>     je .blockFoundExit  ;If yes, exit!
   257 00003524 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   258 00003527 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   259 0000352A 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   260 0000352E 4881C110000000      <1>     add rcx, mcb.program
   261 00003535 4801CE              <1>     add rsi, rcx    ;Go to next block
   262 00003538 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   263 00003540 751B                <1>     jne .blockFoundExit ;If not free, exit
   264                              <1>     ;If free, absorb into block pointed to by rdi
   265 00003542 31C9                <1>     xor ecx, ecx
   266 00003544 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   267 00003547 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   268 0000354D 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   269                              <1>     ;Replace block marker
   270 00003550 8A06                <1>     mov al, byte [rsi + mcb.marker]
   271 00003552 8807                <1>     mov byte [rdi + mcb.marker], al
   272 00003554 31C9                <1>     xor ecx, ecx
   273 00003556 48890E              <1>     mov qword [rsi], rcx
   274 00003559 48894E08            <1>     mov qword [rsi + 8], rcx
   275                              <1> .blockFoundExit:
   276 0000355D E8F2010000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   277 00003562 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   278 00003569 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   279                              <1>     return
    18                              <2> %%_ret:
    19 0000356D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   280                              <1> .blockError:
   281 0000356E C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   282 00003575 B809000000          <1>     mov eax, errMemAddr
   283 0000357A E8580E0000          <1>     call extErrExit ;Error thru the unified error handler
   284 0000357F E8D0010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   285                              <1>     return
    18                              <2> %%_ret:
    19 00003584 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   286                              <1> reallocMemory:     ;ah = 4Ah
   287                              <1> ;Input: r8 = address of the block to be realloc'ed
   288                              <1> ;       ebx = How many paras this block should contain after realloc. 
   289                              <1> ;               If ebx = 0, jump to free memory
   290 00003585 85DB                <1>     test ebx, ebx
   291 00003587 0F84FFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   292 0000358D 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   293 00003594 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   294 00003597 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   295 0000359A 7409                <1>     je .ctn
   296 0000359C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   297 0000359F 0F855F010000        <1>     jne .badAddrGiven
   298                              <1> .ctn:
   299                              <1>     ;Provided block is valid and not a hole
   300                              <1>     ;Check if Growth or Shrink
   301 000035A5 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   302 000035AD 74BF                <1>     je freeMemory.blockError
   303 000035AF 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   304 000035B2 31C9                <1>     xor ecx, ecx
   305 000035B4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   306 000035B7 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   307 000035B9 0F8786000000        <1>     ja .growth
   308 000035BF 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   309                              <1> ;We can always shrink
   310 000035C5 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   311 000035C7 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   312 000035CD 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   313 000035D0 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   314 000035D6 48C1E304            <1>     shl rbx, 4
   315 000035DA 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   316 000035E1 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   317 000035E4 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   318 000035E6 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   319 000035E9 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   320 000035EB 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   321 000035F3 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   322 000035F6 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   323 000035F8 0F84DB000000        <1>     je .exit
   324                              <1> ;Else, now see if the block following is also free and absorb it
   325 000035FE 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   326 00003601 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   327 00003605 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   328 0000360C 4801CE              <1>     add rsi, rcx    ;Goto next arena
   329 0000360F 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   330 00003612 7409                <1>     je .shrinkAbsorb
   331 00003614 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   332 00003617 0F8564010000        <1>     jne badMCBChain
   333                              <1> .shrinkAbsorb:
   334 0000361D 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   335 00003625 0F85AE000000        <1>     jne .exit
   336                              <1>     ;It is free, absorb it
   337 0000362B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   338 0000362E 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   339 00003634 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   340 00003637 31C9                <1>     xor ecx, ecx
   341                              <1>     ;Clear absorbed MCB
   342 00003639 48890E              <1>     mov qword [rsi], rcx
   343 0000363C 48894E08            <1>     mov qword [rsi + 8], rcx
   344 00003640 E994000000          <1>     jmp .exit
   345                              <1> .growth:
   346                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   347 00003645 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   348 00003648 0F84A0000000        <1>     je .notEnuffMem
   349                              <1> ;Now check the following space is free. If not, not enuff mem err
   350 0000364E 31C9                <1>     xor ecx, ecx
   351 00003650 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   352 00003653 48C1E104            <1>     shl rcx, 4
   353 00003657 4889F7              <1>     mov rdi, rsi    
   354 0000365A 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   355 00003661 4801CE              <1>     add rsi, rcx
   356 00003664 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   357 00003667 7409                <1>     je .growthOK
   358 00003669 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   359 0000366C 0F850F010000        <1>     jne badMCBChain
   360                              <1> .growthOK:
   361                              <1>     ;rdi points to block we are growing
   362 00003672 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   363 0000367A 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   364                              <1>     ;rsi must own all memory up to the next owned arena
   365 0000367C 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   366 0000367E 31C9                <1>     xor ecx, ecx
   367 00003680 31D2                <1>     xor edx, edx
   368 00003682 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   369 00003685 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   370 0000368B 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   371 0000368E 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   372 00003690 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   373 00003692 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   374 00003695 7759                <1>     ja .notEnuffMem1
   375 00003697 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   376 00003699 81FA01000000        <1>     cmp edx, 1
   377 0000369F 7449                <1>     je .notEnuffMem2
   378 000036A1 31C9                <1>     xor ecx, ecx
   379 000036A3 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   380 000036A6 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   381 000036AA 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   382 000036AD 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   383 000036B0 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   384 000036B7 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   385 000036BB 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   386 000036BE 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   387 000036C2 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   388                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   389                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   390 000036C4 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   391 000036C6 7411                <1>     jz .exit
   392 000036C8 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   393 000036CE 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   394 000036D1 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   395                              <1> .exit:
   396 000036D9 E876000000          <1>     call verifyIntegrityOfMCBChain
   397 000036DE 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   398 000036E5 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   399                              <1>     return
    18                              <2> %%_ret:
    19 000036E9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   400                              <1> .notEnuffMem2:
   401 000036EA FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   402 000036EC EB02                <1>     jmp short .notEnuffMem1
   403                              <1> .notEnuffMem:
   404 000036EE 31DB                <1>     xor ebx, ebx    ;No space to grow
   405                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   406 000036F0 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   407 000036F5 488B15(DCC30300)    <1>     mov rdx, qword [oldRSP]
   408 000036FC 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   409 000036FF E97F000000          <1>     jmp mcbErrHdlr
   410                              <1> .badAddrGiven:
   411 00003704 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   412 00003709 E975000000          <1>     jmp mcbErrHdlr
   413                              <1> getsetMallocStrat: ;ah = 58h
   414 0000370E 84C0                <1>     test al, al
   415 00003710 741F                <1>     jz .get
   416 00003712 3C02                <1>     cmp al, 2
   417 00003714 7337                <1>     jae .bad
   418                              <1> ;Set here
   419 00003716 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   420 0000371D 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   421 00003721 8805(35C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   422 00003727 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   423 0000372B E824000000          <1>     call verifyIntegrityOfMCBChain
   424                              <1>     return
    18                              <2> %%_ret:
    19 00003730 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   425                              <1> .get:
   426 00003731 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   427 00003738 31C0                <1>     xor eax, eax
   428 0000373A 8A05(35C30300)      <1>     mov al, byte [allocStrat]
   429 00003740 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   430 00003743 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   431 00003747 E808000000          <1>     call verifyIntegrityOfMCBChain
   432                              <1>     return
    18                              <2> %%_ret:
    19 0000374C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   433                              <1> .bad:
   434 0000374D B801000000          <1>     mov eax, errInvFnc
   435 00003752 EB2F                <1>     jmp short mcbErrHdlr
   436                              <1> ;-----------------------------------:
   437                              <1> ;      Memory related routines      :
   438                              <1> ;-----------------------------------:
   439                              <1> verifyIntegrityOfMCBChain:
   440 00003754 50                  <1>     push rax
   441 00003755 53                  <1>     push rbx
   442 00003756 488B1D(2BC00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   443                              <1> .ok:
   444 0000375D 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   445 00003760 7408                <1>     je .ok1
   446 00003762 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   447 00003765 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   448                              <1> .exit:
   449 00003767 5B                  <1>     pop rbx
   450 00003768 58                  <1>     pop rax
   451                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 00003769 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   452                              <1> .ok1:
   453 0000376A 31C0                <1>     xor eax, eax
   454 0000376C 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   455 0000376F 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   456 00003773 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   457 0000377A 4801C3              <1>     add rbx, rax
   458 0000377D EBDE                <1>     jmp short .ok
   459                              <1> .bmcbPrep:
   460 0000377F 5B                  <1>     pop rbx ;Pop off the stack first!
   461 00003780 58                  <1>     pop rax
   462                              <1> badMCBChain:
   463 00003781 B007                <1>     mov al, errMCBbad   ;Yikes!
   464                              <1> mcbErrHdlr:
   465                              <1>     ;Jumped to with eax = error code
   466 00003783 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   467 0000378A E8480C0000          <1>     call extErrExit ;Error thru the unified error handler
   468 0000378F 3C07                <1>     cmp al, errMCBbad
   469                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003791 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   470 00003793 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    32                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    33                              <1> ;EXEC and all default terminates are here
    34                              <1> 
    35                              <1> ;========================
    36                              <1> ;   Interrupt handlers
    37                              <1> ;========================
    38                              <1> terminateProcess:   ;Int 40h
    39 00003795 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    40 00003797 E9740A0000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    41                              <1> terminateRes:       ;Int 47h
    42                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    43 0000379C 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    44 000037A2 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    45 000037A5 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    46 000037AA E9610A0000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    47                              <1> ;========================
    48                              <1> ;    Int 21h functions
    49                              <1> ;========================
    50                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    51                              <1> ;Input:
    52                              <1> ;rdx = Pointer to new PSP in memory.
    53                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    54                              <1> ;   Officially document that this MUST be paragraph aligned.
    55                              <1> ;rsi = alloc size for new psp block
    56 000037AF C605(76C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    57 000037B6 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    58 000037BD 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    59 000037BF 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    60 000037C0 EB0C                <1>     jmp short copyPSP.pspCommon
    61                              <1> copyPSP:      ;ah = 26h
    62                              <1> ;Input:
    63                              <1> ;rdx = Pointer to new PSP in memory.
    64                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    65                              <1> ;   Officially document that this MUST be paragraph aligned.
    66 000037C2 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]
    67 000037C9 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    68 000037CD 53                  <1>     push rbx    ;Save this value for PSP allocsize
    69                              <1> .pspCommon:
    70 000037CE 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    71 000037D5 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    72 000037D9 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    73                              <1> ;r8 is current PSP, now copy psp to rdx
    74                              <1> ;Preserve rdx and r8 until the end
    75 000037DD 4C89C6              <1>     mov rsi, r8
    76 000037E0 4889D7              <1>     mov rdi, rdx
    77 000037E3 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    78 000037E8 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    79 000037EB 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    80 000037F3 F605(76C40300)FF    <1>     test byte [pspCopyFlg], -1
    81 000037FA 7449                <1>     jz .copy
    82                              <1>     ;Now reset the parent psp data
    83 000037FC 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    84 00003804 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    85                              <1>     ;Now reset the copied jobFileTable
    86 00003808 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    87 0000380C 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    88 00003813 B0FF                <1>     mov al, -1
    89 00003815 F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    90                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    91 00003817 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    92 0000381B 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    93 0000381F 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    94                              <1> .xfrJFT:
    95 00003826 67E31C              <1>     jecxz .copy
    96 00003829 FFC9                <1>     dec ecx
    97 0000382B AC                  <1>     lodsb   ;Get the SFTndx in al
    98 0000382C 0FB6D8              <1>     movzx ebx, al
    99 0000382F 53                  <1>     push rbx
   100 00003830 E809FAFFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   101 00003835 58                  <1>     pop rax
   102 00003836 7508                <1>     jnz .badJFT
   103 00003838 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   104 00003839 E817FAFFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   105 0000383E EBE6                <1>     jmp short .xfrJFT
   106                              <1> .badJFT:
   107 00003840 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   108 00003843 EBE1                <1>     jmp short .xfrJFT 
   109                              <1> .copy:
   110 00003845 C605(76C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   111 0000384C 58                  <1>     pop rax ;Pop the allocsize back into rax
   112 0000384D 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   113                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   114 00003850 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   115 00003854 B042                <1>     mov al, 42h
   116 00003856 E80C070000          <1>     call muxGetIntVector    ;Get vector in rbx
   117 0000385B 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   118 0000385E 48AB                <1>     stosq   ;Move rdi to next entry and store
   119 00003860 B043                <1>     mov al, 43h
   120 00003862 E800070000          <1>     call muxGetIntVector    ;Get vector in rbx
   121 00003867 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   122 0000386A 48AB                <1>     stosq   ;Move rdi to next entry and store
   123 0000386C B044                <1>     mov al, 44h
   124 0000386E E8F4060000          <1>     call muxGetIntVector    ;Get vector in rbx
   125 00003873 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   126 00003876 48AB                <1>     stosq   ;Move rdi to next entry and store
   127                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   128 00003878 66C70240CD          <1>     mov word [rdx + psp.return], 0CD40h  ;Int 40h
   129 0000387D C7425000CB40CD      <1>     mov dword [rdx + psp.unixEntry], 0CD40CB00h  ;Overlay next byte for prevPSP
   130                              <1>     return
    18                              <2> %%_ret:
    19 00003884 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> terminateStayRes:  ;ah = 31h
   133                              <1> ;Input: al  = Error code
   134                              <1> ;       edx = Number of paragraphs to keep resident
   135 00003885 C605(60C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   136                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   137 0000388C 81FA06000000        <1>     cmp edx, 6
   138 00003892 7305                <1>     jae .aboveMinimum
   139 00003894 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   140                              <1> .aboveMinimum:
   141                              <1> ;Now we setup a call to Realloc 
   142                              <1> ;Setup regs with: 
   143                              <1> ;   r8 = address of the block to be realloc'ed
   144                              <1> ;   ebx = How many paras this block should contain after realloc.
   145 00003899 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   146 000038A0 89D3                <1>     mov ebx, edx
   147 000038A2 50                  <1>     push rax    ;Preserve errorlevel across call
   148 000038A3 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   149 000038A4 E8DCFCFFFF          <1>     call reallocMemory
   150 000038A9 5B                  <1>     pop rbx
   151 000038AA 58                  <1>     pop rax
   152 000038AB 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   153 000038AD 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   154                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   155 000038B1 EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   156                              <1> 
   157                              <1> simpleTerminate:   ;ah = 00h
   158 000038B3 31C0                <1>     xor eax, eax    ;Just fall through as normal
   159                              <1> terminateClean:    ;ah = 4Ch, EXIT
   160                              <1> ;Here we must:
   161                              <1> ;0) Build errorlevel and adjust variables accordingly
   162                              <1> ;1) Call Network Termination hook.
   163                              <1> ;2) Check if the program is it's own parent. If so, return.
   164                              <1> ;3) Swap the console back to the original driver if it is swapped.
   165                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   166                              <1> ;4) Free all file handles associated to the current process.
   167                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   168                              <1> ;5) Free all memory blocks that have the signature of current PSP
   169                              <1> ;6) Set current PSP to parent PSP
   170                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   171                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   172                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   173                              <1> ;10) Exit all critical sections.
   174                              <1> ;
   175                              <1> ; Step 0
   176                              <1> ;For now, just adjust error level in var
   177 000038B5 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   178 000038B7 8625(60C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   179 000038BD F605(EDC30300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   180 000038C4 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   181 000038C6 C605(60C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   182                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   183 000038CD 8A25(60C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   184                              <1> .storeELvl:
   185 000038D3 668905(91C30300)    <1>     mov word [errorLevel], ax   ;Store word
   186                              <1>     
   187                              <1> ; Step 1 Tell network a process is terminating
   188 000038DA B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   189 000038DF 4C8B05(81C30300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   190 000038E6 CD4F                <1>     int 4Fh
   191                              <1> 
   192                              <1> ; Step 2
   193                              <1> .step1:
   194 000038E8 488B3D(81C30300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   195 000038EF 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   196 000038F2 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   197 000038F6 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   198                              <1>     rete            ;If it is, simply return (al has errorLevel)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000038F9 7489                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   199                              <1> ; Step 3
   200 000038FB E837E7FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   201                              <1> ; Step 3.5
   202 00003900 803D(60C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   203 00003907 0F8488000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   204                              <1> ; Step 4
   205 0000390D 803D(60C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   206 00003914 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   207 00003916 B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   208 0000391B CD4F                <1>     int 4Fh
   209                              <1> .skipAbortNetClose:
   210 0000391D 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   211 00003924 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   212 00003927 0FB70D(97C00300)    <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   213                              <1> .s4lp:
   214 0000392E AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   215 0000392F 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   216 00003931 7429                <1>     je .step5
   217 00003933 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   218                              <1>     ;Replace with a call to close the handle eventually
   219 00003936 57                  <1>     push rdi
   220 00003937 E89AF8FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   221 0000393C 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   222 0000393E FF35(84C60300)      <1>     push qword [currentSFT]
   223 00003944 E8E1F6FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   224 00003949 E879F3FFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   225                              <1>     ;closeMain also flushes all sectors associated to the file
   226                              <1>     ;Ignore errors, simply keep closing files
   227 0000394E 8F05(84C60300)      <1>     pop qword [currentSFT]
   228                              <1> .badHdl:
   229 00003954 5F                  <1>     pop rdi
   230 00003955 B0FF                <1>     mov al, -1
   231 00003957 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   232 00003958 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   233 0000395A 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   234                              <1> ;Step 5
   235                              <1> .step5:
   236 0000395C 488B1D(81C30300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   237                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   238                              <1>     ; with the currentPSP signature and free them.
   239 00003963 488B35(2BC00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   240                              <1> .s5lp:  ;And walk the chain
   241                              <1> ;First verify the address in rsi is a valid mcb
   242 0000396A 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   243 0000396C 80F94D              <1>     cmp cl, mcbMarkCtn
   244 0000396F 7405                <1>     je .checkToFree
   245 00003971 80F95A              <1>     cmp cl, mcbMarkEnd
   246 00003974 751F                <1>     jne .step6  ;Something wrong so stop freeing
   247                              <1> .checkToFree:
   248 00003976 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   249 0000397A 7508                <1>     jne .noFree
   250 0000397C 4989F0              <1>     mov r8, rsi ;Move pointer to r8
   251 0000397F E808FBFFFF          <1>     call freeMemory ;Free this memory block
   252                              <1>     ;If an error occured, the internal vars will be set.
   253                              <1> .noFree:
   254 00003984 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   255 00003987 740C                <1>     je .step6   ;Skip if we are
   256 00003989 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   257 0000398C 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   258 00003990 4801C6              <1>     add rsi, rax    ;Goto next mcb block
   259 00003993 EBD5                <1>     jmp short .s5lp
   260                              <1> ;Step 6
   261                              <1> .step6:
   262 00003995 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   263 00003999 488905(81C30300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   264                              <1> ;Step 7
   265                              <1>     ;rbx points to current PSP, the old parent task
   266                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   267 000039A0 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   268 000039A4 B044                <1>     mov al, 44h
   269 000039A6 E8D30B0000          <1>     call setIntVector
   270 000039AB 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   271 000039AF B043                <1>     mov al, 43h
   272 000039B1 E8C80B0000          <1>     call setIntVector
   273 000039B6 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   274 000039BA B042                <1>     mov al, 42h
   275 000039BC E8BD0B0000          <1>     call setIntVector
   276                              <1> 
   277                              <1> ;Step 8
   278                              <1>     ;Make the parent register frame the current one
   279 000039C1 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   280                              <1> ;Step 9
   281 000039C5 4889E5              <1>     mov rbp, rsp ;Get pointer to parent stack register frame in rbp
   282 000039C8 48895548            <1>     mov qword [rbp + callerFrame.rip], rdx  ;Store return address vector here
   283                              <1> ;Step 10
   284 000039CC B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   285 000039CE CD4A                <1>     int 4ah
   286                              <1>     return
    18                              <2> %%_ret:
    19 000039D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   287                              <1> 
   288                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   289                              <1>     return
    18                              <2> %%_ret:
    19 000039D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    33                                  %include "./Source/Kernel/Local/Local.asm"
    34                              <1> ;Localisation based functions live here
    35                              <1> 
    36                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    37                              <1> ;al = 0 => Get the switch char
    38                              <1> ;al = 1 => Set the switch char to whats in DL
    39                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    40                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    41                              <1> ;       Always returns -1 => /DEV/ optional
    42                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    43                              <1> ;       Input value is ignored
    44 000039D2 3C01                <1>     cmp al, 01
    45 000039D4 7412                <1>     je .getSC
    46 000039D6 7209                <1>     jb .setSC
    47 000039D8 3C03                <1>     cmp al, 03
    48 000039DA 7214                <1>     jb .getDev
    49 000039DC 741C                <1>     je .setDev
    50 000039DE B0FF                <1>     mov al, -1
    51                              <1>     return
    18                              <2> %%_ret:
    19 000039E0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> .setSC:
    53 000039E1 8815(33C30300)      <1>     mov byte [switchChar], dl
    54                              <1>     return
    18                              <2> %%_ret:
    19 000039E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> .getSC:
    56 000039E8 8A15(33C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    57 000039EE EB02                <1>     jmp short .getRet
    58                              <1> .getDev:
    59 000039F0 B2FF                <1>     mov dl, -1
    60                              <1> .getRet:
    61 000039F2 E87E050000          <1>     call getUserRegs
    62 000039F7 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    63                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    64                              <1>     return
    18                              <2> %%_ret:
    19 000039FA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> 
    66                              <1> 
    67                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    68                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    69                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    70 000039FB C3                  <1>     ret
    34                                  %include "./Source/Kernel/ctrlc.asm"
    35                              <1> diskDevErr:
    36                              <1> ;Called, NOT Jumped to. 
    37                              <1> ;Input: rdi = Disk Buffer pointer
    38                              <1> ;       eax = Status word (Zero Extended)
    39                              <1> ;       rbp = Disk DPB pointer
    40                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    41                              <1> ;Output: al = Int 44h response (0-3)
    42                              <1> ; All other registers preserved
    43 000039FC 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    44 00003A03 89C7                <1>     mov edi, eax    ;Store status word in rdi
    45 00003A05 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    46 00003A08 8A25(C9C30300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    47 00003A0E 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    48                              <1>     ;Test for correct buffer data type
    49 00003A11 53                  <1>     push rbx    ;Save rbx temporarily
    50 00003A12 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    51 00003A15 F6C301              <1>     test bl, dosBuffer
    52 00003A18 7505                <1>     jnz .df0
    53 00003A1A 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    54 00003A1D EB17                <1>     jmp short .df3
    55                              <1> .df0:
    56 00003A1F F6C302              <1>     test bl, fatBuffer
    57 00003A22 7505                <1>     jnz .df1
    58 00003A24 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    59 00003A27 EB0D                <1>     jmp short .df3
    60                              <1> .df1:
    61 00003A29 F6C304              <1>     test bl, dirBuffer
    62 00003A2C 7505                <1>     jnz .df2
    63 00003A2E 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    64 00003A31 EB03                <1>     jmp short .df3
    65                              <1> .df2:
    66 00003A33 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    67                              <1> .df3:
    68 00003A36 5B                  <1>     pop rbx
    69 00003A37 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    70 00003A3B E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    71 00003A40 488B2D(DFC60300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    72 00003A47 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    73                              <1>     return
    18                              <2> %%_ret:
    19 00003A4E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    74                              <1> 
    75                              <1> charDevErr:
    76                              <1> ;Called with ah with additional bits
    77 00003A4F 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
    78                              <1> criticalErrorSetup:
    79 00003A52 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
    80 00003A58 48892D(DFC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
    81 00003A5F 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
    82                              <1>     ;For now, fall through, but need much work to change it later! 
    83                              <1> 
    84                              <1> 
    85                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
    86                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    87                              <1> ; to the critical error handler.
    88                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    89                              <1> ; and with Int44Bitfield set
    90                              <1> ;               AH = Critical Error Bitfield
    91                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    92                              <1> ;               Bit 6 - Reserved
    93                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    94                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    95                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    96                              <1> ;               Bits [2-1] = Affected Disk Error
    97                              <1> ;                     0 0   DOS area
    98                              <1> ;                     0 1   FAT area
    99                              <1> ;                     1 0   Directory area
   100                              <1> ;                     1 1   Data area
   101                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   102                              <1> ;               AL  = Failing drive number if AH[7] = 0
   103                              <1> ;               DIL = Error code for errorMsg
   104                              <1> ;               RSI = EA of Device Header for which device the error occured
   105                              <1> ;Return:
   106                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   107                              <1> ;                  = 1 - Retry the Operation    (Retry)
   108                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   109                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   110                              <1> ; Return response from int 44h in al
   111                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   112                              <1> ; This function will terminate the program if an abort was requested!
   113                              <1> ; This function also destroys RBP
   114 00003A65 803D(69C30300)01    <1>     cmp byte [critErrFlag], 1
   115 00003A6C 7204                <1>     jb .noIntError  ;If not 0, enter
   116 00003A6E B003                <1>     mov al, critFail    ;Else, return Fail always
   117 00003A70 EB4F                <1>     jmp short .exit     ;Don't translate fail to abort
   118                              <1> .noIntError:
   119 00003A72 FA                  <1>     cli ;Disable Interrupts
   120 00003A73 FE05(69C30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   121 00003A79 FE0D(6AC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   122 00003A7F 488925(C1C30300)    <1>     mov qword [xInt44hRSP], rsp
   123 00003A86 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   124 00003A8D 31ED                <1>     xor ebp, ebp    ;Always zeroed
   125 00003A8F CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   126 00003A91 488B25(C1C30300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   127 00003A98 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   128 00003A9F FE05(6AC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   129 00003AA5 FB                  <1>     sti ;Reenable Interrupts
   130                              <1>     ;Now we check that the response given was allowed, and translate if needed
   131                              <1> .checkResponse:
   132 00003AA6 3C01                <1>     cmp al, critRetry
   133 00003AA8 721F                <1>     jb .checkIgnore
   134 00003AAA 7428                <1>     je .checkRetry
   135 00003AAC 3C03                <1>     cmp al, critFail
   136 00003AAE 752F                <1>     jne .abort   ;Must be abort
   137                              <1> .setFail:   ;Here is for fail
   138 00003AB0 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   139 00003AB2 FE05(CBC30300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   140 00003AB8 F605(C9C30300)08    <1>     test byte [Int44bitfld], critFailOK
   141 00003ABF 751E                <1>     jnz .abort  ;If fail not permitted, abort
   142                              <1> .exit:
   143 00003AC1 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   144                              <1>     return
    18                              <2> %%_ret:
    19 00003AC8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> .checkIgnore:
   146 00003AC9 F605(C9C30300)20    <1>     test byte [Int44bitfld], critIgnorOK
   147 00003AD0 75EF                <1>     jnz .exit
   148 00003AD2 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   149                              <1> .checkRetry:
   150 00003AD4 F605(C9C30300)10    <1>     test byte [Int44bitfld], critRetryOK
   151 00003ADB 75E4                <1>     jnz .exit   
   152 00003ADD EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   153                              <1> .abort:
   154                              <1> ;Prepare to abort. We abort from within!
   155                              <1>     ;First check if the process is it's own parent.
   156                              <1>     ;If it is, we exit fail and return to the process
   157 00003ADF 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get the current psp
   158 00003AE6 53                  <1>     push rbx
   159 00003AE7 488B5822            <1>     mov rbx, qword [rax + psp.parentPtr]
   160 00003AEB 4839C3              <1>     cmp rbx, rax    ;Check if the process is it's own parent
   161 00003AEE 5B                  <1>     pop rbx
   162 00003AEF 7509                <1>     jne .kill   ;If the process is not it's own parent, we kill the process
   163 00003AF1 C605(F7C30300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   164 00003AF8 EBB6                <1>     jmp short .setFail
   165                              <1> .kill:
   166 00003AFA 66893D(6DC30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   167 00003B01 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   168 00003B03 C605(60C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   169 00003B0A E9BEFDFFFF          <1>     jmp terminateClean.altEP
   170                              <1> 
   171                              <1> ctrlBreakHdlr:
   172 00003B0F B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   173 00003B11 E84FE4FFFF          <1>     call printCaretASCII
   174 00003B16 E87AE4FFFF          <1>     call printCRLF
   175                              <1>     ;Reset the console back to 0
   176 00003B1B C605(F5C30300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   177                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   178 00003B22 FA                  <1> 	cli
   179 00003B23 488B25(DCC30300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   180 00003B2A E83B080000          <1> 	call dosPopRegs ;Get user state back
   181 00003B2F 488925(89C30300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   182 00003B36 F8                  <1>     clc
   183 00003B37 CD43                <1>     int 43h ;Call critical error handler
   184 00003B39 FA                  <1>     cli ;Clear interrupts again
   185 00003B3A 488905(95C30300)    <1>     mov qword [oldRAX], rax ;Save rax
   186 00003B41 9C                  <1>     pushfq  ;Get flags in rax
   187 00003B42 58                  <1>     pop rax 
   188 00003B43 483B25(89C30300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   189 00003B4A 750C                <1>     jne .checkCF
   190                              <1> .returnToDOS:
   191 00003B4C 488B05(95C30300)    <1>     mov rax, qword [oldRAX]
   192 00003B53 E9B8060000          <1>     jmp functionDispatch    ;Goto int 41h
   193                              <1> .checkCF:
   194 00003B58 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   195 00003B5F A801                <1>     test al, 1  ;CF set?
   196 00003B61 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   197 00003B63 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   198 00003B68 C605(EDC30300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   199 00003B6F E99C060000          <1>     jmp functionDispatch
   200                              <1> 
    35                                  %include "./Source/Kernel/dosPrim.asm"
    36                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    37                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    38                              <1> 
    39                              <1> dosDefCritErrHdlr:
    40                              <1> ;The DOS default critical error handler always returns FAIL
    41 00003B74 B003                <1>     mov al, critFail
    42 00003B76 48CF                <1>     iretq
    43                              <1> goDriverChar:
    44                              <1> ;Shortcut for Char requests, make a driver request
    45                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    46 00003B78 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    47                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    48                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    49                              <1> ;       rbx = Ptr to the request header for the driver call!
    50 00003B7C E82B080000          <1>     call dosCrit2Enter
    51 00003B81 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    52 00003B84 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    53 00003B87 E82A080000          <1>     call dosCrit2Exit
    54                              <1>     return
    18                              <2> %%_ret:
    19 00003B8C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> 
    56                              <1> setupPhysicalDiskRequest:
    57                              <1> ;Ensure that al has valid disk number
    58                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    59                              <1> ;If CF=NC, rbp = DPB ptr.
    60                              <1> ;If CF=CY, exit error
    61 00003B8D 84C0                <1>     test al, al
    62 00003B8F 723F                <1>     jc .diskError
    63 00003B91 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
    64 00003B97 7337                <1>     jae .diskError
    65 00003B99 50                  <1>     push rax
    66 00003B9A FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    67 00003B9C E861040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    68 00003BA1 58                  <1>     pop rax
    69 00003BA2 7235                <1>     jc .error
    70 00003BA4 8805(63C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    71 00003BAA 488B2D(6CC60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    72 00003BB1 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    73 00003BB9 750A                <1>     jnz .netError
    74 00003BBB 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    75 00003BBF E83C030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    76                              <1>     return
    18                              <2> %%_ret:
    19 00003BC4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    77                              <1> .netError:
    78 00003BC5 66C705(6DC30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    78 00003BCD 00                  <1>
    79 00003BCE EB09                <1>     jmp short .error
    80                              <1> .diskError:
    81 00003BD0 66C705(6DC30300)0F- <1>     mov word [errorExCde], errBadDrv
    81 00003BD8 00                  <1>
    82                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    83 00003BD9 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    84 00003BE0 C605(6FC30300)07    <1>     mov byte [errorAction], eActRetUsr
    85 00003BE7 C605(70C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    86 00003BEE F9                  <1>     stc
    87                              <1>     return
    18                              <2> %%_ret:
    19 00003BEF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> setupAbsDiskEntry:
    90                              <1> ;Prepares to sets up the CDS and DPB for the request
    91 00003BF0 FE05(6AC30300)      <1>     inc byte [inDOS]
    92 00003BF6 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    93 00003BF7 FC                  <1>     cld ;Set string ops in the right direction
    94 00003BF8 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    95 00003BFD 7223                <1>     jc .exit    ;Error exit
    96 00003BFF C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    97 00003C06 56                  <1>     push rsi
    98 00003C07 50                  <1>     push rax
    99 00003C08 488D35(7FC40300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   100 00003C0F 8806                <1>     mov byte [rsi], al  ;Construct a path
   101 00003C11 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   102 00003C14 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   103 00003C18 F8                  <1>     clc
   104                              <1> ;++++++++++++++++++++++++++++
   105                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   106                              <1> ;Entered with path in rsi (ah=03h)
   107 00003C19 B800030000          <1>     mov eax, 0300h  
   108 00003C1E CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   109                              <1> ;++++++++++++++++++++++++++++
   110 00003C20 58                  <1>     pop rax
   111 00003C21 5E                  <1>     pop rsi
   112                              <1> .exit:
   113 00003C22 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   114                              <1>     return
    18                              <2> %%_ret:
    19 00003C24 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   115                              <1> 
   116                              <1> absDiskWrite:       ;Int 46h
   117                              <1> ;al = Drive number
   118                              <1> ;rbx = Memory Buffer address to read from
   119                              <1> ;ecx = Number of sectors to write
   120                              <1> ;rdx = Start LBA to write to
   121 00003C25 FA                  <1>     cli
   122 00003C26 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   123 00003C2D 488D25(DFD80300)    <1>     lea rsp, DiskStakTop
   124 00003C34 55                  <1>     push rbp
   125 00003C35 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   126 00003C36 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   127 00003C3B 7252                <1>     jc absDiskExit
   128 00003C3D E8D3010000          <1>     call primReqWriteSetup
   129 00003C42 EB1D                <1>     jmp short absDiskReadWriteCommon
   130                              <1> absDiskRead:        ;Int 45h
   131                              <1> ;al = Drive number
   132                              <1> ;rbx = Memory Buffer address to write to
   133                              <1> ;ecx = Number of sectors to read
   134                              <1> ;rdx = Start LBA to read from
   135 00003C44 FA                  <1>     cli 
   136 00003C45 488925(DCC30300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   137 00003C4C 488D25(DFD80300)    <1>     lea rsp, DiskStakTop
   138 00003C53 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   139 00003C54 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   140 00003C55 E896FFFFFF          <1>     call setupAbsDiskEntry
   141 00003C5A 7233                <1>     jc absDiskExit
   142 00003C5C E8BF010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   143                              <1> absDiskReadWriteCommon:
   144                              <1> ;Entered with the appropriate function number in ah
   145                              <1> ; and primary request header in rbx
   146 00003C61 E83B000000          <1>     call absDiskDriverCall
   147 00003C66 7427                <1>     jz absDiskExit  ;Skip error code checking
   148 00003C68 8A05(25C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   149                              <1>     ;DOS uses the following pairs in a table
   150                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   151 00003C6E B480                <1>     mov ah, 80h ;Attachment failure
   152 00003C70 3C0C                <1>     cmp al, 0Ch ;Gen error
   153 00003C72 741A                <1>     je .absExit
   154 00003C74 B440                <1>     mov ah, 40h ;Seek error
   155 00003C76 3C06                <1>     cmp al, 06h
   156 00003C78 7414                <1>     je .absExit
   157 00003C7A B408                <1>     mov ah, 08h ;Bad CRC
   158 00003C7C 3C04                <1>     cmp al, 04h
   159 00003C7E 740E                <1>     je .absExit
   160 00003C80 B404                <1>     mov ah, 04h ;Sector not found
   161 00003C82 3C08                <1>     cmp al, 08h
   162 00003C84 7408                <1>     je .absExit
   163 00003C86 30E4                <1>     xor ah, ah  ;Write Protect Violation
   164 00003C88 84C0                <1>     test al, al
   165 00003C8A 7402                <1>     je .absExit
   166 00003C8C B402                <1>     mov ah, 02h ;Other Error
   167                              <1> .absExit:
   168 00003C8E F9                  <1>     stc
   169                              <1> absDiskExit:
   170 00003C8F 5B                  <1>     pop rbx
   171 00003C90 5D                  <1>     pop rbp
   172 00003C91 FA                  <1>     cli
   173 00003C92 FE0D(6AC30300)      <1>     dec byte [inDOS]
   174 00003C98 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]
   175 00003C9F FB                  <1>     sti ;Reenable interrupts
   176                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00003CA0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   177                              <1> absDiskDriverCall:
   178                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   179                              <1> ;       rbx = Request header address
   180                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   181                              <1> ;       eax = Status word from request
   182                              <1> ;       ecx = Number of sectors transferred
   183 00003CA1 56                  <1>     push rsi
   184                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   185 00003CA2 8B0D(38C40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   186                              <1>     ;Prepare for goDriver now
   187 00003CA8 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   188 00003CAC E8CBFEFFFF          <1>     call goDriver   ;Make request
   189 00003CB1 5E                  <1>     pop rsi
   190 00003CB2 8B05(38C40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   191 00003CB8 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   192 00003CBA 0FB705(25C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   193 00003CC1 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   194                              <1>     return
    18                              <2> %%_ret:
    19 00003CC5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   195                              <1> 
   196                              <1> getDiskDPB:
   197                              <1> ;Gets the disk DPB if the Disk is valid
   198                              <1> ;Otherwise will return a pointer to the drive DPB
   199                              <1> ;Called with rdi pointing to the CDS
   200                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   201 00003CC6 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   202 00003CCA 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   203 00003CCD 8805(63C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   204 00003CD3 E828020000          <1>     call setWorkingDPB
   205 00003CD8 57                  <1>     push rdi    ;Save the CDS ptr
   206 00003CD9 E85A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   207 00003CDE 5F                  <1>     pop rdi
   208 00003CDF 7233                <1>     jc .exitBad ;Preserve CF
   209 00003CE1 7530                <1>     jnz .exit
   210                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   211 00003CE3 8A0D(70C00300)      <1>     mov cl, byte [lastdrvNum]
   212 00003CE9 31C0                <1>     xor eax, eax
   213 00003CEB 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   214 00003CEE 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   215 00003CF2 488B3D(5DC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   216                              <1> .checkCDS:
   217 00003CF9 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   218 00003CFD 7509                <1>     jne .next
   219 00003CFF 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   220 00003D03 7403                <1>     jz .next    ;IF yes, skip it
   221 00003D05 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   222                              <1> .next:
   223 00003D08 4881C75B000000      <1>     add rdi, cds_size
   224 00003D0F FEC9                <1>     dec cl
   225 00003D11 75E6                <1>     jnz .checkCDS
   226                              <1> .exit:
   227 00003D13 F8                  <1>     clc
   228                              <1> .exitBad:
   229                              <1>     return
    18                              <2> %%_ret:
    19 00003D14 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> checkIfMedCheck:
   232                              <1> ;Input: rsi = DPB for disk
   233 00003D15 50                  <1>     push rax
   234 00003D16 53                  <1>     push rbx
   235                              <1>     ;!!!!!!!!!!!!
   236                              <1>     ;For now just if its the same disk, be ok with it.
   237                              <1>     ;!!!!!!!!!!!!
   238                              <1>     ;Read the clock record. Cross Day Bndry will always force a new operation
   239                              <1>     ;Read the time fields directly.
   240 00003D17 E8C5E0FFFF          <1>     call swapPrimaryHeader  ;Save the primary header temporarily
   241 00003D1C E812E7FFFF          <1>     call readDateTimeRecord ;Update the time
   242 00003D21 F9                  <1>     stc ;Set CF, write backup to primary header
   243 00003D22 E8BAE0FFFF          <1>     call swapPrimaryHeader
   244                              <1> 
   245                              <1> 
   246 00003D27 8A06                <1>     mov al, byte [rsi + dpb.bDriveNumber] 
   247 00003D29 3805(13D90300)      <1>     cmp byte [lastDiskNum], al
   248 00003D2F 7500                <1>     jnz .exit
   249                              <1> 
   250                              <1> .exit:
   251 00003D31 5B                  <1>     pop rbx
   252 00003D32 58                  <1>     pop rax
   253                              <1>     return
    18                              <2> %%_ret:
    19 00003D33 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> .okTime:
   255 00003D34 31DB                <1>     xor ebx, ebx
   256 00003D36 EBF9                <1>     jmp short .exit
   257                              <1> ensureDiskValid:
   258                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   259                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   260                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   261                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   262                              <1> .medChk:
   263 00003D38 E82C010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   264                              <1> ;Return in rbx the req hdr address
   265 00003D3D 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   266 00003D41 E836FEFFFF          <1>     call goDriver   ;Request!
   267 00003D46 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   268 00003D4A F7C700800000        <1>     test edi, drvErrStatus
   269 00003D50 756F                <1>     jnz .diskDrvCritErrMedChk
   270                              <1> .medChkIgnore:
   271 00003D52 8A05(63C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   272 00003D58 30E4                <1>     xor ah, ah
   273 00003D5A 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   274 00003D5D 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   275 00003D60 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   276 00003D62 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   277 00003D64 E8E1CBFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   278 00003D69 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   279 00003D6A 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   280                              <1>     ;ZF=NZ from test for dirty buffers
   281                              <1> .exit:
   282                              <1>     return
    18                              <2> %%_ret:
    19 00003D6C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   284 00003D6D C605(E7D80300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   285 00003D74 E8F5CBFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   286                              <1>     ;Get a buffer to read BPB into in rdi
   287 00003D79 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   288 00003D7B E89ECDFFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   289 00003D80 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   290 00003D82 4889DF              <1>     mov rdi, rbx
   291                              <1> .repeatEP:
   292 00003D85 E80B010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   293 00003D8A 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   294 00003D8E E8E9FDFFFF          <1>     call goDriver   ;Request!
   295 00003D93 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   296 00003D97 A900800000          <1>     test eax, drvErrStatus
   297 00003D9C 7561                <1>     jnz .diskDrvCritErrBPB
   298                              <1>     ;Now rebuild the dpb fields for this drive
   299 00003D9E 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   300 00003DA2 E8E9080000          <1>     call createDPB  
   301 00003DA7 E8F1CBFFFF          <1>     call setBufferReferenced    ;We are now done with the buffer
   302                              <1>     ;Adjust the buffer header information
   303 00003DAC 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   304 00003DAF 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   305 00003DB2 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   306 00003DB5 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   307 00003DB8 30E4                <1>     xor ah, ah
   308 00003DBA 8825(E7D80300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   309                              <1>     return
    18                              <2> %%_ret:
    19 00003DC0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   310                              <1> .diskDrvCritErrMedChk:
   311                              <1> ;Critical Errors fall through here
   312                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   313 00003DC1 48893D(71C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   314 00003DC8 48892D(DFC60300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   315 00003DCF 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   316 00003DD2 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   317 00003DD4 8825(C9C30300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   318 00003DDA E886FCFFFF          <1>     call criticalDOSError
   319 00003DDF 488B3D(71C30300)    <1>     mov rdi, qword [xInt44RDI]
   320 00003DE6 488B2D(DFC60300)    <1>     mov rbp, qword [tmpDPBPtr]
   321 00003DED 3C01                <1>     cmp al, critRetry
   322 00003DEF 0F8443FFFFFF        <1>     je .medChk
   323 00003DF5 3C00                <1>     cmp al, critIgnore
   324 00003DF7 0F8455FFFFFF        <1>     je .medChkIgnore
   325 00003DFD F9                  <1>     stc ;Set error flag to indicate fail
   326                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00003DFE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   327                              <1> 
   328                              <1> .diskDrvCritErrBPB:
   329                              <1>     ;eax has status word, rbp has dpb ptr
   330                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   331 00003DFF C605(C9C30300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   332 00003E06 E8F1FBFFFF          <1>     call diskDevErr
   333 00003E0B 3C01                <1>     cmp al, critRetry
   334 00003E0D 0F8472FFFFFF        <1>     je .repeatEP
   335                              <1>     ;Else we fail (Ignore=Fail here)
   336 00003E13 F9                  <1>     stc ;Set error flag to indicate fail
   337                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 00003E14 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   338                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   339                              <1> ;           Primitive Driver Requests
   340                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   341                              <1> ;First are Disk requests, then Char device requests
   342                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   343                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   344                              <1> 
   345                              <1> primReqWriteSetup:
   346 00003E15 50                  <1>     push rax
   347 00003E16 B408                <1>     mov ah, drvWRITE    ;Command code
   348 00003E18 0225(32C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   349 00003E1E EB03                <1>     jmp short primReqRWCommon
   350                              <1> primReqReadSetup:
   351 00003E20 50                  <1>     push rax
   352 00003E21 B404                <1>     mov ah, drvREAD
   353                              <1> primReqRWCommon:
   354                              <1> ;Sets up the IO request packet with:
   355                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   356                              <1> ; rbx = Data storage buffer ptr
   357                              <1> ; ecx = Number of sectors to transfer
   358                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   359                              <1> ; ~~~~ Set by entry function ~~~~ 
   360                              <1> ; ah = Command code
   361                              <1> ; All regs preserved EXCEPT rbx.
   362                              <1> ; Return: rbx = Transfer Address
   363 00003E23 48891D(30C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   364 00003E2A 890D(38C40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   365 00003E30 C605(22C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   366 00003E37 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   367 00003E3C 8905(23C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   368 00003E42 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   369 00003E45 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   370                              <1>     ;Disk operations only here!
   371 00003E47 488915(3CC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   372 00003E4E 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   373 00003E51 8805(2FC40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   374 00003E57 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   375 00003E5A 8805(23C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   376                              <1> primReqCommonExit:
   377                              <1> ;Returns in rbx the primary request header as these functions
   378                              <1> ; setup the request in the primary request header space
   379 00003E60 58                  <1>     pop rax
   380 00003E61 488D1D(22C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   381                              <1>     return
    18                              <2> %%_ret:
    19 00003E68 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   382                              <1> 
   383                              <1> primReqMedCheckSetup:
   384                              <1> ;Prepare the diskIO packet for mediacheck
   385                              <1> ;rbp has DPB pointer for device to check media on
   386 00003E69 50                  <1>     push rax
   387 00003E6A C605(22C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   388 00003E71 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   389 00003E74 8805(2FC40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   390 00003E7A 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   391 00003E7D 8805(23C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   392 00003E83 C605(24C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   393 00003E8A 66C705(25C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   393 00003E92 00                  <1>
   394 00003E93 EBCB                <1>     jmp short primReqCommonExit
   395                              <1> 
   396                              <1> primReqGetBPBSetup:
   397                              <1> ;rbp has DPB pointer for device
   398                              <1> ;rdi has sector buffer header pointer for transfer
   399 00003E95 50                  <1>     push rax
   400 00003E96 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   401 00003E9A 48893D(30C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   402 00003EA1 C605(22C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   403 00003EA8 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   404 00003EAB 8805(2FC40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   405 00003EB1 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   406 00003EB4 8805(23C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   407 00003EBA C605(24C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   408 00003EC1 66C705(25C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   408 00003EC9 00                  <1>
   409 00003ECA EB94                <1>     jmp short primReqCommonExit
   410                              <1> 
   411                              <1> primReqOpenSetup:
   412                              <1> ;al = unit number if a disk device. Undefined otherwise
   413 00003ECC 50                  <1>     push rax
   414 00003ECD B40D                <1>     mov ah, drvOPEN
   415                              <1> primReqCloseSetup:
   416                              <1> ;al = unit number if a disk device. Undefined otherwise
   417 00003ECF 50                  <1>     push rax
   418 00003ED0 B40E                <1>     mov ah, drvCLOSE
   419                              <1> primReqOCcommon:
   420 00003ED2 C605(22C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   421 00003ED9 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   422 00003EDA 8905(23C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   423                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   424 00003EE0 E97BFFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   425                              <1> 
   426                              <1> secdReqCharIOReq:
   427                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   428                              <1> ;Input:
   429                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   430                              <1> ; ecx = Length of buffer
   431                              <1> ; rdi = Buffer pointer
   432                              <1> ;Output: 
   433                              <1> ; rbx = Transfer Address 
   434 00003EE5 488D1D(F8C30300)    <1>     lea rbx, secdReqHdr
   435 00003EEC C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   436 00003EEF 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   437 00003EF2 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   438 00003EF8 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   439 00003EFC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   440                              <1>     return
    18                              <2> %%_ret:
    19 00003EFF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   441                              <1> ;If the device which will process this request is a disk device
   442                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   443                              <1> ;Then we will read the appropriate byte from that buffer to the 
   444                              <1> ; singleIOByt buffer.
   445                              <1> ;Such a request will require additional setup with the following fields:
   446                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    36                                  %include "./Source/Kernel/dosUtils.asm"
    37                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    38                              <1> 
    39                              <1> ;Basic Drive related Utilities
    40                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    41                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    42                              <1> ; that gets set up)
    43                              <1> 
    44                              <1> setWorkingDPB:
    45                              <1> ;Gets dpb in rbp and saves to workingDPB
    46 00003F00 48892D(64C60300)    <1>     mov qword [workingDPB], rbp
    47                              <1>     return
    18                              <2> %%_ret:
    19 00003F07 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> 
    49                              <1> testCDSNet:
    50                              <1> ;Checks if the workingCDS is a redirector drive
    51                              <1> ;Returns: CF=NC => Not net
    52                              <1> ;         CF=CY => Network redirector
    53                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    54                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    55                              <1> ;         rdi = workingCDS ptr
    56 00003F08 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]
    57 00003F0F 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    58 00003F16 7409                <1>     je .net
    59 00003F18 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    60 00003F1E 7501                <1>     jnz .net ;Net with CDS
    61                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 00003F20 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    62                              <1> .net:
    63 00003F21 F9                  <1>     stc ;Set Net bit
    64                              <1>     return
    18                              <2> %%_ret:
    19 00003F22 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> 
    66                              <1> getDiskData:
    67                              <1> ;This function returns:
    68                              <1> ;al = sectors per cluster
    69                              <1> ;ah = media ID byte
    70                              <1> ;ebx = total clusters
    71                              <1> ;cx = bytes per sector
    72                              <1> ;edx = number of available clusters
    73                              <1> ;
    74                              <1> ;If CF=CY on exit, al contains the error code
    75 00003F23 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    76 00003F28 7308                <1>     jnc .physical
    77                              <1>     ;Beep a redir request out
    78 00003F2A B80C110000          <1>     mov eax, 110Ch 
    79 00003F2F CD4F                <1>     int 4Fh
    80                              <1>     return
    18                              <2> %%_ret:
    19 00003F31 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    81                              <1> .physical:
    82                              <1> ;Now we must lock the structures
    83 00003F32 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk
    84 00003F39 E85A040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    85 00003F3E E883FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    86 00003F43 721C                <1>     jc .exit
    87 00003F45 E84ACDFFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    88 00003F4A 7215                <1>     jc .exit
    89 00003F4C 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    90 00003F4F FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    91 00003F51 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    92 00003F54 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    93 00003F57 FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    94 00003F59 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    95 00003F5D 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    96 00003F60 F8                  <1>     clc
    97                              <1> .exit:
    98 00003F61 E83C040000          <1>     call dosCrit1Exit
    99                              <1>     return
    18                              <2> %%_ret:
    19 00003F66 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   100                              <1> 
   101                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   102                              <1> ;Input: al = Interrupt number
   103                              <1> ;Output: rbx = Interrupt Vector
   104 00003F67 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   105 00003F68 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   106 00003F69 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   107 00003F6B B807F00000          <1>     mov eax, 0F007h
   108 00003F70 CD35                <1>     int 35h
   109 00003F72 5A                  <1>     pop rdx
   110 00003F73 58                  <1>     pop rax
   111                              <1>     return
    18                              <2> %%_ret:
    19 00003F74 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   112                              <1> 
   113                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   114                              <1> ;Returns ptr to user regs in rsi
   115 00003F75 488B35(DCC30300)    <1>     mov rsi, qword [oldRSP]
   116                              <1>     return
    18                              <2> %%_ret:
    19 00003F7C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   117                              <1> 
   118                              <1> walkDPBchain:
   119                              <1> ;Called with al = 0 based drive number
   120                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   121 00003F7D 488B35(3BC00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   122                              <1> .walk:
   123 00003F84 4881FEFFFFFFFF      <1>     cmp rsi, -1
   124 00003F8B 740A                <1>     je .exitBad
   125 00003F8D 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   126 00003F8F 7407                <1>     je .exit    ;Drive found
   127 00003F91 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   128 00003F95 EBED                <1>     jmp short .walk
   129                              <1> .exitBad:
   130 00003F97 F9                  <1>     stc
   131                              <1> .exit:
   132                              <1>     return
    18                              <2> %%_ret:
    19 00003F98 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   133                              <1> setDrive:   
   134                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   135                              <1> ;Input: al = 1-based drive number
   136                              <1> ;Output: al = 0-based drive number
   137                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   138                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   139                              <1> ;            set.
   140 00003F99 E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   141 00003F9E 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   142 00003FA0 56                  <1>     push rsi
   143 00003FA1 488B35(6CC60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   144 00003FA8 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   145 00003FAE 5E                  <1>     pop rsi
   146 00003FAF 7401                <1>     jz .exit
   147 00003FB1 F9                  <1>     stc
   148                              <1> .exit:
   149                              <1>     return
    18                              <2> %%_ret:
    19 00003FB2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   150                              <1> 
   151                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   152                              <1> ;Allows a redirector or subst/join to build a CDS
   153                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   154                              <1> ; volumes, that are made at system boot.
   155                              <1> ;Input: al = Drive Letter for drive
   156                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   157                              <1> ;Output: rdi = newly filled in workingCDS
   158                              <1> ;CF=NC => CDS valid and has a DPB
   159                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   160 00003FB3 50                  <1>     push rax
   161 00003FB4 2C40                <1>     sub al, "A"-1
   162 00003FB6 3A05(6FC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   163 00003FBC 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   164 00003FC3 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   165 00003FC9 58                  <1>     pop rax
   166 00003FCA 7235                <1>     jb .exit    ;Exit with CF=CY
   167 00003FCC 50                  <1>     push rax
   168 00003FCD 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   169 00003FD2 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   170 00003FD4 58                  <1>     pop rax
   171 00003FD5 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   172 00003FDB C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   173 00003FE2 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   174 00003FEA 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   175                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   176 00003FF0 50                  <1>     push rax
   177 00003FF1 56                  <1>     push rsi
   178 00003FF2 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   179 00003FF4 E884FFFFFF          <1>     call walkDPBchain
   180 00003FF9 7204                <1>     jb .skipSettingDPB
   181 00003FFB 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   182                              <1> .skipSettingDPB:
   183 00003FFF 5E                  <1>     pop rsi
   184 00004000 58                  <1>     pop rax
   185                              <1> .exit:
   186                              <1>     return
    18                              <2> %%_ret:
    19 00004001 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   187                              <1> 
   188                              <1> getCDS:     ;Int 4Fh AX=1219h
   189                              <1> ;Gets the device DPB and saves it in the DOS variable
   190                              <1> ;This can be called to get CDS for network drives too!
   191                              <1> ;Input: al = 1 based drive number
   192                              <1> ;Sets workingCDS var with the CDS for the device. 
   193                              <1> ;   If device on a network, sets CF
   194                              <1> ;Returns al with 0-based drive number
   195 00004002 84C0                <1>     test al, al
   196 00004004 7508                <1>     jnz .skip
   197 00004006 8A05(93C30300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   198 0000400C FEC0                <1>     inc al
   199                              <1> .skip:
   200 0000400E FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   201 00004010 56                  <1>     push rsi
   202 00004011 C605(6CC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   203 00004018 F605(5CC60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   204 0000401F 7423                <1>     jz .physDrive
   205                              <1>     ;Invokation via 21/5D00
   206 00004021 50                  <1>     push rax
   207 00004022 57                  <1>     push rdi
   208 00004023 488D3D(FBC50300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   209 0000402A 48893D(6CC60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   210 00004031 0441                <1>     add al, "A" ;Convert to a drive letter
   211 00004033 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   212 00004038 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   213 0000403E 5F                  <1>     pop rdi
   214 0000403F 58                  <1>     pop rax
   215 00004040 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   216 00004042 EB17                <1>     jmp short .exitOk   ;All oki
   217                              <1> .physDrive:
   218 00004044 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   219 00004049 7208                <1>     jc .exitBad
   220 0000404B 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   221 00004051 7508                <1>     jnz .exitOk ;Exit with flag cleared
   222                              <1>     ;Else Return to unknown error locus
   223                              <1> .exitBad:
   224 00004053 C605(6CC30300)01    <1>     mov byte [errorLocus], eLocUnk
   225                              <1> .exitBad1:
   226 0000405A F9                  <1>     stc
   227                              <1> .exitOk:
   228 0000405B 5E                  <1>     pop rsi
   229                              <1>     return
    18                              <2> %%_ret:
    19 0000405C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   230                              <1> 
   231                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   232                              <1>     ;Gets the CDS for the current drive in al
   233                              <1>     ;Input: al = Drive number, 0 = A ...
   234                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   235                              <1>     ;        CF=CY => al not valid
   236 0000405D 3A05(70C00300)      <1>     cmp al, byte [lastdrvNum]
   237 00004063 7202                <1>     jb .ctn
   238 00004065 F9                  <1>     stc 
   239                              <1>     return
    18                              <2> %%_ret:
    19 00004066 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   240                              <1> .ctn:
   241 00004067 50                  <1>     push rax
   242 00004068 52                  <1>     push rdx
   243 00004069 0FB6C0              <1>     movzx eax, al
   244 0000406C 48BE5B000000000000- <1>     mov rsi, cds_size
   244 00004075 00                  <1>
   245 00004076 31D2                <1>     xor edx, edx
   246 00004078 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   247 0000407A 488B35(5DC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   248 00004081 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   249 00004084 488935(6CC60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   250 0000408B 5A                  <1>     pop rdx
   251 0000408C 58                  <1>     pop rax
   252 0000408D F8                  <1>     clc
   253                              <1>     return
    18                              <2> %%_ret:
    19 0000408E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   254                              <1> 
   255                              <1> 
   256                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   257                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   258                              <1> ;Input: AL = Char to normalise.
   259                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   260                              <1> ;If path separator, set ZF=ZE
   261 0000408F 3C5C                <1>     cmp al, "\"
   262 00004091 7406                <1>     je .exit
   263 00004093 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   264 00004095 7502                <1>     jne .exit
   265 00004097 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   266                              <1> .exit:
   267                              <1>     return
    18                              <2> %%_ret:
    19 00004099 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   268                              <1> 
   269                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   270                              <1> ;Convert a lowercase char to uppercase
   271                              <1> ; Leave alone uppercase chars and invalid chars
   272                              <1> ;Input: al = Char to convert to uppercase
   273                              <1> ;Output: al = Processed char
   274 0000409A 53                  <1>     push rbx
   275 0000409B 3C61                <1>     cmp al, "a"
   276 0000409D 7214                <1>     jb .exit
   277 0000409F 3C7A                <1>     cmp al, "z"
   278 000040A1 7702                <1>     ja .checkExt
   279 000040A3 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   280                              <1> .checkExt:
   281 000040A5 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   282 000040A7 720A                <1>     jb .exit
   283 000040A9 2C80                <1>     sub al, 80h ;Turn into table offset
   284 000040AB 488D1D1EC1FFFF      <1>     lea rbx, extAsciiTbl
   285 000040B2 D7                  <1>     xlatb   ;Get converted extended byte into al
   286                              <1> .exit:
   287 000040B3 50                  <1>     push rax    ;Save al temporarily
   288 000040B4 488D1D95C1FFFF      <1>     lea rbx, extAsciiSig
   289 000040BB D7                  <1>     xlatb   ;Get the signature in al
   290 000040BC A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   291 000040BE 58                  <1>     pop rax
   292 000040BF 5B                  <1>     pop rbx
   293                              <1>     return
    18                              <2> %%_ret:
    19 000040C0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> strlen: ;Int 4Fh, AX=1212h
   296                              <1> ;Gets the length of a ASCIIZ string
   297                              <1> ;Input: rdi = Source buffer
   298                              <1> ;Output: ecx = Length of string
   299 000040C1 50                  <1>     push rax
   300 000040C2 57                  <1>     push rdi
   301 000040C3 30C0                <1>     xor al, al
   302 000040C5 31C9                <1>     xor ecx, ecx
   303                              <1> .scan:
   304 000040C7 AE                  <1>     scasb   ;Scan the string at rdi
   305 000040C8 7404                <1>     je .exit
   306 000040CA FFC1                <1>     inc ecx
   307 000040CC EBF9                <1>     jmp short .scan
   308                              <1> .exit:
   309 000040CE 5F                  <1>     pop rdi
   310 000040CF 58                  <1>     pop rax
   311                              <1>     return
    18                              <2> %%_ret:
    19 000040D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   312                              <1> 
   313                              <1> strcpy:
   314                              <1> ;Copies a null terminated string from rsi to rdi
   315 000040D1 AC                  <1>     lodsb
   316 000040D2 AA                  <1>     stosb
   317 000040D3 84C0                <1>     test al, al
   318                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000040D5 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   319 000040D7 EBF8                <1>     jmp short strcpy
   320                              <1> 
   321                              <1> 
   322                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   323                              <1> ;Converts lowercase to uppercase and / to "\"
   324                              <1> ;Input: rsi = Source buffer
   325                              <1> ;       rdi = Buffer to place normalised path
   326 000040D9 50                  <1>     push rax
   327 000040DA 56                  <1>     push rsi
   328 000040DB 57                  <1>     push rdi
   329                              <1> .scan:
   330 000040DC AC                  <1>     lodsb
   331 000040DD 84C0                <1>     test al, al
   332 000040DF 740D                <1>     jz .exit
   333 000040E1 E8A9FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   334 000040E6 E8AFFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   335 000040EB AA                  <1>     stosb
   336 000040EC EBEE                <1>     jmp short .scan
   337                              <1> .exit:
   338 000040EE 5F                  <1>     pop rdi
   339 000040EF 5E                  <1>     pop rsi
   340 000040F0 58                  <1>     pop rax
   341                              <1>     return
    18                              <2> %%_ret:
    19 000040F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   342                              <1> 
   343                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   344                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   345                              <1> ;Input: rsi = One ASCIIZ pathname
   346                              <1> ;       rdi = Second ASCIIZ pathname
   347                              <1> ;Return:
   348                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   349 000040F2 50                  <1>     push rax
   350 000040F3 56                  <1>     push rsi
   351 000040F4 57                  <1>     push rdi
   352                              <1> .scan:
   353 000040F5 8A06                <1>     mov al, byte [rsi]
   354 000040F7 84C0                <1>     test al, al
   355 000040F9 7424                <1>     jz .endOfString
   356 000040FB 8A27                <1>     mov ah, byte [rdi]
   357 000040FD E88DFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   358 00004102 7410                <1>     jz .pathseps
   359 00004104 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   360 00004108 38E0                <1>     cmp al, ah
   361 0000410A 7515                <1>     jnz .exit
   362                              <1> .nextChar:
   363 0000410C 48FFC6              <1>     inc rsi
   364 0000410F 48FFC7              <1>     inc rdi
   365 00004112 EBE1                <1>     jmp short .scan
   366                              <1> .pathseps:
   367 00004114 86E0                <1>     xchg ah, al
   368 00004116 E874FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   369 0000411B 7504                <1>     jnz .exit
   370 0000411D EBED                <1>     jmp short .nextChar ;Else get the next chars
   371                              <1> .endOfString:
   372 0000411F 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   373                              <1> .exit:
   374 00004121 5F                  <1>     pop rdi
   375 00004122 5E                  <1>     pop rsi
   376 00004123 58                  <1>     pop rax
   377                              <1>     return
    18                              <2> %%_ret:
    19 00004124 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   378                              <1> checkPathspecOK:
   379                              <1> ;Input:
   380                              <1> ;rsi -> points to a path to verify if it is ok.
   381                              <1> ;Output:
   382                              <1> ;CF=NC => The path is totally clean and ok to use.
   383                              <1> ;CF=CY => the path is malformed and may be used ONLY if ZF=ZE. 
   384                              <1> ; If ZF=ZE then the only bad char in the path is followed by a ASCII null
   385                              <1> ;Here we check for OK chars only. Hence \ / ? * and . are considered acceptable
   386                              <1> 
   387                              <1> ;Full paths may start with \\<15-char machine name>\...
   388                              <1> ; or <Drive Letter>:\...
   389                              <1> ;CWD relative paths start with <Drive Letter>:...
   390                              <1> ;Current Drive Root Relative paths may start with \...
   391                              <1> ;Current Drive CWD relative paths start with any other char
   392                              <1> ;FOR NOW, we allow redir but no servers. Too much hassle for now
   393                              <1> 
   394                              <1> ;We accept lc and uc characters in this check function.
   395 00004125 50                  <1>     push rax
   396 00004126 51                  <1>     push rcx
   397 00004127 56                  <1>     push rsi
   398 00004128 57                  <1>     push rdi
   399                              <1>     ;First we verify that the first two chars are ok (either X: or \\ or chars)
   400 00004129 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   401 0000412C F605(5CC60300)FF    <1>     test byte [dosInvoke], -1
   402 00004133 7539                <1>     jnz .serverCallCheck
   403 00004135 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   404 00004139 7417                <1>     je .okToScan
   405 0000413B 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   406 0000413F 7411                <1>     je .okToScan
   407 00004141 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   408 00004144 7402                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   409                              <1>     ;Is this a current drive CWD relative or current drive root relative path?
   410                              <1>     ;If so the pathspec is not different to normal, goto scanLoop
   411 00004146 EB11                <1>     jmp short .scanLoop
   412                              <1> .diskPath:
   413                              <1> ;Disk Letter must be A-Z (or a-z)
   414 00004148 0C20                <1>     or al, 20h  ;Force an UC char to LC
   415 0000414A 3C61                <1>     cmp al, "a"
   416 0000414C 7217                <1>     jb .badExit
   417 0000414E 3C7A                <1>     cmp al, "z"
   418 00004150 7713                <1>     ja .badExit
   419                              <1> .okToScan:
   420 00004152 4881C602000000      <1>     add rsi, 2  ;Skip first two chars now
   421                              <1> .scanLoop:
   422 00004159 AC                  <1>     lodsb   ;Get char, inc rsi
   423 0000415A 84C0                <1>     test al, al  ;Is al=0, i.e string terminator?
   424 0000415C 740B                <1>     je .exit    ;Clear CF if al = 0
   425 0000415E E851000000          <1>     call checkCharOk    ;Check if char ok
   426 00004163 75F4                <1>     jnz .scanLoop    ;If it is not, fall thru
   427                              <1> .badExit:
   428                              <1> ;Before we bad exit, we check if the next char is ascii null.
   429                              <1> ;If it is we set ZF
   430 00004165 AC                  <1>     lodsb
   431 00004166 84C0                <1>     test al, al ;Set ZF if only last char is malformed, else clear ZF
   432                              <1> .servBadExit:   ;Server paths must be null terminated
   433 00004168 F9                  <1>     stc ;And set CF to indicate bad path
   434                              <1> .exit:
   435 00004169 5F                  <1>     pop rdi
   436 0000416A 5E                  <1>     pop rsi
   437 0000416B 59                  <1>     pop rcx
   438 0000416C 58                  <1>     pop rax
   439                              <1>     return
    18                              <2> %%_ret:
    19 0000416D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   440                              <1> .serverCallCheck:
   441                              <1> ;Server calls are a bit stricter, . and .. are forbidden but dir and filenames
   442                              <1> ; may contain an extension separated by a .
   443 0000416E 80FC3A              <1>     cmp ah, ":"
   444 00004171 75F5                <1>     jne .servBadExit
   445 00004173 0C20                <1>     or al, 20h  ;Force an UC char to LC
   446 00004175 3C61                <1>     cmp al, "a"
   447 00004177 72EF                <1>     jb .servBadExit
   448 00004179 3C7A                <1>     cmp al, "z"
   449 0000417B 77EB                <1>     ja .servBadExit
   450                              <1>     ;If a dot is found, must check if the . is within 4 chars of a pathsep or 0
   451                              <1> .servScanLoop:
   452 0000417D AC                  <1>     lodsb
   453 0000417E 84C0                <1>     test al, al
   454 00004180 74E7                <1>     je .exit
   455 00004182 3C2E                <1>     cmp al, "." ;Handle dots separately
   456 00004184 7409                <1>     je .secondDotCheck
   457 00004186 E829000000          <1>     call checkCharOk
   458 0000418B 75F0                <1>     jnz .servScanLoop
   459 0000418D EBEE                <1>     jmp short .servScanLoop
   460                              <1> .secondDotCheck:
   461 0000418F AC                  <1>     lodsb
   462 00004190 84C0                <1>     test al, al ;cannot be a dot followed by a null
   463 00004192 74D4                <1>     jz .servBadExit
   464 00004194 3C2E                <1>     cmp al, "." ;Was this a .. entry?
   465 00004196 74D0                <1>     je .servBadExit
   466 00004198 E8F2FEFFFF          <1>     call swapPathSeparator  ;Was second char a pathsep? Not allowed.
   467 0000419D 74C9                <1>     jz .servBadExit ;... else check if the char was valid
   468 0000419F EBDC                <1>     jmp short .servScanLoop ;Else keep searching.
   469                              <1> scanPathWC:
   470                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   471                              <1> ; even in the final path componant.
   472                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   473                              <1> ;Output: CF=NC => No wildcards present
   474                              <1> ;        CF=CY => Wildcards found
   475 000041A1 50                  <1>     push rax
   476 000041A2 56                  <1>     push rsi
   477                              <1> .scan:
   478 000041A3 AC                  <1>     lodsb
   479 000041A4 84C0                <1>     test al, al
   480 000041A6 7409                <1>     jz .exit
   481 000041A8 3C3F                <1>     cmp al, "?"
   482 000041AA 7404                <1>     je .wcFnd
   483 000041AC 3C2A                <1>     cmp al, "*"
   484 000041AE 75F3                <1>     jne .scan
   485                              <1> .wcFnd:
   486 000041B0 F9                  <1>     stc
   487                              <1> .exit:
   488 000041B1 5E                  <1>     pop rsi
   489 000041B2 58                  <1>     pop rax
   490                              <1>     return
    18                              <2> %%_ret:
    19 000041B3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   491                              <1> 
   492                              <1> 
   493                              <1> checkCharOk:
   494                              <1> ;Same as checkCharValid except DOES not return error on * ? \ / .
   495                              <1> ;If ZF=ZE => Invalid Char
   496                              <1> ;If ZF=NZ => Ok Char
   497 000041B4 3C2E                <1>     cmp al, "."
   498 000041B6 740F                <1>     je .exitOk
   499 000041B8 3C2A                <1>     cmp al, "*"
   500 000041BA 740B                <1>     je .exitOk
   501 000041BC 3C3F                <1>     cmp al, "?"
   502 000041BE 7407                <1>     je .exitOk
   503 000041C0 E8CAFEFFFF          <1>     call swapPathSeparator  ;check if al is a path separator
   504 000041C5 7505                <1>     jnz checkCharValid
   505                              <1> .exitOk:
   506 000041C7 50                  <1>     push rax
   507 000041C8 0C01                <1>     or al, 1    ;Always clears the ZF
   508 000041CA 58                  <1>     pop rax
   509                              <1>     return
    18                              <2> %%_ret:
    19 000041CB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   510                              <1> checkCharValid:
   511                              <1> ;If ZF=ZE => Invalid Char
   512                              <1> ;If ZF=NZ => Valid Char
   513 000041CC 51                  <1>     push rcx
   514 000041CD 57                  <1>     push rdi
   515 000041CE B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   516 000041D3 488D3DC6BFFFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   517 000041DA F2AE                <1>     repne scasb ;Scan. Stop when equal
   518 000041DC 5F                  <1>     pop rdi
   519 000041DD 59                  <1>     pop rcx
   520                              <1>     return
    18                              <2> %%_ret:
    19 000041DE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   523                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   524                              <1> ;Input: rsi = One pointer
   525                              <1> ;       rdi = Second pointer
   526                              <1> ;Output: ZF=ZE if equal
   527                              <1> ;        ZF=NZ if not
   528 000041DF 4839FE              <1>     cmp rsi, rdi
   529                              <1>     return
    18                              <2> %%_ret:
    19 000041E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> checkPathNet:
   532                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   533                              <1> ;Output: ZF=ZE => Path is a net path
   534                              <1> ;        ZF=NZ => Path is not a net path
   535 000041E3 50                  <1>     push rax
   536 000041E4 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   537 000041E7 E8A3FEFFFF          <1>     call swapPathSeparator
   538 000041EC 7505                <1>     jnz .exit
   539 000041EE E89CFEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   540                              <1> .exit:
   541 000041F3 58                  <1>     pop rax
   542                              <1>     return
    18                              <2> %%_ret:
    19 000041F4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   543                              <1> 
   544                              <1> getCharDevDriverPtr:
   545                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   546                              <1> ;Input: rax = Device Driver name (space padded)
   547                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   548 000041F5 488D3D(73C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   549                              <1> .lp:
   550 000041FC 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   551                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004200 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   552 00004202 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   553 00004205 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   554 0000420C 75EE                <1>     jne .lp ;If not loop
   555 0000420E F9                  <1>     stc ;Else bad exit
   556                              <1>     return
    18                              <2> %%_ret:
    19 0000420F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    37                                  %include "./Source/Kernel/dosMain.asm"
    38                              <1> ;-----------------------------------:
    39                              <1> ;        Main Kernel dispatch       :
    40                              <1> ;            and routines           :
    41                              <1> ;-----------------------------------:
    42                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    43                              <1> ;ah = Function number, all other registers have various meanings
    44                              <1>  %if DEBUG
    45                              <1>     ;Entry function
    46                              <1>     debugEnterM
    47                              <1>     lea rbp, .l0000
    48                              <1>     call debPrintNullString
    49                              <1>     call debPrintFunctionName
    50                              <1>     jmp short .l0001
    51                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    52                              <1> .l0001:    
    53                              <1>     debugExitM
    54                              <1>     %endif
    55 00004210 FA                  <1>     cli ;Halt external interrupts
    56 00004211 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    57 00004212 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    58 00004215 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    59                              <1>     ;Cherry pick functions
    60 0000421B 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    61 0000421E 722C                <1>     jb .fsbegin   ;If below skip these checks
    62 00004220 0F8470020000        <1>     je ctrlBreakCheck
    63 00004226 80FC64              <1>     cmp ah, 64h
    64 00004229 0F84B0020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    65 0000422F 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    66 00004231 80FC51              <1>     cmp ah, 51h
    67 00004234 0F8493020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    68 0000423A 80FC62              <1>     cmp ah, 62h
    69 0000423D 0F8493020000        <1>     je getPSPaddr          ;Calls the above function
    70 00004243 80FC50              <1>     cmp ah, 50h
    71 00004246 0F8478020000        <1>     je setCurrProcessID
    72                              <1> .fsbegin:
    73 0000424C E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    74 00004251 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    75 00004258 66C705(A5C30300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    75 00004260 00                  <1>
    76 00004261 488B05(DCC30300)    <1>     mov rax, qword [oldRSP]
    77 00004268 488905(CCC30300)    <1>     mov qword [oldoldRSP], rax
    78 0000426F FE05(6AC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    79 00004275 488925(DCC30300)    <1>     mov qword [oldRSP], rsp
    80                              <1> ;Network related variable resetting
    81 0000427C C605(5CC60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    82                              <1> ;Here, we want to save oldRSP in the callers PSP
    83 00004283 803D(6AC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    84 0000428A 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    85 0000428C 488B05(81C30300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    86 00004293 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    87                              <1> .fsb1:
    88 00004297 58                  <1>     pop rax     ;Get old rax back
    89 00004298 50                  <1>     push rax    ;and push it back onto the stack
    90                              <1> .abortEP:
    91                              <1> .charFun0CEP:
    92                              <1> .serverEP:
    93 00004299 488D25(10CC0300)    <1>     lea rsp, critStakTop
    94 000042A0 FB                  <1>     sti         ;Reenable interrupts
    95                              <1> 
    96 000042A1 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    97 000042A3 881D(F5C30300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    98 000042A9 C605(F6C30300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    99 000042B0 881D(CBC30300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   100 000042B6 881D(ECC30300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   101                              <1> 
   102 000042BC 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   103 000042BD 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   104 000042BF D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   105 000042C1 488D0508C0FFFF      <1>     lea rax, kDispTbl
   106 000042C8 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   107 000042CB 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   108 000042CF 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   109 000042D2 58                  <1>     pop rax
   110                              <1> 
   111 000042D3 84E4                <1>     test ah, ah     ;Simple Terminate function?
   112 000042D5 741C                <1>     jz .fddiskOp
   113 000042D7 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   114 000042DA 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   115 000042DC 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   116 000042DF 7712                <1>     ja .fddiskOp
   117                              <1> ;Char operations here
   118 000042E1 F605(69C30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   119 000042E8 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   120 000042EA 488D25(9FD20300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   121 000042F1 EB40                <1>     jmp short .fdGoToFunction
   122                              <1> .fddiskOp:
   123                              <1>     ;Disk operations go here
   124                              <1>     ;Save rax on entry to a disk funciton
   125 000042F3 488905(95C30300)    <1>     mov qword [oldRAX], rax
   126                              <1>     ;Clear up error info
   127 000042FA C605(6CC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   128 00004301 C605(69C30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   129 00004308 C605(6BC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   130                              <1> 
   131 0000430F 50                  <1>     push rax
   132 00004310 B482                <1>     mov ah, 82h ;Cancel all critical section!
   133 00004312 CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   134 00004314 58                  <1>     pop rax
   135                              <1> 
   136 00004315 C605(F6C30300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   137 0000431C 488D25(DFD80300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   138 00004323 F605(94C30300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   139 0000432A 7407                <1>     jz .fdGoToFunction
   140                              <1> ; HANDLE CTRL+BREAK HERE!
   141 0000432C 50                  <1>     push rax
   142 0000432D E871DCFFFF          <1>     call checkBreak   ; Check for a ^C
   143 00004332 58                  <1>     pop rax
   144                              <1> .fdGoToFunction:
   145 00004333 48871D(E4C30300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   146                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   147                              <1>     ;
   148                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   149                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   150                              <1>     ;
   151                              <1>     %if DEBUG && REGS
   152                              <1>     ;Print stack if necessary function
   153                              <1>     debugEnterM
   154                              <1>     call debPrintDOSStack
   155                              <1>     debugExitM
   156                              <1>     %endif
   157 0000433A FF15(E4C30300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   158                              <1>     %if DEBUG
   159                              <1>     ;Entry function
   160                              <1>     debugEnterM
   161                              <1>     lea rbp, .l0002
   162                              <1>     call debPrintNullString
   163                              <1>     jmp short .l0003
   164                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   165                              <1> .l0003:    
   166                              <1>     debugExitM
   167                              <1>     %endif
   168                              <1>     %if DEBUG && REGS
   169                              <1>     ;Exit function
   170                              <1>     debugEnterM
   171                              <1>     call debPrintDOSStack
   172                              <1>     debugExitM
   173                              <1>     %endif
   174                              <1> .fdExit:
   175 00004340 FA                  <1>     cli     ;Redisable interrupts
   176 00004341 FE0D(6AC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   177 00004347 488B25(DCC30300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   178 0000434E 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   179 00004351 488B05(CCC30300)    <1>     mov rax, qword [oldoldRSP]
   180 00004358 488905(DCC30300)    <1>     mov qword [oldRSP], rax
   181 0000435F E806000000          <1>     call dosPopRegs  ;Pop the frame
   182 00004364 48CF                <1>     iretq
   183                              <1> .fdExitBad:
   184 00004366 30C0                <1>     xor al, al
   185                              <1> defaultIretq:
   186 00004368 48CF                <1>     iretq
   187                              <1> dosPopRegs:
   188 0000436A 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   189 00004370 58                  <1>     pop rax
   190 00004371 5B                  <1>     pop rbx
   191 00004372 59                  <1>     pop rcx
   192 00004373 5A                  <1>     pop rdx
   193 00004374 5E                  <1>     pop rsi
   194 00004375 5F                  <1>     pop rdi
   195 00004376 5D                  <1>     pop rbp
   196 00004377 4158                <1>     pop r8
   197 00004379 4159                <1>     pop r9
   198 0000437B FF25(D4C30300)      <1>     jmp qword [dosReturn]
   199                              <1> dosPushRegs:
   200 00004381 8F05(D4C30300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   201 00004387 4151                <1>     push r9
   202 00004389 4150                <1>     push r8
   203 0000438B 55                  <1>     push rbp
   204 0000438C 57                  <1>     push rdi
   205 0000438D 56                  <1>     push rsi
   206 0000438E 52                  <1>     push rdx
   207 0000438F 51                  <1>     push rcx
   208 00004390 53                  <1>     push rbx
   209 00004391 50                  <1>     push rax
   210 00004392 FF25(D4C30300)      <1>     jmp qword [dosReturn]
   211                              <1> dosCrit1Enter:
   212                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00004398 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   213 00004399 B801800000          <1>     mov eax, 8001h
   214 0000439E CD4A                <1>     int 4ah
   215 000043A0 58                  <1>     pop rax
   216                              <1>     return
    18                              <2> %%_ret:
    19 000043A1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   217                              <1> dosCrit1Exit:
   218                              <1>     return
    18                              <2> %%_ret:
    19 000043A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   219 000043A3 B801810000          <1>     mov eax, 8101h
   220 000043A8 CD4A                <1>     int 4ah
   221 000043AA 58                  <1>     pop rax
   222                              <1>     return
    18                              <2> %%_ret:
    19 000043AB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   223                              <1> dosCrit2Enter:
   224                              <1>     return
    18                              <2> %%_ret:
    19 000043AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   225 000043AD B802800000          <1>     mov eax, 8002h
   226 000043B2 CD4A                <1>     int 4ah
   227 000043B4 58                  <1>     pop rax
   228                              <1>     return
    18                              <2> %%_ret:
    19 000043B5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   229                              <1> dosCrit2Exit:
   230                              <1>     return
    18                              <2> %%_ret:
    19 000043B6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231 000043B7 B802810000          <1>     mov eax, 8102h
   232 000043BC CD4A                <1>     int 4ah
   233 000043BE 58                  <1>     pop rax
   234                              <1>     return
    18                              <2> %%_ret:
    19 000043BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   235                              <1> 
   236                              <1> ;All good exits destroy AT LEAST ax 
   237                              <1> extGoodExit2:
   238                              <1> ;Good exit with an extended return code in eax
   239 000043C0 E8B0FBFFFF          <1>     call getUserRegs
   240 000043C5 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   241 000043C7 EB08                <1>     jmp short extGoodExit.extGoodCommon
   242                              <1> extGoodExit:
   243                              <1> ;Good exit
   244                              <1> ;Return code in ax
   245 000043C9 E8A7FBFFFF          <1>     call getUserRegs
   246 000043CE 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   247                              <1> .extGoodCommon:
   248 000043D1 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   249 000043D5 F8                  <1>     clc
   250                              <1>     return
    18                              <2> %%_ret:
    19 000043D6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> extErrExit:
   252                              <1> ;The extended error exit from DOS
   253                              <1> ;Jumped to with AL=Extended error code
   254                              <1> ;Can be called too.
   255                              <1> ;Input: al = Extended error code
   256                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   257                              <1> ;   Returns with: eax = xLat Error
   258                              <1> ;                 rsi = callerFrame
   259 000043D7 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   260 000043DA E813000000          <1>     call xLatError
   261 000043DF E891000000          <1>     call checkFail
   262 000043E4 E88CFBFFFF          <1>     call getUserRegs
   263 000043E9 668906              <1>     mov word [rsi + callerFrame.rax], ax
   264 000043EC 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   265 000043F0 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   266                              <1>     return
    18                              <2> %%_ret:
    19 000043F1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   267                              <1> xLatError:
   268                              <1> ;Translates the error code given in ax and sets error code in the var
   269                              <1> ; Input: ax = Extended Error Code
   270                              <1> ; Output: ax = Potentially translated Error Code
   271                              <1> ;         [errorExCde] = Original Error Code
   272                              <1> ;Preserves all registers except ax
   273                              <1> ;AH is always returned as 0
   274 000043F2 53                  <1>     push rbx
   275 000043F3 51                  <1>     push rcx
   276 000043F4 56                  <1>     push rsi
   277 000043F5 668905(6DC30300)    <1>     mov word [errorExCde], ax
   278 000043FC 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   279 000043FE 488D358BBCFFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   280                              <1> .readEntry:
   281 00004405 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   282 00004407 3CFF                <1>     cmp al, -1
   283 00004409 741F                <1>     je .skipXlat
   284 0000440B 3A05(96C30300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   285 00004411 7408                <1>     je .found
   286                              <1>     ;Here, entry not found, goto next entry
   287 00004413 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   288 00004416 4801C6              <1>     add rsi, rax    ;Goto next entry
   289 00004419 EBEA                <1>     jmp short .readEntry
   290                              <1> .found:
   291                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   292 0000441B 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   293                              <1> .mainSearch:
   294 0000441E AC                  <1>     lodsb   ;Get one byte into al
   295 0000441F 38C3                <1>     cmp bl, al  ;Check against the error code
   296 00004421 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   297 00004423 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   298 00004425 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   299                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   300 00004427 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   301                              <1> .skipXlat:
   302 0000442A 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   303 0000442C 5E                  <1>     pop rsi
   304 0000442D 59                  <1>     pop rcx
   305 0000442E 5B                  <1>     pop rbx
   306                              <1>     return
    18                              <2> %%_ret:
    19 0000442F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   307                              <1> setErrorVars:
   308                              <1> ;Looks up the error code in the variable and sets the other error vars
   309                              <1> ;Called with the lookup table in rsi
   310                              <1> ;All regs preserved
   311 00004430 50                  <1>     push rax
   312 00004431 53                  <1>     push rbx
   313 00004432 51                  <1>     push rcx
   314 00004433 56                  <1>     push rsi
   315 00004434 0FB71D(6DC30300)    <1>     movzx ebx, word [errorExCde]
   316 0000443B B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   317                              <1> .readEntry:
   318 00004440 AD                  <1>     lodsd   ;Read the dword table entry into eax
   319 00004441 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   320 00004446 7428                <1>     je .exit    
   321 00004448 38D8                <1>     cmp al, bl  ;Compare the error codes
   322 0000444A 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   323 0000444C D3E8                <1>     shr eax, cl
   324 0000444E 3CFF                <1>     cmp al, -1
   325 00004450 7406                <1>     je .skipClass
   326 00004452 8805(70C30300)      <1>     mov byte [errorClass], al
   327                              <1> .skipClass:
   328 00004458 D3E8                <1>     shr eax, cl
   329 0000445A 3CFF                <1>     cmp al, -1
   330 0000445C 7406                <1>     je .skipAct
   331 0000445E 8805(6FC30300)      <1>     mov byte [errorAction], al
   332                              <1> .skipAct:
   333 00004464 D3E8                <1>     shr eax, cl
   334 00004466 3CFF                <1>     cmp al, -1
   335 00004468 7406                <1>     je .exit
   336 0000446A 8805(6CC30300)      <1>     mov byte [errorLocus], al
   337                              <1> .exit:
   338 00004470 5E                  <1>     pop rsi
   339 00004471 59                  <1>     pop rcx
   340 00004472 5B                  <1>     pop rbx
   341 00004473 58                  <1>     pop rax
   342                              <1>     return
    18                              <2> %%_ret:
    19 00004474 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   343                              <1> checkFail:
   344                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   345                              <1> ; and swaps the var error code if so
   346 00004475 803D(CBC30300)00    <1>     cmp byte [Int44Fail], 0
   347 0000447C 7509                <1>     jnz .skipFail
   348 0000447E 66C705(6DC30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   348 00004486 00                  <1>
   349                              <1> .skipFail:
   350 00004487 56                  <1>     push rsi
   351 00004488 488D359DBCFFFF      <1>     lea rsi, extErrTbl
   352 0000448F E89CFFFFFF          <1>     call setErrorVars
   353 00004494 5E                  <1>     pop rsi
   354                              <1>     return
    18                              <2> %%_ret:
    19 00004495 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   355                              <1> ;========================================:
   356                              <1> ;      Reentrant Kernel Functions        :
   357                              <1> ;========================================:
   358                              <1> ctrlBreakCheck:    ;ah = 33h
   359 00004496 84C0                <1>     test al, al
   360 00004498 7508                <1>     jnz .cbcget  ;Get the state or other functions
   361 0000449A 8A15(94C30300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   362 000044A0 48CF                <1>     iretq
   363                              <1> .cbcget:
   364 000044A2 3C02                <1>     cmp al, 02h
   365 000044A4 771A                <1>     ja .cbcBad
   366 000044A6 740D                <1>     jz .cbcxchg ;Function 2
   367 000044A8 52                  <1>     push rdx
   368 000044A9 80E201              <1>     and dl, 1   ;Get only the bottom bit
   369 000044AC 8815(94C30300)      <1>     mov byte [breakFlag], dl    ;Set the state
   370 000044B2 5A                  <1>     pop rdx
   371 000044B3 48CF                <1>     iretq
   372                              <1> .cbcxchg:
   373 000044B5 80E201              <1>     and dl, 1
   374 000044B8 8615(94C30300)      <1>     xchg byte [breakFlag], dl
   375 000044BE 48CF                <1>     iretq
   376                              <1> .cbcBad:
   377 000044C0 B0FF                <1>     mov al, -1
   378 000044C2 48CF                <1>     iretq
   379                              <1> 
   380                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   381 000044C4 48891D(81C30300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   382 000044CB 48CF                <1>     iretq
   383                              <1> 
   384                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   385 000044CD 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   386 000044D4 48CF                <1>     iretq
   387                              <1> 
   388                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   389 000044D6 488B15(81C30300)    <1>     mov rdx, qword [currentPSP]
   390 000044DD 48CF                <1>     iretq
   391                              <1> 
   392                              <1> setDriverLookahead:;ah = 64h, reserved
   393 000044DF 48CF                <1>     iretq
   394                              <1> 
   395                              <1> ;========================================:
   396                              <1> ;            Kernel Functions            :
   397                              <1> ;========================================:
   398                              <1> diskReset:         ;ah = 0Dh
   399                              <1> ;Flush all dirty buffers to disk
   400 000044E1 E8B2FEFFFF          <1>     call dosCrit1Enter
   401 000044E6 488B3D(55C00300)    <1>     mov rdi, qword [bufHeadPtr]
   402                              <1> .drCheckBuffer:
   403 000044ED F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   404 000044F1 7407                <1>     jz .drGotoNextBuffer
   405                              <1> .drFlushBuffer:
   406 000044F3 E887C3FFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   407 000044F8 720C                <1>     jc .drExit
   408                              <1> .drGotoNextBuffer:
   409 000044FA 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   410 000044FD 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   411 00004504 75E7                <1>     jne .drCheckBuffer
   412                              <1> .drExit:
   413 00004506 E897FEFFFF          <1>     call dosCrit1Exit
   414 0000450B B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   415 00004510 CD4F                <1>     int 4fh
   416                              <1>     return
    18                              <2> %%_ret:
    19 00004512 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   417                              <1> 
   418                              <1> selectDisk:        ;ah = 0Eh
   419                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   420 00004513 88D0                <1>     mov al, dl
   421 00004515 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   422 00004517 E87DFAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   423 0000451C 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   424 0000451E 8805(93C30300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   425                              <1> .skipSettingCurrent:
   426 00004524 0FB605(70C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   427                              <1>     return
    18                              <2> %%_ret:
    19 0000452B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   428                              <1> 
   429                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   430 0000452C 8A05(93C30300)      <1>     mov al, byte [currentDrv]
   431                              <1>     return
    18                              <2> %%_ret:
    19 00004532 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   432                              <1> 
   433                              <1> FATinfoDefault:    ;ah = 1Bh
   434 00004533 30D2                <1>     xor dl, dl
   435                              <1> FATinfoDevice:     ;ah = 1Ch
   436                              <1> ;Input: dl = 1 based drive number
   437                              <1> ;Output:
   438                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   439                              <1> ;cx = bytes per sector
   440                              <1> ;edx = total number of clusters
   441                              <1> ;rbx = Ptr to media ID byte
   442 00004535 88D0                <1>     mov al, dl  ;Move drive number into al
   443 00004537 E8C6FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   444 0000453C 7307                <1>     jnc .fidCDSFound
   445 0000453E B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   446 00004543 EB2E                <1>     jmp short .error 
   447                              <1> .fidCDSFound:
   448 00004545 E8D9F9FFFF          <1>     call getDiskData
   449 0000454A 7227                <1>     jc .error
   450                              <1> ;Now we have that:
   451                              <1> ;al = sectors per cluster
   452                              <1> ;ah = media ID byte
   453                              <1> ;ebx = total clusters
   454                              <1> ;cx = bytes per sector
   455                              <1> ;edx = number of available clusters
   456 0000454C E824FAFFFF          <1>     call getUserRegs
   457 00004551 8825(E7C60300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   458 00004557 30E4                <1>     xor ah, ah
   459 00004559 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   460 0000455C 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   461 00004560 488D1D(E7C60300)    <1>     lea rbx, mediaByte
   462 00004567 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   463 0000456B 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   464                              <1> .badExit:
   465 0000456F 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   466                              <1>     return
    18                              <2> %%_ret:
    19 00004572 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   467                              <1> .error:
   468 00004573 E85FFEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   469 00004578 66B8FFFF            <1>     mov ax, -1
   470 0000457C EBF1                <1>     jmp short .badExit
   471                              <1> 
   472                              <1> setIntVector:      ;ah = 25h
   473                              <1> ;Called with:
   474                              <1> ;   rdx = Pointer to interrupt handler
   475                              <1> ;   al = Interrupt number
   476 0000457E 50                  <1>     push rax    ;Preserve all registers in call
   477 0000457F 51                  <1>     push rcx
   478 00004580 52                  <1>     push rdx
   479 00004581 56                  <1>     push rsi
   480 00004582 55                  <1>     push rbp
   481 00004583 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   482 00004585 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   483                              <1> ;First call to get default BIOS segement selector and attribute word
   484 0000458B 88C3                <1>     mov bl, al  ;Set interrupt number 
   485 0000458D B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   486 00004592 CD35                <1>     int 35h
   487 00004594 E8DCF9FFFF          <1>     call getUserRegs
   488 00004599 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   489 0000459D 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   490 0000459F 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   491                              <1> ;dx preserves the attribute word
   492 000045A1 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   493 000045A6 CD35                <1>     int 35h
   494 000045A8 5D                  <1>     pop rbp
   495 000045A9 5E                  <1>     pop rsi
   496 000045AA 5A                  <1>     pop rdx
   497 000045AB 59                  <1>     pop rcx
   498 000045AC 58                  <1>     pop rax
   499                              <1>     return
    18                              <2> %%_ret:
    19 000045AD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   500                              <1> 
   501                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   502 000045AE 8805(32C30300)      <1>     mov byte [verifyFlag], al
   503 000045B4 8025(32C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   504                              <1>     return
    18                              <2> %%_ret:
    19 000045BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   505                              <1> getDOSversion:     ;ah = 30h
   506 000045BC E8B4F9FFFF          <1>     call getUserRegs
   507 000045C1 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   508 000045C3 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   509 000045C6 668B0533BAFFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   510 000045CD 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   511                              <1>     return
    18                              <2> %%_ret:
    19 000045D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   514                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   515 000045D1 30D2                <1>     xor dl, dl
   516                              <1> getDeviceDPBptr:   ;ah = 32h
   517                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   518                              <1> ;On exit: rbx = DPB pointer
   519 000045D3 88D0                <1>     mov al, dl
   520 000045D5 E828FAFFFF          <1>     call getCDS
   521 000045DA 722C                <1>     jc .bad
   522 000045DC 488B3D(6CC60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   523 000045E3 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   524 000045E9 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   525                              <1>     ;Here ONLY if accessing critical Disk data structures
   526 000045EB E8A8FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   527 000045F0 E8D1F6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   528 000045F5 E8A8FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   529 000045FA 720C                <1>     jc .bad
   530 000045FC E874F9FFFF          <1>     call getUserRegs
   531 00004601 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   532 00004605 30C0                <1>     xor al, al
   533                              <1>     return
    18                              <2> %%_ret:
    19 00004607 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   534                              <1> .bad:
   535 00004608 B0FF                <1>     mov al, -1
   536                              <1>     return
    18                              <2> %%_ret:
    19 0000460A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   537                              <1> 
   538                              <1> getInDOSflagPtr:   ;ah = 34h
   539 0000460B 488D15(6AC30300)    <1>     lea rdx, inDOS
   540 00004612 E85EF9FFFF          <1>     call getUserRegs
   541 00004617 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   542                              <1>     return
    18                              <2> %%_ret:
    19 0000461B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   543                              <1> 
   544                              <1> getIntVector:      ;ah = 35h
   545                              <1> ;Called with:
   546                              <1> ;   al = Interrupt Number
   547                              <1> ;Returns:
   548                              <1> ;   rbx = Pointer to interrupt handler
   549 0000461C E846F9FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   550 00004621 E84FF9FFFF          <1>     call getUserRegs
   551 00004626 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   552 0000462A 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   553                              <1>     return
    18                              <2> %%_ret:
    19 0000462C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   554                              <1> 
   555                              <1> getDiskFreeSpace:  ;ah = 36h
   556                              <1> ;Input: Drive number in dl (0 = Current)
   557                              <1> ;Output:    ax = sectors per cluster
   558                              <1> ;           ebx = number of free clusters
   559                              <1> ;           cx = bytes per sector
   560                              <1> ;           edx = total clusters on drive
   561 0000462D 88D0                <1>     mov al, dl
   562 0000462F E8CEF9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   563 00004634 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   564                              <1> ;Else, we at an error.
   565                              <1> ;Simply return with CY set and error code in al with extended error info
   566 00004636 B80F000000          <1>     mov eax, errBadDrv
   567 0000463B E897FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   568                              <1>     ;extErrExit sets rsi to caller regs
   569 00004640 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   570                              <1>     return
    18                              <2> %%_ret:
    19 00004645 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   571                              <1> .gdfsCDSFound:
   572 00004646 E8D8F8FFFF          <1>     call getDiskData
   573 0000464B 7219                <1>     jc .error
   574                              <1> ;Now we have that:
   575                              <1> ;al = sectors per cluster
   576                              <1> ;ah = media ID byte
   577                              <1> ;ebx = total clusters
   578                              <1> ;cx = bytes per sector
   579                              <1> ;edx = number of available clusters
   580 0000464D E823F9FFFF          <1>     call getUserRegs
   581 00004652 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   582 00004654 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   583 00004657 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   584 0000465B 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   585 0000465E 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   586                              <1> .badExit:
   587 00004662 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   588                              <1>     return
    18                              <2> %%_ret:
    19 00004665 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   589                              <1> .error:
   590 00004666 E86CFDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   591 0000466B 66B8FFFF            <1>     mov ax, -1
   592 0000466F EBF1                <1>     jmp short .badExit
   593                              <1> 
   594                              <1> 
   595                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   596 00004671 31C0                <1>     xor eax, eax
   597 00004673 668705(91C30300)    <1>     xchg ax, word [errorLevel]
   598 0000467A E94AFDFFFF          <1>     jmp extGoodExit
   599                              <1> 
   600                              <1> getSysVarsPtr:     ;ah = 52h
   601 0000467F 488D15(33C00300)    <1>     lea rdx, sysVarsPtr
   602 00004686 E8EAF8FFFF          <1>     call getUserRegs
   603 0000468B 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   604                              <1>     return
    18                              <2> %%_ret:
    19 0000468F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   605                              <1> 
   606                              <1> 
   607                              <1> ;AH = 53h - CREATE DPB
   608                              <1> createDPB:         ;generates a DPB from a given BPB
   609                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   610                              <1> ;This is done so that the other fields of the DPB can be recycled
   611                              <1> ;Input: rsi = ptr to the BPB
   612                              <1> ;       rbp = ptr to the DPB
   613                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   614                              <1> ;bMediaDescriptor
   615 00004690 8A4615              <1>     mov al, byte [rsi + bpb.media]
   616 00004693 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   617                              <1> ;dFirstFreeCluster
   618 00004696 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   619                              <1> ;dNumberOfFreeClusters
   620 0000469D C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   621                              <1> ;wBytesPerSector
   622 000046A4 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   623 000046A8 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   624                              <1> ;bMaxSectorInCluster
   625 000046AC 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   626 000046AF FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   627 000046B1 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   628                              <1> ;bSectorsPerClusterShift
   629 000046B4 FEC0                <1>     inc al
   630 000046B6 30C9                <1>     xor cl, cl
   631                              <1> .cd2:
   632 000046B8 D0E8                <1>     shr al, 1
   633 000046BA 7404                <1>     jz .cd3
   634 000046BC FEC1                <1>     inc cl
   635 000046BE EBF8                <1>     jmp short .cd2
   636                              <1> .cd3:
   637 000046C0 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   638                              <1> ;wFAToffset, number of reserved sectors in partition
   639 000046C3 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   640 000046C7 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   641                              <1> ;bNumberOfFATs
   642 000046CB 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   643 000046CE 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   644                              <1> ;wNumberRootDirEntries
   645                              <1> ;Gets the number of 32 byte entries in the root directory
   646                              <1> ;Only valid for FAT 12/16
   647 000046D1 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   648 000046D5 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   649                              <1> ;dFATlength, get the FAT length
   650 000046D9 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   651 000046DD 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   652 000046E0 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   653 000046E2 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   654 000046E5 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   655                              <1> ;Complex cases below...
   656                              <1> ;dClusterHeapOffset, start sector of the data area
   657 000046E8 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   658 000046EC 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   659 000046EF 85C0                <1>     test eax, eax
   660 000046F1 0F44C3              <1>     cmovz eax, ebx
   661                              <1> ;eax = FATsz
   662 000046F4 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   663 000046F8 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   664 000046FB 85DB                <1>     test ebx, ebx
   665 000046FD 0F44D9              <1>     cmovz ebx, ecx 
   666                              <1> ;ebx = TotSec
   667 00004700 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   668 00004703 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   669                              <1> .cd4:
   670 00004705 01C2                <1>     add edx, eax
   671 00004707 FEC9                <1>     dec cl
   672 00004709 75FA                <1>     jnz .cd4
   673 0000470B 89D0                <1>     mov eax, edx    ;Store product in eax
   674 0000470D 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   675 00004711 01D0                <1>     add eax, edx
   676                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   677 00004713 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   678 00004717 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   679 0000471A 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   680 0000471E 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   681 0000471F 89D0                <1>     mov eax, edx
   682 00004721 31D2                <1>     xor edx, edx
   683 00004723 F7F1                <1>     div ecx
   684 00004725 89C2                <1>     mov edx, eax
   685 00004727 58                  <1>     pop rax
   686 00004728 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   687                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   688                              <1>     ;aka eax = Start sector of the data area in volume
   689 0000472A 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   690                              <1> ;dClusterCount
   691 0000472D 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   692 0000472F 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   693 00004731 31D2                <1>     xor edx, edx
   694 00004733 BB01000000          <1>     mov ebx, 1
   695 00004738 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   696 0000473B D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   697 0000473D F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   698 0000473F FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   699 00004741 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   700                              <1> ;dFirstUnitOfRootDir
   701 00004744 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   702 00004749 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   703 0000474C 770F                <1>     ja .cd5
   704                              <1>     ;Else, we need to find the first sector of the root directory
   705                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   706 0000474E 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   707 00004752 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   708                              <1> .cd51:
   709 00004756 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   710 00004759 FFC9                <1>     dec ecx
   711 0000475B 75F9                <1>     jnz .cd51
   712                              <1> .cd5:
   713 0000475D 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   714                              <1> ;Exit epilogue
   715 00004760 488B1D(DCC30300)    <1>     mov rbx, qword [oldRSP]
   716 00004767 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   717                              <1>     %if DEBUG && DPBINFO
   718                              <1>     ;Print DPB 
   719                              <1>     debugEnterM
   720                              <1>     push rbp
   721                              <1>     lea rbp, .l0000
   722                              <1>     call debPrintNullString
   723                              <1>     pop rbp
   724                              <1>     call debDPBBPBptr
   725                              <1>     call debMakeDebuggerRespond
   726                              <1>     jmp short .l0001
   727                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   728                              <1> .l0001:
   729                              <1>     debugExitM
   730                              <1>     %endif
   731                              <1>     return
    18                              <2> %%_ret:
    19 00004769 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> getVerifySetting:  ;ah = 54h
   734 0000476A 8A05(32C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   735                              <1>     return
    18                              <2> %%_ret:
    19 00004770 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   736                              <1> 
   737                              <1> getExtendedError:  ;ah = 59h
   738 00004771 E8FFF7FFFF          <1>     call getUserRegs
   739 00004776 668B05(6DC30300)    <1>     mov ax, word [errorExCde]
   740 0000477D 8A2D(6CC30300)      <1>     mov ch, byte [errorLocus]
   741 00004783 8A3D(70C30300)      <1>     mov bh, byte [errorClass]
   742 00004789 8A1D(6FC30300)      <1>     mov bl, byte [errorAction]
   743 0000478F 668906              <1>     mov word [rsi + callerFrame.rax], ax
   744 00004792 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   745 00004796 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   746                              <1>     return
    18                              <2> %%_ret:
    19 00004799 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   747                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   748                              <1> noOp:
   749                              <1>     return
    18                              <2> %%_ret:
    19 0000479A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    38                                  %include "./Source/Kernel/Net/server.asm"
    39                              <1> ;Network functions here
    40                              <1> 
    41                              <1> dosServer:  ;ah = 5Dh
    42                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    43                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    44                              <1> ;   rdx = Pointer to DPL
    45 0000479B 3C07                <1>     cmp al, 07h
    46 0000479D 7204                <1>     jb .skip
    47 0000479F 3C09                <1>     cmp al, 09h
    48 000047A1 7619                <1>     jbe .skip2
    49                              <1> .skip:
    50 000047A3 4889D6              <1>     mov rsi, rdx
    51 000047A6 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    52 000047AA 66891D(A5C30300)    <1>     mov word [machineNum], bx
    53 000047B1 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    54 000047B5 48891D(9DC30300)    <1>     mov qword [serverPSP], rbx
    55                              <1>     
    56                              <1> .skip2:
    57                              <1> serverDispatch: ;AX=5D00h
    58                              <1> ;Input: rsi points to the DOS parameter list
    59 000047BC 58                  <1>     pop rax
    60 000047BD 56                  <1>     push rsi    ;Put dpl ptr in rdi
    61 000047BE 5F                  <1>     pop rdi
    62 000047BF E8B1F7FFFF          <1>     call getUserRegs
    63 000047C4 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    64 000047C7 56                  <1>     push rsi
    65 000047C8 B906000000          <1>     mov ecx, 6
    66 000047CD F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    67 000047D0 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    68 000047D7 48A5                <1>     movsq   ;Transfer r8...
    69 000047D9 48A5                <1>     movsq   ;... and r9
    70 000047DB 5E                  <1>     pop rsi
    71 000047DC 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    72 000047DF 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    73 000047E3 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    74 000047E7 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    75 000047EB 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    76 000047EF 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    77 000047F3 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    78 000047F7 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    79 000047FB 48891D(E4C30300)    <1>     mov qword [oldRBX], rbx
    80 00004802 C605(5CC60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    81 00004809 E98BFAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    82                              <1> 
    83                              <1> 
    84                              <1> netServices:   ;ah = 5Eh, do nothing
    85                              <1> netRedir:;ah = 5Fh, do nothing
    86                              <1>     return
    18                              <2> %%_ret:
    19 0000480E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    39                                  %include "./Source/Kernel/Net/multiplx.asm"
    40                              <1> ;Default multiplexer. Current only installed function is ah=12h
    41                              <1> 
    42                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    43 0000480F 80FC12              <1>     cmp ah, 12h
    44 00004812 751C                <1>     jne .exit       ;Exit if not for us
    45 00004814 3C05                <1>     cmp al, mDispTblL / 2
    46 00004816 7318                <1>     jae .exit   ;If above or equal, exit
    47 00004818 53                  <1>     push rbx
    48 00004819 51                  <1>     push rcx
    49 0000481A 31C9                <1>     xor ecx, ecx
    50 0000481C 488D1D81BBFFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    51 00004823 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    52 00004825 D1E1                <1>     shl ecx, 1   ;multiply by 2
    53 00004827 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    54 0000482A FFD3                <1>     call rbx
    55 0000482C 59                  <1>     pop rcx
    56 0000482D 5B                  <1>     pop rbx
    57 0000482E 48CF                <1>     iretq
    58                              <1> .exit:
    59 00004830 804C241001          <1>     or byte [rsp + 8h*2], 1
    60 00004835 48CF                <1>     iretq
    61                              <1> multiplexTest:
    62 00004837 B0FF                <1>     mov al, -1
    63 00004839 C3                  <1>     ret
    64                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    65                              <1> ;Return: r8 = Dos Data Segment Pointer
    66 0000483A 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    67                              <1>     return
    18                              <2> %%_ret:
    19 00004841 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    40                                  %include "./Source/Misc/int44h.asm"
    41                              <1> critErrorHandler:   ;Int 44h
    42                              <1> ;User Stack in usage here, must be swapped to before this is called
    43                              <1> ;Entered with:  
    44                              <1> ;               AH = Critical Error Bitfield
    45                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    46                              <1> ;               Bit 6 - Reserved
    47                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    48                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    49                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    50                              <1> ;               Bits [2-1] = Affected Disk Error
    51                              <1> ;                     0 0   DOS area
    52                              <1> ;                     0 1   FAT area
    53                              <1> ;                     1 0   Directory area
    54                              <1> ;                     1 1   Data area
    55                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    56                              <1> ;               AL  = Failing drive number if AH[7] = 0
    57                              <1> ;               DIL = Error code for errorMsg
    58                              <1> ;               RSI = EA of Device Header for which device the error occured
    59                              <1> ;Return:
    60                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    61                              <1> ;                  = 1 - Retry the Operation    (Retry)
    62                              <1> ;                  = 2 - Terminate the Program  (Abort)
    63                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    64 00004842 53                  <1>     push rbx
    65 00004843 51                  <1>     push rcx
    66 00004844 52                  <1>     push rdx
    67 00004845 57                  <1>     push rdi
    68 00004846 56                  <1>     push rsi
    69 00004847 FC                  <1>     cld         ;Make String ops go forward
    70                              <1> 
    71 00004848 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    72 0000484B 488D155E020000      <1>     lea rdx, qword [.crlf]
    73 00004852 B409                <1>     mov ah, 09h ;Print String
    74 00004854 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    75                              <1> 
    76 00004856 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    77 0000485C B90C000000          <1>     mov ecx, 0Ch
    78 00004861 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    79 00004863 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    80 00004866 480FB7FF            <1>     movzx rdi, di
    81 0000486A 4889FA              <1>     mov rdx, rdi    ;Copy error code
    82 0000486D 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    83 00004871 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    84 00004874 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    85 00004877 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    86 0000487E 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    87 00004882 B409                <1>     mov ah, 09h ;Print String
    88 00004884 CD41                <1>     int 41h     ;Call DOS to print first part of message
    89                              <1> 
    90 00004886 488D1505020000      <1>     lea rdx, qword [.readmsg]
    91 0000488D 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    92 00004894 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    93 00004897 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    94 0000489B B409                <1>     mov ah, 09h ;Print String
    95 0000489D CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    96                              <1> 
    97 0000489F F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    98 000048A2 0F85DF000000        <1>     jnz .charError
    99                              <1> ;Disk error continues here
   100 000048A8 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
   101 000048AF B409                <1>     mov ah, 09h
   102 000048B1 CD41                <1>     int 41h
   103 000048B3 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
   104 000048B5 80C241              <1>     add dl, "A" ;Add ASCII code
   105 000048B8 B402                <1>     mov ah, 02h ;Print char in dl
   106 000048BA CD41                <1>     int 41h
   107                              <1> .userInput:
   108 000048BC 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   109 000048C3 B409                <1>     mov ah, 09h
   110 000048C5 CD41                <1>     int 41h
   111                              <1> ;Abort, Retry, Ignore, Fail is word order
   112                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   113                              <1> .userAbort:
   114                              <1> ;Abort is always an option
   115 000048C7 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   116 000048CE B409                <1>     mov ah, 09h
   117 000048D0 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   118                              <1> .userRetry:
   119 000048D2 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   120 000048D5 7416                <1>     jz .userIgnore    ;If clear, dont print message
   121 000048D7 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   122 000048DE B409                <1>     mov ah, 09h
   123 000048E0 CD41                <1>     int 41h
   124 000048E2 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   125 000048E9 B409                <1>     mov ah, 09h
   126 000048EB CD41                <1>     int 41h
   127                              <1> .userIgnore:
   128 000048ED F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   129 000048F0 7416                <1>     jz .userFail
   130 000048F2 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   131 000048F9 B409                <1>     mov ah, 09h
   132 000048FB CD41                <1>     int 41h
   133 000048FD 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   134 00004904 B409                <1>     mov ah, 09h
   135 00004906 CD41                <1>     int 41h
   136                              <1> .userFail:
   137 00004908 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   138 0000490B 7416                <1>     jz .userMsgEnd
   139 0000490D 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   140 00004914 B409                <1>     mov ah, 09h
   141 00004916 CD41                <1>     int 41h
   142 00004918 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   143 0000491F B409                <1>     mov ah, 09h
   144 00004921 CD41                <1>     int 41h
   145                              <1> .userMsgEnd:
   146 00004923 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   147 0000492A B409                <1>     mov ah, 09h
   148 0000492C CD41                <1>     int 41h
   149                              <1> ;Get user input now 
   150 0000492E 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   151 00004930 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   152 00004937 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   153 00004939 CD41                <1>     int 41h ;Get char in al
   154 0000493B 3C61                <1>     cmp al, "a" ;Chack if lowercase
   155 0000493D 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   156 0000493F 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   157                              <1> .uip1:
   158 00004941 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   159 00004942 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   160 00004944 FFC1                <1>     inc ecx
   161 00004946 81F904000000        <1>     cmp ecx, 4
   162 0000494C 75F3                <1>     jne .uip1
   163 0000494E E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   164                              <1> .validInput:
   165 00004953 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   166                              <1> ;Now check if the input is permitted
   167 00004955 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   168 00004957 7427                <1>     je .cehExit
   169 00004959 84C0                <1>     test al, al ;Check if 0 => Ignore
   170 0000495B 740F                <1>     je .viIgnore
   171 0000495D 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   172 0000495F 7416                <1>     je .viRetry
   173                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   174 00004961 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   175 00004964 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   176 0000496A EB14                <1>     jmp short .cehExit
   177                              <1> .viIgnore:
   178 0000496C F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   179 0000496F 0F8447FFFFFF        <1>     jz .userInput
   180 00004975 EB09                <1>     jmp short .cehExit
   181                              <1> .viRetry:
   182 00004977 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   183 0000497A 0F843CFFFFFF        <1>     jz .userInput
   184                              <1> .cehExit:
   185 00004980 5E                  <1>     pop rsi
   186 00004981 5F                  <1>     pop rdi
   187 00004982 5A                  <1>     pop rdx
   188 00004983 59                  <1>     pop rcx
   189 00004984 5B                  <1>     pop rbx
   190 00004985 48CF                <1>     iretq
   191                              <1> .charError:
   192 00004987 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   193 0000498C 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   194                              <1> .ce1:
   195 00004993 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   196 00004994 88C2                <1>     mov dl, al  ;Move char into dl
   197 00004996 B402                <1>     mov ah, 02h
   198 00004998 CD41                <1>     int 41h ;Print char
   199 0000499A E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   200 0000499C E91BFFFFFF          <1>     jmp .userInput
   201                              <1> 
   202                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   203 000049A1 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   203 000049AA 746563742024202020  <1>
   204 000049B3 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   204 000049BC 6E6974202420202020  <1>
   205 000049C5 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   205 000049CE 202420202020202020  <1>
   206 000049D7 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   206 000049E0 6F6D6D616E64202420  <1>
   207 000049E9 446174612024202020- <1>             db "Data $            "       ;Error 4
   207 000049F2 202020202020202020  <1>
   208 000049FB 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   208 00004A04 737420242020202020  <1>
   209 00004A0D 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   209 00004A16 202020202020202020  <1>
   210 00004A1F 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   210 00004A28 656469612024202020  <1>
   211 00004A31 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   211 00004A3A 7420466F756E642024  <1>
   212 00004A43 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   212 00004A4C 706572202420202020  <1>
   213 00004A55 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   213 00004A5E 6C7420242020202020  <1>
   214 00004A67 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   214 00004A70 742024202020202020  <1>
   215 00004A79 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   215 00004A82 61696C757265202420  <1>
   216                              <1> 
   217 00004A8B 64726976652024      <1> .drive      db "drive $"
   218 00004A92 6572726F7220726561- <1> .readmsg    db "error reading $"
   218 00004A9B 64696E672024        <1>
   219 00004AA1 6572726F7220777269- <1> .writemsg   db "error writing $"
   219 00004AAA 74696E672024        <1>
   220 00004AB0 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   221 00004AB3 41626F727424        <1> .abortmsg   db "Abort$" 
   222 00004AB9 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   223 00004AC0 526574727924        <1> .retrymsg   db "Retry$"
   224 00004AC6 4661696C24          <1> .failmsg    db "Fail$"
   225 00004ACB 2C2024              <1> .betweenMsg db ", $"
   226 00004ACE 3F2024              <1> .endMsg     db "? $"
   227 00004AD1 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    41                                  %include "./Source/Drivers/drvData.asm"
    42                              <1> ;-----------------------------------:
    43                              <1> ;          Driver routines          :
    44                              <1> ;-----------------------------------:
    45                              <1> drivers:
    46                              <1> conHdr:
    47 00004AD5 [F74A000000000000]  <1>     dq auxHdr
    48 00004ADD 1380                <1>     dw 08013h
    49 00004ADF [754C000000000000]  <1>     dq commonStrat
    50 00004AE7 [844C000000000000]  <1>     dq conDriver
    51 00004AEF 434F4E2020202020    <1>     db "CON     "
    52                              <1> auxHdr:
    53 00004AF7 [194B000000000000]  <1>     dq prnHdr
    54 00004AFF 0080                <1>     dw 08000h
    55 00004B01 [754C000000000000]  <1>     dq commonStrat
    56 00004B09 [394F000000000000]  <1>     dq com1Intr
    57 00004B11 4155582020202020    <1>     db "AUX     "
    58                              <1> prnHdr:
    59 00004B19 [3B4B000000000000]  <1>     dq clkHdr
    60 00004B21 40A0                <1>     dw 0A040h
    61 00004B23 [7D4C000000000000]  <1>     dq nulStrat
    62 00004B2B [834C000000000000]  <1>     dq nulIntr
    63 00004B33 50524E2020202020    <1>     db "PRN     "
    64                              <1> clkHdr:
    65 00004B3B [5D4B000000000000]  <1>     dq msdHdr
    66 00004B43 0880                <1>     dw 08008h
    67 00004B45 [754C000000000000]  <1>     dq commonStrat
    68 00004B4D [D14D000000000000]  <1>     dq clkDriver
    69 00004B55 434C4F434B242020    <1>     db "CLOCK$  "
    70                              <1> msdHdr:
    71 00004B5D [7F4B000000000000]  <1>     dq com1Hdr
    72 00004B65 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    73 00004B67 [754C000000000000]  <1>     dq commonStrat
    74 00004B6F [DE50000000000000]  <1>     dq msdDriver
    75 00004B77 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    76                              <1> com1Hdr:
    77 00004B7F [A14B000000000000]  <1>     dq com2Hdr
    78 00004B87 0080                <1>     dw 08000h
    79 00004B89 [754C000000000000]  <1>     dq commonStrat
    80 00004B91 [394F000000000000]  <1>     dq com1Intr
    81 00004B99 434F4D3120202020    <1>     db "COM1    "
    82                              <1> com2Hdr:
    83 00004BA1 [C34B000000000000]  <1>     dq com3Hdr
    84 00004BA9 0080                <1>     dw 08000h
    85 00004BAB [754C000000000000]  <1>     dq commonStrat
    86 00004BB3 [424F000000000000]  <1>     dq com2Intr
    87 00004BBB 434F4D3220202020    <1>     db "COM2    "
    88                              <1> com3Hdr:
    89 00004BC3 [E54B000000000000]  <1>     dq com4Hdr
    90 00004BCB 0080                <1>     dw 08000h
    91 00004BCD [754C000000000000]  <1>     dq commonStrat
    92 00004BD5 [4B4F000000000000]  <1>     dq com3Intr
    93 00004BDD 434F4D3320202020    <1>     db "COM3    "
    94                              <1> com4Hdr:
    95 00004BE5 [074C000000000000]  <1>     dq lpt1Hdr
    96 00004BED 0080                <1>     dw 08000h
    97 00004BEF [754C000000000000]  <1>     dq commonStrat
    98 00004BF7 [544F000000000000]  <1>     dq com4Intr
    99 00004BFF 434F4D3420202020    <1>     db "COM4    "
   100                              <1> lpt1Hdr:
   101 00004C07 [294C000000000000]  <1>     dq lpt2Hdr
   102 00004C0F 40A0                <1>     dw 0A040h
   103 00004C11 [7D4C000000000000]  <1>     dq nulStrat
   104 00004C19 [834C000000000000]  <1>     dq nulIntr
   105 00004C21 4C50543120202020    <1>     db "LPT1    "
   106                              <1> lpt2Hdr:
   107 00004C29 [4B4C000000000000]  <1>     dq lpt3Hdr
   108 00004C31 40A0                <1>     dw 0A040h
   109 00004C33 [7D4C000000000000]  <1>     dq nulStrat
   110 00004C3B [834C000000000000]  <1>     dq nulIntr
   111 00004C43 4C50543220202020    <1>     db "LPT2    "
   112                              <1> lpt3Hdr:
   113 00004C4B FFFFFFFFFFFFFFFF    <1>     dq -1
   114 00004C53 40A0                <1>     dw 0A040h
   115 00004C55 [7D4C000000000000]  <1>     dq nulStrat
   116 00004C5D [834C000000000000]  <1>     dq nulIntr
   117 00004C65 4C50543320202020    <1>     dq "LPT3    "
   118 00004C6D 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    42                                  %include "./Source/Drivers/charDrv.asm"
    43                              <1> commonStrat:
    44                              <1> ;DOS calls this function with rbx=Ptr to request header
    45 00004C75 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    46 00004C7C C3                  <1>     ret
    47                              <1> nulStrat:
    48 00004C7D 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    49                              <1> nulIntr:
    50 00004C83 C3                  <1>     ret
    51                              <1> conDriver:
    52 00004C84 50                  <1>     push rax
    53 00004C85 53                  <1>     push rbx
    54 00004C86 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    55 00004C8D B003                <1>     mov al, 03h ;Unknown Command
    56 00004C8F 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    57 00004C93 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    58                              <1> 
    59 00004C95 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    60 00004C98 3C04                <1>     cmp al, 4
    61 00004C9A 7441                <1>     jz .conRead
    62 00004C9C 3C05                <1>     cmp al, 5
    63 00004C9E 0F847F000000        <1>     jz .conNondestructiveRead
    64 00004CA4 3C06                <1>     cmp al, 6
    65 00004CA6 0F84A8000000        <1>     jz .conInputStatus
    66 00004CAC 3C07                <1>     cmp al, 7
    67 00004CAE 0F84B0000000        <1>     jz .conFlushInputBuffers
    68 00004CB4 3C08                <1>     cmp al, 8
    69 00004CB6 0F84CA000000        <1>     jz .conWrite
    70 00004CBC 3C09                <1>     cmp al, 9
    71 00004CBE 0F84C2000000        <1>     jz .conWrite
    72 00004CC4 3C0A                <1>     cmp al, 0Ah
    73 00004CC6 0F84E3000000        <1>     jz .conOutputStatus
    74 00004CCC EB06                <1>     jmp short .conExit  ;All other valid functions return done
    75                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    76 00004CCE B480                <1>     mov ah, 80h ;Set error bit
    77 00004CD0 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    78                              <1> .conExit:
    79 00004CD4 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    80 00004CDA 5B                  <1>     pop rbx
    81 00004CDB 58                  <1>     pop rax
    82 00004CDC C3                  <1>     ret
    83                              <1> .conRead:    ;Function 4
    84 00004CDD B005                <1>     mov al, 05h ;Bad request structure length?
    85 00004CDF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    86 00004CE2 75EA                <1>     jne .conWriteErrorCode
    87                              <1> 
    88 00004CE4 57                  <1>     push rdi
    89 00004CE5 51                  <1>     push rcx
    90 00004CE6 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    91 00004CEA 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    92                              <1> .cre1:
    93 00004CEC 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    94 00004CEF 741C                <1>     je .cre2
    95 00004CF1 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    96 00004CF8 751A                <1>     jnz .cre3   ;No, get the buffer value
    97 00004CFA 31C0                <1>     xor eax, eax
    98 00004CFC CD36                <1>     int 36h
    99                              <1> .cre11:
   100 00004CFE AA                  <1>     stosb
   101 00004CFF 84C0                <1>     test al, al ;Was the ascii code stored 0?
   102 00004D01 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   103 00004D03 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   104                              <1> .cre12:
   105 00004D09 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   106 00004D0B EBDF                <1>     jmp short .cre1
   107                              <1> .cre2:
   108 00004D0D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   109 00004D10 59                  <1>     pop rcx
   110 00004D11 5F                  <1>     pop rdi
   111 00004D12 EBC0                <1>     jmp short .conExit
   112                              <1> .cre3:
   113 00004D14 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   114 00004D1A C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   115 00004D21 EBDB                <1>     jmp short .cre11
   116                              <1> 
   117                              <1> .conNondestructiveRead:  ;Function 5
   118 00004D23 B005                <1>     mov al, 05h ;Bad request structure length?
   119 00004D25 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   120 00004D28 75A4                <1>     jne .conWriteErrorCode
   121 00004D2A 803D8E00000000      <1>     cmp byte [.conBuf], 0
   122 00004D31 7519                <1>     jnz .cnr2
   123 00004D33 B401                <1>     mov ah, 01h     ;Get key if exists
   124 00004D35 CD36                <1>     int 36h
   125 00004D37 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   126                              <1>     ;Keystroke available
   127                              <1> .cnr0:
   128 00004D39 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   129 00004D3C E993FFFFFF          <1>     jmp .conExit
   130                              <1> .cnr1: ;No keystroke available
   131 00004D41 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   132 00004D47 E988FFFFFF          <1>     jmp .conExit
   133                              <1> .cnr2:
   134 00004D4C 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   135 00004D52 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   136                              <1> 
   137                              <1> .conInputStatus:         ;Function 6
   138 00004D54 B005                <1>     mov al, 05h ;Bad request structure length?
   139 00004D56 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   140 00004D59 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   141 00004D5F E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   142                              <1> 
   143                              <1> .conFlushInputBuffers:   ;Function 7
   144 00004D64 B005                <1>     mov al, 05h ;Bad request structure length?
   145 00004D66 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   146 00004D69 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   147 00004D6F C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   148                              <1> .cfib0:
   149 00004D76 B401                <1>     mov ah, 01      ;Get buffer status
   150 00004D78 CD36                <1>     int 36h
   151 00004D7A 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   152 00004D80 30E4                <1>     xor ah, ah
   153 00004D82 CD36                <1>     int 36h ;Read key to flush from buffer
   154 00004D84 EBF0                <1>     jmp short .cfib0
   155                              <1> 
   156                              <1> .conWrite:   ;Function 8 and 9
   157 00004D86 B005                <1>     mov al, 05h ;Bad request structure length?
   158 00004D88 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   159 00004D8B 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   160                              <1> 
   161 00004D91 56                  <1>     push rsi
   162 00004D92 51                  <1>     push rcx
   163 00004D93 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   164 00004D97 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   165                              <1> .cw1: 
   166 00004D99 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   167 00004D9C 7407                <1>     je .cw2
   168 00004D9E AC                  <1>     lodsb   ;Get char into al, and inc rsi
   169 00004D9F CD49                <1>     int 49h ;Fast print char
   170 00004DA1 FFC1                <1>     inc ecx
   171 00004DA3 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   172                              <1> .cw2:
   173 00004DA5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   174 00004DA8 59                  <1>     pop rcx
   175 00004DA9 5E                  <1>     pop rsi
   176 00004DAA E925FFFFFF          <1>     jmp .conExit
   177                              <1> .conOutputStatus:   ;Function 0Ah
   178 00004DAF B005                <1>     mov al, 05h ;Bad request structure length?
   179 00004DB1 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   180 00004DB4 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   181 00004DBA E915FFFFFF          <1>     jmp .conExit
   182                              <1> 
   183 00004DBF 00                  <1> .conBuf db 0    ;Single byte buffer
   184                              <1> fastOutput:         ;This CON driver supports Int 49h
   185                              <1> ;Called with char to transfer in al
   186 00004DC0 50                  <1>     push rax
   187 00004DC1 B40E                <1>     mov ah, 0Eh
   188 00004DC3 CD30                <1>     int 30h
   189 00004DC5 58                  <1>     pop rax
   190 00004DC6 48CF                <1>     iretq
   191                              <1> ctrlBreak:
   192                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   193 00004DC8 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   194 00004DCF 48CF                <1>     iretq
   195                              <1> 
   196                              <1> clkDriver:
   197 00004DD1 50                  <1>     push rax
   198 00004DD2 53                  <1>     push rbx
   199 00004DD3 51                  <1>     push rcx
   200 00004DD4 52                  <1>     push rdx
   201 00004DD5 56                  <1>     push rsi
   202 00004DD6 55                  <1>     push rbp
   203 00004DD7 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   204 00004DDE B003                <1>     mov al, 03h ;Unknown Command
   205 00004DE0 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   206 00004DE4 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   207                              <1> 
   208 00004DE6 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   209 00004DE9 3C04                <1>     cmp al, 04h
   210 00004DEB 7437                <1>     jz .clkRead
   211 00004DED 3C06                <1>     cmp al, 06h
   212 00004DEF 0F8494000000        <1>     jz .clkInputStatus
   213 00004DF5 3C07                <1>     cmp al, 07h
   214 00004DF7 0F8498000000        <1>     jz .clkFlushInputBuffers
   215 00004DFD 3C08                <1>     cmp al, 08h
   216 00004DFF 0F84A0000000        <1>     jz .clkWrite
   217 00004E05 3C09                <1>     cmp al, 09h
   218 00004E07 0F8498000000        <1>     jz .clkWrite
   219 00004E0D EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   220                              <1> .clkNotFunctioning:
   221 00004E0F B002                <1>     mov al, 02h ;Device not ready error
   222                              <1> .clkWriteErrorCode:
   223 00004E11 B480                <1>     mov ah, 80h ;Set error bit
   224 00004E13 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   225                              <1> .clkExit:
   226 00004E17 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   227 00004E1D 5D                  <1>     pop rbp
   228 00004E1E 5E                  <1>     pop rsi
   229 00004E1F 5A                  <1>     pop rdx
   230 00004E20 59                  <1>     pop rcx
   231 00004E21 5B                  <1>     pop rbx
   232 00004E22 58                  <1>     pop rax
   233 00004E23 C3                  <1>     ret
   234                              <1> 
   235                              <1> .clkRead:           ;Function 4
   236 00004E24 B005                <1>     mov al, 05h ;Bad request structure length?
   237 00004E26 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   238 00004E29 75E6                <1>     jne .clkWriteErrorCode
   239                              <1> 
   240 00004E2B 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   241 00004E2E 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   242 00004E32 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   243 00004E39 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   244 00004E3D 30E4                <1>     xor ah, ah
   245 00004E3F CD3A                <1>     int 3Ah         ;Read the system timer
   246 00004E41 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   247 00004E43 740D                <1>     jz .clkr1       ;Nope, now just time 
   248 00004E45 30E4                <1>     xor ah, ah
   249                              <1>     ;This works as al should keep count of the # of days passed since last read
   250 00004E47 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   251 00004E4B 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   252                              <1> .clkr1:
   253 00004E52 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   254 00004E55 0FB7D2              <1>     movzx edx, dx
   255 00004E58 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   256 00004E5A 89D0                <1>     mov eax, edx
   257 00004E5C 31D2                <1>     xor edx, edx
   258 00004E5E 89D8                <1>     mov eax, ebx
   259 00004E60 B944040000          <1>     mov ecx, 1092   
   260 00004E65 F7F1                <1>     div ecx
   261 00004E67 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   262 00004E6A 89D0                <1>     mov eax, edx    ;Get remainder in eax
   263 00004E6C 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   264 00004E70 31D2                <1>     xor edx, edx
   265 00004E72 B95B000000          <1>     mov ecx, 91 ;5*18.2
   266 00004E77 F7F1                <1>     div ecx
   267 00004E79 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   268 00004E7C 89D0                <1>     mov eax, edx    ;Get remainder in eax
   269                              <1>     ;lea eax, dword [eax + 4*eax]
   270                              <1>     ;add eax, edx    ;Essentially multiply by 6
   271 00004E7E 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   272 00004E81 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   273 00004E84 E98EFFFFFF          <1>     jmp .clkExit
   274                              <1> 
   275                              <1> .clkInputStatus:    ;Function 6
   276                              <1> ;Always return ready
   277 00004E89 B005                <1>     mov al, 05h ;Bad request structure length?
   278 00004E8B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   279 00004E8E 7581                <1>     jne .clkWriteErrorCode
   280 00004E90 E982FFFFFF          <1>     jmp .clkExit
   281                              <1> .clkFlushInputBuffers:  ;Function 7
   282                              <1> ;Always return done immediately
   283 00004E95 B005                <1>     mov al, 05h ;Bad request structure length?
   284 00004E97 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   285 00004E9A 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   286 00004EA0 E972FFFFFF          <1>     jmp .clkExit
   287                              <1> 
   288                              <1> .clkWrite:          ;Functions 8 and 9
   289 00004EA5 B005                <1>     mov al, 05h ;Bad request structure length?
   290 00004EA7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   291 00004EAA 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   292                              <1> 
   293 00004EB0 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   294 00004EB3 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   295 00004EB7 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   296 00004EBB 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   297                              <1> 
   298 00004EC2 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   299 00004EC4 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   300 00004EC8 B105                <1>     mov cl, 5
   301 00004ECA F6F1                <1>     div cl          ;Divide al by 5
   302 00004ECC 30E4                <1>     xor ah, ah      ;Remove the remainder
   303 00004ECE 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   304                              <1> ;Using the decimal part of this formula for the low count
   305                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   306 00004ED0 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   307 00004ED3 B912000000          <1>     mov ecx, 18
   308 00004ED8 F7E1                <1>     mul ecx  
   309 00004EDA 01C3                <1>     add ebx, eax
   310                              <1> 
   311 00004EDC 31D2                <1>     xor edx, edx
   312 00004EDE 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   313 00004EE2 B944040000          <1>     mov ecx, 1092
   314 00004EE7 F7E1                <1>     mul ecx
   315 00004EE9 01C3                <1>     add ebx, eax
   316 00004EEB 89DA                <1>     mov edx, ebx    ;edx now has low count
   317 00004EED 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   318 00004EF1 B401                <1>     mov ah, 01h     ;Set the system time
   319 00004EF3 CD3A                <1>     int 3Ah
   320                              <1> 
   321 00004EF5 4889F3              <1>     mov rbx, rsi
   322 00004EF8 E91AFFFFFF          <1>     jmp .clkExit
   323                              <1> 
   324                              <1> .clkBCDtoHex:
   325                              <1> ;Converts a BCD value to a Hex byte
   326                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   327 00004EFD 51                  <1>     push rcx
   328 00004EFE 0FB6C0              <1>     movzx eax, al   ;Zero extend
   329 00004F01 89C1                <1>     mov ecx, eax    ;Save al in ecx
   330 00004F03 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   331 00004F08 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   332 00004F0E C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   333                              <1> .cbth0:
   334 00004F11 050A000000          <1>     add eax, 10
   335 00004F16 E2F9                <1>     loop .cbth0
   336 00004F18 59                  <1>     pop rcx
   337 00004F19 C3                  <1>     ret
   338                              <1> 
   339                              <1> .clkHexToBCD:
   340                              <1> ;Converts a Hex byte into two BCD digits
   341                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   342 00004F1A 51                  <1>     push rcx
   343 00004F1B 0FB6C0              <1>     movzx eax, al   ;Zero extend
   344 00004F1E 31C9                <1>     xor ecx, ecx
   345                              <1> .chtb0:
   346 00004F20 3D0A000000          <1>     cmp eax, 10
   347 00004F25 7209                <1>     jb .chtb1
   348 00004F27 2D0A000000          <1>     sub eax, 10
   349 00004F2C FFC1                <1>     inc ecx
   350 00004F2E EBF0                <1>     jmp short .chtb0
   351                              <1> .chtb1:
   352 00004F30 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   353 00004F33 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   354 00004F35 59                  <1>     pop rcx
   355 00004F36 C3                  <1>     ret
   356 00004F37 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   357                              <1> 
   358                              <1> ;COM Driver headers and main interrupt strat
   359                              <1> com1Intr:
   360 00004F39 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   361 00004F40 EB19                <1>     jmp short comIntr
   362                              <1> com2Intr:
   363 00004F42 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   364 00004F49 EB10                <1>     jmp short comIntr
   365                              <1> com3Intr:
   366 00004F4B C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   367 00004F52 EB07                <1>     jmp short comIntr
   368                              <1> com4Intr:
   369 00004F54 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   370                              <1> comIntr:
   371 00004F5B 50                  <1>     push rax
   372 00004F5C 53                  <1>     push rbx
   373 00004F5D 51                  <1>     push rcx
   374 00004F5E 52                  <1>     push rdx
   375 00004F5F 56                  <1>     push rsi
   376 00004F60 57                  <1>     push rdi
   377 00004F61 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   378 00004F68 B003                <1>     mov al, 03h ;Unknown Command
   379 00004F6A 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   380 00004F6E 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   381                              <1> 
   382 00004F70 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   383 00004F73 3C04                <1>     cmp al, 4   ;Read Character(s)
   384 00004F75 7462                <1>     jz .comRead
   385 00004F77 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   386 00004F79 0F849B000000        <1>     jz .comNondestructiveRead   
   387 00004F7F 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   388 00004F81 0F8484000000        <1>     jz .comReadInputStatus
   389 00004F87 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   390 00004F89 0F84B9000000        <1>     jz .comFlushInputBuffers
   391 00004F8F 3C08                <1>     cmp al, 8
   392 00004F91 0F84DB000000        <1>     jz .comWrite
   393 00004F97 3C09                <1>     cmp al, 9
   394 00004F99 0F84D3000000        <1>     jz .comWrite
   395 00004F9F 3C0A                <1>     cmp al, 0Ah
   396 00004FA1 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   397 00004FA7 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   398                              <1> .comErrorNoCount:
   399 00004FA9 B002                <1>     mov al, 02h ;Unknown device
   400 00004FAB EB19                <1>     jmp short .comWriteErrorCode
   401                              <1> .comReadError:
   402 00004FAD BA0B000000          <1>     mov edx, 0Bh
   403                              <1> .comWriteError:
   404 00004FB2 BA0A000000          <1>     mov edx, 0Ah
   405                              <1> .comError:
   406 00004FB7 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   407 00004FBA B902000000          <1>     mov ecx, 02h    ;Unknown device
   408 00004FBF 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   409 00004FC1 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   410 00004FC4 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   411                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   412 00004FC6 B480                <1>     mov ah, 80h ;Set error bit
   413 00004FC8 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   414                              <1> .comExit:
   415 00004FCC 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   416 00004FD2 5F                  <1>     pop rdi
   417 00004FD3 5E                  <1>     pop rsi
   418 00004FD4 5A                  <1>     pop rdx
   419 00004FD5 59                  <1>     pop rcx
   420 00004FD6 5B                  <1>     pop rbx
   421 00004FD7 58                  <1>     pop rax
   422 00004FD8 C3                  <1>     ret
   423                              <1> 
   424                              <1> .comRead:
   425 00004FD9 B005                <1>     mov al, 05h ;Bad request structure length?
   426 00004FDB 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   427 00004FDE 75E6                <1>     jne .comWriteErrorCode
   428                              <1> 
   429 00004FE0 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   430 00004FE4 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   431                              <1> .cr1:
   432 00004FE6 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   433 00004FE9 741B                <1>     je .cre2
   434                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   435 00004FEB B802000000          <1>     mov eax, 02h    ;Recieve 
   436 00004FF0 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   437 00004FF6 6698                <1>     cbw     ;Zero extend to upper byte
   438 00004FF8 CD34                <1>     int 34h ;Recieve Char
   439 00004FFA 72BB                <1>     jc .comError
   440 00004FFC 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   441 00004FFF 74EA                <1>     je .cr11
   442 00005001 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   443 00005002 FFC1                <1>     inc ecx
   444 00005004 EBE0                <1>     jmp short .cr1
   445                              <1> .cre2:
   446 00005006 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   447 00005009 EBC1                <1>     jmp short .comExit
   448                              <1> 
   449                              <1> .comReadInputStatus:
   450 0000500B B005                <1>     mov al, 05h ;Bad request structure length?
   451 0000500D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   452 00005010 75B4                <1>     jne .comWriteErrorCode
   453 00005012 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   454 00005018 EBB2                <1>     jmp short .comExit
   455                              <1> 
   456                              <1> .comNondestructiveRead:
   457                              <1> ;Acts like a "read one character if there is one" function
   458 0000501A B005                <1>     mov al, 05h ;Bad request structure length?
   459 0000501C 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   460 0000501F 75A5                <1>     jne .comWriteErrorCode
   461                              <1> .cndr1:
   462 00005021 B802000000          <1>     mov eax, 02h    ;Recieve 
   463 00005026 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   464 0000502C 6698                <1>     cbw     ;Zero extend to upper byte
   465 0000502E CD34                <1>     int 34h ;Recieve Char
   466 00005030 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   467 00005036 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   468 00005039 7405                <1>     je .cndr2
   469 0000503B 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Get next char
   470 0000503E EB8C                <1>     jmp short .comExit
   471                              <1> .cndr2:
   472 00005040 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 200h ;Busy bit set
   473 00005046 EB84                <1>     jmp short .comExit
   474                              <1> 
   475                              <1> .comFlushInputBuffers:
   476 00005048 B005                <1>     mov al, 05h ;Bad request structure length?
   477 0000504A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   478 0000504D 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   479                              <1> .cfib0:
   480 00005053 8A1584000000        <1>     mov dl, byte [.comDevice]
   481 00005059 6698                <1>     cbw
   482 0000505B B802000000          <1>     mov eax, 02h    ;Recieve
   483 00005060 CD34                <1>     int 34h
   484 00005062 0F8241FFFFFF        <1>     jc .comErrorNoCount
   485 00005068 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   486 0000506B 75E6                <1>     jne .cfib0
   487 0000506D E95AFFFFFF          <1>     jmp .comExit
   488                              <1> 
   489                              <1> .comWrite:
   490 00005072 B005                <1>     mov al, 05h ;Bad request structure length?
   491 00005074 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   492 00005077 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   493                              <1> 
   494 0000507D 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   495 00005081 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   496                              <1> .cw1: 
   497 00005083 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   498 00005086 7417                <1>     je .cw2
   499 00005088 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   500 00005089 B401                <1>     mov ah, 01h ;Move function number into ah
   501 0000508B 8A154C000000        <1>     mov dl, byte [.comDevice]
   502 00005091 6698                <1>     cbw     ;Zero extend to upper byte
   503 00005093 CD34                <1>     int 34h ;Transmit char
   504 00005095 0F821CFFFFFF        <1>     jc .comError
   505 0000509B FFC1                <1>     inc ecx
   506 0000509D EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   507                              <1> .cw2:
   508 0000509F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   509 000050A2 E925FFFFFF          <1>     jmp .comExit
   510                              <1> 
   511                              <1> .comOutputStatus:
   512                              <1> ;Read MODEM status
   513 000050A7 B005                <1>     mov al, 05h ;Bad request structure length?
   514 000050A9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   515 000050AC 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   516                              <1> 
   517 000050B2 8A1525000000        <1>     mov dl, byte [.comDevice]
   518 000050B8 6698                <1>     cbw     ;Zero extend to upper byte
   519 000050BA B403                <1>     mov ah, 03h     ;Get status
   520 000050BC CD34                <1>     int 34h
   521 000050BE 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   522 000050C4 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   523 000050C9 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   524 000050CC F7D0                <1>     not eax      ;Bitwise inversion
   525 000050CE 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   526 000050D3 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   527 000050D8 E9EFFEFFFF          <1>     jmp .comExit
   528 000050DD 00                  <1> .comDevice   db 0
    43                                  %include "./Source/Drivers/diskDrv.asm"
    44                              <1> msdDriver:
    45 000050DE 50                  <1>     push rax
    46 000050DF 53                  <1>     push rbx
    47 000050E0 51                  <1>     push rcx
    48 000050E1 52                  <1>     push rdx
    49 000050E2 56                  <1>     push rsi
    50 000050E3 57                  <1>     push rdi
    51 000050E4 55                  <1>     push rbp
    52 000050E5 4150                <1>     push r8
    53 000050E7 488B1D7FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    54 000050EE 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    55 000050F2 B003                <1>     mov al, drvBadCmd
    56 000050F4 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    57 000050FA B001                <1>     mov al, drvBadUnit 
    58 000050FC 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    59 00005100 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    60 00005106 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    61 0000510D 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    62 00005111 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    63 00005114 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    64 00005118 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    65 0000511C D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    66 0000511E 488D0D9A000000      <1>     lea rcx, .msdTable
    67 00005125 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    68 00005129 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    69 0000512B 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    70 0000512D 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    71 00005130 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    72                              <1> .msdDriverExit:
    73 00005132 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    74 00005138 4158                <1>     pop r8
    75 0000513A 5D                  <1>     pop rbp
    76 0000513B 5F                  <1>     pop rdi
    77 0000513C 5E                  <1>     pop rsi
    78 0000513D 5A                  <1>     pop rdx
    79 0000513E 59                  <1>     pop rcx
    80 0000513F 5B                  <1>     pop rbx
    81 00005140 58                  <1>     pop rax
    82 00005141 C3                  <1>     ret
    83                              <1> 
    84                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    85 00005142 4889FB              <1>     mov rbx, rdi
    86 00005145 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    87 00005148 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    88 0000514A 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    89                              <1> ;Now fall through to general error
    90                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    91 0000514D B401                <1>     mov ah, 01h
    92 0000514F CD33                <1>     int 33h ;Read status of last operation
    93 00005151 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    94 00005154 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    95 00005156 7460                <1>     je .msdWriteErrorCode 
    96 00005158 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    97 0000515A 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    98 0000515D 7459                <1>     je .msdWriteErrorCode 
    99 0000515F 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   100 00005162 7454                <1>     je .msdWriteErrorCode
   101                              <1> ;Device Not Ready
   102 00005164 B002                <1>     mov al, 02h  ;Device not ready code
   103 00005166 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   104 00005169 744D                <1>     je .msdWriteErrorCode
   105 0000516B 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   106 0000516F 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   107                              <1> ;Write Protected
   108 00005173 30C0                <1>     xor al, al
   109 00005175 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   110 0000517A 743C                <1>     je .msdWriteErrorCode
   111                              <1> ;CRC Error
   112 0000517C B004                <1>     mov al, 04h     ;CRC error code
   113 0000517E 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   114 00005183 7433                <1>     je .msdWriteErrorCode
   115 00005185 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   116 0000518A 742C                <1>     je .msdWriteErrorCode
   117 0000518C 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   118 00005191 7425                <1>     je .msdWriteErrorCode
   119                              <1> ;Seek Error
   120 00005193 B006                <1>     mov al, 06h     ;Seek error code
   121 00005195 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   122 00005198 741E                <1>     je .msdWriteErrorCode
   123                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   124                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   125 0000519A B007                <1>     mov al, 07h
   126 0000519C 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   127 0000519F 7417                <1>     je .msdWriteErrorCode
   128                              <1> ;Sector Not Found
   129 000051A1 B008                <1>     mov al, 08h     ;Sector not found code
   130 000051A3 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   131 000051A6 7410                <1>     je .msdWriteErrorCode
   132                              <1> ;Write faults
   133 000051A8 B00A                <1>     mov al, 0Ah     ;Write fault
   134 000051AA 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   135 000051AD 7409                <1>     je .msdWriteErrorCode
   136                              <1> ;Read faults
   137 000051AF B00B                <1>     mov al, 0Bh     ;Read fault
   138 000051B1 80F911              <1>     cmp cl, 11h     ;Read error
   139 000051B4 7402                <1>     je .msdWriteErrorCode
   140                              <1> ;General Errors
   141 000051B6 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   142                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   143 000051B8 B480                <1>     mov ah, 80h ;Set error bit
   144 000051BA 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   145 000051BE C3                  <1>     ret ;Return to set done bit
   146                              <1> .msdTable:
   147 000051BF 0000                <1>     dw 0                            ;Function 0
   148 000051C1 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   149 000051C3 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   150 000051C5 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   151 000051C7 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   152 000051C9 0000                <1>     dw 0                            ;Function 5
   153 000051CB 0000                <1>     dw 0                            ;Function 6
   154 000051CD 0000                <1>     dw 0                            ;Function 7
   155 000051CF 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   156 000051D1 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   157 000051D3 0000                <1>     dw 0                            ;Function 10
   158 000051D5 0000                <1>     dw 0                            ;Function 11
   159 000051D7 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   160 000051D9 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   161 000051DB ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   162 000051DD 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   163 000051DF 0000                <1>     dw 0                            ;Function 16
   164 000051E1 0000                <1>     dw 0                            ;Function 17
   165 000051E3 0000                <1>     dw 0                            ;Function 18
   166 000051E5 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   167 000051E7 0000                <1>     dw 0                            ;Function 20
   168 000051E9 0000                <1>     dw 0                            ;Function 21
   169 000051EB 0000                <1>     dw 0                            ;Function 22
   170 000051ED 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   171 000051EF 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   172                              <1> 
   173                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   174                              <1> .msdMedChk:          ;Function 1
   175 000051F1 B005                <1>     mov al, 05h ;Bad request structure length
   176 000051F3 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   177 000051F6 75C0                <1>     jne .msdWriteErrorCode
   178                              <1> 
   179 000051F8 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   180 000051FD 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   181 00005204 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   182 00005207 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   183 0000520A 753F                <1>     jnz .mmcNoChange
   184                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   185 0000520C B416                <1>     mov ah, 16h 
   186 0000520E CD33                <1>     int 33h
   187 00005210 0F8237FFFFFF        <1>     jc .msdGenDiskError
   188 00005216 80FC80              <1>     cmp ah, 80h
   189 00005219 740E                <1>     je .mmcNoChangeLine
   190 0000521B 80FC86              <1>     cmp ah, 86h
   191 0000521E 7409                <1>     je .mmcNoChangeLine
   192 00005220 84E4                <1>     test ah, ah ;No change?
   193 00005222 7427                <1>     jz .mmcNoChange
   194 00005224 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   195 00005227 750D                <1>     jnz .mmcChange
   196                              <1> ;If nothing, fall through and test manually, should never happen though
   197                              <1> .mmcNoChangeLine:
   198                              <1> ;Now we test Media Descriptor
   199 00005229 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   200 0000522E 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   201 00005231 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   202 00005234 7410                <1>     je .mmcUnsure
   203                              <1> .mmcChange:
   204 00005236 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   205 0000523A 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   206 00005241 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   207                              <1>     ;Check here if there were any open handles on the device when it was changed
   208 00005245 C3                  <1>     ret
   209                              <1> .mmcUnsure:
   210 00005246 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   211 0000524A C3                  <1>     ret
   212                              <1> .mmcNoChange:
   213 0000524B C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   214 0000524F C3                  <1>     ret
   215                              <1> 
   216                              <1> 
   217                              <1> .msdBuildBPB:        ;Function 2
   218 00005250 B005                <1>     mov al, 05h ;Bad request structure length
   219 00005252 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   220 00005255 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   221                              <1> 
   222 0000525B 4889DE              <1>     mov rsi, rbx
   223 0000525E 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   224 00005263 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   225 0000526A 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   226 0000526D 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   227 00005271 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   228 00005273 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   229 00005276 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   230 0000527B CD33                <1>     int 33h
   231 0000527D 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   232                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   233 00005283 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   234 00005287 7418                <1>     je .mbbpb0
   235 00005289 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   236 0000528D 7412                <1>     je .mbbpb0
   237 0000528F 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   238 00005293 740C                <1>     je .mbbpb0
   239 00005295 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   240 00005299 B007                <1>     mov al, 07h ;Unknown media error code
   241 0000529B 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   242                              <1> .mbbpb0:
   243 000052A1 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   244 000052A4 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   245 000052A9 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   246 000052B0 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   247 000052B4 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   248 000052B7 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   249 000052BB B90F000000          <1>     mov ecx, bpbEx_size/8
   250 000052C0 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   251 000052C3 C3                  <1>     ret
   252                              <1> .msdIOCTLRead:       ;Function 3, returns done
   253 000052C4 B005                <1>     mov al, drvBadDrvReq
   254 000052C6 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   255 000052C9 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   256 000052CF C3                  <1>     ret
   257                              <1> .msdRead:            ;Function 4
   258                              <1> ;Will read one sector at a time.
   259 000052D0 B005                <1>     mov al, 05h ;Bad request structure length
   260 000052D2 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   261 000052D5 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   262                              <1> 
   263 000052DB 4889DF              <1>     mov rdi, rbx
   264 000052DE 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   265                              <1> .msdr0:
   266 000052E0 B682                <1>     mov dh, 82h ;LBA Read Sectors
   267 000052E2 E841010000          <1>     call .msdBlkIOCommon
   268 000052E7 0F8255FEFFFF        <1>     jc .msdIOError
   269 000052ED 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   270 000052F5 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   271 000052FD FFC6                <1>     inc esi
   272 000052FF 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   273 00005302 75DC                <1>     jne .msdr0
   274 00005304 4889FB              <1>     mov rbx, rdi
   275 00005307 C3                  <1>     ret
   276                              <1> .msdWrite:           ;Function 8
   277                              <1> ;Will write one sector at a time.
   278 00005308 B005                <1>     mov al, 05h ;Bad request structure length
   279 0000530A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   280 0000530D 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   281                              <1> 
   282 00005313 4889DF              <1>     mov rdi, rbx
   283 00005316 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   284                              <1> .msdw0:
   285 00005318 B683                <1>     mov dh, 83h ;LBA Write Sectors
   286 0000531A E809010000          <1>     call .msdBlkIOCommon
   287 0000531F 0F821DFEFFFF        <1>     jc .msdIOError
   288 00005325 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   289 0000532D 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   290 00005335 FFC6                <1>     inc esi
   291 00005337 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   292 0000533A 75DC                <1>     jne .msdw0
   293 0000533C 4889FB              <1>     mov rbx, rdi
   294 0000533F C3                  <1>     ret
   295                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   296                              <1> ;Will write one sector at a time and then verify it.
   297 00005340 B005                <1>     mov al, 05h ;Bad request structure length
   298 00005342 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   299 00005345 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   300                              <1> 
   301 0000534B 4889DF              <1>     mov rdi, rbx
   302 0000534E 31F6                <1>     xor esi, esi  ;Set counter to zero
   303                              <1> .msdwv0:
   304 00005350 B683                <1>     mov dh, 83h ;LBA Write Sectors
   305 00005352 E8D1000000          <1>     call .msdBlkIOCommon
   306 00005357 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   307 0000535D B684                <1>     mov dh, 84h ;LBA Verify Sectors
   308 0000535F E8C4000000          <1>     call .msdBlkIOCommon
   309 00005364 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   310 0000536A 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   311 00005372 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   312 0000537A FFC6                <1>     inc esi
   313 0000537C 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   314 0000537F 75CF                <1>     jne .msdwv0
   315 00005381 4889FB              <1>     mov rbx, rdi
   316 00005384 C3                  <1>     ret
   317                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   318 00005385 B005                <1>     mov al, drvBadDrvReq
   319 00005387 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   320 0000538A 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   321                              <1> 
   322 00005390 C3                  <1>     ret
   323                              <1> .msdDevOpen:         ;Function 13
   324 00005391 B005                <1>     mov al, drvBadDrvReq
   325 00005393 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   326 00005396 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   327                              <1> 
   328 0000539C 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   329 000053A1 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   330 000053A8 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   331 000053AB C3                  <1>     ret
   332                              <1> .msdDevClose:        ;Function 14
   333 000053AC B005                <1>     mov al, drvBadDrvReq
   334 000053AE 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   335 000053B1 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   336                              <1> 
   337 000053B7 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   338 000053BC 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   339 000053C3 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   340 000053C6 C3                  <1>     ret
   341                              <1> .msdRemovableMedia:  ;Function 15
   342 000053C7 B005                <1>     mov al, drvBadDrvReq
   343 000053C9 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   344 000053CC 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   345                              <1> 
   346 000053D2 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   347 000053D7 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   348 000053DE 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   349 000053E1 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   350 000053E6 31D2                <1>     xor edx, edx    ;Busy bit clear
   351 000053E8 A880                <1>     test al, 80h
   352 000053EA 0F44CA              <1>     cmovz ecx, edx
   353 000053ED 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   354 000053F1 C3                  <1>     ret
   355                              <1> .msdGenericIOCTL:    ;Function 19
   356 000053F2 B005                <1>     mov al, drvBadDrvReq
   357 000053F4 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   358 000053F7 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   359                              <1> 
   360 000053FD C3                  <1>     ret
   361                              <1> .msdGetLogicalDev:   ;Function 23
   362 000053FE B005                <1>     mov al, drvBadDrvReq
   363 00005400 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   364 00005403 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   365                              <1> 
   366 00005409 8A0541000000        <1>     mov al, byte [.msdCurDev]
   367 0000540F 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   368 00005412 C3                  <1>     ret
   369                              <1> .msdSetLogicalDev:   ;Function 24
   370 00005413 B005                <1>     mov al, drvBadDrvReq
   371 00005415 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   372 00005418 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   373                              <1> 
   374 0000541E 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   375 00005421 880529000000        <1>     mov byte [.msdCurDev], al
   376 00005427 C3                  <1>     ret
   377                              <1> 
   378                              <1> .msdBlkIOCommon:  ;Does block IO
   379                              <1> ;Called with rdi containing old rbx value and ah with function number
   380                              <1> ;rbp points to bpb
   381                              <1> ;Error handled by caller
   382                              <1> ;Sector count handled by caller
   383                              <1> ;Called with dh = BIOS function number
   384 00005428 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   385 0000542D 8A90[51540000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   386 00005433 31C9                <1>     xor ecx, ecx
   387 00005435 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   388 00005438 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   389 0000543C 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   390 00005440 88F4                <1>     mov ah, dh
   391 00005442 B001                <1>     mov al, 01h ;Do one sector at a time 
   392 00005444 CD33                <1>     int 33h
   393 00005446 C3                  <1>     ret
   394                              <1> 
   395 00005447 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   396                              <1> ;LASTDRIVE default is 5
   397                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   398                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   399 00005450 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   400                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   401 00005451 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   402 00005456 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   403 0000545B 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   403 00005464 000000000000000000- <1>
   403 0000546D 000000000000000000- <1>
   403 00005476 000000000000000000- <1>
   403 0000547F 00000000            <1>
   404 00005483 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   404 0000548C 000000000000000000- <1>
   404 00005495 000000000000000000- <1>
   404 0000549E 000000000000000000- <1>
   404 000054A7 000000000000000000- <1>
   404 000054B0 000000000000000000- <1>
   404 000054B9 000000000000000000- <1>
   404 000054C2 000000000000000000- <1>
   404 000054CB 000000000000000000- <1>
   404 000054D4 000000000000000000- <1>
   404 000054DD 000000000000000000- <1>
   404 000054E6 000000000000000000- <1>
   404 000054EF 000000000000000000- <1>
   404 000054F8 000000000000000000- <1>
   404 00005501 000000000000000000- <1>
   404 0000550A 000000000000000000- <1>
   404 00005513 000000000000000000- <1>
   404 0000551C 000000000000000000- <1>
   404 00005525 000000000000000000- <1>
   404 0000552E 000000000000000000- <1>
   404 00005537 000000000000000000- <1>
   404 00005540 000000000000000000- <1>
   404 00005549 000000000000000000- <1>
   404 00005552 000000000000000000- <1>
   404 0000555B 000000000000000000- <1>
   404 00005564 000000000000000000- <1>
   404 0000556D 000000000000000000- <1>
   404 00005576 000000000000000000- <1>
   404 0000557F 000000000000000000- <1>
   404 00005588 000000000000000000- <1>
   404 00005591 000000000000000000- <1>
   404 0000559A 000000000000000000- <1>
   404 000055A3 000000000000000000- <1>
   404 000055AC 000000000000000000- <1>
   404 000055B5 000000000000000000- <1>
   404 000055BE 000000000000000000- <1>
   404 000055C7 000000000000000000- <1>
   404 000055D0 000000000000000000- <1>
   404 000055D9 000000000000000000- <1>
   404 000055E2 000000000000000000- <1>
   404 000055EB 000000000000000000- <1>
   404 000055F4 000000000000000000- <1>
   404 000055FD 000000000000000000- <1>
   404 00005606 000000000000000000- <1>
   404 0000560F 000000000000000000- <1>
   404 00005618 000000000000000000- <1>
   404 00005621 000000000000000000- <1>
   404 0000562A 000000000000000000- <1>
   404 00005633 000000000000000000- <1>
   404 0000563C 000000000000000000- <1>
   404 00005645 000000000000000000- <1>
   404 0000564E 000000000000000000- <1>
   404 00005657 000000000000000000- <1>
   404 00005660 000000000000000000- <1>
   404 00005669 000000000000000000- <1>
   404 00005672 000000000000000000- <1>
   404 0000567B 000000000000000000- <1>
   404 00005684 000000000000000000- <1>
   404 0000568D 000000000000000000- <1>
   404 00005696 000000000000000000- <1>
   404 0000569F 000000000000000000- <1>
   404 000056A8 000000000000000000- <1>
   404 000056B1 000000000000000000- <1>
   404 000056BA 000000000000000000- <1>
   404 000056C3 000000000000000000- <1>
   404 000056CC 000000000000000000- <1>
   404 000056D5 000000000000        <1>
   405                              <1> 
   406                              <1> endptr equ $
    44                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    45                                  ;Paragraph alignment
    46                                  %include "./Source/BSS/dosDynaDataArea.asm"
    47                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    48                              <1> ; the MCB chain!
    49                              <1> ddaStart:
    50 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    51                              <1> 
    52                              <1> ;Create DPB chain of first 5 available DPB slots
    53                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    54 00000010 <res 35h>           <1> firstDPB        resb dpb_size
    55 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    56                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    57                              <1> ;Always jettison this space
    58 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    59 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    60 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    61                              <1> 
    62 00000119 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    63 00000149 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    64                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    65                              <1> dynamicDataAreaLength equ $ - ddaStart
    65          ------------------  <1>  info: assembly required 1+11+2 passes

