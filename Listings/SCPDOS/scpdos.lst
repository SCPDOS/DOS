     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs, strucs and macros
     5                                  %include "./Source/Include/dosMacro.mac"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> ;Generic Macros file
     9                              <1> ;The following instruction extensions allow to conditionally return
    10                              <1> ;The idea was borrowed from the DOS Source Code
    11                              <1> ;
    12                              <1> ;-------------------------------------------------------------------------------
    13                              <1> 
    14                              <1> ;-------------------------------------------------------------------------------
    15                              <1> ;These macros are live and must not be touched
    16                              <1> ;-------------------------------------------------------------------------------
    17                              <1> %macro return 0
    18                              <1> %%_ret:
    19                              <1>     ret
    20                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    21                              <1> %endmacro
    22                              <1> 
    23                              <1> %macro cret 1
    24                              <1> %%_base:
    25                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    26                              <1>     %ifdef retOff
    27                              <1>     %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <1>     %ifdef currSegVBase
    29                              <1>     j%+1 short (retOff+currSegVBase)
    30                              <1>     %else
    31                              <1>     j%+1 short retOff
    32                              <1>     %endif  ;End ifdef currSegVBase
    33                              <1>     %else 
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1>     %endif  ;End the distance measurement if
    38                              <1>     %else   
    39                              <1>     j%-1 short %%a
    40                              <1>     return
    41                              <1> %%a:
    42                              <1>     %endif  ;End ifdef retoff
    43                              <1> %endmacro
    44                              <1> 
    45                              <1> %macro retz 0
    46                              <1> cret z
    47                              <1> %endmacro
    48                              <1> 
    49                              <1> %macro retnz 0
    50                              <1> cret nz
    51                              <1> %endmacro
    52                              <1> 
    53                              <1> %macro rete 0
    54                              <1> cret e
    55                              <1> %endmacro
    56                              <1> 
    57                              <1> %macro retne 0
    58                              <1> cret ne
    59                              <1> %endmacro
    60                              <1> 
    61                              <1> %macro retc 0
    62                              <1> cret c
    63                              <1> %endmacro
    64                              <1> 
    65                              <1> %macro retnc 0
    66                              <1> cret nc
    67                              <1> %endmacro
    68                              <1> 
    69                              <1> %macro retb 0
    70                              <1> cret b
    71                              <1> %endmacro
    72                              <1> 
    73                              <1> %macro retnb 0
    74                              <1> cret nb
    75                              <1> %endmacro
    76                              <1> 
    77                              <1> %macro reta 0
    78                              <1> cret a
    79                              <1> %endmacro
    80                              <1> 
    81                              <1> %macro retna 0
    82                              <1> cret na
    83                              <1> %endmacro
    84                              <1> 
    85                              <1> %macro breakpoint 0
    86                              <1> xchg bx, bx
    87                              <1> %endmacro
     6                                  %include "./Source/Include/driverStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous SCP/DOS      ;
    10                              <1> ; device driver related structures.                     ;
    11                              <1> ;-------------------------------------------------------;
    12                              <1> 
    13                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    14                              <1> 
    15 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    16 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    17 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    18 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    19 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    20                              <1> 
    21                              <1> endstruc
    22                              <1> 
    23                              <1> ;Command Code equates
    24                              <1>     drvINIT         equ 0
    25                              <1>     drvMEDCHK       equ 1
    26                              <1>     drvBUILDBPB     equ 2
    27                              <1>     drvIOCTLREAD    equ 3
    28                              <1>     drvREAD         equ 4
    29                              <1>     drvNONDESTREAD  equ 5
    30                              <1>     drvINSTATUS     equ 6
    31                              <1>     drvFLUSHINBUF   equ 7
    32                              <1>     drvWRITE        equ 8
    33                              <1>     drvWRITEVERIFY  equ 9
    34                              <1>     drvOUTSTATUS    equ 10
    35                              <1>     drvFLUSHOUTBUF  equ 11
    36                              <1>     drvIOCTLWRITE   equ 12
    37                              <1>     drvOPEN         equ 13
    38                              <1>     drvCLOSE        equ 14
    39                              <1>     drvREMMEDCHECK  equ 15
    40                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    41                              <1>     drvIOCTL        equ 19
    42                              <1>     drvGETDRVMAP    equ 23
    43                              <1>     drvSETDRVMAP    equ 24
    44                              <1>     
    45                              <1> ;Driver Error equates 
    46                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    47                              <1>     drvBadUnit      equ 1   ;Unknown unit
    48                              <1>     drvNotReady     equ 2   ;Device not ready
    49                              <1>     drvBadCmd       equ 3   ;Unknown command
    50                              <1>     drvCRCErr       equ 4   ;CRC Error
    51                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    52                              <1>     drvBadSeek      equ 6   ;Seek error
    53                              <1>     drvBadMed       equ 7   ;Unknown media
    54                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    55                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    56                              <1>     drvWriteFault   equ 10  ;Write Fault
    57                              <1>     drvReadFault    equ 11  ;Read Fault
    58                              <1>     drvGenFault     equ 12  ;General Fault
    59                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    60                              <1> 
    61                              <1> ;Driver status word status bit meanings
    62                              <1>     drvErrStatus    equ 8000h  
    63                              <1>     drvDonStatus    equ 0100h
    64                              <1>     drvBsyStatus    equ 0200h
    65                              <1> 
    66                              <1> ;Driver Attribute Word bit meanings
    67                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    68                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    69                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    70                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    71                              <1>     devDrvFastOut  equ 10h ;If set, device supports INT 49h
    72                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    73                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    74                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    75                              <1>     devDrvChar     equ 8000h ;If set, Char device
    76                              <1> ;Bit 0 1=console input
    77                              <1> ;    1 1=console output (character devices)
    78                              <1> ;    2 1=NUL device
    79                              <1> ;    3 1=CLOCK device
    80                              <1> ;    4 1=INT 49 output (CON)
    81                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    82                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    83                              <1> ;   11 1=open/close/removable media supported (3.0+)
    84                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    85                              <1> ;      1=media descriptor in FAT required (block devices)
    86                              <1> ;   14 1=IOCTL supported
    87                              <1> ;   15 0=block device
    88                              <1> ;      1=character device
    89                              <1> 
    90                              <1> ;Driver structures
    91                              <1> 
    92                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    93                              <1> 
    94                              <1>     .hdrlen resb 1  ;Length of the request header
    95                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    96                              <1>     .cmdcde resb 1  ;Command code
    97                              <1>     .status resw 1  ;Status word
    98                              <1>     .devptr resq 1  ;Device queue pointer field
    99                              <1> 
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> struc drvReqHdr
   103                              <1>     drvReqHdrM
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc initReqPkt  ;Init Request Packet
   107                              <1> 
   108                              <1>     drvReqHdrM   ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   109 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   110 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   111 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
   112 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
   113                              <1> 
   114                              <1> endstruc
   115                              <1> 
   116                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   117                              <1> 
   118                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   119 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   120 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   121 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   122                              <1> 
   123                              <1> endstruc
   124                              <1> 
   125                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   126                              <1> 
   127                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   128 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   129 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   130 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   131                              <1> 
   132                              <1> endstruc
   133                              <1> 
   134                              <1> struc ioReqPkt   ;IO Request Packet
   135                              <1> 
   136                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   137 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   138 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   139 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   140 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   141 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   142                              <1> 
   143                              <1> endstruc
   144                              <1> 
   145                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   146                              <1>     
   147                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   148 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   149                              <1> 
   150                              <1> endstruc
   151                              <1> 
   152                              <1> struc statusReqPkt   ;Status Request Packet
   153                              <1> 
   154                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   155                              <1> 
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   159                              <1> 
   160                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   161                              <1>      
   162                              <1> endstruc
   163                              <1> 
   164                              <1> struc openReqPkt ;Open Device Request Packet
   165                              <1> 
   166                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   167                              <1>      
   168                              <1> endstruc
   169                              <1> 
   170                              <1> struc closeReqPkt ;Close Device Request Packet
   171                              <1> 
   172                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   173                              <1>      
   174                              <1> endstruc
   175                              <1> 
   176                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   177                              <1> 
   178                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   179                              <1>      
   180                              <1> endstruc
   181                              <1> 
   182                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   183                              <1> 
   184                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   185 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   186 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   187 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   188 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   189 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   190                              <1> 
   191                              <1> endstruc
   192                              <1> 
   193                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   194                              <1>     
   195                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   196                              <1> 
   197                              <1> endstruc
   198                              <1> 
   199                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   200                              <1>     
   201                              <1>     drvReqHdrM    ;Common Driver Header Macro
    93                              <2> 
    94 00000000 ??                  <2>  .hdrlen resb 1
    95 00000001 ??                  <2>  .unitnm resb 1
    96 00000002 ??                  <2>  .cmdcde resb 1
    97 00000003 ????                <2>  .status resw 1
    98 00000005 ????????????????    <2>  .devptr resq 1
    99                              <2> 
   202                              <1> 
   203                              <1> endstruc
     7                                  %include "./Source/Include/fatStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous FAT driver   ;
    11                              <1> ; structures. exFAT will have it's own files at a later ;
    12                              <1> ; stage.                                                ;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;-------------------------------------------------------;
    16                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    17                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    18                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    19                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    20                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    21                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    22                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    23                              <1> ;-------------------------------------------------------;
    24                              <1> 
    25                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    26                              <1> 
    27 00000000 ??????              <1>     .jmpBoot    resb 3 
    28 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    29 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    30 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    31 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    32 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    33 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    34 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    35 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    36 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    37 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    38 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    39 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    40 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    41                              <1> 
    42 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    43 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    44 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    45 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    46 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    47 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    48                              <1> 
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    52                              <1> 
    53 00000000 ??????              <1>     .jmpBoot    resb 3
    54 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    55 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    56 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    57 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    58 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    59 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    60 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    61 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    62 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    63 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    64 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    65 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    66 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    67                              <1> 
    68 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    69 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    70 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    71 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    72 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    73 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    74 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    75                              <1> 
    76 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    77 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    78 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    79 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    80 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    81 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    82                              <1> 
    83                              <1> endstruc
    84                              <1> 
    85                              <1> struc mbr
    86 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    87 000001B8 ????????            <1>     .diskID     resb 4
    88 000001BC ????                <1>     .reserved   resb 2
    89 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    90 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    91 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    92 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    93 000001FE ????                <1>     .mbrSig     resb 2
    94                              <1> endstruc
    95                              <1> 
    96                              <1> struc mbrEntry
    97 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    98 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    99 00000004 ??                  <1>     .ptnType    resb 1
   100 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   101 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   102 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc ebr
   106 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   107 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   108 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   109 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   110 000001FE ????                <1>     .mbrSig     resb 2
   111                              <1> endstruc
   112                              <1> 
   113                              <1> 
   114                              <1> struc fatDirEntry
   115                              <1> 
   116 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   117 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   118 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   119 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   120 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   121 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   122 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   123 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   124 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   125 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   126 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   127 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   128                              <1> 
   129                              <1> endstruc
   130                              <1> ;Directory attribute equates
   131                              <1>     dirReadOnly     equ 01h
   132                              <1>     dirHidden       equ 02h
   133                              <1>     dirSystem       equ 04h
   134                              <1>     dirVolumeID     equ 08h
   135                              <1>     dirDirectory    equ 10h
   136                              <1>     dirArchive      equ 20h
   137                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   138                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   139                              <1>     ;If any of the three bits are set, then ALL three bits are set
   140                              <1>     ; in addition to whatever the user passed to search for.
   141                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   142                              <1>     dirIncFiles     equ dirHidden | dirSystem
   143                              <1> 
   144                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   145                              <1> 
   146 00000000 ??????              <1>     .jmpBoot                resb 3 
   147 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   148 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   149 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   150 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   151 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   152 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   153 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   154 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   155 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   156 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   157 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   158 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   159 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   160 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   161 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   162 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   163 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   164 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   165                              <1> 
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc FSInfo
   169                              <1> 
   170 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   171 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   172 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   173 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   174 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   175 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   176 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   177                              <1> 
   178                              <1> endstruc
   179                              <1> 
   180                              <1> %macro defaultBPB 0
   181                              <1>     db 0E9h
   182                              <1>     db 00h
   183                              <1>     db 90h
   184                              <1>     db 'SCPDOSv1'
   185                              <1>     dw 0200h                       
   186                              <1>     db 01h                         
   187                              <1>     dw 0001h                           
   188                              <1>     db 02h                              
   189                              <1>     dw 00E0h            
   190                              <1>     dw 0B40h   
   191                              <1>     db 0F0h                   
   192                              <1>     dw 0009h                   
   193                              <1>     dw 0012h                     
   194                              <1>     dw 0002h                  
   195                              <1>     dd 0                 
   196                              <1>     dd 0 
   197                              <1>     db 00h
   198                              <1>     db 00h
   199                              <1>     db 29h
   200                              <1>     dd 0
   201                              <1>     db 'NO NAME    '
   202                              <1>     db 'FAT12   '
   203                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   204                              <1> %endmacro
     8                                  %include "./Source/Include/fcbStruc.inc"
     9                              <1> ;FCB related structures
    10                              <1> 
    11                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
    12                              <1> ;This field also used for random read/write ops to find the right record
    13                              <1> struc fcb
    14 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    15 00000001 ????????????????    <1>     .filename   resb 8
    16 00000009 ??????              <1>     .fileext    resb 3
    17 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    18                              <1> ;One block consists of 128 records, of size denoted in the below
    19 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    20 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    21 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    22 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    23                              <1>     ;----------------------------------------
    24                              <1>     ;Internal Records
    25 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    26 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    27 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    28                              <1>     ;----------------------------------------
    29 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    30 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    31                              <1> endstruc
    32                              <1> 
    33                              <1> struc exFcb
    34 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    35 00000001 ??????????          <1>     .reserved   resb 5  
    36 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    37 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    38 00000008 ????????????????    <1>     .filename   resb 8
    39 00000010 ??????              <1>     .fileext    resb 3
    40 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    41                              <1> ;One block consists of 128 records, of size denoted in the below
    42 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    43 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    44 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    45 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    46                              <1>     ;----------------------------------------
    47                              <1>     ;Internal Records
    48 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    49 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    50 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    51                              <1>     ;----------------------------------------
    52 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    53 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    54                              <1> endstruc
    55                              <1> 
    56                              <1> struc renameFcb
    57                              <1> ;Used for accessing the names and drive letter for renaming
    58                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    59 00000000 ??                  <1>     .driveNum   resb 1
    60 00000001 ????????????????    <1>     .filename   resb 8
    61 00000009 ??????              <1>     .fileext    resb 3
    62 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    63 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    64 00000011 ????????????????    <1>     .newName    resb 8
    65 00000019 ??????              <1>     .newExt     resb 3
    66 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    67                              <1> endstruc
    68                              <1> 
    69                              <1> ;FCBmode equates:
    70                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    71                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    72                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    73                              <1> fcbShareOn  equ 80h
    74                              <1> fcbCharDev  equ 40h
    75                              <1> fcbLocal    equ 40h
    76                              <1> 
    77                              <1> ;Structures of the special 6 bytes
    78                              <1> 
    79                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    80                              <1> struc noShare   
    81 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    82 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    83 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    84 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    85                              <1> endstruc
    86                              <1> 
    87                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    88                              <1> struc shareLocal    
    89 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    90 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    91 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    92                              <1> endstruc
    93                              <1> 
    94                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    95                              <1> struc shareNet
    96                              <1> ;All three fields too small for FAT32
    97 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    98 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    99 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
   100                              <1> endstruc
     9                                  %include "./Source/Include/dosStruc.inc"
    10                              <1> 
    11                              <1> ;-------------------------------------------------------;
    12                              <1> ; This include file contains miscellaneous internal     ;
    13                              <1> ; SCP/DOS structures.                                   ;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> 
    16                              <1> ;------------------------------------------------------------------------;
    17                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    18                              <1> ; its file system structure. This is used to locate files and structures
    19                              <1> ; on the device itself and to translate file requests to cluster chains
    20                              <1> ; to LBAs to pass to the disk driver..
    21                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    22                              <1> ; drivers Initialise routine has been called.
    23                              <1> ;------------------------------------------------------------------------;
    24                              <1> struc dpb        ;Drive Parameter Block
    25                              <1> 
    26 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    27 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    28 00000002 ????                <1>     .wBytesPerSector         resw 1  ;min 512, max 4096 x
    29 00000004 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    30 00000005 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    31 00000006 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    32 00000008 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    33 00000009 ????                <1>     .wNumberRootDirEntries   resw 1  ;In 32 byte units, this is 0 for FAT32 x
    34 0000000B ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    35 0000000F ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    36 00000013 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    37 00000017 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    38                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    39 0000001B ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    40 00000023 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    41 00000024 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    42 00000025 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    43 0000002D ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    44 00000031 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    45                              <1> 
    46                              <1> endstruc
    47                              <1> 
    48                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    49                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    52                              <1> ; All disk pathing requests go via the CDS for that drive.
    53                              <1> ; The default drive is the last accessed drive, this number is stored
    54                              <1> ; in the DOS data area.
    55                              <1> ; The CDS is stored as an array with the offset into the array being 
    56                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    57                              <1> ;
    58                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    59                              <1> ;------------------------------------------------------------------------;
    60                              <1> struc cds       ;Current Directory structure
    61 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    62 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    63 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    64 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    65 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    66 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    67                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    68                              <1> ; another, we save the number of chars to skip to that deep level).
    69                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    70                              <1> ; Only affects for SUBST drives, not JOIN
    71                              <1> ; Flags: Bit 15 set = Network drive
    72                              <1> ;        Bit 14 set = Physical drive
    73                              <1> ;        Bit 13 set = JOIN'ed drive
    74                              <1> ;        Bit 12 set = SUBST'ed drive
    75                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    76                              <1> endstruc
    77                              <1> ;CDS equates
    78                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    79                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    80                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    81                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    82                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    83                              <1> ;------------------------------------------------------------------------;
    84                              <1> ; The SFT is a way to allow applications to open file handles to files 
    85                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    86                              <1> ; under the first header, and then a second header will be linked to the 
    87                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    88                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    89                              <1> ; using the FCBS= command. Default FCBS=5.
    90                              <1> ;
    91                              <1> ; A file handle describes the file, and the location within the file that
    92                              <1> ; we are reading. The file handle can be manipulated without the file
    93                              <1> ; being in memory, thus allowing the user to access data without needing 
    94                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    95                              <1> ; accessing devices, by treating them as files with their drivers 
    96                              <1> ; responding and translating the manipulations of the file handle itself.
    97                              <1> ; Neither the driver nor the application should see or use the SFT for
    98                              <1> ; the handle, as it is subject to change (and will change when file 
    99                              <1> ; sharing provisions are included). The DOS will make requests to the 
   100                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   101                              <1> ; track of the information in the SFT entry for that handle. 
   102                              <1> ;
   103                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   104                              <1> ; can point to the same file. It all depends on what the applications 
   105                              <1> ; want to do with the File.
   106                              <1> ;
   107                              <1> ; !!!!IMPORTANT!!!!
   108                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   109                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   110                              <1> ;
   111                              <1> ;Each SFT may look like this:
   112                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   113                              <1> ;            |                |
   114                              <1> ;       wNumFiles*sft    wNumFiles*sft
   115                              <1> ;
   116                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   117                              <1> ; System FCBs.
   118                              <1> ;
   119                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   120                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   121                              <1> ;
   122                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   123                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   124                              <1> ;------------------------------------------------------------------------;
   125                              <1> struc sfth   ;System file table header
   126                              <1> ; This is the SFT header.
   127                              <1> ; This structure comes before the start of the first file in the array/table.
   128 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   129 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc sft
   133                              <1> ;This is the file struc itself
   134 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   135 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   136 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   137 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes unit number if a block device
   138 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver header, ELSE DPBptr
   139 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   140 00000013 ????                <1>     .wTime       resw 1    ;File Time, updated on open and writes
   141 00000015 ????                <1>     .wDate       resw 1    ;File Date, updated on open and writes
   142 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   143 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   144 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   145 00000023 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   146 00000027 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   147 0000002F ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   148 00000030 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   149 0000003B ????????????????    <1>     .qSharePtr   resq 1    ;SHARE pointer to previous SFT sharing same file
   150 00000043 ????                <1>     .wMachNum    resw 1    ;SHARE number of network machine opening file
   151 00000045 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   152 0000004D ????                <1>     .wShareRec   resw 1    ;offset within SHARE code segment of sharing record
   153                              <1> ;                           0 means no record
   154                              <1> endstruc
   155                              <1> ;Open Mode equates
   156                              <1> ;Access modes   Bits[2:0]
   157                              <1> ReadAccess      equ 0h
   158                              <1> WriteAccess     equ 1h
   159                              <1> RWAccess        equ 2h
   160                              <1> ;Bit 3 reserved 0
   161                              <1> ;Sharing modes  Bits[6:4]
   162                              <1> CompatShare     equ 0h
   163                              <1> denyRWShare     equ 10h
   164                              <1> denyWriteShare  equ 20h
   165                              <1> denyReadShare   equ 30h
   166                              <1> denyNoneShare   equ 40h
   167                              <1> netFCBShare     equ 70h
   168                              <1> noInherit       equ 80h
   169                              <1> ;Bits 8-12 reserved 0
   170                              <1> 
   171                              <1> diskFullFail    equ 2000h   ;DO NOT USE. IF set, Trigger Int 44h on disk full.
   172                              <1> ;Buffering on writes
   173                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   174                              <1> ;FCB opened file, shouldn't see this as we are depreciating FCB's completely now
   175                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   176                              <1> ;Attribute Byte
   177                              <1> readOnlyFile    equ 1h
   178                              <1> hiddenFile      equ 2h
   179                              <1> systemFile      equ 4h
   180                              <1> volumeLabel     equ 8h
   181                              <1> directoryFile   equ 10h ;Directory entry
   182                              <1> archiveFile     equ 20h
   183                              <1> ;Device Info equates
   184                              <1> ;For a block device, bits [5:0] contain the drive number
   185                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   186                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   187                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   188                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   189                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   190                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   191                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   192                              <1> blokFileNoFlush equ 40h ;Set if file has not yet been accessed (sol no flush!)
   193                              <1> devCharDev      equ 80h ;If set, it is a char device!
   194                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   195                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   196                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   197                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   198                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   199                              <1>  
   200                              <1> ;------------------------------------------------------------------------;
   201                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   202                              <1> ; to an internal buffer, and then copying it to the specified location
   203                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   204                              <1> ; another request for the same sector from the same device is made, so 
   205                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   206                              <1> ; size, selected according to the largest detected sector size during 
   207                              <1> ; the initial loadup.
   208                              <1> ;
   209                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   210                              <1> ;
   211                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   212                              <1> ;------------------------------------------------------------------------;
   213                              <1> 
   214                              <1> struc bufferHdr
   215 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   216 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   217 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   218 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   219 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   220 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   221 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   222 0000001F ????????????????    <1>     .owningFile  resq  1   ;Ptr to SFT/FCBS which owns buff (-1 if not in chain)
   223 00000027 <res 9h>            <1>     .reserved    resb  9   ;Alignment bytes
   224                              <1>     .dataarea:             ;Points to the start of the data area
   225                              <1> endstruc
   226                              <1> ;Buffer Flag equates
   227                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   228                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   229                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   230                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   231                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   232                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   233                              <1> ;Note! A buffer is marked as referenced only when the application 
   234                              <1> ; is done with that buffer OR if a hard error has occured (both read and write)
   235                              <1> ;------------------------------------------------------------------------;
   236                              <1> ; Memory control block for each memory arena
   237                              <1> ;------------------------------------------------------------------------;
   238                              <1> struc mcb
   239 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   240 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   241 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   242 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   243                              <1>     .program:
   244                              <1> endstruc
   245                              <1> ;MCB equates
   246                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   247                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   248                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   249                              <1> mcbMarkCtn      equ "M"
   250                              <1> mcbMarkEnd      equ "Z"
   251                              <1> 
   252                              <1> memFirstFit     equ 0   ;First free block goes to application
   253                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   254                              <1> memLastFit      equ 2   ;Last free block goes to application
   255                              <1> 
   256                              <1> ;Owner = Para aligned address => Owning application PSP
   257                              <1> ;...To consider...
   258                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   259                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   260                              <1> ;------------------------------------------------------------------------;
   261                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   262                              <1> ; following order, thus allowing for return values to be placed in the 
   263                              <1> ; registers by accessing the caller register stack frame.
   264                              <1> ;------------------------------------------------------------------------;
   265                              <1> struc callerFrame
   266 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   267 00000008 ????????????????    <1>     .rbx    resq 1    
   268 00000010 ????????????????    <1>     .rcx    resq 1
   269 00000018 ????????????????    <1>     .rdx    resq 1
   270 00000020 ????????????????    <1>     .rsi    resq 1
   271 00000028 ????????????????    <1>     .rdi    resq 1
   272 00000030 ????????????????    <1>     .rbp    resq 1
   273 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   274 00000040 ????????????????    <1>     .r9     resq 1
   275                              <1> ;Pushed by Processor when invoked via Interrupt
   276 00000048 ????????????????    <1>     .rip    resq 1
   277 00000050 ????????????????    <1>     .cs     resq 1
   278 00000058 ????????????????    <1>     .flags  resq 1
   279                              <1> endstruc
   280                              <1> 
   281                              <1> struc dpl
   282                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   283                              <1> ; server calls
   284 00000000 ????????????????    <1>     .rax    resq 1
   285 00000008 ????????????????    <1>     .rbx    resq 1
   286 00000010 ????????????????    <1>     .rcx    resq 1
   287 00000018 ????????????????    <1>     .rdx    resq 1
   288 00000020 ????????????????    <1>     .rsi    resq 1
   289 00000028 ????????????????    <1>     .rdi    resq 1
   290 00000030 ????????????????    <1>     .r8     resq 1
   291 00000038 ????????????????    <1>     .r9     resq 1
   292 00000040 ????????????????    <1>     .align  resq 1
   293 00000048 ????????????????    <1>     .compID resq 1  ;Computer id, low word used only
   294 00000050 ????????????????    <1>     .procID resq 1  ;Process ID
   295                              <1> endstruc
   296                              <1> 
   297                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   298 00000000 ????????????????    <1>                     resq 1  ;Alignment qword
   299 00000008 ????????????????    <1>     .newBuffers     resq 1  ;New buffers value
   300 00000010 ????????????????    <1>     .newSFTVal      resq 1
   301 00000018 ????????????????    <1>     .newFCBSVal     resq 1
   302 00000020 ????????????????    <1>     .newProtFCBSVal resq 1  ;Number of protected FCBS
   303 00000028 ????????????????    <1>     .newLastdrive   resq 1
   304 00000030 ????????????????    <1>     .newStacks      resq 1  ;Ignored for now
   305 00000038 ????????????????    <1>     .newStackSize   resq 1  ;Ignored for now
   306 00000040 ????????????????    <1>     .newAllocSize   resq 1  ;Used to keep track of reallocation size
   307 00000048 ????????????????    <1>     .cfgHandle      resq 1  ;CONFIG.SYS handle
   308 00000050 ????????????????    <1>     .lastLine       resq 1  ;Set if the last line is current
   309 00000058 ????????????????    <1>     .endPtr         resq 1  ;Pointer to the end of the allocation space
   310 00000060 ????????????????    <1>     .linePtr        resq 1  ;Ptr to line being processed by CONFIG.SYS
   311                              <1> endstruc
   312                              <1> 
   313                              <1> struc filename
   314                              <1> ;8.3 File name struct
   315 00000000 ????????????????    <1>     .fName  resb 8
   316 00000008 ??????              <1>     .fExt   resb 3
   317                              <1> endstruc
   318                              <1> 
   319                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   320 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   321 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   322 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   323 0000000D ????????            <1>     .dirOffset  resd 1  ;32 byte entry within dir cluster
   324 00000011 ????????            <1>     .parDirClus resd 1  ;Parent Directory Cluster number
   325 00000015 ??                  <1>     .attribFnd  resb 1  ;Attrib of file found
   326 00000016 ????                <1>     .fileTime   resw 1  ;File time
   327 00000018 ????                <1>     .fileDate   resw 1  ;File date
   328 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   329 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   330                              <1> endstruc
   331                              <1> 
   332                              <1> struc psp
   333 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   334 00000002 ????????            <1>     .allocSize  resd 1  ;Number of paras in init alloc or when exiting as TSR.
   335 00000006 ????????            <1>                 resd 1  ;Reserved 4 bytes (for now, may recycle later)
   336 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   337 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   338 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   339 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   340 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   341 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   342 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   343 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   344 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   345 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain (used by SHARE)
   346 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   347                              <1> ;Extra handle arrays are grouped into a linked list
   348                              <1> ;The below are in the same place as in DOS
   349 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   350 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   351                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   352 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   353 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   354                              <1> endstruc
   355                              <1> 
   356                              <1> struc clkStruc
   357 00000000 ????                <1>     .dateWord   resw 1
   358 00000002 ??                  <1>     .minutes    resb 1
   359 00000003 ??                  <1>     .hours      resb 1
   360 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   361 00000005 ??                  <1>     .seconds    resb 1
   362                              <1> endstruc
   363                              <1> 
   364                              <1> struc countryStruc
   365 00000000 ????                <1>     .dtfmt     resw 1   ;Date time format (2 bytes)
   366                              <1>                         ;0 = month day year hh:mm:ss
   367                              <1>                         ;1 = day month year hh:mm:ss
   368                              <1>                         ;2 = year month day hh:mm:ss
   369 00000002 ??????????          <1>     .curr      resb 5   ;ASCIIZ Currency symbol (5 chars)
   370 00000007 ????                <1>     .thouSep   resb 2   ;ASCIIZ Thousands separator
   371 00000009 ????                <1>     .dcmlSep   resb 2   ;ASCIIZ Decimal separator
   372 0000000B ????                <1>     .dateSep   resb 2   ;ASCIIZ Date separator
   373 0000000D ????                <1>     .timeSep   resb 2   ;ASCIIZ Time separator
   374 0000000F ??                  <1>     .currFmt   resb 1   ;Currency Format
   375                              <1>                         ;0 = Symbol leads, without space
   376                              <1>                         ;1 = Symbol follows, without space
   377                              <1>                         ;2 = Symbol leads, one space
   378                              <1>                         ;3 = Symbol follows, one space
   379                              <1>                         ;4 = Symbol replace decimal separator
   380 00000010 ??                  <1>     .digtdpt   resb 1   ;Number of digits after the decimal point
   381 00000011 ??                  <1>     .timefmt   resb 1   ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   382 00000012 ????????????????    <1>     .mapaddr   resb 8   ;Case map address (0 is nulptr), needs fixing up
   383 0000001A ????                <1>     .dataSep   resb 2   ;Data list separator
   384 0000001C <res Ah>            <1>     .resv      resb 10  ;Reserve 10 bytes
   385                              <1> endstruc
   386                              <1> 
   387                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   388                              <1> ;for a space of 64Gb
   389                              <1> dosAPTsize  equ 60*4096 ;(APT = Additional Page Tables)
   390                              <1> dosLowBase  equ 600h    ;Low load address
   391                              <1> 
   392                              <1> ;Critical Error AH bitfield equates
   393                              <1> critRead    equ 0h
   394                              <1> critWrite   equ 1h
   395                              <1> critDOS     equ 0h
   396                              <1> critFAT     equ 2h
   397                              <1> critDir     equ 4h
   398                              <1> critData    equ 6h
   399                              <1> critFailOK  equ 8h
   400                              <1> critRetryOK equ 10h
   401                              <1> critIgnorOK equ 20h
   402                              <1> critCharDev equ 80h
   403                              <1> 
   404                              <1> critIgnore  equ 0
   405                              <1> critRetry   equ 1
   406                              <1> critAbort   equ 2
   407                              <1> critFail    equ 3
   408                              <1> 
   409                              <1> ;MISC ASCII control chars
   410                              <1> NUL equ 00h ;^@         | ASCII Null
   411                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   412                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   413                              <1> BEL equ 07h ;^G         | ASCII Bell
   414                              <1> BSP equ 08h ;^H         | ASCII Backspace
   415                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   416                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   417                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   418                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   419                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   420                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   421                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   422                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   423                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   424                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   425                              <1> SPC equ 20h ;Printable  | ASCII Space
   426                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   427                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   428                              <1> 
   429                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   430                              <1> ;Extended Ascii Codes
   431                              <1> eF1     equ 3Bh ;F1 second byte
   432                              <1> eF2     equ 3Ch ;F2 second byte
   433                              <1> eF3     equ 3Dh ;F3 second byte
   434                              <1> eF4     equ 3Eh ;F4 second byte
   435                              <1> eF5     equ 3Fh ;F5 second byte
   436                              <1> eF6     equ 40h ;F6 second byte
   437                              <1> eF7     equ 41h ;F7 second byte
   438                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   439                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   440                              <1> eIns    equ 52h ;Insert second byte
   441                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   442                              <1> 
   443                              <1> ;Default Configuration for the system
   444                              <1> 
   445                              <1> buffersDefault  equ 30
   446                              <1> filesDefault    equ 20
   447                              <1> fcbsDefault     equ 4
   448                              <1> safeFcbsDeflt   equ 0
   449                              <1> lastDriveDeflt  equ 5   
    10                                  %include "./Source/Debug/debSym.inc"
    11                              <1> ;This file will include the debuging symbols
    12                              <1> 
    13                              <1> %define true 1
    14                              <1> %define false 0
    15                              <1> 
    16                              <1> ;Switch the DEBUG to false in production!
    17                              <1> %define DEBUG false
    18                              <1> %define DPBINFO false
    19                              <1> %define REGS false
    20                              <1> %define ENDSTATUS true
    21                              <1> %define ALLOCTEST false
    22                              <1> 
    23                              <1> 
    24                              <1> ;Use this space as the debug stack
    25                              <1> %define debStackTop 80000h
    11                                  %include "./Source/Include/dosError.inc"
    12                              <1> ;DOS Error codes
    13                              <1> 
    14                              <1> ;Extended Error Codes
    15                              <1> errInvFnc   equ 1   ;Invalid function number
    16                              <1> errFnf      equ 2   ;File not found
    17                              <1> errPnf      equ 3   ;Path not found
    18                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    19                              <1> errAccDen   equ 5   ;Access denied (to resource)
    20                              <1> errBadHdl   equ 6   ;Invalid handle
    21                              <1> errMCBbad   equ 7   ;MCB's destroyed
    22                              <1> errNoMem    equ 8   ;Insufficient memory
    23                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    24                              <1> errBadEnv   equ 10  ;Invalid environment
    25                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    26                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    27                              <1> errInvDat   equ 13  ;Invalid data
    28                              <1> ;           equ 14  ;Reserved
    29                              <1> errBadDrv   equ 15  ;Invalid drive specified
    30                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    31                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    32                              <1> errNoFil    equ 18  ;No more files, no match found
    33                              <1> ;The following are Driver error codes + 19
    34                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    35                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    36                              <1> errUnkUnt   equ 20  ;Unknown Unit
    37                              <1> errDrvNR    equ 21  ;Drive not ready
    38                              <1> errUnkCmd   equ 22  ;Unknown Command
    39                              <1> errCRCerr   equ 23  ;Data (CRC) error
    40                              <1> errBadRLn   equ 24  ;Bad request structure length
    41                              <1> errSekErr   equ 25  ;Seek error
    42                              <1> errUnkMed   equ 26  ;Unknown media type
    43                              <1> errSecNF    equ 27  ;Sector not Found
    44                              <1> errNoPap    equ 28  ;Printer out of paper
    45                              <1> errWF       equ 29  ;Write fault
    46                              <1> errRF       equ 30  ;Read fault
    47                              <1> errGF       equ 31  ;General fault
    48                              <1> ;----------------------------------------------
    49                              <1> ;The following two go inbetween the Disk errors
    50                              <1> errShrVio   equ 32  ;Sharing violations
    51                              <1> errLokVio   equ 33  ;File Lock violation
    52                              <1> ;----------------------------------------------
    53                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    54                              <1> errNoFCB    equ 35  ;FCB unavailable
    55                              <1> errShrFul   equ 36  ;Sharing buffer full
    56                              <1> 
    57                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    58                              <1> 
    59                              <1> errFilExist equ 80  ;File already exists
    60                              <1> errDirExist equ 82  ;Directory already exists
    61                              <1> errFI44     equ 83  ;Fail on INT 44h
    62                              <1> errRedir    equ 84  ;Too many levels of redirection
    63                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    64                              <1> errBadPass  equ 86  ;Bad password
    65                              <1> errBadParam equ 87  ;Bad parameter passed to request
    66                              <1> errNetWrite equ 88  ;Network Write Fault
    67                              <1> ;-----------------------------------------------------------------------------
    68                              <1> ;Error Loci
    69                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    70                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    71                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    72                              <1> eLocChr     equ 4   ;Serial/Character Device error
    73                              <1> eLocMem     equ 5   ;Related to RAM
    74                              <1> ;-----------------------------------------------------------------------------
    75                              <1> ;Error Actions
    76                              <1> eActRet     equ 1   ;Retry
    77                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    78                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    79                              <1> eActAbt     equ 4   ;Abort with cleanup
    80                              <1> eActKil     equ 5   ;Abort without cleanup
    81                              <1> eActIgn     equ 6   ;Ignore error
    82                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    83                              <1> ;-----------------------------------------------------------------------------
    84                              <1> ;Error classes
    85                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    86                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    87                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    88                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    89                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    90                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    91                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    92                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    93                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    94                              <1> eClsLocked  equ 10  ;Resource Locked
    95                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    96                              <1> eClsClash   equ 12  ;Resource already exists!
    97                              <1> eClsUnk     equ 13  ;Unknown class
    12                                  %include "./Source/Include/dosExec.inc"
    13                              <1> ;This include file contains structures related to the EXE format
    14                              <1> ; and the exec frame used when setting up the EXE in memory by 41h/4Bh
    15                              <1> 
    16                              <1> ;Int 41h/4Bh stack frame, used to store values whilst processing a EXE or COM
    17                              <1> ; file.
    18                              <1> execLoadGo  equ 0
    19                              <1> execLoad    equ 1
    20                              <1> execInvld   equ 2
    21                              <1> execOverlay equ 3
    22                              <1> 
    23                              <1> struc execFrame
    24 00000000 ????????????????    <1>     .oldRBP     resq 1  
    25 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    26 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    27 00000018 ????????????????    <1>     .wEnvSize   resq 1  ;Size of the environment block
    28 00000020 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    29 00000028 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    30 00000030 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    31                              <1> 
    32 00000038 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    33 00000040 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    34 00000048 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to new Program Base address (consider removing)
    35 00000050 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    36                              <1> .pProgEP:   ;Program EP, recycle this qword
    37 00000058 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    38 00000060 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    39                              <1> .qRelocVal:  ;Used when computing relocations, Rebasing factor
    40 00000068 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    41                              <1> endstruc
    42                              <1> 
    43                              <1> ;Possible blocks to be pointed to by rbx
    44                              <1> 
    45                              <1> struc execProg 
    46 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    47 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    48 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    49 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    50                              <1> endstruc
    51                              <1> 
    52                              <1> struc loadProg
    53 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    54 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    55 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    56 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    57 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    58 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    59                              <1> endstruc
    60                              <1> 
    61                              <1> struc loadOvly
    62 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    63 00000008 ????????            <1>     .dRelocFct  resd 1  ;Relocation factor for 
    64                              <1> endstruc
    65                              <1> 
    66                              <1> ;----------------------------
    67                              <1> ;   EXE header structures   :
    68                              <1> ;----------------------------
    69                              <1> 
    70                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    71                              <1> dosMagicSignature   equ "MZ"
    72                              <1> dosMagicSignature2  equ "ZM"
    73                              <1> struc imageDosHdr
    74 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    75 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    76 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    77 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    78 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    79 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    80 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    81 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    82 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    83 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    84 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    85 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    86 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    87 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    88 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    89 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    90 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    91 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    92 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    93                              <1> endstruc
    94                              <1> 
    95                              <1> ;Pssobile signatures pointed to by e_lfanew
    96                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    97                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    98                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    99                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
   100                              <1> 
   101                              <1> ;COFF File header, immadiately follows the signature so @ [e_lfanew + 4]
   102                              <1> 
   103                              <1> struc imageFileHeader
   104 00000000 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
   105 00000002 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
   106 00000004 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
   107 00000008 ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
   108 0000000C ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   109 00000010 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   110 00000012 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   111                              <1> endstruc
   112                              <1> 
   113                              <1> ;The only valid values in the .machineType field
   114                              <1> 
   115                              <1> imageFileMachineUnknown equ 0
   116                              <1> imageFileMachineAMD64   equ 08664h 
   117                              <1> 
   118                              <1> ;Optional header, immediately follows COFF header
   119                              <1> 
   120                              <1> struc imageFileOptionalHeader
   121 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   122 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   123 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   124 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   125 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   126 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   127 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   128 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   129 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   130 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   131 00000024 ????????            <1> 	.dFileAlignment             resd 1
   132 00000028 ????                <1> 	.wMajOSVer                  resw 1
   133 0000002A ????                <1> 	.wMinOSVer                  resw 1
   134 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   135 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   136 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   137 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   138 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   139 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   140 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   141 00000040 ????????            <1> 	.dCheckSum                  resd 1
   142 00000044 ????                <1> 	.wSubsystem                 resw 1
   143 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   144 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   145 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   146 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   147 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   148 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   149 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   150                              <1> endstruc
   151                              <1> 
   152                              <1> romMagicNum     equ 0107h
   153                              <1> pe32MagicNum    equ 010Bh
   154                              <1> pe64MagicNum    equ 020Bh
   155                              <1> 
   156                              <1> ;Data directory header structure
   157                              <1> 
   158                              <1> struc imageDataDirectory
   159 00000000 ????????            <1>     .virtualAddress  resd 1
   160 00000004 ????????            <1>     .size    resd 1
   161                              <1> endstruc
   162                              <1> 
   163                              <1> struc baseRelocBlock
   164 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   165 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   166                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   167                              <1> endstruc
   168                              <1> ;Section headers that form the Section Table.
   169                              <1> ;There are wNumberOfSections many entries in this table.
   170                              <1> ;Each entry is one imageSectionHdr
   171                              <1> 
   172                              <1> struc imageSectionHdr       ;size 40 bytes
   173 00000000 ????????????????    <1>     .name                   resb 8
   174 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   175 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   176 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   177 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   178 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   179 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   180 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   181 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   182 00000024 ????????            <1> 	.dCharacteristics       resd 1
   183                              <1> endstruc
   184                              <1> 
   185                              <1> ;Section Hdr characteristics flags 
   186                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   187                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   188                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    13                                  Segment .text align=1   ;Init code
    14                                  %define currSegVBase 0
    15                                  %include "./Source/Sysinit/sysinit.asm"
    16                              <1> ; We arrive here with the following values in the registers.
    17                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    18                              <1> ; dx  = Int 33h boot device number
    19                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    20                              <1> 
    21 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    22 00000002 4C0FB6FA            <1>     movzx r15, dl       ;Save the drive letter in r15
    23 00000006 4989DE              <1>     mov r14, rbx        ;Save next sector number
    24 00000009 488D3514000000      <1>     lea rsi, sysInitldr
    25 00000010 BF00060000          <1>     mov edi, 600h   ;Hardcoded address, 600h
    26 00000015 B940000000          <1>     mov ecx, 512/8      ;TMP: DOS boot device MUST HAVE 512 byte sectors.
    27 0000001A F348A5              <1>     rep movsq   ;Copy over
    28 0000001D B800060000          <1>     mov eax, 600h   ;Push the new address to go to
    29 00000022 50                  <1>     push rax
    30 00000023 C3                  <1>     ret ;Jump to this value (600h + whatever the size here is)
    31                              <1> sysInitldr:
    32                              <1> ;Now the tough part, load DOS to 800
    33 00000024 BE10000000          <1>     mov esi, 10h    ;Use as a loop counter
    34                              <1> .read:
    35 00000029 4488FA              <1>     mov dl, r15b    ;Get Drive number
    36 0000002C 48BB00080000000000- <1>     mov rbx, 800h   ;Load at next 512 byte marker
    36 00000035 00                  <1>
    37 00000036 4489F1              <1>     mov ecx, r14d   ;Get this sector LBA (first sector after BIOS)
    38 00000039 FFC1                <1>     inc ecx         ;and want the next sector (DOS AND BIOS MUST BE CONTIGUOUS)
    39 0000003B B065                <1>     mov al, 65h     ;Load a large number of sectors (about 51.7k)
    40 0000003D B482                <1>     mov ah, 82h     ;Read LBA
    41 0000003F CD33                <1>     int 33h
    42 00000041 7206                <1>     jc .readFail
    43 00000043 6800080000          <1>     push qword 800h
    44 00000048 C3                  <1>     ret   ;No error? Yay, DOS loaded.
    45                              <1> .readFail:
    46 00000049 FFCE                <1>     dec esi
    47 0000004B 75DC                <1>     jnz .read
    48 0000004D 488D2D09000000      <1>     lea rbp, .msg   ;Print error message
    49 00000054 B804130000          <1>     mov eax, 1304h
    50 00000059 CD30                <1>     int 30h
    51 0000005B CD38                <1>     int 38h ;If an error, fall into SYSDEBUG
    52 0000005D 5343502F444F53204C- <1> .msg db "SCP/DOS Load Error",0Ah,0Dh,0
    52 00000066 6F6164204572726F72- <1>
    52 0000006F 0A0D00              <1>
    53 00000072 000000000000000000- <1>     db 100h-($-$$) dup 00h ;Fill with nulls  
    53 0000007B 000000000000000000- <1>
    53 00000084 000000000000000000- <1>
    53 0000008D 000000000000000000- <1>
    53 00000096 000000000000000000- <1>
    53 0000009F 000000000000000000- <1>
    53 000000A8 000000000000000000- <1>
    53 000000B1 000000000000000000- <1>
    53 000000BA 000000000000000000- <1>
    53 000000C3 000000000000000000- <1>
    53 000000CC 000000000000000000- <1>
    53 000000D5 000000000000000000- <1>
    53 000000DE 000000000000000000- <1>
    53 000000E7 000000000000000000- <1>
    53 000000F0 000000000000000000- <1>
    53 000000F9 00000000000000      <1>
    54                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    55                              <1>     ;Store space for a static PSP
    56 00000100 000000000000000000- <1>     db 100h dup 00h
    56 00000109 000000000000000000- <1>
    56 00000112 000000000000000000- <1>
    56 0000011B 000000000000000000- <1>
    56 00000124 000000000000000000- <1>
    56 0000012D 000000000000000000- <1>
    56 00000136 000000000000000000- <1>
    56 0000013F 000000000000000000- <1>
    56 00000148 000000000000000000- <1>
    56 00000151 000000000000000000- <1>
    56 0000015A 000000000000000000- <1>
    56 00000163 000000000000000000- <1>
    56 0000016C 000000000000000000- <1>
    56 00000175 000000000000000000- <1>
    56 0000017E 000000000000000000- <1>
    56 00000187 000000000000000000- <1>
    56 00000190 000000000000000000- <1>
    56 00000199 000000000000000000- <1>
    56 000001A2 000000000000000000- <1>
    56 000001AB 000000000000000000- <1>
    56 000001B4 000000000000000000- <1>
    56 000001BD 000000000000000000- <1>
    56 000001C6 000000000000000000- <1>
    56 000001CF 000000000000000000- <1>
    56 000001D8 000000000000000000- <1>
    56 000001E1 000000000000000000- <1>
    56 000001EA 000000000000000000- <1>
    56 000001F3 000000000000000000- <1>
    56 000001FC 00000000            <1>
    57                              <1> ;END OF FIRST SECTOR!!
    58                              <1> ;DOS SYSINIT BEGINS HERE
    59                              <1> ;First move the alignment of the DOSSEG to 4Kb
    60                              <1> initBegin:
    61 00000200 FC                  <1>     cld ;Ensure all writes are done the right way firstly!
    62 00000201 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    63 00000206 0F32                <1>     rdmsr
    64 00000208 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    65 0000020A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    66 0000020E 89C7                <1>     mov edi, eax        ;Get the low dword in
    67 00000210 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    68 00000213 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    69 0000021A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    70 00000221 89F8                <1>     mov eax, edi
    71 00000223 4889FA              <1>     mov rdx, rdi
    72 00000226 48C1EA20            <1>     shr rdx, 20h
    73 0000022A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    74                              <1> ;------------------------------------------------;
    75                              <1> ;              Connect Debugger                  ;
    76                              <1> ;------------------------------------------------;
    77                              <1> %if DEBUG
    78                              <1> ;Only connect if in debug mode
    79                              <1>     mov eax, 0C501h ;Connect debugger
    80                              <1>     int 35h
    81                              <1> %endif
    82                              <1> ;------------------------------------------------;
    83                              <1> ;           Sanitise the data area               ;
    84                              <1> ;------------------------------------------------;
    85                              <1> ; This call initialises ALL fields in the DOS    ;
    86                              <1> ; data area with 0's. Thus any fields, which     ;
    87                              <1> ; need to be initialised with a 0 value, are     ;
    88                              <1> ; initialised for free.                          ;
    89                              <1> ;------------------------------------------------;
    90 0000022C B9[A5DA0300]        <1>     mov ecx, dSegLen
    91 00000231 30C0                <1>     xor al, al
    92 00000233 57                  <1>     push rdi    ;Temp save rdi on the stack
    93 00000234 F3AA                <1>     rep stosb
    94 00000236 5F                  <1>     pop rdi
    95                              <1> ;------------------------------------------------;
    96                              <1> ;          Start saving Basic DOS data           ;
    97                              <1> ;------------------------------------------------;
    98 00000237 6444883C25-         <1>     mov byte fs:[bootDrive], r15b ;Save the boot drive in memory
    98 0000023C [10C00300]          <1>
    99                              <1> ;Copy DOS to its final resting place
   100 00000240 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
   100 00000245 [00C00300]          <1>
   101 00000249 6448893425-         <1>     mov qword fs:[biosUBase], rsi
   101 0000024E [08C00300]          <1>
   102 00000252 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
   103 00000255 4881C7[A5DA0300]    <1>     add rdi, dSegLen ;Move destination past end of data area
   104 0000025C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
   105 00000263 B900100000          <1>     mov ecx, 1000h
   106 00000268 F348A5              <1>     rep movsq
   107                              <1> 
   108 0000026B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
   109 0000026D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
   110 00000271 664489C0            <1>     mov ax, r8w
   111 00000275 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
   112 0000027D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
   113 00000285 64C60425[7EC00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
   113 0000028D 05                  <1>
   114 0000028E 64C60425[A3C00300]- <1>     mov byte fs:[numFiles], 5      ;Default 20 files, at start 5
   114 00000296 05                  <1>
   115 00000297 64C60425[7FC00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
   115 0000029F 01                  <1>
   116 000002A0 6466C70425-         <1>     mov word fs:[shareCount], 3    ;Retry the repeat 3 times before failing
   116 000002A5 [25C00300]0300      <1>
   117 000002AB 6466C70425-         <1>     mov word fs:[shareDelay], 1    ;Go through one multiple of countdown loop
   117 000002B0 [27C00300]0100      <1>
   118                              <1>     ;If no detected Int 33h devices, halt 
   119 000002B6 49C1E810            <1>     shr r8, 2*8
   120 000002BA 4584C0              <1>     test r8b, r8b
   121 000002BD 0F8405130000        <1>     jz errorInit
   122                              <1> ;------------------------------------------------;
   123                              <1> ;          Add additional page tables            ;
   124                              <1> ;------------------------------------------------;
   125                              <1> ;This will allow for up to 64Gb of addressible space
   126 000002C3 4889EF              <1>     mov rdi, rbp
   127                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
   128 000002C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
   129 000002CB 57                  <1>     push rdi
   130 000002CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
   130 000002D5 00                  <1>
   131                              <1> pdtLoop:
   132 000002D6 48AB                <1>     stosq
   133 000002D8 480500002000        <1>     add rax, 200000h
   134 000002DE FFC9                <1>     dec ecx
   135 000002E0 75F4                <1>     jnz pdtLoop
   136 000002E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
   137                              <1> ;Now we add every 4kb page to the page directory pointer table
   138                              <1> ;15 4kb pages to consider
   139 000002E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
   140 000002E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
   141 000002E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
   142 000002F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
   143 000002F7 B93C000000          <1>     mov ecx, 60
   144 000002FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   145                              <1> pdptLoop:
   146 00000302 48AB                <1>     stosq
   147 00000304 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   148 0000030A FFC9                <1>     dec ecx
   149 0000030C 75F4                <1>     jnz pdptLoop
   150 0000030E 0F20DF              <1>     mov rdi, cr3
   151 00000311 0F22DF              <1>     mov cr3, rdi
   152                              <1> ;------------------------------------------------;
   153                              <1> ;                   MCB inits                    ;
   154                              <1> ;------------------------------------------------;
   155                              <1> mcbInit:
   156 00000314 B820E80000          <1>     mov eax, 0E820h
   157 00000319 CD35                <1>     int 35h
   158                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   159 0000031B E804010000          <1>     call .mcbFindAddress
   160 00000320 7349                <1>     jnc .mcbi1  ;If found, proceed
   161                              <1>     ;Here, we try use E801h
   162 00000322 B801E80000          <1>     mov eax, 0E801h
   163 00000327 CD35                <1>     int 35h
   164 00000329 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   165 0000032C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   166 0000032F 85C0                <1>     test eax, eax
   167 00000331 741B                <1>     jz .worst
   168 00000333 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   169 00000336 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   170 00000339 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   171 00000341 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx
   172 00000349 E909010000          <1>     jmp mcbBuild
   173                              <1> .worst:
   174                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   175 0000034E B800002000          <1>     mov eax, 200000h
   176 00000353 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   176 00000358 [08C00300]          <1>
   177 0000035C 29D8                <1>     sub eax, ebx
   178 0000035E 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   179 00000366 E9EC000000          <1>     jmp mcbBuild 
   180                              <1> .mcbi1:
   181 0000036B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   182 0000036E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   182 00000377 00                  <1>
   183 00000378 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   184 0000037C 0F85C2000000        <1>     jne .mcbFail
   185 00000382 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   186                              <1>     ;PCI hole always exists so this value will always be a dword
   187 00000386 64890425[13C00300]  <1>     mov dword fs:[loProtMem], eax
   188 0000038E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   189 00000391 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   190 00000394 4881FB00000001      <1>     cmp rbx, 1000000h  
   191 0000039B 773C                <1>     ja .skipISA
   192                              <1> ;Here we deal with ISA hole issues
   193 0000039D B820E80000          <1>     mov eax, 0E820h
   194 000003A2 CD35                <1>     int 35h
   195 000003A4 48B800000001000000- <1>     mov rax, 1000000h
   195 000003AD 00                  <1>
   196 000003AE E871000000          <1>     call .mcbFindAddress
   197 000003B3 0F829E000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   198 000003B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   198 000003C2 00                  <1>
   199 000003C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   200 000003C7 0F858A000000        <1>     jne mcbBuild  
   201 000003CD 488B5808            <1>     mov rbx, qword [rax + 8]
   202 000003D1 64891C25[17C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   203                              <1> .skipISA:
   204 000003D9 B820E80000          <1>     mov eax, 0E820h
   205 000003DE CD35                <1>     int 35h
   206 000003E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   206 000003E9 00                  <1>
   207 000003EA E835000000          <1>     call .mcbFindAddress
   208 000003EF 7266                <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   209 000003F1 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   209 000003FA 00                  <1>
   210 000003FB 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   211 000003FF 7556                <1>     jne mcbBuild   
   212 00000401 488B5808            <1>     mov rbx, qword [rax + 8]
   213                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   214 00000405 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   214 0000040E 00                  <1>
   215 0000040F 4839CB              <1>     cmp rbx, rcx
   216 00000412 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   217 00000416 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   217 0000041B [1BC00300]          <1>
   218 0000041F E933000000          <1>     jmp mcbBuild
   219                              <1> .mcbFindAddress:
   220                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   221                              <1> ;Entry: rax = Address of arena to search for
   222                              <1> ;       rsi = Pointer to memory map
   223                              <1> ;       ecx = Number of 24 byte entries
   224                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   225                              <1> ;       CF=CY : value in rax not found
   226 00000424 56                  <1>     push rsi
   227 00000425 51                  <1>     push rcx
   228 00000426 50                  <1>     push rax
   229                              <1> .mfa0:
   230 00000427 483B06              <1>     cmp rax, qword [rsi]
   231 0000042A 7410                <1>     je .mcbAddressFound
   232 0000042C 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   233 00000433 FFC9                <1>     dec ecx
   234 00000435 79F0                <1>     jns .mfa0
   235                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   236 00000437 58                  <1>     pop rax
   237 00000438 59                  <1>     pop rcx
   238 00000439 5E                  <1>     pop rsi
   239 0000043A F9                  <1>     stc
   240 0000043B C3                  <1>     ret
   241                              <1> .mcbAddressFound:
   242 0000043C 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   243 0000043F 59                  <1>     pop rcx ;Pop old rax value off
   244 00000440 59                  <1>     pop rcx
   245 00000441 5E                  <1>     pop rsi
   246 00000442 F8                  <1>     clc
   247 00000443 C3                  <1>     ret
   248                              <1> .mcbFail:
   249 00000444 488D2DB3110000      <1>     lea rbp, mcbFailmsg
   250 0000044B B804130000          <1>     mov eax, 1304h
   251 00000450 CD30                <1>     int 30h
   252 00000452 E971110000          <1>     jmp errorInit
   253                              <1> 
   254                              <1> mcbBuild:
   255                              <1> ;Actually build the MCB chain here
   256                              <1> ;Start by computing the difference between userbase and DOS area
   257                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   258 00000457 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   258 0000045C [08C00300]          <1>
   259 00000460 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   260 00000467 56                  <1>     push rsi    ;Save ptr
   261 00000468 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   262 0000046F 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   263 00000472 64293425[13C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   264 0000047A 5B                  <1>     pop rbx
   265 0000047B C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   266 0000047E 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   267 00000486 648B3425[13C00300]  <1>     mov esi, dword fs:[loProtMem]
   268 0000048E C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   269 00000491 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   270 00000494 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   270 00000499 [39C00300]          <1>
   271                              <1> 
   272                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   273 0000049D 64813C25[17C00300]- <1>     cmp dword fs:[hiProtMem], 0
   273 000004A5 00000000            <1>
   274 000004A9 746E                <1>     jz .skipISA
   275                              <1>     ;Here if an ISA hole exists, place a MCB around it
   276 000004AB 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   277                              <1>     ;Remove one MCB worth of space from alloc
   278 000004B2 31C9                <1>     xor ecx, ecx
   279 000004B4 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   280 000004B7 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   281 000004BD C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   282 000004C0 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   283 000004C3 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   284 000004C6 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   285 000004C9 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   286 000004D1 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   286 000004DA 00                  <1>
   287 000004DB 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   288 000004DE 480510000000        <1>     add rax, mcb_size
   289 000004E4 4829C1              <1>     sub rcx, rax    ;Take their difference
   290 000004E7 C1E904              <1>     shr ecx, 4
   291 000004EA 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   292 000004ED C1E104              <1>     shl ecx, 4  ;Get bytes again
   293 000004F0 4881C310000000      <1>     add rbx, mcb_size
   294 000004F7 4801CB              <1>     add rbx, rcx
   295                              <1>     ;RBX should now be at 16Mb
   296 000004FA C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   297 000004FD 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   298 00000505 648B0C25[17C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   299 0000050D C1E904              <1>     shr ecx, 4  ;Get paragraphs
   300 00000510 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   301 00000516 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   302                              <1> .skipISA:
   303                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   304                              <1>     ;rbx points to a block with "Z" marker
   305 00000519 64813C25[1BC00300]- <1>     cmp dword fs:[longMem], 0
   305 00000521 00000000            <1>
   306 00000525 7470                <1>     jz .exit
   307                              <1>     ;Add PCI hole MCB
   308 00000527 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   309                              <1>     ;Remove one MCB worth of space from alloc
   310 0000052E 31C9                <1>     xor ecx, ecx
   311 00000530 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   312 00000533 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   313 00000539 C1E104              <1>     shl ecx, 4  ;Get bytes
   314 0000053C C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   315 0000053F 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   316 00000542 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   317 00000545 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   318 0000054D 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   318 00000556 00                  <1>
   319 00000557 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   320 0000055A 480510000000        <1>     add rax, mcb_size
   321 00000560 4829C1              <1>     sub rcx, rax    ;Take their difference
   322 00000563 C1E904              <1>     shr ecx, 4
   323 00000566 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   324 00000569 C1E104              <1>     shl ecx, 4  ;Get bytes again
   325 0000056C 4881C310000000      <1>     add rbx, mcb_size
   326 00000573 4801CB              <1>     add rbx, rcx
   327                              <1>     ;RBX should now be at 4Gb
   328 00000576 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   329 00000579 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   330 00000581 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   330 00000586 [1BC00300]          <1>
   331 0000058A 48C1E904            <1>     shr rcx, 4
   332 0000058E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   333 00000594 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   334                              <1> .exit:
   335                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   336 00000597 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   337                              <1> ;------------------------------------------------;
   338                              <1> ;          Kernel inits and adjustments          ;
   339                              <1> ;------------------------------------------------;
   340                              <1> ;Adjust Interrupt Entries Int 00h-15h
   341                              <1> adjExceptions:
   342 0000059E 30DB                <1>     xor bl, bl
   343 000005A0 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   344 000005A5 CD35                <1>     int 35h
   345 000005A7 31C9                <1>     xor ecx, ecx    ;Start from interrupt 00h
   346 000005A9 488D3D04110000      <1>     lea rdi, exceptData
   347 000005B0 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   348                              <1> .ai0:
   349 000005B2 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   350 000005B7 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   351 000005BA 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   352                              <1> .ai1:
   353 000005BD CD35                <1>     int 35h
   354 000005BF 4881C708000000      <1>     add rdi, 8
   355 000005C6 FFC1                <1>     inc ecx
   356 000005C8 81F915000000        <1>     cmp ecx, 21
   357 000005CE 75E2                <1>     jne .ai0
   358                              <1> ;Adjust Interrupt Entries Int 40h-49h
   359                              <1> adjInts:
   360 000005D0 B340                <1>     mov bl, 40h
   361 000005D2 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   362 000005D7 CD35                <1>     int 35h
   363 000005D9 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   364 000005DE 488D3D7F110000      <1>     lea rdi, intData
   365 000005E5 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   366                              <1> .ai0:
   367 000005E7 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   368 000005EC 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   369 000005EF 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   370                              <1> .ai1:
   371 000005F2 CD35                <1>     int 35h
   372 000005F4 4881C708000000      <1>     add rdi, 8
   373 000005FB FFC1                <1>     inc ecx
   374 000005FD 81F950000000        <1>     cmp ecx, 50h
   375 00000603 75E2                <1>     jne .ai0
   376                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   377                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   378                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   379                              <1>     %if DEBUG
   380                              <1> debugPopUpMsg:
   381                              <1>     push rbx
   382                              <1>     push rbp
   383                              <1>     push rcx
   384                              <1>     push rdx
   385                              <1>     mov ecx, 53 ;A large number of lines
   386                              <1>     xor edx, edx    ;COM 1
   387                              <1> .cls:
   388                              <1>     mov eax, 010Ah ;Transmit Line feed
   389                              <1>     int 34h
   390                              <1>     dec ecx
   391                              <1>     jnz .cls
   392                              <1>     lea rbx, qword [debPrintNullString + rbp]
   393                              <1>     lea rbp, .msg
   394                              <1>     call rbx
   395                              <1>     jmp short .exit
   396                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   397                              <1> .exit:
   398                              <1>     pop rdx
   399                              <1>     pop rcx
   400                              <1>     pop rbp
   401                              <1>     pop rbx
   402                              <1>     %endif
   403                              <1> 
   404                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   405 00000605 488D15BC0F0000      <1>     lea rdx, errorInit ;Get segment start address
   406 0000060C B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   407 00000611 CD41                <1>     int 41h
   408 00000613 488D15AE0F0000      <1>     lea rdx, errorInit ;Get segment start address
   409 0000061A B844250000          <1>     mov eax, 2544h
   410 0000061F CD41                <1>     int 41h
   411                              <1> ;------------------------------------------------;
   412                              <1> ;          Driver Adjustments and inits          ;
   413                              <1> ;------------------------------------------------;
   414                              <1> ;Modify the pointers in nData before putting them in the data area
   415 00000621 48012DBC110000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   416 00000628 48012DBF110000      <1>     add qword [nData + drvHdr.strPtr], rbp
   417 0000062F 48012DC0110000      <1>     add qword [nData + drvHdr.intPtr], rbp
   418                              <1> ;Copy the Null driver to its location in Sysvars
   419 00000636 B922000000          <1>     mov ecx, drvHdr_size
   420 0000063B 488D35A2110000      <1>     lea rsi, qword [nData]
   421 00000642 488DBD[80C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   422 00000649 F3A4                <1>     rep movsb   
   423                              <1> 
   424                              <1> ;Adjust the addresses in the other driver headers 
   425 0000064B 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   425 0000064D [9D72000000000000]  <1>
   426 00000655 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   427 0000065A 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   428                              <1> adjDrivers:
   429 0000065E E8490F0000          <1>     call adjustDrvHdr
   430 00000663 E2F9                <1>     loop adjDrivers
   431                              <1> ;Open NUL
   432                              <1> ;NUL opened
   433                              <1> ;Open CON
   434                              <1> conInit:    ;Rather than keeping this resident... do it here
   435                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   436 00000665 488D95[88750000]    <1>     lea rdx, qword [rbp + fastOutput]
   437 0000066C B849250000          <1>     mov eax, 2549h
   438 00000671 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   439 00000673 488D95[90750000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   440 0000067A B83B250000          <1>     mov eax, 253Bh
   441 0000067F CD41                <1>     int 41h ;Hook int 3Bh
   442                              <1> .ci0:
   443 00000681 B401                <1>     mov ah, 01      ;Get buffer status
   444 00000683 CD36                <1>     int 36h
   445 00000685 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   446 00000687 30E4                <1>     xor ah, ah
   447 00000689 CD36                <1>     int 36h ;Read key to flush from buffer
   448 0000068B EBF4                <1>     jmp short .ci0
   449                              <1> .ci1:
   450 0000068D B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   451 00000692 CD30                <1>     int 30h
   452 00000694 B402                <1>     mov ah, 02h
   453 00000696 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   454 00000698 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   455 0000069A CD30                <1>     int 30h
   456 0000069C B707                <1>     mov bh, 07h     ;Grey/Black attribs
   457 0000069E B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   458 000006A3 CD30                <1>     int 30h
   459                              <1> 
   460                              <1>     ;Save ptr to ConHdr in Sysvars
   461 000006A5 488D85[9D720000]    <1>     lea rax, qword [rbp + conHdr]
   462 000006AC 6448890425-         <1>     mov qword fs:[vConPtr], rax
   462 000006B1 [59C00300]          <1>
   463                              <1> 
   464                              <1>     ;Fix the ext ESC function handler address
   465 000006B5 488D85[EE280000]    <1>     lea rax, qword [rbp + editKeys]
   466 000006BC 6448890425-         <1>     mov qword fs:[extKeyFunc], rax
   466 000006C1 [5A000000]          <1>
   467                              <1> 
   468                              <1> ;CLOCK init prock
   469                              <1> ;Set the time and date using the RTC (if present)
   470                              <1> clkInit:
   471                              <1>    ;Save ptr to ClkHdr in Sysvars first
   472 000006C5 488D85[03730000]    <1>     lea rax, qword [rbp + clkHdr]
   473 000006CC 6448890425-         <1>     mov qword fs:[clockPtr], rax
   473 000006D1 [51C00300]          <1>
   474                              <1> ;CH - Hours, in BCD
   475                              <1> ;CL - Minutes, in BCD
   476                              <1> ;DH - Seconds, in BCD
   477 000006D5 B402                <1>     mov ah, 02  ;Read RTC Time
   478 000006D7 CD3A                <1>     int 3Ah
   479 000006D9 7271                <1>     jc .clkEnd  ;if error, just exit
   480                              <1>     ;Now set the driver time. Convert From BCD to Decimal
   481 000006DB 0FB6C5              <1>     movzx eax, ch   ;Hours
   482 000006DE E84D000000          <1>     call .bcd2Bin
   483 000006E3 88C5                <1>     mov ch, al
   484 000006E5 0FB6C1              <1>     movzx eax, cl     ;Mins
   485 000006E8 E843000000          <1>     call .bcd2Bin
   486 000006ED 88C1                <1>     mov cl, al
   487 000006EF 0FB6C6              <1>     movzx eax, dh   ;Seconds
   488 000006F2 E839000000          <1>     call .bcd2Bin
   489 000006F7 86E0                <1>     xchg ah, al ;Move seconds to ah, and 0 to al (hseconds)
   490 000006F9 89C2                <1>     mov edx, eax
   491 000006FB B42D                <1>     mov ah, 2Dh ;DOS Set Time
   492 000006FD CD41                <1>     int 41h
   493                              <1> ;Now get the date from RTC
   494                              <1> ;CL - Year, in BCD
   495                              <1> ;DH - Month, in BCD
   496                              <1> ;DL - Day, in BCD
   497 000006FF B404                <1>     mov ah, 04  ;Read RTC Date
   498 00000701 CD3A                <1>     int 3Ah
   499 00000703 7247                <1>     jc .clkEnd
   500                              <1> ;Year from RTC is assumed to be after 2000 (coz, you know... its 2022)
   501 00000705 0FB6C1              <1>     movzx eax, cl   ;Convert Year to Binary
   502 00000708 E823000000          <1>     call .bcd2Bin
   503 0000070D 0FB6C8              <1>     movzx ecx, al   ;Zero extend to ecx (because ch needs to be 0)
   504 00000710 81C114000000        <1>     add ecx, 20  ;Add 20 years to turn it to a year offset from 1980
   505 00000716 0FB6C6              <1>     movzx eax, dh   ;Get Months
   506 00000719 E812000000          <1>     call .bcd2Bin
   507 0000071E 88C6                <1>     mov dh, al  
   508 00000720 0FB6C2              <1>     movzx eax, dl   ;Get day
   509 00000723 E808000000          <1>     call .bcd2Bin
   510 00000728 88C2                <1>     mov dl, al
   511 0000072A B42B                <1>     mov ah, 2Bh ;DOS Set Date
   512 0000072C CD41                <1>     int 41h
   513 0000072E EB1C                <1>     jmp short .clkEnd
   514                              <1> .bcd2Bin:
   515                              <1> ;Converts a packed BCD value in al (zx to eax) to a decimal value in eax
   516 00000730 51                  <1>     push rcx
   517 00000731 89C1                <1>     mov ecx, eax
   518 00000733 250F000000          <1>     and eax, 0Fh ;Delete the upper nybble from al
   519 00000738 81E1F0000000        <1>     and ecx, 0F0h    ;Isolate the second digit (high nybble)
   520 0000073E 67E309              <1>     jecxz .b2bexit ;Exit if this is zero
   521 00000741 C1E904              <1>     shr ecx, 4   ;Shift it to the low nybble
   522                              <1> .b2blp:
   523 00000744 040A                <1>     add al, 10  ;Otherwise, keep adding 10  
   524 00000746 FFC9                <1>     dec ecx
   525 00000748 75FA                <1>     jnz .b2blp
   526                              <1> .b2bexit:
   527 0000074A 59                  <1>     pop rcx
   528 0000074B C3                  <1>     ret
   529                              <1> .clkEnd:
   530                              <1> ;------------------------------------------------;
   531                              <1> ;         Link DOS to temporary Buffer           ;
   532                              <1> ;------------------------------------------------;
   533                              <1> tempBufferInit:
   534 0000074C 488DBD[E0020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   535 00000753 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   535 00000758 [63C00300]          <1>
   536 0000075C 31C0                <1>     xor eax, eax
   537 0000075E 48FFC8              <1>     dec rax
   538 00000761 48AB                <1>     stosq   ;.nextBufPtr, end of list
   539 00000763 AA                  <1>     stosb   ;.driveNumber, Free entry
   540 00000764 48FFC0              <1>     inc rax
   541 00000767 AA                  <1>     stosb   ;.bufferFlags, No flags
   542                              <1> ;------------------------------------------------;
   543                              <1> ;         Init msd driver, create DPB            ;
   544                              <1> ;------------------------------------------------;
   545                              <1> storageInits:
   546                              <1> ;First save dpb pointer in sysvars
   547 00000768 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstDPB]
   548 0000076F 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   548 00000774 [41C00300]          <1>
   549                              <1> ;Open Mass Storage
   550 00000778 E889100000          <1>     call diskInit
   551 0000077D 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   552 00000780 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
   553 00000788 84C0                <1>     test al, al ;If no media with valid filesystems were detected, stop boot
   554 0000078A 0F84380E0000        <1>     jz errorInit
   555 00000790 488D95[777C0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   556 00000797 30C9                <1>     xor cl, cl  ;Clear counter
   557 00000799 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   557 0000079E [41C00300]          <1>
   558                              <1> .si0:   
   559 000007A2 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   560 000007A5 B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   561 000007A7 CD41                <1>     int 41h
   562                              <1> ;Add other data to DPB
   563 000007A9 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   564 000007AC 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   565 000007AF 50                  <1>     push rax
   566 000007B0 488D87[25730000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   567 000007B7 4889451B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   568 000007BB 58                  <1>     pop rax
   569 000007BC FEC1                <1>     inc cl
   570 000007BE 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   571 000007C0 7416                <1>     je .si1
   572 000007C2 50                  <1>     push rax
   573 000007C3 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   574 000007C7 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   575 000007CB 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   576 000007CE 58                  <1>     pop rax
   577 000007CF 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   578 000007D6 EBCA                <1>     jmp short .si0
   579                              <1> .si1:
   580                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   581 000007D8 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   582 000007E0 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   583                              <1> ;------------------------------------------------;
   584                              <1> ;          Find largest sector size              ;
   585                              <1> ;------------------------------------------------;
   586                              <1> sectorSizeSearch:
   587                              <1> ;Done by reading BPB's for each drive
   588 000007E3 488D9D[777C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   589                              <1>     
   590                              <1>     ;Go thru each block individually
   591 000007EA 31C0                <1>     xor eax, eax
   592 000007EC 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   593                              <1> .findLargest:
   594 000007EF 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   595 000007F3 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   596 000007F8 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   597 000007FF 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   598 00000802 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   599 00000805 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   600 00000807 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   600 0000080C [61C00300]          <1>
   601                              <1> ;------------------------------------------------;
   602                              <1> ;                CDS array inits                 ;
   603                              <1> ;------------------------------------------------;
   604 00000810 B905000000          <1>     mov ecx, 5    ;Use as a counter, build 5 CDS entries
   605 00000815 488DBD[19010000]    <1>     lea rdi, qword [rbp + cdsArray] ;Setup array
   606 0000081C E802000000          <1>     call makeCDSArray
   607 00000821 EB50                <1>     jmp short initialCDSWritten ;Go past the function
   608                              <1> makeCDSArray:
   609                              <1> ;Input: ecx = Size of array
   610                              <1> ;       rdi = Pointer to the start of the CDS array
   611                              <1> ;Ouput: rdi = first byte past the end of the table
   612 00000823 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   612 00000828 [6BC00300]          <1>
   613 0000082C 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]
   613 00000831 [41C00300]          <1>
   614 00000835 B8413A5C00          <1>     mov eax, 005C3A41h      ;"A:\"+NULL char
   615                              <1> .tempCDS:
   616 0000083A 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax
   617 0000083C 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   618 00000840 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir for all!
   619 00000847 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the X:
   620 0000084D 31D2                <1>     xor edx, edx    ;Use edx for flags
   621 0000084F 4881FBFFFFFFFF      <1>     cmp rbx, -1 ;Is rbx an invalid DPB ptr?
   622 00000856 7409                <1>     je .skipValidCDS
   623 00000858 BA00400000          <1>     mov edx, cdsValidDrive  ;If not, set drive to valid and...
   624 0000085D 488B5B25            <1>     mov rbx, qword [rbx + dpb.qNextDPBPtr]  ;... go to next DPB
   625                              <1> .skipValidCDS:
   626 00000861 66895743            <1>     mov word [rdi + cds.wFlags], dx ;Store the flags now
   627 00000865 FFC0                <1>     inc eax ;Increment the drive letter
   628 00000867 4881C75B000000      <1>     add rdi, cds_size   ;Goto next array entry
   629 0000086E FFC9                <1>     dec ecx
   630 00000870 75C8                <1>     jnz .tempCDS
   631 00000872 C3                  <1>     ret
   632                              <1> initialCDSWritten:
   633                              <1> ;------------------------------------------------;
   634                              <1> ;     Set up general PSP areas and DOS vars      ;
   635                              <1> ;------------------------------------------------;
   636                              <1> ;Additional DOS Vars init and fixups
   637 00000873 64C60425[EEC30300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   637 0000087B FF                  <1>
   638 0000087C 64C60425[B6C30300]- <1>     mov byte fs:[switchChar], "/"  ;Default switch char
   638 00000884 2F                  <1>
   639 00000885 488DBD[D1010000]    <1>     lea rdi, qword [rbp + extAsciiTbl]  ;Get the load of dflt extascii tbl
   640 0000088C 6448893C25-         <1>     mov qword fs:[ctryTbl + countryStruc.mapaddr], rdi ;Store in country table
   640 00000891 [2E000000]          <1>
   641                              <1> 
   642                              <1> ;Server Table setup
   643 00000895 488D3D(F5030000)    <1>     lea rdi, serverDispTbl  ;Get pointer to table
   644 0000089C 48893D(6CDA0300)    <1>     mov qword [serverDispTblPtr], rdi   ;Store to use
   645                              <1> 
   646                              <1> ;Set network machine name to... nothing!
   647 000008A3 488DBD[BBC30300]    <1>     lea rdi, qword [rbp + machineName]
   648 000008AA B910000000          <1>     mov ecx, 10h    ;16 chars long
   649 000008AF B020                <1>     mov al, SPC ;Space char
   650 000008B1 F3AA                <1>     rep stosb   ;Fill with space chars
   651                              <1> 
   652                              <1> 
   653                              <1> ;Patch Data Table init
   654 000008B3 488DBD[CBC30300]    <1>     lea rdi, qword [rbp + critPtchTbl]
   655 000008BA 488D85[756A0000]    <1>     lea rax, qword [rbp + dosCrit1Enter]
   656 000008C1 48AB                <1>     stosq   ;Store this address and increment rdi by 8 to next tbl entry
   657 000008C3 488D85[7F6A0000]    <1>     lea rax, qword [rbp + dosCrit1Exit]
   658 000008CA 48AB                <1>     stosq
   659 000008CC 488D85[896A0000]    <1>     lea rax, qword [rbp + dosCrit2Enter]
   660 000008D3 48AB                <1>     stosq
   661 000008D5 488D85[936A0000]    <1>     lea rax, qword [rbp + dosCrit2Exit]
   662 000008DC 48AB                <1>     stosq
   663                              <1> 
   664                              <1> ;Initial PSP Init
   665 000008DE 488D1D1BF8FFFF      <1>     lea rbx, qword [tempPSP]
   666 000008E5 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   666 000008EA [04C40300]          <1>
   667 000008EE 53                  <1>     push rbx
   668 000008EF 4881C380000000      <1>     add rbx, psp.dta
   669 000008F6 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   669 000008FB [FCC30300]          <1>
   670 000008FF 5B                  <1>     pop rbx
   671 00000900 66C703CD40          <1>     mov word [rbx + psp.return], 040CDh ;DOS return function
   672 00000905 66C74350CD41        <1>     mov word [rbx + psp.unixEntry], 041CDh  ;Int 41h!
   673 0000090B C64352CB            <1>     mov byte [rbx + psp.unixEntry + 2], 0CBh    ;Return!
   674 0000090F 48C7430200000000    <1>     mov qword [rbx + psp.allocSize], 0    ;Size of allocation (dummy value)
   675 00000917 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   676 0000091B 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   677 0000091F 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   678 00000923 48B80101010002FFFF- <1>     mov rax, 0FFFFFF0200010101h  ;Store default handles in JFT
   678 0000092C FF                  <1>
   679 0000092D 48AB                <1>     stosq   ;8 bytes
   680 0000092F 31C0                <1>     xor eax, eax
   681 00000931 50                  <1>     push rax    ;Save 0 on the stack
   682 00000932 48FFC8              <1>     dec rax ;Turn into all -1 (free entry)
   683 00000935 48AB                <1>     stosq   ;16 bytes
   684 00000937 AB                  <1>     stosd   ;20 bytes
   685 00000938 58                  <1>     pop rax ;Get 0 back
   686 00000939 4889433E            <1>     mov qword [rbx + psp.envPtr], rax    ;No environment
   687 0000093D 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   688 00000941 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   689 00000945 4889DA              <1>     mov rdx, rbx
   690 00000948 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   691 0000094D CD41                <1>     int 41h
   692 0000094F 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   693 00000953 B843350000          <1>     mov eax, 3543h
   694 00000958 CD41                <1>     int 41h
   695 0000095A 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   696 0000095E B844350000          <1>     mov eax, 3544h
   697 00000963 CD41                <1>     int 41h
   698 00000965 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   699                              <1> 
   700 00000969 B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   701 0000096E 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   702 00000972 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   703                              <1> ;------------------------------------------------;
   704                              <1> ;          Default File Handle Creation          ;
   705                              <1> ;                                                ;
   706                              <1> ;   Note: Devices are opened AUX, CON then PRN   ;
   707                              <1> ;------------------------------------------------;
   708                              <1> defaultFileHandles:
   709                              <1> ;Fill in the default file table entries
   710 00000974 488D9D[1CC10300]    <1>     lea rbx, qword [rbp + firstSftHeader]
   711 0000097B 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   712 00000982 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   713 00000988 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   713 0000098D [49C00300]          <1>
   714 00000991 48BA20202020202020- <1>     mov rdx, 2020202020202020h  ;Prepare the 8 spaces after the default names
   714 0000099A 20                  <1>
   715                              <1> ;GOTO FIRST FILE 
   716 0000099B 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   717                              <1> ;Write AUX
   718 000009A2 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   719 000009A7 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   720 000009AD C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   721 000009B1 C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   722                              <1>     ;No EOF when reading from the device
   723 000009B5 488B85[BF720000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   724 000009BC 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   725                              <1>     ;Ignore disk related fields and Date/Time of open
   726 000009C0 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   727                              <1>     ;11 chars in 8.3 name
   728 000009C4 488D35A70C0000      <1>     lea rsi, auxName
   729 000009CB B903000000          <1>     mov ecx, 3
   730 000009D0 F3A4                <1>     rep movsb   ;Move the three bytes
   731 000009D2 4889D0              <1>     mov rax, rdx
   732 000009D5 48AB                <1>     stosq   ;Eight spaces left to print
   733 000009D7 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   733 000009DC [04C40300]          <1>
   734 000009E0 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   735                              <1> ;GOTO NEXT ENTRY
   736 000009E4 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   737                              <1>     ;Write CON
   738 000009EB 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   739 000009F0 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   740 000009F6 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   741 000009FA C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   742                              <1>     ;No EOF when reading from the device
   743 000009FE 64488B0425-         <1>     mov rax, qword fs:[vConPtr]  ;Get pointer to CON device
   743 00000A03 [59C00300]          <1>
   744 00000A07 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   745                              <1>     ;Ignore disk related fields and Date/Time of open
   746 00000A0B 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   747                              <1>     ;11 chars in 8.3 name
   748 00000A0F 488D35580C0000      <1>     lea rsi, conName
   749 00000A16 B903000000          <1>     mov ecx, 3
   750 00000A1B F3A4                <1>     rep movsb   ;Move the three bytes
   751 00000A1D 4889D0              <1>     mov rax, rdx
   752 00000A20 48AB                <1>     stosq   ;Eight spaces left to print
   753 00000A22 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   753 00000A27 [04C40300]          <1>
   754 00000A2B 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   755                              <1> ;GOTO NEXT ENTRY
   756 00000A2F 4881C34F000000      <1>     add rbx, sft_size   ;Goto next SFT
   757                              <1> ;Write PRN
   758 00000A36 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   759 00000A3B 66C743024200        <1>     mov word [rbx + sft.wOpenMode], denyNoneShare | RWAccess
   760 00000A41 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   761 00000A45 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   762                              <1>     ;Want EOF when reading from to the device
   763 00000A49 488B85[E1720000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   764 00000A50 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   765                              <1>     ;Ignore disk related fields and Date/Time of open
   766 00000A54 488D7B30            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   767                              <1>     ;11 chars in 8.3 name
   768 00000A58 488D35170C0000      <1>     lea rsi, prnName
   769 00000A5F B903000000          <1>     mov ecx, 3
   770 00000A64 F3A4                <1>     rep movsb   ;Move the three bytes
   771 00000A66 4889D0              <1>     mov rax, rdx
   772 00000A69 48AB                <1>     stosq   ;Eight spaces left to print
   773 00000A6B 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   773 00000A70 [04C40300]          <1>
   774 00000A74 48894345            <1>     mov qword [rbx + sft.qPSPOwner], rax
   775                              <1> ;Zero word 0 of entry 4 and 5
   776 00000A78 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 4
   777 00000A7F 31C0                <1>     xor eax, eax
   778                              <1>     ;To save some bytes, clear dword (which encompasses numHandles and openmode
   779                              <1>     ; which is ok as these are empty entries, ready to be used)
   780 00000A81 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   781 00000A83 4881C34F000000      <1>     add rbx, sft_size   ;Goto SFT 5
   782 00000A8A 8903                <1>     mov dword [rbx + sft.wNumHandles], eax
   783                              <1> ;------------------------------------------------;
   784                              <1> ;               Setup Share Hooks                ;
   785                              <1> ;------------------------------------------------;
   786 00000A8C 488DBD[A4C00300]    <1>     lea rdi, qword [rbp + shareHooks]
   787 00000A93 488D9D[60710000]    <1>     lea rbx, qword [rbp + goodDfltShareHook]
   788 00000A9A 488D85[5A710000]    <1>     lea rax, qword [rbp + badDfltShareHook]
   789 00000AA1 48AB                <1>     stosq   ;Store bad for openFileCheck
   790 00000AA3 4893                <1>     xchg rax, rbx
   791 00000AA5 48AB                <1>     stosq   ;Store good for open
   792 00000AA7 48AB                <1>     stosq   ;Store good for close
   793 00000AA9 4893                <1>     xchg rax, rbx
   794                              <1> ;Store bad for close for machine, task, name, lock and unlock file
   795 00000AAB B905000000          <1>     mov ecx, 5
   796 00000AB0 F348AB              <1>     rep stosq
   797 00000AB3 4893                <1>     xchg rax, rbx
   798 00000AB5 48AB                <1>     stosq   ;Store good for check file lock exists
   799 00000AB7 4893                <1>     xchg rax, rbx
   800                              <1> ;Store bad for open file, update fcb from sft and get fst cluster of fcb
   801 00000AB9 B903000000          <1>     mov ecx, 3
   802 00000ABE F348AB              <1>     rep stosq
   803 00000AC1 4893                <1>     xchg rax, rbx
   804 00000AC3 48AB                <1>     stosq   ;Store good for close dup file share
   805 00000AC5 4893                <1>     xchg rax, rbx
   806 00000AC7 48AB                <1>     stosq   ;Store bad for close handles for new file opened 
   807 00000AC9 48AB                <1>     stosq   ;Store bad for update dir information
   808                              <1> ;------------------------------------------------;
   809                              <1> ;             Print Welcome Message              ;
   810                              <1> ;------------------------------------------------;
   811 00000ACB 488D15160B0000      <1>     lea rdx, strtmsg
   812 00000AD2 B409                <1>     mov ah, 09h
   813 00000AD4 CD41                <1>     int 41h    
   814                              <1> ;------------------------------------------------;
   815                              <1> ;               Load CONFIG.SYS                  ;
   816                              <1> ;------------------------------------------------;
   817                              <1> ;Setup stackframe, workout base 
   818 00000AD6 488DBD[45000000]    <1>     lea rdi, qword [rbp + secondDPB]
   819                              <1>     ;Check if this DPB is the last dpb. The first two ALWAYS exist.
   820 00000ADD 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   821 00000AE1 483DFFFFFFFF        <1>     cmp rax, -1 ;Was second DPB the last one?
   822 00000AE7 7421                <1>     je setupFrame   ;If so, jump
   823 00000AE9 4889C7              <1>     mov rdi, rax    ;Move rdi to thirdDPB
   824 00000AEC 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   825 00000AF0 483DFFFFFFFF        <1>     cmp rax, -1 ;Was third DPB the last one?
   826 00000AF6 7412                <1>     je setupFrame   ;If so, jump
   827 00000AF8 4889C7              <1>     mov rdi, rax    ;Move rdi to fourthDPB
   828 00000AFB 488B4725            <1>     mov rax, qword [rdi + dpb.qNextDPBPtr]
   829 00000AFF 483DFFFFFFFF        <1>     cmp rax, -1 ;Was fourth DPB the last one?
   830 00000B05 7403                <1>     je setupFrame   ;If so, jump
   831 00000B07 4889C7              <1>     mov rdi, rax    ;Move rdi to fifthDPB
   832                              <1> setupFrame:
   833 00000B0A 4881C735000000      <1>     add rdi, dpb_size   ;Else, goto end of the dpb rdi points to
   834 00000B11 55                  <1>     push rbp
   835 00000B12 4889E5              <1>     mov rbp, rsp
   836 00000B15 4881EC68000000      <1>     sub rsp, cfgFrame_size
   837 00000B1C 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Store the end pointer here
   838 00000B20 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
   839 00000B28 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
   840 00000B30 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
   841 00000B38 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
   842 00000B40 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
   843                              <1> 
   844 00000B48 648A0425[10C00300]  <1>     mov al, byte fs:[bootDrive]
   845 00000B50 A880                <1>     test al, 80h    ;Was boot drive hard disk?
   846 00000B52 7406                <1>     jz notHDD
   847                              <1> ;Set Current Drive to C:
   848 00000B54 B202                <1>     mov dl, 2
   849 00000B56 B40E                <1>     mov ah, 0Eh ;Select C: Drive
   850 00000B58 CD41                <1>     int 41h
   851                              <1> notHDD:
   852 00000B5A 488D15190B0000      <1>     lea rdx, cfgspec    ;CONFIG.SYS, must be on bootdrive for now
   853 00000B61 B43D                <1>     mov ah, 3Dh ;Open file for reading
   854 00000B63 B000                <1>     mov al, ReadAccess
   855 00000B65 CD41                <1>     int 41h
   856 00000B67 0F8267050000        <1>     jc noCfg  ;If no CONFIG.SYS found, just use defaults that are already setup
   857                              <1> ;------------------------------------------------;
   858                              <1> ;              Process CONFIG.SYS                ;
   859                              <1> ;------------------------------------------------;
   860                              <1> ;Create a stack frame with the following order.
   861                              <1> ;Values greater than max are set to max. Values less than min are set to min.
   862                              <1> ; New Buffers value.        Default = 30, Min = 1, Max = 99
   863                              <1> ; New SFT value.            Default = 20, Min = 8, Max = 254
   864                              <1> ; New FCBS value.           Default = 4,  Min = 4, Max = 254
   865                              <1> ; New protected FCBS value. Default = 0,  Min = 0, Max = New FCBS value
   866                              <1> ; New CDS value.            Default = 5,  Min = 5, Max = 26
   867                              <1> ;
   868                              <1> ;Remember to maintain the base of occupied memory on stack (endPtr)
   869                              <1> ;-------------------------------------------------------------------------;
   870                              <1> ; CONFIG.SYS processing pseudocode:-
   871                              <1> ;
   872                              <1> ; _START:
   873                              <1> ; Read file one byte at a time a until a EOF or CR encountered.
   874                              <1> ; If (EOF encountered)
   875                              <1> ;   Insert a terminating ^Z to the end of the line. 
   876                              <1> ;   Close handle.
   877                              <1> ; Parse the line from beginning looking for a DOS terminating char.
   878                              <1> ;   If (CR or EOF encoutered before terminating char)
   879                              <1> ;       Bad line error msg. 
   880                              <1> ;       If (CR encountered)
   881                              <1> ;           Goto _START
   882                              <1> ;       Else
   883                              <1> ;           Goto _EXIT
   884                              <1> ;   Else 
   885                              <1> ;       If (Keyword AND not DEVICE) 
   886                              <1> ;           Store it's value on stack or change internal variable value
   887                              <1> ;       If (DEVICE)
   888                              <1> ;           Move endPtr after end of line and try load the driver.
   889                              <1> ;           If (driver doesn't exist or fails to init)
   890                              <1> ;               print bad driver error msg.
   891                              <1> ;       Else 
   892                              <1> ;           Bad line error msg
   893                              <1> ;       If (line terminated by CR)
   894                              <1> ;           Goto _START
   895                              <1> ; _EXIT:
   896                              <1> ;-------------------------------------------------------------------------;
   897                              <1> ; Note:
   898                              <1> ; If driver a Block Device Driver, build all the DPB's for it (up until max)
   899                              <1> ;   directly after the driver pointer as returned by the driver. Then, 
   900                              <1> ;   adjust the memory pointer and start loading next line.
   901                              <1> ;   The space marked as "endPtr" can be used as a buffer by the disk buffers.
   902                              <1> ; Once EOF has been reached, we jmp to noCfg which configures the other
   903                              <1> ;   data structures according to the values on the stack frame.
   904                              <1> ;-------------------------------------------------------------------------;
   905                              <1> ;Start CONFIG.SYS parsing here
   906                              <1> configParse:
   907 00000B6D 488945B8            <1>     mov qword [rbp - cfgFrame.cfgHandle], rax
   908 00000B71 48C745B000000000    <1>     mov qword [rbp - cfgFrame.lastLine], 0
   909                              <1> .newLine:
   910                              <1> ;Keeps the new line unless a DEVICE= command read it, which adjusts endPtr
   911 00000B79 488B55A8            <1>     mov rdx, qword [rbp - cfgFrame.endPtr]  ;Start reading into here
   912 00000B7D 488955A0            <1>     mov qword [rbp - cfgFrame.linePtr], rdx	;Use var for start of line ptr
   913                              <1> .nextChar:
   914 00000B81 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle]   ;Move the handle into ebx
   915 00000B85 6681FBFFFF          <1>     cmp bx, -1
   916 00000B8A 0F84D4000000        <1>     je .stopProcessError
   917 00000B90 B8003F0000          <1>     mov eax, 3F00h  ;Read handle
   918 00000B95 B901000000          <1>     mov ecx, 1  ;Read one byte
   919 00000B9A CD41                <1>     int 41h
   920 00000B9C 0F82C2000000        <1>     jc .stopProcessError
   921 00000BA2 85C9                <1>     test ecx, ecx	;If this is zero, EOF reached
   922 00000BA4 7508                <1>     jnz .notEOF
   923 00000BA6 48C745B0FFFFFFFF    <1>     mov qword [rbp - cfgFrame.lastLine], -1	;Note we are at EOF
   924                              <1> .notEOF:
   925 00000BAE 48FF45A8            <1>     inc qword [rbp - cfgFrame.endPtr]	;Goto next byte
   926 00000BB2 0FB602              <1>     movzx eax, byte [rdx]
   927 00000BB5 3C0D                <1>     cmp al, CR
   928 00000BB7 741C                <1>     je .endOfLine
   929 00000BB9 3C0A                <1>     cmp al, LF
   930 00000BBB 7418                <1>     je .endOfLine
   931 00000BBD 3C61                <1>     cmp al, "a"
   932 00000BBF 720F                <1>     jb .notChar
   933 00000BC1 3C7A                <1>     cmp al, "z"
   934 00000BC3 770B                <1>     ja .notChar
   935 00000BC5 50                  <1>     push rax    ;Push rax on stack as the argument to normalise
   936 00000BC6 B813120000          <1>     mov eax, 1213h  ;Uppercase the char
   937 00000BCB CD4F                <1>     int 4fh
   938 00000BCD 8802                <1>     mov byte [rdx], al  ;Replace the char with the capitalised form
   939 00000BCF 58                  <1>     pop rax ;Pop into rax to renormalise the stack
   940                              <1> .notChar:
   941 00000BD0 48FFC2              <1>     inc rdx ;Now move our local pointer to the next byte
   942 00000BD3 EBAC                <1>     jmp short .nextChar
   943                              <1> .endOfLine:
   944                              <1> ;rdx points to terminating char
   945                              <1> ;First find the length of the instruction word
   946 00000BD5 31C9                <1>     xor ecx, ecx
   947                              <1> .cmdNameLenGet:
   948 00000BD7 AC                  <1>     lodsb
   949 00000BD8 E875000000          <1>     call .isCharTerminal
   950 00000BDD 740A                <1>     jz .endOfCommandFound
   951 00000BDF FFC1                <1>     inc ecx
   952 00000BE1 81F90A000000        <1>     cmp ecx, 10 ;If shorter than longest command, keep looping
   953 00000BE7 72EE                <1>     jb .cmdNameLenGet
   954                              <1> ;Else, fall through in error
   955                              <1> .endOfCommandFound:
   956                              <1> ;ecx has the length of the command
   957 00000BE9 81F90A000000        <1>     cmp ecx, 10
   958 00000BEF 7473                <1>     je .stopProcessError
   959 00000BF1 488D3DCE000000      <1>     lea rdi, .keyTbl ;Put rdi at the table to search for
   960                              <1> .cmdSearch:
   961 00000BF8 803FFF              <1>     cmp byte [rdi], -1
   962 00000BFB 7467                <1>     je .stopProcessError
   963 00000BFD 380F                <1>     cmp byte [rdi], cl
   964 00000BFF 7544                <1>     jne .gotoNextCmd
   965                              <1>     ;Candidate command found, check said command is the command we want
   966 00000C01 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
   967 00000C05 4881FEFFFFFFFF      <1>     cmp rsi, -1 ;Error?
   968 00000C0C 7456                <1>     je .stopProcessError
   969 00000C0E 57                  <1>     push rdi
   970 00000C0F 51                  <1>     push rcx
   971 00000C10 48FFC7              <1>     inc rdi ;Go to next char
   972 00000C13 F3A6                <1>     repe cmpsb  ;Compare whilst the strings are equal
   973 00000C15 59                  <1>     pop rcx
   974 00000C16 5F                  <1>     pop rdi
   975 00000C17 752C                <1>     jne .gotoNextCmd    ;If not equal, just goto next command
   976                              <1>     ;Else, rdi + rcx points to the word ptr of the function
   977                              <1>     ;rdx points to the terminating char of the line 
   978 00000C19 52                  <1>     push rdx    ;This is to know whether we continue processing or end now
   979 00000C1A 488D35A5000000      <1>     lea rsi, .keyTbl
   980 00000C21 4889F0              <1>     mov rax, rsi    ;Keep a copy in rax
   981 00000C24 4803740F01          <1>     add rsi, qword [rdi + rcx + 1]  ;This is the offset from .keyTbl
   982 00000C29 4801C6              <1>     add rsi, rax    ;So add the EA of the head of the tbl before calling
   983 00000C2C F8                  <1>     clc ;Esure flags are happy before entering
   984 00000C2D FFD6                <1>     call rsi    ;Call this function
   985 00000C2F 5A                  <1>     pop rdx
   986 00000C30 7232                <1>     jc .stopProcessError    ;If the function returns CF=CY, error exit
   987 00000C32 48F745B0FFFFFFFF    <1>     test qword [rbp - cfgFrame.lastLine], -1 ;If we concluded at EOF, exit
   988 00000C3A 0F8589040000        <1>     jnz .cfgExit
   989 00000C40 E934FFFFFF          <1>     jmp .newLine
   990                              <1> .gotoNextCmd:
   991 00000C45 0FB607              <1>     movzx eax, byte [rdi]
   992 00000C48 0503000000          <1>     add eax, 3
   993 00000C4D 4801C7              <1>     add rdi, rax
   994 00000C50 EBA6                <1>     jmp short .cmdSearch
   995                              <1> .isCharTerminal:
   996                              <1> ;Input: AL = Char to check
   997                              <1> ;Output: ZF=ZE -> Char terminal
   998                              <1> ;        ZF=NZ -> Char not terminal
   999 00000C52 3C3D                <1>     cmp al, "="
  1000                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39 00000C54 7501                <3>  j%-1 short %%a
    40                              <3>  return
    18                              <4> %%_ret:
    19 00000C56 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    41                              <3> %%a:
    42                              <3>  %endif
  1001 00000C57 3C20                <1>     cmp al, SPC
  1002                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C59 74(56)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1003 00000C5B 3C09                <1>     cmp al, TAB
  1004                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C5D 74(56)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1005 00000C5F 3C3B                <1>     cmp al, ";"
  1006                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000C61 74(56)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1007                              <1>     return
    18                              <2> %%_ret:
    19 00000C63 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1008                              <1> .stopProcessError:
  1009 00000C64 488D1534000000      <1>     lea rdx, .speLine
  1010 00000C6B B800090000          <1>     mov eax, 0900h
  1011 00000C70 CD41                <1>     int 41h
  1012                              <1>     ;Reset all values to default
  1013 00000C72 48C745F81E000000    <1>     mov qword [rbp - cfgFrame.newBuffers], buffersDefault
  1014 00000C7A 48C745F014000000    <1>     mov qword [rbp - cfgFrame.newSFTVal], filesDefault
  1015 00000C82 48C745E804000000    <1>     mov qword [rbp - cfgFrame.newFCBSVal], fcbsDefault
  1016 00000C8A 48C745E000000000    <1>     mov qword [rbp - cfgFrame.newProtFCBSVal], safeFcbsDeflt
  1017 00000C92 48C745D805000000    <1>     mov qword [rbp - cfgFrame.newLastdrive], lastDriveDeflt
  1018 00000C9A E92A040000          <1>     jmp .cfgExit
  1019 00000C9F 0D0A556E7265636F67- <1> .speLine:   db CR,LF,"Unrecognised command in CONFIG.SYS",CR,LF,"$"
  1019 00000CA8 6E6973656420636F6D- <1>
  1019 00000CB1 6D616E6420696E2043- <1>
  1019 00000CBA 4F4E4649472E535953- <1>
  1019 00000CC3 0D0A24              <1>
  1020                              <1> .keyTbl: 
  1021 00000CC6 05425245414B        <1>     db 5, "BREAK"           ;DONE
  1022 00000CCC 5D00                <1> 	dw .breakHandler - .keyTbl
  1023 00000CCE 0742554646455253    <1>     db 7, "BUFFERS"         ;DONE
  1024 00000CD6 8A00                <1> 	dw .bufHandler - .keyTbl
  1025 00000CD8 07434F554E545259    <1> 	db 7, "COUNTRY"         ;Ignored for now
  1026 00000CE0 FC00                <1> 	dw .countryScan - .keyTbl
  1027 00000CE2 06444556494345      <1> 	db 6, "DEVICE"          ;DONE
  1028 00000CE9 FD00                <1> 	dw .drvLoader - .keyTbl
  1029 00000CEB 0446434253          <1> 	db 4, "FCBS"            ;DONE (to be ignored for a while now)
  1030 00000CF0 2B03                <1> 	dw .fcbHandler - .keyTbl
  1031 00000CF2 0546494C4553        <1> 	db 5, "FILES"           ;DONE
  1032 00000CF8 2C03                <1> 	dw .sftHandler - .keyTbl
  1033 00000CFA 094C41535444524956- <1> 	db 9, "LASTDRIVE"       ;DONE
  1033 00000D03 45                  <1>
  1034 00000D04 B203                <1> 	dw .lastdriveHandler - .keyTbl
  1035 00000D06 055348454C4C        <1> 	db 5, "SHELL"           ;Ignored for now
  1036 00000D0C 0004                <1> 	dw .shellHandler - .keyTbl
  1037 00000D0E 06535441434B53      <1> 	db 6, "STACKS"          ;Ignored for now
  1038 00000D15 0104                <1> 	dw .stacksHandler - .keyTbl
  1039 00000D17 08445249565041524D  <1>     db 8, "DRIVPARM"
  1040 00000D20 0204                <1>     dw .drivParm - .keyTbl  ;Ignored for now
  1041 00000D22 FF                  <1> 	db -1	;End of table marker
  1042                              <1> .breakHandler:
  1043 00000D23 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1044 00000D27 4881C606000000      <1>     add rsi, 6  ;Go past BREAK=
  1045                              <1>     ;This must be the word ON or OFF 
  1046 00000D2E 31D2                <1>     xor edx, edx    ;Clear CF and default to OFF
  1047 00000D30 66813E4F4E          <1>     cmp word [rsi], "ON"
  1048 00000D35 740F                <1>     je .breakOn
  1049 00000D37 66813E4F46          <1>     cmp word [rsi], "OF"
  1050 00000D3C 7506                <1>     jne .breakBad
  1051 00000D3E 807E0246            <1>     cmp byte [rsi + 2], "F"
  1052 00000D42 7404                <1>     je .breakCommon
  1053                              <1> .breakBad:
  1054 00000D44 F9                  <1>     stc
  1055                              <1>     return
    18                              <2> %%_ret:
    19 00000D45 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1056                              <1> .breakOn:
  1057 00000D46 FFC2                <1>     inc edx ;Go from OFF to ON  (keeps CF=NC)
  1058                              <1> .breakCommon:
  1059 00000D48 B801330000          <1>     mov eax, 3301h  ;Set break to value in dl
  1060 00000D4D CD41                <1>     int 41h
  1061                              <1>     return
    18                              <2> %%_ret:
    19 00000D4F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1062                              <1> 
  1063                              <1> .bufHandler:
  1064 00000D50 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1065 00000D54 4881C608000000      <1>     add rsi, 8  ;Go past BUFFERS=
  1066                              <1>     ;This must be at most three digits, anything else is a failure
  1067 00000D5B 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1068 00000D5E 31C9                <1>     xor ecx, ecx
  1069 00000D60 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1070 00000D61 3C30                <1>     cmp al, "0"
  1071 00000D63 724A                <1>     jb .bufHandlerErr
  1072 00000D65 3C39                <1>     cmp al, "9"
  1073 00000D67 7746                <1>     ja .bufHandlerErr
  1074 00000D69 FFC1                <1>     inc ecx ;Increment char counter
  1075 00000D6B AC                  <1>     lodsb   ;Get second char
  1076 00000D6C E840000000          <1>     call .bufHandlerTermCheck
  1077 00000D71 7410                <1>     je .bufHandlerProcess   ;If it is a terminating char, exit
  1078 00000D73 3C30                <1>     cmp al, "0"
  1079 00000D75 7238                <1>     jb .bufHandlerErr
  1080 00000D77 3C39                <1>     cmp al, "9"
  1081 00000D79 7734                <1>     ja .bufHandlerErr
  1082 00000D7B AC                  <1>     lodsb   ;Check no more chars!
  1083 00000D7C E830000000          <1>     call .bufHandlerTermCheck
  1084 00000D81 752C                <1>     jne .bufHandlerErr
  1085                              <1> .bufHandlerProcess:
  1086 00000D83 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1087 00000D85 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1088                              <1> .bufHandlerLp:
  1089 00000D88 AC                  <1>     lodsb   ;Get the digit
  1090 00000D89 E817000000          <1>     call .bufHandlerMul
  1091 00000D8E 67E304              <1>     jecxz .bufHandlerPrepExit
  1092 00000D91 FFC9                <1>     dec ecx
  1093 00000D93 EBF3                <1>     jmp short .bufHandlerLp 
  1094                              <1> .bufHandlerPrepExit:
  1095                              <1> ;edx has the value now, so place it in stack
  1096 00000D95 B91E000000          <1>     mov ecx, buffersDefault
  1097 00000D9A 85D2                <1>     test edx, edx
  1098 00000D9C 0F44D1              <1>     cmovz edx, ecx  ;Replace zero with default if the user specified 0 buffers
  1099 00000D9F 488955F8            <1>     mov qword [rbp - cfgFrame.newBuffers], rdx
  1100 00000DA3 F8                  <1>     clc
  1101                              <1>     return
    18                              <2> %%_ret:
    19 00000DA4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1102                              <1> .bufHandlerMul:
  1103 00000DA5 2C30                <1>     sub al, "0" ;Convert to a binary value
  1104 00000DA7 F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1105 00000DA9 0FB7C0              <1>     movzx eax, ax
  1106 00000DAC 01C2                <1>     add edx, eax
  1107                              <1>     return
    18                              <2> %%_ret:
    19 00000DAE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1108                              <1> .bufHandlerErr:
  1109 00000DAF F9                  <1>     stc
  1110                              <1>     return
    18                              <2> %%_ret:
    19 00000DB0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1111                              <1> .bufHandlerTermCheck:
  1112 00000DB1 3C20                <1>     cmp al, SPC
  1113                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DB3 74(B0)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1114 00000DB5 3C09                <1>     cmp al, TAB
  1115                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DB7 74(B0)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1116 00000DB9 3C0D                <1>     cmp al, CR
  1117                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DBB 74(B0)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1118 00000DBD 3C0A                <1>     cmp al, LF
  1119                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000DBF 74(B0)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1120                              <1>     return
    18                              <2> %%_ret:
    19 00000DC1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1121                              <1> .countryScan:
  1122                              <1>     return
    18                              <2> %%_ret:
    19 00000DC2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1123                              <1> .drvLoader:
  1124                              <1> ;We first try to read the driver into the byte after rdx.
  1125                              <1> ;If we cannot open the file, or we can open but not read the whole file
  1126                              <1> ; we error with Bad or missing filename msg, and proceed as if nothing happened 
  1127                              <1> ; (CF=NC). 
  1128                              <1> ; Thus we DO NOT adjust .endPtr or .linePtr and recycle that space for the 
  1129                              <1> ; next line.
  1130                              <1> ;If the open succeeded and we were able to read the whole driver into memory, 
  1131                              <1> ; we pass the lineptr to the driver and call init for the driver.
  1132                              <1> ; Once the driver returns, if the DONE bit is set, we read the offset of 
  1133                              <1> ; free memory above the driver and add that to the endPtr. If the driver
  1134                              <1> ; is a block driver, we add to the endPtr the space for "Units supported" 
  1135                              <1> ; number of DPBs.
  1136 00000DC3 4889D6              <1>     mov rsi, rdx    ;Save the ptr to past the end of the line in rsi
  1137 00000DC6 488B7DA0            <1>     mov rdi, qword [rbp - cfgFrame.linePtr]
  1138 00000DCA 4881C707000000      <1>     add rdi, 7  ;Go past DEVICE= to the pathname
  1139 00000DD1 4889FA              <1>     mov rdx, rdi    ;Prepare rdx for the open
  1140 00000DD4 B820000000          <1>     mov eax, SPC
  1141                              <1> .drvFindEndOfFileName:
  1142 00000DD9 AE                  <1>     scasb  ;Is this char the space?
  1143 00000DDA 7416                <1>     je .fileNameFound
  1144                              <1>     ;Was the char terminal?
  1145 00000DDC 807FFF0D            <1>     cmp byte [rdi - 1], CR
  1146 00000DE0 0F84A0010000        <1>     je .drvBad
  1147 00000DE6 807FFF0A            <1>     cmp byte [rdi - 1], LF
  1148 00000DEA 0F8496010000        <1>     je .drvBad
  1149 00000DF0 EBE7                <1>     jmp short .drvFindEndOfFileName
  1150                              <1> .fileNameFound:
  1151 00000DF2 C647FF00            <1>     mov byte [rdi - 1], 0   ;Null terminate the path to the file
  1152 00000DF6 B8003D0000          <1>     mov eax, 3D00h  ;Read only file
  1153 00000DFB CD41                <1>     int 41h
  1154 00000DFD 0F8283010000        <1>     jc .drvBad
  1155 00000E03 C647FF20            <1>     mov byte [rdi - 1], " " ;Replace the null with a space now again
  1156 00000E07 0FB7D8              <1>     movzx ebx, ax   ;Get the handle in ebx
  1157 00000E0A 668905DE010000      <1>     mov word [.drvHandle], ax   ;Save the handle in variable
  1158 00000E11 31D2                <1>     xor edx, edx    ;Move the handle to the end of the file
  1159 00000E13 B802420000          <1>     mov eax, 4202h  ;LSEEK to SEEK_END
  1160 00000E18 CD41                <1>     int 41h
  1161 00000E1A 89C1                <1>     mov ecx, eax    ;Get the file size in ecx
  1162 00000E1C 31D2                <1>     xor edx, edx    ;Move the handle to the start of the file
  1163 00000E1E B800420000          <1>     mov eax, 4200h  ;LSEEK to SEEK_SET (start of the file)
  1164 00000E23 CD41                <1>     int 41h
  1165                              <1>     ;Now we read ecx bytes to rsi as rsi points to first byte past the end
  1166                              <1>     ; of the DEVICE= line 
  1167 00000E25 4889F2              <1>     mov rdx, rsi    ;Point to first byte past the end of DEVICE= line
  1168 00000E28 89CE                <1>     mov esi, ecx    ;Save the number of bytes to read in esi
  1169 00000E2A B8003F0000          <1>     mov eax, 3F00h  ;Read handle    
  1170 00000E2F CD41                <1>     int 41h
  1171 00000E31 0F8241010000        <1>     jc .drvBadClose
  1172 00000E37 39CE                <1>     cmp esi, ecx    ;Were all bytes read in?
  1173 00000E39 0F8539010000        <1>     jne .drvBadClose
  1174                              <1>     ;Ok, full file read in, now prepare to call driver init routine
  1175 00000E3F 4889D6              <1>     mov rsi, rdx    ;Move ptr to driver header to rsi
  1176 00000E42 488D1D87010000      <1>     lea rbx, .drvInitStruc
  1177 00000E49 C6031F              <1>     mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
  1178 00000E4C C6430200            <1>     mov byte [rbx + initReqPkt.cmdcde], drvINIT
  1179 00000E50 66C743030000        <1>     mov word [rbx + initReqPkt.status], 0
  1180 00000E56 C6430D00            <1>     mov byte [rbx + initReqPkt.numunt], 0
  1181 00000E5A 488B45A0            <1>     mov rax, qword [rbp - cfgFrame.linePtr] ;Get the line pointer
  1182 00000E5E 480507000000        <1>     add rax, 7  ;Goto the first byte past DEVICE=
  1183 00000E64 4889430E            <1>     mov qword [rbx + initReqPkt.endptr], rax
  1184 00000E68 48C7431600000000    <1>     mov qword [rbx + initReqPkt.optptr], 0
  1185 00000E70 640FB60425-         <1>     movzx eax, byte fs:[numPhysVol]
  1185 00000E75 [7DC00300]          <1>
  1186 00000E79 FFC8                <1>     dec eax ;Get a 0 based count
  1187 00000E7B 88431E              <1>     mov byte [rbx + initReqPkt.drvnum], al
  1188 00000E7E FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
  1189 00000E81 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
  1190 00000E84 66F743030001        <1>     test word [rbx + initReqPkt.status], drvDonStatus
  1191 00000E8A 0F84E8000000        <1>     jz .drvBadClose
  1192 00000E90 66F743030080        <1>     test word [rbx + initReqPkt.status], drvErrStatus
  1193 00000E96 0F85DC000000        <1>     jnz .drvBadClose
  1194                              <1>     ;Now check that the driver wants to be installed
  1195 00000E9C 483B730E            <1>     cmp rsi, qword [rbx + initReqPkt.endptr]    ;This is for char and blk devs
  1196 00000EA0 0F84C2000000        <1>     je .drvWantsClose
  1197 00000EA6 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1198 00000EAC 750A                <1>     jnz .drvChar
  1199 00000EAE 807B0D00            <1>     cmp byte [rbx + initReqPkt.numunt], 0
  1200 00000EB2 0F84B0000000        <1>     je .drvWantsClose
  1201                              <1> .drvChar:
  1202                              <1>     ;Otherwise, this init passed, now build the structures we need.
  1203                              <1>     ;First adjust .endPtr
  1204 00000EB8 488B430E            <1>     mov rax, qword [rbx + initReqPkt.endptr]    ;Get the end pointer
  1205 00000EBC 488945A8            <1>     mov qword [rbp - cfgFrame.endPtr], rax  ;Move it here
  1206                              <1>     ;Now we link the driver into the driver chain
  1207 00000EC0 488B3D(80C00300)    <1>     mov rdi, qword [nulDevHdr + drvHdr.nxtPtr]  ;Get next ptr from nul drvr
  1208 00000EC7 48893E              <1>     mov qword [rsi + drvHdr.nxtPtr], rdi    ;And store it here
  1209 00000ECA 488935(80C00300)    <1>     mov qword [nulDevHdr + drvHdr.nxtPtr], rsi  ;And link nul to this driver
  1210                              <1>     ;Now if we are a char device, we are done so check here
  1211 00000ED1 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
  1212 00000ED7 0F85B9000000        <1>     jnz .drvWantsCloseChar  ;We are complete
  1213                              <1>     ;Now for block devices, we get the BPB ptr array and numUnits supported
  1214 00000EDD 0FB64B0D            <1>     movzx ecx, byte [rbx + initReqPkt.numunt]
  1215 00000EE1 488B5B16            <1>     mov rbx, qword [rbx + initReqPkt.optptr]    ;Get the BPB array pointer
  1216                              <1> 
  1217 00000EE5 4889F2              <1>     mov rdx, rsi    ;Move the driver pointer to rdx
  1218 00000EE8 488B75A8            <1>     mov rsi, qword [rbp - cfgFrame.endPtr]  ;Build DPB array here
  1219 00000EEC 4889F7              <1>     mov rdi, rsi    ;Move rdi here too, to point to first new DPB later
  1220 00000EEF 51                  <1>     push rcx
  1221 00000EF0 52                  <1>     push rdx
  1222 00000EF1 31D2                <1>     xor edx, edx
  1223 00000EF3 B835000000          <1>     mov eax, dpb_size
  1224 00000EF8 F7E1                <1>     mul ecx ;Multiply the number of DPB's needed with the size of a dpb
  1225 00000EFA 480145A8            <1>     add qword [rbp - cfgFrame.endPtr], rax  ;Add this value to endPtr
  1226 00000EFE 5A                  <1>     pop rdx ;Get back the driver ptr in rdx
  1227 00000EFF 59                  <1>     pop rcx ;Get back the number of units count
  1228                              <1>     
  1229 00000F00 4887EB              <1>     xchg rbp, rbx   ;Swap stack frame ptr and BPB array ptr
  1230 00000F03 4887F5              <1>     xchg rsi, rbp   ;Swap BPB array and DPB space ptrs
  1231                              <1> .drvBuildDPB:
  1232 00000F06 B800530000          <1>     mov eax, 5300h
  1233 00000F0B CD41                <1>     int 41h
  1234 00000F0D 4881C678000000      <1>     add rsi, bpbEx_size ;Goto next bpb in array
  1235                              <1>     ;Adjust fields in DPB
  1236 00000F14 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] 
  1237 00000F1C 648A0425[7DC00300]  <1>     mov al, byte fs:[numPhysVol]
  1238 00000F24 884500              <1>     mov byte [rbp + dpb.bDriveNumber], al
  1239 00000F27 886D01              <1>     mov byte [rbp + dpb.bUnitNumber], ch
  1240 00000F2A 4889551B            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rdx
  1241 00000F2E 488D4535            <1>     lea rax, qword [rbp + dpb_size] ;Point to next DPB
  1242 00000F32 48894525            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax
  1243 00000F36 FEC5                <1>     inc ch  ;Increment unit number 
  1244 00000F38 38E9                <1>     cmp cl, ch  ;Are we done?
  1245 00000F3A 7409                <1>     je .dpbInitDone
  1246 00000F3C 4881C535000000      <1>     add rbp, dpb_size   ;Go to space for next DPB
  1247 00000F43 EBC1                <1>     jmp short .drvBuildDPB
  1248                              <1> .dpbInitDone:
  1249                              <1> ;Make sure we now make the last qNextDPBPtr = -1
  1250 00000F45 48C74525FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
  1251                              <1>     ;Now we set the old last dpb to point to the first one
  1252 00000F4D 64488B3425-         <1>     mov rsi, qword fs:[dpbHeadPtr]
  1252 00000F52 [41C00300]          <1>
  1253                              <1> .drvDPBLp:
  1254 00000F56 807E25FF            <1>     cmp byte [rsi + dpb.qNextDPBPtr], -1
  1255 00000F5A 7406                <1>     je .drvLastDPBFound
  1256 00000F5C 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Goto next DPB
  1257 00000F60 EBF4                <1>     jmp short .drvDPBLp
  1258                              <1> .drvLastDPBFound:
  1259 00000F62 48893E              <1>     mov qword [rsi], rdi    ;Chain this dpb now to the first new dpb
  1260 00000F65 4889DD              <1>     mov rbp, rbx    ;Return the stack frame ptr to rbp
  1261                              <1> ;And we are done!
  1262                              <1> .drvWantsClose:
  1263                              <1> ;If the driver wants to not install silently, it can here
  1264 00000F68 0FB71D80000000      <1>     movzx ebx, word [.drvHandle] ;Get the handle back, close it and proceed
  1265 00000F6F B8003E0000          <1>     mov eax, 3E00h  
  1266 00000F74 CD41                <1>     int 41h 
  1267 00000F76 F8                  <1>     clc ;Never return with CF=CY
  1268                              <1>     return  
    18                              <2> %%_ret:
    19 00000F77 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1269                              <1> .drvBadClose:
  1270 00000F78 0FB71D70000000      <1>     movzx ebx, word [.drvHandle]    ;Get back handle to close
  1271 00000F7F B8003E0000          <1>     mov eax, 3E00h  ;Close handle in ebx
  1272 00000F84 CD41                <1>     int 41h
  1273                              <1> .drvBad:
  1274 00000F86 488D1529000000      <1>     lea rdx, .drvBadMsg
  1275 00000F8D B800090000          <1>     mov eax, 0900h
  1276 00000F92 CD41                <1>     int 41h
  1277 00000F94 F8                  <1>     clc ;Never return with CF=CY
  1278                              <1>     return
    18                              <2> %%_ret:
    19 00000F95 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1279                              <1> .drvWantsCloseChar:
  1280                              <1> ;Final checks, to see if we are CLOCK$ or CON
  1281 00000F96 66F746080100        <1>     test word [rsi + drvHdr.attrib], devDrvConIn
  1282 00000F9C 7407                <1>     jz .dwccClock
  1283 00000F9E 488935(59C00300)    <1>     mov qword [vConPtr], rsi
  1284                              <1> .dwccClock:
  1285 00000FA5 66F746080800        <1>     test word [rsi + drvHdr.attrib], devDrvClockDev
  1286 00000FAB 74BB                <1>     jz .drvWantsClose
  1287 00000FAD 488935(51C00300)    <1>     mov qword [clockPtr], rsi
  1288 00000FB4 EBB2                <1>     jmp short .drvWantsClose
  1289 00000FB6 426164206F72206D69- <1> .drvBadMsg: db "Bad or missing filename",CR,LF,"$"
  1289 00000FBF 7373696E672066696C- <1>
  1289 00000FC8 656E616D650D0A24    <1>
  1290 00000FD0 000000000000000000- <1> .drvInitStruc: db initReqPkt_size dup (0)  
  1290 00000FD9 000000000000000000- <1>
  1290 00000FE2 000000000000000000- <1>
  1290 00000FEB 00000000            <1>
  1291 00000FEF FFFF                <1> .drvHandle: dw -1
  1292                              <1> 
  1293                              <1> .fcbHandler:
  1294                              <1>     return
    18                              <2> %%_ret:
    19 00000FF1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1295                              <1> .sftHandler:
  1296                              <1> ;This reads the line to set the number of FILE to between 1 and 254
  1297 00000FF2 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1298 00000FF6 4881C606000000      <1>     add rsi, 6  ;Go past FILES=
  1299                              <1>     ;This must be at most three digits, anything else is a failure
  1300 00000FFD 4889F7              <1>     mov rdi, rsi    ;Save the start in rdi
  1301 00001000 31C9                <1>     xor ecx, ecx
  1302 00001002 AC                  <1>     lodsb   ;Get the first char. Must be between ASCII '0' and '9'
  1303 00001003 3C30                <1>     cmp al, "0"
  1304 00001005 725E                <1>     jb .sftHandlerErr
  1305 00001007 3C39                <1>     cmp al, "9"
  1306 00001009 775A                <1>     ja .sftHandlerErr
  1307 0000100B FFC1                <1>     inc ecx ;Increment char counter
  1308 0000100D AC                  <1>     lodsb   ;Get second char
  1309 0000100E E854000000          <1>     call .sftHandlerTermCheck
  1310 00001013 7420                <1>     je .sftHandlerProcess   ;If it is a terminating char, exit
  1311 00001015 3C30                <1>     cmp al, "0"
  1312 00001017 724C                <1>     jb .sftHandlerErr
  1313 00001019 3C39                <1>     cmp al, "9"
  1314 0000101B 7748                <1>     ja .sftHandlerErr
  1315 0000101D FFC1                <1>     inc ecx ;Increment char counter
  1316 0000101F AC                  <1>     lodsb   ;Get third char
  1317 00001020 E842000000          <1>     call .sftHandlerTermCheck
  1318 00001025 3C30                <1>     cmp al, "0"
  1319 00001027 723C                <1>     jb .sftHandlerErr
  1320 00001029 3C32                <1>     cmp al, "2" ;Max BUFFERS=254 soooo, sorry buddy!
  1321 0000102B 7738                <1>     ja .sftHandlerErr
  1322 0000102D AC                  <1>     lodsb   ;Check no more chars!
  1323 0000102E E834000000          <1>     call .sftHandlerTermCheck
  1324 00001033 7530                <1>     jne .sftHandlerErr
  1325                              <1> .sftHandlerProcess:
  1326 00001035 31D2                <1>     xor edx, edx    ;Accumulate value in edx
  1327 00001037 4889FE              <1>     mov rsi, rdi    ;Go back to the first number
  1328                              <1> .sftHandlerLp:
  1329 0000103A AC                  <1>     lodsb   ;Get the digit
  1330 0000103B E81B000000          <1>     call .sftHandlerMul
  1331 00001040 67E304              <1>     jecxz .sftHandlerPrepExit
  1332 00001043 FFC9                <1>     dec ecx
  1333 00001045 EBF3                <1>     jmp short .sftHandlerLp 
  1334                              <1> .sftHandlerPrepExit:
  1335                              <1> ;edx has the value now, so place it in stack
  1336 00001047 B914000000          <1>     mov ecx, filesDefault  ;Get default if the user specifies less than min
  1337 0000104C 81FA08000000        <1>     cmp edx, 8
  1338 00001052 0F42D1              <1>     cmovb edx, ecx
  1339 00001055 488955F0            <1>     mov qword [rbp - cfgFrame.newSFTVal], rdx
  1340 00001059 F8                  <1>     clc
  1341                              <1>     return
    18                              <2> %%_ret:
    19 0000105A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1342                              <1> .sftHandlerMul:
  1343 0000105B 2C30                <1>     sub al, "0" ;Convert to a binary value
  1344 0000105D F6E1                <1>     mul cl  ;Multiply al by cl, answer in ax
  1345 0000105F 0FB7C0              <1>     movzx eax, ax
  1346 00001062 01C2                <1>     add edx, eax
  1347                              <1>     return
    18                              <2> %%_ret:
    19 00001064 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1348                              <1> .sftHandlerErr:
  1349 00001065 F9                  <1>     stc
  1350                              <1>     return
    18                              <2> %%_ret:
    19 00001066 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1351                              <1> .sftHandlerTermCheck:
  1352 00001067 3C20                <1>     cmp al, SPC
  1353                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001069 74(66)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1354 0000106B 3C09                <1>     cmp al, TAB
  1355                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000106D 74(66)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1356 0000106F 3C0D                <1>     cmp al, CR
  1357                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001071 74(66)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1358 00001073 3C0A                <1>     cmp al, LF
  1359                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001075 74(66)              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1360                              <1>     return
    18                              <2> %%_ret:
    19 00001077 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1361                              <1> .lastdriveHandler:
  1362 00001078 488B75A0            <1>     mov rsi, qword [rbp - cfgFrame.linePtr]
  1363 0000107C 4881C60A000000      <1>     add rsi, 10  ;Go past LASTDRIVE=
  1364 00001083 AC                  <1>     lodsb   ;Get this char
  1365 00001084 0FB6C0              <1>     movzx eax, al   ;Zero extend to eax
  1366 00001087 50                  <1>     push rax    ;Push on stack
  1367 00001088 B813120000          <1>     mov eax, 1213h  ;Uppercase the char
  1368 0000108D CD4F                <1>     int 4Fh
  1369 0000108F 5B                  <1>     pop rbx
  1370 00001090 3C5A                <1>     cmp al, "Z"
  1371 00001092 77D1                <1>     ja .sftHandlerErr
  1372 00001094 3C41                <1>     cmp al, "A"
  1373 00001096 72CD                <1>     jb .sftHandlerErr
  1374 00001098 803E0D              <1>     cmp byte [rsi], CR
  1375 0000109B 740F                <1>     je .ldProceed
  1376 0000109D 803E0A              <1>     cmp byte [rsi], LF
  1377 000010A0 740A                <1>     je .ldProceed
  1378 000010A2 803E09              <1>     cmp byte [rsi], TAB
  1379 000010A5 7405                <1>     je .ldProceed
  1380 000010A7 803E20              <1>     cmp byte [rsi], SPC
  1381 000010AA 75B9                <1>     jne .sftHandlerErr
  1382                              <1> .ldProceed:
  1383 000010AC 2C41                <1>     sub al, "A" ;Convert into a number
  1384 000010AE 0FB6C0              <1>     movzx eax, al   ;Zero extend in case DOS rets something dumb in upper bits
  1385 000010B1 BA05000000          <1>     mov edx, lastDriveDeflt
  1386 000010B6 3D05000000          <1>     cmp eax, lastDriveDeflt
  1387 000010BB 0F42C2              <1>     cmovb eax, edx
  1388 000010BE 488945D8            <1>     mov qword [rbp - cfgFrame.newLastdrive], rax
  1389 000010C2 F8                  <1>     clc
  1390                              <1>     return
    18                              <2> %%_ret:
    19 000010C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1391                              <1> .ldBad:
  1392 000010C4 F9                  <1>     stc
  1393                              <1>     return
    18                              <2> %%_ret:
    19 000010C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1394                              <1> .shellHandler:
  1395                              <1>     return
    18                              <2> %%_ret:
    19 000010C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1396                              <1> .stacksHandler:
  1397                              <1>     return
    18                              <2> %%_ret:
    19 000010C7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1398                              <1> .drivParm:
  1399                              <1>     return
    18                              <2> %%_ret:
    19 000010C8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1400                              <1> 
  1401                              <1> .cfgExit:
  1402 000010C9 488B5DB8            <1>     mov rbx, qword [rbp - cfgFrame.cfgHandle] ;Get the handle back
  1403 000010CD B83E000000          <1>     mov eax, 3eh    ;Close the handle
  1404 000010D2 CD41                <1>     int 41h ;bx already has the handle
  1405                              <1> ;------------------------------------------------;
  1406                              <1> ;   Setup Final Data Areas With Overrides from   ;
  1407                              <1> ;                  CONFIG.SYS                    ;
  1408                              <1> ;------------------------------------------------;
  1409                              <1> ;Add additional buffers. Start from tmpBufHdr
  1410                              <1> ;Add additional SFT entries. By default, 1 new SFT header, with 15 SFT entries
  1411                              <1> ;Add additional FCBS.
  1412                              <1> ;Create a larger CDS if needed.
  1413                              <1> noCfg:
  1414                              <1> ;Start with buffers:
  1415 000010D4 488B4DF8            <1>     mov rcx, qword [rbp - cfgFrame.newBuffers]    ;Get new buffers size
  1416 000010D8 64880C25[7FC00300]  <1>     mov byte fs:[numBuffers], cl    ;Store this value in var
  1417                              <1>     ;Now do the allocation at rdi. Each buffer = maxSectorSize + bufferHdr_size
  1418 000010E0 640FB71C25-         <1>     movzx ebx, word fs:[maxBytesSec]    ;Get buffer sector size
  1418 000010E5 [61C00300]          <1>
  1419 000010E9 81C330000000        <1>     add ebx, bufferHdr_size ;rbx has the size to add
  1420                              <1>     ;Each buffer has no flags, drive number must be -1
  1421 000010EF 488B7DA8            <1>     mov rdi, qword [rbp - cfgFrame.endPtr]  ;Get current allocation end pointer
  1422 000010F3 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Reset the var here
  1422 000010F8 [63C00300]          <1>
  1423 000010FC 4889FE              <1>     mov rsi, rdi    ;Points rsi to first new buffer space
  1424 000010FF 31C0                <1>     xor eax, eax    ;Use for sanitising buffer headers
  1425 00001101 67E325              <1>     jecxz .lastBuffer
  1426                              <1> .bufferLoop:
  1427 00001104 4801DF              <1>     add rdi, rbx    ;Goto next buffer space
  1428 00001107 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Point to next buffer
  1429 0000110A 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1430 00001110 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1431 00001114 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1432 00001117 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1433 0000111A 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1434 0000111E 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1435 00001122 4889FE              <1>     mov rsi, rdi    ;Move rsi to next buffer position
  1436 00001125 FFC9                <1>     dec ecx
  1437 00001127 75DB                <1>     jnz .bufferLoop
  1438                              <1> .lastBuffer:
  1439 00001129 4801DF              <1>     add rdi, rbx    ;Goto past the last buffer
  1440 0000112C 48C706FFFFFFFF      <1>     mov qword [rsi + bufferHdr.nextBufPtr], -1 ;Point to no buffer
  1441 00001133 66C74608FF00        <1>     mov word [rsi + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
  1442 00001139 4889460A            <1>     mov qword [rsi + bufferHdr.bufferLBA], rax
  1443 0000113D 884612              <1>     mov byte [rsi + bufferHdr.bufFATcopy], al
  1444 00001140 894613              <1>     mov dword [rsi + bufferHdr.bufFATsize], eax
  1445 00001143 48894617            <1>     mov qword [rsi + bufferHdr.driveDPBPtr], rax
  1446 00001147 4889461F            <1>     mov qword [rsi + bufferHdr.owningFile], rax
  1447 0000114B 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1448                              <1> 
  1449                              <1> ;Now build a new SFT header for the number of files specified by user
  1450 0000114F 488B4DF0            <1>     mov rcx, qword [rbp - cfgFrame.newSFTVal]
  1451 00001153 81F905000000        <1>     cmp ecx, 5  ;If we are not adding anything, skip building SFT
  1452 00001159 7430                <1>     je .skipSFT
  1453 0000115B 64488B3425-         <1>     mov rsi, qword fs:[sftHeadPtr]  ;Get the current only SFT head pointer
  1453 00001160 [49C00300]          <1>
  1454 00001164 48893E              <1>     mov qword [rsi + sfth.qNextSFTPtr], rdi ;Move rdi as new SFT pointer
  1455 00001167 662B4E08            <1>     sub cx, word [rsi + sfth.wNumFiles] ;Remove the number of files we already have
  1456 0000116B 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move remaining files here
  1457 0000116F 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;Last table in chain
  1458 00001176 4881C70A000000      <1>     add rdi, sfth_size  ;Goto sft area, now need to compute size
  1459 0000117D B84F000000          <1>     mov eax, sft_size
  1460 00001182 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1461 00001184 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1462 00001187 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1463                              <1> .skipSFT:
  1464                              <1> ;FCBS at rdi
  1465 0000118B 6448893C25-         <1>     mov qword fs:[fcbsHeadPtr], rdi ;Setup the fcbs var here
  1465 00001190 [73C00300]          <1>
  1466 00001194 48C707FFFFFFFF      <1>     mov qword [rdi + sfth.qNextSFTPtr], -1  ;No more FCBS headers for now
  1467 0000119B 488B4DE8            <1>     mov rcx, qword [rbp - cfgFrame.newFCBSVal]
  1468 0000119F 66894F08            <1>     mov word [rdi + sfth.wNumFiles], cx ;Move this value here
  1469 000011A3 B84F000000          <1>     mov eax, sft_size
  1470 000011A8 F7E1                <1>     mul ecx ;Multiply number of sft with their size to get allocation
  1471 000011AA 4801C7              <1>     add rdi, rax    ;Add that many bytes to rdi
  1472 000011AD 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1473 000011B1 488B4DE0            <1>     mov rcx, qword [rbp - cfgFrame.newProtFCBSVal] ;Get number of safe FCBs
  1474 000011B5 6466890C25-         <1>     mov word fs:[numSafeSFCB], cx   ;And save that there
  1474 000011BA [7BC00300]          <1>
  1475                              <1> ;And CDS now
  1476 000011BE 488B4DD8            <1>     mov rcx, qword [rbp - cfgFrame.newLastdrive]
  1477 000011C2 64880C25[7EC00300]  <1>     mov byte fs:[lastdrvNum], cl ;Save this value
  1478 000011CA 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi  ;Point cdsHeadPtr here
  1478 000011CF [6BC00300]          <1>
  1479 000011D3 E84BF6FFFF          <1>     call makeCDSArray
  1480 000011D8 48897DA8            <1>     mov qword [rbp - cfgFrame.endPtr], rdi  ;Save this new position here
  1481                              <1> 
  1482                              <1> ;Computation of new space is complete, now work out how many bytes this is
  1483 000011DC 4889EC              <1>     mov rsp, rbp    ;Return stack pointer to original position
  1484 000011DF 5D                  <1>     pop rbp
  1485 000011E0 488D9D[10000000]    <1>     lea rbx, qword [rbp + dosDynamicArea]
  1486 000011E7 4829DF              <1>     sub rdi, rbx    ;Gives difference now
  1487 000011EA 678D5F11            <1>     lea ebx, dword [edi + 11h]  ;Add 11 to round up a paragraph
  1488 000011EE C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
  1489                              <1> ;Resize DOS allocation before loading COMMAND.COM
  1490 000011F1 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
  1490 000011F6 [39C00300]          <1>
  1491 000011FA 4981C010000000      <1>     add r8, mcb.program
  1492 00001201 B44A                <1>     mov ah, 4Ah
  1493 00001203 CD41                <1>     int 41h
  1494                              <1> ;Now we close all five default handles and open AUX, CON and PRN.
  1495 00001205 644C8B0425-         <1>     mov r8, qword fs:[currentPSP]
  1495 0000120A [04C40300]          <1>
  1496 0000120E 31DB                <1>     xor ebx, ebx
  1497                              <1> closeHandlesLoop:
  1498 00001210 B8003E0000          <1>     mov eax, 3e00h  ;Close
  1499 00001215 CD41                <1>     int 41h
  1500 00001217 FFC3                <1>     inc ebx ;Goto next handle
  1501 00001219 81FB06000000        <1>     cmp ebx, 6
  1502 0000121F 75EF                <1>     jne closeHandlesLoop
  1503 00001221 488D154A040000      <1>     lea rdx, auxName
  1504 00001228 B8023D0000          <1>     mov eax, 3D02h   ;Open read/write
  1505 0000122D CD41                <1>     int 41h
  1506 0000122F 89C3                <1>     mov ebx, eax
  1507 00001231 B903000000          <1>     mov ecx, 3  ;
  1508 00001236 B800460000          <1>     mov eax, 4600h  ;DUP2
  1509 0000123B CD41                <1>     int 41h
  1510 0000123D B8003E0000          <1>     mov eax, 3e00h
  1511 00001242 CD41                <1>     int 41h ;Close the original handle
  1512 00001244 B8023D0000          <1>     mov eax, 3D02h  ;Open read/write
  1513 00001249 488D151E040000      <1>     lea rdx, conName
  1514 00001250 CD41                <1>     int 41h
  1515 00001252 89C3                <1>     mov ebx, eax    ;Move file handle to ebx
  1516 00001254 B800450000          <1>     mov eax, 4500h  ;DUP
  1517 00001259 CD41                <1>     int 41h
  1518 0000125B B800450000          <1>     mov eax, 4500h  ;DUP
  1519 00001260 CD41                <1>     int 41h
  1520 00001262 488D150D040000      <1>     lea rdx, prnName
  1521 00001269 B8023D0000          <1>     mov eax, 3D02h
  1522 0000126E CD41                <1>     int 41h       ;Open file
  1523                              <1> 
  1524                              <1>     
  1525                              <1>     %if DEBUG && ALLOCTEST
  1526                              <1> ;Test Allocation, Growth and Deallocation
  1527                              <1>     mov r15, qword fs:[currentPSP]
  1528                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
  1529                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
  1530                              <1>     mov ah, 48h ;Allocate
  1531                              <1>     int 41h
  1532                              <1> 
  1533                              <1>     mov byte [rax - 10h], 0 ;Trash chain
  1534                              <1>     mov r8, rax ;Move the pointer to r8
  1535                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
  1536                              <1>     mov ah, 4Ah
  1537                              <1>     int 41h
  1538                              <1> 
  1539                              <1>     mov ah, 49h ;Free r8
  1540                              <1>     int 41h
  1541                              <1>     mov qword fs:[currentPSP], r15
  1542                              <1>     %endif
  1543                              <1> 
  1544                              <1>     %if ENDSTATUS
  1545                              <1> debugFinal:
  1546                              <1>     ;Print system state
  1547 00001270 55                  <1>     push rbp    ;Only rbp really matters here
  1548 00001271 4989E8              <1>     mov r8, rbp
  1549                              <1> 
  1550 00001274 488D2DD0020000      <1>     lea rbp, .msg2
  1551 0000127B 4D8D88[DF040000]    <1>     lea r9, qword [r8 + debPrintNullString]
  1552 00001282 41FFD1              <1>     call r9
  1553                              <1> 
  1554 00001285 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
  1555 0000128C 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
  1555 00001291 [08C00300]          <1>
  1556                              <1> 
  1557 00001295 4D8D88[1A080000]    <1>     lea r9, qword [r8 + overlayQword]
  1558 0000129C 41FFD1              <1>     call r9
  1559                              <1> 
  1560 0000129F 4881C31B000000      <1>     add rbx, 19+8
  1561 000012A6 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
  1561 000012AB [00C00300]          <1>
  1562 000012AF 41FFD1              <1>     call r9
  1563                              <1> 
  1564 000012B2 4881C31B000000      <1>     add rbx, 19+8
  1565 000012B9 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
  1565 000012BE [39C00300]          <1>
  1566 000012C2 41FFD1              <1>     call r9
  1567                              <1> 
  1568 000012C5 4881C31C000000      <1>     add rbx, 20+8
  1569 000012CC 4D8D88[D7070000]    <1>     lea r9, qword [r8 + overlayDword]
  1570 000012D3 648B0425[13C00300]  <1>     mov eax, dword fs:[loProtMem]
  1571 000012DB 41FFD1              <1>     call r9
  1572                              <1> 
  1573 000012DE 4881C312000000      <1>     add rbx, 10+8
  1574 000012E5 648B0425[17C00300]  <1>     mov eax, dword fs:[hiProtMem]
  1575 000012ED 41FFD1              <1>     call r9
  1576                              <1> 
  1577 000012F0 4881C312000000      <1>     add rbx, 10+8
  1578 000012F7 64488B0425-         <1>     mov rax, qword fs:[longMem]
  1578 000012FC [1BC00300]          <1>
  1579 00001300 4D8D88[1A080000]    <1>     lea r9, qword [r8 + overlayQword]
  1580 00001307 41FFD1              <1>     call r9
  1581                              <1> 
  1582 0000130A 4881C31B000000      <1>     add rbx, 19+8
  1583 00001311 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
  1583 00001316 [41C00300]          <1>
  1584 0000131A 41FFD1              <1>     call r9
  1585                              <1> 
  1586 0000131D 4881C31B000000      <1>     add rbx, 19+8
  1587 00001324 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
  1587 00001329 [49C00300]          <1>
  1588 0000132D 41FFD1              <1>     call r9
  1589                              <1> 
  1590 00001330 4881C31B000000      <1>     add rbx, 19+8
  1591 00001337 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
  1591 0000133C [63C00300]          <1>
  1592 00001340 41FFD1              <1>     call r9
  1593                              <1> 
  1594 00001343 4881C31B000000      <1>     add rbx, 19+8
  1595 0000134A 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
  1595 0000134F [6BC00300]          <1>
  1596 00001353 41FFD1              <1>     call r9
  1597                              <1> 
  1598 00001356 4D8D88[65070000]    <1>     lea r9, qword [r8 + overlayByte]
  1599                              <1> 
  1600 0000135D 4881C32C000000      <1>     add rbx, 25+19
  1601 00001364 64480FB60425-       <1>     movzx rax, byte fs:[numPhysVol]
  1601 0000136A [7DC00300]          <1>
  1602 0000136E 41FFD1              <1>     call r9
  1603                              <1> 
  1604 00001371 4881C31E000000      <1>     add rbx, 30
  1605 00001378 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
  1605 0000137E [12C00300]          <1>
  1606 00001382 41FFD1              <1>     call r9
  1607                              <1> 
  1608 00001385 4881C31E000000      <1>     add rbx, 30
  1609 0000138C 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
  1609 00001392 [11C00300]          <1>
  1610 00001396 41FFD1              <1>     call r9
  1611                              <1> 
  1612 00001399 4881C310000000      <1>     add rbx, 16
  1613 000013A0 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
  1613 000013A6 [10C00300]          <1>
  1614 000013AA 0441                <1>     add al, "A"
  1615 000013AC 8803                <1>     mov byte [rbx], al
  1616                              <1> 
  1617 000013AE 488D2D10000000      <1>     lea rbp, .msg
  1618 000013B5 4D8D88[DF040000]    <1>     lea r9, qword [r8 + debPrintNullString]
  1619 000013BC 41FFD1              <1>     call r9
  1620 000013BF 5D                  <1>     pop rbp
  1621 000013C0 E99E010000          <1>     jmp l1
  1622 000013C5 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
  1622 000013CE 206261736520464646- <1>
  1622 000013D7 464646464646464646- <1>
  1622 000013E0 46464646680A0D      <1>
  1623 000013E7 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1623 000013F0 464646464646464646- <1>
  1623 000013F9 464646464646680A0D  <1>
  1624 00001402 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
  1624 0000140B 464646464646464646- <1>
  1624 00001414 46464646464668200A- <1>
  1624 0000141D 0D                  <1>
  1625 0000141E 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
  1625 00001427 464646464646466820  <1>
  1626 00001430 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
  1626 00001439 464646464646466820  <1>
  1627 00001442 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1627 0000144B 464646464646464646- <1>
  1627 00001454 464646464646680A0D  <1>
  1628 0000145D 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1628 00001466 464646464646464646- <1>
  1628 0000146F 464646464646680A0D  <1>
  1629 00001478 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1629 00001481 464646464646464646- <1>
  1629 0000148A 464646464646680A0D  <1>
  1630 00001493 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1630 0000149C 464646464646464646- <1>
  1630 000014A5 464646464646680A0D  <1>
  1631 000014AE 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
  1631 000014B7 464646464646464646- <1>
  1631 000014C0 464646464646680A0D  <1>
  1632 000014C9 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
  1632 000014D2 204C6F676963616C20- <1>
  1632 000014DB 447269766573204646- <1>
  1632 000014E4 680A0D              <1>
  1633 000014E7 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
  1633 000014F0 204669786564204472- <1>
  1633 000014F9 697665732020204646- <1>
  1633 00001502 680A0D              <1>
  1634 00001505 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
  1634 0000150E 2052656D6F7661626C- <1>
  1634 00001517 652044727673204646- <1>
  1634 00001520 680A0D              <1>
  1635 00001523 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
  1635 0000152C 65205A3A0A0D        <1>
  1636 00001532 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
  1636 0000153B 4F4D4D414E442E434F- <1>
  1636 00001544 4D2E2E2E0A0D00      <1>
  1637 0000154B 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
  1637 00001554 626F6F742073756D6D- <1>
  1637 0000155D 6172790A0D00        <1>
  1638                              <1>     %endif
  1639                              <1> l1:
  1640                              <1>     ;Load COMMAND.COM
  1641                              <1>     ;Get currentPSP ptr
  1642 00001563 B462                <1>     mov ah, 62h ;Get current PSP ptr in rdx
  1643 00001565 CD41                <1>     int 41h
  1644 00001567 B419                <1>     mov ah, 19h ;Get current Drive letter in al
  1645 00001569 CD41                <1>     int 41h
  1646 0000156B 0441                <1>     add al, "A"
  1647 0000156D 880512010000        <1>     mov byte [cmdLine], al  ;Store drive letter at start of command line
  1648 00001573 488D1D1A010000      <1>     lea rbx, cmdBlock
  1649 0000157A 488D425C            <1>     lea rax, qword [rdx + psp.fcb1]
  1650 0000157E 48894310            <1>     mov qword [rbx + execProg.pfcb1], rax
  1651 00001582 488D426C            <1>     lea rax, qword [rdx + psp.fcb2]
  1652 00001586 48894318            <1>     mov qword [rbx + execProg.pfcb2], rax
  1653 0000158A 488D15F4000000      <1>     lea rdx, cmdLine
  1654 00001591 48895308            <1>     mov qword [rbx + execProg.pCmdLine], rdx    ;Store command line here
  1655 00001595 B8004B0000          <1>     mov eax, 4B00h  ;Exec Prog
  1656 0000159A CD41                <1>     int 41h
  1657 0000159C 488D15A6000000      <1>     lea rdx, badCom
  1658 000015A3 B409                <1>     mov ah, 09h ;Print message
  1659 000015A5 CD41                <1>     int 41h
  1660 000015A7 E92A000000          <1>     jmp errorInit.ei0
  1661                              <1>     
  1662                              <1> ;--------------------------------
  1663                              <1> ;       PROCS FOR SYSINIT       :
  1664                              <1> ;--------------------------------
  1665                              <1> adjustDrvHdr:
  1666                              <1> ;Input: rsi = Effective address of driver in DOS segment
  1667                              <1> ;       rbp = Ptr to the start of the DOS segment
  1668                              <1> ;Output: rsi = EA of next header in DOS segment
  1669 000015AC 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
  1670 000015B0 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
  1671 000015B4 48813EFFFFFFFF      <1>     cmp qword [rsi + drvHdr.nxtPtr], -1 ;End of chain?
  1672 000015BB 740A                <1>     je .exit
  1673 000015BD 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
  1674 000015C0 4881C622000000      <1>     add rsi, drvHdr_size
  1675                              <1> .exit:
  1676 000015C7 C3                  <1>     ret
  1677                              <1> errorInit:
  1678                              <1> ;If a critical error occurs during sysinit, fail through here
  1679                              <1> ;Int 42h, 43h and 44h point here during sysinit
  1680 000015C8 488D2D49000000      <1>     lea rbp, hltmsg
  1681 000015CF B804130000          <1>     mov eax, 1304h
  1682 000015D4 CD30                <1>     int 30h
  1683                              <1>     ;cli ;Clear interrupts
  1684                              <1>     ;mov al, -1
  1685                              <1>     ;mov dx, 0A1h    ;PIC2 data
  1686                              <1>     ;out dx, al      ;Mask all lines
  1687                              <1>     ;mov dx, 21h     ;PIC1 data
  1688                              <1>     ;out dx, al      ;Mask all lines
  1689                              <1> .ei0:
  1690 000015D6 F4                  <1>     hlt
  1691 000015D7 F390                <1>     pause
  1692 000015D9 EBFB                <1>     jmp short .ei0
  1693                              <1> noCmdCom:
  1694 000015DB 488D1567000000      <1>     lea rdx, badCom
  1695 000015E2 B409                <1>     mov ah, 09h
  1696 000015E4 CD41                <1>     int 41h
  1697 000015E6 EBEE                <1>     jmp short errorInit.ei0
  1698                              <1> ;--------------------------------
  1699                              <1> ;       DATA FOR SYSINIT        :
  1700                              <1> ;--------------------------------
  1701 000015E8 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
  1701 000015F1 5343502F444F532E2E- <1>
  1701 000015FA 2E0A0D24            <1>
  1702 000015FE 4D656D6F727920416C- <1> mcbFailmsg db "Memory Allocation Error",0Ah,0Dh,0
  1702 00001607 6C6F636174696F6E20- <1>
  1702 00001610 4572726F720A0D00    <1>
  1703 00001618 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
  1703 00001621 7469616C6973696E67- <1>
  1703 0000162A 20534350444F532E53- <1>
  1703 00001633 59532E205379737465- <1>
  1703 0000163C 6D2068616C74696E67- <1>
  1703 00001645 2E2E2E00            <1>
  1704 00001649 426164206F72206D69- <1> badCom  db "Bad or missing Command interpreter",0Ah,0Dh,"$"
  1704 00001652 7373696E6720436F6D- <1>
  1704 0000165B 6D616E6420696E7465- <1>
  1704 00001664 727072657465720A0D- <1>
  1704 0000166D 24                  <1>
  1705 0000166E 434F4E00            <1> conName db "CON",0
  1706 00001672 41555800            <1> auxName db "AUX",0
  1707 00001676 50524E00            <1> prnName db "PRN",0
  1708                              <1> 
  1709 0000167A 434F4E4649472E5359- <1> cfgspec db "CONFIG.SYS",0 ;ASCIIZ for CONFIG
  1709 00001683 5300                <1>
  1710 00001685 5F3A5C434F4D4D414E- <1> cmdLine db "_:\COMMAND.COM",0
  1710 0000168E 442E434F4D00        <1>
  1711                              <1> cmdBlock:
  1712                              <1>     istruc execProg
  1713 00001694 0000000000000000    <1>     at execProg.pEnv,       dq 0    ;Keep at 0 to "copy" DOS's environment ptr
  1714 0000169C 0000000000000000    <1>     at execProg.pCmdLine,   dq 0
  1715 000016A4 0000000000000000    <1>     at execProg.pfcb1,      dq 0    ;Set to DOS's fcb 1 and 2
  1716 000016AC 0000000000000000    <1>     at execProg.pfcb2,      dq 0
  1717                              <1>     iend
  1718                              <1> exceptData:
  1719 000016B4 [7C5E000000000000]  <1>     dq i0
  1720 000016BC [835E000000000000]  <1>     dq i1
  1721 000016C4 [8D5E000000000000]  <1>     dq i2
  1722 000016CC [975E000000000000]  <1>     dq i3
  1723 000016D4 [A15E000000000000]  <1>     dq i4
  1724 000016DC [AB5E000000000000]  <1>     dq i5
  1725 000016E4 [B25E000000000000]  <1>     dq i6
  1726 000016EC [B95E000000000000]  <1>     dq i7
  1727 000016F4 [C05E000000000000]  <1>     dq i8
  1728 000016FC [C75E000000000000]  <1>     dq i9
  1729 00001704 [CE5E000000000000]  <1>     dq i10
  1730 0000170C [D55E000000000000]  <1>     dq i11
  1731 00001714 [DC5E000000000000]  <1>     dq i12
  1732 0000171C [E35E000000000000]  <1>     dq i13
  1733 00001724 [EA5E000000000000]  <1>     dq i14
  1734 0000172C [F15E000000000000]  <1>     dq i15
  1735 00001734 [F85E000000000000]  <1>     dq i16
  1736 0000173C [FF5E000000000000]  <1>     dq i17
  1737 00001744 [065F000000000000]  <1>     dq i18
  1738 0000174C [0D5F000000000000]  <1>     dq i19
  1739 00001754 [145F000000000000]  <1>     dq i20
  1740 0000175C [1B5F000000000000]  <1>     dq i21
  1741                              <1> 
  1742                              <1> intData:
  1743 00001764 [2454000000000000]  <1>     dq terminateProcess ;Int 40h
  1744 0000176C [ED68000000000000]  <1>     dq functionDispatch ;Int 41h
  1745 00001774 [C815000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
  1746 0000177C [456A000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
  1747 00001784 [2562000000000000]  <1>     dq dosDefCritErrHdlr 
  1748 0000178C [F562000000000000]  <1>     dq absDiskRead      ;Int 45h
  1749 00001794 [D662000000000000]  <1>     dq absDiskWrite     ;Int 46h
  1750 0000179C [2B54000000000000]  <1>     dq terminateRes     ;Int 47h
  1751 000017A4 [456A000000000000]  <1>     dq defaultIretq     ;Int 48h
  1752 000017AC [456A000000000000]  <1>     dq defaultIretq     ;Int 49h
  1753 000017B4 [456A000000000000]  <1>     dq defaultIretq     ;Int 4Ah
  1754 000017BC [456A000000000000]  <1>     dq defaultIretq     ;Int 4Bh
  1755 000017C4 [456A000000000000]  <1>     dq defaultIretq     ;Int 4Ch
  1756 000017CC [456A000000000000]  <1>     dq defaultIretq     ;Int 4Dh
  1757 000017D4 [456A000000000000]  <1>     dq defaultIretq     ;Int 4Eh
  1758 000017DC [EF70000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
  1759                              <1> nData:
  1760 000017E4 [9D72000000000000]  <1>     dq conHdr
  1761 000017EC 0480                <1>     dw 08004h
  1762 000017EE [4574000000000000]  <1>     dq nulStrat
  1763 000017F6 [4B74000000000000]  <1>     dq nulIntr
  1764 000017FE 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
  1765                              <1> 
  1766                              <1> diskInit:
  1767                              <1>     ;We create a function to deal with BPB parsing etc
  1768                              <1>     ;Start with the first primary partition on each hard disk (until max)
  1769                              <1>     ;   They dont have to be bootable
  1770                              <1>     ;Then go back and look for other partitions partitions. 
  1771                              <1>     ;   Add each other primary or logical ptn (until max)
  1772                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
  1773                              <1>     ;Use r8 as device counter
  1774 00001806 488DBD[9F7C0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
  1775 0000180D 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
  1775 00001815 00                  <1>
  1776 00001816 0F84C6000000        <1>     jz .remInit ;No? Go to removables
  1777 0000181C 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
  1777 00001825 00                  <1>
  1778 00001826 B280                <1>     mov dl, 80h ;Start with HDD 0
  1779                              <1> .primary:
  1780 00001828 64803C25[7DC00300]- <1>     cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1780 00001830 03                  <1>
  1781 00001831 0F84AB000000        <1>     je .remInit
  1782 00001837 31C9                <1>     xor ecx, ecx    ;Sector 0
  1783 00001839 E871010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
  1784 0000183E 0F8289000000        <1>     jc .primaryEpilog
  1785                              <1>     ;Here, check MBR or BPB
  1786 00001844 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
  1787 0000184D 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
  1788                              <1>     ;Now check if BPB or MBR
  1789 0000184F 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1790 00001851 8A6302              <1>     mov ah, byte [rbx + 2]
  1791 00001854 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1792 00001858 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
  1793                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
  1794                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
  1795 0000185A 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
  1796 00001861 B104                <1>     mov cl, 4
  1797                              <1> .checkPrimary:
  1798 00001863 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
  1799 00001866 3C01                <1>     cmp al, 01
  1800 00001868 7421                <1>     je .primaryFound
  1801 0000186A 3C04                <1>     cmp al, 04
  1802 0000186C 741D                <1>     je .primaryFound
  1803 0000186E 3C06                <1>     cmp al, 06
  1804 00001870 7419                <1>     je .primaryFound
  1805 00001872 3C0B                <1>     cmp al, 0Bh
  1806 00001874 7415                <1>     je .primaryFound
  1807 00001876 3C0C                <1>     cmp al, 0Ch
  1808 00001878 7411                <1>     je .primaryFound
  1809 0000187A 3C0E                <1>     cmp al, 0Eh
  1810 0000187C 740D                <1>     je .primaryFound
  1811 0000187E 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
  1812 00001885 FEC9                <1>     dec cl
  1813 00001887 7444                <1>     jz .primaryEpilog
  1814 00001889 EBD8                <1>     jmp short .checkPrimary
  1815                              <1> .primaryFound:
  1816                              <1>     ;Copy the first sector of this partition into memory
  1817 0000188B 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
  1818 0000188E E81C010000          <1>     call .initReadSector
  1819 00001893 7238                <1>     jc .primaryEpilog
  1820                              <1>     ;Now verify this is a BPB
  1821 00001895 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1822 00001897 8A6302              <1>     mov ah, byte [rbx + 2]
  1823 0000189A 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1824 0000189E 752D                <1>     jne .primaryEpilog   ;If not, skip
  1825                              <1>     ;Now copy data to internal tables
  1826 000018A0 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1827 000018A3 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1828 000018A8 57                  <1>     push rdi
  1829 000018A9 F348A5              <1>     rep movsq   ;Copy the BPB
  1830 000018AC 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1831                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1832 000018AD 4A8D9C05[6D7C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1833                              <1>     ;Add device count to rbx to point to correct entry
  1834 000018B5 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1835 000018B7 4A8D9CC5[777C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1836 000018BF 488933              <1>     mov qword [rbx], rsi
  1837 000018C2 49FFC0              <1>     inc r8  ;Goto next logical drive
  1838 000018C5 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have
  1839                              <1> .primaryEpilog:
  1840 000018CD FEC2                <1>     inc dl  ;Goto next BIOS drive
  1841 000018CF 88D6                <1>     mov dh, dl
  1842 000018D1 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1843 000018D4 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1844 000018DC 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1845                              <1> .extended:
  1846                              <1> ;We have gone through all the devices once
  1847                              <1>     ;cmp byte fs:[numPhysVol], 3  ;Are we at maximum devices (A: B: reserved)?
  1848                              <1>     ;je .remInit ;If yes, get removable devices
  1849                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1850                              <1>     ;xor ecx, ecx    ;Get MBR back
  1851                              <1>     ;call .initReadSector
  1852                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1853                              <1> .remInit:
  1854                              <1> ;Start by linking the default BPB's in the pointers table in the event that
  1855                              <1> ; for some reason the removable drives stop working or dont exist.
  1856                              <1> ;This forces the hard drives to start at C:
  1857 000018E2 53                  <1>     push rbx
  1858 000018E3 488D9D[9F7C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBblks] ;Get default drive A block ptr
  1859 000018EA 48899D[777C0000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl], rbx  ;Store in ptrs table
  1860 000018F1 4881C378000000      <1>     add rbx, bpbEx_size ;Goto next ptr
  1861 000018F8 48899D[7F7C0000]    <1>     mov qword [rbp + msdDriver.msdBPBTbl + 8], rbx  ;Store next pointer
  1862 000018FF 5B                  <1>     pop rbx
  1863                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1864 00001900 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1865 00001903 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1866 00001905 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1867                              <1>     ;rdi points to the space for the subsequent bpb's
  1868 00001908 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 0  ;Just skip removable init if no rem drives
  1868 00001910 00                  <1>
  1869 00001911 750A                <1>     jnz .removables
  1870 00001913 64800425[7DC00300]- <1>     add byte fs:[numPhysVol], 2 ;Pretend we have two more drives (A: and B:)
  1870 0000191B 02                  <1>
  1871 0000191C C3                  <1>     ret ;and return!
  1872                              <1> .removables:
  1873 0000191D 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1874 0000191F E88B000000          <1>     call .initReadSector
  1875 00001924 7238                <1>     jc .removableEpilogue   ;Goto next device
  1876                              <1>     ;Now verify this is a BPB
  1877 00001926 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1878 00001928 8A6302              <1>     mov ah, byte [rbx + 2]
  1879 0000192B 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1880 0000192F 752D                <1>     jne .removableEpilogue   ;If not, skip
  1881                              <1>     ;Now copy data to internal tables
  1882 00001931 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1883 00001934 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1884 00001939 57                  <1>     push rdi
  1885 0000193A F348A5              <1>     rep movsq   ;Copy the BPB
  1886 0000193D 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1887                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1888 0000193E 4A8D9C05[6D7C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1889                              <1>     ;Add device count to rbx to point to correct entry
  1890 00001946 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1891 00001948 4A8D9CC5[777C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1892 00001950 488933              <1>     mov qword [rbx], rsi
  1893 00001953 49FFC0              <1>     inc r8  ;Goto next logical drive
  1894 00001956 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Increment the number of valid drives we have    
  1895                              <1> .removableEpilogue:
  1896 0000195E FEC2                <1>     inc dl  ;Goto next BIOS device now
  1897 00001960 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1898 00001968 7412                <1>     je .end
  1899 0000196A 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1900 00001971 7403                <1>     je .re0
  1901 00001973 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1902                              <1> .re0:
  1903 00001976 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1904 0000197A 72A1                <1>     jb .removables
  1905                              <1> .end:
  1906 0000197C 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1906 00001984 01                  <1>
  1907 00001985 7401                <1>     je .singleRemDev
  1908 00001987 C3                  <1>     ret
  1909                              <1> .singleRemDev:
  1910                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1911 00001988 488D9D[6D7C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1912 0000198F 8A95[6D7C0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1913 00001995 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1914 00001998 488D9D[777C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1915 0000199F 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1916 000019A2 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1917 000019A6 64FE0425[7DC00300]  <1>     inc byte fs:[numPhysVol] ;Gotta register the phantom drive!
  1918 000019AE C3                  <1>     ret
  1919                              <1> .initReadSector:
  1920                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1921 000019AF B482                <1>     mov ah, 82h ;Read
  1922 000019B1 B001                <1>     mov al, 1   ;One sector
  1923 000019B3 488D9D[10030000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1924 000019BA CD33                <1>     int 33h
  1925 000019BC C3                  <1>     ret
    16                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    17                                  %include "./Source/BSS/dosSeg.asm"
    18                              <1> ;This file contains the main DOS data segment
    19                              <1> dosAPT: ;Additional Page tables
    20 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    21                              <1> dosDataArea:
    22 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    23 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    24 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    25 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    26 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    27 0003C013 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    28 0003C017 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    29 0003C01B ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    30                              <1> ;Above is the system stats
    31                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM SHARE TO NUMJOINDRV
    32                              <1> ;Both below variables can be edited with Int 41h AX=440Bh
    33 0003C023 ????                <1>     validNetNam resw 1    ;Flag if machinename valid, deflt no=0
    34 0003C025 ????                <1>     shareCount  resw 1    ;Share Retry Count, number of repeats before fail.
    35 0003C027 ????                <1>     shareDelay  resw 1    ;Share Delay, in multiples of ms. (TEMP, just loop)
    36 0003C029 ????????????????    <1>                 resq 1    ;Unused ptr for future, current disk buffer
    37 0003C031 ????????????????    <1>     vConHdlOff  resq 1    ;Ptr into buff to the next char to process in hdl req
    38                              <1>     ;   A value of 0 means no chars buffered.
    39 0003C039 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    40                              <1> sysVarsPtr:
    41 0003C041 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    42 0003C049 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    43 0003C051 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    44                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    45 0003C059 ????????????????    <1>     vConPtr     resq 1    ;Ptr to the devdrv of the char dev controlling vCon x
    46                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    47 0003C061 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    48 0003C063 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    49 0003C06B ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    50 0003C073 ????????????????    <1>     fcbsHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    51 0003C07B ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    52                              <1>     ;Old numLogicalDrives is now numPhysical volumes
    53 0003C07D ??                  <1>     numPhysVol  resb 1    ;Number of physical volumes in the system x
    54 0003C07E ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    55 0003C07F ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    56 0003C080 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    57 0003C0A2 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    58                              <1> ;Additional internal variables
    59 0003C0A3 ??                  <1>     numFiles    resb 1    ;FILES=5 default, max 255
    60                              <1>     ;Share hook functions here
    61                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
    62                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
    63                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
    64                              <1> 
    65                              <1>     ;Note to programmer - Please adjust as necessary:
    66                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
    67                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
    68                              <1>     ;Those suffixed with a ? have their future in question.
    69                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
    70                              <1> 
    71                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
    72                              <1>     ; to see if there are any open handles. Its implementation is completely
    73                              <1>     ; optional, and an equivalent form of the function is provided for older
    74                              <1>     ; SHARE versions that might be ported that don't have a particular function.
    75                              <1>     ;This function is defined as follows:
    76                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
    77                              <1>     ;                       for.
    78                              <1>     ; Output: CF=CY -> Handle not supported.
    79                              <1>     ;         CF=NC -> Handle supported. 
    80                              <1>     ;           ZF=ZE -> No Files open.
    81                              <1>     ;           ZF=NZ -> Some files are open.
    82                              <1> shareHooks:
    83                              <1>     ;markerShare resq 1  ;Marker Share hook
    84 0003C0A4 ????????????????    <1>     openFileCheck   resq 1  ;Check if share record for file exist       DONE
    85 0003C0AC ????????????????    <1>     openShare   resq 1  ;Share called on open.                          DONE 
    86 0003C0B4 ????????????????    <1>     closeShare  resq 1  ;Share called on close.                         DONE/
    87 0003C0BC ????????????????    <1>     closeCompShare  resq 1  ;Share to close all files for a machine.    DONE
    88 0003C0C4 ????????????????    <1>     closeTaskShare  resq 1  ;Share to close all files for a task.       DONE
    89 0003C0CC ????????????????    <1>     closeNameShare  resq 1  ;Share to close file by name.               DONE/
    90 0003C0D4 ????????????????    <1>     lockFileShare   resq 1  ;Share to lock file region.                 DONE
    91 0003C0DC ????????????????    <1>     unlockFileShare resq 1  ;Share to unlock file region.               DONE
    92 0003C0E4 ????????????????    <1>     checkFileLockShare  resq 1  ;Share to check file region locked.     DONE
    93 0003C0EC ????????????????    <1>     openFileListShare   resq 1  ;Share to get open file list entry.     DONE
    94 0003C0F4 ????????????????    <1>     updateFCBfromSFTShr resq 1  ;Share to update FCB from the SFT.      UNUSED?
    95 0003C0FC ????????????????    <1>     fstClstOfFCBShare   resq 1  ;Share to get first cluster of FCB.     UNUSED?
    96 0003C104 ????????????????    <1>     closeDupFileShare   resq 1  ;Share to close file if dup for proc.   DONE
    97 0003C10C ????????????????    <1>     closeNewHdlShare    resq 1  ;Share to close hdls of rec opened file. DONE
    98 0003C114 ????????????????    <1>     updateDirShare      resq 1  ;Share to update dir info in SFT.       DONE 
    99                              <1> ;Create SFT header and corresponding array of five default sft entries
   100 0003C11C <res Ah>            <1>     firstSftHeader  resb sfth_size
   101 0003C126 <res 4Fh>           <1>     firstSft    resb sft_size
   102 0003C175 <res 4Fh>           <1>     secondSft   resb sft_size
   103 0003C1C4 <res 4Fh>           <1>     thirdSft    resb sft_size
   104 0003C213 <res 4Fh>           <1>     fourthSft   resb sft_size
   105 0003C262 <res 4Fh>           <1>     fifthSft    resb sft_size
   106                              <1> 
   107                              <1> ;Virtual CONsole Buffers
   108 0003C2B1 ??                  <1>     vConCursPos resb 1     ;Keeps track for tabs stops (and var with 7)
   109                              <1>     ;Only incremented when CON device runs vCon
   110                              <1> vConBuf:    ;Proper buffer symbol
   111 0003C2B2 ??                  <1>     vConCurCnt  resb 1     ;Current count of chars in vConBuffer
   112 0003C2B3 <res 80h>           <1>     vConBuffer  resb 128   ;General Buffer for vCon 256 bytes. 
   113                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   114 0003C333 <res 80h>           <1>     vConInBuf   resb 128   ;vConsole buffer for reads ONLY
   115 0003C3B3 ??                  <1>     bufpad      resb 1     ;Used to pad with LF
   116                              <1> 
   117 0003C3B4 ??                  <1>     printEcho   resb 1  ;If 0, no echo. Non-zero => Echo to PRN
   118 0003C3B5 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
   119 0003C3B6 ??                  <1>     switchChar  resb 1  ;Editable by 41h/37h. Set to / by default
   120 0003C3B7 ??                  <1>     vConErr     resb 1  ;Inc on each char output call
   121                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   122                              <1> 
   123 0003C3B8 ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
   124                              <1> ;Server stuff. Default to all zeros (blank)
   125 0003C3B9 ??                  <1>     shareFlag   resb 1  ;Sharing flag, set to 0 for now (future expansion)
   126                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   127 0003C3BA ??                  <1>     serverCnt   resb 1  ;Increments on each 41h/5E01h call
   128 0003C3BB <res 10h>           <1>     machineName resb 16 ;Machine name (Set via 41h/5E01h) (set to SPC)    
   129                              <1> ;Swappable Data Area
   130 0003C3CB <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
   131 0003C3EB ??                  <1>                 resb 1  ;Alignment byte
   132                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   133 0003C3EC ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
   134 0003C3ED ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
   135 0003C3EE ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
   136 0003C3EF ??                  <1>     errorLocus  resb 1  ;Where the error took place  
   137 0003C3F0 ????                <1>     errorExCde  resw 1  ;Extended Error Code
   138 0003C3F2 ??                  <1>     errorAction resb 1  ;Suggested action for error  
   139 0003C3F3 ??                  <1>     errorClass  resb 1  ;Error Class
   140 0003C3F4 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
   141 0003C3FC ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
   142 0003C404 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
   143                              <1> 
   144 0003C40C ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
   145 0003C414 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
   146                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 41h/31h
   147                              <1>     ;Lower byte: User Specified
   148 0003C416 ??                  <1>     currentDrv  resb 1  ;Default drive x
   149 0003C417 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
   150                              <1> ;SDA, needs to be replaced between processes
   151                              <1> sdaMainSwap:
   152 0003C418 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
   153 0003C420 ????????????????    <1>     serverPSP   resq 1  ;PSP of prog making server request, used by net & share
   154 0003C428 ????                <1>     machineNum  resw 1  ;for sharing/networking 00h = default number (us)
   155 0003C42A ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
   156 0003C432 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
   157 0003C43A ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
   158 0003C442 ????                <1>     dirEntryNum resw 1  ;Offset into directory of entry we are looking for
   159 0003C444 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
   160 0003C44C ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
   161 0003C44D ??                  <1>     fileDirFlag resb 1  ;File/Directory flag. 0 = Dir, ¬0 = File
   162 0003C44E ??                  <1>     Int44Fail   resb 1  ;Set if Int 44h returned fail
   163                              <1> 
   164 0003C44F ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
   165 0003C457 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
   166 0003C45F ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
   167 0003C467 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
   168 0003C46F ??                  <1>     dirFlag     resb 1  ;Directory Flag. 0 => Search for Dir, 1 => for File
   169                              <1> ;The below flag tells DOS to print ^C in the termination function
   170 0003C470 ??                  <1>     ctrlCExit   resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
   171 0003C471 ??                  <1>     fcbSpaceOk  resb 1  ;If set, we allow embedded spaces in the filenames
   172                              <1> ;Time stuff
   173                              <1> ;Read the below two as a word
   174 0003C472 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
   175 0003C473 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
   176 0003C474 ??                  <1>     years       resb 1  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   177 0003C475 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
   178 0003C477 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
   179                              <1> 
   180 0003C478 ??                  <1>     vConDrvSwp  resb 1  ;Set if vCon controlled by a different driver to vConPtr
   181 0003C479 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
   182 0003C47A ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
   183                              <1> ;A request routed through the FCB or handle uses primReqHdr for its main IO.
   184                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   185                              <1> ; without forcing to re-build the whole primary request block.
   186                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   187                              <1> ; with secondary char output going through the secondary header
   188                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   189                              <1> ; for output)
   190                              <1> ;ioReqPkt is the largest possible packet
   191 0003C47B <res 2Ah>           <1>     secdReqHdr  resb ioReqPkt_size  ;Secondary, Character IO Request header x
   192 0003C4A5 <res 2Ah>           <1>     primReqHdr  resb ioReqPkt_size  ;Primary Disk AND Char. IO Request header x
   193 0003C4CF <res 2Ah>           <1>     critReqHdr  resb ioReqPkt_size  ;Used for ^C detection!
   194 0003C4F9 ??                  <1>     pspCopyFlg  resb 1  ;Set to -1 for child process PSP, 0 for simple PSP copy
   195                              <1> ;Swappable Buffers
   196 0003C4FA ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   197                              <1>     ;We add an additional byte to save ah too
   198 0003C500 ????                <1>     singleIObyt resw 1  ;For single IO byte buffers
   199 0003C502 <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   200 0003C582 <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   201 0003C602 ????????????????    <1>     fname1Ptr   resq 1  ;Ptr to first filename argument
   202 0003C60A ????????????????    <1>     fname2Ptr   resq 1  ;Ptr to second filename argument
   203 0003C612 ??                  <1>     skipDisk    resb 1  ;Set => Read Disk, Clear => Skip checking on disk
   204                              <1> ;Misc bookkeeping flags and vars
   205 0003C613 <res 2Bh>           <1>     dosffblock  resb ffBlock_size   ;Internal search block (fullsize unlike DOS)
   206 0003C63E <res 20h>           <1>     curDirCopy  resb fatDirEntry_size   ;Copy of directory being accessed
   207 0003C65E <res 5Bh>           <1>     tmpCDS      resb cds_size   ;Temp CDS for Server calls that need a tmp CDS
   208 0003C6B9 <res Ch>            <1>     fcbName     resb 11+1   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   209 0003C6C5 <res Ch>            <1>     wcdFcbName  resb 11+1   ;Used to expand any wildcards for rename
   210 0003C6D1 ????????????????    <1>     fileDirSect resq 1  ;File/Directory starting sector, for each level
   211                              <1> 
   212 0003C6D9 ??                  <1>     volIncmpFCB resb 1  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   213 0003C6DA ??                  <1>     extFCBAttr  resb 1  ;Extended FCB file attribute
   214 0003C6DB ??                  <1>     extFCBFlag  resb 1  ;Set to -1 if Extended FCB
   215 0003C6DC ??                  <1>     searchAttr  resb 1  ;Directory Search attributes
   216 0003C6DD ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   217 0003C6DE ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   218 0003C6DF ??                  <1>     badNameRen  resb 1  ;Device name or File not found for rename
   219 0003C6E0 ??                  <1>     rwFlag      resb 1  ;00h=Read, -1=Write, read/write/share error reporting
   220 0003C6E1 ??                  <1>     spliceFlag  resb 1  ;00 = Relative path, !0 = Full path
   221 0003C6E2 ??                  <1>     dosInvoke   resb 1  ;0 = Invoked via Int 41h, -1 = Invoked via 41h/5D01h
   222                              <1> 
   223 0003C6E3 ??                  <1>     vConInsert  resb 1  ;Insert mode on 41/0ah (0 = not insert, !0 = insert)
   224 0003C6E4 ??                  <1>     fileExist   resb 1  ;-1 if file in pathspec exists (create/open)
   225 0003C6E5 ??                  <1>     parDirExist resb 1  ;-1 if parent directory for file exists (create/open)
   226 0003C6E6 ??                  <1>     exitType    resb 1  ;Forms the upper byte of the errorlvl
   227 0003C6E7 ??                  <1>     openCreate  resb 1  ;If open, set to 0, if Create set to -1
   228 0003C6E8 ??                  <1>     delChar     resb 1  ;Char to replace first byte of deleted file's name
   229 0003C6E9 ??                  <1>     workingDrv  resb 1  ;Working drive number, 0 based, from DPB
   230                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   231                              <1> workingDD:  ;Create a symbol for the working device driver too
   232 0003C6EA ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   233 0003C6F2 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   234 0003C6FA ????????????????    <1>     workingFCB  resq 1  ;Ptr to the caller FCB for FCB function
   235                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   236                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   237 0003C702 ????????????????    <1>     workingSFT  resq 1  ;Temporary SFT (may not be not current) ptr being used
   238 0003C70A ????????????????    <1>     curHdlPtr   resq 1  ;Ptr to JFT handle entry in current PSP
   239 0003C712 ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   240 0003C71A ????                <1>     currentNdx  resw 1  ;Used to access the current SFTNdx being opened/created
   241 0003C71C ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   242 0003C71E ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   243                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   244                              <1> ; and 32 byte offset into the sector for directory
   245 0003C726 ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   246                              <1> sectTfr:    ;Symbol to use this var to hold a counter on disk read/write ops 
   247                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   248 0003C72E ????                <1>     entry       resw 1  ;32 byte offset into a sector or #fats sectors/fat
   249                              <1> ;***************************************************|
   250                              <1> ; Needs to be set up before any file access         |
   251                              <1> ; These vars keep track of file access properties   |
   252                              <1> ;   and must be used only for such purposes.        |
   253                              <1> ;***************************************************|
   254 0003C730 ????????            <1>     currClustF  resd 1  ;Relative cluster in file being r/w to/from
   255 0003C734 ????????            <1>     currClustD  resd 1  ;Current Disk Cluster being r/w to/from
   256                              <1> 
   257 0003C738 ????????            <1>     currSectF   resd 1  ;Current Sector in File being r/w to/from
   258 0003C73C ??                  <1>     currSectC   resb 1  ;Current Sector in Cluster being r/w to/from
   259 0003C73D ????????????????    <1>     currSectD   resq 1  ;Current absolute Sector number on Disk
   260                              <1> 
   261 0003C745 ????                <1>     currByteS   resw 1  ;Current Byte in sector being r/w to/from
   262 0003C747 ????????            <1>     currByteF   resd 1  ;Current Byte in file being r/w to/from
   263                              <1> ;***************************************************|
   264 0003C74B ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   265 0003C74F ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   266 0003C753 ??                  <1>     fileGrowing resb 1  ;Flag to indicate the file is growing
   267 0003C754 ????????            <1>     bytesAppend resd 1  ;Number of bytes by which a file has been extended by
   268 0003C758 ????????            <1>     tfrLen      resd 1  ;Number of bytes to transfer
   269 0003C75C ????????            <1>     tfrCntr     resd 1  ;Number of bytes left to transfer
   270                              <1> ;Directory stuff
   271 0003C760 ????????            <1>     dirClustPar resd 1  ;Absolute disk cluster of the start of the parent dir
   272 0003C764 ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   273 0003C768 ????                <1>     dirSect     resw 1  ;Sector of current directory cluster
   274 0003C76A ????????            <1>     dirEntry    resd 1  ;32 byte offset in dir for file being searched for
   275                              <1> ;Error DPB 
   276 0003C76E ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary situations
   277 0003C776 ??                  <1>     mediaByte   resb 1  ;Calls 1Bh and 1Ch return ptr to here
   278                              <1>     
   279 0003C777 <res 2Bh>           <1>     renameFFBlk resb ffBlock_size   ;Source file "find first" block
   280 0003C7A2 <res 20h>           <1>     renameDir   resb fatDirEntry_size   ;Build new file dir entry here
   281                              <1> ;Stacks and scratch SFT
   282 0003C7C2 <res 528h>          <1>     critStack   resq 165
   283 0003CCEA ????????????????    <1>     critStakTop resq 1
   284                              <1> 
   285 0003CCF2 <res 4Fh>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   286                              <1> 
   287 0003CD41 <res 638h>          <1>     AuxStack    resq 199
   288 0003D379 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   289 0003D381 <res 638h>          <1>     DiskStack   resq 199
   290 0003D9B9 ????????????????    <1>     DiskStakTop resq 1
   291                              <1> 
   292 0003D9C1 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   293 0003D9C2 ??                  <1>     lookahead   resb 1  ;-1 => Lookahead on select Char function calls! 
   294                              <1> ;Putting this in SDA as multiple tasks can try to parse EXE's simultaneously
   295 0003D9C3 <res 70h>           <1>     exeHdrSpace resb imageFileOptionalHeader_size   ;Use for parsing an EXE hdr
   296 0003DA33 <res 28h>           <1>     sectHdr     resb imageSectionHdr_size   ;Use to load one sctn hdr at a time
   297                              <1> ;Exception handler vars in SDA now 
   298 0003DA5B <res 10h>           <1>     byteBuffer  resb 16 ;Used by DOS exception handler to build strings
   299 0003DA6B ??                  <1>     haltDOS     resb 1  ;Set by DOS exception handler to indicate DOS will halt
   300                              <1>     sdaLen      equ     $ - sda 
   301                              <1>     sdaMSLen    equ     $ - sdaMainSwap
   302                              <1> 
   303                              <1> ;Additional variables NOT in the SDA
   304 0003DA6C ????????????????    <1>     serverDispTblPtr    resq 1  ;DO NOT MOVE! Used to find server dispatch tbl
   305 0003DA74 ??                  <1>     xActDrv     resb 1  ;0 based number of last drive to transact
   306 0003DA75 <res 2Ah>           <1>     bkupReqHdr  resb ioReqPkt_size  ;A backup header to allow copying to
   307                              <1>     ;for saving the current header when quickly doing a second request
   308                              <1> 
   309 0003DA9F ??                  <1>     lastDiskNum resb 1  ;Last drive that operated
   310 0003DAA0 ????                <1>     lastOpTime  resw 1  ;Packed Time of last successful disk operation
   311                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   312                              <1> inExtASCII:
   313 0003DAA2 ??                  <1>     noPrintTog  resb 1  ;00 = Toggle as usual, 01 = Prevent toggle
   314 0003DAA3 ????                <1>     keybTicks   resw 1  ;Counts the number of cycles spent in a kb loop.
   315                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   316                              <1>     ; copy of the date/time record
   317                              <1> 
   318                              <1>     dSegLen     equ     $
    18                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    19                                  %define currSegVBase section.resSeg.vstart
    20                                  %include "./Source/Data/staticData.asm"
    21                              <1> 
    22                              <1> ;-----------------------------------:
    23                              <1> ;       Static Data Variables       :
    24                              <1> ;-----------------------------------:
    25 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    26 00000001 5A                  <1> dosMinor    db 90      ;.90
    27 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    27 0000000B 535953              <1>
    28 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    28 00000017 535953              <1>
    29 0000001A 1400                <1> maxHndls    dw 20    ;Initially hardcoded 20, will be made changable soon
    30                              <1> ;Use the idea of having a JFT valid byte in the PSP to reuse PSP as ptrToNewJFT
    31                              <1> ;At that point, maxHndls will be removed
    32                              <1> ;-----------------------------------:
    33                              <1> ;        Static Data Tables         :
    34                              <1> ;-----------------------------------:
    35                              <1> ctryTbl:
    36                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
    37 0000001C 0100                <1>     dw 1            
    38 0000001E 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
    39 00000023 2C00                <1>     db ",",0
    40 00000025 2E00                <1>     db ".",0
    41 00000027 2D00                <1>     db "-",0
    42 00000029 3A00                <1>     db ":",0
    43 0000002B 00                  <1>     db 0
    44 0000002C 02                  <1>     db 2 
    45 0000002D 00                  <1>     db 0 
    46 0000002E 0000000000000000    <1>     dq 0 
    47 00000036 2C00                <1>     db ",",0    
    48 00000038 000000000000000000- <1>     db 0,0,0,0,0,0,0,0,0,0
    48 00000041 00                  <1>
    49                              <1> 
    50                              <1> ;IO Char table
    51                              <1> ;This table has Request header length, command code and error flags
    52                              <1> ; as a packed DWORD entry
    53                              <1> ioRqCmdErrTbl:
    54                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    55                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    56 00000042 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    57 00000046 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    58 0000004A 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    59 0000004E 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    60 00000052 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    61 00000056 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    62                              <1> 
    63                              <1> 
    64                              <1> 
    65                              <1> ;Keyboard vCon static data taht can be edited and replaced by a user if they
    66                              <1> ; wish to install their own custom logic.
    67 0000005A 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    68 00000062 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    69 00000063 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    70                              <1> ;Extended ASCII keys with special meanings
    71 00000064 3B                  <1> extKeyTbl   db eF1
    72 00000065 D627                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    73 00000067 3C                  <1>             db eF2
    74 00000068 C827                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    75 0000006A 3D                  <1>             db eF3
    76 0000006B CF27                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    77 0000006D 3E                  <1>             db eF4
    78 0000006E 0428                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    79 00000070 3F                  <1>             db eF5
    80 00000071 4928                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    81 00000073 40                  <1>             db eF6
    82 00000074 5F28                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    83 00000076 41                  <1>             db eF7
    84 00000077 6628                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    85 00000079 4B                  <1>             db eCursL
    86 0000007A 2D27                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    87 0000007C 4D                  <1>             db eCursR
    88 0000007D D627                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    89 0000007F 52                  <1>             db eIns
    90 00000080 7128                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    91 00000082 53                  <1>             db eDel
    92 00000083 7828                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    93                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    94                              <1> 
    95                              <1> ;When counting the number of days, first compute the number of years since
    96                              <1> ; 1980 and your year. 
    97                              <1> ;Then, using the table below, find the number of leap years between 1980
    98                              <1> ; and (YourYear - 1). 
    99                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   100                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   101                              <1> ;
   102                              <1> ;Use the months table to get the number of days in a normal month as leap 
   103                              <1> ; years are added using the previous comment.
   104                              <1> 
   105                              <1> ;This table is the number of days in the month
   106                              <1> ;The function which updates the days in Feb writes the number to this table
   107                              <1> monthsTbl:  
   108 00000085 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   108 0000008E 1F1E1F              <1>
   109                              <1> 
   110                              <1> ;Error tables
   111                              <1> errXlatTbl:
   112                              <1> ;Each entry is n bytes long, defined as
   113                              <1> ; Byte 0      : DOS function number for which translation will occur
   114                              <1> ; Byte 1      : Length of the table entry - 2
   115                              <1> ; Bytes n - 3 : Acceptable Error codes
   116                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   117                              <1> ;The table is terminated with a single -1 byte
   118                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   119                              <1> ; only on entry to a disk function
   120 00000091 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   121 00000095 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   122 0000009A 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   123 000000A0 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   124 000000A4 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   125 000000AA 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   126 000000B1 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   127 000000B4 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   128 000000B8 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   129 000000BC 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   130 000000C1 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   131 000000C5 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   132 000000CB 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   133 000000D2 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   134 000000D6 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   135 000000DA 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   136 000000DD 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   137 000000E1 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   138 000000E5 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   139 000000EA 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   140 000000F2 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   141 000000F4 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   142 000000F9 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   143 000000FC 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   144 00000102 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   145 00000106 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   146 00000109 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   147 0000010F 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   148 00000116 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   149 0000011C 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   150 00000120 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   151 00000124 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   152 00000127 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   153 0000012C FF                  <1>     db -1   ;End Of Table marker
   154                              <1> 
   155                              <1> 
   156                              <1> extErrTbl:
   157                              <1> ;This table contains the default values for how to respond
   158                              <1> ; to particular errors. Fields with -1 need to be filled in before
   159                              <1> ; setting variables using this table.
   160                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   161                              <1> ; Byte 0: Extended Error Code as a byte
   162                              <1> ; Byte 1: Error Class
   163                              <1> ; Byte 2: Error Suggested Action
   164                              <1> ; Byte 3: Error Locus
   165                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   166                              <1> ;
   167                              <1> ;Error 01: Invalid function number
   168 0000012D 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   169                              <1> ;Error 02: File not found
   170 00000131 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   171                              <1> ;Error 03: Path not found
   172 00000135 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   173                              <1> ;Error 04: Too many open handles, and no handles are left
   174 00000139 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   175                              <1> ;Error 05: Access being denied
   176 0000013D 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   177                              <1> ;Error 06: Invalid File handle being provided
   178 00000141 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   179                              <1> ;Error 07: MCB chain destroyed
   180 00000145 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   181                              <1> ;Error 08: No Memory remaining
   182 00000149 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   183                              <1> ;Error 09: Invalid MCB block Address
   184 0000014D 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   185                              <1> ;Error 0A: Bad Environment block
   186 00000151 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   187                              <1> ;Error 0B: Data provided in a bad format
   188 00000155 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   189                              <1> ;Error 0C: Access Code Invalid
   190 00000159 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   191                              <1> ;Error 0D: Error due to Invalid Data provided
   192 0000015D 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   193                              <1> ;Error 0F: Error due to a bad drive letter being provided
   194 00000161 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   195                              <1> ;Error 10: Error due to attempting to delete the CWD
   196 00000165 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   197                              <1> ;Error 11: Error due to a unknown device being used
   198 00000169 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   199                              <1> ;Error 12: No more file handles available
   200 0000016D 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   201                              <1> ;Error 50: Network request not supported
   202 00000171 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   203                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   204 00000175 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   205                              <1> ;Error 21: File Locking Violation
   206 00000179 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   207                              <1> ;Error 54: Too many levels of redirection error
   208 0000017D 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   209                              <1> ;Error 56: Bad resource password provided
   210 00000181 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   211                              <1> ;Error 52: Directory already exists
   212 00000185 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   213                              <1> ;Error 32: Network request not supported by DOS
   214 00000189 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   215                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   216 0000018D 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   217                              <1> ;Error 57: Bad parameter in request
   218 00000191 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   219                              <1> ;Error 53: Fail was returned from Int 44h
   220 00000195 530D0401            <1>     db errFI44, eClsUnk, eActAbt, eLocUnk
   221                              <1> ;Error 24: Sharing Buffer Full
   222 00000199 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   223 0000019D FFFFFFFF            <1>     dd -1   ;End of table signature
   224                              <1> 
   225                              <1> badDirNameChar: ;This table needs to be replaced in other Codepages (i.e. Kanji)
   226 000001A1 000102030405060708- <1>     db 00h,01h,02h,03h,04h,05h,06h,07h,08h,09h,0Ah,0Bh,0Ch,0Dh,0Eh,0Fh
   226 000001AA 090A0B0C0D0E0F      <1>
   227 000001B1 101112131415161718- <1>     db 10h,11h,12h,13h,14h,15h,16h,17h,18h,19h,1Ah,1Bh,1Ch,1Dh,1Eh,1Fh
   227 000001BA 191A1B1C1D1E1F      <1>
   228 000001C1 222A2B2C2E2F3A3B3C- <1>     db '"', "*", "+",",",".","/",":",";","<","=",">","?","[","\","]","|"
   228 000001CA 3D3E3F5B5C5D7C      <1>
   229                              <1> badDirNameCharL equ $ - badDirNameChar
   230                              <1> ;The chars * ? . \ / need to always be handled separately
   231                              <1> 
   232                              <1> extAsciiTbl:    ;This table needs to be replaced in other Codepages
   233 000001D1 809A45418E418F8045- <1>     db 80h, 9Ah, 45h, 41h, 8Eh, 41h, 8Fh, 80h, 45h, 45h, 45h, 49h, 49h, 49h
   233 000001DA 4545494949          <1>
   234 000001DF 8E8F9092924F994F55- <1>     db 8Eh, 8Fh, 90h, 92h, 92h, 4Fh, 99h, 4Fh, 55h, 55h, 59h, 99h, 9Ah, 9Bh
   234 000001E8 5559999A9B          <1>
   235 000001ED 9C9D9E9F41494F55A5- <1>     db 9Ch, 9Dh, 9Eh, 9Fh, 41h, 49h, 4Fh, 55h, 0A5h, 0A5h, 0A6h, 0A7h, 0A8h
   235 000001F6 A5A6A7A8            <1>
   236 000001FA A9AAABACADAEAFB0B1- <1>     db 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh, 0B0h, 0B1h, 0B2h, 0B3h, 0B4h
   236 00000203 B2B3B4              <1>
   237 00000206 B5B6B7B8B9BABBBCBD- <1>     db 0B5h, 0B6h, 0B7h, 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh, 0C0h 
   237 0000020F BEBFC0              <1>
   238 00000212 C1C2C3C4C5C6C7C8C9- <1>     db 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h, 0C8h, 0C9h, 0CAh, 0CBh, 0CCh
   238 0000021B CACBCC              <1>
   239 0000021E CDCECFD0D1D2D3D4D5- <1>     db 0CDh, 0CEh, 0CFh, 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h, 0D8h 
   239 00000227 D6D7D8              <1>
   240 0000022A D9DADBDCDDDEDFE0E1- <1>     db 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh, 0E0h, 0E1h, 0E2h, 0E3h, 0E4h
   240 00000233 E2E3E4              <1>
   241 00000236 E5E6E7E8E9EAEBECED- <1>     db 0E5h, 0E6h, 0E7h, 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh, 0F0h
   241 0000023F EEEFF0              <1>
   242 00000242 F1F2F3F4F5F6F7F8F9- <1>     db 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h, 0F8h, 0F9h, 0FAh, 0FBh, 0FCh
   242 0000024B FAFBFC              <1>
   243 0000024E FDFEFF              <1>     db 0FDh, 0FEh, 0FFh
   244                              <1> 
   245                              <1> asciiCharProperties:   ;This table needs to replaces in other Codepages
   246 00000251 F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F0h, 0F6h, 0F6h 
   246 0000025A F0F6F6              <1>
   247 0000025D F6F6F6F6F6F6F6F6F6- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h
   247 00000266 F6F6F6              <1>
   248 00000269 F6F6F6F6F6F6F6F6F8- <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F8h, 0FFh, 0F6h, 0FFh 
   248 00000272 FFF6FF              <1>
   249 00000275 FFFFFFFFFFFFFFF4F4- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h 
   249 0000027E FFFEF6              <1>
   250 00000281 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0F4h 
   250 0000028A FFF4F4              <1>
   251 0000028D F4F4F4FFFFFFFFFFFF- <1>     db 0F4h, 0F4h, 0F4h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   251 00000296 FFFFFF              <1>
   252 00000299 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   252 000002A2 FFFFFF              <1>
   253 000002A5 FFFFFFFFFFFFFFF6F6- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh 
   253 000002AE F6FFFF              <1>
   254 000002B1 FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   254 000002BA FFFFFF              <1>
   255 000002BD FFFFFFFFFFFFFFFFFF- <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh 
   255 000002C6 FFFFFF              <1>
   256 000002C9 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   
   257                              <1> 
   258                              <1> hardErrorStack:
   259 000002D1 13                  <1>     db errWpd
   260 000002D2 0B                  <1>     db eClsMedia
   261 000002D3 07                  <1>     db eActRetUsr
   262 000002D4 02                  <1>     db eLocDsk
    21                                  %include "./Source/Data/dispTbl.asm"
    22                              <1> ;Kernel Dispatch Function Table
    23                              <1> 
    24                              <1> kDispTbl:
    25 000002D5 7052                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    26 000002D7 581F                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
    27 000002D9 651F                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
    28 000002DB 2220                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
    29 000002DD 4B20                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
    30 000002DF 5320                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    31 000002E1 6B20                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    32 000002E3 9E20                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    33 000002E5 C320                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    34 000002E7 2221                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    35 000002E9 D523                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    36 000002EB 3121                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    37 000002ED 3D21                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    38 000002EF FB68                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    39 000002F1 2D69                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    40 000002F3 762B                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    41 000002F5 802B                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    42 000002F7 1429                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    43 000002F9 CD29                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    44 000002FB 542A                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    45 000002FD 8A2B                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    46 000002FF 942B                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    47 00000301 9E2B                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    48 00000303 832A                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    49 00000305 B66B                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    50 00000307 4669                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    51 00000309 412B                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    52 0000030B 4D69                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    53 0000030D 4F69                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    54 0000030F B66B                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    55 00000311 B66B                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    56 00000313 ED69                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    57 00000315 B66B                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    58 00000317 A82B                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    59 00000319 B22B                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    60 0000031B EE2A                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    61 0000031D BC2B                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    62 0000031F 9869                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    63 00000321 7C51                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    64 00000323 C62B                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    65 00000325 D02B                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    66 00000327 672B                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    67 00000329 4E26                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    68 0000032B 7526                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    69 0000032D 7B26                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    70 0000032F 9C26                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    71 00000331 CA69                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    72 00000333 542B                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    73 00000335 D869                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    74 00000337 4252                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    75 00000339 EF69                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    76 0000033B AA68                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    77 0000033D 276A                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    78 0000033F 386A                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    79 00000341 496A                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    80 00000343 B359                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    81 00000345 DC59                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    82 00000347 BA16                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    83 00000349 EA18                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    84 0000034B C31A                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    85 0000034D C52D                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    86 0000034F D62D                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    87 00000351 002F                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    88 00000353 3F2F                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    89 00000355 7A2F                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    90 00000357 862F                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    91 00000359 EB2F                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    92 0000035B 5A30                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    93 0000035D AE46                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    94 0000035F 4231                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    95 00000361 8531                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    96 00000363 8B1B                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    97 00000365 F84B                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    98 00000367 224E                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    99 00000369 2A4F                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
   100 0000036B D153                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
   101 0000036D 7252                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
   102 0000036F 8D6A                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
   103 00000371 AD31                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
   104 00000373 1832                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   105 00000375 D868                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   106 00000377 E168                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   107 00000379 9B6A                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   108 0000037B AC6A                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   109 0000037D 866B                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   110 0000037F 6951                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   111 00000381 4832                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   112 00000383 D432                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   113 00000385 C850                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   114 00000387 8D6B                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   115 00000389 1C33                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   116 0000038B E433                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   117 0000038D 1E34                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   118 0000038F B76B                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   119 00000391 786D                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   120 00000393 DE6D                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   121 00000395 0E1C                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   122 00000397 B66B                <1>     dw noOp - kDispTbl                ;AH = 61H, RESERVED
   123 00000399 EA68                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   124 0000039B B66B                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   125 0000039D F368                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   126 0000039F 0B5A                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   127 000003A1 0B5A                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   128 000003A3 8A34                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   129 000003A5 F833                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   130 000003A7 B66B                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   131                              <1> kDispTblL  equ $ - kDispTbl 
   132                              <1> 
   133                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   134 000003A9 986D                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   135 000003AB 373C                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   136 000003AD 6162                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   137 000003AF 9B6D                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   138 000003B1 8963                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   139 000003B3 931E                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   140 000003B5 CB59                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   141 000003B7 FF04                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   142 000003B9 CB45                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   143 000003BB 3105                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   144 000003BD 7E6E                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   145 000003BF 066E                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   146 000003C1 E26A                <1>     dw noOp - mDispTbl  ;AX=120Ch, Open device and set SFT owner
   147 000003C3 2D28                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   148 000003C5 3F05                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   149 000003C7 5905                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   150 000003C9 6705                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   151 000003CB E563                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   152 000003CD C763                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   153 000003CF 9563                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   154 000003D1 1365                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   155 000003D3 7A05                <1>     dw flushBuffer - mDispTbl   ;AX=1215h
   156 000003D5 FA44                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   157 000003D7 5763                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   158 000003D9 6F62                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   159 000003DB FC62                <1>     dw getCDS - mDispTbl    ;AX=1219h
   160 000003DD 1710                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   161 000003DF C027                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   162 000003E1 E26A                <1>     dw noOp - mDispTbl  ;AX=121Ch -> Old Checksum memory
   163 000003E3 E26A                <1>     dw noOp - mDispTbl  ;AX=121Dh -> Old Sum Memory
   164 000003E5 FE63                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   165 000003E7 AD62                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   166 000003E9 2F45                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   167 000003EB 301B                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   168 000003ED 7067                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   169 000003EF 5315                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   170 000003F1 E36D                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   171 000003F3 BC63                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   172                              <1> mDispTblL   equ     $ - mDispTbl
   173                              <1> 
   174                              <1> serverDispTbl:  ;Server Dispatch functions
   175 000003F5 0B                  <1>     db 0Bh  ;Number of entries
   176 000003F6 DE6A                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   177 000003F8 306B                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   178 000003FA 896B                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   179 000003FC 9A6B                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   180 000003FE A26B                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   181 00000400 AA6B                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   182 00000402 C56B                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   183 00000404 EF6B                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   184 00000406 EF6B                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   185 00000408 EF6B                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   186 0000040A FC6B                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
    22                                  %include "./Source/Debug/debug.asm"
    23                              <1> ;This file contains debugging macros, procs and strings
    24                              <1> ; that we can use to output to COM1 bypassing the operating system.
    25                              <1> ;A serial terminal must be connected for this to work.
    26                              <1> 
    27                              <1> ;Variables and equates
    28                              <1> 
    29 0000040C 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    30                              <1> 
    31 00000414 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    31 0000041D 39414243444546      <1>
    32                              <1> ;Common procedures
    33                              <1> debMakeDebuggerRespond:
    34 00000424 488D2D26000000      <1>     lea rbp, .msg
    35 0000042B E8AF000000          <1>     call debPrintNullString
    36 00000430 B900001000          <1>     mov ecx, 100000h
    37                              <1> .waiting:
    38 00000435 FFC9                <1>     dec ecx
    39 00000437 740C                <1>     jz .timeout
    40 00000439 B402                <1>     mov ah, 02h ;Blocking recieve!
    41 0000043B 31D2                <1>     xor edx, edx
    42 0000043D CD34                <1>     int 34h
    43 0000043F F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    44 00000442 75F1                <1>     jnz .waiting
    45 00000444 C3                  <1>     ret
    46                              <1> .timeout:
    47 00000445 488D2D47000000      <1>     lea rbp, .msg2
    48 0000044C E98E000000          <1>     jmp debPrintNullString
    49 00000451 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    49 0000045A 6B6579206174207468- <1>
    49 00000463 65207465726D696E61- <1>
    49 0000046C 6C20746F20636F6E74- <1>
    49 00000475 696E7565206F722077- <1>
    49 0000047E 61697420666F722074- <1>
    49 00000487 696D656F75742E2E2E- <1>
    49 00000490 0A0D00              <1>
    50 00000493 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    50 0000049C 436F6E74696E75696E- <1>
    50 000004A5 672E2E2E0A0D00      <1>
    51                              <1> debPrintHexByte:
    52                              <1> ;Print the hex byte in al as a hex value
    53 000004AC 52                  <1>     push rdx
    54 000004AD 53                  <1>     push rbx
    55 000004AE 50                  <1>     push rax
    56                              <1> 
    57 000004AF 88C2                <1>     mov dl, al           ;save byte in dl
    58 000004B1 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    59 000004B5 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    60 000004BA 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    61 000004BE E80C000000          <1>     call .wrchar
    62 000004C3 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    63 000004C6 E804000000          <1>     call .wrchar
    64                              <1> 
    65 000004CB 58                  <1>     pop rax
    66 000004CC 5B                  <1>     pop rbx
    67 000004CD 5A                  <1>     pop rdx
    68 000004CE C3                  <1>     ret
    69                              <1> .wrchar:
    70 000004CF 6687DB              <1>     xchg bx, bx
    71 000004D2 488D1D3BFFFFFF      <1>     lea rbx, debascii
    72 000004D9 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    73 000004DA B401                <1>     mov ah, 01h
    74 000004DC CD34                <1>     int 34h  ;print char
    75 000004DE C3                  <1>     ret
    76                              <1> 
    77                              <1> debPrintNullString:
    78                              <1> ;Print a null terminated string pointed to by rbp
    79 000004DF 56                  <1>     push rsi
    80 000004E0 50                  <1>     push rax
    81 000004E1 52                  <1>     push rdx
    82 000004E2 31D2                <1>     xor edx, edx    ;Select COM1
    83 000004E4 4889EE              <1>     mov rsi, rbp
    84                              <1> .getChar:
    85 000004E7 AC                  <1>     lodsb
    86 000004E8 84C0                <1>     test al, al
    87 000004EA 7406                <1>     jz .exit
    88 000004EC B401                <1>     mov ah, 01h
    89 000004EE CD34                <1>     int 34h
    90 000004F0 EBF5                <1>     jmp short .getChar
    91                              <1> .exit:
    92 000004F2 5A                  <1>     pop rdx
    93 000004F3 58                  <1>     pop rax
    94 000004F4 5E                  <1>     pop rsi
    95 000004F5 C3                  <1>     ret
    96                              <1> 
    97                              <1> debPrintDOSStack:
    98                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    99                              <1> ;Shows me which function, and parameters passed and returned
   100 000004F6 488D2DA5010000      <1>     lea rbp, .a1
   101 000004FD E8DDFFFFFF          <1>     call debPrintNullString
   102 00000502 488B15(5FC40300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
   103 00000509 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
   104 00000510 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   105 00000513 E802030000          <1>     call overlayQword
   106 00000518 4881C316000000      <1>     add rbx, 22
   107 0000051F 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   108 00000523 E8F2020000          <1>     call overlayQword
   109 00000528 4881C316000000      <1>     add rbx, 22
   110 0000052F 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   111 00000533 E8E2020000          <1>     call overlayQword
   112 00000538 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   113 0000053F 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   114 00000543 E8D2020000          <1>     call overlayQword
   115 00000548 4881C316000000      <1>     add rbx, 22 
   116 0000054F 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   117 00000553 E8C2020000          <1>     call overlayQword
   118 00000558 4881C316000000      <1>     add rbx, 22
   119 0000055F 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   120 00000563 E8B2020000          <1>     call overlayQword
   121 00000568 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   122 0000056F 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   123 00000573 E8A2020000          <1>     call overlayQword
   124 00000578 4881C316000000      <1>     add rbx, 22
   125 0000057F 488B05(5FC40300)    <1>     mov rax, qword [oldRSP]
   126 00000586 480560000000        <1>     add rax, callerFrame_size
   127 0000058C E889020000          <1>     call overlayQword
   128 00000591 4881C316000000      <1>     add rbx, 22
   129 00000598 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   130 0000059C E879020000          <1>     call overlayQword
   131 000005A1 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   132 000005A8 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   133 000005AC E869020000          <1>     call overlayQword
   134 000005B1 488D2D06000000      <1>     lea rbp, .a0
   135 000005B8 E822FFFFFF          <1>     call debPrintNullString
   136 000005BD C3                  <1>     ret
   137                              <1> 
   138 000005BE 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   138 000005C7 303030303030303030- <1>
   138 000005D0 30306820            <1>
   139 000005D4 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   139 000005DD 303030303030303030- <1>
   139 000005E6 30306820            <1>
   140 000005EA 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   140 000005F3 303030303030303030- <1>
   140 000005FC 30306820            <1>
   141 00000600 0A0D                <1>     db  0Ah,0Dh
   142 00000602 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   142 0000060B 303030303030303030- <1>
   142 00000614 30306820            <1>
   143 00000618 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   143 00000621 303030303030303030- <1>
   143 0000062A 30306820            <1>
   144 0000062E 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   144 00000637 303030303030303030- <1>
   144 00000640 30306820            <1>
   145 00000644 0A0D                <1>     db 0Ah, 0Dh
   146 00000646 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   146 0000064F 303030303030303030- <1>
   146 00000658 30306820            <1>
   147 0000065C 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   147 00000665 303030303030303030- <1>
   147 0000066E 30306820            <1>
   148 00000672 7269703D3030303030- <1>     db "rip=0000000000000000h"
   148 0000067B 303030303030303030- <1>
   148 00000684 303068              <1>
   149 00000687 0A0D                <1>     db 0Ah, 0Dh
   150 00000689 666C673D3030303030- <1>     db "flg=0000000000000000h "
   150 00000692 303030303030303030- <1>
   150 0000069B 30306820            <1>
   151 0000069F 0A0D00              <1>     db 0Ah,0Dh,0
   152 000006A2 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   152 000006AB 206F6E20496E742034- <1>
   152 000006B4 316820737461636B0A- <1>
   152 000006BD 0D00                <1>
   153                              <1> 
   154                              <1> debDPBptr:
   155                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   156 000006BF 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   157 000006C6 4889E8              <1>     mov rax, rbp
   158 000006C9 E84C010000          <1>     call overlayQword
   159 000006CE 488D2D06000000      <1>     lea rbp, .dpb
   160 000006D5 E805FEFFFF          <1>     call debPrintNullString
   161 000006DA C3                  <1>     ret
   162                              <1> .dpb: 
   163 000006DB 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   163 000006E4 203030303030303030- <1>
   163 000006ED 303030303030303068- <1>
   163 000006F6 200A0D00            <1>
   164                              <1> 
   165                              <1> debDPBBPBptr:
   166                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   167                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   168 000006FA 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   169 00000701 4889E8              <1>     mov rax, rbp
   170 00000704 E811010000          <1>     call overlayQword
   171 00000709 4881C321000000      <1>     add rbx, 33
   172 00000710 4889F0              <1>     mov rax, rsi
   173 00000713 E802010000          <1>     call overlayQword
   174 00000718 488D2D06000000      <1>     lea rbp, .dpb
   175 0000071F E8BBFDFFFF          <1>     call debPrintNullString
   176 00000724 C3                  <1>     ret
   177                              <1> .dpb: 
   178 00000725 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   178 0000072E 203030303030303030- <1>
   178 00000737 303030303030303068- <1>
   178 00000740 2066726F6D20        <1>
   179 00000746 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   179 0000074F 203030303030303030- <1>
   179 00000758 303030303030303068- <1>
   179 00000761 200A0D00            <1>
   180                              <1> overlayByte:
   181                              <1>     ;Called with number in rax
   182                              <1>     ;pointer to START of 16 byte space for number in rbx
   183 00000765 53                  <1>     push rbx
   184 00000766 51                  <1>     push rcx
   185 00000767 52                  <1>     push rdx
   186 00000768 55                  <1>     push rbp
   187 00000769 4889DD              <1>     mov rbp, rbx
   188 0000076C 4889C2              <1>     mov rdx, rax
   189 0000076F 48FFC5              <1>     inc rbp ;Go to end of number
   190                              <1> 
   191 00000772 488D1D9BFCFFFF      <1>     lea rbx, debascii
   192 00000779 88D0                <1>     mov al, dl  ;Go low nybble first
   193 0000077B 240F                <1>     and al, 0Fh
   194 0000077D D7                  <1>     xlatb
   195 0000077E 884500              <1>     mov byte [rbp], al
   196 00000781 48FFCD              <1>     dec rbp ;Go down one char pos
   197 00000784 88D0                <1>     mov al, dl
   198 00000786 24F0                <1>     and al, 0F0h    ;Hi nybble next
   199 00000788 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   200 0000078B D7                  <1>     xlatb
   201 0000078C 884500              <1>     mov byte [rbp], al  ;Store char
   202                              <1> 
   203 0000078F 5D                  <1>     pop rbp
   204 00000790 5A                  <1>     pop rdx
   205 00000791 59                  <1>     pop rcx
   206 00000792 5B                  <1>     pop rbx
   207 00000793 C3                  <1>     ret
   208                              <1> 
   209                              <1> overlayWord:
   210                              <1>     ;Called with number in rax
   211                              <1>     ;pointer to START of 16 byte space for number in rbx
   212 00000794 53                  <1>     push rbx
   213 00000795 51                  <1>     push rcx
   214 00000796 52                  <1>     push rdx
   215 00000797 55                  <1>     push rbp
   216 00000798 4889DD              <1>     mov rbp, rbx
   217 0000079B 4889C2              <1>     mov rdx, rax
   218 0000079E 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   219 000007A5 B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   220 000007AA 488D1D63FCFFFF      <1>     lea rbx, debascii
   221                              <1> .ow0:
   222 000007B1 88D0                <1>     mov al, dl  ;Go low nybble first
   223 000007B3 240F                <1>     and al, 0Fh
   224 000007B5 D7                  <1>     xlatb
   225 000007B6 884500              <1>     mov byte [rbp], al
   226 000007B9 48FFCD              <1>     dec rbp ;Go down one char pos
   227 000007BC 88D0                <1>     mov al, dl
   228 000007BE 24F0                <1>     and al, 0F0h    ;Hi nybble next
   229 000007C0 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   230 000007C3 D7                  <1>     xlatb
   231 000007C4 884500              <1>     mov byte [rbp], al  ;Store char
   232 000007C7 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   233 000007CB 48FFCD              <1>     dec rbp
   234 000007CE FFC9                <1>     dec ecx
   235 000007D0 75DF                <1>     jnz .ow0
   236 000007D2 5D                  <1>     pop rbp
   237 000007D3 5A                  <1>     pop rdx
   238 000007D4 59                  <1>     pop rcx
   239 000007D5 5B                  <1>     pop rbx
   240 000007D6 C3                  <1>     ret
   241                              <1> 
   242                              <1> overlayDword:
   243                              <1>     ;Called with number in rax
   244                              <1>     ;pointer to START of 16 byte space for number in rbx
   245 000007D7 53                  <1>     push rbx
   246 000007D8 51                  <1>     push rcx
   247 000007D9 52                  <1>     push rdx
   248 000007DA 55                  <1>     push rbp
   249 000007DB 4889DD              <1>     mov rbp, rbx
   250 000007DE 4889C2              <1>     mov rdx, rax
   251 000007E1 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   252 000007E8 B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   253 000007ED 488D1D20FCFFFF      <1>     lea rbx, debascii
   254                              <1> .od0:
   255 000007F4 88D0                <1>     mov al, dl  ;Go low nybble first
   256 000007F6 240F                <1>     and al, 0Fh
   257 000007F8 D7                  <1>     xlatb
   258 000007F9 884500              <1>     mov byte [rbp], al
   259 000007FC 48FFCD              <1>     dec rbp ;Go down one char pos
   260 000007FF 88D0                <1>     mov al, dl
   261 00000801 24F0                <1>     and al, 0F0h    ;Hi nybble next
   262 00000803 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   263 00000806 D7                  <1>     xlatb
   264 00000807 884500              <1>     mov byte [rbp], al  ;Store char
   265 0000080A 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   266 0000080E 48FFCD              <1>     dec rbp
   267 00000811 FFC9                <1>     dec ecx
   268 00000813 75DF                <1>     jnz .od0
   269 00000815 5D                  <1>     pop rbp
   270 00000816 5A                  <1>     pop rdx
   271 00000817 59                  <1>     pop rcx
   272 00000818 5B                  <1>     pop rbx
   273 00000819 C3                  <1>     ret
   274                              <1> 
   275                              <1> overlayQword:
   276                              <1>     ;Called with number in rax
   277                              <1>     ;pointer to START of 16 byte space for number in rbx
   278 0000081A 53                  <1>     push rbx
   279 0000081B 51                  <1>     push rcx
   280 0000081C 52                  <1>     push rdx
   281 0000081D 55                  <1>     push rbp
   282 0000081E 4889DD              <1>     mov rbp, rbx
   283 00000821 4889C2              <1>     mov rdx, rax
   284 00000824 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   285 0000082B B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   286 00000830 488D1DDDFBFFFF      <1>     lea rbx, debascii
   287                              <1> .oq0:
   288 00000837 88D0                <1>     mov al, dl  ;Go low nybble first
   289 00000839 240F                <1>     and al, 0Fh
   290 0000083B D7                  <1>     xlatb
   291 0000083C 884500              <1>     mov byte [rbp], al
   292 0000083F 48FFCD              <1>     dec rbp ;Go down one char pos
   293 00000842 88D0                <1>     mov al, dl
   294 00000844 24F0                <1>     and al, 0F0h    ;Hi nybble next
   295 00000846 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   296 00000849 D7                  <1>     xlatb
   297 0000084A 884500              <1>     mov byte [rbp], al  ;Store char
   298 0000084D 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   299 00000851 48FFCD              <1>     dec rbp
   300 00000854 FFC9                <1>     dec ecx
   301 00000856 75DF                <1>     jnz .oq0
   302 00000858 5D                  <1>     pop rbp
   303 00000859 5A                  <1>     pop rdx
   304 0000085A 59                  <1>     pop rcx
   305 0000085B 5B                  <1>     pop rbx
   306 0000085C C3                  <1>     ret
   307                              <1> 
   308                              <1> debPrintFunctionName:
   309                              <1> ;Prints the DOS function that has been entered
   310                              <1> ;Entered with ah = Function number
   311 0000085D 88E0                <1>     mov al, ah  ;Get dos function number
   312 0000085F 488D1DAEFBFFFF      <1>     lea rbx, debascii
   313 00000866 488D1535000000      <1>     lea rdx, .number
   314 0000086D 24F0                <1>     and al, 0F0h    ;Get high nybble first
   315 0000086F C0E804              <1>     shr al, 4
   316 00000872 D7                  <1>     xlatb
   317 00000873 8802                <1>     mov byte [rdx], al
   318 00000875 88E0                <1>     mov al, ah
   319 00000877 240F                <1>     and al, 0Fh
   320 00000879 D7                  <1>     xlatb
   321 0000087A 884201              <1>     mov byte [rdx + 1], al
   322 0000087D 488D2D06000000      <1>     lea rbp, .dosString
   323 00000884 E856FCFFFF          <1>     call debPrintNullString
   324 00000889 C3                  <1>     ret
   325 0000088A 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   325 00000893 696F6E20496E742034- <1>
   325 0000089C 31682F41483D        <1>
   326 000008A2 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   327                              <1> 
   328                              <1> ;----------------:
   329                              <1> ;!!!! MACROS !!!!:
   330                              <1> ;----------------:
   331                              <1> ;Insert macro when entering a debug block
   332                              <1> %macro debugEnterM 0
   333                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   334                              <1>     mov rsp, debStackTop
   335                              <1> ;Push all registers except rsp on stack
   336                              <1>     push rax
   337                              <1>     push rbx
   338                              <1>     push rcx
   339                              <1>     push rdx
   340                              <1>     push rsi
   341                              <1>     push rdi
   342                              <1>     push rbp
   343                              <1>     push r8
   344                              <1>     push r9
   345                              <1>     push r10
   346                              <1>     push r11
   347                              <1>     push r12
   348                              <1>     push r13
   349                              <1>     push r14
   350                              <1>     push r15
   351                              <1>     pushfq
   352                              <1> %endmacro
   353                              <1> ;Insert macro when exiting a debug block
   354                              <1> %macro debugExitM 0
   355                              <1>     popfq
   356                              <1>     pop r15
   357                              <1>     pop r14
   358                              <1>     pop r13
   359                              <1>     pop r12
   360                              <1>     pop r11
   361                              <1>     pop r10
   362                              <1>     pop r9
   363                              <1>     pop r8
   364                              <1>     pop rbp
   365                              <1>     pop rdi
   366                              <1>     pop rsi
   367                              <1>     pop rdx
   368                              <1>     pop rcx
   369                              <1>     pop rbx
   370                              <1>     pop rax
   371                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   372                              <1> %endmacro
    23                                  %include "./Source/Kernel/FAT/buffun.asm"
    24                              <1> ;This file contains FAT disk buffer related functions that
    25                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    26                              <1> ;----------------------------------------------------
    27                              <1> ;           Externally referenced functions         :
    28                              <1> ;----------------------------------------------------
    29                              <1> 
    30                              <1> makeBufferMostRecentlyUsed: ;Int 4Fh AX=1207h
    31                              <1> ;Sets the buffer in rdi to the head of the chain
    32                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    33                              <1> ;Output: Buffer header set to the head of the chain
    34 000008A8 48393D(63C00300)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    35 000008AF 7428                <1>     je .exit
    36 000008B1 56                  <1>     push rsi
    37 000008B2 488B35(63C00300)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    38                              <1> .mainlp:
    39 000008B9 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    40 000008BC 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    41 000008BE 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    42 000008C1 EBF6                <1>     jmp short .mainlp
    43                              <1> .fnd:
    44 000008C3 57                  <1>     push rdi
    45 000008C4 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    46 000008C7 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    47 000008CA 5F                  <1>     pop rdi ;Get original buf back
    48 000008CB 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    49 000008CE 488735(63C00300)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    50 000008D5 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    51 000008D8 5E                  <1>     pop rsi
    52                              <1> .exit:
    53                              <1>     return
    18                              <2> %%_ret:
    19 000008D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    54                              <1> 
    55                              <1> flushAndFreeBuffer:         ;Int 4Fh AX=1209h 
    56                              <1> ;1 External reference
    57                              <1> ;Input: rdi = Buffer header to flush and free
    58 000008DA E844000000          <1>     call flushBuffer
    59 000008DF 7206                <1>     jc .exit
    60                              <1>     ;Free the buffer if it was flushed successfully (CF=NC)
    61 000008E1 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
    62                              <1> .exit:
    63                              <1>     return
    18                              <2> %%_ret:
    19 000008E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    64                              <1> 
    65                              <1> markBuffersAsUnreferenced:  ;Int 4Fh AX=120Eh
    66                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    67                              <1> ;Output: rdi = First disk buffer
    68 000008E8 488B3D(63C00300)    <1>     mov rdi, [bufHeadPtr]
    69 000008EF 57                  <1>     push rdi
    70                              <1> .lp:
    71 000008F0 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    72 000008F4 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    73 000008F7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    74 000008FE 75F0                <1>     jne .lp
    75 00000900 5F                  <1>     pop rdi
    76                              <1>     return
    18                              <2> %%_ret:
    19 00000901 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    77                              <1> 
    78                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 4Fh AX=120Fh
    79                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    80                              <1> ; second buffer in the chain in rdi
    81                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    82                              <1> ;Output: rdi = Second buffer in the chain
    83 00000902 52                  <1>     push rdx
    84 00000903 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    85 00000906 E89DFFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    86 0000090B 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    87 0000090E 5A                  <1>     pop rdx
    88                              <1>     return
    18                              <2> %%_ret:
    19 0000090F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> findUnreferencedBuffer: ;Int 4Fh AX=1210h
    91                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    92                              <1> ;Input: rdi = Buffer header to start searching at
    93                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    94                              <1> ;        ZF=ZE => No unreferenced buffer found
    95 00000910 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    96 00000914 750C                <1>     jnz .exit
    97 00000916 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    98 00000919 4881FFFFFFFFFF      <1>     cmp rdi, -1
    99 00000920 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
   100                              <1> .exit:
   101                              <1>     return
    18                              <2> %%_ret:
    19 00000922 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   102                              <1> 
   103                              <1> flushBuffer:         ;Internal Linkage Int 4Fh AX=1215h
   104                              <1> ;Flushes the data in a sector buffer to disk!
   105                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   106                              <1> ;Exit:  CF=NC : Success
   107                              <1> ;       CF=CY : Fail, terminate the request
   108                              <1> ;First make request to device driver
   109 00000923 50                  <1>     push rax
   110 00000924 53                  <1>     push rbx
   111 00000925 51                  <1>     push rcx
   112 00000926 52                  <1>     push rdx
   113 00000927 56                  <1>     push rsi
   114 00000928 55                  <1>     push rbp
   115                              <1> ;If the buffer is freed, skip flushing to avoid issues
   116 00000929 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;-1 means free buffer
   117 0000092D 7454                <1>     je .fbFreeExit  ;If it is free exit
   118 0000092F F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   119 00000933 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   120                              <1> .fbRequest0:
   121 00000935 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   122 0000093A F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   123 0000093E 7406                <1>     jz .fbRequest1
   124 00000940 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   125                              <1> .fbRequest1:
   126 00000946 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   127 00000949 B901000000          <1>     mov ecx, 1  ;One sector to copy
   128 0000094E 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   129 00000952 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   130 00000956 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   131 0000095A E8575B0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   132 0000095F E8EE590000          <1>     call absDiskDriverCall    ;Make Driver Request
   133 00000964 7525                <1>     jnz .fbFail
   134                              <1> ;Now check if the buffer was a FAT, to write additional copies
   135 00000966 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   136 0000096A 7417                <1>     jz .fbFreeExit  ;If not, exit
   137 0000096C FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   138 0000096F 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   139 00000971 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   140 00000974 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   141 00000978 E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   142                              <1> .fbFreeExit1:
   143 0000097D 8A5D08              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   144 00000980 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   145                              <1> .fbFreeExit:
   146 00000983 F8                  <1>     clc
   147                              <1> .fbExitFail:
   148 00000984 5D                  <1>     pop rbp
   149 00000985 5E                  <1>     pop rsi
   150 00000986 5A                  <1>     pop rdx
   151 00000987 59                  <1>     pop rcx
   152 00000988 5B                  <1>     pop rbx
   153 00000989 58                  <1>     pop rax
   154                              <1>     return
    18                              <2> %%_ret:
    19 0000098A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   155                              <1> .fbFail:
   156                              <1> ;Enter here only if the request failed
   157 0000098B FFCE                <1>     dec esi
   158 0000098D 75B7                <1>     jnz .fbRequest1 ;Try the request again!
   159                              <1> ;Request failed thrice, critical error call
   160 0000098F C605(4CC40300)01    <1>     mov byte [Int44bitfld], critWrite ;Set the initial bitfield to write req
   161 00000996 E870530000          <1>     call diskDevErr ;Call with rdi = Buffer header and eax = Status Word
   162 0000099B 3C01                <1>     cmp al, critRetry
   163 0000099D 7496                <1>     je .fbRequest0
   164                              <1>     ;Else we fail (Ignore=Fail here)
   165 0000099F F9                  <1>     stc ;Set error flag to indicate fail
   166 000009A0 E9DFFFFFFF          <1>     jmp .fbExitFail
   167                              <1> 
   168                              <1> testDirtyBufferForDrive:    ;External linkage
   169                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   170                              <1> ;Input: al = Drive number (0 based)
   171                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   172                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   173 000009A5 53                  <1>     push rbx
   174 000009A6 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   175                              <1> .tdbfdCheckBuffer:
   176 000009AD 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   177 000009B0 7509                <1>     jne .tdbfdGotoNextBuffer
   178 000009B2 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   179 000009B6 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   180 000009B8 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   181                              <1> .tdbfdExit:
   182 000009B9 5B                  <1>     pop rbx
   183                              <1>     return
    18                              <2> %%_ret:
    19 000009BA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   184                              <1> .tdbfdGotoNextBuffer:
   185 000009BB 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   186 000009BE 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   187 000009C5 74F2                <1>     je .tdbfdExit
   188 000009C7 EBE4                <1>     jmp short .tdbfdCheckBuffer
   189                              <1> 
   190                              <1> 
   191                              <1> cancelWriteThroughBuffers:  ;External linkage
   192                              <1> ; Frees all buffers for the workingDPB
   193                              <1> ; Alternative symbol for the same function. Used on Fails and Aborts.
   194                              <1> freeBuffersForDPB:  ;External Linkage (Before Get BPB in medchk)
   195                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   196                              <1> ; to have a drive number of -1, thus freeing it
   197                              <1> ;Given DPB is in rbp
   198 000009C9 53                  <1>     push rbx
   199 000009CA 488B1D(63C00300)    <1>     mov rbx, qword [bufHeadPtr]
   200                              <1> .i0:
   201 000009D1 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
   202 000009D5 7506                <1>     jne .i1 ;If no, skip freeing
   203 000009D7 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
   204                              <1> .i1:
   205 000009DD 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
   206 000009E0 4881FBFFFFFFFF      <1>     cmp rbx, -1
   207 000009E7 75E8                <1>     jne .i0
   208                              <1> .exit:
   209 000009E9 5B                  <1>     pop rbx
   210                              <1>     return
    18                              <2> %%_ret:
    19 000009EA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   211                              <1> 
   212                              <1> writeThroughBuffers: ;External linkage
   213                              <1> ; Flushes and resets the dirty bit for all dirty bufs for working drive
   214                              <1> ; Returns: CF=NC => All is well, buffer flushed and dirty bit cleaned
   215                              <1> ;          CF=CY => Buffer failed to flush, marked as dirty and return
   216 000009EB 50                  <1>     push rax
   217 000009EC 57                  <1>     push rdi
   218 000009ED 488B05(EAC60300)    <1>     mov rax, qword [workingDPB]    ;Get current DPB to compare with
   219 000009F4 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   220                              <1> .mainLp:
   221 000009FB 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   222 00000A02 7416                <1>     je .exit   
   223 00000A04 48394717            <1>     cmp qword [rdi + bufferHdr.driveDPBPtr], rax  ;Compare dpb numbers
   224 00000A08 750B                <1>     jne .nextBuffer
   225 00000A0A E814FFFFFF          <1>     call flushBuffer    ;Flush this buffer if it on dpb we want
   226 00000A0F 7209                <1>     jc .exit  ;If something went wrong, exit
   227 00000A11 806709BF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~dirtyBuffer
   228                              <1> .nextBuffer:
   229 00000A15 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   230 00000A18 EBE1                <1>     jmp short .mainLp
   231                              <1> .exit:
   232 00000A1A 5F                  <1>     pop rdi
   233 00000A1B 58                  <1>     pop rax
   234                              <1>     return
    18                              <2> %%_ret:
    19 00000A1C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   235                              <1> 
   236                              <1> markBufferDirty:
   237 00000A1D 55                  <1>     push rbp
   238 00000A1E 9C                  <1>     pushfq
   239 00000A1F 488B2D(1EC70300)    <1>     mov rbp, qword [currBuff]
   240 00000A26 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   241 00000A2A 9D                  <1>     popfq
   242 00000A2B 5D                  <1>     pop rbp
   243                              <1>     return
    18                              <2> %%_ret:
    19 00000A2C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> 
   245                              <1> 
   246                              <1> getBuffer: ;Internal Linkage ONLY
   247                              <1> ;
   248                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   249                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   250                              <1> ;Flushes if not in disk change mode. 
   251                              <1> ;If in disk change mode, will check to see if the selected buffer 
   252                              <1> ; has data referring a device using the same DPB as we are changing.
   253                              <1> ; If it is, skip flushing, if not, flush first!
   254                              <1> ;
   255                              <1> ;This function will return a pointer to the desired data sector OR 
   256                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   257                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   258                              <1> ;Entry: rax = Sector to read
   259                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   260                              <1> ;       rsi = DPB to use for transaction
   261                              <1> ;Exit:  CF=NC => 
   262                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   263                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   264 00000A2D 51                  <1>     push rcx
   265 00000A2E 52                  <1>     push rdx
   266 00000A2F 56                  <1>     push rsi
   267 00000A30 57                  <1>     push rdi
   268 00000A31 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   269 00000A33 E832010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   270 00000A38 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   271 00000A3F 7418                <1>     je .rbReadNewSector
   272 00000A41 48893D(1EC70300)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   273 00000A48 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer ;Only set if in buf chain
   274                              <1> .rbExit:
   275 00000A4C F8                  <1>     clc
   276                              <1> .rbExitNoFlag:
   277 00000A4D 5F                  <1>     pop rdi
   278 00000A4E 5E                  <1>     pop rsi
   279 00000A4F 5A                  <1>     pop rdx
   280 00000A50 59                  <1>     pop rcx
   281 00000A51 488B1D(1EC70300)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   282                              <1>     return
    18                              <2> %%_ret:
    19 00000A58 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   283                              <1> .rbReadNewSector:
   284 00000A59 E8B5000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   285 00000A5E 803D(C1D90300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   286 00000A65 7506                <1>     jne .flush  ;We are not, flush buffer
   287 00000A67 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   288 00000A6B 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used. Lose the sector
   289                              <1> .flush:
   290 00000A6D E868FEFFFF          <1>     call flushAndFreeBuffer
   291 00000A72 72D9                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   292                              <1> .skipFlush:
   293                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   294                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   295                              <1>     ; is no longer owned by that File so we mark the owner as none
   296 00000A74 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   297 00000A7C 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   298 00000A7F 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   299 00000A82 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   300 00000A86 80F902              <1>     cmp cl, fatBuffer
   301 00000A89 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   302 00000A8B 7503                <1>     jne .rbNonFATbuffer
   303 00000A8D 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   304                              <1> .rbNonFATbuffer:
   305 00000A90 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   306 00000A93 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   307 00000A96 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   308 00000A99 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   309 00000A9D C6472700            <1>     mov byte [rdi + bufferHdr.reserved], 0
   310 00000AA1 E804000000          <1>     call readSectorBuffer ;Carry the flag from the request
   311 00000AA6 72A5                <1>     jc .rbExitNoFlag
   312 00000AA8 EBA2                <1>     jmp short .rbExit
   313                              <1> 
   314                              <1> readSectorBuffer:   ;Internal Linkage
   315                              <1> ;Reads a sector into a built sector buffer
   316                              <1> ;Entry: rdi = Pointer to buffer header
   317                              <1> ;Exit:  CF=NC : Success
   318                              <1> ;       CF=CY : Fail, terminate the request
   319                              <1> ;       rbx pointing to buffer header
   320                              <1> ;First make request to device driver
   321 00000AAA 50                  <1>     push rax
   322 00000AAB 53                  <1>     push rbx
   323 00000AAC 51                  <1>     push rcx
   324 00000AAD 52                  <1>     push rdx
   325 00000AAE 56                  <1>     push rsi
   326 00000AAF 55                  <1>     push rbp
   327                              <1> .rsRequest0:
   328 00000AB0 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   329 00000AB5 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   330 00000AB9 7406                <1>     jz .rsRequest1
   331 00000ABB 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   332                              <1> .rsRequest1:
   333 00000AC1 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   334 00000AC4 B901000000          <1>     mov ecx, 1  ;One sector to copy
   335 00000AC9 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   336 00000ACD 488D5F30            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   337 00000AD1 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   338 00000AD5 E8E7590000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   339 00000ADA E873580000          <1>     call absDiskDriverCall    ;Make Driver Request
   340 00000ADF 7508                <1>     jnz .rsFail
   341                              <1> .rsExit:
   342 00000AE1 F8                  <1>     clc
   343                              <1> .rsExitFail:
   344 00000AE2 5D                  <1>     pop rbp
   345 00000AE3 5E                  <1>     pop rsi
   346 00000AE4 5A                  <1>     pop rdx
   347 00000AE5 59                  <1>     pop rcx
   348 00000AE6 5B                  <1>     pop rbx
   349 00000AE7 58                  <1>     pop rax
   350                              <1>     return
    18                              <2> %%_ret:
    19 00000AE8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   351                              <1> .rsFail:
   352                              <1> ;Enter here only if the request failed
   353 00000AE9 FFCE                <1>     dec esi
   354 00000AEB 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   355                              <1> ;Request failed thrice, critical error call
   356                              <1> ;First free the buffer if we failed to read data into it 
   357 00000AED 0FB74F08            <1>     movzx ecx, word [rdi + bufferHdr.driveNumber]   ;Save drv num for retry
   358 00000AF1 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh ;Free buffer and clear flags
   359 00000AF7 C605(4CC40300)00    <1>     mov byte [Int44bitfld], critRead    ;Set the initial bitfield to read req
   360 00000AFE E808520000          <1>     call diskDevErr
   361 00000B03 3C01                <1>     cmp al, critRetry
   362 00000B05 7506                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   363 00000B07 66894F08            <1>     mov word [rdi + bufferHdr.driveNumber], cx ;Put drvNm + flgs if trying again
   364 00000B0B EBA3                <1>     jmp short .rsRequest0
   365                              <1> .fail:
   366 00000B0D F9                  <1>     stc ;Set error flag to indicate fail
   367 00000B0E E9CFFFFFFF          <1>     jmp .rsExitFail
   368                              <1>     
   369                              <1> findLRUBuffer: ;Internal Linkage
   370                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   371                              <1> ; in rbx and the currBuff variable
   372                              <1> ;Input: Nothing
   373                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   374                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   375 00000B13 52                  <1>     push rdx
   376 00000B14 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   377 00000B1B 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   378 00000B1F 7436                <1>     je .flbExit 
   379 00000B21 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   380 00000B28 742D                <1>     je .flbExit
   381                              <1> .flbWalk:
   382 00000B2A 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   383 00000B2D 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   384 00000B30 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   385 00000B34 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   386 00000B36 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   387 00000B3D 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   388 00000B3F 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   389                              <1> .flbHeadLink:
   390 00000B46 488B15(63C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   391 00000B4D 48893D(63C00300)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   392 00000B54 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   393                              <1> .flbExit:
   394 00000B57 5A                  <1>     pop rdx
   395 00000B58 48893D(1EC70300)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   396                              <1>     return
    18                              <2> %%_ret:
    19 00000B5F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   397                              <1> .flbFreeLink:
   398 00000B60 51                  <1>     push rcx
   399 00000B61 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   400 00000B64 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   401 00000B67 59                  <1>     pop rcx
   402 00000B68 EBDC                <1>     jmp short .flbHeadLink
   403                              <1> 
   404                              <1> findSectorInBuffer:     ;Internal linkage
   405                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   406                              <1> ;If the sector is not in a buffer, returns with a -1
   407                              <1> ;Input: rax = Sector number
   408                              <1> ;       dl = Drive number
   409                              <1> ;Output: rdi = Buffer hdr pointer or -1
   410 00000B6A 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   411                              <1> .fsiCheckBuffer:
   412 00000B71 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   413 00000B74 7507                <1>     jne .fsiGotoNextBuffer
   414 00000B76 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   415 00000B7A 7501                <1>     jne .fsiGotoNextBuffer
   416                              <1> .fsiExit:
   417                              <1>     return
    18                              <2> %%_ret:
    19 00000B7C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   418                              <1> .fsiGotoNextBuffer:
   419 00000B7D 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   420 00000B80 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   421 00000B87 74F3                <1>     je .fsiExit
   422 00000B89 EBE6                <1>     jmp short .fsiCheckBuffer
   423                              <1> 
   424                              <1> ;-----------------------------------------------------------------------------
   425                              <1> ;SPECIAL BUFFER FUNCTIONS
   426                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   427                              <1> ; DOS and FAT sectors need to setup [workingDPB] to make the transfer
   428                              <1> ; DIR and DATA sectors need to setup [currentSFT] to make the transfer
   429                              <1> ;FCB requests use FCBS (or SDA SFT if FCBS=0)
   430                              <1> ;Since they are just SFT entries on a separate list, this logic still holds
   431                              <1> ;The only difference is if an FCBS may need to be recycled; Then all buffers 
   432                              <1> ; belonging to that FCBS get flushed before freeing the FCBS.
   433                              <1> ;Buffer owningFile pointers get set to -1 if they are successfully freed
   434                              <1> ; or they don't belong to a file (i.e. FAT or DOS sectors)
   435                              <1> ;OwningFile is only referenced for handle/FCB sectors (DIR and Data sectors)
   436                              <1> ;-----------------------------------------------------------------------------
   437                              <1> getBufForDataNoFile:
   438                              <1> ;Returns a buffer to use for disk data in rbx
   439                              <1> ;Requires a File Handle.
   440                              <1> ;Input: [workingDPB] = DPB to transact on
   441                              <1> ;       rax = Sector to transfer
   442                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   443 00000B8B 51                  <1>     push rcx
   444 00000B8C B108                <1>     mov cl, dataBuffer
   445 00000B8E 56                  <1>     push rsi
   446 00000B8F 57                  <1>     push rdi
   447 00000B90 488B35(EAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   448 00000B97 E891FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   449 00000B9C 725F                <1>     jc getBufCommon.exit
   450 00000B9E 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   451 00000BA6 EB55                <1>     jmp short getBufCommon.exit
   452                              <1> getBufForDirNoFile:
   453                              <1> ;Returns a buffer to use for disk dir data in rbx
   454                              <1> ;Requires a File Handle.
   455                              <1> ;Input: [workingDPB] = DPB to transact on
   456                              <1> ;       rax = Sector to transfer
   457                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   458 00000BA8 51                  <1>     push rcx
   459 00000BA9 B104                <1>     mov cl, dirBuffer
   460 00000BAB 56                  <1>     push rsi
   461 00000BAC 57                  <1>     push rdi
   462 00000BAD 488B35(EAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   463 00000BB4 E874FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   464 00000BB9 7242                <1>     jc getBufCommon.exit
   465 00000BBB 48C7431FFFFFFFFF    <1>     mov qword [rbx + bufferHdr.owningFile], -1  ;Set owner to none
   466 00000BC3 EB38                <1>     jmp short getBufCommon.exit
   467                              <1> getBufForFat:
   468                              <1> ;Returns a buffer to use for fat data in rbx
   469                              <1> ;Input: [workingDPB] = DPB to transact on
   470                              <1> ;       rax = Sector to transfer
   471                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   472 00000BC5 51                  <1>     push rcx
   473 00000BC6 B102                <1>     mov cl, fatBuffer
   474 00000BC8 EB03                <1>     jmp short getBufCommon2
   475                              <1> getBufForDOS:
   476                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   477                              <1> ;Input: [workingDPB] = DPB to transact on
   478                              <1> ;       rax = Sector to transfer
   479                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   480 00000BCA 51                  <1>     push rcx
   481 00000BCB B101                <1>     mov cl, dosBuffer
   482                              <1> getBufCommon2:
   483 00000BCD 56                  <1>     push rsi
   484 00000BCE 57                  <1>     push rdi    ;Push rdi to preserve it
   485 00000BCF 488B35(EAC60300)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   486 00000BD6 EB15                <1>     jmp short getBufCommon.makeReq
   487                              <1> getBufForDir:
   488                              <1> ;Returns a buffer to use for disk directory data in rbx
   489                              <1> ;Input: [currentSFT] = File to manipulate
   490                              <1> ;       rax = Sector to transfer
   491                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   492 00000BD8 51                  <1>     push rcx
   493 00000BD9 B104                <1>     mov cl, dirBuffer
   494 00000BDB EB03                <1>     jmp short getBufCommon
   495                              <1> getBufForData:
   496                              <1> ;Returns a buffer to use for disk data in rbx
   497                              <1> ;Requires a File Handle.
   498                              <1> ;Input: [currentSFT] = File to manipulate
   499                              <1> ;       rax = Sector to transfer
   500                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   501 00000BDD 51                  <1>     push rcx
   502 00000BDE B108                <1>     mov cl, dataBuffer
   503                              <1> getBufCommon:
   504 00000BE0 56                  <1>     push rsi
   505 00000BE1 57                  <1>     push rdi
   506 00000BE2 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
   507 00000BE9 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB
   508                              <1> .makeReq:
   509 00000BED E83BFEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   510 00000BF2 7209                <1>     jc .exit    ;Don't change SFT field if the request FAILED.
   511                              <1>     ;That would be very bad as it would potentially cause faulty data to be 
   512                              <1>     ; flushed to the file!
   513                              <1>     ;Only set the SFT field if Data or DIR sectors, as getBuffer
   514                              <1>     ; will always set the owningFile field to -1 if the data was successfully
   515                              <1>     ; flushed or deemed ok to lose (thus completing setup for dos/fat buffers).
   516 00000BF4 F6C103              <1>     test cl, dosBuffer | fatBuffer
   517 00000BF7 7504                <1>     jnz .exit
   518 00000BF9 48897B1F            <1>     mov qword [rbx + bufferHdr.owningFile], rdi ;Set owner for the data
   519                              <1> .exit:
   520 00000BFD 5F                  <1>     pop rdi
   521 00000BFE 5E                  <1>     pop rsi
   522 00000BFF 59                  <1>     pop rcx
   523                              <1>     return
    18                              <2> %%_ret:
    19 00000C00 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> flushFile:
   526                              <1> ;We search the chain for buffers with the currentSFT = owning file and ALL
   527                              <1> ; FAT/DOS buffers to flush
   528                              <1> ; We flush and free, and set to head of chain before continuing to search
   529                              <1> ;Input: rdi = is the file (sft) we wish to flush
   530                              <1> ;Output: CF=NC => All ok
   531                              <1> ;        CF=CY => A sector failed, exit. 
   532 00000C01 57                  <1>     push rdi
   533 00000C02 56                  <1>     push rsi
   534                              <1>     ;First check if the file has been written to?
   535 00000C03 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   536 00000C09 7534                <1>     jnz .exitNoFlush ;Exit without flushing if set
   537 00000C0B 4889FE              <1>     mov rsi, rdi    ;Move the currentSFT to rsi
   538 00000C0E 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   539                              <1> .ffLoop:
   540 00000C15 4881FFFFFFFFFF      <1>     cmp rdi, -1
   541 00000C1C 741B                <1>     je .exit
   542 00000C1E F6470907            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer | dosBuffer | dirBuffer
   543 00000C22 751E                <1>     jnz .found  ;Flush if either bit is set
   544 00000C24 48817F1FFFFFFFFF    <1>     cmp qword [rdi + bufferHdr.owningFile], -1  ;If owning file is -1, flush too
   545 00000C2C 7414                <1>     je .found
   546 00000C2E 4839771F            <1>     cmp qword [rdi + bufferHdr.owningFile], rsi
   547 00000C32 740E                <1>     je .found
   548 00000C34 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   549 00000C37 EBDC                <1>     jmp short .ffLoop
   550                              <1> .exit:
   551                              <1>     ;Here we undo the disk file to be flushed bit in the SFT
   552 00000C39 66814E054000        <1>     or word [rsi + sft.wDeviceInfo], blokFileNoFlush  ;Set that bit again!
   553                              <1> .exitNoFlush:
   554 00000C3F 5E                  <1>     pop rsi
   555 00000C40 5F                  <1>     pop rdi
   556                              <1>     return
    18                              <2> %%_ret:
    19 00000C41 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   557                              <1> .found:
   558                              <1> ;Here we take the old next buffer, then flush and free the current buffer
   559                              <1> ; then return the old next buffer into rdi and go back to ffLoop
   560 00000C42 E893FCFFFF          <1>     call flushAndFreeBuffer ;Flush and free buffer
   561 00000C47 72F6                <1>     jc .exitNoFlush    ;Exit preserving CF
   562                              <1>     ;If the sector has been successfully flushed, then it
   563                              <1>     ; is no longer owned by that File so we mark the owner as none
   564 00000C49 48C7471FFFFFFFFF    <1>     mov qword [rdi + bufferHdr.owningFile], -1
   565 00000C51 E8ACFCFFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Return in rdi the next buffer
   566 00000C56 EBBD                <1>     jmp short .ffLoop
    24                                  %include "./Source/Kernel/FAT/fat.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;       File System routines        :
    27                              <1> ;-----------------------------------:
    28                              <1> getFATtype:
    29                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    30                              <1> ;Entry: rbp = DPB to ascertain FAT
    31                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    32 00000C58 53                  <1>     push rbx
    33 00000C59 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    34 00000C5C B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    35 00000C61 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    36 00000C67 730F                <1>     jae .exit
    37 00000C69 FFC9                <1>     dec ecx     ;FAT 12 marker
    38 00000C6B 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    39 00000C71 7205                <1>     jb .exit
    40 00000C73 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    41                              <1> .exit:
    42 00000C78 5B                  <1>     pop rbx
    43                              <1>     return
    18                              <2> %%_ret:
    19 00000C79 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    44                              <1> 
    45                              <1> clust2FATEntry:
    46                              <1> ;Converts a cluster number to a offset in the FAT
    47                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    48                              <1> ;        eax = Cluster number to look for
    49                              <1> ;Exit:   eax = Sector on disk of FAT 
    50                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    51                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    52 00000C7A 53                  <1>     push rbx
    53 00000C7B 55                  <1>     push rbp
    54 00000C7C 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
    55 00000C83 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    56 00000C86 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    57 00000C8C 731E                <1>     jae .fat32
    58 00000C8E 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    59 00000C94 7209                <1>     jb .fat12
    60                              <1> ;FAT16
    61 00000C96 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    62 00000C98 6801000000          <1>     push qword 1
    63 00000C9D EB15                <1>     jmp short .common
    64                              <1> .fat12:
    65 00000C9F 89C1                <1>     mov ecx, eax    ;ecx = eax
    66 00000CA1 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    67 00000CA3 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    68 00000CA5 6800000000          <1>     push qword 0
    69 00000CAA EB08                <1>     jmp short .common
    70                              <1> .fat32:
    71 00000CAC 6802000000          <1>     push qword 2
    72 00000CB1 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    73                              <1> .common:
    74                              <1> ;eax has the FAToffset
    75 00000CB4 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    76 00000CB8 31D2                <1>     xor edx, edx    ;edx = 0
    77 00000CBA F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    78 00000CBC 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    79 00000CC0 01D8                <1>     add eax, ebx
    80 00000CC2 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    81 00000CC3 5D                  <1>     pop rbp
    82 00000CC4 5B                  <1>     pop rbx
    83                              <1>     return
    18                              <2> %%_ret:
    19 00000CC5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> 
    85                              <1> getStartSectorOfCluster:
    86                              <1> ;Input: eax = Cluster Number
    87                              <1> ;       rbp = dpb pointer
    88                              <1> ;Output: rax = Starting Sector number for cluster
    89                              <1> ;Gives the data sector we are at in the current cluster
    90                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    91 00000CC6 51                  <1>     push rcx
    92 00000CC7 09C0                <1>     or eax, eax ;Zero upper dword
    93 00000CC9 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    94                              <1> .fat32Root:
    95 00000CCB 482D02000000        <1>     sub rax, 2
    96 00000CD1 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
    97 00000CD4 48D3E0              <1>     shl rax, cl
    98 00000CD7 31C9                <1>     xor ecx, ecx
    99 00000CD9 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   100 00000CDC 4801C8              <1>     add rax, rcx
   101                              <1>     ;rax now has the first sector of the current cluster
   102 00000CDF 59                  <1>     pop rcx
   103                              <1>     return
    18                              <2> %%_ret:
    19 00000CE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   104                              <1> .rootDir:
   105 00000CE1 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
   106 00000CE4 E86FFFFFFF          <1>     call getFATtype
   107 00000CE9 81F902000000        <1>     cmp ecx, 2
   108 00000CEF 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
   109                              <1>     ;Else rax has the first sector of the Root Dir
   110 00000CF1 59                  <1>     pop rcx
   111                              <1>     return
    18                              <2> %%_ret:
    19 00000CF2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   112                              <1> 
   113                              <1> 
   114                              <1> getLastClusterInChain:
   115                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
   116                              <1> ;Input: eax = Cluster to start searching at
   117                              <1> ;Output: eax = Last cluster in chain
   118                              <1> ;If input eax = 0, output eax = 0
   119 00000CF3 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   120                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000CF5 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   121 00000CF7 53                  <1>     push rbx
   122                              <1> .lp:
   123 00000CF8 89C3                <1>     mov ebx, eax
   124 00000CFA E8AB010000          <1>     call readFAT
   125 00000CFF 7209                <1>     jc .exit
   126 00000D01 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   127 00000D06 75F0                <1>     jne .lp
   128 00000D08 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   129                              <1> .exit: 
   130 00000D0A 5B                  <1>     pop rbx
   131                              <1>     return
    18                              <2> %%_ret:
    19 00000D0B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   132                              <1> 
   133                              <1> getNumberOfClustersInChain:
   134                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   135                              <1> ;Input: eax = Cluster to start searching at
   136                              <1> ;Output: eax = Number of clusters in the chain
   137                              <1> ;If input eax = 0, output eax = 0
   138 00000D0C 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   139                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000D0E 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   140 00000D10 51                  <1>     push rcx
   141 00000D11 31C9                <1>     xor ecx, ecx
   142                              <1> .lp:
   143 00000D13 FFC1                <1>     inc ecx
   144 00000D15 E890010000          <1>     call readFAT
   145 00000D1A 7209                <1>     jc .exit
   146 00000D1C 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   147 00000D21 75F0                <1>     jne .lp
   148 00000D23 89C8                <1>     mov eax, ecx    ;Get the count
   149                              <1> .exit: 
   150 00000D25 59                  <1>     pop rcx
   151                              <1>     return
    18                              <2> %%_ret:
    19 00000D26 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   152                              <1> 
   153                              <1> getClusterInChain:
   154                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   155                              <1> ;If an EOC is encountered, then ecx will not be 
   156                              <1> ;Input: eax = Start Cluster to start searching from
   157                              <1> ;       ecx = Number of clusters to go forwards by;
   158                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   159                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   160                              <1> ;Also usual CF babble.
   161 00000D27 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   162                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00000D29 74FB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   163 00000D2B 53                  <1>     push rbx
   164 00000D2C 67E30F              <1>     jecxz .exit
   165                              <1> .lp:
   166 00000D2F 89C3                <1>     mov ebx, eax
   167 00000D31 E874010000          <1>     call readFAT
   168 00000D36 7206                <1>     jc .exit
   169 00000D38 FFC9                <1>     dec ecx
   170 00000D3A 75F3                <1>     jnz .lp
   171 00000D3C 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   172                              <1> .exit:
   173 00000D3E 5B                  <1>     pop rbx
   174                              <1>     return
    18                              <2> %%_ret:
    19 00000D3F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> 
   176                              <1> startNewChain:
   177                              <1> ;Working dpb must be set
   178                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   179                              <1> ;If CF=CY, hard error
   180 00000D40 53                  <1>     push rbx
   181 00000D41 56                  <1>     push rsi
   182 00000D42 E858000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   183 00000D47 7215                <1>     jc .exit    ;Disk read error?
   184 00000D49 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   185 00000D4E 740E                <1>     je .exit
   186 00000D50 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   187 00000D55 89C3                <1>     mov ebx, eax
   188 00000D57 E8EF010000          <1>     call writeFAT   ;Propagate the CF 
   189 00000D5C 89D8                <1>     mov eax, ebx
   190                              <1> .exit:
   191 00000D5E 5E                  <1>     pop rsi
   192 00000D5F 5B                  <1>     pop rbx
   193                              <1>     return
    18                              <2> %%_ret:
    19 00000D60 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   194                              <1> 
   195                              <1> allocateClusters:
   196                              <1> ;Working dpb must be set. 
   197                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   198                              <1> ;       ebx = Cluster to link to the new cluster
   199                              <1> ;Output:    
   200                              <1> ;   CF=NC => Complete.
   201                              <1> ;   If eax = -1, then no more free clusters. 
   202                              <1> ;   CF=CY => Hard error, exit
   203                              <1> ; ecx always has number of allocated clusters
   204 00000D61 F8                  <1>     clc ;Always clear the flags before starting
   205 00000D62 53                  <1>     push rbx
   206 00000D63 56                  <1>     push rsi
   207 00000D64 51                  <1>     push rcx    ;Save tfr count on stack
   208 00000D65 67E32D              <1>     jecxz .exit ;Allocating nothing? Exit
   209                              <1> .allocateLoop:
   210 00000D68 E832000000          <1>     call findFreeCluster
   211 00000D6D 7226                <1>     jc .exit
   212 00000D6F 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   213 00000D74 741F                <1>     je .exit    ;If the cluster number is -1, return immediately
   214                              <1>     ;eax has first free cluster value to use
   215                              <1>     ;First we link the previous cluster to this cluster
   216 00000D76 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   217 00000D7B 50                  <1>     push rax
   218 00000D7C E8CA010000          <1>     call writeFAT   ;Allocate this cluster first
   219 00000D81 58                  <1>     pop rax
   220 00000D82 7211                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   221                              <1>     ;eax points to this allocated cluster
   222                              <1>     ;ebx points to the previous last cluster
   223 00000D84 89C6                <1>     mov esi, eax    ;New cluster as "value"
   224 00000D86 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   225 00000D88 E8BE010000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   226 00000D8D 7206                <1>     jc .exit
   227 00000D8F 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   228 00000D91 FFC9                <1>     dec ecx ;One less cluster allocated
   229 00000D93 75D3                <1>     jnz .allocateLoop
   230                              <1> .exit:
   231 00000D95 5E                  <1>     pop rsi ;Pop the tfr count into esi
   232 00000D96 9C                  <1>     pushfq
   233 00000D97 F7D9                <1>     neg ecx
   234 00000D99 01F1                <1>     add ecx, esi
   235 00000D9B 9D                  <1>     popfq
   236 00000D9C 5E                  <1>     pop rsi
   237 00000D9D 5B                  <1>     pop rbx
   238                              <1>     return
    18                              <2> %%_ret:
    19 00000D9E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> findFreeCluster:
   241                              <1> ;Walks the FAT to find a free cluster and returns the 
   242                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   243                              <1> ;Works on the workingDPB
   244                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   245 00000D9F 53                  <1>     push rbx
   246 00000DA0 52                  <1>     push rdx
   247 00000DA1 55                  <1>     push rbp
   248 00000DA2 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
   249                              <1>     ;Use readFAT
   250                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   251                              <1>     ;If readFAT returns 0 then its a free cluster
   252 00000DA9 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   253                              <1> .fatLoop:
   254 00000DAE 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   255 00000DB0 E8F5000000          <1>     call readFAT    ;Read the value at eax, if it is 0, then eax is free
   256 00000DB5 7210                <1>     jc .exitFail    ;If something goes wrong, just return
   257 00000DB7 85C0                <1>     test eax, eax   ;Is this cluster free?
   258 00000DB9 7409                <1>     jz .exit    ;If yes, exit
   259 00000DBB 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   260 00000DBF 3B450F              <1>     cmp eax, dword [rbp + dpb.dClusterCount]
   261 00000DC2 76EA                <1>     jbe .fatLoop
   262                              <1> .exit:
   263 00000DC4 89D8                <1>     mov eax, ebx
   264 00000DC6 F8                  <1>     clc
   265                              <1> .exitFail:      ;Keep carry flag
   266 00000DC7 5D                  <1>     pop rbp
   267 00000DC8 5A                  <1>     pop rdx
   268 00000DC9 5B                  <1>     pop rbx
   269                              <1>     return
    18                              <2> %%_ret:
    19 00000DCA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> findFreeClusterData:
   272                              <1> ;Walks the FAT to find a free cluster and returns the 
   273                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   274                              <1> ;Also finds NumberOfFreeCLusters. Both fields get filled in the workingDPB
   275                              <1> ;Works on the workingDPB
   276                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   277 00000DCB 53                  <1>     push rbx
   278 00000DCC 52                  <1>     push rdx
   279 00000DCD 55                  <1>     push rbp
   280 00000DCE 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
   281 00000DD5 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   282                              <1>     ;Mark dFirstFreeCluster as -1 and dNumberOfFreeClusters as 0
   283 00000DD9 31D2                <1>     xor edx, edx
   284 00000DDB 895531              <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], edx ;Zero this field
   285 00000DDE FFCA                <1>     dec edx
   286 00000DE0 89552D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], edx ;Set to -1, unknown (i.e. none)
   287                              <1>     ;Use readFAT
   288                              <1>     ;Starting with cluster number 2, goto to the MAX cluster
   289                              <1>     ;If readFAT returns 0 then its a free cluster
   290 00000DE3 B802000000          <1>     mov eax, 2  ;Start with cluster 2
   291 00000DE8 8B550F              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   292                              <1> .fatLoop:
   293 00000DEB 89C3                <1>     mov ebx, eax    ;Save the current cluster number in ebx
   294 00000DED E8B8000000          <1>     call readFAT
   295 00000DF2 721C                <1>     jc .exitFail   ;If something goes wrong, just return
   296 00000DF4 85C0                <1>     test eax, eax   ;Is this cluster free?
   297 00000DF6 750C                <1>     jne .fatProceed
   298 00000DF8 FF4531              <1>     inc dword [rbp + dpb.dNumberOfFreeClusters] ;Add 1 to # of free clusters
   299 00000DFB 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dFirstFreeCluster], -1 ;Have we found the first clust?
   300 00000E02 7410                <1>     je .fatFirst
   301                              <1> .fatProceed:
   302 00000E04 678D4301            <1>     lea eax, dword [ebx + 1]    ;Add one to ebx and save in eax
   303 00000E08 39D0                <1>     cmp eax, edx
   304 00000E0A 76DF                <1>     jbe .fatLoop
   305                              <1> .exit:
   306 00000E0C 8B452D              <1>     mov eax, dword [rbp + dpb.dFirstFreeCluster]  ;Get first free cluster in eax
   307 00000E0F F8                  <1>     clc
   308                              <1> .exitFail:      ;Keep carry flag
   309 00000E10 5D                  <1>     pop rbp
   310 00000E11 5A                  <1>     pop rdx
   311 00000E12 5B                  <1>     pop rbx
   312                              <1>     return
    18                              <2> %%_ret:
    19 00000E13 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   313                              <1> .fatFirst:
   314 00000E14 895D2D              <1>     mov dword [rbp + dpb.dFirstFreeCluster], ebx
   315 00000E17 EBEB                <1>     jmp short .fatProceed
   316                              <1> 
   317                              <1> getNextSectorOfFile:
   318                              <1> ;This function will read the next sector for a file into a buffer.
   319                              <1> ;If the next sector to be read lives in the next cluster, it will update
   320                              <1> ; the vars appropriately
   321                              <1> ;
   322                              <1> ;Input: rbp = dpb pointer
   323                              <1> ;Output:
   324                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   325                              <1> ; If rax = -1 => [currClustF] = Last Cluster of File. Also ZF=ZE in this case
   326                              <1> ;       CF=CY => Critical error occurred and was FAILed
   327                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   328                              <1> ; next cluster and read first sector 
   329                              <1>     ;Check if we need to go to next cluster
   330 00000E19 8A05(3CC70300)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   331 00000E1F 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   332 00000E22 7416                <1>     je .gotoNextCluster
   333                              <1>     ;Goto next sector in same cluster
   334 00000E24 FE05(3CC70300)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   335 00000E2A 48FF05(3DC70300)    <1>     inc qword [currSectD]  ;Goto next sector on Disk, clears ZF
   336 00000E31 488B05(3DC70300)    <1>     mov rax, qword [currSectD]
   337                              <1> .exitOK:
   338 00000E38 F8                  <1>     clc
   339                              <1> .exitFail:
   340                              <1>     return
    18                              <2> %%_ret:
    19 00000E39 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   341                              <1> .gotoNextCluster:
   342 00000E3A 8B05(34C70300)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   343 00000E40 E865000000          <1>     call readFAT
   344 00000E45 72F2                <1>     jc .exitFail
   345                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   346 00000E47 3DFFFFFFFF          <1>     cmp eax, -1
   347 00000E4C 74EA                <1>     je .exitOK
   348                              <1> ;Update the new cluster and sector information
   349 00000E4E 8905(34C70300)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   350 00000E54 FF05(30C70300)      <1>     inc dword [currClustF]   ;Goto next file cluster
   351 00000E5A E867FEFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster, clears ZF
   352 00000E5F 488905(3DC70300)    <1>     mov qword [currSectD], rax  ;Save it
   353 00000E66 C605(3CC70300)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   354 00000E6D EBC9                <1>     jmp short .exitOK
   355                              <1> 
   356                              <1> unlinkFAT:
   357                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   358                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   359                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   360                              <1> ; cluster must be set to EOC before this proc is called.
   361                              <1> ;Stops at first invalid cluster number.
   362                              <1> ;
   363                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   364                              <1> ;       rbp = Current DPB to use for disk
   365                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   366                              <1> 
   367 00000E6F 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   368 00000E70 56                  <1>     push rsi
   369 00000E71 E80A000000          <1>     call truncateFAT    ;Preserved eax
   370 00000E76 31F6                <1>     xor esi, esi  ;Free first cluster too
   371 00000E78 E8CE000000          <1>     call writeFAT
   372 00000E7D 5E                  <1>     pop rsi
   373 00000E7E 58                  <1>     pop rax
   374                              <1>     return
    18                              <2> %%_ret:
    19 00000E7F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   375                              <1> 
   376                              <1> truncateFAT:
   377                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   378                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   379                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   380                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   381                              <1> ;Stops at first invalid cluster number.
   382                              <1> ;
   383                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   384                              <1> ;       rbp = Current DPB to use for disk
   385                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   386 00000E80 50                  <1>     push rax
   387 00000E81 53                  <1>     push rbx
   388 00000E82 51                  <1>     push rcx
   389 00000E83 56                  <1>     push rsi
   390 00000E84 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   391                              <1> .lp:
   392 00000E86 E81F000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   393 00000E8B 7218                <1>     jc .exit    ;Error exit
   394 00000E8D 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   395 00000E8F 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   396 00000E90 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   397 00000E92 E8B4000000          <1>     call writeFAT
   398 00000E97 720C                <1>     jc .exit    ;Error exit
   399 00000E99 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   400 00000E9F 7404                <1>     je .exit
   401 00000EA1 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   402 00000EA3 EBE1                <1>     jmp short .lp
   403                              <1> .exit:
   404 00000EA5 5E                  <1>     pop rsi
   405 00000EA6 59                  <1>     pop rcx
   406 00000EA7 5B                  <1>     pop rbx
   407 00000EA8 58                  <1>     pop rax
   408                              <1>     return
    18                              <2> %%_ret:
    19 00000EA9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   409                              <1> readFAT:
   410                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   411                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   412                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   413                              <1> ;       rbp = DPB
   414                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   415                              <1> ;If carry set, getBuffer failed!
   416 00000EAA 53                  <1>     push rbx
   417 00000EAB 51                  <1>     push rcx
   418 00000EAC 52                  <1>     push rdx
   419 00000EAD 57                  <1>     push rdi
   420 00000EAE 55                  <1>     push rbp
   421 00000EAF 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   422 00000EB1 E8C4FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   423                              <1>     ;and FAT type in ecx
   424 00000EB6 E80AFDFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   425 00000EBB 7237                <1>     jc .exitFail
   426                              <1>     ;Check if FAT 12, 16, 32
   427 00000EBD 85C9                <1>     test ecx, ecx
   428 00000EBF 7439                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   429 00000EC1 F7C101000000        <1>     test ecx, 1
   430 00000EC7 7413                <1>     jz .goToNextClusterFat32
   431                              <1>     ;Here we handle FAT16
   432 00000EC9 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   433 00000ECE 3DF6FF0000          <1>     cmp eax, 0FFF6h  ;Valid cluster number?
   434 00000ED3 721E                <1>     jb .exit
   435 00000ED5 B8FFFFFFFF          <1>     mov eax, -1 ;If not, set to -1
   436 00000EDA EB17                <1>     jmp short .exit
   437                              <1> .goToNextClusterFat32:
   438 00000EDC 8B441330            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   439 00000EE0 3DF6FFFF0F          <1>     cmp eax, 0FFFFFF6h ;First reserved value. Any Reserved number = EOC
   440 00000EE5 7207                <1>     jb .validCluster32   
   441 00000EE7 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   442 00000EEC EB05                <1>     jmp short .exit
   443                              <1> .validCluster32:
   444 00000EEE 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   445                              <1> .exit:
   446 00000EF3 F8                  <1>     clc
   447                              <1> .exitFail:
   448 00000EF4 5D                  <1>     pop rbp
   449 00000EF5 5F                  <1>     pop rdi
   450 00000EF6 5A                  <1>     pop rdx
   451 00000EF7 59                  <1>     pop rcx
   452 00000EF8 5B                  <1>     pop rbx
   453                              <1>     return
    18                              <2> %%_ret:
    19 00000EF9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   454                              <1> .gotoNextClusterFat12:
   455                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   456                              <1> ;eax has the sector number of the FAT
   457                              <1> ;edx has byte offset into the sector
   458                              <1> ;edi has current cluster number
   459                              <1> ;rbx has ptr to buffer header
   460 00000EFA F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   461 00000F00 742E                <1>     jz .gotoNextClusterFat12Even
   462                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   463 00000F02 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   464 00000F06 29D1                <1>     sub ecx, edx
   465 00000F08 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   466 00000F0A 751A                <1>     jnz .gotoNextClusterFat12NoCross
   467                              <1>     ;Boundary cross, build entry properly
   468 00000F0C 0FB65C1330          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   469 00000F11 FFC0                <1>     inc eax ;Get next FAT sector
   470 00000F13 53                  <1>     push rbx
   471 00000F14 E8ACFCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   472 00000F19 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   473 00000F1A 72D8                <1>     jc .exitFail
   474 00000F1C 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   475 00000F1E 8A6330              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   476 00000F21 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   477 00000F24 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   478                              <1> .gotoNextClusterFat12NoCross:
   479 00000F26 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   480 00000F2B C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   481 00000F2E EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   482                              <1> .gotoNextClusterFat12Even:
   483                              <1>     ;Here the cluster is even and can't cross a sector boundary
   484 00000F30 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   485 00000F35 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   486                              <1> .checkIfLastFAT12Cluster:
   487 00000F3A 3DEF0F0000          <1>     cmp eax, 0FEFh   ;Is it below the first invalid cluster number?
   488 00000F3F 72B2                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   489 00000F41 B8FFFFFFFF          <1>     mov eax, -1 ;Else, replace with -1, EOC
   490 00000F46 E9A8FFFFFF          <1>     jmp .exit
   491                              <1> 
   492                              <1> writeFAT:
   493                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   494                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   495                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   496                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   497                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   498 00000F4B 53                  <1>     push rbx
   499 00000F4C 51                  <1>     push rcx
   500 00000F4D 52                  <1>     push rdx
   501 00000F4E 56                  <1>     push rsi
   502 00000F4F 57                  <1>     push rdi
   503 00000F50 55                  <1>     push rbp
   504 00000F51 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   505 00000F53 E822FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   506                              <1>     ;and FAT type in ecx
   507 00000F58 E868FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   508 00000F5D 7223                <1>     jc .exitFail
   509                              <1>     ;Check if FAT 12, 16, 32
   510 00000F5F 85C9                <1>     test ecx, ecx
   511 00000F61 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   512 00000F63 F7C101000000        <1>     test ecx, 1
   513 00000F69 7407                <1>     jz .goToNextClusterFat32
   514                              <1>     ;Here we handle FAT16
   515 00000F6B 6689741330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   516 00000F70 EB0A                <1>     jmp short .exit
   517                              <1> .goToNextClusterFat32:
   518 00000F72 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   519 00000F78 89741330            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   520                              <1> .exit:
   521 00000F7C E89CFAFFFF          <1>     call markBufferDirty
   522 00000F81 F8                  <1>     clc
   523                              <1> .exitFail:
   524 00000F82 5D                  <1>     pop rbp
   525 00000F83 5F                  <1>     pop rdi
   526 00000F84 5E                  <1>     pop rsi
   527 00000F85 5A                  <1>     pop rdx
   528 00000F86 59                  <1>     pop rcx
   529 00000F87 5B                  <1>     pop rbx
   530                              <1>     return
    18                              <2> %%_ret:
    19 00000F88 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   531                              <1> .gotoNextClusterFat12:
   532                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   533                              <1> ;eax has the sector number of the FAT
   534                              <1> ;edx has byte offset into the sector
   535                              <1> ;edi has current cluster number
   536                              <1> ;rbx has ptr to buffer header
   537 00000F89 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   538 00000F8F F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   539 00000F95 7445                <1>     jz .gotoNextClusterFat12Even
   540                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   541 00000F97 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   542 00000F9B 29D1                <1>     sub ecx, edx
   543 00000F9D FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   544 00000F9F 752C                <1>     jnz .gotoNextClusterFat12NoCross
   545                              <1>     ;Boundary cross, build entry properly
   546                              <1>     ;Replace the high nybble of the low byte 
   547 00000FA1 0FB64C1330          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   548 00000FA6 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   549 00000FAC C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   550 00000FAF 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   551 00000FB1 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   552 00000FB4 884C1330            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   553 00000FB8 E860FAFFFF          <1>     call markBufferDirty
   554 00000FBD FFC0                <1>     inc eax ;Get next FAT sector
   555 00000FBF E801FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   556 00000FC4 72BC                <1>     jc .exitFail
   557 00000FC6 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   558 00000FC8 884B30              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   559 00000FCB EBAF                <1>     jmp short .exit
   560                              <1> .gotoNextClusterFat12NoCross:
   561 00000FCD 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   562 00000FD2 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   563 00000FD7 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   564 00000FDA EB0A                <1>     jmp short .fat12common
   565                              <1> .gotoNextClusterFat12Even:
   566                              <1>     ;Here the cluster is even and can't cross a sector boundary
   567 00000FDC 0FB7441330          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   568 00000FE1 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   569                              <1> .fat12common:
   570 00000FE6 09F0                <1>     or eax, esi     ;Add the new entry bits
   571 00000FE8 6689441330          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   572 00000FED E98AFFFFFF          <1>     jmp .exit
    25                                  %include "./Source/Kernel/FAT/findfile.asm"
    26                              <1> ;Generic Find First and Find Next functions here
    27                              <1> findNextMain:
    28 00000FF2 488B3D(FCC30300)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
    29 00000FF9 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
    30 00000FFC 7408                <1>     jz .notNet
    31 00000FFE B81C110000          <1>     mov eax, 0111Ch ;Netowrk find next
    32 00001003 CD4F                <1>     int 4Fh
    33                              <1>     return  ;Return propagating the error code
    18                              <2> %%_ret:
    19 00001005 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    34                              <1> .notNet:
    35 00001006 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]
    36 00001008 FEC0                <1>     inc al  ;Convert into 1 based number
    37 0000100A E8665A0000          <1>     call dosCrit1Enter
    38 0000100F E828560000          <1>     call setDrive   ;Set CDS and current drive vars
    39 00001014 720C                <1>     jc .critError   ;Return error if this fails
    40 00001016 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS] 
    41 0000101D E855530000          <1>     call getDiskDPB  ;Update and set working dpb and drv, get dpbptr in rbp
    42                              <1> .critError:
    43 00001022 E8585A0000          <1>     call dosCrit1Exit
    44                              <1>     retc    ;Return error if this fails
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001027 72DC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    45 00001029 E801000000          <1>     call searchMoreDir
    46                              <1>     return
    18                              <2> %%_ret:
    19 0000102E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    47                              <1> searchMoreDir:
    48                              <1> ;The three directory variables are set up from the ffblock. 
    49                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    50                              <1> ;Current DTA is also used to contain the ff block address
    51                              <1> ;All registers can be trashed
    52 0000102F 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
    53                              <1>     ;First setup dirClustA and dirSect vars
    54 00001036 488B3D(FCC30300)    <1>     mov rdi, qword [currentDTA]
    55 0000103D 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    56 00001040 8805(DCC60300)      <1>     mov byte [searchAttr], al   ;And save it
    57 00001046 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    58 00001049 8905(64C70300)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    59 0000104F 8905(60C70300)      <1>     mov dword [dirClustPar], eax
    60                              <1>     ;Get number of 32 byte entries in a sector
    61 00001055 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    62                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    63 00001058 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    64                              <1>     ;Now get bytes per cluster
    65 0000105B 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    66 0000105D 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 00001061 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift]
    68 00001065 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 00001067 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 00001069 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 0000106B 31D2                <1>     xor edx, edx
    72 0000106D F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 0000106F 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 00001071 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 00001075 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 00001077 31D2                <1>     xor edx, edx
    80 00001079 F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster (or root dir)
    82                              <1>     ;edx has byte offset into sector 
    83 0000107B 668905(68C70300)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 00001082 C1EA05              <1>     shr edx, 5 ;Divide edx by 32 to get Dir Entry
    85 00001085 8915(6AC70300)      <1>     mov dword [dirEntry], edx
    86 0000108B 8B05(64C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    87 00001091 85C0                <1>     test eax, eax   ;If we at cluster 0, we are in old style root dir
    88 00001093 7461                <1>     jz .oldFat
    89                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    90 00001095 89D9                <1>     mov ecx, ebx
    91 00001097 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    92                              <1> .fatlp:
    93 0000109A E80BFEFFFF          <1>     call readFAT
    94 0000109F 3DFFFFFFFF          <1>     cmp eax, -1
    95 000010A4 7464                <1>     je .errorExit
    96 000010A6 FFC9                <1>     dec ecx
    97 000010A8 75F0                <1>     jnz .fatlp
    98 000010AA 8905(64C70300)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    99                              <1> .skipFatWalk:
   100 000010B0 488D0597000000      <1>     lea rax, searchDir.nextEp
   101 000010B7 50                  <1>     push rax    ;Push the return address onto stack
   102 000010B8 8B05(64C70300)      <1>     mov eax, dword [dirClustA]
   103 000010BE E803FCFFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   104 000010C3 0FB71D(68C70300)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   105 000010CA 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   106                              <1> .common:
   107 000010CD E8F8FAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   108 000010D2 0F8211010000        <1>     jc searchDir.hardError
   109 000010D8 E80F010000          <1>     call adjustDosDirBuffer  ;rbx has the buffer ptr for this dir sector
   110 000010DD 8B05(6AC70300)      <1>     mov eax, dword [dirEntry]
   111 000010E3 29C1                <1>     sub ecx, eax    ;Subtract the offset to get the number of entries left
   112 000010E5 C1E005              <1>     shl eax, 5  ;Multiply by 32 to turn into bytes to add to rsi
   113 000010E8 4801C6              <1>     add rsi, rax    ;rsi points to current entry in the sector.
   114                              <1>     ;We continue AS IF this entry was bad
   115                              <1>     ;Now setup al as upon normal entry 
   116 000010EB 8A05(DCC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   117 000010F1 E95F010000          <1>     jmp findInBuffer.nextEntry  ;Proceed from within function
   118                              <1>     ;The return address on the stack will return to the ep's pushed
   119                              <1> .oldFat:
   120                              <1> ;Old FAT 12/16 root dirs fall thru here only
   121 000010F6 488D05D0000000      <1>     lea rax, searchDir.oldNextEP
   122 000010FD 50                  <1>     push rax    ;Push return address onto the stack
   123 000010FE 0FB705(68C70300)    <1>     movzx eax, word [dirSect]   ;Get the root directory sector offset
   124 00001105 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   125 00001108 EBC3                <1>     jmp short .common
   126                              <1> .errorExit:
   127 0000110A F9                  <1>     stc
   128                              <1>     return
    18                              <2> %%_ret:
    19 0000110B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   129                              <1> searchDir:
   130                              <1> ;Called in a level 1 critical section. 
   131                              <1> ;The directory variables are set and fcbName has the pattern to match
   132                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   133                              <1> ;All registers can be trashed
   134                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   135                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   136                              <1> 
   137                              <1>     ;We check the cds here. If it is a network cds we make findfirst req 
   138                              <1>     ; with cds. If cds = -1, we make find first req without cds.
   139 0000110C 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   140 00001113 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   141 00001119 7408                <1>     jz .notNet
   142 0000111B B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS
   143 00001120 CD4F                <1>     int 4fh
   144                              <1>     return
    18                              <2> %%_ret:
    19 00001122 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> .notNet:
   146 00001123 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   147 0000112A 8B05(64C70300)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   148 00001130 85C0                <1>     test eax, eax
   149 00001132 747E                <1>     jz .oldRoot
   150 00001134 E88DFBFFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   151                              <1> .sectorLoop:
   152 00001139 E88CFAFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   153 0000113E 0F82A5000000        <1>     jc .hardError
   154 00001144 E8A3000000          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   155                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   156 00001149 E8B2000000          <1>     call findInBuffer
   157                              <1> .nextEp:
   158                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000114E 73D2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   159 00001150 0F848F000000        <1>     jz .fnfError    ;CF=CY AND ZF=ZE => File not found
   160                              <1>     ;If ZF=ZE then fnfError (i.e. we hit an entry starting with 00)
   161                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   162                              <1>     ;IF however, the next cluster is -1, then we return fail
   163 00001156 8B05(64C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   164 0000115C 8905(34C70300)      <1>     mov dword [currClustD], eax
   165 00001162 668B05(68C70300)    <1>     mov ax, word [dirSect]
   166 00001169 8805(3CC70300)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   167 0000116F 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   168 00001173 488905(3DC70300)    <1>     mov qword [currSectD], rax  
   169 0000117A C705(30C70300)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   169 00001182 0000                <1>
   170 00001184 E890FCFFFF          <1>     call getNextSectorOfFile
   171 00001189 725E                <1>     jc .hardError
   172 0000118B 3DFFFFFFFF          <1>     cmp eax, -1
   173 00001190 7453                <1>     je .fnfError    ;We are at the end of the directory and didnt find the file
   174 00001192 66FF05(68C70300)    <1>     inc word [dirSect]  ;Goto next sector
   175 00001199 8B05(64C70300)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 0000119F 3B05(34C70300)      <1>     cmp eax, dword [currClustD] ;Did it change?
   177 000011A5 7492                <1>     je .sectorLoop  ;If not, we advanced sectors only
   178 000011A7 66C705(68C70300)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   178 000011AF 00                  <1>
   179 000011B0 EB87                <1>     jmp short .sectorLoop 
   180                              <1> 
   181                              <1> .oldRoot:
   182                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   183                              <1> ; one large contiguous cluster.
   184                              <1> ;   ecx = Number of entries per sector
   185                              <1> .oldSectorLp:
   186 000011B2 0FB705(68C70300)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   187 000011B9 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   188 000011BC E809FAFFFF          <1>     call getBufForDOS
   189 000011C1 7226                <1>     jc .hardError
   190 000011C3 E824000000          <1>     call adjustDosDirBuffer      ;rbx has the buffer pointer for this dir sector
   191 000011C8 E833000000          <1>     call findInBuffer
   192                              <1> .oldNextEP:
   193                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 000011CD 7201                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 000011CF C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   194 000011D0 7413                <1>     jz .fnfError
   195 000011D2 66FF05(68C70300)    <1>     inc word [dirSect]  ;Goto next sector in directory
   196 000011D9 8B4509              <1>     mov eax, dword [rbp + dpb.wNumberRootDirEntries]
   197 000011DC 663905(6AC70300)    <1>     cmp word [dirEntry], ax ;Have we reached the last dir entry?
   198 000011E3 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   199                              <1> .fnfError:
   200 000011E5 B012                <1>     mov al, errNoFil
   201 000011E7 F9                  <1>     stc
   202                              <1>     return
    18                              <2> %%_ret:
    19 000011E8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   203                              <1> .hardError:
   204 000011E9 B0FF                <1>     mov al, -1
   205                              <1>     return
    18                              <2> %%_ret:
    19 000011EB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   206                              <1> adjustDosDirBuffer:
   207 000011EC 804B0904            <1>     or byte [rbx + bufferHdr.bufferFlags], dirBuffer   ;Change to dir buffer
   208 000011F0 806309FE            <1>     and byte [rbx + bufferHdr.bufferFlags], ~dosBuffer
   209 000011F4 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   210 000011F8 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   211 000011FC C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   212                              <1>     return
    18                              <2> %%_ret:
    19 000011FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   213                              <1> 
   214                              <1> findInBuffer:
   215                              <1> ;Input: ecx = Number of entries in sector buffer to look for
   216                              <1> ;       rsi = Sector buffer data area
   217                              <1> ;Output: CF=CY => No entries found
   218                              <1> ;        ZF=NE => Keep searching in subsequent directories
   219                              <1> ;        ZF=ZE => End of directory reached early, stop
   220                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   221                              <1> ;        rsi = Points to start of the disk buffer directory entry
   222 00001200 8A05(DCC60300)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   223 00001206 E89D000000          <1>     call adjustSearchAttr   ;Adjust the search attributes 
   224                              <1> .searchMainLp:
   225                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   226 0000120B 8A25(E8C60300)      <1>     mov ah, byte [delChar]
   227 00001211 803E00              <1>     cmp byte [rsi], 00h
   228 00001214 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   229 00001216 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   230 00001218 750F                <1>     jne .notLookingForEmpty
   231                              <1> .emptySlot:
   232                              <1> ;Here we check if we are looking for an empty directory entry or
   233                              <1> ; we have reached the end of the file (if the first byte is 00h)
   234                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   235 0000121A 3A25(B9C60300)      <1>     cmp ah, byte [fcbName] 
   236                              <1>     rete    ;Return if equal (CF=NC too)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001220 74DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   237                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   238 00001222 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   239 00001225 752E                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   240 00001227 F9                  <1>     stc
   241                              <1>     return
    18                              <2> %%_ret:
    19 00001228 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> .notLookingForEmpty:
   243 00001229 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   244 0000122C 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   245 0000122F 803D(4DC40300)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   246 00001236 7434                <1>     je .exclusiveDir
   247 00001238 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume only?
   248 0000123A 7437                <1>     je .volFile ;If so, go here
   249 0000123C 80FC08              <1>     cmp ah, 08h ;Is this file a volume lbl that we are not looking for?
   250 0000123F 7414                <1>     je .nextEntry
   251 00001241 38C4                <1>     cmp ah, al  ;If file attr <= user selected attribs, scan name for match
   252 00001243 7710                <1>     ja .nextEntry
   253                              <1>     ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   254                              <1> .scanName:
   255 00001245 56                  <1>     push rsi
   256 00001246 488D3D(B9C60300)    <1>     lea rdi, fcbName ;Goto name template to search for
   257 0000124D E83E000000          <1>     call .nameCompare
   258 00001252 5E                  <1>     pop rsi
   259 00001253 7424                <1>     je .searchEntryFound
   260                              <1> .nextEntry:
   261                              <1> ;Go to next entry
   262 00001255 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   263 0000125C FF05(6AC70300)      <1>     inc dword [dirEntry] ;And denote that in variable
   264 00001262 FFC9                <1>     dec ecx
   265 00001264 75A5                <1>     jnz .searchMainLp
   266                              <1> .badExit:
   267 00001266 31C0                <1>     xor eax, eax
   268 00001268 FFC0                <1>     inc eax ;Clear ZF
   269 0000126A F9                  <1>     stc
   270                              <1>     return
    18                              <2> %%_ret:
    19 0000126B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   271                              <1> .exclusiveDir:
   272                              <1> ;Used when going down a path, dir bit simply need be set
   273 0000126C F6C410              <1>     test ah, dirDirectory
   274 0000126F 75D4                <1>     jnz .scanName
   275 00001271 EBE2                <1>     jmp short .nextEntry
   276                              <1> 
   277                              <1> .volFile:
   278 00001273 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   279 00001275 74CE                <1>     je .scanName       ;If so, scan the name agrees
   280 00001277 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   281                              <1> 
   282                              <1> .searchEntryFound:
   283                              <1> ;Here a good entry was found!
   284 00001279 56                  <1>     push rsi
   285 0000127A 57                  <1>     push rdi
   286 0000127B 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   287 0000127D 488D3D(3EC60300)    <1>     lea rdi, curDirCopy
   288 00001284 B904000000          <1>     mov ecx, 32/8
   289 00001289 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   290 0000128C 5F                  <1>     pop rdi
   291 0000128D 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   292 0000128E F8                  <1>     clc
   293                              <1>     return
    18                              <2> %%_ret:
    19 0000128F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> .nameCompare:
   296                              <1> ;Input: rsi = source string
   297                              <1> ;       rdi = string template to compare against
   298                              <1> ;Output: ZF=ZE => Strings are ok
   299                              <1> ;        ZF=NZ => Strings not ok
   300                              <1> ;Accepts wildcards. Trashes al
   301 00001290 51                  <1>     push rcx
   302 00001291 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   303                              <1> .ncLp:
   304 00001293 81F90B000000        <1>     cmp ecx, 11
   305 00001299 740B                <1>     je .ncExit
   306 0000129B FFC1                <1>     inc ecx
   307 0000129D A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   308 0000129E 74F3                <1>     je .ncLp    ;If equal, keep going
   309 000012A0 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   310 000012A4 74ED                <1>     je .ncLp
   311                              <1> .ncExit:
   312 000012A6 59                  <1>     pop rcx
   313                              <1>     return
    18                              <2> %%_ret:
    19 000012A7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   314                              <1> 
   315                              <1> adjustSearchAttr:
   316                              <1> ;Converts the byte to a system only if the bit is set
   317                              <1> ;Input: eax = User selected search mask
   318                              <1> ;Output: eax = Modified search mask
   319 000012A8 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   320 000012AD A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   321                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000012B2 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   322 000012B4 B808000000          <1>     mov eax, dirVolumeID
   323                              <1>     return
    18                              <2> %%_ret:
    19 000012B9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> 
   325                              <1> asciiToFCB:
   326                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   327                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   328                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   329                              <1> ;Name is space padded.
   330                              <1> ;Input: rsi = ASCII string buffer
   331                              <1> ;       rdi = FCB name buffer
   332                              <1> ;Output: al = Char that terminated the source string 
   333 000012BA 53                  <1>     push rbx    
   334 000012BB 57                  <1>     push rdi
   335 000012BC B90B000000          <1>     mov ecx, 11
   336 000012C1 B020                <1>     mov al, " "
   337 000012C3 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   338 000012C5 5F                  <1>     pop rdi
   339 000012C6 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   340                              <1> .processName:
   341 000012C9 AC                  <1>     lodsb   ;Get the char in al
   342 000012CA E86F540000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   343 000012CF 84C0                <1>     test al, al
   344 000012D1 742D                <1>     jz .exit
   345 000012D3 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   346 000012D5 740E                <1>     je .extSpace
   347 000012D7 3C2E                <1>     cmp al, "."
   348 000012D9 7413                <1>     je .ext
   349                              <1>     ;Test if the char is valid
   350 000012DB E89F550000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   351 000012E0 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   352 000012E2 AA                  <1>     stosb   ;Store the char
   353 000012E3 EBE4                <1>     jmp short .processName
   354                              <1> .extSpace:
   355                              <1> ;Now we scan for a period in the name
   356 000012E5 AC                  <1>     lodsb   ;Get a char and increase rsi
   357 000012E6 84C0                <1>     test al, al
   358 000012E8 7416                <1>     jz .exit
   359 000012EA 3C2E                <1>     cmp al, "."     ;If al is not a period...
   360 000012EC 75F7                <1>     jne .extSpace   ; keep searching
   361                              <1> .ext:
   362 000012EE 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   363                              <1> .processExt:
   364 000012F2 AC                  <1>     lodsb
   365 000012F3 84C0                <1>     test al, al
   366 000012F5 7409                <1>     jz .exit
   367 000012F7 3C20                <1>     cmp al, " "
   368 000012F9 7405                <1>     je .exit
   369 000012FB AA                  <1>     stosb
   370 000012FC EBF4                <1>     jmp short .processExt
   371                              <1> .exitBadChar:
   372 000012FE 30C0                <1>     xor al, al  ;Return a null terminator
   373                              <1> .exit:
   374 00001300 5B                  <1>     pop rbx
   375                              <1>     return
    18                              <2> %%_ret:
    19 00001301 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   376                              <1> 
   377                              <1> FCBToAsciiz:
   378                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   379                              <1> ;Name is space padded too
   380                              <1> ;Input: rsi = FCB name buffer
   381                              <1> ;       rdi = ASCIIZ string buffer
   382 00001302 B908000000          <1>     mov ecx, 8
   383 00001307 F3A4                <1>     rep movsb   ;Move the name over
   384                              <1> .scanNameSpace:
   385 00001309 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   386 0000130D 750D                <1>     jne .ext
   387 0000130F 48FFCF              <1>     dec rdi
   388 00001312 FFC1                <1>     inc ecx
   389 00001314 81F908000000        <1>     cmp ecx, 8
   390 0000131A 72ED                <1>     jb .scanNameSpace
   391                              <1> .ext:
   392 0000131C 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   393 00001321 7506                <1>     jne .validExt
   394 00001323 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   395 00001327 7415                <1>     je .exit
   396                              <1> .validExt:
   397 00001329 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   398 0000132B AA                  <1>     stosb
   399 0000132C B903000000          <1>     mov ecx, 3
   400 00001331 F3A4                <1>     rep movsb   ;Move the three extension chars over
   401                              <1> .scanExtSpace:
   402 00001333 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   403 00001337 7505                <1>     jne .exit
   404 00001339 48FFCF              <1>     dec rdi
   405 0000133C EBF5                <1>     jmp short .scanExtSpace
   406                              <1> .exit:
   407 0000133E 31C0                <1>     xor eax, eax
   408 00001340 AA                  <1>     stosb   ;Store a null at the end
   409                              <1>     return
    18                              <2> %%_ret:
    19 00001341 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   410                              <1> 
   411                              <1> setupFFBlock:
   412                              <1> ;Sets up the find first block for the search
   413                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   414 00001342 50                  <1>     push rax
   415 00001343 53                  <1>     push rbx
   416 00001344 56                  <1>     push rsi
   417 00001345 57                  <1>     push rdi
   418 00001346 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   419 00001349 8A05(DCC60300)      <1>     mov al, byte [searchAttr]
   420 0000134F 243F                <1>     and al, 3Fh ;Clear upper two bits
   421 00001351 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   422 00001354 0FB605(E9C60300)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   423 0000135B 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   424                              <1>     ;xchg bx, bx
   425 0000135D 488D35(B9C60300)    <1>     lea rsi, fcbName
   426 00001364 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   427 00001368 57                  <1>     push rdi
   428 00001369 48B820202020202020- <1>     mov rax, "        "
   428 00001372 20                  <1>
   429 00001373 48AB                <1>     stosq
   430 00001375 66AB                <1>     stosw
   431 00001377 AA                  <1>     stosb
   432 00001378 5F                  <1>     pop rdi
   433 00001379 48A5                <1>     movsq   ;Move 8 chars
   434 0000137B 66A5                <1>     movsw   ;Move 2 chars
   435 0000137D A4                  <1>     movsb   ;Move the final char
   436                              <1> 
   437 0000137E 8B05(6AC70300)      <1>     mov eax, dword [dirEntry]
   438 00001384 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   439 00001387 8B05(60C70300)      <1>     mov eax, dword [dirClustPar]
   440 0000138D 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   441 00001390 8A05(49C60300)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   442 00001396 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   443 00001399 8B05(54C60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   444 0000139F 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   445 000013A2 8B05(5AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   446 000013A8 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   447 000013AB 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   448 000013AF 488D35(3EC60300)    <1>     lea rsi, curDirCopy
   449 000013B6 E847FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   450                              <1> 
   451 000013BB 5F                  <1>     pop rdi
   452 000013BC 5E                  <1>     pop rsi
   453 000013BD 5B                  <1>     pop rbx
   454 000013BE 58                  <1>     pop rax
   455                              <1>     return
    18                              <2> %%_ret:
    19 000013BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   456                              <1> 
   457                              <1> getDrvLetterFromPath:   ;Int 4Fh, AX=121Ah
   458                              <1> ;Gets the drive letter for the path in al
   459                              <1> ;Input: rsi = Buffer to process
   460                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   461                              <1> ;       ZF=ZE and al = 0 => Null path
   462                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   463                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   464                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   465 000013C0 30C0                <1>     xor al, al
   466 000013C2 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   467                              <1>     retz    ;Return if a null path
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013C5 74F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   468 000013C7 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   469                              <1>     retne   ;If not equal, Relative path or network path
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013CB 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   470 000013CD 66AD                <1>     lodsw   ;Get first word, rsi += 2
   471                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   472 000013CF 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   473 000013D1 2C60                <1>     sub al, 60h
   474                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013D3 75EA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   475 000013D5 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   476                              <1>     return
    18                              <2> %%_ret:
    19 000013D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   477                              <1> canonicaliseFileName:
   478                              <1> ;Always trying to build and qualify a full pathname
   479                              <1> ;Does getPath without hitting the disk
   480 000013D8 B0FF                <1>     mov al, -1
   481 000013DA 8805(4DC40300)      <1>     mov byte [fileDirFlag], al  
   482 000013E0 8805(E1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   483 000013E6 48893D(02C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   484 000013ED FEC0                <1>     inc al  ;make al = 0
   485 000013EF 8805(12C60300)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   486 000013F5 E854000000          <1>     call getPath.epAlt
   487                              <1>     retc    ;Return if an error
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000013FA 72DB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   488 000013FC 48FFCF              <1>     dec rdi ;Point to what should be the null char
   489 000013FF 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;Was the prev char a drive sep?
   490 00001403 7503                <1>     jne .storeNull
   491 00001405 B05C                <1>     mov al, "\"
   492 00001407 AA                  <1>     stosb   ;Store the pathsep and increment rdi
   493                              <1> .storeNull:
   494 00001408 803F00              <1>     cmp byte [rdi], 0   ;Ensure path is null terminated (and clear CF)
   495                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000140B 74CA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   496 0000140D C60700              <1>     mov byte [rdi], 0   ;Store a terminating zero if necessary
   497                              <1>     return
    18                              <2> %%_ret:
    19 00001410 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   498                              <1> getDirPathNoCanon:
   499 00001411 31C0                <1>     xor eax, eax
   500 00001413 4889FE              <1>     mov rsi, rdi
   501 00001416 EB1B                <1>     jmp short getPath.noCanon
   502                              <1> getFilePathNoCanon:
   503                              <1> ;Used when the path is constructed internally (as for FCB functions)
   504                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   505 00001418 B0FF                <1>     mov al, -1
   506 0000141A 4889FE              <1>     mov rsi, rdi
   507 0000141D EB14                <1>     jmp short getPath.noCanon
   508                              <1> getDirPath:
   509 0000141F 30C0                <1>     xor al, al   ;Set to Directory
   510 00001421 EB02                <1>     jmp short getPath
   511                              <1> getFilePath:
   512 00001423 B0FF                <1>     mov al, -1  ;Set to File
   513                              <1> getPath:
   514                              <1> ;Determines whether the path is spliced or not and transfers the chars
   515                              <1> ; from the user buffer into an internal buffer, normalising them.
   516                              <1> ; Single and double dot entries are left as is, but the wildcard * is converted
   517                              <1> ; to ?. Wildcards can only be present in the LAST portion of the given path.
   518                              <1> ; If the portion with wildcards does not end with an ASCII null, we fail the 
   519                              <1> ; request with pnf. If there is a redirector which needs to normalise the path, 
   520                              <1> ; we let it do its thing and return.
   521                              <1> ;If the user requests data from a remote server (i.e. a pathspec starting with
   522                              <1> ; \\) then wildcards, the colon and dots are forbidden.
   523                              <1> ;If a remote user requests data (dosInvoke = -1), then the pathspec must be an
   524                              <1> ; absolute path (no wildcards or dots) and must begin with a drive letter 
   525                              <1> ; (converted from using machine name by the net client program).
   526                              <1> ;We check if we are a net invoke to ensure that the pathspec that was recieved
   527                              <1> ; was good.
   528                              <1> ;Called with:
   529                              <1> ; rdi = SDA Buffer for filename
   530                              <1> ; rsi = Potentially unqualified filename
   531                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   532 00001425 50                  <1>     push rax
   533 00001426 57                  <1>     push rdi
   534 00001427 E8ACFFFFFF          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   535 0000142C 5F                  <1>     pop rdi
   536 0000142D 58                  <1>     pop rax
   537 0000142E 4889FE              <1>     mov rsi, rdi    ;Use the newly built path as the source
   538                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001431 72DD                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   539                              <1> .noCanon:
   540 00001433 8805(4DC40300)      <1>     mov byte [fileDirFlag], al  
   541 00001439 B0FF                <1>     mov al, -1
   542 0000143B 8805(E1C60300)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   543 00001441 48893D(02C60300)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   544 00001448 8805(12C60300)      <1>     mov byte [skipDisk], al  ;Store -1 to NOT skip checking the file on disk
   545                              <1> .epAlt:
   546 0000144E C605(E5C60300)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   547 00001455 C605(E4C60300)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   548 0000145C F605(E2C60300)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   549 00001463 7428                <1>     jz .notServer
   550                              <1>     ;In this case, the client network program will have correctly
   551                              <1>     ; substituted the drive letter for the path before making the request.
   552                              <1>     ;Thus we can immediately assume the existance of a drive letter in the path 
   553 00001465 E856FFFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in X:    call getCDS ;Get the cds for the drive letter on the path
   555                              <1>     ;REMEMBER, FOR ALL THE LOGIC TO WORK, HERE WE MUST ENSURE THE PATH
   556                              <1>     ; CONTAINS NO . or .., NO INVALID CHARS OR MULTIPLE \\ AND IS 0 TERMINATED.
   557                              <1>     ;We do not scan for this criteria but the client program must adhere to 
   558                              <1>     ; these requirements.
   559                              <1>     ;When a server request is made, the request can ONLY be for a file on
   560                              <1>     ; a CDS drive.
   561 0000146A FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   562 0000146C 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS]
   563 00001473 50                  <1>     push rax
   564 00001474 E8FC550000          <1>     call dosCrit1Enter
   565 00001479 E8F94E0000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   566 0000147E E8FC550000          <1>     call dosCrit1Exit
   567 00001483 58                  <1>     pop rax
   568 00001484 0F8382000000        <1>     jnc .driveOk
   569                              <1> .serverExit:
   570 0000148A B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   571                              <1>     return
    18                              <2> %%_ret:
    19 0000148C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   572                              <1> .notServer:
   573                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   574 0000148D 48C705(F2C60300)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   574 00001495 FFFFFF              <1>
   575 00001498 B823110000          <1>     mov eax, 1123h
   576 0000149D CD4F                <1>     int 4fh ;CF=CY if not resolved. CF=NC if resolved
   577                              <1>     retnc  ;Return if resolved
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000149F 73EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   578 000014A1 E81AFFFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   579 000014A6 9C                  <1>     pushfq  ;Save the flag state on stack
   580 000014A7 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   581 000014A8 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   582 000014AB E882520000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   583 000014B0 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. \\)
   584 000014B2 E87B520000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   585 000014B7 7543                <1>     jnz .notNet
   586 000014B9 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   587 000014BB 753F                <1>     jne .notNet
   588 000014BD 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   589 000014BE 9D                  <1>     popfq
   590 000014BF 66AD                <1>     lodsw
   591 000014C1 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   592 000014C5 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   593                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   594                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   595                              <1> ; redirector Find First Without CDS
   596                              <1> 
   597 000014C7 8A1D(12C60300)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   598 000014CD C605(12C60300)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   599 000014D4 53                  <1>     push rbx
   600                              <1> .moveNetChars:
   601 000014D5 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   602 000014D6 E863520000          <1>     call uppercaseChar  ;Make char in al uppercase
   603 000014DB 84C0                <1>     test al, al
   604 000014DD 740F                <1>     jz .netEnd
   605 000014DF E84E520000          <1>     call swapPathSeparator  ;If path sep, swap it
   606 000014E4 AA                  <1>     stosb
   607 000014E5 75EE                <1>     jnz .moveNetChars  ;If not a path separating char in al, keep looking
   608 000014E7 E85C000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   609 000014EC EBE7                <1>     jmp short .moveNetChars
   610                              <1> .netEnd:
   611 000014EE 5B                  <1>     pop rbx
   612 000014EF AA                  <1>     stosb
   613 000014F0 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   614                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000014F2 7498                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   615 000014F4 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   616 000014F9 CD4F                <1>     int 4Fh
   617                              <1>     return
    18                              <2> %%_ret:
    19 000014FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   618                              <1> .notNet:
   619                              <1> ;This is the normal case; paths can be relative, or absolute.
   620 000014FC 58                  <1>     pop rax ;Get the drive letter back
   621 000014FD 9D                  <1>     popfq   ;Get the flag state back
   622 000014FE 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   623                              <1> .pnfErr:
   624 00001500 B003                <1>     mov al, errPnf  ;Null path error
   625 00001502 F9                  <1>     stc
   626                              <1>     return
    18                              <2> %%_ret:
    19 00001503 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   627                              <1> .notNull:
   628 00001504 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   629 00001506 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   630 00001508 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   631 0000150A F9                  <1>     stc
   632                              <1>     return
    18                              <2> %%_ret:
    19 0000150B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   633                              <1> .driveOk:
   634 0000150C 84C0                <1>     test al, al
   635 0000150E 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   636                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   637 00001510 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   638 00001513 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   639 00001515 50                  <1>     push rax    ;Save the drive letter
   640 00001516 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   641 00001517 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   642 0000151A E813520000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   643                              <1>     ;If al is a path separator, then this path is absolute.
   644 0000151F 58                  <1>     pop rax ;Get back the drive letter
   645 00001520 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   646                              <1> .absoPath:
   647                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   648 00001522 48FFC6              <1>     inc rsi
   649 00001525 EB1A                <1>     jmp short .commonDir
   650                              <1> .curPath:
   651                              <1> ;This is only jumped to if we are relative the current drive
   652                              <1> ;rsi points to first char in path
   653                              <1> ;If this char is \ or /, then it is an absolute path.
   654 00001527 8A05(16C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   655 0000152D FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   656 0000152F 50                  <1>     push rax    ;Save the current drive number
   657 00001530 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   658 00001532 E8FB510000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   659 00001537 58                  <1>     pop rax ;Get back the current drive number
   660 00001538 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   661                              <1> .relMain:
   662 0000153A C605(E1C60300)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   663                              <1> .commonDir:
   664                              <1> ;rsi points to the start of the string we will be appending
   665                              <1> ;Fall through now
   666                              <1> pathWalk:
   667                              <1> ;Input: rsi must point to source buffer for path to expand
   668                              <1> ;       rdi must point to a destination buffer
   669                              <1> ;       al must contain the drive 1 based number
   670 00001541 E8B5000000          <1>     call prepareDir    ;Prepare the dir if the drive is subst/join drive
   671 00001546 727C                <1>     jc .badDriveExit
   672                              <1>     ;If the user requests to .. to a point before rbx, we fail if a disk
   673                              <1>     ; resolution
   674                              <1> .netEp: ;For net path resolution (resolution ONLY) ptrs must point past "\\"
   675 00001548 4889FB              <1>     mov rbx, rdi
   676                              <1>     ;If rsi at the end of the string, exit for ROOT dir
   677 0000154B 803E00              <1>     cmp byte [rsi], 0
   678 0000154E 7512                <1>     jnz .mainlp
   679                              <1>     ;Setup dummy dir data
   680 00001550 31C0                <1>     xor eax, eax
   681 00001552 668905(52C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   682 00001559 668905(58C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   683 00001560 EB68                <1>     jmp short .exitGood
   684                              <1> .mainlp:
   685 00001562 E868010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   686 00001567 84C0                <1>     test al, al
   687 00001569 7507                <1>     jnz .notFile
   688 0000156B C605(E5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   689                              <1> .notFile:
   690 00001572 50                  <1>     push rax    ;Save the fact that al = 0 or "\"
   691 00001573 E856030000          <1>     call checkDevPath.charDevSearch ;Catch if FCB name = Char device    
   692 00001578 58                  <1>     pop rax
   693 00001579 736B                <1>     jnc .deviceFound
   694 0000157B E816020000          <1>     call searchForPathspec  ;and search the directory
   695 00001580 7250                <1>     jc .checkDev    ;If CF=CY, error exit UNLESS we were searching for \DEV"\"
   696 00001582 E865020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   697 00001587 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   698 00001589 84C0                <1>     test al, al ;Exit if this pathspec was a file
   699 0000158B 743D                <1>     jz .exitGood
   700                              <1>     ;Here I have to take the cluster data from the found directory entry
   701                              <1>     ; and setup the search for the next pathspec portion
   702                              <1>     ;Copy necessary data from the current directory copy
   703 0000158D 803D(12C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   704 00001594 74CC                <1>     jz .mainlp
   705 00001596 0FB705(52C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   706 0000159D C1E010              <1>     shl eax, 10h    ;Shift it high
   707 000015A0 668B05(58C60300)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   708                              <1>     ;eax now has the cluster number of the search
   709 000015A7 8905(64C70300)      <1>     mov dword [dirClustA], eax
   710 000015AD 8905(60C70300)      <1>     mov dword [dirClustPar], eax
   711 000015B3 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   712 000015B5 8905(6AC70300)      <1>     mov dword [dirEntry], eax
   713 000015BB 668905(68C70300)    <1>     mov word [dirSect], ax
   714 000015C2 EB9E                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   715                              <1> .badDriveExit:
   716 000015C4 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   717                              <1>     return
    18                              <2> %%_ret:
    19 000015C9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   718                              <1> .exitGood:
   719 000015CA C605(E4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   720                              <1> .exit:
   721                              <1>     return
    18                              <2> %%_ret:
    19 000015D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   722                              <1> .checkDev:
   723                              <1> ;If the return code is errNoFil AND Int44Fail = 0, then we check to see if 
   724                              <1> ; we are in \DEV pseudo dir
   725 000015D2 F605(4EC40300)FF    <1>     test byte [Int44Fail], -1   ;Make sure we are not returning from a FAIL
   726 000015D9 751D                <1>     jnz .nodev  ;If any bits set, ignore this check
   727                              <1>     ;Here we check to see if DEV"\" was what we were searching for
   728 000015DB 56                  <1>     push rsi
   729 000015DC 57                  <1>     push rdi
   730 000015DD E87A020000          <1>     call checkDevPath
   731 000015E2 5F                  <1>     pop rdi
   732 000015E3 5E                  <1>     pop rsi
   733 000015E4 72EB                <1>     jc .exit   ;IF CF=CY, exit bad, with error code in eax
   734                              <1> .deviceFound:
   735 000015E6 31C0                <1>     xor eax, eax    ;Set al to 0 as expected on ok!
   736 000015E8 C605(E5C60300)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   737 000015EF C605(E4C60300)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   738 000015F6 EBD9                <1>     jmp short .exit   
   739                              <1> .nodev:
   740 000015F8 F9                  <1>     stc
   741 000015F9 EBD6                <1>     jmp short .exit
   742                              <1> 
   743                              <1> prepareDir:
   744                              <1> ;Used to transfer the current directory if it is necessary.
   745                              <1> ;Always necessary if the user specified a subst/join drive. Else only if 
   746                              <1> ; relative
   747                              <1> ;Input: al = 1-based drive letter
   748                              <1> ;Output: rdi = Pointing at where to place chars from source string
   749                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   750 000015FB 56                  <1>     push rsi
   751 000015FC E874540000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   752 00001601 E836500000          <1>     call setDrive   ;Set internal variables, working CDS etc etc
   753 00001606 720D                <1>     jc .critExit    ;If the drive number in al is too great or drive invalid
   754 00001608 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS] 
   755 0000160F 57                  <1>     push rdi    ;Push CDS pointer on stack...
   756 00001610 E8624D0000          <1>     call getDiskDPB  ;Update working DPB and drv before searching, dpbptr in rbp
   757                              <1> .critExit:
   758 00001615 E865540000          <1>     call dosCrit1Exit
   759 0000161A 5E                  <1>     pop rsi     ; ...and get CDS pointer in rsi
   760 0000161B 724A                <1>     jc .badDriveExit 
   761 0000161D 488B3D(02C60300)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   762                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   763                              <1>     ;If this CDS is a join drive, copy the first 3 chars and up to the next 
   764                              <1>     ;   terminating char (\, / or Null)
   765                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   766                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   767 00001624 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive
   768 0000162A 753D                <1>     jnz .prepDirJoin
   769 0000162C 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   770 00001632 7556                <1>     jnz .prepDirSubst
   771                              <1> .prepMain:
   772                              <1> ;Ok so now preliminary copy complete, now we check if path spliced
   773 00001634 F605(E1C60300)FF    <1>     test byte [spliceFlag], -1
   774 0000163B 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   775                              <1>     ;Else we copy the first two chars only (X:)
   776 0000163D 66A5                <1>     movsw  
   777 0000163F B05C                <1>     mov al, "\"
   778 00001641 AA                  <1>     stosb   ;Store the path separator and increment rdi
   779 00001642 31C0                <1>     xor eax, eax    ;Get cluster 0
   780 00001644 EB1B                <1>     jmp short .prepDirExitSkip
   781                              <1> .prepLoop:
   782 00001646 AC                  <1>     lodsb
   783 00001647 84C0                <1>     test al, al ;If al was null, then we stop
   784 00001649 7403                <1>     jz .prepDirExit
   785 0000164B AA                  <1>     stosb
   786 0000164C EBF8                <1>     jmp short .prepLoop
   787                              <1> .prepDirExit:
   788 0000164E 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   789 00001652 7403                <1>     je .prepDirExitSkipPathsep
   790 00001654 B05C                <1>     mov al, "\"
   791 00001656 AA                  <1>     stosb   ;Store the path separator and increment rdi
   792                              <1> .prepDirExitSkipPathsep:
   793 00001657 488B35(F2C60300)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   794 0000165E 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   795                              <1> .prepDirExitSkip:
   796 00001661 E837000000          <1>     call .prepSetupDirSearchVars
   797 00001666 F8                  <1>     clc ;Clear carry before exiting
   798                              <1> .badDriveExit:
   799 00001667 5E                  <1>     pop rsi
   800                              <1>     return
    18                              <2> %%_ret:
    19 00001668 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   801                              <1> .prepDirJoin:
   802 00001669 51                  <1>     push rcx
   803 0000166A 56                  <1>     push rsi
   804 0000166B 4881C602000000      <1>     add rsi, 2  ;Goto the backslash for the dir
   805 00001672 B902000000          <1>     mov ecx, 2  ;Instantiate ecx to copy X:
   806                              <1> .prepDirJoin1:
   807 00001677 AC                  <1>     lodsb   ;Get the char
   808 00001678 84C0                <1>     test al, al ;Null char?
   809 0000167A 740B                <1>     jz .prepDirJoin2
   810 0000167C E8B1500000          <1>     call swapPathSeparator
   811 00001681 7404                <1>     jz .prepDirJoin2
   812 00001683 FFC1                <1>     inc ecx ;Accrue length to copy
   813 00001685 EBF0                <1>     jmp short .prepDirJoin1
   814                              <1> .prepDirJoin2:
   815 00001687 5E                  <1>     pop rsi ;Return rsi to the start of the buffer
   816 00001688 EB05                <1>     jmp short .prepDirCopy1
   817                              <1> .prepDirSubst:
   818 0000168A 51                  <1>     push rcx
   819 0000168B 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   820                              <1> .prepDirCopy1:
   821 0000168F F3A4                <1>     rep movsb   ;Copy the string over
   822 00001691 59                  <1>     pop rcx
   823 00001692 F605(E1C60300)FF    <1>     test byte [spliceFlag], -1
   824 00001699 75B3                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   825 0000169B EBA9                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   826                              <1> .prepSetupDirSearchVars:
   827                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   828                              <1> ;       rbp = DPB pointer for the device which will do transaction
   829 0000169D 51                  <1>     push rcx
   830 0000169E 31C9                <1>     xor ecx, ecx
   831 000016A0 66890D(68C70300)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   832 000016A7 890D(6AC70300)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   833 000016AD E8A6F5FFFF          <1>     call getFATtype ;Get type of fat
   834 000016B2 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   835 000016B8 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   836                              <1>     ;FAT 32 here
   837 000016BA 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   838 000016BC 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   839 000016BE 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   840                              <1> .psdsvExit:
   841 000016C1 8905(64C70300)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   842 000016C7 8905(60C70300)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   843 000016CD 59                  <1>     pop rcx
   844                              <1>     return 
    18                              <2> %%_ret:
    19 000016CE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   845                              <1> 
   846                              <1> copyPathspec:
   847                              <1> ;1) Copies a path portion from the source buffer to the destination
   848                              <1> ;2) Advances rsi to the next null, \ or /
   849                              <1> ;3) Expands all * to ?'s
   850                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   851                              <1> ;    next path separator and rdi pointing to the previous pathsep
   852                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   853                              <1> ;    with rsi moving to path separator
   854                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   855                              <1> ;
   856                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   857                              <1> ;           rdi = Points to where to store it
   858                              <1> ;
   859                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   860                              <1> ;           rdi = First char of next space to store next pathspec
   861                              <1> ;           al = Last char stored (either \ or NULL)
   862                              <1> ;           CF=NC = OK path
   863                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   864                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   865 000016CF 57                  <1>     push rdi    ;Save the pointer into the user buffer
   866 000016D0 C605(71C40300)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   867 000016D7 488D3D(B9C60300)    <1>     lea rdi, fcbName
   868 000016DE 57                  <1>     push rdi
   869 000016DF B903000000          <1>     mov ecx, 3
   870 000016E4 B820202020          <1>     mov eax, "    " ;Four spaces
   871 000016E9 F3AB                <1>     rep stosd   ;Store 12 spaces
   872 000016EB 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   873                              <1> 
   874 000016EC 488D1D(C4C60300)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   875 000016F3 AC                  <1>     lodsb   ;Get first char from user path in al
   876 000016F4 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   877 000016F6 745B                <1>     je .cpsDots
   878 000016F8 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   879                              <1> ;First char is not a dot, so now check if starts with E5h? 
   880                              <1> ;If so, store 05h in its place! KANJI SUPPORT WOOHOO!
   881 000016FB 3CE5                <1>     cmp al, 0E5h
   882 000016FD 7506                <1>     jne .cpsMainLoop
   883 000016FF 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   884 00001702 B005                <1>     mov al, 05h
   885 00001704 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   886                              <1> .cpsMainLoop:
   887 00001705 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   888 00001706 84C0                <1>     test al, al ;Is it the null char?
   889 00001708 7471                <1>     jz .cpsStore  ;If so, terminate immediately
   890 0000170A E823500000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   891 0000170F 746A                <1>     jz .cpsStore ; and then exit with the final converted pathsep in al
   892 00001711 3C2E                <1>     cmp al, "." ;Filename extension separator
   893 00001713 7420                <1>     je .cpsExtension
   894                              <1>     ;If we have space in the filename, we check to see if the next char is *
   895 00001715 3C2A                <1>     cmp al, "*" ;Wildcard?
   896 00001717 7430                <1>     je .cpsWildcard
   897 00001719 3C3F                <1>     cmp al, "?" ;Good wildcard?
   898 0000171B 740C                <1>     je .store
   899 0000171D E81C500000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   900 00001722 E858510000          <1>     call checkCharValid ; and check it is a valid char
   901 00001727 7408                <1>     je .cpsInvalidChar  ;If it is not valid, replace with 0 and exit
   902                              <1> .store:
   903 00001729 4839DF              <1>     cmp rdi, rbx
   904 0000172C 742D                <1>     je .cpsProcessName ;Skip any non-terminating chars
   905 0000172E AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   906 0000172F EBD4                <1>     jmp short .cpsMainLoop
   907                              <1> .cpsInvalidChar:
   908 00001731 30C0                <1>     xor al, al
   909 00001733 EB26                <1>     jmp short .cpsProcessName
   910                              <1> .cpsExtension:
   911                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   912 00001735 B903000000          <1>     mov ecx, 3 
   913 0000173A 488D3D(C1C60300)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   914 00001741 57                  <1>     push rdi
   915 00001742 B020                <1>     mov al, " "
   916 00001744 F3AA                <1>     rep stosb
   917 00001746 5F                  <1>     pop rdi
   918 00001747 EBBC                <1>     jmp short .cpsMainLoop
   919                              <1> .cpsWildcard:
   920 00001749 B03F                <1>     mov al, "?"
   921                              <1> .cpsWildcardLp:
   922 0000174B AA                  <1>     stosb
   923 0000174C 4839DF              <1>     cmp rdi, rbx
   924 0000174F 75FA                <1>     jne .cpsWildcardLp
   925 00001751 EBB2                <1>     jmp short .cpsMainLoop
   926                              <1> 
   927                              <1> .cpsDots:
   928 00001753 AA                  <1>     stosb   ;Store the first dot
   929 00001754 8A06                <1>     mov al, byte [rsi]
   930 00001756 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
   931 00001758 752B                <1>     jne .oneDotResolve
   932 0000175A A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
   933                              <1> 
   934                              <1> .cpsProcessName:
   935                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
   936 0000175B 84C0                <1>     test al, al 
   937 0000175D 741C                <1>     jz .cpsStore
   938 0000175F E8CE4F0000          <1>     call swapPathSeparator
   939 00001764 7415                <1>     jz .cpsStore
   940                              <1> .cpsFindTerminator:
   941 00001766 AC                  <1>     lodsb
   942 00001767 84C0                <1>     test al, al 
   943 00001769 7410                <1>     jz .cpsStore
   944 0000176B E8C24F0000          <1>     call swapPathSeparator
   945 00001770 7409                <1>     jz .cpsStore
   946 00001772 E808510000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
   947 00001777 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
   948                              <1>     ;If we encounter a terminator, convert to 0
   949 00001779 30C0                <1>     xor al, al
   950                              <1> .cpsStore:
   951 0000177B 488D3D(C4C60300)    <1>     lea rdi, fcbName+11
   952 00001782 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   953 00001783 5F                  <1>     pop rdi
   954                              <1>     return
    18                              <2> %%_ret:
    19 00001784 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   955                              <1> .oneDotResolve:
   956 00001785 488D3D(C4C60300)    <1>     lea rdi, fcbName+11
   957 0000178C AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
   958 0000178D 5F                  <1>     pop rdi ;rdi points to fresh space
   959 0000178E 48FFCF              <1>     dec rdi ;Point to the previous path separator
   960 00001791 AA                  <1>     stosb   ;Store this separator as if it is what we had before
   961                              <1>     return
    18                              <2> %%_ret:
    19 00001792 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   962                              <1> .cpsBadChar:
   963 00001793 30C0                <1>     xor al, al  ;Convert the char to a terminator
   964                              <1>     return
    18                              <2> %%_ret:
    19 00001795 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   965                              <1> 
   966                              <1> searchForPathspec:
   967                              <1>     ;Now search the current directory for this filename
   968                              <1>     ;Find first using SDA ffBlock
   969                              <1>     ;If al = 0, we have final file name or directory name
   970                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
   971                              <1>     ;Output: CF=CY => Error occured
   972                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
   973                              <1>     ;                 FF block somewhat setup
   974                              <1>     ;Preserves rax, rbx, rsi,  rdi
   975 00001796 50                  <1>     push rax
   976 00001797 53                  <1>     push rbx
   977 00001798 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
   978 00001799 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
   979 0000179A 0FB61D(4DC40300)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
   980 000017A1 53                  <1>     push rbx    ;and push it onto the stack
   981                              <1> ;Evaluate whether we are searching for a file for a directory
   982 000017A2 84C0                <1>     test al, al
   983 000017A4 741D                <1>     jz .sfpPNfile
   984                              <1>     ;Fall if subdir
   985 000017A6 488D3D(B9C60300)    <1>     lea rdi, fcbName
   986 000017AD B03F                <1>     mov al, "?" ;Search for wildcard
   987 000017AF B90B000000          <1>     mov ecx, 11
   988 000017B4 F2AE                <1>     repne scasb
   989 000017B6 742C                <1>     je .sfpPnf  ;Path not found if a ? found in the name
   990 000017B8 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
   991 000017BA C605(4DC40300)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
   992 000017C1 EB07                <1>     jmp short .sfpPNMain
   993                              <1> .sfpPNfile:
   994                              <1>     ;Here if we are searching for a file or directory as setup by search init
   995 000017C3 0FB605(DCC60300)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
   996                              <1> .sfpPNMain:
   997 000017CA 803D(12C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
   998 000017D1 7405                <1>     je .sfpPNNoDisk
   999 000017D3 E834F9FFFF          <1>     call searchDir
  1000                              <1> .sfpPNNoDisk:
  1001 000017D8 5B                  <1>     pop rbx
  1002 000017D9 881D(4DC40300)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1003 000017DF 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1004 000017E0 5E                  <1>     pop rsi
  1005 000017E1 5B                  <1>     pop rbx
  1006 000017E2 58                  <1>     pop rax
  1007                              <1>     return
    18                              <2> %%_ret:
    19 000017E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1008                              <1> .sfpPnf:
  1009 000017E4 B803000000          <1>     mov eax, errPnf
  1010                              <1> .sfpErrExit:
  1011 000017E9 F9                  <1>     stc ;Set carry
  1012 000017EA EBEC                <1>     jmp short .sfpPNNoDisk
  1013                              <1> 
  1014                              <1> addPathspecToBuffer:
  1015                              <1> ;Input: fcbName = Qualified pathname portion
  1016                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1017                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1018                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1019                              <1> ;rbx points to the "head of the path"
  1020 000017EC F605(12C60300)FF    <1>     test byte [skipDisk], -1
  1021                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000017F3 75EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1022 000017F5 803D(B9C60300)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1023 000017FC 741F                <1>     je .aptbPNDots
  1024                              <1>     ;Copy filename over to internal buffer
  1025 000017FE 56                  <1>     push rsi    ;Save source pointer position
  1026 000017FF 488D35(B9C60300)    <1>     lea rsi, fcbName
  1027 00001806 E8F7FAFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1028 0000180B 48FFCF              <1>     dec rdi ;Go back to the copied Null char
  1029 0000180E 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1030                              <1> .aptbOkExit:
  1031 0000180F 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the prev pathspec term char in al
  1032 00001812 E81B4F0000          <1>     call swapPathSeparator
  1033 00001817 7402                <1>     jz .aptbPNexit
  1034 00001819 30C0                <1>     xor al, al  ;Set al to 0 else (all other chars are terminators)
  1035                              <1> .aptbPNexit:
  1036 0000181B AA                  <1>     stosb   ;Store this final char (either \ or NULL) and return
  1037                              <1>     return
    18                              <2> %%_ret:
    19 0000181C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1038                              <1> .aptbPNDots:
  1039                              <1> ;For one dot, we leave rdi where it is
  1040                              <1> ;For two dots, we search backwards for the previous "\"
  1041 0000181D 803D(BAC60300)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1042 00001824 F8                  <1>     clc ;Ensure we clear CF if we return via here
  1043 00001825 8A46FF              <1>     mov al, byte [rsi - 1]  ;Get the previous char in al if we return
  1044                              <1>     retne   ;Return with rdi untouched and rsi advanced.
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001828 75F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1045                              <1>     ;Here we have two dots
  1046                              <1>     ;Walk rdi backwards until a \ is found
  1047 0000182A 48FFCF              <1>     dec rdi  ;rdi points to current char. Preceeding it is a \. Skip that
  1048 0000182D 66817FFF3A5C        <1>     cmp word [rdi - 1], ":\" ;IF the char preceeding \ is :, then error out
  1049 00001833 7420                <1>     je .aptbPnf
  1050 00001835 66817FFF5C5C        <1>     cmp word [rdi - 1], "\\" ;Similar net name check
  1051 0000183B 7418                <1>     je .aptbPnf
  1052                              <1> .aptbPNDotsLp:
  1053 0000183D 48FFCF              <1>     dec rdi
  1054 00001840 803F5C              <1>     cmp byte [rdi], "\"
  1055 00001843 75F8                <1>     jne .aptbPNDotsLp  ;Keep looping around until it is a "\"
  1056                              <1>     ;Don't go past the pathsep, since we may need to replace it with a null
  1057 00001845 803D(12C60300)00    <1>     cmp byte [skipDisk], 0  ;Are we in name resolution mode?
  1058 0000184C 74C1                <1>     je .aptbOkExit    ;If clear, we are, so just return
  1059 0000184E 4839DF              <1>     cmp rdi, rbx    ;Are we before the start of the path? (i.e in subst?)
  1060 00001851 7202                <1>     jb .aptbPnf
  1061 00001853 EBBA                <1>     jmp short .aptbOkExit
  1062                              <1> ;.aptbSearchError:
  1063                              <1> ;    mov eax, errFnf
  1064                              <1> ;    jmp short .aptbErrExit
  1065                              <1> .aptbPnf:
  1066 00001855 B803000000          <1>     mov eax, errPnf
  1067                              <1> .aptbErrExit:
  1068 0000185A F9                  <1>     stc ;Set carry
  1069                              <1>     return
    18                              <2> %%_ret:
    19 0000185B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1070                              <1> 
  1071                              <1> checkDevPath:
  1072                              <1> ;Called only if the file/directory was not found on disk.
  1073                              <1> ;Checks if the current fcbname field is "DEV        \" (for the DEV 
  1074                              <1> ; pseudo-directory). If it is, then we parse the next filename in to fcbName
  1075                              <1> ; and check to see if it is a char device. If it is, build a directory
  1076                              <1> ; If it is not, proceed with the request fail.
  1077                              <1> ;
  1078                              <1> ;Input: rsi = Pointer to the next path spec
  1079                              <1> ;Output: CF=NC => Char device found, directory built
  1080                              <1> ;        CF=CY => Char device not found or not searching for dev. Exit.
  1081 0000185C 803D(12C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1082                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001863 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1083 00001865 803D(C4C60300)00    <1>     cmp byte [fcbName + 11], 0  ;If the fcbname is a file name, exit
  1084 0000186C 7459                <1>     je .notOk                      
  1085                              <1>     ;Now check to see if fcbname is the DEV directory (could be real...)
  1086 0000186E 50                  <1>     push rax
  1087 0000186F 48B844455620202020- <1>     mov rax, "DEV     "
  1087 00001878 20                  <1>
  1088 00001879 483905(B9C60300)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1089 00001880 58                  <1>     pop rax
  1090 00001881 7544                <1>     jne .notOk
  1091 00001883 813D(C1C60300)2020- <1>     cmp dword [fcbName + 8], "   \"
  1091 0000188B 205C                <1>
  1092 0000188D 7538                <1>     jne .notOk
  1093                              <1>     ;So the failed directory was DEV, now we search to see if we are
  1094                              <1>     ; looking for a device driver
  1095                              <1>     ;First append it to rdi 
  1096 0000188F B84445565C          <1>     mov eax, "DEV\" 
  1097 00001894 AB                  <1>     stosd   ;RDI now ready to add a device name to it too
  1098 00001895 57                  <1>     push rdi
  1099 00001896 488D3D(B9C60300)    <1>     lea rdi, fcbName
  1100 0000189D E818FAFFFF          <1>     call asciiToFCB    ;Converts the next section into this field
  1101                              <1>     ;Returns in al the terminating char of the source string
  1102 000018A2 5F                  <1>     pop rdi
  1103                              <1>     ;If al is a pathsep, fail
  1104 000018A3 E88A4E0000          <1>     call swapPathSeparator
  1105 000018A8 741D                <1>     jz .notOk   ;Device names cannot be terminated with a \ or /
  1106 000018AA 30C0                <1>     xor al, al
  1107 000018AC 8805(C4C60300)      <1>     mov byte [fcbName + 11], al ;Store terminator in fcbName field
  1108 000018B2 53                  <1>     push rbx
  1109 000018B3 E844000000          <1>     call checkIfCharDevice
  1110 000018B8 5B                  <1>     pop rbx ;Don't need bh yet
  1111 000018B9 720C                <1>     jc .notOk
  1112 000018BB E873000000          <1>     call buildCharDir
  1113                              <1>     ;Here the device was determined to be a char device.
  1114                              <1>     ;A dummy directory entry was built for it.
  1115                              <1>     ;Note to self, If a FFblock is found with found attributes = 40h then...
  1116                              <1>     ; Do not Find Next!
  1117                              <1> .copyName:
  1118 000018C0 E83DFAFFFF          <1>     call FCBToAsciiz    ;Copy the ASCII form of the name over 
  1119 000018C5 F8                  <1>     clc
  1120                              <1>     return
    18                              <2> %%_ret:
    19 000018C6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1121                              <1> .notOk:
  1122 000018C7 B802000000          <1>     mov eax, errFnf
  1123 000018CC F9                  <1>     stc
  1124                              <1>     return
    18                              <2> %%_ret:
    19 000018CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1125                              <1> .charDevSearch:
  1126 000018CE 53                  <1>     push rbx
  1127 000018CF E828000000          <1>     call checkIfCharDevice
  1128 000018D4 5B                  <1>     pop rbx ;Dont need bh yet
  1129 000018D5 72F0                <1>     jc .notOk
  1130 000018D7 E857000000          <1>     call buildCharDir
  1131 000018DC 803D(C4C60300)00    <1>     cmp byte [fcbName+11], 0    ;If this is NOT null terminated, skip replacing
  1132 000018E3 750C                <1>     jne .cds2
  1133 000018E5 807FFE3A            <1>     cmp byte [rdi - 2], ":"
  1134 000018E9 7506                <1>     jne .cds2 ;IF not at root, then skip replacing pathsep
  1135 000018EB 48FFCF              <1>     dec rdi
  1136 000018EE B02F                <1>     mov al, "/" ;Replace \ with "/"
  1137 000018F0 AA                  <1>     stosb   ;Store that and let the dir write the filename
  1138                              <1> .cds2:
  1139 000018F1 803D(12C60300)00    <1>     cmp byte [skipDisk], 0  ;If NOT in DISK search, we exit now with CF=CY
  1140 000018F8 75C6                <1>     jne .copyName    ;Now jump if in disk search
  1141 000018FA F9                  <1>     stc ;Else set CF=CY to pretend not found to write as normal
  1142                              <1>     return
    18                              <2> %%_ret:
    19 000018FB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1143                              <1> 
  1144                              <1> checkIfCharDevice:  ;Int 4Fh AX=1223h
  1145                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1146                              <1> ; device driver chain. 
  1147                              <1> ;Output: CF=CY if not found
  1148                              <1> ;        CF=NC if found
  1149                              <1> ;           BH = Low byte of the device attribute word
  1150 000018FC 50                  <1>     push rax
  1151 000018FD 57                  <1>     push rdi
  1152 000018FE 488B05(B9C60300)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1153 00001905 488D3D(80C00300)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1154                              <1> .checkName:
  1155 0000190C 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1156 00001910 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1157 00001912 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1158 00001915 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1159 00001917 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1160 0000191A 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1161 0000191D 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1162 00001921 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1163                              <1> .walkList:
  1164 00001923 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1165 00001926 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1166 0000192D 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1167 0000192F F9                  <1>     stc
  1168                              <1> .exit:
  1169 00001930 5F                  <1>     pop rdi
  1170 00001931 58                  <1>     pop rax
  1171                              <1>     return
    18                              <2> %%_ret:
    19 00001932 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1172                              <1> 
  1173                              <1> buildCharDir:
  1174                              <1> ;Build a dummy directory entry for the char device in FCBName
  1175                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1176 00001933 803D(12C60300)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1177                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000193A 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1178 0000193C 50                  <1>     push rax
  1179 0000193D 57                  <1>     push rdi
  1180 0000193E C605(C4C60300)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1181 00001945 488D3D(3EC60300)    <1>     lea rdi, curDirCopy
  1182                              <1>     ;Zero the directory copy (32 bytes)
  1183 0000194C 50                  <1>     push rax
  1184 0000194D 51                  <1>     push rcx
  1185 0000194E 57                  <1>     push rdi
  1186 0000194F 31C0                <1>     xor eax, eax    ;Zero rax
  1187 00001951 B904000000          <1>     mov ecx, 4
  1188 00001956 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1189 00001959 5F                  <1>     pop rdi
  1190 0000195A 59                  <1>     pop rcx
  1191 0000195B 58                  <1>     pop rax
  1192 0000195C 488B05(B9C60300)    <1>     mov rax, qword [fcbName]
  1193 00001963 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1194 00001966 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1195 0000196B 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1196 0000196E C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1197                              <1>     ;Get date and time and set the write time in the directory entry
  1198 00001972 E82A110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1199 00001977 E810120000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1200 0000197C 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1201 0000197F 31C0                <1>     xor eax, eax
  1202 00001981 5F                  <1>     pop rdi
  1203 00001982 58                  <1>     pop rax
  1204                              <1>     return
    18                              <2> %%_ret:
    19 00001983 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1205                              <1> 
  1206                              <1> checkFailingComp:
  1207                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1208                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1209                              <1> ;Returns: ZF=ZE => Last path componant
  1210                              <1> ;         ZF=NZ => Not last path componant
  1211 00001984 50                  <1>     push rax
  1212 00001985 8A05(C4C60300)      <1>     mov al, byte [fcbName + 11]
  1213 0000198B 84C0                <1>     test al, al
  1214 0000198D 58                  <1>     pop rax
  1215                              <1>     return
    18                              <2> %%_ret:
    19 0000198E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    26                                  %include "./Source/Kernel/FAT/dirfun.asm"
    27                              <1> ;---------------------------------------------------:
    28                              <1> ;                   KERNEL FUNCTIONS                :
    29                              <1> ;---------------------------------------------------:
    30                              <1> makeDIR:           ;ah = 39h
    31                              <1> ;For make, the path must exist but the final componant must not exist.
    32                              <1> ;Input: rdx = Pointer to ASCIIZ string
    33 0000198F 4889D7              <1>     mov rdi, rdx
    34 00001992 E8D94D0000          <1>     call strlen
    35 00001997 81F940000000        <1>     cmp ecx, 64
    36 0000199D 7607                <1>     jbe .okLength
    37                              <1> .badPath:
    38 0000199F B003                <1>     mov al, errPnf
    39 000019A1 E91A510000          <1>     jmp extErrExit
    40                              <1> .okLength:
    41 000019A6 4889D6              <1>     mov rsi, rdx
    42 000019A9 E82C4E0000          <1>     call checkPathspecOK
    43 000019AE 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
    44                              <1> .pathOk:
    45 000019B0 E8B74E0000          <1>     call scanPathWC
    46 000019B5 72E8                <1>     jc .badPath ;Dont allow wildcards
    47                              <1>     ;Path is ok, now proceed
    48 000019B7 488D3D(02C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    49 000019BE E860FAFFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    50                              <1>     ;If the path exists, exit error
    51 000019C3 0F83F7500000        <1>     jnc extErrExit
    52                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    53 000019C9 E8B6FFFFFF          <1>     call checkFailingComp
    54 000019CE 0F85EC500000        <1>     jnz extErrExit
    55                              <1>     ;So all is well, the new subdirectories name is in fcbName
    56                              <1>     ;The parent dir's directory entry is in the curDirCopy
    57 000019D4 E8D24B0000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    58                              <1>     ;returns in rdi the working cds ptr
    59 000019D9 7312                <1>     jnc .notNet
    60 000019DB B803110000          <1>     mov eax, 1103h
    61 000019E0 CD4F                <1>     int 4fh
    62 000019E2 0F82D8500000        <1>     jc extErrExit
    63 000019E8 E9C5500000          <1>     jmp extGoodExit
    64                              <1> .notNet:
    65 000019ED E883500000          <1>     call dosCrit1Enter
    66                              <1>     ;Current dpb ptr is already set
    67                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    68                              <1>     ;First we make a dummy dir in curDirCopy
    69 000019F2 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
    70 000019F9 488D35(B9C60300)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    71 00001A00 488D3D(3EC60300)    <1>     lea rdi, curDirCopy
    72 00001A07 48A5                <1>     movsq   ;Copy the name over
    73 00001A09 A5                  <1>     movsd
    74 00001A0A E892100000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    75 00001A0F E878110000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    76 00001A14 8905(4CC60300)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    77 00001A1A 8905(54C60300)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    78 00001A20 31C0                <1>     xor eax, eax
    79 00001A22 8905(5AC60300)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    80 00001A28 C605(49C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    81 00001A2F 8B05(60C70300)      <1>     mov eax, dword [dirClustPar]
    82                              <1> .searchForDirSpace:
    83 00001A35 8905(64C70300)      <1>     mov dword [dirClustA], eax
    84 00001A3B 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    85 00001A3D 668905(68C70300)    <1>     mov word [dirSect], ax
    86 00001A44 8905(6AC70300)      <1>     mov dword [dirEntry], eax
    87 00001A4A E8CE040000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    88 00001A4F 7328                <1>     jnc .dirEntryFnd
    89 00001A51 813D(60C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    89 00001A59 0000                <1>
    90 00001A5B 0F844A010000        <1>     je .bad ;Set CF and exit
    91 00001A61 E8F3050000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    92 00001A66 0F823F010000        <1>     jc .bad
    93 00001A6C 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    94 00001A71 0F8434010000        <1>     je .bad
    95                              <1>     ;Else eax = Newly allocated cluster
    96 00001A77 EBBC                <1>     jmp short .searchForDirSpace
    97                              <1> .dirEntryFnd:
    98                              <1> ;rdi points to current directory copy
    99                              <1> ;rsi now points to offset in the buffer to write the entry to
   100                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   101 00001A79 488B1D(1EC70300)    <1>     mov rbx, qword [currBuff]
   102 00001A80 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   103                              <1>      
   104 00001A84 488905(26C70300)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   105 00001A8B 4881C330000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   106 00001A92 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   107 00001A95 668935(2EC70300)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   108                              <1> ;Must now request a cluster and sanitise it
   109 00001A9C E89FF2FFFF          <1>     call startNewChain  ;Get cluster number in eax
   110 00001AA1 0F8209010000        <1>     jc .badExit
   111 00001AA7 E8E0050000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   112 00001AAC 0F82FE000000        <1>     jc .badExit
   113                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   114 00001AB2 668905(58C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   115 00001AB9 C1E810              <1>     shr eax, 10h    ;Get high word low
   116 00001ABC 668905(52C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   117 00001AC3 488B05(26C70300)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   118 00001ACA E8D9F0FFFF          <1>     call getBufForDirNoFile
   119 00001ACF 0F82DB000000        <1>     jc .badExit
   120 00001AD5 0FB705(2EC70300)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   121 00001ADC 488D35(3EC60300)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   122 00001AE3 488D7C0330          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   123 00001AE8 B904000000          <1>     mov ecx, 4
   124 00001AED F348A5              <1>     rep movsq   ;Copy over the buffered directory
   125 00001AF0 E828EFFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   126                              <1>     ;Now need to read in data sector and make two entries . and ..
   127 00001AF5 57                  <1>     push rdi
   128 00001AF6 51                  <1>     push rcx
   129 00001AF7 B90B000000          <1>     mov ecx, 11
   130 00001AFC 488D3D(3EC60300)    <1>     lea rdi, curDirCopy
   131 00001B03 B020                <1>     mov al, " "
   132 00001B05 F3AA                <1>     rep stosb
   133 00001B07 59                  <1>     pop rcx
   134 00001B08 5F                  <1>     pop rdi
   135 00001B09 48B82E000000000000- <1>     mov rax, "."
   135 00001B12 00                  <1>
   136 00001B13 8805(3EC60300)      <1>     mov byte [curDirCopy], al
   137 00001B19 0FB705(58C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   138 00001B20 0FB715(52C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   139 00001B27 C605(49C60300)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
   140 00001B2E C1E210              <1>     shl edx, 10h
   141 00001B31 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   142 00001B33 E88EF1FFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   143 00001B38 E86BF0FFFF          <1>     call getBufForDirNoFile
   144 00001B3D 7271                <1>     jc .badExit
   145                              <1>     ;rbx has buffer pointer now
   146 00001B3F 488D35(3EC60300)    <1>     lea rsi, curDirCopy
   147 00001B46 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   148 00001B4A B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   149 00001B4F F348A5              <1>     rep movsq
   150                              <1>     ;Now create .. entry
   151 00001B52 C605(3FC60300)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   152 00001B59 8B05(60C70300)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   153 00001B5F E8F4F0FFFF          <1>     call getFATtype
   154 00001B64 81F902000000        <1>     cmp ecx, 2
   155 00001B6A 7207                <1>     jb .notFAT32
   156 00001B6C 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   157 00001B6F 7502                <1>     jne .notFAT32
   158 00001B71 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   159                              <1> .notFAT32:
   160 00001B73 668905(58C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   161 00001B7A C1E810              <1>     shr eax, 10h
   162 00001B7D 668905(52C60300)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   163 00001B84 488D35(3EC60300)    <1>     lea rsi, curDirCopy
   164 00001B8B B904000000          <1>     mov ecx, 4
   165 00001B90 F348A5              <1>     rep movsq
   166 00001B93 E885EEFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   167 00001B98 E84EEEFFFF          <1>     call writeThroughBuffers    ;Write the buffers to disk
   168 00001B9D 7211                <1>     jc .badExit
   169                              <1> .okExit:
   170                              <1>     ;AND WE ARE DONE!
   171 00001B9F E8DB4E0000          <1>     call dosCrit1Exit
   172 00001BA4 31C0                <1>     xor eax, eax
   173 00001BA6 E9074F0000          <1>     jmp extGoodExit
   174                              <1> .bad:
   175 00001BAB B805000000          <1>     mov eax, errAccDen
   176                              <1> .badExit:
   177 00001BB0 E814EEFFFF          <1>     call cancelWriteThroughBuffers
   178 00001BB5 E8C54E0000          <1>     call dosCrit1Exit
   179 00001BBA E9014F0000          <1>     jmp extErrExit
   180                              <1> 
   181                              <1> removeDIR:         ;ah = 3Ah
   182 00001BBF 4889D7              <1>     mov rdi, rdx
   183 00001BC2 E8A94B0000          <1>     call strlen
   184 00001BC7 81F940000000        <1>     cmp ecx, 64
   185 00001BCD 7607                <1>     jbe .okLength
   186                              <1> .badPath:
   187 00001BCF B003                <1>     mov al, errPnf
   188 00001BD1 E9EA4E0000          <1>     jmp extErrExit
   189                              <1> .okLength:
   190 00001BD6 4889D6              <1>     mov rsi, rdx
   191 00001BD9 E8FC4B0000          <1>     call checkPathspecOK
   192 00001BDE 72EF                <1>     jc .badPath  ;Don't allow any malformed chars
   193                              <1> .pathOk:
   194 00001BE0 E8874C0000          <1>     call scanPathWC
   195 00001BE5 72E8                <1>     jc .badPath ;Dont allow wildcards
   196                              <1>     ;Path is ok, now proceed
   197 00001BE7 488D3D(02C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   198 00001BEE E82CF8FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   199 00001BF3 72DA                <1>     jc .badPath    ;Path Doesn't exist
   200 00001BF5 E8B1490000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   201 00001BFA 7312                <1>     jnc .notNet
   202 00001BFC B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   203 00001C01 CD4F                <1>     int 4fh
   204 00001C03 0F82B74E0000        <1>     jc extErrExit
   205 00001C09 E9A44E0000          <1>     jmp extGoodExit
   206                              <1> .notNet:
   207 00001C0E E8624E0000          <1>     call dosCrit1Enter
   208 00001C13 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
   209                              <1>     ;Now let use check that our directory is not the CDS currentdir
   210 00001C1A 488B35(F2C60300)    <1>     mov rsi, qword [workingCDS]
   211 00001C21 488D3D(02C50300)    <1>     lea rdi, buffer1
   212 00001C28 E8434B0000          <1>     call strlen ;Get the length of the full qualified name in ecx
   213 00001C2D 66890D(2EC70300)    <1>     mov word [pathLen], cx
   214 00001C34 E84E4B0000          <1>     call strcmp ;Then compare rdi to CDS string
   215 00001C39 750F                <1>     jnz .notEqual
   216 00001C3B B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   217 00001C40 E83A4E0000          <1>     call dosCrit1Exit
   218 00001C45 E9764E0000          <1>     jmp extErrExit
   219                              <1> .notEqual:
   220 00001C4A 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   221                              <1>     ;If the given path length is one more than the backslash offset
   222                              <1>     ; due to the terminating null, then the user is trying to delete the 
   223                              <1>     ; root dir. Fail this.
   224 00001C4D 0FB74F59            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   225 00001C51 FFC1                <1>     inc ecx
   226 00001C53 663B0D(2EC70300)    <1>     cmp cx, word [pathLen]
   227 00001C5A 0F8423010000        <1>     je .accessDenied
   228 00001C60 E8CB020000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   229                              <1>     ;for the entry in the sector we are hoping to delete
   230 00001C65 0FB705(52C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   231 00001C6C C1E010              <1>     shl eax, 10h
   232 00001C6F 0FB71D(58C60300)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   233 00001C76 09D8                <1>     or eax, ebx
   234 00001C78 8905(60C70300)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   235 00001C7E E843F0FFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   236 00001C83 E820EFFFFF          <1>     call getBufForDirNoFile
   237 00001C88 0F82FA000000        <1>     jc .exitBad
   238                              <1>     ;rbx points to buffer
   239 00001C8E 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   240 00001C92 48B82E202020202020- <1>     mov rax, ".       "
   240 00001C9B 20                  <1>
   241 00001C9C 483906              <1>     cmp qword [rsi], rax
   242 00001C9F 0F85DE000000        <1>     jne .accessDenied
   243 00001CA5 B42E                <1>     mov ah, "." ;Screw the partial stall
   244 00001CA7 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   245 00001CAB 0F85D2000000        <1>     jne .accessDenied
   246 00001CB1 4881C620000000      <1>     add rsi, fatDirEntry_size
   247 00001CB8 488D3D(3EC60300)    <1>     lea rdi, curDirCopy
   248 00001CBF B904000000          <1>     mov ecx, 4
   249 00001CC4 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   250                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   251                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   252 00001CC7 488D3D(B9C60300)    <1>     lea rdi, fcbName
   253 00001CCE B03F                <1>     mov al, "?"
   254 00001CD0 B90B000000          <1>     mov ecx, 11
   255 00001CD5 F3AA                <1>     rep stosb   ;Store the pattern to search for
   256 00001CD7 30C0                <1>     xor al, al  ;Store a terminating zero
   257 00001CD9 AA                  <1>     stosb
   258 00001CDA 8B05(60C70300)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   259 00001CE0 50                  <1>     push rax    ;Save on stack temporarily
   260 00001CE1 8905(64C70300)      <1>     mov dword [dirClustA], eax
   261 00001CE7 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   262 00001CE9 668905(68C70300)    <1>     mov word [dirSect], ax
   263 00001CF0 C705(6AC70300)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   263 00001CF8 0000                <1>
   264 00001CFA C605(DCC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   265 00001D01 58                  <1>     pop rax
   266 00001D02 E8BFEFFFFF          <1>     call getStartSectorOfCluster
   267 00001D07 E8BEEEFFFF          <1>     call getBufForDOS   ;Not quite a DOS buffer but we won't be making changes
   268 00001D0C 727A                <1>     jc .exitBad
   269 00001D0E E8D9F4FFFF          <1>     call adjustDosDirBuffer    ;rbx has the buffer pointer for this dir sector
   270 00001D13 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   271 00001D1A 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   272 00001D20 C605(4DC40300)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   273 00001D27 E81DF4FFFF          <1>     call searchDir.rmdirEP
   274 00001D2C 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   275                              <1>     ;Else, this is a empty dir, we can remove it
   276                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   277 00001D2E 488B05(26C70300)    <1>     mov rax, qword [tempSect]
   278 00001D35 E890EEFFFF          <1>     call getBufForDOS
   279 00001D3A 724C                <1>     jc .exitBad
   280 00001D3C E8ABF4FFFF          <1>     call adjustDosDirBuffer
   281 00001D41 0FB705(2EC70300)    <1>     movzx eax, word [entry]
   282 00001D48 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   283 00001D4C 4801C6              <1>     add rsi, rax    
   284 00001D4F 8A05(E8C60300)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   285 00001D55 8806                <1>     mov byte [rsi], al  ;Store delchar there
   286 00001D57 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   287 00001D5B 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   288 00001D5F E8B9ECFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   289 00001D64 C1E210              <1>     shl edx, 10h
   290 00001D67 09D0                <1>     or eax, edx
   291                              <1>     ;Now remove the FAT chain
   292 00001D69 E801F1FFFF          <1>     call unlinkFAT
   293 00001D6E 7218                <1>     jc .exitBad
   294 00001D70 E876ECFFFF          <1>     call writeThroughBuffers
   295 00001D75 7211                <1>     jc .exitBad
   296 00001D77 E8034D0000          <1>     call dosCrit1Exit
   297 00001D7C 31C0                <1>     xor eax, eax
   298 00001D7E E92F4D0000          <1>     jmp extGoodExit
   299                              <1> .accessDenied:
   300 00001D83 B805000000          <1>     mov eax, errAccDen
   301                              <1> .exitBad:
   302 00001D88 E83CECFFFF          <1>     call cancelWriteThroughBuffers
   303 00001D8D F9                  <1>     stc
   304 00001D8E E8EC4C0000          <1>     call dosCrit1Exit
   305 00001D93 E9284D0000          <1>     jmp extErrExit
   306                              <1> 
   307                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   308                              <1> ;Input: rdx = Pointer to ASCIIZ string
   309 00001D98 4889D7              <1>     mov rdi, rdx
   310 00001D9B E8D0490000          <1>     call strlen
   311 00001DA0 81F940000000        <1>     cmp ecx, 64
   312 00001DA6 7607                <1>     jbe .okLength
   313                              <1> .badPath:
   314 00001DA8 B003                <1>     mov al, errPnf
   315 00001DAA E9114D0000          <1>     jmp extErrExit
   316                              <1> .okLength:
   317 00001DAF 4889D6              <1>     mov rsi, rdx
   318 00001DB2 E8234A0000          <1>     call checkPathspecOK
   319 00001DB7 72EF                <1>     jc .badPath  ;Don't allow any malformed chars or wildcards
   320 00001DB9 E8024B0000          <1>     call checkPathNet
   321 00001DBE 74E8                <1>     jz .badPath ;Or Net paths
   322                              <1>     ;Path is ok, now proceed
   323 00001DC0 488D3D(02C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   324 00001DC7 E853F6FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   325 00001DCC 0F82EE4C0000        <1>     jc extErrExit   ;Exit with error code in eax
   326                              <1>     ;The path must've been ok, so now copy the path into the CDS
   327                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   328 00001DD2 488B35(F2C60300)    <1>     mov rsi, qword [workingCDS] ;Copy the CDS to the tmpCDS
   329 00001DD9 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   330 00001DDF 756D                <1>     jnz .net    ;This is done by the redirector for redirector drives
   331 00001DE1 488D3D(5EC60300)    <1>     lea rdi, tmpCDS
   332 00001DE8 B95B000000          <1>     mov ecx, cds_size
   333 00001DED F3A4                <1>     rep movsb
   334                              <1>     ;If the path is longer than 67, call it an invalid path
   335 00001DEF 488D3D(02C50300)    <1>     lea rdi, buffer1
   336 00001DF6 E875490000          <1>     call strlen ;Get the length of this path
   337 00001DFB 81F943000000        <1>     cmp ecx, 67
   338 00001E01 77A5                <1>     ja .badPath
   339 00001E03 4889FE              <1>     mov rsi, rdi    ;Move buffer source to rsi
   340 00001E06 488D3D(5EC60300)    <1>     lea rdi, tmpCDS
   341 00001E0D F3A4                <1>     rep movsb   ;Copy the path over
   342                              <1>     ;Now get the start cluster from the directory copy
   343 00001E0F 0FB715(58C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   344 00001E16 0FB705(52C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   345 00001E1D C1E010              <1>     shl eax, 10h
   346 00001E20 09D0                <1>     or eax, edx ;Add low bits to eax
   347 00001E22 8905(ABC60300)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   348 00001E28 488D35(5EC60300)    <1>     lea rsi, tmpCDS
   349 00001E2F 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS]
   350 00001E36 B95B000000          <1>     mov ecx, cds_size
   351 00001E3B E8354C0000          <1>     call dosCrit1Enter  ;Ensure no task interrupts our copy
   352 00001E40 F3A4                <1>     rep movsb
   353 00001E42 E8384C0000          <1>     call dosCrit1Exit
   354 00001E47 31C0                <1>     xor eax, eax
   355 00001E49 E9644C0000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   356                              <1> .net:
   357                              <1> ;SDA Vars are setup for this request
   358 00001E4E B805110000          <1>     mov eax, 1105h
   359 00001E53 CD4F                <1>     int 4fh
   360 00001E55 0F82654C0000        <1>     jc extErrExit
   361 00001E5B E9524C0000          <1>     jmp extGoodExit
   362                              <1> getCurrentDIR:     ;ah = 47h
   363                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   364                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   365 00001E60 E8104C0000          <1>     call dosCrit1Enter
   366 00001E65 88D0                <1>     mov al, dl  ;Move drive number into al
   367 00001E67 E8D0470000          <1>     call setDrive ;Set drive variables if it is valid and NOT join
   368 00001E6C 730F                <1>     jnc .okDrive
   369                              <1> .badExit:
   370 00001E6E E80C4C0000          <1>     call dosCrit1Exit
   371 00001E73 B80F000000          <1>     mov eax, errBadDrv
   372 00001E78 E9434C0000          <1>     jmp extErrExit
   373                              <1> .okDrive:
   374                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   375 00001E7D 56                  <1>     push rsi
   376 00001E7E 57                  <1>     push rdi
   377 00001E7F 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS ptr in rdi
   378 00001E86 E8EC440000          <1>     call getDiskDPB
   379 00001E8B 5F                  <1>     pop rdi
   380 00001E8C 5E                  <1>     pop rsi
   381 00001E8D 0F822D4C0000        <1>     jc extErrExit
   382                              <1>     ;Here, work needs to be done to ensure that the path built is proper
   383 00001E93 4889F7              <1>     mov rdi, rsi    ;Save destination buffer in rdi
   384 00001E96 488B35(F2C60300)    <1>     mov rsi, qword [workingCDS]  ;Get pointer to current CDS in rsi
   385 00001E9D 31C0                <1>     xor eax, eax
   386 00001E9F FFC8                <1>     dec eax
   387 00001EA1 39464D              <1>     cmp dword [rsi + cds.dStartCluster], eax    ;StartCluster != -1 is all ok
   388 00001EA4 7516                <1>     jne .writePathInBuffer
   389 00001EA6 FFC0                <1>     inc eax
   390 00001EA8 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set to root dir
   391 00001EAB 66817E430000        <1>     cmp word [rsi + cds.wFlags], 0  ;Is this a newly deactivated drive?
   392 00001EB1 74BB                <1>     je .badExit ;TEMP, ERROR IF SO (WAS A SUBST DRIVE)
   393                              <1>     ;Here we now add a terminating null at wBackslashOffset
   394 00001EB3 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   395 00001EB7 C644060100          <1>     mov byte [rsi + rax + 1], 0 ;Store a zero just past the backslash
   396                              <1> .writePathInBuffer:
   397 00001EBC 0FB74659            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   398 00001EC0 FFC0                <1>     inc eax ;Go past the backslash
   399 00001EC2 4801C6              <1>     add rsi, rax ;Add this many chars to rsi to point to first char to copy
   400 00001EC5 E8B5480000          <1>     call strcpy
   401 00001ECA E8B04B0000          <1>     call dosCrit1Exit
   402 00001ECF B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   403 00001ED4 E9D94B0000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   404                              <1> 
   405                              <1> trueNameMultiplex:  ;Int 4Fh, AX=1221h
   406 00001ED9 50                  <1>     push rax
   407 00001EDA B800600000          <1>     mov eax, 6000h
   408 00001EDF CD41                <1>     int 41h
   409 00001EE1 58                  <1>     pop rax
   410                              <1>     return
    18                              <2> %%_ret:
    19 00001EE2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   411                              <1>     
   412                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   413                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   414 00001EE3 E8F2480000          <1>     call checkPathspecOK    ;This preserves rsi
   415 00001EE8 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   416 00001EEA 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   417                              <1> .badPath:
   418 00001EEC B803000000          <1>     mov eax, errPnf
   419 00001EF1 E9CA4B0000          <1>     jmp extErrExit
   420                              <1> .pathspecOk:
   421 00001EF6 57                  <1>     push rdi    ;Save the destination
   422 00001EF7 488D3D(02C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   423 00001EFE E8D5F4FFFF          <1>     call canonicaliseFileName
   424 00001F03 5F                  <1>     pop rdi
   425 00001F04 0F82B64B0000        <1>     jc extErrExit
   426 00001F0A 488D35(02C50300)    <1>     lea rsi, buffer1
   427 00001F11 E869480000          <1>     call strcpy
   428 00001F16 31C0                <1>     xor eax, eax
   429 00001F18 E9954B0000          <1>     jmp extGoodExit
   430                              <1> 
   431                              <1> ;-----------------------------------
   432                              <1> ;    General Directory Routines    :
   433                              <1> ;-----------------------------------
   434                              <1> 
   435                              <1> findFreeDiskDirEntry:
   436                              <1> ;Find a space in the directory we are searching for a directory entry
   437                              <1> ;Accept first entry starting with a 0E5h or 00h
   438                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   439                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   440                              <1> ; be called for CDS's that are NOT net CDS's).
   441                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   442                              <1> ;       Directory vars must be set up for the directory we are searching in
   443                              <1> ;Output: CF=CY => Error, eax has error code
   444                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   445 00001F1D 8A05(E8C60300)      <1>     mov al, byte [delChar]
   446 00001F23 8805(B9C60300)      <1>     mov byte [fcbName], al
   447 00001F29 E8DEF1FFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   448                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00001F2E 72B2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   449                              <1> ;Free entry found, dir variables are set for the free entry. 
   450                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   451                              <1> getDiskDirectoryEntry:
   452                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   453                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   454                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   455                              <1> ;        qword [tempSect] = Disk sector number of directory
   456                              <1> ;        word [entry] = 32 byte offset into sector
   457                              <1> ;        CF=CY => Error, exit 
   458 00001F30 53                  <1>     push rbx
   459 00001F31 8B05(64C70300)      <1>     mov eax, dword [dirClustA]  
   460                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   461                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   462 00001F37 0FB71D(68C70300)    <1>     movzx ebx, word [dirSect]
   463 00001F3E 85C0                <1>     test eax, eax
   464 00001F40 7407                <1>     jz .skipCluster
   465 00001F42 E87FEDFFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   466 00001F47 EB0C                <1>     jmp short .skipOldFat
   467                              <1> .skipCluster:
   468 00001F49 55                  <1>     push rbp
   469 00001F4A 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
   470 00001F51 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   471 00001F54 5D                  <1>     pop rbp
   472                              <1> .skipOldFat:
   473 00001F55 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   474 00001F58 488905(26C70300)    <1>     mov qword [tempSect], rax   ;Save this sector number
   475 00001F5F E866ECFFFF          <1>     call getBufForDOS   ;Get buffer for DOS in rbx
   476 00001F64 5B                  <1>     pop rbx
   477                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00001F65 7301                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00001F67 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   478 00001F68 53                  <1>     push rbx
   479 00001F69 488B1D(1EC70300)    <1>     mov rbx, qword [currBuff]
   480 00001F70 E877F2FFFF          <1>     call adjustDosDirBuffer ;Change buffer to Dir buffer
   481                              <1>     ;Above function gets data buffer ptr in rsi
   482 00001F75 0FB705(68C70300)    <1>     movzx eax, word [dirSect]   ;Get the sector in which the offset lies
   483 00001F7C 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   484 00001F80 F7E3                <1>     mul ebx ;Multiply these two words so eax has number of bytes to
   485                              <1>     ; the current sector
   486 00001F82 C1E805              <1>     shr eax, 5  ;Divide by 32 to get the number of dir entries we are skipping
   487 00001F85 8B1D(6AC70300)      <1>     mov ebx, dword [dirEntry]   ;Get offset into dir file cluster
   488 00001F8B 29C3                <1>     sub ebx, eax    ;Now ebx has the dir entry offset in the current sector
   489 00001F8D C1E305              <1>     shl ebx, 5  ;Multiply by 32 to get byte offset
   490 00001F90 66891D(2EC70300)    <1>     mov word [entry], bx  ;Save 32 byte offset into sector
   491 00001F97 4801DE              <1>     add rsi, rbx    ;rsi now points to the entry
   492 00001F9A 5B                  <1>     pop rbx
   493                              <1>     return
    18                              <2> %%_ret:
    19 00001F9B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   494                              <1> 
   495                              <1> 
   496                              <1> updateDirectoryEntryForFile:    
   497                              <1> ;Updates the directory entry for disk files
   498                              <1> ;Called with:
   499                              <1> ;   [workingDPB] = DPB pointer for the disk device
   500                              <1> ;   [currentSFT] = Current SFT pointer
   501 00001F9C 50                  <1>     push rax
   502 00001F9D 53                  <1>     push rbx
   503 00001F9E 57                  <1>     push rdi
   504 00001F9F 55                  <1>     push rbp
   505                              <1> 
   506 00001FA0 E8D04A0000          <1>     call dosCrit1Enter
   507 00001FA5 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
   508 00001FAC 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
   509 00001FB3 66F74705C000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush | devCharDev
   510 00001FB9 0F8581000000        <1>     jnz .exit   ;If it is a char dev or hasn't been written to yet, skip this
   511 00001FBF 66F747050040        <1>     test word [rdi + sft.wDeviceInfo], blokNoDTonClose
   512 00001FC5 751B                <1>     jnz .skipDT
   513                              <1>     ;Get date and time words and add them to the directory entry
   514 00001FC7 E8D50A0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   515                              <1>     ;Build date and time words
   516 00001FCC E8BB0B0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   517                              <1>     ;Update SFT fields
   518 00001FD1 66894713            <1>     mov word [rdi + sft.wTime], ax
   519 00001FD5 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   520 00001FD8 66894715            <1>     mov word [rdi + sft.wDate], ax
   521 00001FDC 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;We update DT, so flush
   522                              <1> .skipDT:
   523                              <1> ;Before we read the dir sector in, if we never wrote to the disk
   524                              <1> ; we skip all of this
   525 00001FE2 66F747054000        <1>     test word [rdi + sft.wDeviceInfo], blokFileNoFlush
   526 00001FE8 7556                <1>     jnz .exit ;If the file was never written to, don't bother updating DIR data
   527 00001FEA 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   528 00001FEE E8E5EBFFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx
   529 00001FF3 7255                <1>     jc .exitBad    ;If an error is to be returned from, we skip the rest of this
   530                              <1>     ;Now we write the changes to the sector
   531                              <1>     ;Mark sector as referenced and dirty! Ready to be flushed!
   532 00001FF5 488D6B30            <1>     lea rbp, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   533 00001FF9 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   534 00001FFD C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   535 00002000 4801DD              <1>     add rbp, rbx    ;Move rbp to point to the directory entry
   536 00002003 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
   537 00002006 89451C              <1>     mov dword [rbp + fatDirEntry.fileSize], eax ;And update field
   538 00002009 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
   539 0000200D 66894516            <1>     mov word [rbp + fatDirEntry.wrtTime], ax    ;And update field
   540 00002011 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
   541 00002015 66894518            <1>     mov word [rbp + fatDirEntry.wrtDate], ax    ;And update field
   542 00002019 66894512            <1>     mov word [rbp + fatDirEntry.lastAccDat], ax    ;And update final field
   543 0000201D 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
   544 00002020 6689451A            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusLo], ax
   545 00002024 C1E810              <1>     shr eax, 10h
   546 00002027 66894514            <1>     mov word [rbp + fatDirEntry + fatDirEntry.fstClusHi], ax
   547                              <1>     ;Directory sector updated and marked to be flushed to disk!
   548 0000202B 31C0                <1>     xor eax, eax
   549 0000202D FF15(14C10300)      <1>     call qword [updateDirShare]
   550 00002033 F8                  <1>     clc ;Clear CF as updateDirShare Defaults to CF=CY
   551 00002034 E8E4E9FFFF          <1>     call markBufferDirty
   552 00002039 E8ADE9FFFF          <1>     call writeThroughBuffers
   553 0000203E 720A                <1>     jc .exitBad
   554                              <1> .exit:
   555 00002040 E83A4A0000          <1>     call dosCrit1Exit
   556 00002045 5D                  <1>     pop rbp
   557 00002046 5F                  <1>     pop rdi
   558 00002047 5B                  <1>     pop rbx
   559 00002048 58                  <1>     pop rax
   560                              <1>     return
    18                              <2> %%_ret:
    19 00002049 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   561                              <1> .exitBad:
   562 0000204A E87AE9FFFF          <1>     call cancelWriteThroughBuffers
   563 0000204F 9C                  <1>     pushfq  ;Save the state for if we come here from a fail
   564 00002050 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush
   565 00002056 9D                  <1>     popfq
   566 00002057 EBE7                <1>     jmp short .exit
   567                              <1>     
   568                              <1> growDirectory:
   569                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   570                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   571                              <1> ;                 eax = New Cluster number
   572                              <1> ;               TWO NON CF ERROR CASES.
   573                              <1> ;               If eax = -1 => disk full!
   574                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   575                              <1> ;        CF=CY => Something went wrong. Rip. 
   576 00002059 53                  <1>     push rbx
   577 0000205A 51                  <1>     push rcx
   578 0000205B 8B05(60C70300)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   579 00002061 85C0                <1>     test eax, eax
   580 00002063 7424                <1>     jz .exit
   581 00002065 E889ECFFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   582 0000206A 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   583 0000206C B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   584 00002071 E8EBECFFFF          <1>     call allocateClusters   ;ebx has last cluster value
   585 00002076 7211                <1>     jc .exit
   586 00002078 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   587 0000207A E82BEEFFFF          <1>     call readFAT
   588 0000207F 7208                <1>     jc .exit
   589 00002081 E806000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   590 00002086 7201                <1>     jc .exit
   591 00002088 F8                  <1>     clc
   592                              <1> .exit:
   593 00002089 59                  <1>     pop rcx
   594 0000208A 5B                  <1>     pop rbx
   595                              <1>     return   
    18                              <2> %%_ret:
    19 0000208B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   596                              <1> sanitiseCluster:
   597                              <1> ;Sanitises the cluster in eax to all zeros
   598                              <1> ;Does not move file pointers
   599                              <1> ;Currently, is only called to sanitise subdirectory clusters
   600                              <1> ;Input: eax = Cluster number
   601                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   602                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   603                              <1> ;        If CF=CY => Error, exit
   604 0000208C 50                  <1>     push rax
   605 0000208D 53                  <1>     push rbx
   606 0000208E 51                  <1>     push rcx
   607 0000208F 52                  <1>     push rdx
   608 00002090 56                  <1>     push rsi
   609 00002091 55                  <1>     push rbp
   610 00002092 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
   611 00002099 E828ECFFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   612 0000209E 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   613 000020A2 FFC2                <1>     inc edx ;Make it a count of sectors
   614                              <1> .getSectorInCluster:
   615 000020A4 E8E2EAFFFF          <1>     call getBufForDataNoFile  ;Get a generic data buffer in rbx
   616 000020A9 721E                <1>     jc .exitBad
   617 000020AB 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   618 000020AF 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   619 000020B3 31C0                <1>     xor eax, eax
   620 000020B5 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   621 000020B7 E861E9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   622                              <1> 
   623 000020BC FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   624 000020BE 740A                <1>     jz .exit    ;Jump if we done
   625 000020C0 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   626 000020C4 48FFC0              <1>     inc rax ;Goto next sector in cluster
   627 000020C7 EBDB                <1>     jmp short .getSectorInCluster
   628                              <1> .exitBad:
   629 000020C9 F9                  <1>     stc
   630                              <1> .exit:
   631 000020CA 5D                  <1>     pop rbp
   632 000020CB 5E                  <1>     pop rsi
   633 000020CC 5A                  <1>     pop rdx
   634 000020CD 59                  <1>     pop rcx
   635 000020CE 5B                  <1>     pop rbx
   636 000020CF 58                  <1>     pop rax
   637                              <1>     return
    18                              <2> %%_ret:
    19 000020D0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    27                                  %include "./Source/Kernel/FileIO/devio.asm"
    28                              <1> ;This file contains the primitive dev io function, which will be called 
    29                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
    30                              <1> ; make requests for device IO.
    31                              <1> 
    32                              <1> mainCharIO:
    33                              <1> ;This is the main IO clearing function for Char IO.
    34                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
    35                              <1> ; Uses only the secdReqHdr and the singleIObyt as the transfer buffer
    36                              <1> ;
    37                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    38                              <1> ;       ah = {0,..., 5}, a subfunction number
    39                              <1> ;       Function 0: Read Char (drvREAD)
    40                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    41                              <1> ;       Function 2: Write Char (drvWrite)
    42                              <1> ; In the case the below functions are called for Disk/Net files
    43                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    44                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    45                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    46                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    47                              <1> ;
    48                              <1> ; If and only if ah = 02h, al = Char to write to device
    49                              <1> ;
    50                              <1> ;
    51                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    52                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    53                              <1> ;                                           ZF = NZ => Device ready (not busy)
    54                              <1> ;                                               If ND read, AL = Next Char
    55                              <1> ; For Files/Net:
    56                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    57                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    58                              <1> ;           For Read and ND Read:
    59                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    60                              <1> ;               Read returns ^Z on EOF.
    61                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    62                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    63                              <1> ;
    64                              <1> ;All registers preserved EXCEPT for ax and flags
    65                              <1> 
    66                              <1> ;Reference Request Header
    67                              <1> ;Common Section:
    68                              <1> ;    .hdrlen resb 1  ;Length of the request header
    69                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    70                              <1> ;    .cmdcde resb 1  ;Command code
    71                              <1> ;    .status resw 1  ;Status word
    72                              <1> ;    .devptr resq 1  ;Reserved. Unused
    73                              <1> ;Below used by calls 0,1,2,5
    74                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    75                              <1> ;Below used by calls 0,2
    76                              <1> ;    .bufptr resq 1
    77                              <1> ;    .tfrlen resd 1
    78                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    79                              <1> ;    .strtsc resq 1
    80                              <1> ;    .desptr resq 1
    81                              <1> 
    82                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    83 000020D1 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    84 000020D2 488D1D(00C50300)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    85 000020D9 48891D(89C40300)    <1>     mov qword [secdReqHdr + ioReqPkt.bufptr], rbx
    86 000020E0 5B                  <1>     pop rbx
    87 000020E1 C705(91C40300)0100- <1>     mov dword [secdReqHdr + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    87 000020E9 0000                <1>
    88 000020EB 668905(00C50300)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    89 000020F2 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    90 000020F8 0F85A1000000        <1>     jnz .notChar
    91 000020FE 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    92 00002104 0F8495000000        <1>     jz .notChar
    93                              <1> ;Char devices only here
    94 0000210A E84F490000          <1>     call dosPushRegs    ;Save context here
    95 0000210F 488D1D2CDFFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    96 00002116 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    97 00002119 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    98 0000211C 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    99 0000211F 890D(7BC40300)      <1>     mov dword [secdReqHdr], ecx ;First three entries map to first three entries
   100                              <1>     ;Now set up cx for status word
   101 00002125 31C9                <1>     xor ecx, ecx
   102 00002127 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
   103 0000212A 7506                <1>     jne .skipBsySet
   104 0000212C 81C900020000        <1>     or ecx, drvBsyStatus
   105                              <1> .skipBsySet:
   106 00002132 66870D(7EC40300)    <1>     xchg cx, word [secdReqHdr + drvReqHdr.status] ;Swap error flags with status
   107                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
   108 00002139 488D1D(7BC40300)    <1>     lea rbx, secdReqHdr
   109 00002140 E8E4400000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
   110 00002145 668B3D(7EC40300)    <1>     mov di, word [secdReqHdr + drvReqHdr.status]    ;Get status
   111 0000214C F7C700800000        <1>     test edi, drvErrStatus
   112 00002152 752D                <1>     jnz .error
   113                              <1> .ignoreRet:
   114 00002154 803D(7DC40300)05    <1>     cmp byte [secdReqHdr + drvReqHdr.cmdcde], drvNONDESTREAD
   115 0000215B 750C                <1>     jne .notNDRead
   116 0000215D 8A05(88C40300)      <1>     mov al, byte [secdReqHdr + ndInNoWaitPkt.retbyt]    ;Get request byte
   117 00002163 8805(00C50300)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
   118                              <1> .notNDRead:
   119 00002169 8A25(7FC40300)      <1>     mov ah, byte [secdReqHdr + drvReqHdr.status + 1]  ;Get hibyte of status word
   120 0000216F F6D4                <1>     not ah
   121 00002171 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
   122 00002174 E8CE480000          <1>     call dosPopRegs ;Get back the context
   123 00002179 668B05(00C50300)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
   124                              <1>     return ;Return to caller
    18                              <2> %%_ret:
    19 00002180 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   125                              <1> .error:
   126                              <1>     ;cl has flags
   127 00002181 88CC                <1>     mov ah, cl
   128 00002183 E8D63B0000          <1>     call charDevErr
   129 00002188 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   130 0000218A 750A                <1>     jne .errorIgnore
   131                              <1>     ;Fallthrough => Retry
   132 0000218C E8B6480000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   133 00002191 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   134                              <1> .errorIgnore:
   135                              <1>     ;Clear the busy bit in the status word
   136 00002196 8025(7FC40300)FD    <1>     and byte [secdReqHdr + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   137 0000219D EBB5                <1>     jmp short .ignoreRet
   138                              <1> .notChar:
   139                              <1> ;Just return with ZF=NZ for now
   140 0000219F 50                  <1>     push rax
   141 000021A0 31C0                <1>     xor eax, eax
   142 000021A2 FEC0                <1>     inc al
   143 000021A4 58                  <1>     pop rax
   144                              <1>     return
    18                              <2> %%_ret:
    19 000021A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   145                              <1> 
   146                              <1> openSFT:
   147                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   148                              <1> ;Input: rdi = SFT pointer
   149 000021A6 E8B3480000          <1>     call dosPushRegs
   150 000021AB B00D                <1>     mov al, drvOPEN
   151 000021AD EB07                <1>     jmp short openCloseCommon
   152                              <1> closeSFT:
   153                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   154 000021AF E8AA480000          <1>     call dosPushRegs
   155 000021B4 B00E                <1>     mov al, drvCLOSE
   156                              <1> openCloseCommon:
   157                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   158 000021B6 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   159 000021BC 7469                <1>     jz .exit    ;Exit if so
   160 000021BE F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   161 000021C2 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   162 000021C6 7512                <1>     jnz .charDev
   163                              <1>     ;Here a disk drive, rdi is a DPB ptr
   164 000021C8 803D(B9C30300)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   165 000021CF 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   166 000021D1 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   167 000021D4 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   168 000021D6 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   169                              <1> .charDev:
   170 000021DA 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   171 000021E0 7445                <1>     jz .exit    ;No, exit!
   172 000021E2 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   173 000021E5 488D1D(A5C40300)    <1>     lea rbx, primReqHdr ;Get the primary request header space in rbx
   174 000021EC 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   175                              <1> .retryEP:
   176 000021EF 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   177 000021F2 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   178 000021F5 50                  <1>     push rax    ;Save the dword
   179 000021F6 E832400000          <1>     call goDriver
   180 000021FB 0FB73D(A8C40300)    <1>     movzx edi, word [primReqHdr + drvReqHdr.status] ;Get the status
   181 00002202 F7C700800000        <1>     test edi, drvErrStatus
   182 00002208 741C                <1>     jz .exitPop
   183                              <1>     ;Error here, check if char or block drive
   184 0000220A 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   185 00002210 7404                <1>     jz .blockError
   186                              <1>     ;Char error here
   187 00002212 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   188 00002214 EB04                <1>     jmp short .errorCmn
   189                              <1> .blockError:
   190 00002216 88C8                <1>     mov al, cl  ;Move drive number into al
   191 00002218 B406                <1>     mov ah, critData    ;Data on block dev error
   192                              <1> .errorCmn:
   193                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   194 0000221A E83F3B0000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   195 0000221F B001                <1>     mov al, critRetry   ;al returns user response
   196 00002221 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   197 00002223 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   198 00002224 EBC9                <1>     jmp short .retryEP  ;Reset
   199                              <1> .exitPop:
   200 00002226 58                  <1>     pop rax    
   201                              <1> .exit:
   202 00002227 E81B480000          <1>     call dosPopRegs
   203                              <1>     return
    18                              <2> %%_ret:
    19 0000222C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    28                                  %include "./Source/Kernel/FileIO/charFunc.asm"
    29                              <1> ;-----------------------------------------------------------------------:
    30                              <1> ;                  DOS default char functions live here                 :
    31                              <1> ;                                                                       :
    32                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
    33                              <1> ;                                                                       :
    34                              <1> ;Rules for the naming of the DOS functions                              :
    35                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
    36                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
    37                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    38                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    39                              <1> ;                                                                       :
    40                              <1> ;-----------------------------------------------------------------------:
    41                              <1> 
    42                              <1> charIn_BE:     ;ah = 01h
    43                              <1> ;Return char that has been read and echoed in al
    44 0000222D E866010000          <1>     call charIn_B
    45 00002232 50                  <1>     push rax
    46 00002233 E804000000          <1>     call charOut_B.in    ;Output it to screen
    47 00002238 58                  <1>     pop rax
    48                              <1>     return
    18                              <2> %%_ret:
    19 00002239 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    49                              <1> 
    50                              <1> charOut_B:       ;ah = 02h
    51                              <1> ;Bspace is regular cursor left, does not insert a blank
    52 0000223A 88D0                <1>     mov al, dl
    53                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 4Fh, AX=1205h
    54 0000223C 3C20                <1>     cmp al, asciiCaret
    55 0000223E 7277                <1>     jb .control
    56 00002240 3C7F                <1>     cmp al, DEL ;DEL char?
    57 00002242 7406                <1>     je .skipCurs
    58 00002244 FE05(B1C20300)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    59                              <1> .skipCurs:
    60 0000224A FE05(B7C30300)      <1>     inc byte [vConErr]   ;Increment 4 char error checker
    61 00002250 8025(B7C30300)03    <1>     and byte [vConErr], 3
    62 00002257 56                  <1>     push rsi
    63 00002258 7507                <1>     jnz .skipErrorCheck
    64 0000225A 50                  <1>     push rax
    65 0000225B E884020000          <1>     call vConCtrlCheck
    66 00002260 58                  <1>     pop rax
    67                              <1> .skipErrorCheck:
    68 00002261 E80C020000          <1>     call outputOnStdout
    69 00002266 5E                  <1>     pop rsi
    70 00002267 F605(B4C30300)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    71                              <1>     retz    ;If zero, no echo
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000226E 74C9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    72 00002270 53                  <1>     push rbx
    73 00002271 56                  <1>     push rsi
    74 00002272 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    75 00002277 E82F030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    76 0000227C 7236                <1>     jc .exitPrintEcho
    77                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    78 0000227E 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    79 00002282 F7C300800000        <1>     test ebx, devRedirDev
    80 00002288 752A                <1>     jnz .exitPrintEcho  ;Exit if STDOUT is redir
    81 0000228A F7C380000000        <1>     test ebx, devCharDev
    82 00002290 7422                <1>     jz .exitPrintEcho
    83 00002292 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    84 00002297 E80F030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    85 0000229C 7216                <1>     jc .exitPrintEcho   ;Exit if handle closed
    86 0000229E 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    87 000022A4 7407                <1>     jz .netSpool
    88 000022A6 E8FB010000          <1>     call outputOnSFT
    89 000022AB EB07                <1>     jmp short .exitPrintEcho
    90                              <1> .netSpool:
    91 000022AD C605(B4C30300)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    92                              <1> .exitPrintEcho:
    93 000022B4 5E                  <1>     pop rsi
    94 000022B5 5B                  <1>     pop rbx
    95                              <1>     return
    18                              <2> %%_ret:
    19 000022B6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    96                              <1> .control:
    97 000022B7 3C0D                <1>     cmp al, CR
    98 000022B9 7425                <1>     je .newline
    99 000022BB 3C08                <1>     cmp al, BSP
   100 000022BD 742D                <1>     je .back
   101 000022BF 3C09                <1>     cmp al, TAB
   102 000022C1 7587                <1>     jne .skipCurs   ;Treat as normal
   103                              <1>     ;TAB key here
   104                              <1> .tab:
   105 000022C3 51                  <1>     push rcx
   106 000022C4 0FB60D(B1C20300)    <1>     movzx ecx, byte [vConCursPos]
   107 000022CB 80C9F8              <1>     or cl, ~7
   108 000022CE F6D9                <1>     neg cl
   109 000022D0 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
   110                              <1> .tabloop:
   111 000022D3 B020                <1>     mov al, SPC
   112 000022D5 E862FFFFFF          <1>     call charOut_B.in   ;Output the char
   113 000022DA FEC9                <1>     dec cl
   114 000022DC 75F5                <1>     jnz .tabloop
   115                              <1> .stopTab:
   116 000022DE 59                  <1>     pop rcx
   117                              <1>     return ;Exit
    18                              <2> %%_ret:
    19 000022DF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   118                              <1> .newline:
   119 000022E0 C605(B1C20300)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
   120 000022E7 E95EFFFFFF          <1>     jmp .skipCurs   ;And echo 
   121                              <1> .back:
   122 000022EC FE0D(B1C20300)      <1>     dec byte [vConCursPos]
   123 000022F2 E953FFFFFF          <1>     jmp .skipCurs   ;And echo
   124                              <1> 
   125                              <1> auxIn_B:        ;ah = 03h
   126 000022F7 E8E8010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
   127 000022FC BB03000000          <1>     mov ebx, 3
   128 00002301 E8A5020000          <1>     call getCharDevSFT
   129                              <1>     retc    ;Return if CF set (handle 3 is closed)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002306 72D7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   130                              <1> .auxloop:
   131 00002308 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
   132 0000230A E8C2FDFFFF          <1>     call mainCharIO
   133 0000230F 7408                <1>     jz .signalLoop
   134 00002311 30E4                <1>     xor ah, ah  ;Read the char in
   135 00002313 E8B9FDFFFF          <1>     call mainCharIO
   136                              <1>     return
    18                              <2> %%_ret:
    19 00002318 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   137                              <1> .signalLoop:
   138 00002319 E8A3010000          <1>     call callInt48h
   139 0000231E EBE8                <1>     jmp short .auxloop
   140                              <1> 
   141                              <1> auxOut_B:       ;ah = 04h
   142 00002320 53                  <1>     push rbx
   143 00002321 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   144 00002326 EB06                <1>     jmp short auxOutCmn
   145                              <1> prnOut_B:       ;ah = 05h
   146 00002328 53                  <1>     push rbx
   147 00002329 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   148                              <1> auxOutCmn: ;Auxilliary output device common 
   149 0000232E 88D0                <1>     mov al, dl  ;Get the char into al
   150 00002330 50                  <1>     push rax
   151 00002331 E8AE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   152 00002336 58                  <1>     pop rax
   153 00002337 56                  <1>     push rsi
   154 00002338 E862010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   155 0000233D 5E                  <1>     pop rsi
   156 0000233E 5B                  <1>     pop rbx
   157                              <1>     return
    18                              <2> %%_ret:
    19 0000233F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> directConIO:    ;ah = 06h
   160 00002340 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   161 00002342 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   162 00002344 0F8528010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   163                              <1> ;Here is the read char direct function
   164 0000234A 31DB                <1>     xor ebx, ebx    
   165 0000234C E85A020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   166                              <1>     retc    ;Return error if ebx closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002351 72EC                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   167 00002353 488B2D(5FC40300)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   168 0000235A B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   169 0000235C E870FDFFFF          <1>     call mainCharIO
   170 00002361 E85B010000          <1>     call callInt48h ;This preserves flags so call here!
   171 00002366 7507                <1>     jnz .readChar
   172 00002368 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   173 0000236C 30C0                <1>     xor al, al  ;Set caller return code to 0
   174                              <1>     return
    18                              <2> %%_ret:
    19 0000236E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   175                              <1> .readChar:
   176 0000236F 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   177                              <1>     ;Fallthrough here to get the char at STDIN
   178                              <1> charIn:         ;ah = 07h
   179                              <1> ;Return char in al from STDIN without waiting
   180 00002373 31DB                <1>     xor ebx, ebx
   181 00002375 E831020000          <1>     call getCharDevSFT
   182                              <1>     retc
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000237A 72F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   183 0000237C B401                <1>     mov ah, 01  ;ND read for char
   184 0000237E E84EFDFFFF          <1>     call mainCharIO
   185 00002383 750B                <1>     jnz .getChar
   186 00002385 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   187 00002387 CD4A                <1>     int 4Ah
   188 00002389 E833010000          <1>     call callInt48h
   189 0000238E EBE3                <1>     jmp short charIn    ;Loop again awaiting the char
   190                              <1> .getChar:
   191                              <1>     ;Get the char in al and exit
   192 00002390 30E4                <1>     xor ah, ah
   193 00002392 E83AFDFFFF          <1>     call mainCharIO
   194                              <1>     return
    18                              <2> %%_ret:
    19 00002397 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   195                              <1> charIn_B:       ;ah = 08h
   196                              <1> ;Return char in al from STDIN
   197 00002398 56                  <1>     push rsi
   198                              <1> .readAgain:
   199 00002399 E846010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   200                              <1>     ;Also sets rsi to point to the device SFT for 
   201 0000239E 7543                <1>     jnz .pullChar
   202 000023A0 803D(C2D90300)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   203 000023A7 7507                <1>     jne .skiplookahead
   204 000023A9 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   205 000023AB E821FDFFFF          <1>     call mainCharIO
   206                              <1> .skiplookahead:
   207 000023B0 B484                <1>     mov ah, 84h
   208 000023B2 CD4A                <1>     int 4ah ;Multitasking keyboard loop
   209 000023B4 66813D(A3DA0300)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   209 000023BC FF                  <1>
   210 000023BD 751B                <1>     jne .skipClockRead
   211 000023BF E89A460000          <1>     call dosPushRegs
   212 000023C4 F8                  <1>     clc ;Clear CF, write primary header to backup
   213 000023C5 E882000000          <1>     call swapPrimaryHeader
   214 000023CA E8D2060000          <1>     call readDateTimeRecord
   215 000023CF F9                  <1>     stc ;Set CF, write backup to primary header
   216 000023D0 E877000000          <1>     call swapPrimaryHeader
   217 000023D5 E86D460000          <1>     call dosPopRegs
   218                              <1> .skipClockRead:
   219 000023DA 66FF05(A3DA0300)    <1>     inc word [keybTicks]
   220 000023E1 EBB6                <1>     jmp short .readAgain
   221                              <1> .pullChar:
   222 000023E3 30E4                <1>     xor ah, ah
   223 000023E5 E8E7FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   224 000023EA 5E                  <1>     pop rsi
   225 000023EB 3C00                <1>     cmp al, NUL ;Is this the null char?
   226 000023ED 7507                <1>     jne .exit
   227                              <1>     ;We are mid extended ascii, prevent printer toggling
   228 000023EF C605(A2DA0300)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   229                              <1> .exit:
   230                              <1>     return
    18                              <2> %%_ret:
    19 000023F6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> printString_B:      ;ah = 09h
   233 000023F7 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   234                              <1> .ps0:
   235 000023FA AC                  <1>     lodsb   ;Get char in al and inc rsi
   236 000023FB 3C24                <1>     cmp al, "$" ;End of string char?
   237                              <1>     rete    ;Return if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000023FD 74F7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   238 000023FF E838FEFFFF          <1>     call charOut_B.in
   239 00002404 EBF4                <1>     jmp short .ps0
   240                              <1> 
   241                              <1> checkStdinStatus:  ;ah = 0Bh
   242                              <1> ;Returns the status of the driver controlling vCon
   243 00002406 E8D9000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   244 0000240B B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   245                              <1>     retz    ;If BSY set (no chars available), return with al=00
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000240D 74E7                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   246 0000240F FEC8                <1>     dec al  ;Set al to -1 if char available
   247                              <1>     return  ;Exit
    18                              <2> %%_ret:
    19 00002411 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   248                              <1> clearbuffDoFunc:   ;ah = 0Ch
   249                              <1> ;Clears any buffers and issues a console read command (the command in al)
   250                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   251 00002412 50                  <1>     push rax
   252 00002413 52                  <1>     push rdx
   253 00002414 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   254 00002416 E890010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   255 0000241B 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   256 0000241D B404                <1>     mov ah, 04h ;Flush input buffers
   257 0000241F E8ADFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   258                              <1> .skipFlush:
   259 00002424 5A                  <1>     pop rdx
   260 00002425 58                  <1>     pop rax
   261 00002426 88C4                <1>     mov ah, al  ;Move function number into ah
   262 00002428 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   263 0000242A 7507                <1>     jne .others
   264 0000242C 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   265 0000242F 7412                <1>     jz .bad ;Yes, exit
   266 00002431 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   267                              <1> .others:
   268 00002433 3C01                <1>     cmp al, 01h
   269 00002435 740F                <1>     je .callFunction
   270 00002437 3C07                <1>     cmp al, 07h
   271 00002439 740B                <1>     je .callFunction
   272 0000243B 3C08                <1>     cmp al, 08h
   273 0000243D 7407                <1>     je .callFunction
   274 0000243F 3C0A                <1>     cmp al, 0Ah
   275 00002441 7403                <1>     je .callFunction
   276                              <1> .bad:
   277 00002443 30C0                <1>     xor al, al
   278                              <1>     return
    18                              <2> %%_ret:
    19 00002445 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   279                              <1> .callFunction:
   280 00002446 FA                  <1>     cli ;Prepare to swap stack pointer
   281                              <1>     ;The below address avoids "properly" reentering DOS
   282                              <1>     ;We simply reuse the function dispatch aspect. 
   283                              <1>     ;this means we dont trash the caller's register frame 
   284 00002447 E92A450000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   285                              <1> ;------------------------
   286                              <1> ;  Primitive functions  :
   287                              <1> ;------------------------
   288                              <1> swapPrimaryHeader:
   289                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   290                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   291 0000244C 56                  <1>     push rsi
   292 0000244D 57                  <1>     push rdi
   293 0000244E 51                  <1>     push rcx
   294 0000244F 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   294 00002458 00                  <1>
   295 00002459 488D35(A5C40300)    <1>     lea rsi, primReqHdr
   296 00002460 488D3D(75DA0300)    <1>     lea rdi, bkupReqHdr
   297 00002467 7303                <1>     jnc .read
   298 00002469 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   299                              <1> .read:
   300 0000246C F3A4                <1>     rep movsb   ;Swap
   301 0000246E 59                  <1>     pop rcx
   302 0000246F 5F                  <1>     pop rdi
   303 00002470 5E                  <1>     pop rsi
   304                              <1>     return
    18                              <2> %%_ret:
    19 00002471 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   305                              <1> outputOnStdout:
   306                              <1> ;Input: al = Char to output
   307                              <1> ;Output: CF=CY, all good
   308 00002472 53                  <1>     push rbx
   309 00002473 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   310 00002478 E82E010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   311 0000247D 7217                <1>     jc .exit
   312 0000247F 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   313 00002485 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   314 00002487 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   315 0000248B 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 49?
   316 00002491 7405                <1>     jz .notCharDevOrFast
   317 00002493 CD49                <1>     int 49h ;Fast output
   318                              <1> .exitOk:
   319 00002495 F8                  <1>     clc
   320                              <1> .exit:
   321 00002496 5B                  <1>     pop rbx
   322                              <1>     return
    18                              <2> %%_ret:
    19 00002497 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   323                              <1> .notCharDevOrFast:
   324 00002498 E809000000          <1>     call outputOnSFT
   325 0000249D 5B                  <1>     pop rbx
   326                              <1>     return
    18                              <2> %%_ret:
    19 0000249E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   327                              <1> 
   328                              <1> outputToHandle:
   329                              <1> ;Char to output must be in al
   330 0000249F E807010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   331                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000024A4 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   332                              <1> outputOnSFT:
   333                              <1> ;Output char in al to SFT in rsi
   334                              <1> ;Waits until device is not busy to send char.
   335                              <1> ;Calls int 48h if device busy
   336 000024A6 50                  <1>     push rax
   337 000024A7 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   338 000024A9 E823FCFFFF          <1>     call mainCharIO
   339 000024AE 58                  <1>     pop rax
   340 000024AF 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   341 000024B1 B402                <1>     mov ah, 02h ;Output char in al
   342 000024B3 E819FCFFFF          <1>     call mainCharIO
   343 000024B8 F8                  <1>     clc
   344                              <1>     return
    18                              <2> %%_ret:
    19 000024B9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   345                              <1> .signalLoop:
   346 000024BA E802000000          <1>     call callInt48h
   347 000024BF EBE5                <1>     jmp short outputOnSFT
   348                              <1> 
   349                              <1> callInt48h:
   350                              <1> ;Preserve full state, including "safetocallint48" flag and flags
   351 000024C1 9C                  <1>     pushfq
   352 000024C2 F605(79C40300)FF    <1>     test byte [int48Flag], -1
   353 000024C9 7417                <1>     jz .exit    ;If zero, not safe
   354 000024CB F605(ECC30300)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   355 000024D2 750E                <1>     jnz .exit
   356                              <1> ;Preserve stack alignment!!! Push Qword including and after int48Flag 
   357 000024D4 FF35(79C40300)      <1>     push qword [int48Flag] 
   358 000024DA CD48                <1>     int 48h
   359 000024DC 8F05(79C40300)      <1>     pop qword [int48Flag]    ;Return original value
   360                              <1> .exit:
   361 000024E2 9D                  <1>     popfq
   362                              <1>     return
    18                              <2> %%_ret:
    19 000024E3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   363                              <1> 
   364                              <1> 
   365                              <1> vConCtrlCheck:
   366                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   367                              <1> ; the processing. 
   368                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   369                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   370                              <1> ;
   371                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   372                              <1> ;^S will pause screen processing until another key is processed by vCon input
   373                              <1> ;^P will toggle the printer echo feature of the vConsole
   374                              <1> ;
   375                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   376                              <1> ; in ASCII mode when called using 41h/3Fh (Handle Read)
   377                              <1> ;
   378                              <1> ;Output: 
   379                              <1> ;   CF=CY : Error
   380                              <1> ;   CF=NC : ...
   381                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   382                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   383 000024E4 E825010000          <1>     call checkBreak ;Check if there is a ^C on CON
   384 000024E9 53                  <1>     push rbx
   385 000024EA 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   386 000024EC E8BA000000          <1>     call getCharDevSFT
   387 000024F1 5B                  <1>     pop rbx
   388                              <1>     retc    ;Return if CF=CY
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000024F2 72EF                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   389 000024F4 B401                <1>     mov ah, 01  ;Non destructively read CON
   390 000024F6 E8D6FBFFFF          <1>     call mainCharIO
   391 000024FB 74C4                <1>     jz callInt48h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 48h
   392                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   393 000024FD 3C13                <1>     cmp al, DC3 ;^S ?
   394 000024FF 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   395 00002501 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   396 00002503 E8C9FBFFFF          <1>     call mainCharIO
   397 00002508 E962000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   398                              <1> .checkPrintOrExit:
   399 0000250D 3C10                <1>     cmp al, DLE ;Do we have ^P?
   400 0000250F 7467                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   401 00002511 3C03                <1>     cmp al, ETX ;Do we have ^C?
   402 00002513 7463                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   403                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   404                              <1>     return 
    18                              <2> %%_ret:
    19 00002515 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   405                              <1> .printToggle:
   406 00002516 F615(B4C30300)      <1>     not byte [printEcho]    ;Compliment the flag.
   407 0000251C 53                  <1>     push rbx
   408 0000251D BB04000000          <1>     mov ebx, 4  ;PRN handle
   409 00002522 E884000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   410 00002527 5B                  <1>     pop rbx
   411                              <1>     retc    ;If CF=CY, exit
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002528 72EB                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   412 0000252A 57                  <1>     push rdi
   413 0000252B 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   414 0000252E 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   415 00002534 741D                <1>     jz .notNet
   416 00002536 50                  <1>     push rax
   417 00002537 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   418 0000253C CD4F                <1>     int 4Fh
   419 0000253E 58                  <1>     pop rax
   420 0000253F 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   421                              <1>     ;If something went wrong, turn off echo
   422 00002541 C605(B4C30300)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   423 00002548 50                  <1>     push rax
   424 00002549 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   425 0000254E CD4F                <1>     int 4Fh
   426 00002550 58                  <1>     pop rax
   427 00002551 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   428                              <1> .notNet:
   429                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   430                              <1> ; 0Dh or 0Eh
   431 00002553 803D(B4C30300)00    <1>     cmp byte [printEcho], 00
   432 0000255A 7507                <1>     jnz .echoOn
   433 0000255C E84EFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   434 00002561 EB05                <1>     jmp short .printExit
   435                              <1> .echoOn:
   436 00002563 E83EFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   437                              <1> .printExit:
   438 00002568 5F                  <1>     pop rdi
   439                              <1>     return
    18                              <2> %%_ret:
    19 00002569 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   440                              <1> .sigNextChar:   ;Signal Int 48h before waiting for the next char
   441 0000256A E852FFFFFF          <1>     call callInt48h
   442                              <1> .waitNextChar:   ;Here get next char
   443 0000256F B401                <1>     mov ah, 01h ;ND read
   444 00002571 E85BFBFFFF          <1>     call mainCharIO
   445 00002576 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 48h and keep waiting
   446                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   447 00002578 53                  <1>     push rbx
   448 00002579 31DB                <1>     xor ebx, ebx
   449 0000257B E82B000000          <1>     call getCharDevSFT
   450 00002580 5B                  <1>     pop rbx
   451                              <1>     retc    ;Return if STDIN closed
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002581 72E6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   452 00002583 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   453 00002585 E847FBFFFF          <1>     call mainCharIO
   454 0000258A 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   455 0000258C 7514                <1>     jnz .checkBreak2
   456 0000258E 803D(A2DA0300)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   457 00002595 0F847BFFFFFF        <1>     jz .printToggle ;If 0, toggle!
   458 0000259B C605(A2DA0300)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   459                              <1> .checkBreak2:
   460 000025A2 3C03                <1>     cmp al, ETX
   461                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000025A4 75C3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   462 000025A6 E96C380000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   463                              <1> 
   464                              <1> 
   465                              <1> getCharDevSFT:
   466                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   467                              <1> ;Input: bx = zero extended handle number
   468                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   469                              <1> ;        CF=CY => al = Error code, abort operation
   470 000025AB F605(78C40300)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   471 000025B2 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   472                              <1> .getSFT:
   473 000025B4 57                  <1>     push rdi
   474 000025B5 E86C230000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   475 000025BA 4889FE              <1>     mov rsi, rdi
   476 000025BD 5F                  <1>     pop rdi
   477                              <1>     return  ;Return with CF set
    18                              <2> %%_ret:
    19 000025BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   478                              <1> .swap:
   479                              <1> ;workingSFT is only set for CON calls
   480 000025BF 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   481 000025C5 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   482 000025C7 488B35(02C70300)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   483 000025CE F8                  <1>     clc
   484                              <1>     return
    18                              <2> %%_ret:
    19 000025CF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   485                              <1> 
   486                              <1> ;------------------------
   487                              <1> ;   Utility functions   :
   488                              <1> ;------------------------
   489                              <1> printCaretASCII:
   490                              <1> ;Input: al = Char to print with a caret
   491                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   492                              <1> ;First check if the char should be careted, and then print normally if so
   493 000025D0 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   494 000025D2 0F8364FCFFFF        <1>     jae charOut_B.in
   495 000025D8 3C09                <1>     cmp al, TAB
   496 000025DA 0F845CFCFFFF        <1>     je charOut_B.in
   497 000025E0 3C15                <1>     cmp al, NAK
   498 000025E2 0F8454FCFFFF        <1>     je charOut_B.in
   499 000025E8 3C14                <1>     cmp al, DC4
   500 000025EA 0F844CFCFFFF        <1>     je charOut_B.in
   501 000025F0 50                  <1>     push rax
   502 000025F1 B05E                <1>     mov al, "^" ;Get caret in place
   503 000025F3 E844FCFFFF          <1>     call charOut_B.in
   504 000025F8 58                  <1>     pop rax
   505 000025F9 0440                <1>     add al, "@" ;Turn into an ASCII Char
   506 000025FB E93CFCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   507                              <1> printCRLF:
   508 00002600 B00D                <1>     mov al, CR
   509 00002602 E835FCFFFF          <1>     call charOut_B.in
   510 00002607 B00A                <1>     mov al, LF
   511 00002609 E92EFCFFFF          <1>     jmp charOut_B.in
   512                              <1> 
   513                              <1> checkBreak:
   514                              <1> ;Reads bytes from CON if there are any bytes to read and 
   515                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   516 0000260E 803D(EDC30300)01    <1>     cmp byte [inDOS], 1
   517                              <1>     retne    ;Return if not inDOS only once
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00002615 75B8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   518                              <1> ;Returns in al the keystroke that is available IF one is available
   519                              <1> ; or al=0 if no keystroke available
   520 00002617 53                  <1>     push rbx
   521 00002618 56                  <1>     push rsi
   522 00002619 488B35(59C00300)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   523                              <1>     ;Place command code and a zero status word at the same time
   524 00002620 C705(D1C40300)0500- <1>     mov dword [critReqHdr + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   524 00002628 0000                <1>
   525                              <1>     ;Place the packet size in the hdrlen field
   526 0000262A C605(CFC40300)0E    <1>     mov byte [critReqHdr + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   527 00002631 488D1D(CFC40300)    <1>     lea rbx, critReqHdr
   528 00002638 E8F03B0000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   529                              <1>     ;Check if the busy bit is set (No keystroke available)
   530 0000263D 66F705(D2C40300)00- <1>     test word [critReqHdr + ndInNoWaitPkt.status], drvBsyStatus
   530 00002645 02                  <1>
   531 00002646 7405                <1>     jz .charFound
   532                              <1> .exit:
   533 00002648 30C0                <1>     xor al, al
   534 0000264A 5E                  <1>     pop rsi
   535 0000264B 5B                  <1>     pop rbx
   536                              <1>     return
    18                              <2> %%_ret:
    19 0000264C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   537                              <1> .charFound:
   538                              <1> ;Keystroke available, proceed
   539 0000264D 8A05(DCC40300)      <1>     mov al, byte [critReqHdr + ndInNoWaitPkt.retbyt]    ;Get char
   540 00002653 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   541 00002655 75F1                <1>     jne .exit   ;If not equal exit
   542                              <1> ;Now we pull the char out of the buffer
   543 00002657 C705(D1C40300)0400- <1>     mov dword [critReqHdr + ioReqPkt.cmdcde], drvREAD ;Read command
   543 0000265F 0000                <1>
   544 00002661 C605(CFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   545                              <1>     ;Place pointers and number of chars
   546 00002668 C705(E5C40300)0100- <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   546 00002670 0000                <1>
   547                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   548 00002672 488D05(DCC40300)    <1>     lea rax, qword [critReqHdr + ioReqPkt.medesc]
   549 00002679 488905(DDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rax
   550 00002680 E8A83B0000          <1>     call goDriver   ;RSI and RBX as before
   551 00002685 E98D370000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   552                              <1> 
   553                              <1> vConSwapDriver:
   554                              <1> ;Sets up the vCon to use the alternative SFT pointer
   555 0000268A 57                  <1>     push rdi
   556 0000268B C605(78C40300)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   557 00002692 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   558 00002699 48893D(02C70300)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   559 000026A0 5F                  <1>     pop rdi
   560                              <1>     return
    18                              <2> %%_ret:
    19 000026A1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   561                              <1> 
   562                              <1> vConRetDriver:
   563                              <1> ;Returns the original driver (sets flag down)
   564 000026A2 C605(78C40300)00    <1>     mov byte [vConDrvSwp], 0
   565                              <1>     return
    18                              <2> %%_ret:
    19 000026A9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   566                              <1> 
   567                              <1> ;--------------------------------------------------
   568                              <1> ;      Main Keyboard Buffered Input Function      :
   569                              <1> ;--------------------------------------------------
   570                              <1> buffCharInput_BE:  ;ah = 0Ah
   571                              <1> ;Buffer pointer in rdx
   572                              <1> ; byte [rdx + 0], buffer length
   573                              <1> ; byte [rdx + 1], number of chars in buffer
   574                              <1> ; byte [rdx + 2], buffer start
   575                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   576                              <1> ;Register use
   577                              <1> ; dh = Char offset in internal buffer
   578                              <1> ; dl = Buffer length
   579                              <1> ; bh = Char offset in user buffer
   580                              <1> ; bl = Number of chars already in the buffer
   581                              <1> ; rdi = Internal buffer
   582                              <1> ; rsi = User buffer
   583 000026AA 4889D6              <1>     mov rsi, rdx
   584 000026AD 66AD                <1>     lodsw   ;Get buffer metadata in ax
   585 000026AF 84C0                <1>     test al, al
   586                              <1>     retz    ;If buffer length zero, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000026B1 74F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   587 000026B3 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   588 000026B6 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   589 000026B8 7606                <1>     jbe .avoidcheck
   590 000026BA 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   591 000026BE 7402                <1>     je .functionKeyOk
   592                              <1> .avoidcheck:
   593 000026C0 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   594                              <1> .functionKeyOk:
   595 000026C2 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   596 000026C5 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   597                              <1> .breakEP:
   598 000026C7 8A05(B1C20300)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   599 000026CD 8805(B2C20300)      <1>     mov byte [vConCurCnt], al
   600 000026D3 56                  <1>     push rsi    ;Push user buffer address
   601 000026D4 488D3D(B3C20300)    <1>     lea rdi, vConBuffer
   602 000026DB C605(E3C60300)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   603                              <1> .mainLoop:
   604 000026E2 E8B1FCFFFF          <1>     call charIn_B   ;Get a char in AL from 41/08h
   605 000026E7 3C0A                <1>     cmp al, LF
   606 000026E9 7505                <1>     jne .checkControlChars
   607                              <1> .mainLoop2:
   608 000026EB E8A8FCFFFF          <1>     call charIn_B
   609                              <1> .checkControlChars:
   610 000026F0 3C06                <1>     cmp al, ACK
   611 000026F2 74F7                <1>     je .mainLoop2   ;Get another char
   612 000026F4 3A0568D9FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   613 000026FA 0F8426010000        <1>     je .escape
   614 00002700 3C7F                <1>     cmp al, DEL
   615 00002702 0F8489000000        <1>     je .delete
   616 00002708 3C08                <1>     cmp al, BSP
   617 0000270A 0F8481000000        <1>     je .delete
   618 00002710 3C17                <1>     cmp al, ETB
   619                              <1>     ;Add space for patched jump instructions
   620 00002712 9090909090          <1>     db 5 dup (90h)  ;NOP
   621 00002717 3C15                <1>     cmp al, NAK
   622 00002719 9090909090          <1>     db 5 dup (90h)
   623 0000271E 3C0D                <1>     cmp al, CR
   624 00002720 744C                <1>     je .carriageReturn
   625 00002722 3C0A                <1>     cmp al, LF
   626 00002724 7461                <1>     je .lineFeed
   627 00002726 3A0537D9FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   628 0000272C 7429                <1>     je .break
   629                              <1> .checkIfCanInsert:
   630 0000272E 38D6                <1>     cmp dh, dl
   631 00002730 731C                <1>     jae .bufOflw
   632 00002732 AA                  <1>     stosb   ;Store the byte and increment rdi!
   633 00002733 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   634 00002735 E896FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   635 0000273A 803D(E3C60300)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   636 00002741 75A8                <1>     jne .mainLoop2
   637                              <1>     ;IF not in insert mode, we fall here
   638                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   639                              <1>     ; or insert chars if needed.
   640 00002743 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   641 00002745 73A4                <1>     jae .mainLoop2  ;If geq dont follow in user buffer
   642 00002747 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   643 0000274A FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   644 0000274C EB9D                <1>     jmp short .mainLoop2
   645                              <1> .bufOflw:
   646                              <1> ;Buffer overflow
   647 0000274E B007                <1>     mov al, BEL ;Sound the bell
   648 00002750 E8E7FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   649 00002755 EB94                <1>     jmp short .mainLoop2
   650                              <1> .break:
   651                              <1> ;Break, Place a "\", and do a CRLF
   652 00002757 B05C                <1>     mov al, "\"
   653 00002759 E8DEFAFFFF          <1>     call charOut_B.in
   654 0000275E 5E                  <1>     pop rsi ;Realign stack
   655                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   656 0000275F E89CFEFFFF          <1>     call printCRLF
   657                              <1>     ;Align to next tabstop
   658 00002764 E85AFBFFFF          <1>     call charOut_B.tab
   659 00002769 E959FFFFFF          <1>     jmp .breakEP
   660                              <1> .carriageReturn:
   661 0000276E AA                  <1>     stosb
   662 0000276F E8C8FAFFFF          <1>     call charOut_B.in
   663 00002774 5F                  <1>     pop rdi ;User buffer address was pushed 
   664 00002775 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   665 00002778 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   666                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   667 0000277A 488D35(B3C20300)    <1>     lea rsi, vConBuffer
   668 00002781 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   669 00002784 F3A4                <1>     repz movsb  ;If the inc dh cause an overflow, dont copy! 
   670                              <1>     return
    18                              <2> %%_ret:
    19 00002786 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   671                              <1> .lineFeed:
   672 00002787 E874FEFFFF          <1>     call printCRLF
   673 0000278C E95AFFFFFF          <1>     jmp .mainLoop2
   674                              <1> .delete:
   675 00002791 E805000000          <1>     call .removeChar
   676 00002796 E950FFFFFF          <1>     jmp .mainLoop2
   677                              <1> .removeChar:
   678 0000279B 84F6                <1>     test dh, dh ;Is char count 0?
   679 0000279D 741C                <1>     jz .normalChar   ;If so, skip going back!
   680 0000279F E868000000          <1>     call .vConErase
   681 000027A4 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   682 000027A6 3C20                <1>     cmp al, SPC
   683 000027A8 7311                <1>     jae .normalChar
   684 000027AA 3C09                <1>     cmp al, TAB
   685 000027AC 7420                <1>     je .eraTab
   686 000027AE 3C15                <1>     cmp al, NAK
   687 000027B0 7409                <1>     je .normalChar
   688 000027B2 3C14                <1>     cmp al, DC4
   689 000027B4 7405                <1>     je .normalChar
   690 000027B6 E856000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   691                              <1> .normalChar:
   692 000027BB 803D(E3C60300)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   693                              <1>     retne ;Yes, return
    58                              <2> cret ne
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000027C2 75C2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   694 000027C4 84FF                <1>     test bh, bh ;Beginning of user buffer?
   695                              <1>     retz    ;Yes, return
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000027C6 74BE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   696 000027C8 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   697 000027CB FECF                <1>     dec bh
   698                              <1>     return
    18                              <2> %%_ret:
    19 000027CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   699                              <1> .eraTab:
   700                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   701                              <1> ; up to a tab stop worth of space chars printed
   702 000027CE 57                  <1>     push rdi
   703 000027CF 48FFCF              <1>     dec rdi
   704 000027D2 FD                  <1>     std ;Go backwards
   705 000027D3 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   706 000027D6 B020                <1>     mov al, SPC
   707 000027D8 53                  <1>     push rbx
   708 000027D9 BB07000000          <1>     mov ebx, 7
   709 000027DE 67E30D              <1>     jecxz .onTabstop
   710                              <1> .scanString:
   711 000027E1 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   712 000027E2 7608                <1>     jbe .notChar    ;No, skip handling
   713 000027E4 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   714 000027E8 740A                <1>     je .tabChar
   715 000027EA FECB                <1>     dec bl
   716                              <1> .notChar:
   717 000027EC E2F3                <1>     loop .scanString
   718                              <1> .onTabstop:
   719 000027EE 2A1D(B2C20300)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   720                              <1> .tabChar:
   721 000027F4 28F3                <1>     sub bl, dh  ;Same on tabstop
   722 000027F6 00D9                <1>     add cl, bl
   723 000027F8 80E107              <1>     and cl, 7
   724 000027FB 5B                  <1>     pop rbx
   725 000027FC 5F                  <1>     pop rdi
   726 000027FD FC                  <1>     cld
   727 000027FE 74BB                <1>     jz .normalChar
   728                              <1>     ;Now erase all the spaces placed on the vCon
   729                              <1> .vConDelTab:
   730 00002800 E80C000000          <1>     call .vConEraseNoDec
   731 00002805 E2F9                <1>     loop .vConDelTab
   732 00002807 E9AFFFFFFF          <1>     jmp .normalChar
   733                              <1> .vConErase:
   734                              <1> ;Erase the char on the vCon
   735                              <1> ;Return through the output function
   736 0000280C 48FFCF              <1>     dec rdi ;Go back a space in the 
   737 0000280F FECE                <1>     dec dh  ;Decrement char count in the buffer
   738                              <1> .vConEraseNoDec:
   739 00002811 B008                <1>     mov al, BSP ;Move cursor back
   740 00002813 E824FAFFFF          <1>     call charOut_B.in
   741 00002818 B020                <1>     mov al, SPC ;Replace with a space
   742 0000281A E81DFAFFFF          <1>     call charOut_B.in
   743 0000281F B008                <1>     mov al, BSP ;Move cursor back again
   744 00002821 E916FAFFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   745                              <1> .escape:
   746                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   747                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   748                              <1> ; including the function keys.
   749 00002826 FF252ED8FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   750                              <1> .f2:
   751 0000282C E846000000          <1>     call .fCommon2
   752 00002831 EB0C                <1>     jmp short .fCommon
   753                              <1> .f3:
   754 00002833 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   755 00002836 28F9                <1>     sub cl, bh  ;Sub our current position
   756 00002838 EB05                <1>     jmp short .fCommon
   757                              <1> .f1:
   758 0000283A B901000000          <1>     mov ecx, 1  ;Get one char
   759                              <1> .fCommon:
   760 0000283F C605(E3C60300)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   761 00002846 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   762 00002848 0F849DFEFFFF        <1>     je .mainLoop2
   763 0000284E 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   764 00002850 0F8495FEFFFF        <1>     je .mainLoop2
   765                              <1>     ;Else, copy byte by byte, and retain char in al
   766 00002856 AC                  <1>     lodsb
   767 00002857 AA                  <1>     stosb
   768 00002858 E873FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   769 0000285D FEC7                <1>     inc bh
   770 0000285F FEC6                <1>     inc dh
   771 00002861 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   772 00002863 E983FEFFFF          <1>     jmp .mainLoop2
   773                              <1> .f4:
   774 00002868 E80A000000          <1>     call .fCommon2
   775 0000286D 4801CE              <1>     add rsi, rcx
   776 00002870 00CF                <1>     add bh, cl
   777 00002872 E974FEFFFF          <1>     jmp .mainLoop2
   778                              <1> .fCommon2:
   779 00002877 E81CFBFFFF          <1>     call charIn_B   ;Get a char in al
   780 0000287C 3A05E0D7FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   781 00002882 750B                <1>     jne .fnotEscape
   782                              <1>     ;Get another char if they typed escape and force it in the buffer
   783                              <1>     ; Do not return to caller
   784 00002884 E80FFBFFFF          <1>     call charIn_B
   785                              <1> .fforceExit:
   786 00002889 59                  <1>     pop rcx ;Get original return address from stack
   787 0000288A E95CFEFFFF          <1>     jmp .mainLoop2
   788                              <1> .fnotEscape:
   789 0000288F 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   790 00002892 28F9                <1>     sub cl, bh
   791 00002894 74F3                <1>     jz .fforceExit
   792 00002896 FFC9                <1>     dec ecx
   793 00002898 74EF                <1>     jz .fforceExit
   794 0000289A 57                  <1>     push rdi
   795 0000289B 4889F7              <1>     mov rdi, rsi
   796 0000289E 48FFC7              <1>     inc rdi
   797 000028A1 F2AE                <1>     repne scasb ;Search for the char to start printing from
   798 000028A3 5F                  <1>     pop rdi
   799 000028A4 75E3                <1>     jne .fforceExit ;If char not found, return
   800 000028A6 F6D1                <1>     not cl
   801 000028A8 00D9                <1>     add cl, bl
   802 000028AA 28F9                <1>     sub cl, bh
   803                              <1>     return
    18                              <2> %%_ret:
    19 000028AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   804                              <1> .f5:
   805 000028AD B040                <1>     mov al, "@"
   806 000028AF E888F9FFFF          <1>     call charOut_B.in   ;Print the char
   807 000028B4 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   808 000028B5 57                  <1>     push rdi
   809 000028B6 E8BFFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   810 000028BB 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   811 000028BC 88F3                <1>     mov bl, dh
   812 000028BE E99CFEFFFF          <1>     jmp .breakAlt
   813                              <1> .f6:
   814                              <1> ;If the user wants to insert a EOF, they can use F6
   815 000028C3 B01A                <1>     mov al, EOF
   816 000028C5 E964FEFFFF          <1>     jmp .checkIfCanInsert
   817                              <1> .f7:
   818                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   819 000028CA 8A0592D7FFFF        <1>     mov al, byte [extESC]
   820 000028D0 E959FEFFFF          <1>     jmp .checkIfCanInsert
   821                              <1> .toggleIns:
   822 000028D5 F615(E3C60300)      <1>     not byte [vConInsert]   ;Toggle
   823                              <1>     return
    18                              <2> %%_ret:
    19 000028DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   824                              <1> .eDel:
   825 000028DC 38DF                <1>     cmp bh, bl
   826 000028DE 0F8407FEFFFF        <1>     je .mainLoop2
   827 000028E4 FEC7                <1>     inc bh
   828 000028E6 48FFC6              <1>     inc rsi
   829 000028E9 E9FDFDFFFF          <1>     jmp .mainLoop2
   830                              <1> 
   831                              <1> editKeys:
   832                              <1> ;Our Default Extended keys handler
   833 000028EE E8A5FAFFFF          <1>     call charIn_B   ;Get the next char in al
   834 000028F3 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   835 000028F8 57                  <1>     push rdi    ;Preserve rdi
   836 000028F9 488D3D64D7FFFF      <1>     lea rdi, extKeyTbl
   837 00002900 57                  <1>     push rdi
   838                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   839                              <1>     ; offset of function from extKeyTbl
   840                              <1> .lp:
   841 00002901 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   842 00002902 740D                <1>     je .charFound
   843 00002904 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   844 00002906 7414                <1>     jz .notInTable
   845 00002908 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   846 0000290F EBF0                <1>     jmp short .lp
   847                              <1> .charFound:
   848 00002911 59                  <1>     pop rcx ;Pop back the effective address of the table
   849 00002912 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   850 00002916 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   851 00002919 5F                  <1>     pop rdi
   852 0000291A FFE1                <1>     jmp rcx
   853                              <1> .notInTable:
   854 0000291C 59                  <1>     pop rcx ;Realign stack
   855 0000291D 59                  <1>     pop rcx
   856 0000291E E9C8FDFFFF          <1>     jmp buffCharInput_BE.mainLoop2
    29                                  %include "./Source/Kernel/FileIO/dtFunc.asm"
    30                              <1> ;Major kernel date time functions and subroutines
    31                              <1> 
    32                              <1> getDate:           ;ah = 2Ah
    33 00002923 E879010000          <1>     call readDateTimeRecord ;Update date if necessary
    34 00002928 E8EB3C0000          <1>     call getUserRegs
    35 0000292D 668B15(72C40300)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
    36                              <1> ;    mov dh, byte [monthOfYear]
    37 00002934 0FB60D(74C40300)    <1>     movzx ecx, byte [years]
    38 0000293B 8A05(77C40300)      <1>     mov al, byte [dayOfWeek]
    39 00002941 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    40 00002945 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    41                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002949 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    42                              <1> setDate:           ;ah = 2Bh
    43                              <1> ;	CX = year (1980-2099)
    44                              <1> ;   DH = month (1-12)
    45                              <1> ;	DL = day (1-31)
    46 0000294A E873000000          <1>     call writeDate  ;Set ax to 0 or -1 depending
    47                              <1>     return
    18                              <2> %%_ret:
    19 0000294F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    48                              <1> getTime:           ;ah = 2Ch
    49 00002950 E84C010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    50 00002955 E8BE3C0000          <1>     call getUserRegs
    51 0000295A 668B0D(FCC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    52 00002961 668B15(FEC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    53 00002968 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    54 0000296C 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    55                              <1>     return  ;al is returned as error code
    18                              <2> %%_ret:
    19 00002970 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    56                              <1> setTime:           ;ah = 2Dh
    57                              <1> ;   CH = hour (0-23)
    58                              <1> ;	CL = minutes (0-59)
    59                              <1> ;	DH = seconds (0-59)
    60                              <1> ;	DL = hundredths (0-99)
    61 00002971 80FD17              <1>     cmp ch, 23
    62 00002974 7749                <1>     ja .exitBad
    63 00002976 80F93B              <1>     cmp cl, 59
    64 00002979 7744                <1>     ja .exitBad
    65 0000297B 80FE3B              <1>     cmp dh, 59
    66 0000297E 773F                <1>     ja .exitBad
    67 00002980 80FA63              <1>     cmp dl, 99
    68 00002983 773A                <1>     ja .exitBad
    69                              <1> ;Now we read date (updating internal count if necessary)
    70 00002985 E817010000          <1>     call readDateTimeRecord
    71 0000298A 488D1D(FAC40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    72 00002991 0FB705(75C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    73 00002998 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    74 0000299B 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    75 0000299F 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    76 000029A3 B906000000          <1>     mov ecx, 6
    77 000029A8 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    78 000029AB E8063B0000          <1>     call primReqWriteSetup   ;rbx now points to request header
    79 000029B0 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    80 000029B7 E871380000          <1>     call goDriver
    81 000029BC 30C0                <1>     xor al, al
    82                              <1>     return
    18                              <2> %%_ret:
    19 000029BE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    83                              <1> .exitBad:
    84 000029BF B0FF                <1>     mov al, -1
    85                              <1>     return
    18                              <2> %%_ret:
    19 000029C1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    86                              <1> ;------------------------
    87                              <1> ;   Utility functions   :
    88                              <1> ;------------------------
    89                              <1> writeDate:
    90 000029C2 6681F97800          <1>     cmp cx, 120
    91 000029C7 0F83D1000000        <1>     jae .exitBad
    92 000029CD 80FE0C              <1>     cmp dh, 12
    93 000029D0 0F87C8000000        <1>     ja .exitBad
    94 000029D6 80FA1F              <1>     cmp dl, 31
    95 000029D9 0F87BF000000        <1>     ja .exitBad
    96 000029DF 668915(72C40300)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    97                              <1>     ;mov byte [monthOfYear], dh
    98 000029E6 880D(74C40300)      <1>     mov byte [years], cl    ;Save the years count
    99 000029EC E878010000          <1>     call setDaysInFeb   ;Set days in february this year
   100 000029F1 88CD                <1>     mov ch, cl ;Get years count in ch
   101 000029F3 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
   102 000029F6 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
   103 000029F9 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
   104 000029FC BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
   105 00002A01 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
   106                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
   107 00002A03 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
   108 00002A06 67E316              <1>     jecxz .addDay    ;Skip adding years
   109 00002A09 056E010000          <1>     add eax, 366    ;First add for a leap year
   110                              <1> .addYears:
   111 00002A0E FFC9                <1>     dec ecx
   112 00002A10 67E30C              <1>     jecxz .addDay    ;Jump if in year after leap year
   113 00002A13 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   114 00002A18 EBF4                <1>     jmp short .addYears
   115                              <1> .addLeap:
   116 00002A1A 056E010000          <1>     add eax, 366    ;Add the days in the leap year
   117                              <1> .addDay:
   118 00002A1F 89C2                <1>     mov edx, eax    ;Save this number in edx
   119                              <1>     ;Now to add day offset
   120 00002A21 0FB60D(73C40300)    <1>     movzx ecx, byte [monthOfYear]
   121 00002A28 488D3556D6FFFF      <1>     lea rsi, monthsTbl
   122                              <1> .addDaysInMonth:
   123 00002A2F FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   124 00002A31 67E308              <1>     jecxz .addMonthOffset
   125 00002A34 AC                  <1>     lodsb   ;Get the number of days in the month in al
   126 00002A35 0FB6C0              <1>     movzx eax, al
   127 00002A38 01C2                <1>     add edx, eax
   128 00002A3A EBF3                <1>     jmp short .addDaysInMonth
   129                              <1> .addMonthOffset:
   130 00002A3C 0FB60D(72C40300)    <1>     movzx ecx, byte [dayOfMonth]
   131 00002A43 FFC9                <1>     dec ecx
   132 00002A45 01CA                <1>     add edx, ecx    ;Add month offset
   133                              <1>     ;edx has the number of days since 01/01/1980
   134 00002A47 668915(75C40300)    <1>     mov word [daysOffset], dx   ;Store!
   135                              <1> ;Now read and then write CLOCKrecrd
   136 00002A4E 488D1D(FAC40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   137 00002A55 B906000000          <1>     mov ecx, 6
   138 00002A5A 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   139 00002A5D E85F3A0000          <1>     call primReqReadSetup   ;rbx now points to request header
   140 00002A62 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   141 00002A69 E8BF370000          <1>     call goDriver
   142                              <1> ;Now we change daycount and write it back
   143 00002A6E 0FB705(75C40300)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   144 00002A75 488D1D(FAC40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   145 00002A7C 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   146 00002A7F B906000000          <1>     mov ecx, 6
   147 00002A84 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   148 00002A87 E82A3A0000          <1>     call primReqWriteSetup   ;rbx now points to request header
   149 00002A8C 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   150 00002A93 E895370000          <1>     call goDriver
   151 00002A98 E8AE000000          <1>     call setDayofWeek
   152                              <1>     return
    18                              <2> %%_ret:
    19 00002A9D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> .exitBad:
   154 00002A9E B0FF                <1>     mov al, -1
   155                              <1>     return
    18                              <2> %%_ret:
    19 00002AA0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   156                              <1> 
   157                              <1> readDateTimeRecord:
   158                              <1> ;Will read the clock using the primary request header
   159                              <1> ;Preserves all regs except eax and flags
   160 00002AA1 53                  <1>     push rbx
   161 00002AA2 51                  <1>     push rcx
   162 00002AA3 52                  <1>     push rdx
   163 00002AA4 56                  <1>     push rsi
   164 00002AA5 55                  <1>     push rbp
   165                              <1> 
   166 00002AA6 66C705(A3DA0300)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   166 00002AAE 00                  <1>
   167 00002AAF 488D1D(FAC40300)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   168 00002AB6 B906000000          <1>     mov ecx, 6
   169 00002ABB 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   170                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   171                              <1> ; rbx = Data storage buffer ptr
   172                              <1> ; ecx = Number of sectors to transfer
   173                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   174 00002ABE E8FE390000          <1>     call primReqReadSetup   ;rbx now points to request header
   175 00002AC3 488B35(51C00300)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   176 00002ACA E85E370000          <1>     call goDriver
   177 00002ACF 0FB705(FAC40300)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   178                              <1> ;Here we have:  ax = Days since 1/1/1980
   179                              <1> ;Updates the internal date fields
   180                              <1> ;Internal time fields are in the clock record
   181                              <1> ;So now we check if the number of days since 1980 are the same.
   182                              <1> ;If so, we can skip updating.
   183 00002AD6 663B05(75C40300)    <1>     cmp ax, word [daysOffset]
   184 00002ADD 7466                <1>     je .exit    ;Return if equal
   185 00002ADF 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   186 00002AE4 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   187 00002AE6 668905(75C40300)    <1>     mov word [daysOffset], ax   ;Save this new offset
   188                              <1>     ;Now want to update years, month and day fields
   189                              <1>     ;ax has the number of days since 01/01/1980
   190                              <1>     ;Get days in a 4 year period
   191 00002AED BBB5050000          <1>     mov ebx, 365*4 + 1
   192 00002AF2 31D2                <1>     xor edx, edx
   193 00002AF4 89D1                <1>     mov ecx, edx  ;Zero ecx
   194 00002AF6 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   195                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   196                              <1>     ;edx has offset into current 4 year bunch
   197 00002AF8 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   198 00002AFD 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   199 00002AFF 7210                <1>     jb .foundBunch
   200 00002B01 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   201 00002B03 FFC1                <1>     inc ecx
   202 00002B05 FFCB                <1>     dec ebx ;Number of days in a normal year
   203                              <1> .findBunch:
   204 00002B07 39DA                <1>     cmp edx, ebx
   205 00002B09 7206                <1>     jb .foundBunch
   206 00002B0B 29DA                <1>     sub edx, ebx
   207 00002B0D FFC1                <1>     inc ecx
   208 00002B0F EBF6                <1>     jmp short .findBunch
   209                              <1> .foundBunch:
   210                              <1>     ;If ecx = 0, february has 29 days!
   211                              <1>     ;eax has number of four year bunches elapsed since 1980
   212 00002B11 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   213 00002B14 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   214                              <1>     ;ecx now has the number of years since 1980
   215 00002B16 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   216                              <1> ;edx has number of days into the year we are in
   217                              <1> ;eax has number of days in Feb for this year
   218 00002B1B 488D3563D5FFFF      <1>     lea rsi, monthsTbl
   219 00002B22 31C9                <1>     xor ecx, ecx    ;Use as month counter
   220                              <1> .monthSearch:
   221 00002B24 FFC1                <1>     inc ecx ;Start from 1
   222 00002B26 AC                  <1>     lodsb   ;Get value in al and inc rsi
   223 00002B27 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   224 00002B2A 39C2                <1>     cmp edx, eax
   225 00002B2C 7204                <1>     jb .monthFound
   226 00002B2E 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   227 00002B30 EBF2                <1>     jmp short .monthSearch
   228                              <1> .monthFound:
   229                              <1>     ;cl has the month (01h-0Ch)
   230                              <1>     ;dl has the day of the month - 1
   231 00002B32 FFC2                <1>     inc edx
   232 00002B34 880D(73C40300)      <1>     mov byte [monthOfYear], cl
   233 00002B3A 8815(72C40300)      <1>     mov byte [dayOfMonth], dl
   234 00002B40 E806000000          <1>     call setDayofWeek
   235                              <1> .exit:
   236 00002B45 5D                  <1>     pop rbp
   237 00002B46 5E                  <1>     pop rsi
   238 00002B47 5A                  <1>     pop rdx
   239 00002B48 59                  <1>     pop rcx
   240 00002B49 5B                  <1>     pop rbx
   241                              <1>     return  ;Return with ZF is date set, or same day
    18                              <2> %%_ret:
    19 00002B4A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> 
   243                              <1> setDayofWeek:
   244                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   245 00002B4B 0FB705(75C40300)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   246 00002B52 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   247                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   248 00002B57 31D2                <1>     xor edx, edx
   249 00002B59 B907000000          <1>     mov ecx, 7   
   250 00002B5E F7F1                <1>     div ecx  ;Get remainder in dl
   251 00002B60 8815(77C40300)      <1>     mov byte [dayOfWeek], dl
   252                              <1> ;Set ZF to indicate all ok
   253 00002B66 31C0                <1>     xor eax, eax
   254                              <1>     return
    18                              <2> %%_ret:
    19 00002B68 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   255                              <1> 
   256                              <1> setDaysInFeb:   ;Int 4Fh AX = 121Bh, Set days in february
   257                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   258                              <1> ;Input: cl = Year - 1980
   259                              <1> ;Output: al = Number of days in February
   260 00002B69 880D(74C40300)      <1>     mov byte [years], cl    ;Save this figure
   261 00002B6F F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   262 00002B72 51                  <1>     push rcx
   263 00002B73 57                  <1>     push rdi
   264 00002B74 B81C000000          <1>     mov eax, 28  ;Usual days in february
   265 00002B79 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   266 00002B7E 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   267 00002B81 488D3DFED4FFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   268 00002B88 AA                  <1>     stosb   ;Store the word in rdi
   269 00002B89 5F                  <1>     pop rdi
   270 00002B8A 59                  <1>     pop rcx
   271                              <1>     return
    18                              <2> %%_ret:
    19 00002B8B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   272                              <1> 
   273                              <1> getDirDTwords:
   274                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   275                              <1> ; High word of eax = Date
   276                              <1> ; Low word of eax = Time
   277                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   278                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   279                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   280                              <1> 
   281                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   282                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   283                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   284                              <1> ;Preserves all registers except eax
   285 00002B8C 53                  <1>     push rbx
   286 00002B8D 0FB61D(FFC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   287 00002B94 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   288 00002B96 89D8                <1>     mov eax, ebx
   289 00002B98 0FB61D(FCC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   290 00002B9F C1E305              <1>     shl ebx, 5
   291 00002BA2 09D8                <1>     or eax, ebx
   292 00002BA4 0FB61D(FDC40300)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   293 00002BAB C1E30B              <1>     shl ebx, 11
   294 00002BAE 09D8                <1>     or eax, ebx
   295 00002BB0 0FB61D(72C40300)    <1>     movzx ebx, byte [dayOfMonth]
   296 00002BB7 C1E310              <1>     shl ebx, 16
   297 00002BBA 09D8                <1>     or eax, ebx
   298 00002BBC 0FB61D(73C40300)    <1>     movzx ebx, byte [monthOfYear]
   299 00002BC3 C1E315              <1>     shl ebx, 21
   300 00002BC6 09D8                <1>     or eax, ebx
   301 00002BC8 0FB61D(74C40300)    <1>     movzx ebx, byte [years]
   302 00002BCF C1E319              <1>     shl ebx, 25
   303 00002BD2 09D8                <1>     or eax, ebx
   304 00002BD4 5B                  <1>     pop rbx
   305                              <1>     return
    18                              <2> %%_ret:
    19 00002BD5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   306                              <1> getDateAndTimeOld:  ;INT 4Fh AX=12
   307                              <1> ;Returns edx = time
   308                              <1> ;        eax = date
   309                              <1> ; Formally ax and dx but we clear the upper words
   310 00002BD6 E8C6FEFFFF          <1>     call readDateTimeRecord
   311 00002BDB E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   312 00002BE0 31D2                <1>     xor edx, edx
   313 00002BE2 6689C2              <1>     mov dx, ax  ;Save time
   314 00002BE5 C1E810              <1>     shr eax, 10h    ;Get date into rax
   315                              <1>     return
    18                              <2> %%_ret:
    19 00002BE8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    30                                  %include "./Source/Kernel/FileIO/fcbFunc.asm"
    31                              <1> ;FCB functions.
    32                              <1> ;FCBs may only be generally used for file access FAT 12/16 volumes. 
    33                              <1> ;On FAT 32 volumes things are a bit more restricted.
    34                              <1> 
    35                              <1> ;The following functions ARE currently supported for general FAT 32 files:
    36                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
    37                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
    38                              <1> ;   parseFilename       (I mean, this function is useful anyway)
    39                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    40                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    41                              <1> ;   findNextFileFCB     (ditto the above)
    42                              <1> 
    43                              <1> ;The following functions are NOT currently supported for general FAT 32 files:
    44                              <1> ;   openFCB
    45                              <1> ;   closeFCB
    46                              <1> ;   createFCB
    47                              <1> ;   randomReadFCB
    48                              <1> ;   randomWriteFCB
    49                              <1> ;   randBlockReadFCB
    50                              <1> ;   randBlockWriteFCB
    51                              <1> ;   sequentialReadFCB
    52                              <1> ;   sequentialWriteFCB
    53                              <1> ;An attempt to run these functions on a FAT 32 volume will result in returning 
    54                              <1> ; al = -1 and an extended error code of 05 - Access Denied unless a device
    55                              <1> 
    56                              <1> ;FAT 32 volumes will support all functions for Volume Labels using xFCBs.
    57                              <1> ;Reading and Writing to the Volume label will silently return ok.
    58                              <1> ;Volume labels will be editable by being created/opened/closed.
    59                              <1> ;If the current directory is not the root, Volume Label work will assume the 
    60                              <1> ; root directory always.
    61                              <1> 
    62                              <1> findFirstFileFCB:  ;ah = 11h
    63                              <1> ;Input: rdx -> FCB
    64 00002BE9 488915(FAC60300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    65 00002BF0 4889D6              <1>     mov rsi, rdx
    66 00002BF3 803EFF              <1>     cmp byte [rsi], -1
    67 00002BF6 7407                <1>     je .notExt1
    68 00002BF8 4881C607000000      <1>     add rsi, exFcb.driveNum
    69                              <1> .notExt1:
    70 00002BFF 0FB606              <1>     movzx eax, byte [rsi]
    71 00002C02 50                  <1>     push rax    ;Push on stack the drive number
    72 00002C03 488D3D(02C50300)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    73 00002C0A E804030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    74 00002C0F 7306                <1>     jnc .fcbOk
    75 00002C11 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    76 00002C12 E9893E0000          <1>     jmp fcbErrExit
    77                              <1> .fcbOk:
    78 00002C17 488D3D(02C50300)    <1>     lea rdi, buffer1
    79 00002C1E E8F5E7FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    80 00002C23 7306                <1>     jnc .fileFound
    81 00002C25 5B                  <1>     pop rbx
    82 00002C26 E9753E0000          <1>     jmp fcbErrExit
    83                              <1> .fileFound:
    84                              <1> ;Now we build an FFBlock internally
    85 00002C2B 488D3D(13C60300)    <1>     lea rdi, dosffblock
    86 00002C32 57                  <1>     push rdi
    87 00002C33 E80AE7FFFF          <1>     call setupFFBlock
    88 00002C38 5E                  <1>     pop rsi
    89                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    90 00002C39 488B3D(FAC60300)    <1>     mov rdi, qword [workingFCB]
    91 00002C40 F605(DBC60300)FF    <1>     test byte [extFCBFlag], -1
    92 00002C47 7407                <1>     jz .notExt2
    93 00002C49 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    94                              <1> .notExt2:
    95 00002C50 5B                  <1>     pop rbx ;Get back the drive number in bl
    96 00002C51 85DB                <1>     test ebx, ebx
    97 00002C53 7509                <1>     jnz .notCurrentDrive
    98 00002C55 0FB61D(16C40300)    <1>     movzx ebx, byte [currentDrv]
    99 00002C5C FFC3                <1>     inc ebx ;Turn into a 1 based drive number
   100                              <1> .notCurrentDrive:
   101 00002C5E AC                  <1>     lodsb   ;Get search drive from FFBlock in al
   102 00002C5F 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
   103 00002C62 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
   104 00002C67 A5                  <1>     movsd
   105 00002C68 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
   106 00002C69 488B3D(FCC30300)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
   107 00002C70 488D35(3EC60300)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
   108 00002C77 F605(DBC60300)FF    <1>     test byte [extFCBFlag], -1
   109 00002C7E 7412                <1>     jz .notExt3
   110 00002C80 B8FFFFFFFF          <1>     mov eax, -1
   111 00002C85 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
   112 00002C86 FFC0                <1>     inc eax ;Make it zero
   113 00002C88 AB                  <1>     stosd
   114 00002C89 AA                  <1>     stosb   ;Store 5 bytes of zero
   115 00002C8A 0FB605(DCC60300)    <1>     movzx eax, byte [searchAttr]
   116 00002C91 AA                  <1>     stosb   ;Store the search attributes
   117                              <1> .notExt3:
   118 00002C92 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
   119 00002C94 AA                  <1>     stosb
   120 00002C95 B904000000          <1>     mov ecx, fatDirEntry_size/8
   121 00002C9A F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
   122 00002C9D E9FB3D0000          <1>     jmp fcbGoodExit
   123                              <1>     
   124                              <1> findNextFileFCB:   ;ah = 12h
   125 00002CA2 488915(FAC60300)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
   126 00002CA9 C605(DBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
   127 00002CB0 C605(DCC60300)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
   128 00002CB7 4889D6              <1>     mov rsi, rdx
   129                              <1> 
   130 00002CBA 803EFF              <1>     cmp byte [rsi], -1
   131 00002CBD 7514                <1>     jne .notExt
   132 00002CBF FE0D(DBC60300)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
   133 00002CC5 4881C606000000      <1>     add rsi, exFcb.attribute
   134 00002CCC AC                  <1>     lodsb   ;Get search attr in al
   135 00002CCD 8805(DCC60300)      <1>     mov byte [searchAttr], al
   136                              <1> .notExt:
   137                              <1>     ;rsi points to drive letter
   138 00002CD3 488D3D(13C60300)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   139 00002CDA 31C0                <1>     xor eax, eax
   140 00002CDC AC                  <1>     lodsb   ;Get the FCB drive letter
   141 00002CDD 50                  <1>     push rax    ;Push drive letter on the stack
   142 00002CDE 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   143 00002CE1 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   144 00002CE2 B905000000          <1>     mov ecx, 5
   145 00002CE7 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   146 00002CE9 FF35(FCC30300)      <1>     push qword [currentDTA] ;Save original currentDTA
   147 00002CEF 488D3D(13C60300)    <1>     lea rdi, dosffblock
   148 00002CF6 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   149 00002CF7 8F05(FCC30300)      <1>     pop qword [currentDTA]
   150 00002CFD E8F0E2FFFF          <1>     call findNextMain
   151 00002D02 8F05(FCC30300)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   152 00002D08 0F831DFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   153 00002D0E 488B3D(FAC60300)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   154 00002D15 F607FF              <1>     test byte [rdi], -1
   155 00002D18 7407                <1>     jz .notExt2
   156 00002D1A 4881C707000000      <1>     add rdi, exFcb.driveNum
   157                              <1> .notExt2:
   158 00002D21 5B                  <1>     pop rbx ;Get the drive letter back into bl
   159 00002D22 881F                <1>     mov byte [rdi], bl
   160 00002D24 E9773D0000          <1>     jmp fcbErrExit  ;And exit bad
   161                              <1> 
   162                              <1> deleteFileFCB:     ;ah = 13h
   163 00002D29 488D3D(02C50300)    <1>     lea rdi, buffer1
   164 00002D30 57                  <1>     push rdi
   165 00002D31 E8DD010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   166 00002D36 5F                  <1>     pop rdi ;Point rdi to the canonised path
   167 00002D37 0F82633D0000        <1>     jc fcbErrExit
   168 00002D3D E8D6E6FFFF          <1>     call getFilePathNoCanon ;Get the file
   169 00002D42 0F82583D0000        <1>     jc fcbErrExit
   170 00002D48 E8070E0000          <1>     call outerDeleteMain
   171 00002D4D 0F824D3D0000        <1>     jc fcbErrExit
   172 00002D53 E9453D0000          <1>     jmp fcbGoodExit
   173                              <1> 
   174                              <1> renameFileFCB:     ;ah = 17h
   175                              <1> ;Input: rdx -> User FCB
   176 00002D58 488915(FAC60300)    <1>     mov qword [workingFCB], rdx
   177                              <1>     ;First we get the drive letter 
   178 00002D5F 4889D6              <1>     mov rsi, rdx
   179 00002D62 803EFF              <1>     cmp byte [rsi], -1
   180 00002D65 7507                <1>     jne .notExt
   181 00002D67 4881C607000000      <1>     add rsi, exFcb.driveNum
   182                              <1> .notExt:
   183 00002D6E 31C0                <1>     xor eax, eax
   184 00002D70 AC                  <1>     lodsb
   185 00002D71 50                  <1>     push rax    ;Push the drive letter on the stack for now
   186 00002D72 488D3D(02C50300)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   187 00002D79 E895010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   188 00002D7E 723D                <1>     jc .badPop
   189 00002D80 FF35(02C60300)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   190 00002D86 8F05(0AC60300)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   191 00002D8C 58                  <1>     pop rax ;Get drive letter back
   192 00002D8D 488D3D(82C50300)    <1>     lea rdi, buffer2
   193 00002D94 E84E010000          <1>     call fcbInitName2
   194 00002D99 7223                <1>     jc short .bad
   195 00002D9B 488B05(0AC60300)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   196 00002DA2 488705(02C60300)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   197 00002DA9 488905(0AC60300)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   198 00002DB0 E8EE090000          <1>     call renameMain
   199 00002DB5 0F83E23C0000        <1>     jnc fcbGoodExit
   200 00002DBB EB01                <1>     jmp short .bad
   201                              <1> .badPop:
   202 00002DBD 5B                  <1>     pop rbx ;Pop drive number off stack
   203                              <1> .bad:
   204 00002DBE E9DD3C0000          <1>     jmp fcbErrExit
   205                              <1> 
   206                              <1> getFileSizeFCB:    ;ah = 23h
   207                              <1> ;This function which can be used to test existance of file without opening it 
   208                              <1> ;Input: rdx -> FCB
   209 00002DC3 488915(FAC60300)    <1>     mov qword [workingFCB], rdx
   210 00002DCA 488D3D(02C50300)    <1>     lea rdi, buffer1
   211 00002DD1 57                  <1>     push rdi
   212 00002DD2 E83C010000          <1>     call fcbInitRoutine
   213 00002DD7 5F                  <1>     pop rdi
   214 00002DD8 0F82C23C0000        <1>     jc fcbErrExit
   215 00002DDE E835E6FFFF          <1>     call getFilePathNoCanon
   216 00002DE3 0F82B73C0000        <1>     jc fcbErrExit
   217 00002DE9 8B05(5AC60300)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   218                              <1>     ;Now we gotta set up FCB randRecrd Field
   219 00002DEF 488B35(FAC60300)    <1>     mov rsi, qword [workingFCB]
   220 00002DF6 803EFF              <1>     cmp byte [rsi], -1
   221 00002DF9 7507                <1>     jne .notExtended
   222 00002DFB 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   223                              <1> .notExtended:
   224                              <1> ;rsi points to the drive number now
   225 00002E02 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   226 00002E06 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   227 00002E08 85D2                <1>     test edx, edx
   228 00002E0A 7402                <1>     jz .noRemainder
   229 00002E0C FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   230                              <1> .noRemainder:
   231 00002E0E 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   232 00002E11 E9873C0000          <1>     jmp fcbGoodExit
   233                              <1> 
   234                              <1> setDTA:            ;ah = 1Ah, Always can be used
   235                              <1> ;Called with:
   236                              <1> ;   rdx = Pointer to the new default DTA
   237 00002E16 488B1D(5FC40300)    <1>     mov rbx, qword [oldRSP]
   238 00002E1D 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   239 00002E21 488915(FCC30300)    <1>     mov qword [currentDTA], rdx
   240 00002E28 C3                  <1>     ret
   241                              <1> 
   242                              <1> getDTA:            ;ah = 2Fh, Always can be used
   243 00002E29 488B15(5FC40300)    <1>     mov rdx, qword [oldRSP]
   244 00002E30 488B1D(FCC30300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   245 00002E37 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   246                              <1>     return
    18                              <2> %%_ret:
    19 00002E3B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   247                              <1>     
   248                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   249                              <1> ;Input:
   250                              <1> ;rsi points to a command line to parse
   251                              <1> ;rdi points to a future unopened FCB
   252                              <1> ;al = parsing control bits. 
   253                              <1> ; al[0] = If set, leading filename separators are scanned off
   254                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   255                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   256                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   257                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   258                              <1> ;        al = 1 => Wildcards found
   259                              <1> ;        al = -1 => Drive specifier invalid
   260                              <1> ;rsi -> to the first char past the parsed filename
   261                              <1> ;rdi -> First byte of the FCB 
   262                              <1> 
   263 00002E3C E872010000          <1>     call parseNameToFCB
   264 00002E41 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   265 00002E42 E8D1370000          <1>     call getUserRegs
   266 00002E47 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   267                              <1>     return  ;al now contains dl, the signature, special unique return type
    18                              <2> %%_ret:
    19 00002E4A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   268                              <1> 
   269                              <1> ;=================================================================
   270                              <1> ;=================================================================
   271                              <1> ;These functions CHECK the Volume type and fail if the volume is 
   272                              <1> ; not compatible.
   273                              <1> ;=================================================================
   274                              <1> ;=================================================================
   275                              <1> openFileFCB:       ;ah = 0Fh
   276 00002E4B B805000000          <1>     mov eax, errAccDen
   277 00002E50 E94B3C0000          <1>     jmp fcbErrExit
   278                              <1> closeFileFCB:      ;ah = 10h
   279 00002E55 B805000000          <1>     mov eax, errAccDen
   280 00002E5A E9413C0000          <1>     jmp fcbErrExit
   281                              <1> sequentialReadFCB: ;ah = 14h
   282 00002E5F B805000000          <1>     mov eax, errAccDen
   283 00002E64 E9373C0000          <1>     jmp fcbErrExit
   284                              <1> sequentialWriteFCB:;ah = 15h
   285 00002E69 B805000000          <1>     mov eax, errAccDen
   286 00002E6E E92D3C0000          <1>     jmp fcbErrExit
   287                              <1> createFileFCB:     ;ah = 16h
   288 00002E73 B805000000          <1>     mov eax, errAccDen
   289 00002E78 E9233C0000          <1>     jmp fcbErrExit
   290                              <1> randomReadFCB:     ;ah = 21h
   291 00002E7D B805000000          <1>     mov eax, errAccDen
   292 00002E82 E9193C0000          <1>     jmp fcbErrExit
   293                              <1> randomWriteFCB:    ;ah = 22h
   294 00002E87 B805000000          <1>     mov eax, errAccDen
   295 00002E8C E90F3C0000          <1>     jmp fcbErrExit
   296                              <1> setRelRecordFCB:   ;ah = 24h
   297 00002E91 B805000000          <1>     mov eax, errAccDen
   298 00002E96 E9053C0000          <1>     jmp fcbErrExit
   299                              <1> randBlockReadFCB:  ;ah = 27h
   300 00002E9B B805000000          <1>     mov eax, errAccDen
   301 00002EA0 E9FB3B0000          <1>     jmp fcbErrExit
   302                              <1> randBlockWriteFCB: ;ah = 28h
   303 00002EA5 B805000000          <1>     mov eax, errAccDen
   304 00002EAA E9F13B0000          <1>     jmp fcbErrExit
   305                              <1> 
   306                              <1> 
   307                              <1> ;--------------------------------
   308                              <1> ;  Common FCB related Routines  :
   309                              <1> ;--------------------------------
   310                              <1> fcbCheckDriveType:
   311                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   312                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   313                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   314                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   315                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   316                              <1> ;If a net CDS, automatic fail (for now).
   317 00002EAF C605(D9C60300)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   318 00002EB6 51                  <1>     push rcx
   319 00002EB7 57                  <1>     push rdi
   320 00002EB8 55                  <1>     push rbp
   321 00002EB9 9C                  <1>     pushfq
   322 00002EBA F605(49C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   323 00002EC1 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   324 00002EC3 E8E3360000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   325 00002EC8 7218                <1>     jc .exit
   326                              <1>     ;rdi has cds ptr now
   327 00002ECA 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   328 00002ECE E885DDFFFF          <1>     call getFATtype
   329 00002ED3 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   330 00002ED9 7707                <1>     ja .exit
   331                              <1> .okToGo:
   332 00002EDB C605(D9C60300)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   333                              <1> .exit:
   334 00002EE2 9D                  <1>     popfq
   335 00002EE3 5D                  <1>     pop rbp
   336 00002EE4 5F                  <1>     pop rdi
   337 00002EE5 59                  <1>     pop rcx
   338                              <1>     return
    18                              <2> %%_ret:
    19 00002EE6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   339                              <1> fcbInitName2:
   340                              <1> ;Must be called after fcbInitRoutine has been run once
   341                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   342                              <1> ;       rdx -> UserFCB
   343                              <1> ;       eax[0] = Drive number (0 based)
   344 00002EE7 55                  <1>     push rbp
   345 00002EE8 4889E5              <1>     mov rbp, rsp
   346 00002EEB 4881EC0F000000      <1>     sub rsp, 15
   347 00002EF2 57                  <1>     push rdi
   348 00002EF3 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   349 00002EF7 4889D6              <1>     mov rsi, rdx
   350 00002EFA F605(DBC60300)FF    <1>     test byte [extFCBFlag], -1
   351 00002F01 7407                <1>     jz .notExtended
   352 00002F03 4881C607000000      <1>     add rsi, exFcb.driveNum
   353                              <1> .notExtended:
   354                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   355 00002F0A 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   356 00002F11 EB36                <1>     jmp short fcbInitRoutine.rename2EP
   357                              <1> fcbInitRoutine:
   358                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   359                              <1> ;Input: rdx -> User FCB
   360                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   361 00002F13 55                  <1>     push rbp
   362 00002F14 4889E5              <1>     mov rbp, rsp
   363 00002F17 4881EC0F000000      <1>     sub rsp, 15    ;Make 15 char space on stack
   364                              <1>     ;This space is used to store X:FILENAME.EXT,0
   365 00002F1E 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   366 00002F1F 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   367 00002F23 C605(DBC60300)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   368 00002F2A C605(DCC60300)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   369 00002F31 E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   370 00002F36 7410                <1>     jz .notExtended
   371 00002F38 C605(DBC60300)FF    <1>     mov byte [extFCBFlag], -1
   372 00002F3F 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   373 00002F42 8805(DCC60300)      <1>     mov byte [searchAttr], al
   374                              <1> .notExtended:
   375 00002F48 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   376                              <1> .rename2EP:
   377 00002F49 E857370000          <1>     call getCDS ;Get the CDS (preserves rdi)
   378 00002F4E 723F                <1>     jc .badDisk
   379 00002F50 E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   380 00002F55 488D1DF5D2FFFF      <1>     lea rbx, asciiCharProperties
   381 00002F5C B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   382 00002F61 56                  <1>     push rsi    ;rsi -> fcb.filename
   383                              <1> .nameCharCheck:
   384 00002F62 AC                  <1>     lodsb   ;Get the char in al
   385 00002F63 D7                  <1>     xlatb   ;Get the char signature in al
   386 00002F64 A808                <1>     test al, 8
   387 00002F66 7427                <1>     jz .badDisk
   388 00002F68 FFC9                <1>     dec ecx
   389 00002F6A 75F6                <1>     jnz .nameCharCheck
   390 00002F6C 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   391 00002F6D 4889FB              <1>     mov rbx, rdi    ;Save ptr to stackbuffer + 2 (past X:)
   392 00002F70 E88DE3FFFF          <1>     call FCBToAsciiz
   393 00002F75 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   394 00002F76 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0?
   395 00002F79 7414                <1>     je .badDisk
   396 00002F7B 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   397 00002F7F 55                  <1>     push rbp
   398 00002F80 E853E4FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename
   399 00002F85 5D                  <1>     pop rbp
   400 00002F86 7207                <1>     jc .badDisk
   401 00002F88 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   402 00002F8D EB03                <1>     jmp short .jiggleStack  ;Skip the error
   403                              <1> .badDisk:
   404 00002F8F B003                <1>     mov al, errPnf  ;DOS does this... so will I
   405 00002F91 F9                  <1>     stc
   406                              <1> .jiggleStack:
   407 00002F92 4889EC              <1>     mov rsp, rbp
   408 00002F95 5D                  <1>     pop rbp
   409                              <1> .exit:
   410                              <1>     return
    18                              <2> %%_ret:
    19 00002F96 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> storeZeroBasedDriveNumber:
   413                              <1> ;Input: al => 0 based drive letter
   414                              <1> ;       rdi -> Points to buffer to store the X: in
   415 00002F97 FEC0                <1>     inc al
   416                              <1> storeOneBasedDriveNumber:
   417                              <1> ;Input: al => 1 based drive letter
   418                              <1> ;       rdi -> Points to buffer to store the X: in
   419 00002F99 0440                <1>     add al, "@"
   420 00002F9B B43A                <1>     mov ah, ":"
   421 00002F9D 66AB                <1>     stosw
   422                              <1>     return
    18                              <2> %%_ret:
    19 00002F9F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   423                              <1> 
   424                              <1> isFCBExtended:
   425                              <1> ;Input: rdx = FCB ptr
   426                              <1> ;Output: rsi -> Drive letter of FCB
   427                              <1> ;        rdx -> FCB first byte
   428                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   429 00002FA0 4889D6              <1>     mov rsi, rdx
   430 00002FA3 803EFF              <1>     cmp byte [rsi], -1
   431 00002FA6 7507                <1>     jne .notExtended
   432 00002FA8 4881C607000000      <1>     add rsi, exFcb.driveNum
   433                              <1> .notExtended:
   434 00002FAF 4839F2              <1>     cmp rdx, rsi
   435                              <1>     return
    18                              <2> %%_ret:
    19 00002FB2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   436                              <1> 
   437                              <1> parseNameToFCB:
   438                              <1> ;rsi points to a command line to parse
   439                              <1> ;rdi points to a future unopened FCB
   440                              <1> ;al = parsing control bits. 
   441                              <1> ; al[0] = If set, leading filename separators are scanned off
   442                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   443                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   444                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   445                              <1> ;
   446                              <1> ;Separators include : . ; , = + TAB SPACE
   447                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   448                              <1> 
   449 00002FB3 C605(71C40300)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   450 00002FBA 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   451 00002FBC A802                <1>     test al, 2  ;Set drive letter>
   452 00002FBE 7402                <1>     jz .skipDriveLetter
   453 00002FC0 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   454                              <1> .skipDriveLetter:
   455 00002FC2 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   456 00002FC5 B908000000          <1>     mov ecx, 8  ;Copy Filename
   457 00002FCA A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   458 00002FCC 93                  <1>     xchg eax, ebx
   459 00002FCD B020                <1>     mov al, " " ;Clear the field
   460 00002FCF 7405                <1>     jz .clearFilenameField
   461 00002FD1 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   462 00002FD4 31C9                <1>     xor ecx, ecx
   463                              <1> .clearFilenameField:
   464 00002FD6 F3AA                <1>     rep stosb
   465 00002FD8 B903000000          <1>     mov ecx, 3
   466 00002FDD F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   467 00002FE0 7405                <1>     jz .clearExtensionField
   468 00002FE2 4801CF              <1>     add rdi, rcx
   469 00002FE5 31C9                <1>     xor ecx, ecx
   470                              <1> .clearExtensionField:
   471 00002FE7 F3AA                <1>     rep stosb
   472 00002FE9 91                  <1>     xchg eax, ecx
   473 00002FEA AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   474 00002FEB 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   475 00002FF2 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   476 00002FF5 740F                <1>     jz .dontScanOff
   477 00002FF7 E896380000          <1>     call skipSpacesAndTabs
   478 00002FFC E89D380000          <1>     call isCharDelimType
   479 00003001 7508                <1>     jnz .skipIfDelim
   480 00003003 48FFC6              <1>     inc rsi
   481                              <1> .dontScanOff:
   482 00003006 E887380000          <1>     call skipSpacesAndTabs  ;Skip a char
   483                              <1> .skipIfDelim:
   484 0000300B E82D370000          <1>     call uppercaseCharAtPtr 
   485 00003010 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   486 00003012 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   487 00003015 7519                <1>     jne .skipSettingDriveLetter
   488 00003017 48FFC6              <1>     inc rsi ;Goto next char
   489 0000301A 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   490 0000301C 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   491 0000301E 50                  <1>     push rax    ;Save the 1 based drive letter
   492 0000301F E818360000          <1>     call setDrive   ;Verifies if this drive letter is valid
   493 00003024 58                  <1>     pop rax
   494 00003025 7302                <1>     jnc .validDriveLetter
   495                              <1> .invalidDriveLetter:
   496 00003027 B2FF                <1>     mov dl, -1
   497                              <1> .validDriveLetter:
   498 00003029 AA                  <1>     stosb
   499 0000302A 48FFC6              <1>     inc rsi ;Align pointers...
   500 0000302D 48FFCF              <1>     dec rdi 
   501                              <1> .skipSettingDriveLetter:
   502 00003030 48FFCE              <1>     dec rsi
   503 00003033 48FFC7              <1>     inc rdi
   504                              <1>     
   505                              <1> getFCBFilename:
   506                              <1> ;Input: rsi points to first char of filename
   507                              <1> ;       rdi points to storage buffer for filename
   508                              <1> ;       dl contains the signature if drive invalid
   509                              <1> ;Output:
   510                              <1> ;       Fields filled
   511                              <1> ;       al = Return signature
   512 00003036 B908000000          <1>     mov ecx, 8
   513 0000303B E815000000          <1>     call getFCBNameField
   514 00003040 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   515 00003043 750D                <1>     jne .noExt
   516 00003045 B903000000          <1>     mov ecx, 3
   517 0000304A 48FFC6              <1>     inc rsi ;Skip this char
   518 0000304D E814000000          <1>     call forceFCBNameField
   519                              <1> .noExt:
   520 00003052 88D0                <1>     mov al, dl  ;Store the return signature
   521                              <1>     return
    18                              <2> %%_ret:
    19 00003054 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   522                              <1> 
   523                              <1> getFCBNameField:
   524                              <1> ;Checks if the field is appropriate before copying it
   525 00003055 E8E3360000          <1>     call uppercaseCharAtPtr
   526 0000305A 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   527 0000305C 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   528 0000305F 48FFCE              <1>     dec rsi ;Point to previous char
   529                              <1>     return
    18                              <2> %%_ret:
    19 00003062 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   530                              <1> .okName:
   531 00003063 48FFCE              <1>     dec rsi ;Go back now a char
   532                              <1> forceFCBNameField:
   533                              <1> ;Forcefully copies the name from rsi to rdi
   534 00003066 E8D2360000          <1>     call uppercaseCharAtPtr
   535 0000306B 7226                <1>     jc .terminatingSpace
   536 0000306D 750D                <1>     jnz .notSep
   537 0000306F F605(71C40300)FF    <1>     test byte [fcbSpaceOk], -1
   538 00003076 741B                <1>     jz .terminatingSpace
   539 00003078 3C20                <1>     cmp al, " "
   540 0000307A 7517                <1>     jne .terminatingSpace
   541                              <1> .notSep:
   542 0000307C 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   543 0000307F FFC9                <1>     dec ecx
   544 00003081 3C2A                <1>     cmp al, "*" ;Big wildcard?
   545 00003083 7504                <1>     jne .notBigWildcard
   546 00003085 B03F                <1>     mov al, "?"
   547 00003087 F3AA                <1>     rep stosb
   548                              <1> .notBigWildcard:
   549 00003089 AA                  <1>     stosb   ;Stores the uppercased char
   550 0000308A 3C3F                <1>     cmp al, "?"
   551 0000308C 75D8                <1>     jne forceFCBNameField
   552 0000308E 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   553 00003091 EBD3                <1>     jmp short forceFCBNameField
   554                              <1> .terminatingSpace:
   555 00003093 B020                <1>     mov al, " "
   556 00003095 AA                  <1>     stosb
   557 00003096 48FFCE              <1>     dec rsi ;Point to this trailing space
   558                              <1>     return
    18                              <2> %%_ret:
    19 00003099 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    31                                  %include "./Source/Kernel/FileIO/hdlFunc.asm"
    32                              <1> ;-----------------------------------:
    33                              <1> ;    File Handle Kernel routines    :
    34                              <1> ;-----------------------------------:
    35                              <1> 
    36                              <1> createFileHdl:     ;ah = 3Ch, handle function
    37                              <1> ;Input: cx = File attributes (same as search attributes for find first)
    38                              <1> ;       rdx = Ptr to ASCIZ filename to create
    39                              <1> ;Output: CF=CY => ax = File handle
    40                              <1> ;        CF=NC => al = Error code
    41 0000309A 51                  <1>     push rcx    ;Save file attributes on stack
    42 0000309B 488D0D590C0000      <1>     lea rcx, createMain
    43 000030A2 C605(DCC60300)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive w/ directory
    44 000030A9 EB1D                <1>     jmp short openFileHdl.openCommon
    45                              <1> openFileHdl:       ;ah = 3Dh, handle function
    46                              <1> ;Input: al = Open mode, to open file with
    47                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    48                              <1> ;If called from 5D00h, cl = File attributes too
    49                              <1> ;Output: CF=CY => ax = File handle
    50                              <1> ;        CF=NC => al = Error code
    51 000030AB BB16000000          <1>     mov ebx, dirInclusive
    52 000030B0 F605(E2C60300)FF    <1>     test byte [dosInvoke], -1
    53 000030B7 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    54 000030BA 880D(DCC60300)      <1>     mov byte [searchAttr], cl
    55 000030C0 488D0D510B0000      <1>     lea rcx, openMain  
    56 000030C7 50                  <1>     push rax    ;Save open mode on stack
    57                              <1> .openCommon:
    58 000030C8 4889D6              <1>     mov rsi, rdx
    59 000030CB E80A370000          <1>     call checkPathspecOK
    60 000030D0 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    61                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    62 000030D2 58                  <1>     pop rax
    63 000030D3 B803000000          <1>     mov eax, errPnf
    64 000030D8 E9E3390000          <1>     jmp extErrExit
    65                              <1> .pathOk:
    66 000030DD E893390000          <1>     call dosCrit1Enter
    67 000030E2 E85D170000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    68 000030E7 E893390000          <1>     call dosCrit1Exit
    69 000030EC 0F82AF000000        <1>     jc .exitBad
    70                              <1>     ;Now save variables
    71 000030F2 E882160000          <1>     call setCurrentSFT
    72 000030F7 66891D(1AC70300)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    73 000030FE E8F3170000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    74 00003103 0F8298000000        <1>     jc .exitBad
    75 00003109 66891D(1CC70300)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    76 00003110 48893D(0AC70300)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    77 00003117 0FB71D(1AC70300)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    78 0000311E 881F                <1>     mov byte [rdi], bl  ;And open the file
    79                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    80 00003120 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    81 00003123 488D3D(02C50300)    <1>     lea rdi, buffer1    ;Build the full path here
    82 0000312A 51                  <1>     push rcx    ;Save the procedure to call on stack
    83 0000312B E8F3E2FFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    84 00003130 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    85 00003131 488D05E00A0000      <1>     lea rax, openMain   ;Get EA for open procedure
    86 00003138 488B35(12C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    87 0000313F 7319                <1>     jnc .proceedCall
    88                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    89                              <1> ;                              For Create New, Bad but handled later.
    90                              <1> ;If CF=CY => Path doesnt all exist:
    91                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    92                              <1> ;Now we check if we are creating or opening.
    93 00003141 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    94 00003144 7409                <1>     je .badPathspec ;Jmp to error if opening file that doesnt exist
    95 00003146 F605(E5C60300)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    96 0000314D 750B                <1>     jnz .proceedCall    ;If so, proceed.
    97                              <1> .badPathspec:
    98 0000314F 58                  <1>     pop rax
    99 00003150 B802000000          <1>     mov eax, errFnf
   100 00003155 E957000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
   101                              <1> .proceedCall:
   102                              <1> ;If the pathspec exists, recall that for create, we truncate.
   103 0000315A 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
   104 0000315C 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
   105 0000315F 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
   106 00003160 750B                <1>     jne .callProc   ;Jump if we are creating
   107                              <1>     ;al means openmode here
   108 00003162 A880                <1>     test al, 80h    ;No Inherit bit set?
   109 00003164 7407                <1>     jz .callProc
   110 00003166 247F                <1>     and al, 7Fh     ;Clear this bit
   111 00003168 B900100000          <1>     mov ecx, devNoInherit
   112                              <1> .callProc:
   113 0000316D 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
   114 00003173 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
   115 00003179 51                  <1>     push rcx    ;Save the device word 
   116 0000317A FFD3                <1>     call rbx    ;Enter with open mode in 
   117 0000317C 59                  <1>     pop rcx
   118 0000317D 488B35(12C70300)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   119 00003184 722B                <1>     jc .exitBad2
   120 00003186 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   121 0000318B 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   122 0000318F 0FB705(1CC70300)    <1>     movzx eax, word [currentHdl]
   123 00003196 FF15(04C10300)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   124 0000319C E911390000          <1>     jmp extGoodExit ;Save ax and return OK
   125                              <1> .exitBad:
   126 000031A1 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   127 000031A2 5B                  <1>     pop rbx ;Pop the word from the stack
   128 000031A3 66C705(1AC70300)FF- <1>     mov word [currentNdx], -1
   128 000031AB FF                  <1>
   129 000031AC E90F390000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   130                              <1> .exitBad2:
   131                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   132 000031B1 488B35(0AC70300)    <1>     mov rsi, qword [curHdlPtr]
   133 000031B8 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   134 000031BB 488B35(12C70300)    <1>     mov rsi, qword [currentSFT]
   135 000031C2 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   136 000031C7 66C705(1AC70300)FF- <1>     mov word [currentNdx], -1
   136 000031CF FF                  <1>
   137 000031D0 E9EB380000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   138                              <1> 
   139                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   140                              <1> ;Input: bx = file handle to close
   141 000031D5 E832170000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   142 000031DA 0F82E0380000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   143 000031E0 E894150000          <1>     call setCurrentSFT  ;Set this as the current SFT
   144                              <1>     ;Check count to see if we need to check share mode
   145 000031E5 31C0                <1>     xor eax, eax    ;Preset ax to 0
   146 000031E7 66813F0100          <1>     cmp word [rdi], 1   ;Opened once only, not shared, no need for share check
   147 000031EC 7406                <1>     je .skipShareCheck
   148                              <1>     ;Now check sharing mode
   149 000031EE 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   150 000031F2 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   151                              <1> .skipShareCheck:
   152 000031F4 50                  <1>     push rax    ;Save the share mode on stack
   153 000031F5 E8E60D0000          <1>     call closeMain  ;Call close main!
   154 000031FA 58                  <1>     pop rax 
   155 000031FB 0F82BF380000        <1>     jc extErrExit   ;If an error, exit through error exit
   156 00003201 3C70                <1>     cmp al, netFCBShare ;Do NetFCB check (only if file opened more than once)
   157 00003203 7408                <1>     je .exitOk  ;If sharing mode was net FCB, it had no JFT entry, skip nulling
   158 00003205 E8CE160000          <1>     call getJFTPtr  ;Get the pointer to the JFT entry in rdi
   159 0000320A C607FF              <1>     mov byte [rdi], -1  ;Free JFT entry
   160                              <1> .exitOk:
   161 0000320D 31C0                <1>     xor eax, eax    ;Return value
   162 0000320F E99E380000          <1>     jmp extGoodExit
   163                              <1> 
   164                              <1> readFileHdl:       ;ah = 3Fh, handle function
   165 00003214 488D354C0E0000      <1>     lea rsi, readBytes
   166                              <1> .common:
   167 0000321B E8EC160000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   168 00003220 0F829A380000        <1>     jc extErrExit   ;Error code in al and exit
   169 00003226 E84E150000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   170 0000322B 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   171 0000322D FF35(FCC30300)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   172 00003233 488915(FCC30300)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   173 0000323A FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   174 0000323C 8F05(FCC30300)      <1>     pop qword [currentDTA]
   175 00003242 0F8278380000        <1>     jc extErrExit   ;Error code in al and exit
   176 00003248 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   177 0000324A E95A380000          <1>     jmp extGoodExit2    ;and exit!
   178                              <1> 
   179                              <1> writeFileHdl:      ;ah = 40h, handle function
   180 0000324F 488D353D110000      <1>     lea rsi, writeBytes
   181 00003256 E9C0FFFFFF          <1>     jmp readFileHdl.common
   182                              <1> 
   183                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   184                              <1> ;Here don't allow malformed chars unless it is a network CDS
   185 0000325B BB06000000          <1>     mov ebx, dirIncFiles    ;Inclusive w/o dirs
   186 00003260 F605(E2C60300)FF    <1>     test byte [dosInvoke], -1
   187 00003267 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   188 0000326A 880D(DCC60300)      <1>     mov byte [searchAttr], cl
   189 00003270 4889D6              <1>     mov rsi, rdx
   190 00003273 E862350000          <1>     call checkPathspecOK
   191 00003278 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   192 0000327A 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   193                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   194 0000327C F605(E2C60300)FF    <1>     test byte [dosInvoke], -1
   195 00003283 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   196                              <1> .badPath:
   197 00003285 B803000000          <1>     mov eax, errPnf
   198 0000328A E931380000          <1>     jmp extErrExit
   199                              <1> .pathOk:
   200 0000328F 488D3D(02C50300)    <1>     lea rdi, buffer1
   201 00003296 52                  <1>     push rdx
   202 00003297 E887E1FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   203 0000329C 5A                  <1>     pop rdx
   204 0000329D 0F821D380000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   205                              <1>     ;In the case of a wildcard, recall this will return the first file
   206 000032A3 803D(E4C60300)FF    <1>     cmp byte [fileExist], -1
   207 000032AA 0F8510380000        <1>     jnz extErrExit
   208 000032B0 E89F080000          <1>     call outerDeleteMain
   209 000032B5 0F8205380000        <1>     jc extErrExit
   210 000032BB E9F2370000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   213                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
   214 000032C0 E847160000          <1>     call getSFTPtr
   215 000032C5 0F82F5370000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   216 000032CB 3C03                <1>     cmp al, 3
   217 000032CD 720A                <1>     jb .validFunction
   218 000032CF B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   219 000032D4 E9E7370000          <1>     jmp extErrExit
   220                              <1> .validFunction:
   221 000032D9 3C01                <1>     cmp al, 1
   222 000032DB 7718                <1>     ja .seekend
   223 000032DD 7203                <1>     jb .seekset
   224                              <1> ;Here we are at seekcur, seek from current (signed)
   225 000032DF 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   226                              <1> .seekset:
   227                              <1> ;Seek from the start (unsigned)
   228 000032E2 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   229 000032E5 E82E330000          <1>     call getUserRegs    ;Get user regs in rsi
   230 000032EA 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   231                              <1> .seekExit:
   232 000032ED 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   233 000032F0 E9B4370000          <1>     jmp extGoodExit2    ;Return OK in eax 
   234                              <1> .seekend:
   235                              <1> ;Here we are at seekend, seek from end (signed)
   236 000032F5 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   237 000032FB 7505                <1>     jnz .netCheck
   238                              <1> .proceedDisk:
   239 000032FD 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   240 00003300 EBE0                <1>     jmp short .seekset
   241                              <1> .netCheck:
   242 00003302 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   243 00003308 75F3                <1>     jnz .proceedDisk
   244 0000330A 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   245                              <1>     ;Check it's share mode
   246 0000330E 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   247 00003313 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   248 00003318 7407                <1>     je .netSeek
   249 0000331A 3D30000000          <1>     cmp eax, denyReadShare
   250 0000331F 75DC                <1>     jne .proceedDisk
   251                              <1> .netSeek:
   252 00003321 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   253 00003326 CD4F                <1>     int 4Fh
   254 00003328 73C3                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   255 0000332A E991370000          <1>     jmp extErrExit
   256                              <1> 
   257                              <1> 
   258                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   259 0000332F 3C01                <1>     cmp al, 1
   260 00003331 760A                <1>     jbe .subFuncOk
   261 00003333 B801000000          <1>     mov eax, errInvFnc
   262 00003338 E983370000          <1>     jmp extErrExit
   263                              <1> .subFuncOk:
   264 0000333D 4889D6              <1>     mov rsi, rdx
   265 00003340 89C3                <1>     mov ebx, eax    ;Store function code in bl
   266 00003342 53                  <1>     push rbx
   267 00003343 51                  <1>     push rcx
   268 00003344 E891340000          <1>     call checkPathspecOK
   269 00003349 730C                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   270                              <1> .badPath:
   271 0000334B 59                  <1>     pop rcx
   272 0000334C 5B                  <1>     pop rbx
   273 0000334D B803000000          <1>     mov eax, errPnf
   274 00003352 E969370000          <1>     jmp extErrExit
   275                              <1> .pathOk:
   276 00003357 E864350000          <1>     call checkPathNet 
   277 0000335C 74ED                <1>     jz .badPath ;Or Net paths
   278 0000335E E809350000          <1>     call scanPathWC
   279 00003363 72E6                <1>     jc .badPath ;Dont allow wildcards
   280 00003365 488D3D(02C50300)    <1>     lea rdi, buffer1
   281 0000336C 52                  <1>     push rdx
   282 0000336D C605(DCC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   283 00003374 E8AAE0FFFF          <1>     call getFilePath    ;Get the path for the file to delete
   284 00003379 5A                  <1>     pop rdx
   285 0000337A 59                  <1>     pop rcx
   286 0000337B 5B                  <1>     pop rbx
   287 0000337C 0F823E370000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   288                              <1>     ;In the case of a wildcard, recall this will return the first file
   289 00003382 803D(E4C60300)FF    <1>     cmp byte [fileExist], -1
   290 00003389 0F8531370000        <1>     jnz extErrExit
   291                              <1> 
   292 0000338F E817320000          <1>     call testCDSNet
   293 00003394 730C                <1>     jnc .notNet
   294 00003396 750A                <1>     jnz .notNet ;This type of net ok
   295 00003398 B805000000          <1>     mov eax, errAccDen
   296 0000339D E91E370000          <1>     jmp extErrExit
   297                              <1> .notNet:
   298 000033A2 84DB                <1>     test bl, bl
   299 000033A4 7526                <1>     jnz .setAttribs
   300                              <1>     ;Get attribs here
   301 000033A6 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   302 000033AC 7412                <1>     jz .getDiskAttribs
   303 000033AE B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   304 000033B3 CD4F                <1>     int 4Fh
   305 000033B5 0F8205370000        <1>     jc extErrExit
   306 000033BB E9F2360000          <1>     jmp extGoodExit
   307                              <1> .getDiskAttribs:
   308 000033C0 0FB605(49C60300)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   309 000033C7 E9E6360000          <1>     jmp extGoodExit
   310                              <1> .setAttribs:
   311                              <1>     ;Set attribs here
   312 000033CC 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   313 000033D2 7417                <1>     jz .setDiskAttribs
   314 000033D4 0FB7C9              <1>     movzx ecx, cx
   315 000033D7 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   316 000033D8 B80E110000          <1>     mov eax, 110Eh
   317 000033DD CD4F                <1>     int 4Fh
   318 000033DF 59                  <1>     pop rcx
   319 000033E0 0F82DA360000        <1>     jc extErrExit
   320 000033E6 E9C7360000          <1>     jmp extGoodExit
   321                              <1> .setDiskAttribs:
   322 000033EB E840EBFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   323 000033F0 0F82CA360000        <1>     jc extErrExit
   324 000033F6 F6C118              <1>     test cl, dirVolumeID | dirDirectory
   325 000033F9 740A                <1>     jz .set
   326 000033FB B805000000          <1>     mov eax, errAccDen
   327 00003400 E9BB360000          <1>     jmp extErrExit
   328                              <1> .set:
   329 00003405 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   330 00003408 80E518              <1>     and ch, (dirVolumeID | dirDirectory)    ;Keep these two bits
   331 0000340B 08E9                <1>     or cl, ch
   332 0000340D 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   333 00003410 31C0                <1>     xor eax, eax
   334 00003412 E99B360000          <1>     jmp extGoodExit
   335                              <1> 
   336                              <1> 
   337                              <1> duplicateHandle:   ;ah = 45h, handle function
   338                              <1> ;Input: bx = Handle to duplicate
   339                              <1> ;Output: If ok then ax = New handle
   340 00003417 53                  <1>     push rbx
   341 00003418 E8D9140000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT
   342 0000341D 5B                  <1>     pop rbx
   343 0000341E 0F829C360000        <1>     jc extErrExit   ;Exit if no space
   344 00003424 4889FE              <1>     mov rsi, rdi    ;Points rsi to the free space
   345                              <1> .duplicateCommon:
   346 00003427 E8AC140000          <1>     call getJFTPtr  ;Get a pointer to the JFT entry in rdi for bx
   347 0000342C 4887F7              <1>     xchg rsi, rdi
   348 0000342F AC                  <1>     lodsb   ;Move over the SFT ndx from the old to the new position
   349 00003430 AA                  <1>     stosb
   350 00003431 48FFCE              <1>     dec rsi
   351 00003434 48FFCF              <1>     dec rdi
   352                              <1>     ;rdi now points to new position
   353                              <1>     ;rsi points to old position
   354                              <1>     ;al has SFT ndx
   355 00003437 4889FE              <1>     mov rsi, rdi    ;Move rsi to point to the new position jft position
   356 0000343A 0FB6D8              <1>     movzx ebx, al   ;Move SFTndx into ebx
   357 0000343D E861140000          <1>     call getSFTPtrfromSFTNdx    ;Get the pointer to the SFT in rdi
   358 00003442 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   359                              <1>     ;Now we must return in ax the entry in the JFT 
   360 00003445 488B3D(04C40300)    <1>     mov rdi, qword [currentPSP]
   361 0000344C 488D7F2A            <1>     lea rdi, qword [rdi + psp.jobFileTbl]   ;Point to head of table
   362 00003450 4829FE              <1>     sub rsi, rdi    ;Get the difference of the two in si
   363 00003453 89F0                <1>     mov eax, esi    ;Get the difference as the return code
   364 00003455 E958360000          <1>     jmp extGoodExit
   365                              <1> 
   366                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   367                              <1> ;Input: bx = Handle to duplicate
   368                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   369                              <1>     ;First we close cx if it exists
   370 0000345A 87D9                <1>     xchg ebx, ecx ;Swap cx and bx
   371 0000345C 53                  <1>     push rbx
   372 0000345D 51                  <1>     push rcx
   373 0000345E E872FDFFFF          <1>     call closeFileHdl   ;Close handle 
   374 00003463 59                  <1>     pop rcx
   375 00003464 5B                  <1>     pop rbx
   376 00003465 7309                <1>     jnc .hdlClosed
   377 00003467 3D06000000          <1>     cmp eax, errBadHdl  ;If the handle didnt first exist, just proceed!
   378 0000346C 7402                <1>     je .hdlClosed
   379 0000346E F9                  <1>     stc
   380                              <1>     return    ;The error code is set by errExtExit and CF is set on callerFrame
    18                              <2> %%_ret:
    19 0000346F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   381                              <1> .hdlClosed:
   382                              <1>     ;Else, close was ok, lets duplicate now
   383 00003470 E863140000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   384 00003475 0F8245360000        <1>     jc extErrExit   ;Return bad with error code in al
   385 0000347B 87D9                <1>     xchg ebx, ecx   ;Now get source to duplicate in ebx
   386 0000347D 4889FE              <1>     mov rsi, rdi    ;Put the free space ptr in rsi
   387 00003480 EBA5                <1>     jmp short duplicateHandle.duplicateCommon
   388                              <1> 
   389                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   390                              <1> ;Input: cx = Search Attributes, cl only used
   391                              <1> ;       rdx = Ptr to path to file to look for
   392                              <1> ;       al = Document as needing to be 0 for now
   393                              <1> ;Return:
   394                              <1> ;Data in the DTA or error through AX with CF=CY
   395                              <1> ;CAVEATS!
   396                              <1> ;DTA:attribFnd = 40h => Char dev
   397                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   398 00003482 880D(DCC60300)      <1>     mov byte [searchAttr], cl
   399 00003488 4889D6              <1>     mov rsi, rdx
   400 0000348B E84A330000          <1>     call checkPathspecOK
   401 00003490 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   402 00003492 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   403                              <1> .badPath:
   404 00003494 B803000000          <1>     mov eax, errPnf
   405 00003499 E922360000          <1>     jmp extErrExit
   406                              <1> .pathspecOk:
   407 0000349E FF35(FCC30300)      <1>     push qword [currentDTA]
   408 000034A4 488D3D(13C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   409 000034AB 48893D(FCC30300)    <1>     mov qword [currentDTA], rdi
   410 000034B2 488D3D(02C50300)    <1>     lea rdi, buffer1    ;Build the full path here
   411 000034B9 E865DFFFFF          <1>     call getFilePath
   412                              <1> .findfileExit:
   413 000034BE 8F05(FCC30300)      <1>     pop qword [currentDTA]
   414 000034C4 0F82F6350000        <1>     jc extErrExit
   415 000034CA 488D3D(13C60300)    <1>     lea rdi, dosffblock
   416 000034D1 57                  <1>     push rdi
   417 000034D2 E86BDEFFFF          <1>     call setupFFBlock
   418 000034D7 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   419 000034D8 488B3D(FCC30300)    <1>     mov rdi, qword [currentDTA]
   420 000034DF B92B000000          <1>     mov ecx, ffBlock_size
   421 000034E4 F3A4                <1>     rep movsb   ;Copy the whole block. 
   422                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   423 000034E6 31C0                <1>     xor eax, eax    ;Return value
   424 000034E8 E9C5350000          <1>     jmp extGoodExit ;Exit well
   425                              <1> 
   426                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   427                              <1> ;Input: DTA has the find first block from the previous search
   428 000034ED 488B35(FCC30300)    <1>     mov rsi, qword [currentDTA]
   429 000034F4 488D3D(13C60300)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   430 000034FB B92B000000          <1>     mov ecx, ffBlock_size
   431 00003500 F3A4                <1>     rep movsb
   432 00003502 FF35(FCC30300)      <1>     push qword [currentDTA] ;Save the current DTA address
   433 00003508 488D3D(13C60300)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   434 0000350F 48893D(FCC30300)    <1>     mov qword [currentDTA], rdi
   435 00003516 E8D7DAFFFF          <1>     call findNextMain
   436 0000351B EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   437                              <1> 
   438                              <1> renameFile:        ;ah = 56h
   439                              <1> ;Input: rdx -> Filespec to rename
   440                              <1> ;       rdi -> New filespec
   441                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   442 0000351D 4889D6              <1>     mov rsi, rdx
   443 00003520 BB16000000          <1>     mov ebx, dirInclusive
   444 00003525 F605(E2C60300)FF    <1>     test byte [dosInvoke], -1
   445 0000352C 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   446 0000352F 880D(DCC60300)      <1>     mov byte [searchAttr], cl
   447                              <1>     ;Step 0, verify both paths provided are valid
   448 00003535 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   449 0000353A 7249                <1>     jc .pnfError
   450 0000353C 56                  <1>     push rsi
   451 0000353D 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   452 00003540 E84A000000          <1>     call .renamePathCheck
   453 00003545 5E                  <1>     pop rsi
   454 00003546 723D                <1>     jc .pnfError
   455                              <1>     ;Now we canonicalise the filenames to make life easy
   456 00003548 56                  <1>     push rsi
   457 00003549 4889FE              <1>     mov rsi, rdi
   458 0000354C 488D3D(82C50300)    <1>     lea rdi, buffer2
   459 00003553 E880DEFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   460 00003558 5E                  <1>     pop rsi
   461 00003559 722A                <1>     jc .pnfError
   462                              <1>     ;Now test if first file exists.
   463 0000355B FF35(02C60300)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   464 00003561 8F05(0AC60300)      <1>     pop qword [fname2Ptr]
   465 00003567 488D3D(02C50300)    <1>     lea rdi, buffer1
   466 0000356E E865DEFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   467 00003573 7210                <1>     jc .pnfError  
   468                              <1> 
   469 00003575 E829020000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   470 0000357A 0F8240350000        <1>     jc extErrExit
   471 00003580 E92D350000          <1>     jmp extGoodExit
   472                              <1> .pnfError:
   473 00003585 B803000000          <1>     mov eax, errPnf
   474 0000358A E931350000          <1>     jmp extErrExit
   475                              <1> .renamePathCheck:
   476                              <1> ;Checks if the pathspec in rsi is OK
   477 0000358F 56                  <1>     push rsi
   478 00003590 57                  <1>     push rdi
   479 00003591 E844320000          <1>     call checkPathspecOK
   480 00003596 5F                  <1>     pop rdi
   481 00003597 5E                  <1>     pop rsi
   482 00003598 730D                <1>     jnc .pathOk     ;Path ok 
   483 0000359A 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   484                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   485 0000359C F605(E2C60300)FF    <1>     test byte [dosInvoke], -1
   486 000035A3 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   487                              <1> .badPath:
   488 000035A5 F9                  <1>     stc
   489                              <1>     return
    18                              <2> %%_ret:
    19 000035A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   490                              <1> .pathOk:
   491 000035A7 F8                  <1>     clc
   492                              <1>     return
    18                              <2> %%_ret:
    19 000035A8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   493                              <1> 
   494                              <1> getSetFileDateTime:;ah = 57h
   495 000035A9 3C01                <1>     cmp al, 1
   496 000035AB 760A                <1>     jbe .oksubfun
   497 000035AD B801000000          <1>     mov eax, errInvFnc
   498 000035B2 E909350000          <1>     jmp extErrExit
   499                              <1> .oksubfun:
   500 000035B7 E850130000          <1>     call getSFTPtr  ;Preserves al unless error returned
   501 000035BC 0F82FE340000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   502 000035C2 3C01                <1>     cmp al, 1
   503 000035C4 741C                <1>     je .setTimeDate
   504                              <1>     ;Here we get the Time/Date
   505 000035C6 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   506 000035CA 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   507 000035CE E845300000          <1>     call getUserRegs
   508 000035D3 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   509 000035D7 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   510 000035DB 31C0                <1>     xor eax, eax
   511 000035DD E9D0340000          <1>     jmp extGoodExit
   512                              <1> .setTimeDate:
   513                              <1>     ;Here we set the Time/Date
   514 000035E2 66894F13            <1>     mov word [rdi + sft.wTime], cx
   515 000035E6 66895715            <1>     mov word [rdi + sft.wDate], dx
   516 000035EA 31C0                <1>     xor eax, eax
   517 000035EC E9C1340000          <1>     jmp extGoodExit
   518                              <1> 
   519                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   520                              <1> ;Uses the clock to do it's bidding
   521                              <1> ;cx = file attribute 
   522                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   523                              <1> ;       filename
   524 000035F1 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   525 000035F6 740A                <1>     jz .validAttribs
   526 000035F8 B805000000          <1>     mov eax, errAccDen
   527 000035FD E9BE340000          <1>     jmp extErrExit
   528                              <1> .validAttribs:
   529 00003602 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   530 00003606 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   531 00003609 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   532 0000360E 31C0                <1>     xor eax, eax
   533 00003610 4889D7              <1>     mov rdi, rdx
   534 00003613 F3AE                <1>     rep scasb
   535 00003615 85C9                <1>     test ecx, ecx
   536 00003617 750A                <1>     jnz .nullFnd
   537                              <1>     ;Bad path
   538 00003619 B803000000          <1>     mov eax, errPnf
   539 0000361E E99D340000          <1>     jmp extErrExit
   540                              <1> .nullFnd:
   541 00003623 48FFCF              <1>     dec rdi
   542 00003626 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   543 0000362A E803310000          <1>     call swapPathSeparator
   544 0000362F 7403                <1>     jz .pathsepFnd
   545                              <1>     ;If no pathsep found, force one at rdi
   546 00003631 B05C                <1>     mov al, "\"
   547 00003633 AA                  <1>     stosb
   548                              <1> .pathsepFnd:
   549 00003634 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   550                              <1> .fileCreateLoop:
   551 00003637 55                  <1>     push rbp
   552 00003638 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   553 0000363D 5D                  <1>     pop rbp
   554 0000363E 0FB7C1              <1>     movzx eax, cx
   555 00003641 0FB7D2              <1>     movzx edx, dx
   556 00003644 C1E010              <1>     shl eax, 10h
   557 00003647 09D0                <1>     or eax, edx  ;Add the bits of dx too
   558 00003649 E831000000          <1>     call .writeNybbles
   559 0000364E 31C0                <1>     xor eax, eax
   560 00003650 AA                  <1>     stosb   ;Store terminating null
   561 00003651 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   562 00003654 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   563 00003657 55                  <1>     push rbp
   564 00003658 E85C000000          <1>     call createNewFile
   565 0000365D 5D                  <1>     pop rbp
   566 0000365E 0F834E340000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   567 00003664 0FB705(F0C30300)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   568 0000366B 3D05000000          <1>     cmp eax, errAccDen
   569 00003670 74C5                <1>     je .fileCreateLoop
   570 00003672 3D50000000          <1>     cmp eax, errFilExist
   571 00003677 74BE                <1>     je .fileCreateLoop
   572 00003679 F9                  <1>     stc
   573 0000367A E941340000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   574                              <1> .writeNybbles:
   575                              <1> ;Write the nybbles of eax at rdi
   576 0000367F B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   577                              <1> .wnLp:
   578 00003684 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   579 00003687 50                  <1>     push rax
   580 00003688 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   581 0000368D 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   582 00003692 3D39000000          <1>     cmp eax, '9'
   583 00003697 7605                <1>     jbe .notExtDigit
   584 00003699 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   585                              <1> .notExtDigit:
   586 0000369E AA                  <1>     stosb   ;Store the digit
   587 0000369F 58                  <1>     pop rax
   588 000036A0 FFC9                <1>     dec ecx
   589 000036A2 75E0                <1>     jnz .wnLp
   590                              <1>     return
    18                              <2> %%_ret:
    19 000036A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   591                              <1> 
   592                              <1> .uniqueTimeGet:
   593 000036A5 E8F7F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   594 000036AA 668B0D(FCC40300)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   595 000036B1 668B15(FEC40300)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   596                              <1>     return
    18                              <2> %%_ret:
    19 000036B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   597                              <1> 
   598                              <1> createNewFile:     ;ah = 5Bh
   599 000036B9 51                  <1>     push rcx    ;Save file attributes on stack
   600 000036BA 488D0D27060000      <1>     lea rcx, createNewMain
   601 000036C1 C605(DCC60300)06    <1>     mov byte [searchAttr], dirIncFiles ;Inclusive w/o directory
   602 000036C8 E9FBF9FFFF          <1>     jmp openFileHdl.openCommon
   603                              <1> 
   604                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   605                              <1>     ;Input: bx = File to flush
   606 000036CD E83A120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   607 000036D2 0F82E8330000        <1>     jc extErrExit
   608 000036D8 E89C100000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   609                              <1>     ;Now we check if the device is a char, disk or net file and commit
   610 000036DD E882000000          <1>     call commitMain
   611 000036E2 0F82D8330000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   612                              <1> .exitOk:
   613 000036E8 30C0                <1>     xor al, al
   614 000036EA E8292F0000          <1>     call getUserRegs
   615 000036EF 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   616                              <1>     return
    18                              <2> %%_ret:
    19 000036F2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   617                              <1> 
   618                              <1> lockUnlockFile:    ;ah = 5Ch
   619                              <1> ;ah = 5Ch
   620                              <1> ;al = subfunction
   621                              <1> ;       00h lock region of file
   622                              <1> ;       01h unlock region of file
   623                              <1> ;ebx = file handle
   624                              <1> ;ecx = start offset of region within file
   625                              <1> ;edi = length of region in bytes
   626 000036F3 3C01                <1>     cmp al, 1
   627 000036F5 7757                <1>     ja .badFunction
   628 000036F7 57                  <1>     push rdi
   629 000036F8 E829120000          <1>     call derefSFTPtr
   630 000036FD 730B                <1>     jnc .validHdl
   631 000036FF 58                  <1>     pop rax ;Discard the qword on the stack
   632 00003700 B806000000          <1>     mov eax, errBadHdl
   633 00003705 E9B6330000          <1>     jmp extErrExit
   634                              <1> .validHdl:
   635 0000370A 84C0                <1>     test al, al ;Check if al = 0
   636 0000370C 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   637 0000370D 7424                <1>     jz .lockFileRegion
   638 0000370F 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   639 00003715 740B                <1>     jz .unlockShare ;Jump if a local file only
   640 00003717 50                  <1>     push rax
   641 00003718 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   642 0000371D CD4F                <1>     int 4Fh
   643 0000371F 5B                  <1>     pop rbx
   644 00003720 EB06                <1>     jmp short .exitSelect
   645                              <1> .unlockShare:
   646 00003722 FF15(DCC00300)      <1>     call qword [unlockFileShare]    ;Call share hook
   647                              <1> .exitSelect:
   648 00003728 0F8292330000        <1>     jc extErrExit
   649 0000372E E97F330000          <1>     jmp extGoodExit
   650                              <1> .lockFileRegion:
   651 00003733 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   652 00003739 740B                <1>     jz .lockShare   ;Jump if a local file only
   653 0000373B 50                  <1>     push rax
   654 0000373C B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   655 00003741 CD4F                <1>     int 4Fh
   656 00003743 5B                  <1>     pop rbx
   657 00003744 EBE2                <1>     jmp short .exitSelect
   658                              <1> .lockShare:
   659 00003746 FF15(D4C00300)      <1>     call qword [lockFileShare]  ;Call share hook
   660 0000374C EBDA                <1>     jmp short .exitSelect
   661                              <1> .badFunction:
   662 0000374E B801000000          <1>     mov eax, errInvFnc
   663 00003753 668905(F0C30300)    <1>     mov word [errorExCde], ax
   664 0000375A E961330000          <1>     jmp extErrExit
   665                              <1> ;STUB FUNCTIONS
   666                              <1> setHandleCount:    ;ah = 67h
   667 0000375F E95C330000          <1>     jmp extErrExit
   668                              <1> 
   669                              <1> ;-----------------------------------:
   670                              <1> ;       Main File IO Routines       :
   671                              <1> ;-----------------------------------:
   672                              <1> commitMain:
   673                              <1> ;Commits the current SFT 
   674 00003764 E818100000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   675 00003769 0FB74705            <1>     movzx eax, word [rdi + sft.wDeviceInfo]
   676 0000376D A9C0000000          <1>     test eax, devCharDev | blokFileNoFlush
   677                              <1>     retnz   ;Return if nothing has been written or a char dev
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29                              <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34 00003772 7401                <3>  j%-1 short %%a
    35                              <3>  return
    18                              <4> %%_ret:
    19 00003774 C3                  <4>  ret
    20                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   678 00003775 66A90080            <1>     test ax, devRedirDev
   679 00003779 7508                <1>     jnz .notNet
   680                              <1>     ;Commit file net redir call and exit
   681 0000377B B807110000          <1>     mov eax, 1107h
   682 00003780 CD4F                <1>     int 4Fh
   683                              <1>     return  ;Propagate CF and AL if needed due to error
    18                              <2> %%_ret:
    19 00003782 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   684                              <1> .notNet:
   685 00003783 E8ED320000          <1>     call dosCrit1Enter
   686 00003788 488B6F07            <1>     mov rbp, qword [rdi +sft.qPtr]  ;Get DPB pointer in rbp
   687 0000378C E8122E0000          <1>     call setWorkingDPB
   688 00003791 E806E8FFFF          <1>     call updateDirectoryEntryForFile    ;Update the directory entry
   689 00003796 7205                <1>     jc short .exit    ;Return in error if this fails, exit critical
   690 00003798 E864D4FFFF          <1>     call flushFile  ;Now the file gets flushed
   691                              <1> .exit:
   692                              <1> ;Propagate CF and AL if needed due to error
   693 0000379D E8DD320000          <1>     call dosCrit1Exit
   694                              <1>     return
    18                              <2> %%_ret:
    19 000037A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   695                              <1> renameMain:
   696                              <1> ;Now, creates a special find first block for the source file
   697                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   698                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   699                              <1> ; block. 
   700                              <1> ;Then we search for that file name specifically (again), replacing 
   701                              <1> ; the filename portion of the destination buffer. If it exists or the 
   702                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   703                              <1> ; the new directory entry and delete the original file. 
   704                              <1> ;Input:
   705                              <1> ; filenamePtr1 -> Source path + filename pattern
   706                              <1> ; filenamePtr2 -> New path + filename pattern
   707                              <1> ; workingCDS -> CDS for drive we are considering (set by )
   708 000037A3 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS]
   709 000037AA E8FC2D0000          <1>     call testCDSNet ;CF=NC => Not net
   710 000037AF 7308                <1>     jnc .notNet
   711 000037B1 B811110000          <1>     mov eax, 1111h
   712 000037B6 CD4F                <1>     int 4Fh
   713                              <1>     return
    18                              <2> %%_ret:
    19 000037B8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   714                              <1> .notNet:
   715                              <1> ;First check if both drives are on the same disk
   716 000037B9 8A05(02C50300)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   717 000037BF 8A25(82C50300)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   718 000037C5 38E0                <1>     cmp al, ah
   719 000037C7 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   720 000037C9 B811000000          <1>     mov eax, errDevUnk
   721 000037CE F9                  <1>     stc
   722                              <1>     return
    18                              <2> %%_ret:
    19 000037CF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   723                              <1> .sameDrive:
   724                              <1> ;Now we check if either pathsepc is simply X:\,0
   725                              <1> ; If they are, return fail as we cannot rename the root dir
   726 000037D0 E8A0320000          <1>     call dosCrit1Enter
   727 000037D5 8B05(02C50300)      <1>     mov eax, dword [buffer1]
   728 000037DB 30C0                <1>     xor al, al
   729 000037DD 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   730 000037E2 750B                <1>     jne .checkpath2
   731                              <1> .accDen:
   732 000037E4 B805000000          <1>     mov eax, errAccDen
   733                              <1> .errorExit:
   734 000037E9 F9                  <1>     stc
   735 000037EA E9A1020000          <1>     jmp .exit2
   736                              <1> .checkpath2:
   737 000037EF 8B05(82C50300)      <1>     mov eax, dword [buffer2]
   738 000037F5 30C0                <1>     xor al, al
   739 000037F7 3D003A5C00          <1>     cmp eax, 005C3A00h
   740 000037FC 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   741                              <1> ;Now we find first the source file
   742 000037FE 488B35(02C60300)    <1>     mov rsi, qword [fname1Ptr]
   743 00003805 4889F7              <1>     mov rdi, rsi
   744 00003808 C605(DCC60300)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   745 0000380F E804DCFFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   746 00003814 0F8276020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   747 0000381A 488D35(3EC60300)    <1>     lea rsi, curDirCopy
   748 00003821 488D3D(A2C70300)    <1>     lea rdi, renameDir
   749 00003828 B904000000          <1>     mov ecx, fatDirEntry_size/8
   750 0000382D F348A5              <1>     rep movsq   ;Copy directory over
   751 00003830 488D3D(77C70300)    <1>     lea rdi, renameFFBlk
   752 00003837 E806DBFFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   753                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   754                              <1> 
   755 0000383C B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   756 00003841 31C0                <1>     xor eax, eax
   757 00003843 488B3D(02C60300)    <1>     mov rdi, qword [fname1Ptr]
   758 0000384A F2AE                <1>     repne scasb   ;Search for terminating null
   759 0000384C FD                  <1>     std ;Go backwards now, to find the path sep
   760 0000384D B05C                <1>     mov al, "\"
   761 0000384F F2AE                <1>     repne scasb   ;Now rsi points one before
   762 00003851 FC                  <1>     cld ;Go normal ways now
   763 00003852 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   764 00003859 57                  <1>     push rdi
   765 0000385A 4889FE              <1>     mov rsi, rdi
   766 0000385D 488D3D(C5C60300)    <1>     lea rdi, wcdFcbName
   767 00003864 E851DAFFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   768 00003869 5F                  <1>     pop rdi
   769 0000386A 57                  <1>     push rdi    ;Save rdi on stack again
   770 0000386B 488D35(95C70300)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   771                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   772 00003872 48A5                <1>     movsq
   773 00003874 A5                  <1>     movsd
   774 00003875 A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   775 00003876 5F                  <1>     pop rdi ;rdi points to first char position
   776 00003877 E864020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   777 0000387C 0F8267FFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   778                              <1>     ;Else return the pattern back to its original position
   779 00003882 488D35(C5C60300)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   780 00003889 E874DAFFFF          <1>     call FCBToAsciiz
   781                              <1>     ;Delete the original directory entry
   782 0000388E 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSectorsPerClusterShift] 
   783 00003892 FFC1                <1>     inc ecx ;Get sectors/cluster in ecx
   784 00003894 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   785 00003898 F7E1                <1>     mul ecx ;Get bytes per cluster in eax
   786 0000389A 8B0D(84C70300)      <1>     mov ecx, dword [renameFFBlk + ffBlock.dirOffset] ;32 byte offset in cluster
   787 000038A0 C1E105              <1>     shl ecx, 5  ;Get byte offset in cluster
   788 000038A3 91                  <1>     xchg ecx, eax
   789 000038A4 F7F1                <1>     div ecx ;Get Sector in cluster in eax and sector offset in edx
   790 000038A6 89C3                <1>     mov ebx, eax
   791 000038A8 8B05(64C70300)      <1>     mov eax, dword [dirClustA]  ;Get the current dir cluster, not start cluster
   792 000038AE E813D4FFFF          <1>     call getStartSectorOfCluster    ;Cluster number in eax, sector in rax
   793 000038B3 4801D8              <1>     add rax, rbx    ;Goto the sector for the cluster
   794 000038B6 E8EDD2FFFF          <1>     call getBufForDirNoFile ;Get buffer pointer in rbx
   795 000038BB 0F82DA010000        <1>     jc .badExit
   796 000038C1 488D741330          <1>     lea rsi, qword [rbx + bufferHdr.dataarea + rdx] ;Goto byte offset in sector
   797                              <1>     ;rsi points to the file entry
   798 000038C6 8A05(E8C60300)      <1>     mov al, byte [delChar]
   799 000038CC 8806                <1>     mov byte [rsi], al
   800 000038CE E84AD1FFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   801                              <1> 
   802                              <1>     ;Now we use the destination filename pattern to build the new filename
   803 000038D3 488B3D(0AC60300)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   804 000038DA 31C0                <1>     xor eax, eax
   805 000038DC B943000000          <1>     mov ecx, 67
   806 000038E1 F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
   807                              <1> .findPattern:
   808 000038E3 48FFCF              <1>     dec rdi
   809 000038E6 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
   810 000038E9 75F8                <1>     jne .findPattern
   811                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
   812 000038EB C605(DEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
   813 000038F2 807FFF3A            <1>     cmp byte [rdi - 1], ":"
   814 000038F6 750D                <1>     jne .notRoot
   815                              <1>     ;The root dir always exists on a volume so can skip the check.
   816 000038F8 48FFC7              <1>     inc rdi ;Goto the first char of the filename
   817 000038FB 57                  <1>     push rdi
   818 000038FC 800D(DEC60300)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
   819 00003903 EB29                <1>     jmp short .skipCheck
   820                              <1> .notRoot:
   821 00003905 AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
   822 00003906 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
   823                              <1>     ;Now check if the parent directory exists for the destination
   824 00003907 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
   825 00003908 FF35(02C60300)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
   826 0000390E 488D35(82C50300)    <1>     lea rsi, buffer2
   827 00003915 4889F7              <1>     mov rdi, rsi
   828 00003918 E8F4DAFFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
   829 0000391D 8F05(02C60300)      <1>     pop qword [fname1Ptr]
   830 00003923 5F                  <1>     pop rdi
   831 00003924 0F8271010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
   832 0000392A C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
   833                              <1> .skipCheck:
   834                              <1>     ;rdi now points to the first char of the pattern
   835 0000392E 4889FE              <1>     mov rsi, rdi
   836 00003931 488D3D(C5C60300)    <1>     lea rdi, wcdFcbName
   837 00003938 E87DD9FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
   838                              <1>     ;Ensure the destination pattern is not all question marks
   839 0000393D 813D(C5C60300)3F3F- <1>     cmp dword [wcdFcbName], "????"
   839 00003945 3F3F                <1>
   840 00003947 7524                <1>     jne .validRenPattern
   841 00003949 813D(C9C60300)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
   841 00003951 3F3F                <1>
   842 00003953 7518                <1>     jne .validRenPattern
   843 00003955 66813D(CDC60300)3F- <1>     cmp word [wcdFcbName + 8], "??"
   843 0000395D 3F                  <1>
   844 0000395E 750D                <1>     jne .validRenPattern
   845 00003960 803D(CFC60300)3F    <1>     cmp byte [wcdFcbName + 10], "?"
   846 00003967 0F8429010000        <1>     je .bad ;Access denied buddy ol' pal
   847                              <1> .validRenPattern:
   848                              <1>     ;curDirCopy has information for the destination directory file we will 
   849                              <1>     ; write to. The cluster points to the directory file itself to search in
   850                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
   851                              <1>     ;Make new fname in fcbName from asciizname in renameDir
   852 0000396D 488D35(A2C70300)    <1>     lea rsi, renameDir  ;Copy the source filename over
   853 00003974 488D3D(B9C60300)    <1>     lea rdi, fcbName
   854 0000397B 57                  <1>     push rdi    ;Preserve this as the destination for copy
   855 0000397C B90B000000          <1>     mov ecx, 11
   856 00003981 F3A4                <1>     rep movsb
   857 00003983 5F                  <1>     pop rdi
   858 00003984 488D35(C5C60300)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
   859                              <1> .mnnLp:
   860 0000398B AC                  <1>     lodsb
   861 0000398C 3C3F                <1>     cmp al, "?" ;Is it a wc?
   862 0000398E 7404                <1>     je .mnnWC   ;Skip overriding this char
   863 00003990 AA                  <1>     stosb   ;Store new char and go forwards by one
   864 00003991 48FFCF              <1>     dec rdi ;Now go back by one
   865                              <1> .mnnWC:
   866 00003994 48FFC7              <1>     inc rdi ;Goto next letter
   867 00003997 FFC1                <1>     inc ecx
   868 00003999 81F90B000000        <1>     cmp ecx, 11
   869 0000399F 75EA                <1>     jne .mnnLp
   870 000039A1 488D35(B9C60300)    <1>     lea rsi, fcbName
   871 000039A8 488D3D(A2C70300)    <1>     lea rdi, renameDir
   872 000039AF B90B000000          <1>     mov ecx, 11
   873 000039B4 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
   874 000039B6 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
   875 000039B7 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
   876 000039B8 488D35(B9C60300)    <1>     lea rsi, fcbName
   877 000039BF E83ED9FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
   878 000039C4 488B35(0AC60300)    <1>     mov rsi, qword [fname2Ptr]
   879 000039CB 4889F7              <1>     mov rdi, rsi
   880 000039CE E845DAFFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
   881 000039D3 0F83C2000000        <1>     jnc .badExit   ;If the file exists, then error
   882 000039D9 3D02000000          <1>     cmp eax, errFnf ;If Fnf error then we may proceed
   883 000039DE 0F85B7000000        <1>     jne .badExit
   884                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
   885                              <1>     ;If the parent is root, deal with special case
   886 000039E4 488D1D(3EC60300)    <1>     lea rbx, curDirCopy
   887 000039EB F605(DEC60300)02    <1>     test byte [fileFDflg], 2
   888 000039F2 C605(DEC60300)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
   889 000039F9 7416                <1>     jz .notRoot2
   890 000039FB 488D35(B9C60300)    <1>     lea rsi, fcbName
   891 00003A02 488D3D(3EC60300)    <1>     lea rdi, curDirCopy
   892 00003A09 48A5                <1>     movsq
   893 00003A0B A5                  <1>     movsd
   894 00003A0C A4                  <1>     movsb
   895 00003A0D 31C0                <1>     xor eax, eax    ;Dir to search
   896 00003A0F EB13                <1>     jmp short .getSpace
   897                              <1> .notRoot2:
   898 00003A11 0FB715(52C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   899 00003A18 0FB705(58C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   900 00003A1F C1E210              <1>     shl edx, 10h
   901 00003A22 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
   902                              <1> .getSpace:
   903 00003A24 E87B000000          <1>     call .searchForDirSpace
   904 00003A29 726B                <1>     jc .bad
   905                              <1> ;dir Entry found, rsi points to space in buffer
   906 00003A2B 4889F7              <1>     mov rdi, rsi
   907 00003A2E 488D35(A2C70300)    <1>     lea rsi, renameDir
   908 00003A35 B904000000          <1>     mov ecx, fatDirEntry_size/8
   909 00003A3A F348A5              <1>     rep movsq   ;Copy dir over
   910 00003A3D E8DBCFFFFF          <1>     call markBufferDirty ;Mark buffer as written to now
   911                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
   912                              <1>     ;If it does, we find next. If not, we exit
   913 00003A42 B03F                <1>     mov al, "?"
   914 00003A44 488B3D(02C60300)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
   915 00003A4B E8202D0000          <1>     call strlen ;Get in rcx to get the length of the string
   916 00003A50 F2AE                <1>     repne scasb
   917 00003A52 7534                <1>     jne .exit  ;If source name has no wildcards, exit
   918 00003A54 B90B000000          <1>     mov ecx, 11
   919 00003A59 8D3D(C5C60300)      <1>     lea edi, wcdFcbName
   920 00003A5F F2AE                <1>     repne scasb
   921 00003A61 7525                <1>     jne .exit
   922                              <1>     ;Here we gotta do a find next now!
   923 00003A63 FF35(FCC30300)      <1>     push qword [currentDTA]
   924 00003A69 488D3D(77C70300)    <1>     lea rdi, renameFFBlk
   925 00003A70 48893D(FCC30300)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
   926 00003A77 E876D5FFFF          <1>     call findNextMain
   927 00003A7C 8F05(FCC30300)      <1>     pop qword [currentDTA]
   928 00003A82 0F83E5FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
   929                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
   930                              <1> .exit:
   931 00003A88 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
   932 00003A89 E85DCFFFFF          <1>     call writeThroughBuffers
   933 00003A8E 720B                <1>     jc .badExit
   934                              <1> .exit2: ;Bad exit before we push qword on stack 
   935 00003A90 E8EA2F0000          <1>     call dosCrit1Exit
   936                              <1>     return
    18                              <2> %%_ret:
    19 00003A95 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   937                              <1> .bad:
   938 00003A96 B805000000          <1>     mov eax, errAccDen  ;Temp return code
   939                              <1> .badExit:
   940 00003A9B E829CFFFFF          <1>     call cancelWriteThroughBuffers
   941 00003AA0 F9                  <1>     stc
   942 00003AA1 5F                  <1>     pop rdi
   943 00003AA2 EBEC                <1>     jmp short .exit2
   944                              <1> 
   945                              <1> .searchForDirSpace:
   946                              <1> ;Input: eax = First directory to search 
   947 00003AA4 8905(64C70300)      <1>     mov dword [dirClustA], eax
   948 00003AAA 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
   949 00003AAC 668905(68C70300)    <1>     mov word [dirSect], ax
   950 00003AB3 8905(6AC70300)      <1>     mov dword [dirEntry], eax
   951 00003AB9 E85FE4FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
   952 00003ABE 731C                <1>     jnc .dirEntryFnd
   953 00003AC0 813D(60C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
   953 00003AC8 0000                <1>
   954 00003ACA 7412                <1>     je .searchBad ;Set CF and exit
   955 00003ACC E888E5FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
   956 00003AD1 720B                <1>     jc .searchBad
   957 00003AD3 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
   958 00003AD8 7404                <1>     je .searchBad
   959                              <1>     ;Else eax = Newly allocated cluster
   960 00003ADA EBC8                <1>     jmp short .searchForDirSpace
   961                              <1> .dirEntryFnd:
   962 00003ADC F8                  <1>     clc
   963                              <1>     return
    18                              <2> %%_ret:
    19 00003ADD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   964                              <1> .searchBad:
   965 00003ADE F9                  <1>     stc
   966                              <1>     return
    18                              <2> %%_ret:
    19 00003ADF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   967                              <1> 
   968                              <1> 
   969                              <1> checkNoOpenHandlesForShareAction:
   970                              <1> ;We check that we can proceed. This function will fail IF there are handles
   971                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
   972                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
   973                              <1> ; do, then we should get a Share error and thus it would prevent us from 
   974                              <1> ; proceeding.
   975                              <1> ;
   976                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
   977                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
   978                              <1> ;       currDirCopy = Directory entry for the file
   979 00003AE0 E8792F0000          <1>     call dosPushRegs    ;Save the context completely
   980 00003AE5 803D(A4C00300)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
   981 00003AEC 740C                <1>     jz .noOpenFileCheckHandler
   982 00003AEE FF15(A4C00300)      <1>     call qword [openFileCheck]
   983 00003AF4 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
   984 00003AF6 7449                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
   985 00003AF8 EB4E                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
   986                              <1> .noOpenFileCheckHandler:
   987                              <1>     ;The following closes most recent shared handles referencing it
   988                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
   989                              <1>     ; mode and if there is precisely 1  
   990 00003AFA FF15(0CC10300)      <1>     call qword [closeNewHdlShare]    
   991                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
   992 00003B00 488D3D(F2CC0300)    <1>     lea rdi, scratchSFT
   993 00003B07 48893D(12C70300)    <1>     mov qword [currentSFT], rdi
   994 00003B0E B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
   995 00003B13 C605(E7C60300)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
   996                              <1>     ;This is to avoid needing to put the file attributes on the stack
   997 00003B1A 57                  <1>     push rdi
   998 00003B1B E861020000          <1>     call buildSFTEntry
   999 00003B20 5F                  <1>     pop rdi
  1000 00003B21 7225                <1>     jc .errorMain
  1001 00003B23 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1002 00003B28 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1003 00003B2E 57                  <1>     push rdi
  1004 00003B2F E89E360000          <1>     call shareFile
  1005 00003B34 5F                  <1>     pop rdi
  1006 00003B35 7211                <1>     jc .errorMain
  1007 00003B37 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1008 00003B3C E828360000          <1>     call closeShareCallWrapper
  1009                              <1> .exit:
  1010 00003B41 E8012F0000          <1>     call dosPopRegs
  1011 00003B46 F8                  <1>     clc
  1012                              <1>     return
    18                              <2> %%_ret:
    19 00003B47 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1013                              <1> .errorMain:
  1014 00003B48 E8FA2E0000          <1>     call dosPopRegs
  1015 00003B4D B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1016 00003B52 F9                  <1>     stc
  1017                              <1>     return
    18                              <2> %%_ret:
    19 00003B53 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1018                              <1> 
  1019                              <1> outerDeleteMain:
  1020                              <1> ;Internal current dir must be populated with dir entry
  1021                              <1> ; and internal DOS directory variables now point to this entry.
  1022                              <1> ;Checks if the file is a char device or read only.
  1023                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1024                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1025                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1026                              <1> ;         CF=NC => File deleted
  1027 00003B54 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS]
  1028 00003B5B E84B2A0000          <1>     call testCDSNet ;CF=NC => Not net
  1029 00003B60 7308                <1>     jnc .notNet
  1030 00003B62 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1031 00003B67 CD4F                <1>     int 4Fh
  1032                              <1>     return
    18                              <2> %%_ret:
    19 00003B69 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1033                              <1> .notNet:
  1034 00003B6A B805000000          <1>     mov eax, errAccDen  
  1035 00003B6F F605(49C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1036 00003B76 754F                <1>     jnz .exitBad  ;Can't delete a char dev
  1037 00003B78 F605(49C60300)01    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirReadOnly
  1038 00003B7F 7546                <1>     jnz .exitBad  ;Can't delete a read only file
  1039 00003B81 E843000000          <1>     call deleteMain
  1040 00003B86 723F                <1>     jc .exitBad
  1041                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1042 00003B88 B03F                <1>     mov al, "?"
  1043 00003B8A 488D3D(B9C60300)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1044 00003B91 B90B000000          <1>     mov ecx, 11
  1045 00003B96 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1046 00003B98 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1047 00003B9A F8                  <1>     clc
  1048                              <1>     return  ;Return ok!
    18                              <2> %%_ret:
    19 00003B9B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1049                              <1> .serverWCloop:
  1050 00003B9C FF35(FCC30300)      <1>     push qword [currentDTA] ;Save the current DTA address
  1051 00003BA2 488D3D(13C60300)    <1>     lea rdi, dosffblock
  1052 00003BA9 57                  <1>     push rdi    ;Push this address onto the stack
  1053 00003BAA E893D7FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1054 00003BAF 8F05(FCC30300)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1055 00003BB5 E838D4FFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1056 00003BBA 8F05(FCC30300)      <1>     pop qword [currentDTA]
  1057 00003BC0 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1058 00003BC5 73D5                <1>     jnc .serverWCloop     
  1059                              <1> ;Stop as soon as an error occurs
  1060                              <1> .exitBad:
  1061 00003BC7 F9                  <1>     stc
  1062                              <1>     return
    18                              <2> %%_ret:
    19 00003BC8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1063                              <1> 
  1064                              <1> deleteMain:
  1065                              <1> ;Now unlink FAT chain and then clear directory entry
  1066                              <1> ;Get the start cluster of this file
  1067                              <1> ;Input:
  1068                              <1> ; The file must have NOT be read-only.
  1069                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1070                              <1> ;     - curDirCopy must be filled with the file directory information
  1071                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1072                              <1> ;Output: CF=NC => Success, 
  1073                              <1> ; If not net CDS:
  1074                              <1> ;   rsi keeps pointing to directory entry.
  1075                              <1> ;   al = First char of the file that was deleted.
  1076                              <1> ;        CF=CY => Error
  1077                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1078 00003BC9 E812FFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1079                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003BCE 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1080 00003BD0 52                  <1>     push rdx
  1081 00003BD1 0FB715(58C60300)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1082 00003BD8 0FB705(52C60300)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1083 00003BDF C1E010              <1>     shl eax, 10h
  1084 00003BE2 09D0                <1>     or eax, edx ;Add low bits to eax
  1085 00003BE4 5A                  <1>     pop rdx
  1086 00003BE5 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1087 00003BE7 740E                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1088 00003BE9 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1089 00003BF0 E87AD2FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1090 00003BF5 721B                <1>     jc .exitBad
  1091                              <1> .skipUnlink:
  1092                              <1>     ;Now replace the first char of the directory to 0E5h
  1093                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1094 00003BF7 E834E3FFFF          <1>     call getDiskDirectoryEntry
  1095 00003BFC 7214                <1>     jc .exitBad
  1096 00003BFE 8A05(E8C60300)      <1>     mov al, byte [delChar]
  1097 00003C04 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1098 00003C06 E812CEFFFF          <1>     call markBufferDirty
  1099                              <1>     ;CF must be clear
  1100 00003C0B E8DBCDFFFF          <1>     call writeThroughBuffers
  1101                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003C10 73B6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1102                              <1> .exitBad:
  1103 00003C12 E8B2CDFFFF          <1>     call cancelWriteThroughBuffers
  1104                              <1>     return
    18                              <2> %%_ret:
    19 00003C17 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1105                              <1> 
  1106                              <1> openMain:
  1107                              <1> ;Input: ax (formally al) = Open mode
  1108                              <1> ;       [currentSFT] = SFT we are building
  1109                              <1> ;       [workingCDS] = CDS of drive to access
  1110                              <1> ;       [workingDPB] = DPB of drive to access
  1111                              <1> ;Ouput: CF=CY => Error, eax has error code
  1112 00003C18 E897000000          <1>     call .setOpenMode
  1113                              <1>     retc    ;Error Exit 
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003C1D 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1114 00003C1F 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  1115 00003C26 488B35(F2C60300)    <1>     mov rsi, qword [workingCDS]
  1116 00003C2D 30E4                <1>     xor ah, ah  ;al has the access mode
  1117 00003C2F 66894702            <1>     mov word [rdi + sft.wOpenMode], ax  ;Set the SFT access mode
  1118 00003C33 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1119 00003C3A 750A                <1>     jne .notNet
  1120                              <1> .redirOpen:
  1121 00003C3C 50                  <1>     push rax    ;Push open mode onto stack
  1122 00003C3D B816110000          <1>     mov eax, 1116h  ;Open remote file on \\ pathspec drives
  1123 00003C42 CD4F                <1>     int 4Fh
  1124 00003C44 58                  <1>     pop rax
  1125                              <1>     return
    18                              <2> %%_ret:
    19 00003C45 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1126                              <1> .notNet:
  1127 00003C46 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1128 00003C4C 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1129 00003C4E E8222E0000          <1>     call dosCrit1Enter
  1130 00003C53 C605(E7C60300)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1131 00003C5A C605(E8C60300)E5    <1>     mov byte [delChar], 0E5h
  1132 00003C61 E81B010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1133 00003C66 7227                <1>     jc .errorExit
  1134                              <1> .openShareLoop:
  1135                              <1> ;Now we attempt to register the file with SHARE
  1136 00003C68 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount]    
  1137                              <1> .openShareTryAgain: 
  1138 00003C6F 51                  <1>     push rcx
  1139 00003C70 E8ED340000          <1>     call openShareCallWrapper
  1140 00003C75 59                  <1>     pop rcx
  1141 00003C76 731D                <1>     jnc .fileSharedOk
  1142 00003C78 E80F350000          <1>     call shareRetryCountdown
  1143 00003C7D FFC9                <1>     dec ecx
  1144 00003C7F 75EE                <1>     jnz .openShareTryAgain
  1145 00003C81 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  1146 00003C88 E822350000          <1>     call shareCheckOpenViolation
  1147 00003C8D 73D9                <1>     jnc .openShareLoop  ;If user selects retry, we retry!
  1148                              <1> .errorExit:
  1149 00003C8F E8EB2D0000          <1>     call dosCrit1Exit   ;Else we error out
  1150                              <1>     return
    18                              <2> %%_ret:
    19 00003C94 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1151                              <1> .fileSharedOk:
  1152 00003C95 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1153 00003C9A E8E20A0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1154 00003C9F FF15(14C10300)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1155 00003CA5 E8D52D0000          <1>     call dosCrit1Exit
  1156 00003CAA 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1157                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00003CB0 74E2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  1158 00003CB2 F9                  <1>     stc ;FCB opened files are not allowed anymore, this shouldnt exist anymore
  1159                              <1>     return
    18                              <2> %%_ret:
    19 00003CB3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1160                              <1> .setOpenMode:
  1161                              <1> ;Input: al = Open mode for the file open
  1162 00003CB4 8805(DDC60300)      <1>     mov byte [fileOpenMd], al
  1163 00003CBA 53                  <1>     push rbx
  1164 00003CBB 88C3                <1>     mov bl, al
  1165 00003CBD 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1166 00003CC0 803D(E2C60300)FF    <1>     cmp byte [dosInvoke], -1    
  1167 00003CC7 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1168 00003CC9 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1169 00003CCC 7405                <1>     je .s2
  1170                              <1> .s1:
  1171 00003CCE 80FB40              <1>     cmp bl, denyNoneShare
  1172 00003CD1 770D                <1>     ja .somBad
  1173                              <1> .s2:
  1174 00003CD3 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1175 00003CD5 80E30F              <1>     and bl, 0Fh
  1176 00003CD8 80FB02              <1>     cmp bl, RWAccess
  1177 00003CDB 7703                <1>     ja .somBad
  1178 00003CDD 5B                  <1>     pop rbx
  1179 00003CDE F8                  <1>     clc
  1180                              <1>     return
    18                              <2> %%_ret:
    19 00003CDF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1181                              <1> .somBad:
  1182 00003CE0 5B                  <1>     pop rbx
  1183 00003CE1 B80C000000          <1>     mov eax, errAccCde
  1184 00003CE6 F9                  <1>     stc
  1185                              <1>     return
    18                              <2> %%_ret:
    19 00003CE7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1186                              <1> createNewMain:
  1187                              <1> ;Input: ax (formally al) = File attributes
  1188                              <1> ;       [currentSFT] = SFT we are building
  1189                              <1> ;       [workingCDS] = CDS of drive to access
  1190                              <1> ;       [workingDPB] = DPB of drive to access
  1191 00003CE8 0FB6C0              <1>     movzx eax, al
  1192 00003CEB F605(E4C60300)FF    <1>     test byte [fileExist], -1
  1193 00003CF2 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1194 00003CF4 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1195 00003CF9 F9                  <1>     stc
  1196                              <1>     return
    18                              <2> %%_ret:
    19 00003CFA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1197                              <1> createMain:
  1198                              <1> ;Input: ax (formally al) = File attributes
  1199                              <1> ;       [currentSFT] = SFT we are building
  1200                              <1> ;       [workingCDS] = CDS of drive to access
  1201                              <1> ;       [workingDPB] = DPB of drive to access
  1202 00003CFB 0FB6C0              <1>     movzx eax, al
  1203                              <1> .createNewEP:
  1204 00003CFE A8C0                <1>     test al, 80h | 40h   ;Invalid bits?
  1205 00003D00 750A                <1>     jnz .invalidAttrib
  1206 00003D02 A808                <1>     test al, dirVolumeID
  1207 00003D04 7506                <1>     jnz .invalidAttrib  ;Creating volume label with this function is forbidden
  1208 00003D06 0C20                <1>     or al, dirArchive   ;Set archive bit
  1209 00003D08 A810                <1>     test al, dirDirectory   
  1210 00003D0A 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1211                              <1> .invalidAttrib:
  1212 00003D0C B805000000          <1>     mov eax, errAccDen
  1213 00003D11 F9                  <1>     stc
  1214                              <1>     return
    18                              <2> %%_ret:
    19 00003D12 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1215                              <1> .validAttr:
  1216 00003D13 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  1217 00003D1A 488B35(F2C60300)    <1>     mov rsi, qword [workingCDS]
  1218 00003D21 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1219 00003D28 750A                <1>     jne .diskFile
  1220 00003D2A 50                  <1>     push rax    ;Save the new attributes
  1221 00003D2B B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1222 00003D30 CD4F                <1>     int 4Fh
  1223 00003D32 5B                  <1>     pop rbx
  1224                              <1>     return
    18                              <2> %%_ret:
    19 00003D33 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1225                              <1> .diskFile:
  1226 00003D34 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1227 00003D3A 740A                <1>     jz .hardFile
  1228 00003D3C 50                  <1>     push rax    ;Save the new attributes
  1229 00003D3D B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1230 00003D42 CD4F                <1>     int 4Fh
  1231 00003D44 5B                  <1>     pop rbx
  1232                              <1>     return
    18                              <2> %%_ret:
    19 00003D45 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1233                              <1> .hardFile:
  1234 00003D46 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1235 00003D4C C605(E7C60300)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1236 00003D53 C605(E8C60300)E5    <1>     mov byte [delChar], 0E5h
  1237 00003D5A E8162D0000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1238 00003D5F 57                  <1>     push rdi
  1239 00003D60 50                  <1>     push rax    ;Save the file attributes on stack
  1240 00003D61 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1241 00003D66 E816000000          <1>     call buildSFTEntry
  1242 00003D6B 5B                  <1>     pop rbx ;Pop the word off (though it has been used already!)
  1243 00003D6C 5F                  <1>     pop rdi
  1244 00003D6D 720C                <1>     jc .errorExit
  1245 00003D6F B802000000          <1>     mov eax, 2
  1246 00003D74 FF15(14C10300)      <1>     call qword [updateDirShare]
  1247 00003D7A F8                  <1>     clc ;Always clear the CF flag here updateDir defaults to CF=CY
  1248                              <1> .errorExit:
  1249 00003D7B E8FF2C0000          <1>     call dosCrit1Exit
  1250                              <1>     return
    18                              <2> %%_ret:
    19 00003D80 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1251                              <1> buildSFTEntry:
  1252                              <1> ;Called in a critical section.
  1253                              <1> ;Input: al = Open mode
  1254                              <1> ;       STACK: File attributes if creating a file
  1255                              <1> ;       [currentSFT] = SFT we are building
  1256                              <1> ;       [workingCDS] = CDS of drive to access
  1257                              <1> ;       [workingDPB] = DPB of drive to access
  1258                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1259                              <1> ;
  1260                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1261                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1262                              <1> ;        If CF=CY: - Return fail
  1263                              <1> ;
  1264                              <1> ;
  1265                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1266                              <1> ;   If not, create disk entry.
  1267                              <1> ;Check if the device was a char device by checking curDirCopy.
  1268                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1269                              <1> 
  1270                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1271                              <1> ; to start of file fields of the SFT
  1272 00003D81 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1273 00003D82 4889E5              <1>     mov rbp, rsp
  1274 00003D85 488B35(12C70300)    <1>     mov rsi, qword [currentSFT]
  1275                              <1> ;Set the open mode
  1276 00003D8C 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1277                              <1> ;Get current time
  1278 00003D90 E80CEDFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1279 00003D95 E8F2EDFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1280 00003D9A 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1281                              <1> ;Set current Owner
  1282 00003D9D 488B05(04C40300)    <1>     mov rax, qword [currentPSP]
  1283 00003DA4 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1284                              <1> ;Set file pointer to first byte
  1285 00003DA8 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1286                              <1> ;Common fields set
  1287 00003DAF F605(E7C60300)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1288 00003DB6 0F8491010000        <1>     jz .openProc
  1289                              <1>     ;Here if Creating a file.
  1290 00003DBC F605(E4C60300)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1291 00003DC3 0F84CD000000        <1>     jz .createFile
  1292 00003DC9 F605(49C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1293 00003DD0 0F8580010000        <1>     jnz .charDev
  1294                              <1>     ;Here disk file exists, so recreating the file.
  1295                              <1>     ;If recreating, check we are not overwriting a Dir
  1296 00003DD6 F605(49C60300)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
  1297 00003DDD 0F85F0010000        <1>     jnz .bad    ;Directories are not allowed to be created
  1298 00003DE3 55                  <1>     push rbp
  1299 00003DE4 E8E0FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1300 00003DE9 5D                  <1>     pop rbp
  1301 00003DEA 0F82E3010000        <1>     jc .bad
  1302                              <1>     ;al has the char for the filename
  1303                              <1>     ;Sets vars for the sector/offset into the sector
  1304 00003DF0 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  1305 00003DF7 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1306 00003DF9 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1307                              <1>     ;al has file attributes.
  1308 00003DFD 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1309 00003DFF 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1310 00003E02 31C0                <1>     xor eax, eax
  1311                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1312 00003E04 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1313 00003E08 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1314 00003E0C 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1315 00003E0F 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1316 00003E12 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1317 00003E15 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1318 00003E18 57                  <1>     push rdi    ;Save SFT pointer
  1319 00003E19 488D3D(3EC60300)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1320 00003E20 B920000000          <1>     mov ecx, fatDirEntry_size
  1321 00003E25 F3A4                <1>     rep movsb
  1322 00003E27 E8F1CBFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1323 00003E2C 5F                  <1>     pop rdi
  1324                              <1> .createCommon:  ;rdi must point to the current SFT 
  1325                              <1>     ;Now populate the remaining SFT fields 
  1326 00003E2D 488D35(3EC60300)    <1>     lea rsi, curDirCopy
  1327 00003E34 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1328 00003E37 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1329 00003E3A 488B05(26C70300)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1330 00003E41 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1331 00003E45 0FB705(2EC70300)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1332 00003E4C C0E805              <1>     shr al, 5   ;Divide by 5 to get directory entry number
  1333 00003E4F 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1334 00003E52 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1335 00003E55 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1336 00003E58 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1337 00003E5C 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1338 00003E60 C1E210              <1>     shl edx, 10h
  1339 00003E63 09D0                <1>     or eax, edx
  1340 00003E65 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1341                              <1> 
  1342 00003E68 31C0                <1>     xor eax, eax
  1343                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1344 00003E6A 8A05(E9C60300)      <1>     mov al, byte [workingDrv]
  1345 00003E70 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1346 00003E72 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1347 00003E76 488B05(EAC60300)    <1>     mov rax, qword [workingDPB]
  1348 00003E7D 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1349                              <1>     ;Last thing, copy the filename over
  1350                              <1>     ;Now save the name
  1351                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1352 00003E81 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1353 00003E85 488D35(3EC60300)    <1>     lea rsi, curDirCopy
  1354 00003E8C 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1355 00003E8E 66A5                <1>     movsw
  1356 00003E90 A4                  <1>     movsb
  1357                              <1>     ;SFT filled, now we open on the driver if it supports it
  1358 00003E91 E905010000          <1>     jmp .openDriver
  1359                              <1> .createFile:
  1360                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1361                              <1>     ;rsi points to current sda entry
  1362 00003E96 488D3D(3EC60300)    <1>     lea rdi, curDirCopy
  1363                              <1>     ;Clear out the dir entry
  1364 00003E9D 57                  <1>     push rdi
  1365 00003E9E B904000000          <1>     mov ecx, 4
  1366 00003EA3 31C0                <1>     xor eax, eax
  1367 00003EA5 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1368 00003EA8 5F                  <1>     pop rdi
  1369                              <1>     ;Copy the FCB name over    
  1370 00003EA9 56                  <1>     push rsi
  1371 00003EAA 57                  <1>     push rdi
  1372 00003EAB B90B000000          <1>     mov ecx, 11
  1373 00003EB0 488D35(B9C60300)    <1>     lea rsi, fcbName
  1374 00003EB7 F3A4                <1>     rep movsb   ;Move over the FCB name
  1375 00003EB9 5F                  <1>     pop rdi
  1376 00003EBA 5E                  <1>     pop rsi
  1377                              <1> 
  1378 00003EBB 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1379                              <1>     ;al has file attributes.
  1380 00003EBF 2427                <1>     and al, dirArchive | dirIncFiles | dirReadOnly ;Permissable bits only
  1381 00003EC1 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1382 00003EC4 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1383 00003EC7 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1384 00003ECA 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1385 00003ECD 8B05(60C70300)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1386                              <1> .searchForDirSpace:
  1387 00003ED3 8905(64C70300)      <1>     mov dword [dirClustA], eax
  1388 00003ED9 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1389 00003EDB 668905(68C70300)    <1>     mov word [dirSect], ax
  1390 00003EE2 8905(6AC70300)      <1>     mov dword [dirEntry], eax
  1391 00003EE8 57                  <1>     push rdi
  1392 00003EE9 E82FE0FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1393 00003EEE 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1394 00003EEF 7328                <1>     jnc .dirEntryFnd
  1395 00003EF1 813D(60C70300)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1395 00003EF9 0000                <1>
  1396 00003EFB 0F84D2000000        <1>     je .bad ;Set CF and exit
  1397 00003F01 E853E1FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1398 00003F06 0F82BE000000        <1>     jc .exit
  1399 00003F0C 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1400 00003F11 0F84BC000000        <1>     je .bad
  1401                              <1>     ;Else eax = Newly allocated cluster
  1402 00003F17 EBBA                <1>     jmp short .searchForDirSpace
  1403                              <1> .dirEntryFnd:
  1404 00003F19 4887FE              <1>     xchg rdi, rsi
  1405 00003F1C B904000000          <1>     mov ecx, 4
  1406 00003F21 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1407 00003F24 E8F4CAFFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1408 00003F29 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  1409 00003F30 E9F8FEFFFF          <1>     jmp .createCommon
  1410                              <1> .open:
  1411                              <1> ;curdircopy has a copy of the disk file directory
  1412                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1413 00003F35 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  1414 00003F3C 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1415                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1416 00003F43 E8E8DFFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1417 00003F48 E9E0FEFFFF          <1>     jmp .createCommon
  1418                              <1> .openProc:
  1419                              <1>     ;Here if Opening a file.
  1420 00003F4D F605(49C60300)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], 40h ;Was this a char dev?
  1421 00003F54 74DF                <1>     jz .open
  1422                              <1> .charDev:
  1423 00003F56 488B05(3EC60300)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1424 00003F5D E870290000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1425 00003F62 7307                <1>     jnc .notBadCharDevName
  1426 00003F64 B805000000          <1>     mov eax, errAccDen
  1427 00003F69 EB5F                <1>     jmp short .exit ;CF already set
  1428                              <1> .notBadCharDevName:
  1429 00003F6B 488B35(12C70300)    <1>     mov rsi, qword [currentSFT]
  1430 00003F72 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1431 00003F76 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1432 00003F7A 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1433 00003F7D 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1434 00003F80 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1435 00003F84 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1436 00003F8B 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1437 00003F8F B820202020          <1>     mov eax, "    "
  1438 00003F94 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1439 00003F98 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1440                              <1> .openDriver:
  1441 00003F9B 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  1442 00003FA2 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the ptr here
  1443 00003FA6 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1444 00003FAC 7508                <1>     jnz .charDevOpen
  1445 00003FAE 0FB64601            <1>     movzx eax, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1446 00003FB2 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1447                              <1> .charDevOpen:
  1448 00003FB6 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1449 00003FBC 740C                <1>     jz .exit  ;If not, immediately jump to exit, all is well
  1450                              <1>     ;rsi has device driver ptr for device, make request
  1451 00003FBE 53                  <1>     push rbx
  1452 00003FBF E8A9250000          <1>     call primReqOpenSetup  ;rbx gets header ptr, rsi has driver ptr
  1453 00003FC4 E864220000          <1>     call goDriver   ;Make request
  1454 00003FC9 5B                  <1>     pop rbx
  1455                              <1> .exit:
  1456 00003FCA E81CCAFFFF          <1>     call writeThroughBuffers
  1457 00003FCF 7207                <1>     jc .bad2
  1458 00003FD1 5D                  <1>     pop rbp
  1459                              <1>     return
    18                              <2> %%_ret:
    19 00003FD2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1460                              <1> .bad:   ;Set Access Denied
  1461 00003FD3 B805000000          <1>     mov eax, errAccDen
  1462                              <1> .bad2:  ;Error propagating error code
  1463 00003FD8 E8ECC9FFFF          <1>     call cancelWriteThroughBuffers
  1464 00003FDD F9                  <1>     stc
  1465 00003FDE 5D                  <1>     pop rbp
  1466                              <1>     return
    18                              <2> %%_ret:
    19 00003FDF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1467                              <1> closeMain: ;Int 4Fh AX=1201h
  1468                              <1> ;Gets the directory entry for a file
  1469                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1470                              <1> ;If CF=CY on return: Error, return error with al = error code
  1471                              <1> ;Preserve all regs except eax and rdi
  1472                              <1> ; If CF=NC on return: eax = Unknown
  1473                              <1> ;                     rdi = current SFT ptr
  1474 00003FE0 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1475 00003FE7 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev ;Is this a network drive?
  1476 00003FED 7408                <1>     jz .physical
  1477                              <1>     ;Here we beep out the request to the network redirector (Int 4Fh AX=1106h)
  1478 00003FEF B806110000          <1>     mov eax, 1106h  ;Make request
  1479 00003FF4 CD4F                <1>     int 4Fh ;Beep!
  1480                              <1>     return  ;Returns with CF set or clear as appropriate
    18                              <2> %%_ret:
    19 00003FF6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1481                              <1> .physical:  
  1482                              <1> ; We make a request to the dev dir to close the device
  1483                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1484 00003FF7 E8792A0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1485 00003FFC 53                  <1>     push rbx
  1486 00003FFD 56                  <1>     push rsi
  1487 00003FFE 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get driver or DPB ptr in rsi
  1488 00004002 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1489 00004008 7520                <1>     jnz .charClose   ;Char devs aren't affected by directory work
  1490                              <1>     ;rsi has DPB pointer here
  1491                              <1>     ;rdi has the SFT pointer
  1492 0000400A 55                  <1>     push rbp
  1493 0000400B 4889F5              <1>     mov rbp, rsi ;Move the dpb pointer into rbp
  1494 0000400E E890250000          <1>     call setWorkingDPB  ;Set the working dpb to rbp
  1495 00004013 E884DFFFFF          <1>     call updateDirectoryEntryForFile
  1496 00004018 5D                  <1>     pop rbp
  1497                              <1>     ;If CF is set, Fail was requested and ax has an error code
  1498 00004019 723F                <1>     jc .exit
  1499 0000401B E8E1CBFFFF          <1>     call flushFile
  1500 00004020 7238                <1>     jc .exit    ;If something went wrong, exit
  1501 00004022 0FB64E01            <1>     movzx ecx, byte [rsi + dpb.bUnitNumber]    ;Get the unit number in cl
  1502 00004026 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr
  1503                              <1> .charClose:
  1504                              <1>     ;Now rsi = Device Driver Header and rdi = Current SFT header
  1505                              <1>     ;We now decrement handle count in SFT structure
  1506 0000402A E845090000          <1>     call decrementOpenCount ;rdi = current SFT, returns ax = old handle count
  1507 0000402F 66FFC8              <1>     dec ax  ;If this is zero, then we need to set wNumHandles to zero
  1508 00004032 7503                <1>     jnz .driverClose
  1509 00004034 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Now make it zero again as it is -1
  1510                              <1> .driverClose:
  1511 00004037 50                  <1>     push rax
  1512 00004038 51                  <1>     push rcx
  1513 00004039 E82B310000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1514 0000403E 59                  <1>     pop rcx
  1515 0000403F 58                  <1>     pop rax
  1516 00004040 91                  <1>     xchg ecx, eax ;Now store this because DOS returns in cx (according to RBIL)
  1517                              <1>     ;and if the device is a disk device, cl will have the unit number
  1518                              <1>     ;We first check if the driver supports oper/close requests
  1519 00004041 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL   ;Support Close?
  1520 00004047 7511                <1>     jnz .exit  ;If not, immediately jump to exit, all is well
  1521                              <1>     ;rsi has device driver ptr for device, make request
  1522 00004049 E824250000          <1>     call primReqCloseSetup  ;rbx gets header ptr, rsi has driver ptr
  1523 0000404E E8DA210000          <1>     call goDriver   ;Make request
  1524                              <1>     ;Don't check the status here, as we are simply informing the driver 
  1525                              <1>     ; of an operation. Nothing should be able to go wrong. 
  1526                              <1>     ;Functionally, an ignore if anything does go wrong.
  1527 00004053 E893C9FFFF          <1>     call writeThroughBuffers
  1528 00004058 7305                <1>     jnc short .exitOk
  1529                              <1> .exit:
  1530 0000405A E86AC9FFFF          <1>     call cancelWriteThroughBuffers
  1531                              <1> .exitOk:
  1532 0000405F 5E                  <1>     pop rsi
  1533 00004060 5B                  <1>     pop rbx
  1534 00004061 E8192A0000          <1>     call dosCrit1Exit
  1535                              <1>     return
    18                              <2> %%_ret:
    19 00004066 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1536                              <1> 
  1537                              <1> readBytes:
  1538                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1539                              <1> ;Input: ecx = Number of bytes to read
  1540                              <1> ;Output: ecx = Number of bytes read
  1541                              <1> ;Number of bytes read 
  1542                              <1> ;If CF=CY, return with error code in ax
  1543 00004067 E815070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1544 0000406C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1545 00004070 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1546 00004072 3C01                <1>     cmp al, WriteAccess
  1547 00004074 7509                <1>     jne .readable
  1548 00004076 B805000000          <1>     mov eax, errAccDen
  1549 0000407B 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1550 0000407D F9                  <1>     stc
  1551                              <1>     return
    18                              <2> %%_ret:
    19 0000407E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1552                              <1> .readable:
  1553 0000407F E842070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1554 00004084 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1555 00004087 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1556 0000408D 740A                <1>     jz .notRedir
  1557 0000408F B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1558 00004094 CD4F                <1>     int 4Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1559                              <1>     return 
    18                              <2> %%_ret:
    19 00004096 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1560                              <1> .exitOk:
  1561 00004097 F8                  <1>     clc
  1562                              <1>     return 
    18                              <2> %%_ret:
    19 00004098 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1563                              <1> .notRedir:
  1564 00004099 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1565 0000409F 7510                <1>     jnz readCharDev
  1566 000040A1 E8CF290000          <1>     call dosCrit1Enter
  1567 000040A6 E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1568 000040AB E8CF290000          <1>     call dosCrit1Exit
  1569                              <1>     return 
    18                              <2> %%_ret:
    19 000040B0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1570                              <1> readCharDev:
  1571                              <1> ;rdi points to sft for char dev to read
  1572                              <1> ;ecx has the number of bytes to transfer
  1573                              <1> ;Vars have been set up and DTA has the transfer address
  1574                              <1> ;Returns in ecx, the actual bytes transferred
  1575                              <1> ;If CF=CY, return with error code in ax
  1576 000040B1 C605(EFC30300)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1577 000040B8 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1578 000040BC 488B3D(FCC30300)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1579 000040C3 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1580 000040C6 0F84BB020000        <1>     jz readExitOk    ;If it does, jump to exit as if EOF has been hit
  1581 000040CC F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1582 000040CF 7407                <1>     jz .notNul
  1583                              <1>     ;If it is the NUL device, we can simply return unsucessfully!
  1584                              <1>     ;NUL never transfers bytes 
  1585 000040D1 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1586 000040D3 E9AF020000          <1>     jmp readExitOk    ;Goto exit
  1587                              <1> .notNul:
  1588 000040D8 F6C320              <1>     test bl, charDevBinary
  1589 000040DB 0F857F000000        <1>     jnz .binary
  1590                              <1>     ;Here if the device is in ASCII mode
  1591 000040E1 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1592 000040E4 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1593                              <1> .consoleInput:
  1594                              <1>     ;Console input here
  1595 000040EA E89BE5FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1596                              <1>     ;Get current offset into buffer (if one exists)
  1597 000040EF 488B35(31C00300)    <1>     mov rsi, qword [vConHdlOff]
  1598 000040F6 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1599 000040F9 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1600 000040FB 803D(33C30300)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1601 00004102 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1602                              <1>     ;Else, reset the buffer
  1603 00004104 66C705(33C30300)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1603 0000410C FF                  <1>
  1604                              <1> .oldBuf:
  1605                              <1> ;Preserve the dta and number of chars to tfr
  1606 0000410D 51                  <1>     push rcx
  1607 0000410E 57                  <1>     push rdi
  1608 0000410F 488D15(33C30300)    <1>     lea rdx, vConInBuf
  1609 00004116 E88FE5FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1610 0000411B 5F                  <1>     pop rdi
  1611 0000411C 59                  <1>     pop rcx
  1612 0000411D 488D35(35C30300)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1613 00004124 803E1A              <1>     cmp byte [rsi], EOF
  1614 00004127 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1615 00004129 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1616 0000412C B00A                <1>     mov al, LF
  1617 0000412E E809E1FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1618 00004133 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1619 00004135 EB18                <1>     jmp short .exit
  1620                              <1> .tfrBuf:
  1621 00004137 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1622 00004138 AA                  <1>     stosb
  1623 00004139 3C0D                <1>     cmp al, CR 
  1624 0000413B 7503                <1>     jne .noCRLF
  1625 0000413D C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1626                              <1> .noCRLF:
  1627 00004140 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1628 00004142 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1629 00004144 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1630                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1631 00004146 E8F1E0FFFF          <1>     call charOut_B.in   ;Echo CRLF
  1632 0000414B 31F6                <1>     xor esi, esi
  1633 0000414D 0C01                <1>     or al, 1    ;Set ZF = NZ
  1634                              <1> .exit:
  1635 0000414F E84EE5FFFF          <1>     call vConRetDriver
  1636 00004154 488935(31C00300)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1637 0000415B E927020000          <1>     jmp readExitOk    ;Exit ok! ecx has # chars tfred and ZF=ZE if @ EOF
  1638                              <1> 
  1639                              <1> .binary:
  1640                              <1>     ;Setup registers for transfer
  1641 00004160 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1642 00004163 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1643                              <1>     ;ecx has the number of bytes to transfer directly
  1644 00004166 E856230000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1645 0000416B 488B35(EAC60300)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1646 00004172 E8B6200000          <1>     call goDriver   ;Make the request
  1647 00004177 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1648 0000417A 0FB73D(A8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1649 00004181 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1650 00004187 7422                <1>     jz .binNoError
  1651                              <1>     ;ERROR HERE! Prepare for Int 44h (if SFT allows us to issue Int 44h)
  1652 00004189 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1653 0000418B E8CE1B0000          <1>     call charDevErr   ;ah = has part of the error 
  1654                              <1>     ;al now has the response
  1655 00004190 3C00                <1>     cmp al, critIgnore
  1656 00004192 7417                <1>     je .binNoError ;Simply proceed as normal
  1657 00004194 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1658 00004197 3C03                <1>     cmp al, critFail
  1659 00004199 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1660                              <1>     ;Fallthrough here for fail!
  1661                              <1> .failExit:
  1662 0000419B 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  1663 000041A2 31C9                <1>     xor ecx, ecx
  1664 000041A4 B805000000          <1>     mov eax, errAccDen
  1665 000041A9 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1666                              <1>     return
    18                              <2> %%_ret:
    19 000041AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1667                              <1> .binNoError:
  1668                              <1>     ;Get number of bytes transferred into 
  1669 000041AB 8B05(BBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get bytes transferred
  1670 000041B1 F7D8                <1>     neg eax ;make it into -eax
  1671 000041B3 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1672                              <1>     ;ecx now has bytes left to transfer
  1673 000041B7 50                  <1>     push rax    ;Save value on stack
  1674 000041B8 31C0                <1>     xor eax, eax ;Set ZF
  1675 000041BA FFC0                <1>     inc eax ;Clear ZF
  1676 000041BC 58                  <1>     pop rax ;Get back the original value
  1677 000041BD E9C5010000          <1>     jmp readExitOk    ;GoExit with ecx=Bytes left to read
  1678                              <1> .generalASCII:
  1679                              <1>     ;ecx has bytes to transfer here
  1680                              <1>     ;Setup registers for transfer
  1681 000041C2 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1682 000041C5 51                  <1>     push rcx
  1683 000041C6 B901000000          <1>     mov ecx, 1  ;Get one char
  1684 000041CB 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1685 000041CE E8EE220000          <1>     call primReqReadSetup   ;Setup request
  1686 000041D3 59                  <1>     pop rcx
  1687                              <1>     ;rbx now has request header ptr
  1688 000041D4 488B35(EAC60300)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1689                              <1> .asciiReadChar:
  1690 000041DB 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1691 000041DE E82BE4FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1692 000041E3 E845200000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1693 000041E8 0FB73D(A8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status] ;Get status word in di
  1694 000041EF F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1695 000041F5 741E                <1>     jz .asciiNoError
  1696 000041F7 E8621B0000          <1>     call charDevErr    ;Call Int 44h
  1697                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1698 000041FC C705(BBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1
  1698 00004204 0000                <1>
  1699 00004206 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1700 00004209 3C03                <1>     cmp al, critFail
  1701 0000420B 748E                <1>     je .failExit
  1702 0000420D 3C01                <1>     cmp al, critRetry
  1703 0000420F 74CA                <1>     je .asciiReadChar
  1704                              <1>     ;Ignore here, pretend NULL CHAR was read
  1705 00004211 30C0                <1>     xor al, al
  1706 00004213 EB15                <1>     jmp short .asciiIgnoreEP
  1707                              <1> .asciiNoError:
  1708                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1709                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1710                              <1> ;Preserve RBX, RSI
  1711                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1712 00004215 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1713 00004218 813D(BBC40300)0100- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 1
  1713 00004220 0000                <1>
  1714 00004222 0F855F010000        <1>     jne readExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1715 00004228 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1716                              <1> .asciiIgnoreEP:
  1717 0000422A 48FF05(B3C40300)    <1>     inc qword [primReqHdr + ioReqPkt.bufptr]   ;Goto next char position
  1718 00004231 48FFC7              <1>     inc rdi ;Also advance register pointer
  1719 00004234 3C1A                <1>     cmp al, EOF ;Was this char EOF?
  1720 00004236 0F844B010000        <1>     je readExitOk
  1721 0000423C 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1722 0000423E E09B                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1723                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1724 00004240 FEC0                <1>     inc al  ;make ZF=NZ
  1725 00004242 E940010000          <1>     jmp readExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1726                              <1> 
  1727                              <1> readDiskFile:
  1728                              <1> ;rdi = Current SFT
  1729                              <1> ;rbp = WorkingDPB
  1730                              <1> ;ecx = Bytes to transfer
  1731 00004247 C605(EFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1732 0000424E C605(E0C60300)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1733                              <1>     ;We have the following vars setup:
  1734                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1735                              <1>     ;currClustF
  1736                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1737                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1738 00004255 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1739 00004258 85D2                <1>     test edx, edx
  1740 0000425A 0F8427010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1741 00004260 8B15(30C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  1742 00004266 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  1743 00004269 8905(34C70300)      <1>     mov dword [currClustD], eax
  1744 0000426F 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  1745 00004271 0F8410010000        <1>     jz readExitOk
  1746 00004277 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  1747 0000427C 0F8405010000        <1>     jz readExitOk   
  1748 00004282 8B0D(58C70300)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  1749                              <1>     ;Check if we have opened a volume label (should never happen)
  1750 00004288 66F747020800        <1>     test word [rdi + sft.wOpenMode], volumeLabel    ;If we try read from vollbl
  1751 0000428E 7407                <1>     jz .shareCheck
  1752 00004290 B805000000          <1>     mov eax, errAccDen
  1753 00004295 F9                  <1>     stc
  1754                              <1>     return
    18                              <2> %%_ret:
    19 00004296 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1755                              <1> .shareCheck:
  1756                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  1757 00004297 E8D42E0000          <1>     call retryShareIODelay
  1758 0000429C 7308                <1>     jnc .shareOk
  1759 0000429E E8CE2F0000          <1>     call shareCheckReadLockViolation
  1760 000042A3 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  1761                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    18                              <2> %%_ret:
    19 000042A5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1762                              <1> .shareOk:
  1763 000042A6 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  1764 000042A8 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  1765 000042AA 7426                <1>     jz .skipWalk
  1766                              <1> .goToCurrentCluster:
  1767 000042AC E8F9CBFFFF          <1>     call readFAT    ;Get in eax the next cluster
  1768 000042B1 0F82C1000000        <1>     jc .badExit   ;This can only return Fail
  1769 000042B7 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  1770 000042BC 0F84C5000000        <1>     je readExitOk ;Exit with no bytes transferred
  1771 000042C2 8905(34C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  1772 000042C8 FFCA                <1>     dec edx ;Decrement counter
  1773 000042CA 75E0                <1>     jnz .goToCurrentCluster
  1774                              <1> ;Now we fall out with ebx = Current cluster
  1775 000042CC 8B05(34C70300)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  1776                              <1>     ;mov eax, ebx
  1777                              <1> .skipWalk:
  1778 000042D2 E8EFC9FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  1779                              <1>     ;Now we add the offset to this
  1780 000042D7 0FB61D(3CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  1781 000042DE 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  1782 000042E1 488905(3DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  1783                              <1> ;Main
  1784                              <1> .mainRead:
  1785 000042E8 E8F0C8FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  1786 000042ED 0F8285000000        <1>     jc .badExit
  1787 000042F3 488D7330            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  1788 000042F7 0FB71D(45C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  1789 000042FE 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  1790                              <1>     ;Now we read the smallest of the following from the sector buffer:
  1791                              <1>     ; 1) Sector size, 2) Bytes left in File, 3) Bytes left to read from Request
  1792 00004301 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  1793 00004304 2B4F1B              <1>     sub ecx, dword [rdi + sft.dCurntOff] ;Get bytes left to read in file in ecx
  1794 00004307 8B1D(5CC70300)      <1>     mov ebx, dword [tfrCntr]
  1795 0000430D 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  1796 0000430F 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  1797 00004312 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  1798 00004316 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  1799 00004318 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  1800 0000431B 57                  <1>     push rdi
  1801 0000431C 488B3D(FCC30300)    <1>     mov rdi, qword [currentDTA]
  1802 00004323 51                  <1>     push rcx
  1803 00004324 F3A4                <1>     rep movsb
  1804 00004326 59                  <1>     pop rcx
  1805 00004327 010D(47C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  1806 0000432D 290D(5CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  1807 00004333 48893D(FCC30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  1808 0000433A 8B05(47C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  1809 00004340 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  1810 00004344 31D2                <1>     xor edx, edx    ;Zero rdx
  1811 00004346 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  1812 00004348 668915(45C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  1813 0000434F 5F                  <1>     pop rdi
  1814 00004350 8B0D(5CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  1815 00004356 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  1816 00004358 742D                <1>     jz readExitOk ;Exit if so!
  1817 0000435A E8BACAFFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  1818 0000435F 7217                <1>     jc .badExit
  1819                              <1>     ;If ZF=ZE then currClustF has last cluster
  1820 00004361 7424                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  1821                              <1>     ;Else repeat
  1822                              <1>     ;currSectD has been updated, we now set currByteS = 0
  1823 00004363 66C705(45C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  1823 0000436B 00                  <1>
  1824 0000436C 488B05(3DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  1825 00004373 E970FFFFFF          <1>     jmp .mainRead
  1826                              <1> .badExit:
  1827                              <1>     ;When a disk error occurs within the bit where vars have changed,
  1828                              <1>     ; we need to update the SFT before returning
  1829 00004378 8B0D(5CC70300)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  1830 0000437E 30C0                <1>     xor al, al  ;Set ZF flag
  1831 00004380 E802000000          <1>     call readExitOk   ;We call this
  1832 00004385 F9                  <1>     stc ;All calls which end up here return Fail!
  1833 00004386 C3                  <1>     ret
  1834                              <1> 
  1835                              <1> readExitOk:
  1836                              <1> ;Input: ecx = Number of bytes left to transfer!
  1837                              <1> ;       ZF=ZE => clear bit 6 of deviceInfo Word ZF=NZ => preserve bit 6
  1838 00004387 890D(5CC70300)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  1839                              <1>     ;I argue as this is a simply read-only exit vector, this is unnecessary
  1840                              <1>     ;jnz .skipbitClear
  1841                              <1>     ;call getCurrentSFT  ;Get currentSFT in rdi
  1842                              <1>     ;The disk transfer must've flushed by now. 
  1843                              <1>     ;and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  1844                              <1> .skipbitClear:  ;Or skip that entirely
  1845 0000438D E8F7030000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  1846                              <1>     return 
    18                              <2> %%_ret:
    19 00004392 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1847                              <1> 
  1848                              <1> writeBytes:
  1849                              <1> ;Writes the bytes from the user buffer
  1850                              <1> ;Input: ecx = Bytes to xfr
  1851                              <1> ;Returns number of bytes written in ecx
  1852 00004393 E8E9030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1853 00004398 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1854 0000439C 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1855 0000439E 3C00                <1>     cmp al, ReadAccess
  1856 000043A0 7509                <1>     jne .writeable
  1857                              <1> .noWrite:
  1858 000043A2 B805000000          <1>     mov eax, errAccDen
  1859 000043A7 31C9                <1>     xor ecx, ecx
  1860 000043A9 F9                  <1>     stc
  1861 000043AA C3                  <1>     ret
  1862                              <1> .writeable:
  1863 000043AB 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1864 000043B1 7406                <1>     jz .skipAttribCheck ;FCB files don't check file attributes
  1865 000043B3 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  1866 000043B7 74E9                <1>     je .noWrite ;If the file is read only, RIP
  1867                              <1> .skipAttribCheck:
  1868 000043B9 E808040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  1869 000043BE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1870 000043C4 7408                <1>     jz .notRedir
  1871 000043C6 B809110000          <1>     mov eax, 1109h  ;Write to redir
  1872 000043CB CD4F                <1>     int 4Fh
  1873                              <1>     return
    18                              <2> %%_ret:
    19 000043CD C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1874                              <1> .notRedir:
  1875 000043CE 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1876 000043D4 7510                <1>     jnz writeCharDev
  1877 000043D6 E89A260000          <1>     call dosCrit1Enter
  1878 000043DB E84C010000          <1>     call writeDiskFile
  1879 000043E0 E89A260000          <1>     call dosCrit1Exit
  1880                              <1>     return
    18                              <2> %%_ret:
    19 000043E5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1881                              <1> writeCharDev:
  1882 000043E6 C605(EFC30300)04    <1>     mov byte [errorLocus], eLocChr
  1883                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  1884 000043ED 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  1885 000043F3 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1886                              <1>     ;If ecx = 0, we exit
  1887 000043F7 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  1888 000043F9 85C9                <1>     test ecx, ecx
  1889 000043FB 0F8468030000        <1>     jz writeExitChar
  1890 00004401 488B1D(FCC30300)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  1891 00004408 4889DF              <1>     mov rdi, rbx
  1892 0000440B 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  1893 0000440D A820                <1>     test al, charDevBinary
  1894 0000440F 744A                <1>     jz .asciiDev
  1895                              <1> ;Write binary transfer here
  1896                              <1> .binaryLp:
  1897 00004411 31C0                <1>     xor eax, eax
  1898 00004413 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1899 00004416 E89B200000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1900 0000441B 488B35(12C70300)    <1>     mov rsi, qword [currentSFT]
  1901 00004422 E8021E0000          <1>     call goDriverChar
  1902 00004427 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  1903 0000442A B487                <1>     mov ah, critCharDev | critData | critWrite
  1904 0000442C 0FB73D(A8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1905 00004433 F7C700800000        <1>     test edi, drvErrStatus
  1906 00004439 7415                <1>     jz .binXfrOk
  1907 0000443B E81E190000          <1>     call charDevErr ;Invoke Int 44h
  1908 00004440 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  1909 00004443 3C00                <1>     cmp al, critIgnore
  1910 00004445 7409                <1>     je .binXfrOk
  1911 00004447 3C01                <1>     cmp al, critRetry
  1912 00004449 74C6                <1>     je .binaryLp
  1913 0000444B E9D5000000          <1>     jmp .exitFail
  1914                              <1> .binXfrOk:
  1915 00004450 8B05(BBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]
  1916 00004456 E90E030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  1917                              <1> .asciiDev:
  1918 0000445B A802                <1>     test al, charDevConOut
  1919 0000445D 0F859E000000        <1>     jnz .conDev
  1920 00004463 A804                <1>     test al, charDevNulDev
  1921 00004465 0F858F000000        <1>     jnz .nulDev
  1922                              <1>     ;Here we transfer for a generic character device in ascii mode
  1923 0000446B 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  1924 0000446D 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  1925 00004470 0F84F3020000        <1>     je writeExitChar
  1926 00004476 51                  <1>     push rcx
  1927 00004477 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  1928 0000447C 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1929 0000447F E832200000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  1930 00004484 59                  <1>     pop rcx
  1931 00004485 488B35(12C70300)    <1>     mov rsi, qword [currentSFT]
  1932 0000448C 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  1933                              <1> .asciiLp:
  1934 00004490 E879E1FFFF          <1>     call checkBreak
  1935 00004495 E8931D0000          <1>     call goDriver
  1936 0000449A 57                  <1>     push rdi
  1937 0000449B B487                <1>     mov ah, critCharDev | critData | critWrite
  1938 0000449D 0FB73D(A8C40300)    <1>     movzx edi, word [primReqHdr + ioReqPkt.status]  ;Get status word
  1939 000044A4 F7C700800000        <1>     test edi, drvErrStatus
  1940 000044AA 741D                <1>     jz .asciiNoError
  1941 000044AC E8AD180000          <1>     call charDevErr ;Invoke Int 44h
  1942 000044B1 5F                  <1>     pop rdi
  1943 000044B2 C705(BBC40300)0100- <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  1943 000044BA 0000                <1>
  1944 000044BC 3C01                <1>     cmp al, critRetry
  1945 000044BE 74D0                <1>     je .asciiLp
  1946 000044C0 3C00                <1>     cmp al, critIgnore
  1947 000044C2 7412                <1>     je .ignoreEp
  1948 000044C4 E95C000000          <1>     jmp .exitFail
  1949                              <1> .asciiNoError:
  1950 000044C9 5F                  <1>     pop rdi
  1951 000044CA 813D(BBC40300)0000- <1>     cmp dword [primReqHdr + ioReqPkt.tfrlen], 0
  1951 000044D2 0000                <1>
  1952 000044D4 741D                <1>     je .bytesXfrdOk
  1953                              <1> .ignoreEp:
  1954 000044D6 FFC2                <1>     inc edx ;One more char has been xfrd
  1955 000044D8 FF05(B3C40300)      <1>     inc dword [primReqHdr + ioReqPkt.bufptr]    ;Increment buffer ptr
  1956 000044DE 48FFC7              <1>     inc rdi ;And our copy... 
  1957 000044E1 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  1958 000044E4 740D                <1>     je .bytesXfrdOk
  1959 000044E6 66C705(A8C40300)00- <1>     mov word [primReqHdr + ioReqPkt.status], 0
  1959 000044EE 00                  <1>
  1960 000044EF FFC9                <1>     dec ecx
  1961 000044F1 759D                <1>     jnz .asciiLp
  1962                              <1> .bytesXfrdOk:
  1963 000044F3 89D0                <1>     mov eax, edx
  1964 000044F5 E96F020000          <1>     jmp writeExitChar
  1965                              <1> .nulDev:
  1966 000044FA 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  1967 000044FC E968020000          <1>     jmp writeExitChar
  1968                              <1> .conDev:
  1969 00004501 E884E1FFFF          <1>     call vConSwapDriver
  1970 00004506 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  1971 00004509 51                  <1>     push rcx
  1972                              <1> .conDevLp:
  1973 0000450A AC                  <1>     lodsb
  1974 0000450B 3C1A                <1>     cmp al, EOF
  1975 0000450D 7409                <1>     je .conDevExit
  1976 0000450F E828DDFFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  1977 00004514 FFC9                <1>     dec ecx
  1978 00004516 75F2                <1>     jnz .conDevLp
  1979                              <1> .conDevExit:
  1980 00004518 58                  <1>     pop rax ;Get initial ecx back into eax
  1981 00004519 29C8                <1>     sub eax, ecx
  1982 0000451B E882E1FFFF          <1>     call vConRetDriver
  1983 00004520 E944020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  1984                              <1> .exitFail:
  1985 00004525 B805000000          <1>     mov eax, errAccDen
  1986 0000452A F9                  <1>     stc
  1987                              <1>     return
    18                              <2> %%_ret:
    19 0000452B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  1988                              <1> writeDiskFile:
  1989                              <1>     ;rdi has SFT ptr
  1990 0000452C 8B0D(58C70300)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  1991 00004532 C605(EFC30300)02    <1>     mov byte [errorLocus], eLocDsk 
  1992 00004539 C605(E0C60300)FF    <1>     mov byte [rwFlag], -1    ;Write operation
  1993 00004540 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  1994 00004546 0F85D4010000        <1>     jnz .badExit
  1995 0000454C 85C9                <1>     test ecx, ecx
  1996 0000454E 7505                <1>     jnz .nonZeroWrite
  1997 00004550 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0 (i.e. truncating file), check for NO locks
  1998                              <1> .nonZeroWrite:
  1999                              <1>     ;Now do share check here
  2000 00004555 E8162C0000          <1>     call retryShareIODelay
  2001 0000455A 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2002 0000455C E8072D0000          <1>     call shareCheckWriteLockViolation
  2003 00004561 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2004                              <1>     return  ;Else return with CF=CY
    18                              <2> %%_ret:
    19 00004563 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2005                              <1> .proceedWithWrite:
  2006 00004564 31DB                <1>     xor ebx, ebx
  2007 00004566 891D(54C70300)      <1>     mov dword [bytesAppend], ebx    ;Used for file extends (not writes!)
  2008 0000456C 881D(53C70300)      <1>     mov byte [fileGrowing], bl   ;Reset the file growth flag!
  2009 00004572 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2010                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2011 00004575 85C0                <1>     test eax, eax
  2012 00004577 7520                <1>     jnz .notStart
  2013 00004579 E8C2C7FFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2014 0000457E 0F8283010000        <1>     jc .exitPrepHardErr
  2015 00004584 3DFFFFFFFF          <1>     cmp eax, -1
  2016 00004589 0F84A3010000        <1>     je writeExit
  2017                              <1>     ;Now eax has the first cluster of chain
  2018 0000458F 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2019 00004592 C605(53C70300)FF    <1>     mov byte [fileGrowing], -1  ;Set to true as this only occurs for new files!
  2020                              <1> .notStart:
  2021                              <1> ;eax has the start cluster of the file
  2022                              <1> ;Now we go to CurntOff
  2023 00004599 8905(34C70300)      <1>     mov dword [currClustD], eax ;Store in var
  2024 0000459F 31DB                <1>     xor ebx, ebx
  2025 000045A1 8B15(30C70300)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2026 000045A7 85D2                <1>     test edx, edx
  2027 000045A9 7458                <1>     jz .skipWalk
  2028                              <1> .goToCurrentCluster:
  2029                              <1>     ;breakpoint
  2030 000045AB E8FAC8FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2031 000045B0 0F8251010000        <1>     jc .exitPrepHardErr   ;This can only return Fail
  2032 000045B6 3DFFFFFFFF          <1>     cmp eax, -1 ;Is this cluster the last cluster?
  2033 000045BB 7536                <1>     jne .stillInFile
  2034                              <1> .addCluster:
  2035                              <1>     ;Here we extend by one cluster
  2036 000045BD 8B05(34C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2037 000045C3 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2038 000045C5 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2039 000045CA E892C7FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2040 000045CF 0F8232010000        <1>     jc .exitPrepHardErr
  2041 000045D5 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2042 000045D7 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
  2043 000045DB 010D(54C70300)      <1>     add dword [bytesAppend], ecx    ;Add a bytes per sector to filesize
  2044 000045E1 C605(53C70300)FF    <1>     mov byte [fileGrowing], -1
  2045 000045E8 E8BDC8FFFF          <1>     call readFAT    ;Get in eax the new cluster
  2046 000045ED 0F8214010000        <1>     jc .exitPrepHardErr
  2047                              <1> .stillInFile:
  2048 000045F3 8905(34C70300)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2049 000045F9 FFCA                <1>     dec edx ;Decrement counter
  2050 000045FB 75AE                <1>     jnz .goToCurrentCluster
  2051                              <1> ;Now we fall out
  2052 000045FD 8B05(34C70300)      <1>     mov eax, dword [currClustD]
  2053                              <1> .skipWalk:
  2054 00004603 E8BEC6FFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2055                              <1>     ;Now we add the offset to this
  2056 00004608 0FB61D(3CC70300)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2057 0000460F 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2058 00004612 488905(3DC70300)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2059 00004619 8B0D(58C70300)      <1>     mov ecx, dword [tfrLen]
  2060 0000461F 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2061 00004621 751F                <1>     jnz .mainWrite  
  2062                              <1> ;Here we have a zero byte write, so either truncate or have an extend
  2063 00004623 F605(53C70300)FF    <1>     test byte [fileGrowing], -1
  2064 0000462A 750B                <1>     jnz .extend
  2065                              <1> ;Here we truncate where needed
  2066 0000462C 8B05(34C70300)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2067 00004632 E849C8FFFF          <1>     call truncateFAT    ;Truncate from the current cluster 
  2068                              <1> .extend:
  2069 00004637 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2070 0000463A 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2071 0000463D E9E5000000          <1>     jmp .noByteExit ;Exit ok!
  2072                              <1> .mainWrite:
  2073 00004642 E896C5FFFF          <1>     call getBufForData  ;Get bufHdr ptr in rbx and currBuf var for sector in rax
  2074 00004647 0F82D3000000        <1>     jc .badExit
  2075 0000464D 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2076 00004651 0FB71D(45C70300)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2077 00004658 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2078                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2079                              <1>     ; 1) Sector size, 2) Bytes left to read from Request
  2080 0000465B 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2081 0000465F 8B0D(5CC70300)      <1>     mov ecx, dword [tfrCntr]
  2082 00004665 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2083 00004667 0F47CB              <1>     cmova ecx, ebx
  2084 0000466A 56                  <1>     push rsi
  2085 0000466B 488B35(FCC30300)    <1>     mov rsi, qword [currentDTA]
  2086 00004672 51                  <1>     push rcx
  2087 00004673 F3A4                <1>     rep movsb
  2088 00004675 59                  <1>     pop rcx
  2089 00004676 010D(47C70300)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2090 0000467C 290D(5CC70300)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2091 00004682 48893D(FCC30300)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2092 00004689 5E                  <1>     pop rsi
  2093 0000468A E88EC3FFFF          <1>     call markBufferDirty
  2094 0000468F E857C3FFFF          <1>     call writeThroughBuffers ;Write thru the disk buffers for this sector
  2095 00004694 7271                <1>     jc .exitPrepHardErr
  2096 00004696 8B05(58C70300)      <1>     mov eax, dword [tfrLen] ;Get total length
  2097 0000469C 8B0D(5CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2098 000046A2 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2099 000046A4 0F8488000000        <1>     jz writeExit
  2100 000046AA E86AC7FFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2101 000046AF 7256                <1>     jc .exitPrepHardErr
  2102 000046B1 3DFFFFFFFF          <1>     cmp eax, -1
  2103 000046B6 753A                <1>     jne .noExtend
  2104                              <1>     ;Here we need to extend by a cluster
  2105 000046B8 8B05(34C70300)      <1>     mov eax, dword [currClustD] ;Get the disk cluster 
  2106 000046BE 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2107 000046C0 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
  2108 000046C5 E897C6FFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2109 000046CA 723B                <1>     jc .exitPrepHardErr
  2110 000046CC 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
  2111 000046CE 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2112 000046D2 011D(54C70300)      <1>     add dword [bytesAppend], ebx    ;Add a bytes per sector to filesize
  2113 000046D8 C605(53C70300)FF    <1>     mov byte [fileGrowing], -1
  2114 000046DF E835C7FFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2115 000046E4 7221                <1>     jc .exitPrepHardErr
  2116 000046E6 3DFFFFFFFF          <1>     cmp eax, -1
  2117 000046EB B805000000          <1>     mov eax, errAccDen
  2118 000046F0 7415                <1>     je .exitPrepHardErr
  2119                              <1> .noExtend:
  2120 000046F2 66C705(45C70300)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2120 000046FA 00                  <1>
  2121 000046FB 488B05(3DC70300)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2122 00004702 E93BFFFFFF          <1>     jmp .mainWrite
  2123                              <1> .exitPrepHardErr:
  2124 00004707 50                  <1>     push rax    ;Save error code
  2125 00004708 E825000000          <1>     call writeExit
  2126 0000470D 58                  <1>     pop rax
  2127                              <1> .badExitHard:    ;AL has error code already
  2128 0000470E E8B6C2FFFF          <1>     call cancelWriteThroughBuffers
  2129 00004713 B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2130 00004718 FF15(14C10300)      <1>     call qword [updateDirShare]
  2131 0000471E F9                  <1>     stc
  2132                              <1>     return
    18                              <2> %%_ret:
    19 0000471F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2133                              <1> .badExit:
  2134                              <1> ;Might need to do some weird stuff later. Leave for now
  2135 00004720 B805000000          <1>     mov eax, errAccDen
  2136 00004725 EBE7                <1>     jmp short .badExitHard
  2137                              <1> 
  2138                              <1> .noByteExit:
  2139 00004727 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2140 0000472C FF15(14C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2141                              <1> writeExit:
  2142                              <1> ;Advances the bytes on the file pointer
  2143                              <1> ;Return: ecx = Number of bytes transferred
  2144 00004732 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  2145 00004739 E84B000000          <1>     call updateCurrentSFT
  2146 0000473E 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2147 00004740 7404                <1>     jz .noFlush
  2148 00004742 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2149                              <1> .noFlush:
  2150 00004746 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2151 0000474C 750E                <1>     jnz .exit
  2152 0000474E 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]
  2153 00004751 39471B              <1>     cmp dword [rdi + sft.dCurntOff], eax
  2154 00004754 7606                <1>     jbe .exit   ;Don't change filesize unless offset is past the Filesize
  2155 00004756 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2156 00004759 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2157                              <1> .exit:
  2158 0000475C B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2159 00004761 FF15(14C10300)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2160 00004767 F8                  <1>     clc
  2161                              <1>     return
    18                              <2> %%_ret:
    19 00004768 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2162                              <1> writeExitChar:
  2163                              <1> ;Input: eax = Number of chars transferred
  2164 00004769 8B0D(58C70300)      <1>     mov ecx, dword [tfrLen]
  2165 0000476F 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2166 00004771 890D(5CC70300)      <1>     mov dword [tfrCntr], ecx
  2167 00004777 EBB9                <1>     jmp short writeExit
  2168                              <1> ;-----------------------------------:
  2169                              <1> ;        File Handle routines       :
  2170                              <1> ;-----------------------------------:
  2171                              <1> 
  2172                              <1> setCurrentSFT:
  2173                              <1> ;Set the pointer in rdi as current SFT 
  2174 00004779 48893D(12C70300)    <1>     mov qword [currentSFT], rdi
  2175                              <1>     return 
    18                              <2> %%_ret:
    19 00004780 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2176                              <1> getCurrentSFT:
  2177                              <1> ;Get the current SFT pointer in rdi
  2178 00004781 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  2179                              <1>     return 
    18                              <2> %%_ret:
    19 00004788 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2180                              <1> updateCurrentSFT:
  2181                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2182                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2183 00004789 57                  <1>     push rdi
  2184 0000478A 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
  2185 00004791 E8AB010000          <1>     call getBytesTransferred
  2186 00004796 67E32A              <1>     jecxz .exit
  2187                              <1>     ;ecx has bytes transferred
  2188 00004799 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2189 0000479F 7522                <1>     jnz .exit
  2190 000047A1 50                  <1>     push rax
  2191 000047A2 8B05(34C70300)      <1>     mov eax, dword [currClustD]
  2192 000047A8 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2193 000047AB 8B05(30C70300)      <1>     mov eax, dword [currClustF]
  2194 000047B1 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2195 000047B4 58                  <1>     pop rax
  2196 000047B5 67E30B              <1>     jecxz .exit ;Skip this if ecx = 0
  2197 000047B8 51                  <1>     push rcx
  2198 000047B9 8B0D(47C70300)      <1>     mov ecx, dword [currByteF]
  2199 000047BF 894F1B              <1>     mov dword [rdi + sft.dCurntOff], ecx    ;Add to the current offset in file
  2200 000047C2 59                  <1>     pop rcx
  2201                              <1> .exit:
  2202 000047C3 5F                  <1>     pop rdi
  2203 000047C4 F8                  <1>     clc
  2204                              <1>     return 
    18                              <2> %%_ret:
    19 000047C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2205                              <1> 
  2206                              <1> setupVarsForTransfer:
  2207                              <1> ;Computes the actual bytes to be transferred and 
  2208                              <1> ; sets up internal variables for the transfer. 
  2209                              <1> ;Works for both reading and writing
  2210                              <1> ;Input: ecx = User desired Bytes to transfer
  2211                              <1> ;       rdi = SFT pointer for the file
  2212                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2213                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2214                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2215                              <1> ;
  2216                              <1> ;Note: Does not account for a FULL disk. When writing,
  2217                              <1> ; if the disk will get full as a result of the write,
  2218                              <1> ; stop at the last byte before the transfer. If the 
  2219                              <1> ; file pointer is past the last free byte, write 0
  2220 000047C6 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2221 000047CA 488935(EAC60300)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2222 000047D1 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2223 000047D4 8905(47C70300)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2224 000047DA 890D(58C70300)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2225 000047E0 890D(5CC70300)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2226 000047E6 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2227 000047EC 7402                <1>     jz setupVarsForDiskTransfer
  2228 000047EE F8                  <1>     clc
  2229                              <1>     return
    18                              <2> %%_ret:
    19 000047EF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2230                              <1> setupVarsForDiskTransfer:
  2231                              <1> ;Extension of the above, but for Disk files only
  2232                              <1> ;Input: ecx = User desired Bytes to transfer
  2233                              <1> ;       rdi = SFT pointer for the file
  2234                              <1> ;Output: CF=NC: ecx = Actual Bytes that will be transferred, if it is possible
  2235                              <1> ;        CF=CY: Error exit
  2236 000047F0 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2237 000047F3 8905(47C70300)      <1>     mov dword [currByteF], eax
  2238 000047F9 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2239                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2240 000047FD 48892D(EAC60300)    <1>     mov qword [workingDPB], rbp
  2241 00004804 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2242 00004807 881D(E9C60300)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2243 0000480D 8B05(47C70300)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2244 00004813 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2245 00004817 31D2                <1>     xor edx, edx    ;Zero rdx
  2246 00004819 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2247                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2248                              <1>     ;edx has the offset into that sector
  2249 0000481B 8905(38C70300)      <1>     mov dword [currSectF], eax
  2250 00004821 668915(45C70300)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2251 00004828 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2252 0000482A 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2253 0000482D 8805(3CC70300)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2254 00004833 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2255 00004835 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
  2256 00004838 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2257 0000483A 8915(30C70300)      <1>     mov dword [currClustF], edx ;Save in var
  2258 00004840 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2259                              <1> .exit:
  2260 00004842 F8                  <1>     clc
  2261                              <1>     return 
    18                              <2> %%_ret:
    19 00004843 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2262                              <1> findFreeSFT:
  2263                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2264                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2265                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2266                              <1> ;        CF=CY => eax = errNhl, error exit
  2267 00004844 31DB                <1>     xor ebx, ebx
  2268                              <1> .mainLp:
  2269 00004846 53                  <1>     push rbx    ;Save the sft ndx
  2270 00004847 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2271 0000484C 5B                  <1>     pop rbx
  2272 0000484D 7307                <1>     jnc .sftExists
  2273 0000484F B804000000          <1>     mov eax, errNhl
  2274 00004854 F9                  <1>     stc
  2275                              <1>     return
    18                              <2> %%_ret:
    19 00004855 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2276                              <1> .sftExists:
  2277 00004856 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2278 0000485B 7427                <1>     je .sftFound
  2279 0000485D 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2280 00004862 751C                <1>     jne .gotoNextNdx
  2281                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2282 00004864 53                  <1>     push rbx
  2283 00004865 488B1D(20C40300)    <1>     mov rbx, qword [serverPSP]
  2284 0000486C 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2285 00004870 750B                <1>     jne .netGoToNextNdx
  2286 00004872 0FB71D(28C40300)    <1>     movzx ebx, word [machineNum]
  2287 00004879 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2288                              <1> .netGoToNextNdx:
  2289 0000487D 5B                  <1>     pop rbx
  2290 0000487E 7404                <1>     je .sftFound
  2291                              <1> .gotoNextNdx:
  2292 00004880 FFC3                <1>     inc ebx
  2293 00004882 EBC2                <1>     jmp short .mainLp
  2294                              <1> .sftFound:
  2295 00004884 53                  <1>     push rbx
  2296 00004885 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2297 0000488A 488B1D(20C40300)    <1>     mov rbx, qword [serverPSP]
  2298 00004891 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2299 00004895 0FB71D(28C40300)    <1>     movzx ebx, word [machineNum]
  2300 0000489C 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2301 000048A0 5B                  <1>     pop rbx
  2302 000048A1 F8                  <1>     clc
  2303                              <1>     return
    18                              <2> %%_ret:
    19 000048A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2304                              <1> getSFTPtrfromSFTNdx:    ;Int 4Fh AX=1216h
  2305                              <1> ;Return a pointer to the SFT entry in rdi
  2306                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2307                              <1> ;Output: rdi = SFT pointer
  2308 000048A3 488B3D(49C00300)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2309                              <1> .walk:
  2310 000048AA 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2311 000048AE 7212                <1>     jb .thisTable
  2312 000048B0 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2313 000048B4 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2314 000048B7 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2315 000048BE 75EA                <1>     jne .walk
  2316 000048C0 F9                  <1>     stc
  2317                              <1>     return
    18                              <2> %%_ret:
    19 000048C1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2318                              <1> .thisTable:
  2319 000048C2 50                  <1>     push rax
  2320 000048C3 52                  <1>     push rdx
  2321 000048C4 B84F000000          <1>     mov eax, sft_size
  2322 000048C9 F7E3                <1>     mul ebx
  2323 000048CB 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2324 000048CE 5A                  <1>     pop rdx
  2325 000048CF 58                  <1>     pop rax
  2326 000048D0 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2327                              <1>     return
    18                              <2> %%_ret:
    19 000048D7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2328                              <1> getJFTPtr:    ;Int 4Fh AX=1220h
  2329                              <1> ;Return a zero extended value in rdi for the SFT entry
  2330                              <1> ;Input: bx = JFT handle (we zero extend)
  2331                              <1> ;Output: CF=NC => rdi = Points to an SFT ndx or -1 => free space
  2332                              <1> ;        CF=CY => al = Error code, Fail
  2333 000048D8 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2334 000048DB 663B1D38B7FFFF      <1>     cmp bx, word [maxHndls] ;0-19 acceptable ONLY!
  2335 000048E2 7204                <1>     jb .ok
  2336 000048E4 B006                <1>     mov al, errBadHdl
  2337 000048E6 F9                  <1>     stc
  2338                              <1>     return
    18                              <2> %%_ret:
    19 000048E7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2339                              <1> .ok:
  2340 000048E8 488B3D(04C40300)    <1>     mov rdi, qword [currentPSP]
  2341 000048EF 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2342 000048F4 F8                  <1>     clc
  2343                              <1>     return
    18                              <2> %%_ret:
    19 000048F5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2344                              <1> findFreeJFTEntry:
  2345                              <1> ;Finds a free JFT entry in the currentPSP.
  2346                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2347                              <1> ;        CF=CY => al=errNhl
  2348 000048F6 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2349                              <1> .searchLp:
  2350 000048F8 E8DBFFFFFF          <1>     call getJFTPtr
  2351 000048FD 7209                <1>     jc .badExit
  2352 000048FF 803FFF              <1>     cmp byte [rdi], -1
  2353                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004902 74F1                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2354 00004904 FFC3                <1>     inc ebx
  2355 00004906 EBF0                <1>     jmp short .searchLp
  2356                              <1> .badExit:
  2357 00004908 B004                <1>     mov al, errNhl
  2358 0000490A F9                  <1>     stc
  2359                              <1>     return
    18                              <2> %%_ret:
    19 0000490B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2360                              <1> getSFTPtr:
  2361                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2362                              <1> ;Input: bx = JFT handle
  2363                              <1> ;Output: CF=NC: rdi = SFT pointer
  2364                              <1> ;        CF=CY: Error, ax=Error code
  2365 0000490C E815000000          <1>     call derefSFTPtr
  2366                              <1>     retc    ;Return if carry
    62                              <2> cret c
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004911 72F8                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2367 00004913 50                  <1>     push rax
  2368 00004914 0FB705(28C40300)    <1>     movzx eax, word [machineNum]
  2369 0000491B 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2370 0000491F 58                  <1>     pop rax
  2371                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004920 74E9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
  2372 00004922 B006                <1>     mov al, errBadHdl   ;Error code
  2373 00004924 F9                  <1>     stc         ;Reset CF
  2374                              <1>     return
    18                              <2> %%_ret:
    19 00004925 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2375                              <1> 
  2376                              <1> derefSFTPtr:
  2377                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2378                              <1> ;Input: bx = File handle (gets zero extended)
  2379                              <1> ;Output: CF=NC: rdi = SFT pointer
  2380                              <1> ;        CF=CY: Error, ax=Error code
  2381 00004926 E8ADFFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2382 0000492B 7205                <1>     jb .fail
  2383 0000492D 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2384 00004930 7504                <1>     jne .ok
  2385                              <1> .fail:
  2386 00004932 B006                <1>     mov al, errBadHdl
  2387 00004934 F9                  <1>     stc
  2388                              <1>     return
    18                              <2> %%_ret:
    19 00004935 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2389                              <1> .ok:
  2390 00004936 53                  <1>     push rbx    ;Preserve the JFT handle
  2391 00004937 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2392 0000493A E864FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2393 0000493F 5B                  <1>     pop rbx 
  2394                              <1>     return
    18                              <2> %%_ret:
    19 00004940 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2395                              <1> 
  2396                              <1> getBytesTransferred:
  2397 00004941 8B0D(5CC70300)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2398 00004947 F7D9                <1>     neg ecx ;Multiply by -1
  2399 00004949 030D(58C70300)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2400                              <1>     return ;Return bytes transferred in ecx
    18                              <2> %%_ret:
    19 0000494F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2401                              <1> 
  2402                              <1> getSFTndxInheritable:
  2403                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2404                              <1> ;Input: ebx = SFTndx (word)
  2405                              <1> ;Output: 
  2406                              <1> ;   ZF=ZE => Inheritable
  2407                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2408 00004950 57                  <1>     push rdi
  2409 00004951 E84DFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2410 00004956 7208                <1>     jc .badNdx
  2411 00004958 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2412 0000495E 5F                  <1>     pop rdi
  2413                              <1>     return
    18                              <2> %%_ret:
    19 0000495F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2414                              <1> .badNdx:
  2415 00004960 31FF                <1>     xor edi, edi
  2416 00004962 FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2417 00004964 F8                  <1>     clc
  2418 00004965 5F                  <1>     pop rdi
  2419                              <1>     return
    18                              <2> %%_ret:
    19 00004966 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2420                              <1> 
  2421                              <1> incrementOpenCount:
  2422                              <1> ;Given a SFTndx, this function will increment it's open count
  2423                              <1> ;Output:
  2424                              <1> ;   CF=NC => sftndx ok, count incremented
  2425                              <1> ;   CF=CY => Bad ndx
  2426 00004967 57                  <1>     push rdi
  2427 00004968 E836FFFFFF          <1>     call getSFTPtrfromSFTNdx
  2428 0000496D 7203                <1>     jc .exit
  2429 0000496F 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2430                              <1> .exit:
  2431 00004972 5F                  <1>     pop rdi
  2432                              <1>     return
    18                              <2> %%_ret:
    19 00004973 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
  2433                              <1> 
  2434                              <1> decrementOpenCount: ;Int 4Fh AX = 1208h
  2435                              <1> ;Input: rdi = SFT pointer
  2436                              <1> ;Output: ax = Original wNumHandles count
  2437 00004974 9C                  <1>     pushfq
  2438 00004975 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2439 00004978 FFC8                <1>     dec eax     ;Decrement count
  2440 0000497A 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2441 0000497C FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2442                              <1> .exit:
  2443 0000497E 9D                  <1>     popfq
  2444 0000497F 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2445                              <1>     return
    18                              <2> %%_ret:
    19 00004982 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    32                                  %include "./Source/Kernel/FileIO/ioctl.asm"
    33                              <1> ioctrl:            ;ah = 44h, handle function
    34                              <1> ;Possible subfunctions
    35                              <1> ;======================================================
    36                              <1> ;Handle Information Functions                         |
    37                              <1> ;al = 00h => Get Handle Information word in dx        x
    38                              <1> ;al = 01h => Set Handle Information word              x
    39                              <1> ;======================================================
    40                              <1> ;IO Control String Functions (optionally implemented) |
    41                              <1> ;al = 02h => Read from Char device                    x
    42                              <1> ;al = 03h => Write to Char device                     x
    43                              <1> ;al = 04h => Read from Block device                   x
    44                              <1> ;al = 05h => Write to Block device                    x
    45                              <1> ;======================================================
    46                              <1> ;IO Status Functions (optionally implemented)         |
    47                              <1> ;al = 06h => Get input status                         x
    48                              <1> ;al = 07h => Get output status                        x
    49                              <1> ;======================================================
    50                              <1> ;Device information (optionally implemented)          |  
    51                              <1> ;al = 08h => Is a block device removable?       
    52                              <1> ;al = 09h => Is a logical device local or remote?   
    53                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    54                              <1> ;======================================================
    55                              <1> ;SHARE.EXE control                                    |
    56                              <1> ;al = 0Bh => Change sharing retry count               x  
    57                              <1> ;======================================================
    58                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    59                              <1> ;======================================================
    60                              <1> ;Generic IOCTL string (optionally implemented)
    61                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    62                              <1> ;======================================================
    63                              <1> ;Disk Drive change drive (optionally implemented)
    64                              <1> ;al = 0Eh => Get logical device                 
    65                              <1> ;al = 0Fh => Set logical device  
    66                              <1> ;======================================================
    67 00004983 3C0F                <1>     cmp al, 15
    68 00004985 774B                <1>     ja .invalidFunction
    69 00004987 3C0C                <1>     cmp al, 0Ch
    70 00004989 7451                <1>     je .accessDeniedError
    71 0000498B 84C0                <1>     test al, al
    72 0000498D 745B                <1>     jz .getDevWord
    73 0000498F 3C01                <1>     cmp al, 1
    74 00004991 746E                <1>     je .setDevWord
    75 00004993 2C02                <1>     sub al, 2
    76 00004995 3C03                <1>     cmp al, 3
    77 00004997 7673                <1>     jbe .ioctlStringFunctions
    78 00004999 2C04                <1>     sub al, 4
    79 0000499B 3C01                <1>     cmp al, 1
    80 0000499D 0F8681010000        <1>     jbe .ioStatusFunctions
    81 000049A3 2C02                <1>     sub al, 2
    82 000049A5 3C02                <1>     cmp al, 2
    83 000049A7 0F8644020000        <1>     jbe .devControl
    84 000049AD FEC8                <1>     dec al
    85 000049AF 0F840F030000        <1>     jz .setSharingCount
    86 000049B5 2C02                <1>     sub al, 2
    87 000049B7 0F8425030000        <1>     jz .genericCharDevIOCTL
    88 000049BD FEC8                <1>     dec al
    89 000049BF 0F844B030000        <1>     jz .genericBlokDevIOCTL
    90 000049C5 FEC8                <1>     dec al
    91 000049C7 0F840A040000        <1>     jz .getDrvLogicalDevice
    92 000049CD E981040000          <1>     jmp .setDrvLogicalDevice
    93                              <1> .invalidFunction:
    94 000049D2 B801000000          <1>     mov eax, errInvFnc
    95                              <1> .ifExit:
    96 000049D7 E9E4200000          <1>     jmp extErrExit
    97                              <1> .accessDeniedError:
    98 000049DC B805000000          <1>     mov eax, errAccDen
    99 000049E1 EBF4                <1>     jmp short .ifExit
   100                              <1> .badHandle:
   101 000049E3 B806000000          <1>     mov eax, errBadHdl
   102 000049E8 EBED                <1>     jmp short .ifExit
   103                              <1> 
   104                              <1> ;...Functions...
   105                              <1> .getDevWord:
   106                              <1> ;Input: bx = File Handle
   107 000049EA E837FFFFFF          <1>     call derefSFTPtr
   108 000049EF 72F2                <1>     jc .badHandle
   109 000049F1 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
   110 000049F5 30C0                <1>     xor al, al
   111 000049F7 E81C1C0000          <1>     call getUserRegs
   112 000049FC 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   113                              <1>     return
    18                              <2> %%_ret:
    19 00004A00 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   114                              <1> .setDevWord:
   115                              <1> ;Input: bx = File Handle
   116                              <1> ;       dl = Low byte of Device information word
   117 00004A01 E820FFFFFF          <1>     call derefSFTPtr
   118 00004A06 72DB                <1>     jc .badHandle 
   119 00004A08 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
   120                              <1>     return
    18                              <2> %%_ret:
    19 00004A0B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   121                              <1> .ioctlStringFunctions:
   122                              <1> ;al = 0 -> ReadCharDev
   123                              <1> ;al = 1 -> WriteCharDev
   124                              <1> ;al = 2 -> ReadDiskDev
   125                              <1> ;al = 3 -> WriteDiskDev
   126                              <1> ;Input: bx = File handle/drive number
   127                              <1> ;       ecx = Bytes to transfer
   128                              <1> ;       rdx = Ptr to string to transfer
   129 00004A0C 0FB6F3              <1>     movzx esi, bl
   130 00004A0F 488D1D(A5C40300)    <1>     lea rbx, primReqHdr
   131 00004A16 C605(EFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   132 00004A1D C605(4CC40300)00    <1>     mov byte [Int44bitfld], 0
   133                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   134                              <1> ;Setup the common ioReqPkt fields and the read/write 
   135 00004A24 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   136 00004A27 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   137 00004A2A 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   138 00004A2E 51                  <1>     push rcx
   139 00004A2F 52                  <1>     push rdx
   140 00004A30 B903000000          <1>     mov ecx, drvIOCTLREAD
   141 00004A35 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   142 00004A3A A801                <1>     test al, 1  ;If set, this is a write operation
   143 00004A3C 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   144 00004A3F 7507                <1>     jnz .notWrite
   145 00004A41 800D(4CC40300)01    <1>     or byte [Int44bitfld], critWrite
   146                              <1> .notWrite:
   147 00004A48 5A                  <1>     pop rdx
   148 00004A49 59                  <1>     pop rcx
   149 00004A4A 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   150 00004A4D 3C01                <1>     cmp al, 1
   151 00004A4F 772F                <1>     ja .ioctlStringBlockDevice
   152                              <1>     ;Here we are for char devices only
   153 00004A51 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   154 00004A54 E8CDFEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   155 00004A59 7288                <1>     jc .badHandle 
   156 00004A5B C605(EFC30300)04    <1>     mov byte [errorLocus], eLocChr
   157 00004A62 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   158 00004A68 0F8464FFFFFF        <1>     jz .invalidFunction
   159                              <1> 
   160 00004A6E 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   161 00004A72 800D(4CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   162 00004A79 4887DE              <1>     xchg rbx, rsi   ;Swap back
   163 00004A7C 31C0                <1>     xor eax, eax
   164 00004A7E EB38                <1>     jmp short .ioctlStringCommon
   165                              <1> .ioctlStringBlockDevice:
   166                              <1>     ;Here we are for block devices only
   167                              <1>     ;esi has the drive number
   168 00004A80 C605(EFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   169 00004A87 89F0                <1>     mov eax, esi
   170 00004A89 53                  <1>     push rbx
   171 00004A8A E8161C0000          <1>     call getCDS ;Returns in al the unit number of the drive
   172 00004A8F 5B                  <1>     pop rbx
   173 00004A90 730A                <1>     jnc .okDrive
   174 00004A92 B80F000000          <1>     mov eax, errBadDrv
   175 00004A97 E924200000          <1>     jmp extErrExit
   176                              <1> .okDrive:
   177 00004A9C 488B35(F2C60300)    <1>     mov rsi, qword [workingCDS]
   178 00004AA3 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   179 00004AA7 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   180 00004AAA 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   181 00004AAD 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   182 00004AB1 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   183 00004AB4 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   184                              <1> .ioctlStringCommon:
   185                              <1>     ;rsi -> Device Driver header
   186                              <1>     ;rbx -> Request Header
   187                              <1>     ;al = Media descriptor
   188 00004AB8 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   189 00004ABB 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   190 00004AC1 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   191                              <1>     ;Make request now
   192                              <1> .ioctlStringCommonRetry:
   193 00004AC7 51                  <1>     push rcx    ;Push xfrctr
   194 00004AC8 52                  <1>     push rdx    ;Buffer Ptr
   195 00004AC9 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   196 00004ACF E859170000          <1>     call goDriver
   197 00004AD4 5A                  <1>     pop rdx
   198 00004AD5 59                  <1>     pop rcx
   199                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   200 00004AD6 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   201 00004ADC 0F84D01F0000        <1>     jz extGoodExit
   202 00004AE2 800D(4CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   203 00004AE9 8A4301              <1>     mov al, byte [rbx + ioReqPkt.unitnm]
   204 00004AEC 8A25(4CC40300)      <1>     mov ah, byte [Int44bitfld]
   205 00004AF2 48893D(F4C30300)    <1>     mov qword [xInt44RDI], rdi
   206 00004AF9 480FB67B03          <1>     movzx rdi, byte [rbx + ioReqPkt.status] ;Get low word of status (errorcde)
   207 00004AFE E871120000          <1>     call criticalDOSError
   208 00004B03 488B3D(F4C30300)    <1>     mov rdi, qword [xInt44RDI]
   209 00004B0A 3C00                <1>     cmp al, critIgnore
   210 00004B0C 0F84A01F0000        <1>     je extGoodExit 
   211 00004B12 3C01                <1>     cmp al, critRetry
   212 00004B14 74B1                <1>     je .ioctlStringCommonRetry
   213 00004B16 0FB64303            <1>     movzx eax, byte [rbx + ioReqPkt.status]    ;Get the error code into al
   214 00004B1A 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   215 00004B1F E99C1F0000          <1>     jmp extErrExit
   216                              <1> 
   217                              <1> 
   218                              <1> .ioStatusFunctions:
   219                              <1> ;al = 0 -> Get input status 
   220                              <1> ;al = 1 -> Get output status
   221 00004B24 E8FDFDFFFF          <1>     call derefSFTPtr
   222 00004B29 0F82B4FEFFFF        <1>     jc .badHandle 
   223 00004B2F 488D1D(A5C40300)    <1>     lea rbx, primReqHdr
   224 00004B36 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   225 00004B39 C605(EFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   226 00004B40 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   227 00004B46 0F8586FEFFFF        <1>     jnz .invalidFunction
   228 00004B4C C605(4CC40300)00    <1>     mov byte [Int44bitfld], 0
   229 00004B53 B906000000          <1>     mov ecx, drvINSTATUS
   230 00004B58 BA0A000000          <1>     mov edx, drvOUTSTATUS
   231 00004B5D 84C0                <1>     test al, al
   232 00004B5F 0F45CA              <1>     cmovnz ecx, edx
   233 00004B62 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   234 00004B65 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   235 00004B6B 7416                <1>     jz .ioStatDisk
   236 00004B6D C605(EFC30300)04    <1>     mov byte [errorLocus], eLocChr
   237 00004B74 800D(4CC40300)80    <1>     or byte [Int44bitfld], critCharDev
   238 00004B7B 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   239 00004B7F 30C0                <1>     xor al, al
   240 00004B81 EB15                <1>     jmp short .ioStatCommon
   241                              <1> .ioStatDisk:
   242 00004B83 C605(EFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   243 00004B8A 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   244 00004B8E 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   245 00004B91 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   246 00004B94 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   247                              <1> .ioStatCommon:
   248 00004B98 E890160000          <1>     call goDriver
   249 00004B9D 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   250 00004BA3 743E                <1>     jz .ioStatOk
   251                              <1>     ;Error handling here
   252                              <1> 
   253 00004BA5 800D(4CC40300)18    <1>     or byte [Int44bitfld], critFailOK | critRetryOK | critFailOK
   254 00004BAC 8A4301              <1>     mov al, byte [rbx + statusReqPkt.unitnm]
   255 00004BAF 8A25(4CC40300)      <1>     mov ah, byte [Int44bitfld]
   256 00004BB5 48893D(F4C30300)    <1>     mov qword [xInt44RDI], rdi
   257 00004BBC 480FB67B03          <1>     movzx rdi, byte [rbx + statusReqPkt.status]
   258 00004BC1 E8AE110000          <1>     call criticalDOSError
   259 00004BC6 488B3D(F4C30300)    <1>     mov rdi, qword [xInt44RDI]
   260 00004BCD 3C00                <1>     cmp al, critIgnore
   261 00004BCF 7412                <1>     je .ioStatOk 
   262 00004BD1 3C01                <1>     cmp al, critRetry
   263 00004BD3 74C3                <1>     je .ioStatCommon
   264 00004BD5 0FB64303            <1>     movzx eax, byte [rbx + statusReqPkt.status]    ;Get the error code into al
   265 00004BD9 0513000000          <1>     add eax, drvErrShft ;Convert to general error code
   266 00004BDE E9DD1E0000          <1>     jmp extErrExit
   267                              <1> 
   268                              <1> .ioStatOk:
   269 00004BE3 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   270 00004BE9 7403                <1>     jz .notBusyExit
   271 00004BEB B0FF                <1>     mov al, -1  ;Device Busy/EOF
   272                              <1>     return 
    18                              <2> %%_ret:
    19 00004BED C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   273                              <1> .notBusyExit:
   274                              <1> ;Device ready/NotEOF
   275 00004BEE 31C0                <1>     xor eax, eax
   276                              <1>     return
    18                              <2> %%_ret:
    19 00004BF0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   277                              <1> 
   278                              <1> .devControl:
   279                              <1> ;al = 0 -> Is media removable?
   280                              <1> ;al = 1 -> Is device local or remote?
   281                              <1> ;al = 2 -> Is handle local or remote?
   282 00004BF1 84C0                <1>     test al, al
   283 00004BF3 746D                <1>     jz .remTest
   284 00004BF5 A801                <1>     test al, 1
   285 00004BF7 751B                <1>     jnz .deviceTest
   286                              <1> ;Handle Local or Remote
   287 00004BF9 E828FDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   288 00004BFE 0F82DFFDFFFF        <1>     jc .badHandle 
   289 00004C04 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   290                              <1> .devControlExit:
   291 00004C08 E80B1A0000          <1>     call getUserRegs
   292 00004C0D 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   293 00004C11 31C0                <1>     xor eax, eax
   294                              <1>     return 
    18                              <2> %%_ret:
    19 00004C13 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   295                              <1> .deviceTest:
   296                              <1> ;Drive Local or Remote
   297                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   298                              <1> ;Else, just get the CDS word and swap subst and net
   299 00004C14 88D8                <1>     mov al, bl
   300 00004C16 E88A1A0000          <1>     call getCDS
   301 00004C1B 730A                <1>     jnc .devTestOkDrive
   302 00004C1D B80F000000          <1>     mov eax, errBadDrv
   303 00004C22 E9991E0000          <1>     jmp extErrExit
   304                              <1> .devTestOkDrive:
   305 00004C27 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS]
   306 00004C2E 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   307 00004C32 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   308 00004C37 7513                <1>     jnz .remoteDrive
   309 00004C39 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   310 00004C3D 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   311 00004C41 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   312 00004C45 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   313 00004C4A EBBC                <1>     jmp short .devControlExit
   314                              <1> .remoteDrive:
   315 00004C4C 6689D3              <1>     mov bx, dx
   316 00004C4F 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   317 00004C54 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   318 00004C59 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   319 00004C5B 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   320 00004C60 EBA6                <1>     jmp short .devControlExit   ;Store it
   321                              <1> 
   322                              <1> .remTest:
   323                              <1> ;Drive letter in bl
   324 00004C62 88D8                <1>     mov al, bl
   325 00004C64 E83C1A0000          <1>     call getCDS
   326 00004C69 730A                <1>     jnc .remTestOkDrive
   327                              <1> .remTestBadDrv:
   328 00004C6B B80F000000          <1>     mov eax, errBadDrv
   329 00004C70 E94B1E0000          <1>     jmp extErrExit
   330                              <1> .remTestOkDrive:
   331 00004C75 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   332 00004C7C 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   333 00004C82 75E7                <1>     jnz .remTestBadDrv
   334 00004C84 488D1D(A5C40300)    <1>     lea rbx, primReqHdr
   335 00004C8B 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   336 00004C8F 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   337 00004C92 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   338 00004C96 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   339 00004C9C 0F8430FDFFFF        <1>     jz .invalidFunction
   340 00004CA2 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   341 00004CA5 C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   342 00004CA9 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   343 00004CAF 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   344 00004CB2 E876150000          <1>     call goDriver
   345 00004CB7 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   346 00004CBB 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   347 00004CC0 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   348                              <1>     return
    18                              <2> %%_ret:
    19 00004CC3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   349                              <1> 
   350                              <1> .setSharingCount:
   351                              <1> ;Input: cx = Share Count
   352                              <1> ;       dx = Share Retry
   353 00004CC4 66890D(25C00300)    <1>     mov word [shareCount], cx
   354 00004CCB 6685D2              <1>     test dx, dx
   355 00004CCE 0F84FEFCFFFF        <1>     jz .invalidFunction
   356 00004CD4 668915(27C00300)    <1>     mov word [shareDelay], dx
   357 00004CDB 31C0                <1>     xor eax, eax
   358 00004CDD E9D01D0000          <1>     jmp extGoodExit
   359                              <1> 
   360                              <1> .genericCharDevIOCTL:
   361 00004CE2 E825FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   362 00004CE7 7311                <1>     jnc .okHandle
   363                              <1> .ioctrlBadHandle:
   364 00004CE9 C605(EFC30300)04    <1>     mov byte [errorLocus], eLocChr
   365 00004CF0 B806000000          <1>     mov eax, errBadHdl
   366 00004CF5 E9C61D0000          <1>     jmp extErrExit
   367                              <1> .okHandle:
   368 00004CFA 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   369 00004D00 75E7                <1>     jnz .ioctrlBadHandle
   370 00004D02 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   371 00004D08 74DF                <1>     jz .ioctrlBadHandle
   372 00004D0A 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   373 00004D0E EB49                <1>     jmp short .ioctlReqMake
   374                              <1> .genericBlokDevIOCTL:
   375 00004D10 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   376 00004D12 51                  <1>     push rcx
   377 00004D13 52                  <1>     push rdx
   378 00004D14 E88C190000          <1>     call getCDS ;Sets the current CDS
   379 00004D19 5A                  <1>     pop rdx
   380 00004D1A 59                  <1>     pop rcx
   381 00004D1B 7217                <1>     jc .badDrv
   382                              <1>     ;Check the CDS not net, subst or join
   383 00004D1D 488B35(F2C60300)    <1>     mov rsi, qword [workingCDS]
   384 00004D24 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   385 00004D28 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   386 00004D2C 7406                <1>     jz .badDrv
   387 00004D2E 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   388 00004D32 7411                <1>     jz .goodDrive
   389                              <1> .badDrv:
   390 00004D34 C605(EFC30300)02    <1>     mov byte [errorLocus], eLocDsk
   391 00004D3B B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   392 00004D40 E97B1D0000          <1>     jmp extErrExit
   393                              <1> .goodDrive:
   394                              <1>     ;CDS is good,now get the DPB
   395 00004D45 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   396 00004D49 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   397 00004D4D 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   398 00004D50 8805(A6C40300)      <1>     mov byte [primReqHdr + ioctlReqPkt.unitnm], al
   399 00004D56 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   400                              <1> .ioctlReqMake:
   401                              <1> ;rsi must point to the driver header here
   402 00004D59 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   403 00004D5F 7511                <1>     jnz .supportsIOCTL
   404                              <1> .badFunction:
   405 00004D61 C605(EFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   406 00004D68 B801000000          <1>     mov eax, errInvFnc
   407 00004D6D E94E1D0000          <1>     jmp extErrExit
   408                              <1> .supportsIOCTL:
   409                              <1>     ;Setup the request header
   410 00004D72 488D1D(A5C40300)    <1>     lea rbx, primReqHdr
   411 00004D79 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   412 00004D7C C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   413 00004D80 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   414 00004D86 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   415 00004D8A 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   416 00004D8E 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   417 00004D91 E882180000          <1>     call getUserRegs
   418 00004D96 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   419 00004D9A 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   420 00004D9E 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   421 00004DA2 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   422 00004DA6 4889FE              <1>     mov rsi, rdi
   423 00004DA9 E87F140000          <1>     call goDriver
   424 00004DAE 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   425 00004DB4 0F84F81C0000        <1>     jz extGoodExit
   426 00004DBA 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   427 00004DBE 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   428 00004DC4 89F8                <1>     mov eax, edi
   429 00004DC6 E81D0F0000          <1>     call xlatHardError
   430 00004DCB 0FB705(F0C30300)    <1>     movzx eax, word [errorExCde] 
   431 00004DD2 E9E91C0000          <1>     jmp extErrExit
   432                              <1> 
   433                              <1> .getDrvLogicalDevice:
   434 00004DD7 88D8                <1>     mov al, bl
   435 00004DD9 488D1D(A5C40300)    <1>     lea rbx, primReqHdr
   436 00004DE0 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   437 00004DE4 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   438 00004DE7 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   439 00004DED 53                  <1>     push rbx
   440 00004DEE E8B2180000          <1>     call getCDS
   441 00004DF3 8805(E9C60300)      <1>     mov byte [workingDrv], al
   442 00004DF9 5B                  <1>     pop rbx
   443 00004DFA 0F826BFEFFFF        <1>     jc .remTestBadDrv
   444 00004E00 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS]
   445 00004E07 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   446 00004E0B 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   447 00004E0F 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   448 00004E12 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   449                              <1> 
   450 00004E15 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   451 00004E1B 0F84B1FBFFFF        <1>     jz .invalidFunction
   452 00004E21 E807140000          <1>     call goDriver
   453 00004E26 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   454 00004E2C 7421                <1>     jz .getDrvOk
   455                              <1>     ;Can only Fail, Ignore and Abort.
   456 00004E2E 0FB605(E9C60300)    <1>     movzx eax, byte [workingDrv]  
   457 00004E35 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   458 00004E38 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   459 00004E3C E8330F0000          <1>     call criticalDOSError
   460 00004E41 3C00                <1>     cmp al, critIgnore
   461 00004E43 740A                <1>     je .getDrvOk
   462 00004E45 B801000000          <1>     mov eax, errInvFnc
   463 00004E4A E9711C0000          <1>     jmp extErrExit
   464                              <1> .getDrvOk:
   465 00004E4F 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   466                              <1>     return
    18                              <2> %%_ret:
    19 00004E52 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   467                              <1> .setDrvLogicalDevice:
   468 00004E53 88D8                <1>     mov al, bl
   469 00004E55 488D1D(A5C40300)    <1>     lea rbx, primReqHdr
   470 00004E5C C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   471 00004E60 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   472 00004E63 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   473 00004E69 53                  <1>     push rbx
   474 00004E6A E836180000          <1>     call getCDS
   475 00004E6F 8805(E9C60300)      <1>     mov byte [workingDrv], al
   476 00004E75 5B                  <1>     pop rbx
   477 00004E76 0F82EFFDFFFF        <1>     jc .remTestBadDrv
   478 00004E7C 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS]
   479 00004E83 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   480 00004E87 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   481 00004E8B 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   482 00004E8E 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   483 00004E91 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   484 00004E97 0F8435FBFFFF        <1>     jz .invalidFunction
   485 00004E9D E88B130000          <1>     call goDriver
   486 00004EA2 30C0                <1>     xor al, al
   487 00004EA4 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   488                              <1>     retz    ;Return if OK
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004EAA 74A6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   489                              <1>     ;Can only Fail, Ignore and Abort.
   490 00004EAC 0FB605(E9C60300)    <1>     movzx eax, byte [workingDrv]  
   491 00004EB3 80CC28              <1>     or ah, critRead | critIgnorOK | critFailOK
   492 00004EB6 0FB77B03            <1>     movzx edi, word [rbx + getDevReqPkt.status]
   493 00004EBA E8B50E0000          <1>     call criticalDOSError
   494 00004EBF 3C00                <1>     cmp al, critIgnore
   495                              <1>     rete    ;Return if Ignore
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00004EC1 748F                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   496 00004EC3 B801000000          <1>     mov eax, errInvFnc
   497 00004EC8 E9F31B0000          <1>     jmp extErrExit
   498                              <1> 
    33                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    34                              <1> ;Memory related functions
    35                              <1> 
    36                              <1> ;-----------------------------------:
    37                              <1> ;  Memory related Kernel routines   :
    38                              <1> ;-----------------------------------:
    39                              <1> allocateMemory:    ;ah = 48h
    40                              <1> ;Input: ebx = Number of paragraphs requested
    41                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    42                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    43 00004ECD E8A31B0000          <1>     call dosCrit1Enter
    44 00004ED2 31D2                <1>     xor edx, edx
    45                              <1>     ;Clear the pointers
    46 00004ED4 488915(2AC40300)    <1>     mov qword [firstMCB], rdx
    47 00004EDB 488915(32C40300)    <1>     mov qword [bestMCB], rdx
    48 00004EE2 488915(3AC40300)    <1>     mov qword [lastMCB], rdx
    49 00004EE9 31ED                <1>     xor ebp, ebp    
    50 00004EEB FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    51 00004EED 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    52                              <1> .walk:
    53 00004EF4 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    54 00004EF7 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    55 00004EFA 7409                <1>     je .walk1
    56 00004EFC 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    57 00004EFF 0F850B050000        <1>     jne badMCBChain
    58                              <1> .walk1:
    59                              <1>     ;Here if valid but not the last block
    60 00004F05 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    61 00004F0D 0F8582000000        <1>     jne .walk2
    62                              <1>     ;Here we consolidate adjacent free blocks if there are any
    63                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    64                              <1>     ;End consolidation at first non free block or at last block in chain
    65 00004F13 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    66 00004F16 744A                <1>     je .det0    ;Determine if this block is useful
    67 00004F18 31C9                <1>     xor ecx, ecx
    68 00004F1A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    69 00004F1D 4881C610000000      <1>     add rsi, mcb.program
    70                              <1> .cons0:
    71 00004F24 48C1E104            <1>     shl rcx, 4
    72 00004F28 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    73 00004F2B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    74 00004F2E 7409                <1>     je .cons1
    75 00004F30 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    76 00004F33 0F85D7040000        <1>     jne badMCBChain 
    77                              <1> .cons1:
    78 00004F39 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    79 00004F41 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    80                              <1>     ;Here rsi, points to a free block, add it to rdi
    81 00004F43 31C9                <1>     xor ecx, ecx
    82 00004F45 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    83 00004F48 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    84 00004F4E 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    85 00004F51 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    86 00004F53 31D2                <1>     xor edx, edx
    87 00004F55 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    88 00004F58 48895608            <1>     mov qword [rsi + 8], rdx
    89 00004F5C 3C5A                <1>     cmp al, mcbMarkEnd
    90 00004F5E 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    91                              <1>     ;Here we deal with if the block was the last one 
    92 00004F60 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    93                              <1> .det0:  ;Now determine if pointer in rdi is useful
    94 00004F62 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    95                              <1> ;ebx must be less than the arena size for the arena to be useful!
    96 00004F65 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    97 00004F68 39D9                <1>     cmp ecx, ebx
    98 00004F6A 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    99 00004F6C 488935(3AC40300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
   100 00004F73 488B05(2AC40300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
   101 00004F7A 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
   102 00004F7D 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
   103 00004F7F 488935(2AC40300)    <1>     mov qword [firstMCB], rsi
   104                              <1> .det1:
   105                              <1>     ;Now test for best fit.
   106 00004F86 29D9                <1>     sub ecx, ebx    ;Block - ebx
   107 00004F88 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
   108 00004F8A 7209                <1>     jb .walk2
   109 00004F8C 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   110 00004F8E 488935(32C40300)    <1>     mov qword [bestMCB], rsi
   111                              <1> .walk2:
   112 00004F95 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   113 00004F98 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   114 00004F9A 31C9                <1>     xor ecx, ecx
   115 00004F9C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   116 00004F9F 48C1E104            <1>     shl rcx, 4
   117 00004FA3 4881C610000000      <1>     add rsi, mcb.program
   118 00004FAA 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   119 00004FAD E942FFFFFF          <1>     jmp .walk
   120                              <1> .allocate:
   121                              <1>     ;Allocation fails IF the pointer is the null pointer
   122 00004FB2 803D(B8C30300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   123 00004FB9 7266                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   124                              <1>     ;Fall thru if last fit
   125 00004FBB 488B35(3AC40300)    <1>     mov rsi, qword [lastMCB]
   126 00004FC2 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   127 00004FC5 0F84D8000000        <1>     jz .allocFail
   128 00004FCB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   129 00004FCD C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   130 00004FD0 31C9                <1>     xor ecx, ecx
   131 00004FD2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   132 00004FD5 29D9                <1>     sub ecx, ebx
   133 00004FD7 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   134 00004FDD 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   135 00004FE0 48C1E104            <1>     shl rcx, 4
   136 00004FE4 4881C610000000      <1>     add rsi, mcb.program
   137 00004FEB 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   138 00004FEE 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   139 00004FF0 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   140 00004FF3 488B15(04C40300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   141 00004FFA 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   142 00004FFE 488B15(5FC40300)    <1>     mov rdx, qword [oldRSP]
   143 00005005 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   144 0000500C 4889F0              <1>     mov rax, rsi
   145 0000500F 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   146 00005012 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 00005016 E8C8030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 0000501B E85F1A0000          <1>     call dosCrit1Exit
   149                              <1>     return
    18                              <2> %%_ret:
    19 00005020 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   150                              <1> .bfCommon:
   151 00005021 488B35(2AC40300)    <1>     mov rsi, qword [firstMCB]
   152 00005028 803D(B8C30300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   153 0000502F 480F4435(32C40300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   154 00005037 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   155 0000503A 7467                <1>     jz .allocFail
   156 0000503C 8A06                <1>     mov al, byte [rsi + mcb.marker]
   157 0000503E C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   158 00005041 31C9                <1>     xor ecx, ecx
   159 00005043 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   160 00005046 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   161 00005048 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   162 0000504E 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   163 00005051 488B15(04C40300)    <1>     mov rdx, qword [currentPSP]
   164 00005058 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   165 0000505C 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   166 0000505F 4881C610000000      <1>     add rsi, mcb.program
   167 00005066 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   168 0000506C 48C1E304            <1>     shl rbx, 4
   169 00005070 4801DE              <1>     add rsi, rbx
   170 00005073 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   171 00005075 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   172 0000507D 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   173 00005080 488B15(5FC40300)    <1>     mov rdx, qword [oldRSP]
   174 00005087 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   175 0000508E 4889F8              <1>     mov rax, rdi
   176 00005091 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   177 00005094 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   178 00005098 E846030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   179 0000509D E8DD190000          <1>     call dosCrit1Exit
   180                              <1>     return
    18                              <2> %%_ret:
    19 000050A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   181                              <1> .allocFail:
   182                              <1>     ;Walk the MCB chain to determine the biggest block size
   183 000050A3 488B35(39C00300)    <1>     mov rsi, [mcbChainPtr]
   184 000050AA 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   185                              <1> .af0:
   186 000050AC 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   187 000050AF 7409                <1>     je .af1
   188 000050B1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   189 000050B4 0F8556030000        <1>     jne badMCBChain
   190                              <1> .af1:
   191 000050BA 31C9                <1>     xor ecx, ecx
   192 000050BC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   193 000050BF 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   194 000050C7 7505                <1>     jne .af2
   195 000050C9 39D9                <1>     cmp ecx, ebx
   196 000050CB 0F47D9              <1>     cmova ebx, ecx
   197                              <1> .af2:
   198 000050CE 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   199 000050D1 7410                <1>     je .afExit
   200 000050D3 48C1E104            <1>     shl rcx, 4
   201 000050D7 4881C610000000      <1>     add rsi, mcb.program
   202 000050DE 4801CE              <1>     add rsi, rcx
   203 000050E1 EBD7                <1>     jmp short .af1
   204                              <1> .afExit:
   205 000050E3 B808000000          <1>     mov eax, errNoMem
   206 000050E8 488B15(5FC40300)    <1>     mov rdx, qword [oldRSP]
   207 000050EF 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   208 000050F2 E91B030000          <1>     jmp mcbErrHdlr
   209                              <1> freeMemory:        ;ah = 49h
   210                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   211                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   212                              <1> ;Always skip the first block as this is the anchor for DOS
   213 000050F7 E879190000          <1>     call dosCrit1Enter
   214 000050FC 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   215 00005103 31C9                <1>     xor ecx, ecx
   216 00005105 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   217 0000510C 4889F7              <1>     mov rdi, rsi
   218 0000510F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 00005112 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   220 00005116 4881C610000000      <1>     add rsi, mcb.program
   221 0000511D 4801CE              <1>     add rsi, rcx    ;Go to next block
   222                              <1> .mainLoop:
   223 00005120 31C9                <1>     xor ecx, ecx
   224 00005122 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   225 00005125 7409                <1>     je .valid
   226 00005127 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   227 0000512A 0F85E0020000        <1>     jne badMCBChain
   228                              <1> .valid:
   229 00005130 4939F0              <1>     cmp r8, rsi
   230 00005133 741C                <1>     je .blockFound
   231                              <1>     ;Not valid, check if last block in chain
   232 00005135 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   233 00005138 0F84A5000000        <1>     je .blockError
   234 0000513E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   235 00005141 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   236 00005145 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   237 0000514C 4801CE              <1>     add rsi, rcx    ;Go to next block
   238 0000514F EBCF                <1>     jmp short .mainLoop
   239                              <1> .blockFound:
   240                              <1>     ;If hole, error.
   241                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   242 00005151 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   243 00005159 0F8484000000        <1>     je .blockError
   244 0000515F 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   245 00005167 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   246 0000516F 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   247                              <1>     ;It is, let it absorb this space
   248 00005171 31C9                <1>     xor ecx, ecx
   249 00005173 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   250 00005176 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   251 0000517C 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   252                              <1>     ;Replace block marker
   253 0000517F 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   254 00005181 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   255 00005183 31C9                <1>     xor ecx, ecx
   256 00005185 48890E              <1>     mov qword [rsi], rcx
   257 00005188 48894E08            <1>     mov qword [rsi + 8], rcx
   258 0000518C 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   259                              <1> .blockFoundCheckFollowing:
   260                              <1>     ;First check if we are the last block in chain
   261 0000518F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   262 00005192 7439                <1>     je .blockFoundExit  ;If yes, exit!
   263 00005194 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   264 00005197 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   265 0000519A 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   266 0000519E 4881C110000000      <1>     add rcx, mcb.program
   267 000051A5 4801CE              <1>     add rsi, rcx    ;Go to next block
   268 000051A8 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   269 000051B0 751B                <1>     jne .blockFoundExit ;If not free, exit
   270                              <1>     ;If free, absorb into block pointed to by rdi
   271 000051B2 31C9                <1>     xor ecx, ecx
   272 000051B4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   273 000051B7 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   274 000051BD 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   275                              <1>     ;Replace block marker
   276 000051C0 8A06                <1>     mov al, byte [rsi + mcb.marker]
   277 000051C2 8807                <1>     mov byte [rdi + mcb.marker], al
   278 000051C4 31C9                <1>     xor ecx, ecx
   279 000051C6 48890E              <1>     mov qword [rsi], rcx
   280 000051C9 48894E08            <1>     mov qword [rsi + 8], rcx
   281                              <1> .blockFoundExit:
   282 000051CD E811020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   283 000051D2 E8A8180000          <1>     call dosCrit1Exit
   284 000051D7 488B1D(5FC40300)    <1>     mov rbx, qword [oldRSP]
   285 000051DE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   286                              <1>     return
    18                              <2> %%_ret:
    19 000051E2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   287                              <1> .blockError:
   288 000051E3 C605(EEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   289 000051EA B809000000          <1>     mov eax, errMemAddr
   290 000051EF E8CC180000          <1>     call extErrExit ;Error thru the unified error handler
   291 000051F4 E8EA010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   292 000051F9 E881180000          <1>     call dosCrit1Exit
   293                              <1>     return
    18                              <2> %%_ret:
    19 000051FE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   294                              <1> reallocMemory:     ;ah = 4Ah
   295                              <1> ;Input: r8 = address of the block to be realloc'ed
   296                              <1> ;       ebx = How many paras this block should contain after realloc. 
   297                              <1> ;               If ebx = 0, jump to free memory
   298 000051FF E871180000          <1>     call dosCrit1Enter
   299 00005204 85DB                <1>     test ebx, ebx
   300 00005206 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   301 0000520C 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   302 00005213 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   303 00005216 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   304 00005219 7409                <1>     je .ctn
   305 0000521B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   306 0000521E 0F856F010000        <1>     jne .badAddrGiven
   307                              <1> .ctn:
   308                              <1>     ;Provided block is valid and not a hole
   309                              <1>     ;Check if Growth or Shrink
   310 00005224 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   311 0000522C 74B5                <1>     je freeMemory.blockError
   312 0000522E 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   313 00005231 31C9                <1>     xor ecx, ecx
   314 00005233 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   315 00005236 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   316 00005238 0F8791000000        <1>     ja .growth
   317 0000523E 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   318                              <1> ;We can always shrink
   319 00005244 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   320 00005246 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   321 0000524C 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   322 0000524F 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   323 00005255 48C1E304            <1>     shl rbx, 4
   324 00005259 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   325 00005260 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   326 00005263 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   327 00005265 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   328 00005268 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   329 0000526A 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   330 00005272 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   331 00005275 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   332 00005277 0F84E6000000        <1>     je .exit
   333                              <1> ;Else, now see if the block following is also free and absorb it
   334 0000527D 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   335 00005280 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   336 00005284 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   337 0000528B 4801CE              <1>     add rsi, rcx    ;Goto next arena
   338 0000528E 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   339 00005291 7409                <1>     je .shrinkAbsorb
   340 00005293 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   341 00005296 0F8574010000        <1>     jne badMCBChain
   342                              <1> .shrinkAbsorb:
   343 0000529C 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   344 000052A4 0F85B9000000        <1>     jne .exit
   345                              <1>     ;It is free, absorb it
   346 000052AA 8A06                <1>     mov al, byte [rsi + mcb.marker]
   347 000052AC 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   348 000052AE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   349 000052B1 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   350 000052B4 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   351 000052B7 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   352 000052BA 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   353 000052BE 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   354 000052C1 31C9                <1>     xor ecx, ecx
   355                              <1>     ;Clear absorbed MCB
   356 000052C3 48890E              <1>     mov qword [rsi], rcx
   357 000052C6 48894E08            <1>     mov qword [rsi + 8], rcx
   358 000052CA E994000000          <1>     jmp .exit
   359                              <1> .growth:
   360                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   361 000052CF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   362 000052D2 0F84A5000000        <1>     je .notEnuffMem
   363                              <1> ;Now check the following space is free. If not, not enuff mem err
   364 000052D8 31C9                <1>     xor ecx, ecx
   365 000052DA 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   366 000052DD 48C1E104            <1>     shl rcx, 4
   367 000052E1 4889F7              <1>     mov rdi, rsi    
   368 000052E4 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   369 000052EB 4801CE              <1>     add rsi, rcx
   370 000052EE 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   371 000052F1 7409                <1>     je .growthOK
   372 000052F3 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   373 000052F6 0F8514010000        <1>     jne badMCBChain
   374                              <1> .growthOK:
   375                              <1>     ;rdi points to block we are growing
   376 000052FC 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   377 00005304 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   378                              <1>     ;rsi must own all memory up to the next owned arena
   379 00005306 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   380 00005308 31C9                <1>     xor ecx, ecx
   381 0000530A 31D2                <1>     xor edx, edx
   382 0000530C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   383 0000530F 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   384 00005315 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   385 00005318 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   386 0000531A 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   387 0000531C 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   388 0000531F 775E                <1>     ja .notEnuffMem1
   389 00005321 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   390 00005323 81FA01000000        <1>     cmp edx, 1
   391 00005329 744E                <1>     je .notEnuffMem2
   392 0000532B 31C9                <1>     xor ecx, ecx
   393 0000532D 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   394 00005330 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   395 00005334 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   396 00005337 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   397 0000533A 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   398 00005341 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   399 00005345 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   400 00005348 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   401 0000534C 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   402                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   403                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   404 0000534E 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   405 00005350 7411                <1>     jz .exit
   406 00005352 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   407 00005358 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   408 0000535B 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   409                              <1> .exit:
   410 00005363 E87B000000          <1>     call verifyIntegrityOfMCBChain
   411 00005368 E812170000          <1>     call dosCrit1Exit
   412 0000536D 488B1D(5FC40300)    <1>     mov rbx, qword [oldRSP]
   413 00005374 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   414                              <1>     return
    18                              <2> %%_ret:
    19 00005378 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   415                              <1> .notEnuffMem2:
   416 00005379 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   417 0000537B EB02                <1>     jmp short .notEnuffMem1
   418                              <1> .notEnuffMem:
   419 0000537D 31DB                <1>     xor ebx, ebx    ;No space to grow
   420                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   421 0000537F B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   422 00005384 488B15(5FC40300)    <1>     mov rdx, qword [oldRSP]
   423 0000538B 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   424 0000538E E97F000000          <1>     jmp mcbErrHdlr
   425                              <1> .badAddrGiven:
   426 00005393 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   427 00005398 E975000000          <1>     jmp mcbErrHdlr
   428                              <1> getsetMallocStrat: ;ah = 58h
   429 0000539D 84C0                <1>     test al, al
   430 0000539F 741F                <1>     jz .get
   431 000053A1 3C02                <1>     cmp al, 2
   432 000053A3 7337                <1>     jae .bad
   433                              <1> ;Set here
   434 000053A5 488B1D(5FC40300)    <1>     mov rbx, qword [oldRSP]
   435 000053AC 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   436 000053B0 8805(B8C30300)      <1>     mov byte [allocStrat], al   ;Only save low word
   437 000053B6 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   438 000053BA E824000000          <1>     call verifyIntegrityOfMCBChain
   439                              <1>     return
    18                              <2> %%_ret:
    19 000053BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   440                              <1> .get:
   441 000053C0 488B1D(5FC40300)    <1>     mov rbx, qword [oldRSP]
   442 000053C7 31C0                <1>     xor eax, eax
   443 000053C9 8A05(B8C30300)      <1>     mov al, byte [allocStrat]
   444 000053CF 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   445 000053D2 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   446 000053D6 E808000000          <1>     call verifyIntegrityOfMCBChain
   447                              <1>     return
    18                              <2> %%_ret:
    19 000053DB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   448                              <1> .bad:
   449 000053DC B801000000          <1>     mov eax, errInvFnc
   450 000053E1 EB2F                <1>     jmp short mcbErrHdlr
   451                              <1> ;-----------------------------------:
   452                              <1> ;      Memory related routines      :
   453                              <1> ;-----------------------------------:
   454                              <1> verifyIntegrityOfMCBChain:
   455 000053E3 50                  <1>     push rax
   456 000053E4 53                  <1>     push rbx
   457 000053E5 488B1D(39C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   458                              <1> .ok:
   459 000053EC 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   460 000053EF 7408                <1>     je .ok1
   461 000053F1 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   462 000053F4 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   463                              <1> .exit:
   464 000053F6 5B                  <1>     pop rbx
   465 000053F7 58                  <1>     pop rax
   466                              <1>     return ;We have reached the end of the chain, return all good!
    18                              <2> %%_ret:
    19 000053F8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   467                              <1> .ok1:
   468 000053F9 31C0                <1>     xor eax, eax
   469 000053FB 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   470 000053FE 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   471 00005402 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   472 00005409 4801C3              <1>     add rbx, rax
   473 0000540C EBDE                <1>     jmp short .ok
   474                              <1> .bmcbPrep:
   475 0000540E 5B                  <1>     pop rbx ;Pop off the stack first!
   476 0000540F 58                  <1>     pop rax
   477                              <1> badMCBChain:
   478 00005410 B007                <1>     mov al, errMCBbad   ;Yikes!
   479                              <1> mcbErrHdlr:
   480                              <1>     ;Jumped to with eax = error code
   481 00005412 C605(EEC30300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   482 00005419 E8A2160000          <1>     call extErrExit ;Error thru the unified error handler
   483 0000541E 3C07                <1>     cmp al, errMCBbad
   484                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005420 74D6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   485 00005422 EBBF                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    34                                  %include "./Source/Kernel/MemExec/progMgmt.asm"
    35                              <1> ;EXEC and all default terminates are here
    36                              <1> 
    37                              <1> ;========================
    38                              <1> ;   Interrupt handlers
    39                              <1> ;========================
    40                              <1> terminateProcess:   ;Int 40h
    41 00005424 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
    42 00005426 E9C2140000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=00h (which jumps to 41h/AX=4C00h)
    43                              <1> terminateRes:       ;Int 47h
    44                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    45 0000542B 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    46 00005431 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    47 00005434 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 41h/AH=31h
    48 00005439 E9AF140000          <1>     jmp functionDispatch    ;Dispatch 41h/AH=31h Terminate and Stay Resident
    49                              <1> ;========================
    50                              <1> ;    Int 21h functions
    51                              <1> ;========================
    52                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    53                              <1> ;Input:
    54                              <1> ;rdx = Pointer to new PSP in memory.
    55                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    56                              <1> ;   Officially document that this MUST be paragraph aligned.
    57                              <1> ;rsi = alloc size for new psp block
    58 0000543E C605(F9C40300)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    59 00005445 4C8B05(04C40300)    <1>     mov r8, qword [currentPSP]
    60 0000544C 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    61 0000544E 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    62 0000544F EB0C                <1>     jmp short copyPSP.pspCommon
    63                              <1> copyPSP:      ;ah = 26h
    64                              <1> ;Input:
    65                              <1> ;rdx = Pointer to new PSP in memory.
    66                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    67                              <1> ;   Officially document that this MUST be paragraph aligned.
    68 00005451 4C8B05(04C40300)    <1>     mov r8, qword [currentPSP]
    69 00005458 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    70 0000545C 53                  <1>     push rbx    ;Save this value for PSP allocsize
    71                              <1> .pspCommon:
    72 0000545D 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    73 00005464 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    74 00005468 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    75                              <1> ;r8 is current PSP, now copy psp to rdx
    76                              <1> ;Preserve rdx and r8 until the end
    77 0000546C 4C89C6              <1>     mov rsi, r8
    78 0000546F 4889D7              <1>     mov rdi, rdx
    79 00005472 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    80 00005477 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    81 0000547A 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    82 00005482 F605(F9C40300)FF    <1>     test byte [pspCopyFlg], -1
    83 00005489 7449                <1>     jz .copy
    84                              <1>     ;Now reset the parent psp data
    85 0000548B 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    86 00005493 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    87                              <1>     ;Now reset the copied jobFileTable
    88 00005497 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    89 0000549B 0FB70D78ABFFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    90 000054A2 B0FF                <1>     mov al, -1
    91 000054A4 F3AA                <1>     rep stosb   ;Store maxHndls many -1's 
    92                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    93 000054A6 498D702A            <1>     lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    94 000054AA 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    95 000054AE 0FB70D65ABFFFF      <1>     movzx ecx, word [maxHndls]  ;Get the max handles in JFT
    96                              <1> .xfrJFT:
    97 000054B5 67E31C              <1>     jecxz .copy
    98 000054B8 FFC9                <1>     dec ecx
    99 000054BA AC                  <1>     lodsb   ;Get the SFTndx in al
   100 000054BB 0FB6D8              <1>     movzx ebx, al
   101 000054BE 53                  <1>     push rbx
   102 000054BF E88CF4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
   103 000054C4 58                  <1>     pop rax
   104 000054C5 7508                <1>     jnz .badJFT
   105 000054C7 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
   106 000054C8 E89AF4FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
   107 000054CD EBE6                <1>     jmp short .xfrJFT
   108                              <1> .badJFT:
   109 000054CF 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
   110 000054D2 EBE1                <1>     jmp short .xfrJFT 
   111                              <1> .copy:
   112 000054D4 C605(F9C40300)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
   113 000054DB 58                  <1>     pop rax ;Pop the allocsize back into rax
   114 000054DC 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
   115                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
   116 000054DF 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt42h]
   117 000054E3 B042                <1>     mov al, 42h
   118 000054E5 E820110000          <1>     call muxGetIntVector    ;Get vector in rbx
   119 000054EA 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   120 000054ED 48AB                <1>     stosq   ;Move rdi to next entry and store
   121 000054EF B043                <1>     mov al, 43h
   122 000054F1 E814110000          <1>     call muxGetIntVector    ;Get vector in rbx
   123 000054F6 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   124 000054F9 48AB                <1>     stosq   ;Move rdi to next entry and store
   125 000054FB B044                <1>     mov al, 44h
   126 000054FD E808110000          <1>     call muxGetIntVector    ;Get vector in rbx
   127 00005502 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   128 00005505 48AB                <1>     stosq   ;Move rdi to next entry and store
   129                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   130 00005507 66C702CD40          <1>     mov word [rdx + psp.return], 040CDh  ;Int 40h
   131 0000550C 66C74250CD41        <1>     mov word [rdx + psp.unixEntry], 041CDh  
   132 00005512 C64252CB            <1>     mov byte [rdx + psp.unixEntry + 2], 0CBh ;Return
   133                              <1>     return
    18                              <2> %%_ret:
    19 00005516 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   134                              <1> 
   135                              <1> terminateStayRes:  ;ah = 31h
   136                              <1> ;Input: al  = Error code
   137                              <1> ;       edx = Number of paragraphs to keep resident
   138 00005517 C605(E6C60300)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   139                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   140 0000551E 81FA06000000        <1>     cmp edx, 6
   141 00005524 7305                <1>     jae .aboveMinimum
   142 00005526 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   143                              <1> .aboveMinimum:
   144                              <1> ;Now we setup a call to Realloc 
   145                              <1> ;Setup regs with: 
   146                              <1> ;   r8 = address of the block to be realloc'ed
   147                              <1> ;   ebx = How many paras this block should contain after realloc.
   148 0000552B 4C8B05(04C40300)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   149 00005532 89D3                <1>     mov ebx, edx
   150 00005534 50                  <1>     push rax    ;Preserve errorlevel across call
   151 00005535 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   152 00005536 E8C4FCFFFF          <1>     call reallocMemory
   153 0000553B 5B                  <1>     pop rbx
   154 0000553C 58                  <1>     pop rax
   155 0000553D 7220                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   156 0000553F 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   157                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   158 00005543 EB1A                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   159                              <1> 
   160                              <1> simpleTerminate:   ;ah = 00h
   161 00005545 31C0                <1>     xor eax, eax    ;Just fall through as normal
   162                              <1> terminateClean:    ;ah = 4Ch, EXIT
   163                              <1> ;Here we must:
   164                              <1> ;0) Build errorlevel and adjust variables accordingly
   165                              <1> ;1) Call Network Termination hook.
   166                              <1> ;2) Check if the program is it's own parent. If so, return.
   167                              <1> ;3) Swap the console back to the original driver if it is swapped.
   168                              <1> ;3.5) If we are exiting due to TSR, jump to 5
   169                              <1> ;4) Free all file handles associated to the current process.
   170                              <1> ;       Note this means, reducing the open counts and setting PSP entries to -1
   171                              <1> ;5) Free all memory blocks that have the signature of current PSP
   172                              <1> ;6) Set current PSP to parent PSP
   173                              <1> ;7) Restore Int 42h, 43h, 44h handlers from the PSP to the IDT
   174                              <1> ;8) Set rsp of parent proc upon entry to DOS to our rsp
   175                              <1> ;9) Set Int 42h to be the RIP value on the now oldRSP stack
   176                              <1> ;10) Exit all critical sections.
   177                              <1> ;
   178                              <1> ; Step 0
   179                              <1> ;For now, just adjust error level in var
   180 00005547 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   181 00005549 8625(E6C60300)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   182 0000554F F605(70C40300)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   183 00005556 740D                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   184 00005558 C605(E6C60300)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   185                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   186 0000555F 8A25(E6C60300)      <1>     mov ah, byte [exitType] ;Get the exitType
   187                              <1> .storeELvl:
   188 00005565 668905(14C40300)    <1>     mov word [errorLevel], ax   ;Store word
   189                              <1>     
   190                              <1> ; Step 1 Tell network a process is terminating
   191 0000556C B822110000          <1>     mov eax, 1122h  ;Net redir, Process Termination Hook
   192 00005571 4C8B05(04C40300)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   193 00005578 CD4F                <1>     int 4Fh
   194                              <1> 
   195                              <1> ; Step 2
   196                              <1> .step1:
   197 0000557A 488B3D(04C40300)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   198 00005581 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   199 00005584 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   200 00005588 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   201                              <1>     ;rete            ;If it is, simply return (al has errorLevel)
   202 0000558B 0F84D7000000        <1>     je .exit
   203                              <1> ; Step 3
   204 00005591 E80CD1FFFF          <1>     call vConRetDriver  ;Always reset the driver flag
   205                              <1> ; Step 3.5
   206 00005596 803D(E6C60300)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   207 0000559D 0F8497000000        <1>     je .step6   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   208                              <1> ; Step 4
   209 000055A3 803D(E6C60300)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   210 000055AA 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   211 000055AC B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   212 000055B1 CD4F                <1>     int 4Fh
   213                              <1> .skipAbortNetClose:
   214 000055B3 FF15(C4C00300)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   215 000055B9 4881C72A000000      <1>     add rdi, psp.jobFileTbl ;Move rdi to point to the start of the JFT
   216 000055C0 4889FE              <1>     mov rsi, rdi    ;Point rsi to jft too
   217 000055C3 0FB70D50AAFFFF      <1>     movzx ecx, word [maxHndls] ;Number of entries in JFT
   218                              <1> .s4lp:
   219 000055CA AC                  <1>     lodsb   ;Inc rsi, get the SFT number in al
   220 000055CB 3CFF                <1>     cmp al, -1  ;End of open JFT entries?
   221 000055CD 7429                <1>     je .step5
   222 000055CF 0FB6D8              <1>     movzx ebx, al   ;Move the file handle number into ebx
   223                              <1>     ;Replace with a call to close the handle eventually
   224 000055D2 57                  <1>     push rdi
   225 000055D3 E84EF3FFFF          <1>     call derefSFTPtr    ;Ret in rdi the SFT pointer
   226 000055D8 7216                <1>     jc .badHdl  ;If a bad handle, skip the decrementing of the handle count
   227 000055DA FF35(12C70300)      <1>     push qword [currentSFT]
   228 000055E0 E894F1FFFF          <1>     call setCurrentSFT  ;Set rdi to currentSFT
   229 000055E5 E8F6E9FFFF          <1>     call closeMain  ;Close all files opened by this program. Decrement ref ONLY
   230                              <1>     ;closeMain also flushes all sectors associated to the file
   231                              <1>     ;Ignore errors, simply keep closing files
   232 000055EA 8F05(12C70300)      <1>     pop qword [currentSFT]
   233                              <1> .badHdl:
   234 000055F0 5F                  <1>     pop rdi
   235 000055F1 B0FF                <1>     mov al, -1
   236 000055F3 AA                  <1>     stosb   ;Store a -1 in it's place (not strictly necessary)
   237 000055F4 FFC9                <1>     dec ecx ;Zoom Zoom \mu-op!
   238 000055F6 75D2                <1>     jnz .s4lp   ;Keep looping for all entries in the JFT 
   239                              <1> ;Step 5
   240                              <1> .step5:
   241 000055F8 488B1D(04C40300)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   242                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   243                              <1>     ; with the currentPSP signature and free them.
   244 000055FF 488B35(39C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   245                              <1> .s5lp:  ;And walk the chain
   246                              <1> ;First verify the address in rsi is a valid mcb
   247 00005606 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   248 00005608 80F94D              <1>     cmp cl, mcbMarkCtn
   249 0000560B 7405                <1>     je .checkToFree
   250 0000560D 80F95A              <1>     cmp cl, mcbMarkEnd
   251 00005610 7528                <1>     jne .step6  ;Something wrong so stop freeing
   252                              <1> .checkToFree:
   253 00005612 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   254 00005616 750F                <1>     jne .noFree
   255 00005618 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   256 0000561C 53                  <1>     push rbx
   257 0000561D 51                  <1>     push rcx
   258 0000561E 56                  <1>     push rsi
   259 0000561F E8D3FAFFFF          <1>     call freeMemory ;Free this memory block
   260 00005624 5E                  <1>     pop rsi
   261 00005625 59                  <1>     pop rcx
   262 00005626 5B                  <1>     pop rbx
   263                              <1>     ;If an error occured, the internal vars will be set.
   264                              <1> .noFree:
   265 00005627 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   266 0000562A 740E                <1>     je .step6   ;Skip if we are
   267 0000562C 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   268 0000562F 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   269 00005633 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   270 00005638 EBCC                <1>     jmp short .s5lp
   271                              <1> ;Step 6
   272                              <1> .step6:
   273 0000563A 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   274 0000563E 488905(04C40300)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   275                              <1> ;Step 7
   276                              <1>     ;rbx points to current PSP, the old parent task
   277                              <1>     ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   278 00005645 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt44h]
   279 00005649 B044                <1>     mov al, 44h
   280 0000564B E81D160000          <1>     call setIntVector
   281 00005650 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt43h]
   282 00005654 B043                <1>     mov al, 43h
   283 00005656 E812160000          <1>     call setIntVector
   284 0000565B 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   285 0000565F B042                <1>     mov al, 42h
   286 00005661 52                  <1>     push rdx
   287 00005662 E806160000          <1>     call setIntVector
   288 00005667 5A                  <1>     pop rdx
   289                              <1> ;Step 8
   290                              <1> .exit:
   291 00005668 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   292 0000566A CD4A                <1>     int 4ah
   293                              <1> 
   294 0000566C FA                  <1>     cli
   295 0000566D 488B1D(04C40300)    <1>     mov rbx, qword [currentPSP]
   296 00005674 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt42h]
   297                              <1>     ;Make the parent register frame the current one
   298                              <1>     ;Make RSP point to user stack from parent entry to exec
   299 00005678 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]
   300                              <1> 
   301 0000567C 4889542448          <1>     mov qword [rsp + callerFrame.rip], rdx  ;Store return address vector here
   302 00005681 48C744245802F20000  <1>     mov qword [rsp + callerFrame.flags], 0F202h ;Mimic DOS's return flags
   303                              <1> 
   304 0000568A C605(7AC40300)00    <1>     mov byte [Int44Trans], 0    ;Clear this flag
   305 00005691 C605(EDC30300)00    <1>     mov byte [inDOS], 0 ;Exiting DOS now
   306 00005698 C605(EEC30300)FF    <1>     mov byte [errorDrv], -1 ;Reset
   307 0000569F E8A3130000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   308                              <1>     
   309 000056A4 48CF                <1>     iretq   ;and return to address that was in rdx
    35                                  %include "./Source/Kernel/MemExec/exec.asm"
    36                              <1> 
    37                              <1> 
    38                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    39                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
    40                              <1> ;       rbx = Ptr to the parameter block used for loading
    41                              <1> ;       al = Subfunction:
    42                              <1> ;            00h = Load Program and transfer control to it
    43                              <1> ;            01h = Load Program but do not transfer ctrl to it
    44                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    45                              <1> ;      Reserved for future expansion:
    46                              <1> ;            04h = Load in background execution mode (PE only)
    47                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    48                              <1> ;               function but in 16-bit mode. 
    49                              <1> ;
    50                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    51                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    52                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    53                              <1> 
    54                              <1> ;If AL = 0 :
    55                              <1> ;            Load Child Program and Xfr control to it
    56                              <1> ; rbx ------>   |-------------------------------|
    57                              <1> ;               |   Ptr to Environment Block    |
    58                              <1> ;               |                               |
    59                              <1> ;               | Can be 0 => Get pointer to    |
    60                              <1> ;               | parent Environment Block      |
    61                              <1> ;               |-------------------------------|
    62                              <1> ;               |   Ptr to Command Line to be   |
    63                              <1> ;               |   placed at PSP + 80h         |
    64                              <1> ;               |-------------------------------|
    65                              <1> ;               |   Ptr to first default FCB    |
    66                              <1> ;               |      to copy to PSP.fcb1      |
    67                              <1> ;               |                               |
    68                              <1> ;               | Should be used to parse the   |
    69                              <1> ;               |  first two command line args  |
    70                              <1> ;               |-------------------------------|
    71                              <1> ;               |   Ptr to second default FCB   |
    72                              <1> ;               |      to copy to PSP.fcb2      |
    73                              <1> ;               |-------------------------------|
    74                              <1> ;
    75                              <1> ;If AL = 1 :
    76                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    77                              <1> ; rbx ------>   |-------------------------------|
    78                              <1> ;               |         AS IN AL=00H          |
    79                              <1> ;               |-------------------------------|
    80                              <1> ;               |     Initial Value of RSP      |
    81                              <1> ;               |       on program launch       |
    82                              <1> ;               |                               |
    83                              <1> ;               |     This is returned to the   |
    84                              <1> ;               |         caller by DOS         |
    85                              <1> ;               |-------------------------------|
    86                              <1> ;               |     Initial Value of RIP      |
    87                              <1> ;               |       on program launch       |
    88                              <1> ;               |                               |
    89                              <1> ;               |     This is returned to the   |
    90                              <1> ;               |         caller by DOS         |
    91                              <1> ;               |-------------------------------|
    92                              <1> ;
    93                              <1> ;                      !!Important Note!!
    94                              <1> ;   The block pointed to by rbx must reserve the space for 
    95                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    96                              <1> ;
    97                              <1> ;If AL = 3 :
    98                              <1> ;                      Load program overlay
    99                              <1> ; rbx ------>   |-------------------------------|
   100                              <1> ;               |  Pointer to the byte in the   |
   101                              <1> ;               |  prog space to start writing  |
   102                              <1> ;               |        the overlay at         |
   103                              <1> ;               |-------------------------------|
   104                              <1> ;               | DWORD offset from the base of |
   105                              <1> ;               |  the program to the location  |
   106                              <1> ;               |  the overlay is being loaded  |
   107                              <1> ;               |              in               |
   108                              <1> ;               |  (Called a Relocation Factor) |
   109                              <1> ;               |     Only FOR EXE Overlays     |
   110                              <1> ;               |        for CODE fixups        |
   111                              <1> ;               |  For COM, Current PSP + 100h  |
   112                              <1> ;               |      assumed to suffice       |
   113                              <1> ;               |-------------------------------|
   114                              <1> ;
   115                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
   116                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
   117                              <1> ;
   118                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
   119 000056A6 55                  <1>     push rbp
   120 000056A7 4889E5              <1>     mov rbp, rsp
   121 000056AA 4881EC70000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   122                              <1>     ;Clear up the pointers on the stack frame
   123 000056B1 31C0                <1>     xor eax, eax
   124 000056B3 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   125 000056B7 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax
   126 000056BB 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   127 000056BF 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   128 000056C3 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   129                              <1> 
   130                              <1> 
   131 000056C7 3C03                <1>     cmp al, execOverlay
   132 000056C9 7615                <1>     jbe .validSubfunction
   133                              <1> .badSubFunction:
   134 000056CB B801000000          <1>     mov eax, errInvFnc
   135 000056D0 C605(EFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   136                              <1> .badExit:
   137 000056D7 4889EC              <1>     mov rsp, rbp
   138 000056DA 5D                  <1>     pop rbp
   139 000056DB E9E0130000          <1>     jmp extErrExit
   140                              <1> 
   141                              <1> .validSubfunction:
   142 000056E0 3C02                <1>     cmp al, execInvld
   143 000056E2 74E7                <1>     je .badSubFunction
   144                              <1>     ;Save registers for each function call
   145 000056E4 48895DD8            <1>     mov qword [rbp - execFrame.pParam], rbx
   146 000056E8 488955D0            <1>     mov qword [rbp - execFrame.pProgname], rdx
   147 000056EC 0FB6C0              <1>     movzx eax, al
   148 000056EF 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   149 000056F3 4889D7              <1>     mov rdi, rdx
   150 000056F6 E875100000          <1>     call strlen ;Get string length in cx
   151 000056FB 66894DE0            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   152                              <1>     ;Now open the file we wanna yeet to
   153 000056FF 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   154 00005701 55                  <1>     push rbp    ;Preserve local frame ptr
   155 00005702 E8A4D9FFFF          <1>     call openFileHdl
   156 00005707 5D                  <1>     pop rbp
   157 00005708 72CD                <1>     jc .badExit ;Exit preserving error code in al
   158                              <1>     ;Now ax has the file handle
   159 0000570A 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   160 0000570E 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   161 00005711 E810F2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   162 00005716 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   163 0000571A F7C280000000        <1>     test edx, devCharDev
   164 00005720 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   165 00005722 B002                <1>     mov al, errFnf
   166 00005724 E9E3040000          <1>     jmp .cleanAndFail
   167                              <1> .validDiskFile:
   168 00005729 31C0                <1>     xor eax, eax
   169 0000572B 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Clear pEnv and pProg Bases
   170 0000572F 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   171 00005733 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   172 00005737 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   173 0000573D 488B7DD8            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   174 00005741 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   175 00005744 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   176 00005747 7514                <1>     jnz .copyEnvironmentBlock
   177 00005749 488B35(04C40300)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   178 00005750 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   179 00005754 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   180 00005758 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   181 0000575B 746D                <1>     jz .loadProgram
   182                              <1> .copyEnvironmentBlock:
   183 0000575D 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   184                              <1>     ;Get the length of the environment
   185 00005760 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   186 00005765 31C0                <1>     xor eax, eax
   187 00005767 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   188                              <1> .envVerifyLp:
   189 0000576A F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   190 0000576C 7531                <1>     jnz .invalidEnvironmentError
   191 0000576E 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   192 00005771 FFC9                <1>     dec ecx
   193 00005773 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   194 00005774 75F4                <1>     jnz .envVerifyLp
   195                              <1> 
   196 00005776 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   197 00005779 57                  <1>     push rdi     ;Save the length of the environment block
   198 0000577A 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   199 00005780 0FB75DE0            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   200 00005784 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   201 00005786 89FB                <1>     mov ebx, edi
   202 00005788 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   203 0000578B 55                  <1>     push rbp
   204 0000578C E83CF7FFFF          <1>     call allocateMemory
   205 00005791 5D                  <1>     pop rbp
   206 00005792 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   207 00005793 7314                <1>     jnc .copyEnvironment
   208                              <1>     ;Fall thru if not enuff memory
   209                              <1> .insufficientMemory:
   210 00005795 B808000000          <1>     mov eax, errNoMem
   211 0000579A E96D040000          <1>     jmp .cleanAndFail
   212                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   213 0000579F B80A000000          <1>     mov eax, errBadEnv
   214 000057A4 E963040000          <1>     jmp .cleanAndFail
   215                              <1> 
   216                              <1> .copyEnvironment:
   217                              <1>     ;rax has the ptr to allocated memory block
   218                              <1>     ;rcx has the number of chars to copy from the source env block
   219 000057A9 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   220 000057AC 488945C8            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   221 000057B0 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pParam]
   222 000057B4 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   223 000057B7 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   224 000057B9 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   225 000057BE 66AB                <1>     stosw       ;Away you go!
   226 000057C0 488B75D0            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   227 000057C4 0FB74DE0            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   228 000057C8 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   229                              <1> ;Done with the environment... more or less
   230                              <1> .loadProgram:
   231 000057CA B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   232 000057CF 488D15(C3D90300)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   233 000057D6 E84D040000          <1>     call .readDataFromHdl
   234 000057DB 0F8226040000        <1>     jc .badFmtErr
   235 000057E1 85C0                <1>     test eax, eax   ;Were zero bytes read?
   236 000057E3 0F841E040000        <1>     jz .badFmtErr
   237 000057E9 3D40000000          <1>     cmp eax, imageDosHdr_size
   238 000057EE 0F8272020000        <1>     jb .loadCom
   239                              <1> 
   240 000057F4 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   241 000057F9 740B                <1>     je .proceedEXE
   242 000057FB 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   243 00005800 0F8560020000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   244                              <1> .proceedEXE:
   245                              <1>     ;Now we need to read e_lfanew
   246 00005806 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   247 00005807 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   248 0000580A 8955A8              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   249 0000580D 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   250 0000580F 30C0                <1>     xor al, al  ;Set file pointer from start of file
   251 00005811 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   252 00005815 E8A6DAFFFF          <1>     call lseekHdl   ;Move to that position in the file
   253                              <1> 
   254 0000581A 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   255 0000581B B914000000          <1>     mov ecx, imageFileHeader_size
   256 00005820 E803040000          <1>     call .readDataFromHdl       ;Now read the COFF header
   257 00005825 85C0                <1>     test eax, eax   ;Were zero bytes read?
   258 00005827 0F84DA030000        <1>     jz .badFmtErr
   259 0000582D 3D14000000          <1>     cmp eax, imageFileHeader_size
   260 00005832 0F82CF030000        <1>     jb .badFmtErr
   261                              <1>     ;So now rdx points to the imageFileHeader
   262 00005838 66813A6486          <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   263 0000583D 0F85C4030000        <1>     jne .badFmtErr
   264 00005843 66817A107000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   265 00005849 0F82B8030000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   266                              <1>     ;Now save the number of sections in the the file
   267 0000584F 0FB74202            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   268 00005853 85C0                <1>     test eax, eax   ;If this is 0, what?
   269 00005855 0F84AC030000        <1>     jz .badFmtErr
   270 0000585B 668945A0            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   271                              <1> 
   272                              <1>     ;Now load Optional header, file ptr points to it so all good!
   273 0000585F B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   274                              <1>     ;rdx points to exeHdrSpace
   275 00005864 E8BF030000          <1>     call .readDataFromHdl
   276 00005869 85C0                <1>     test eax, eax   ;Were zero bytes read?
   277 0000586B 0F8496030000        <1>     jz .badFmtErr
   278 00005871 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   279 00005876 0F828B030000        <1>     jb .badFmtErr
   280                              <1>     ;Now File Ptr points to data dirs, not an issue
   281 0000587C 81459870000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   282                              <1>     ;We load the program in, one section at a time, reading section headers in
   283                              <1>     ; one at a time to the section header internal buffer.
   284 00005883 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   285 00005887 744B                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   286 00005889 8B1D(FBD90300)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   287 0000588F 488B05(0BDA0300)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackReserve]
   288 00005896 4885C0              <1>     test rax, rax
   289 00005899 750A                <1>     jnz .notDefaultStackAlloc
   290 0000589B 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   290 000058A4 00                  <1>
   291                              <1> .notDefaultStackAlloc:
   292 000058A5 01C3                <1>     add ebx, eax    ;Add stack allocation
   293 000058A7 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   294 000058AD 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   295 000058B0 81C30B000000        <1>     add ebx, 11
   296 000058B6 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   297 000058B9 E80FF6FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   298 000058BE 0F82D1FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   299 000058C4 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   300 000058C8 480500010000        <1>     add rax, psp_size
   301 000058CE 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of code goes here
   302 000058D2 EB0B                <1>     jmp short .exeProceed1
   303                              <1> .exeOvlySkipAlloc:
   304 000058D4 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   305 000058D8 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   306 000058DB 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   307                              <1> .exeProceed1:
   308                              <1>     ;So now copy one section at a time, read section header in
   309                              <1>     ;File pointer points to the directory table, so skip that
   310 000058DF 8B15(2FDA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   311 000058E5 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   312 000058EB 0F8216030000        <1>     jb .badFmtErr
   313 000058F1 FFCA                <1>     dec edx ;Decrement by 1 to make into a 0 based offset
   314                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   315 000058F3 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   316 000058F6 31C9                <1>     xor ecx, ecx
   317 000058F8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   318 000058FC B001                <1>     mov al, 1   ;Move handle forwards from current position
   319 000058FE E8BDD9FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   320                              <1>     ;eax has pointer location after adjustment
   321 00005903 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   322                              <1>     ;File now points to start of Section headers. Read first header in.
   323                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   324 00005906 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   325 0000590A 0FB74DA0            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   326                              <1> .loadLp:
   327 0000590E 51                  <1>     push rcx    ;Save # of segments left on stack
   328 0000590F 57                  <1>     push rdi    ;Save the current buffer ptr here
   329 00005910 B928000000          <1>     mov ecx, imageSectionHdr_size
   330 00005915 488D15(33DA0300)    <1>     lea rdx, sectHdr    ;Read section headers here
   331 0000591C E807030000          <1>     call .readDataFromHdl
   332 00005921 5F                  <1>     pop rdi
   333 00005922 59                  <1>     pop rcx
   334 00005923 85C0                <1>     test eax, eax
   335 00005925 0F84DC020000        <1>     jz .badFmtErr
   336 0000592B 3D28000000          <1>     cmp eax, imageSectionHdr_size
   337 00005930 0F85D1020000        <1>     jne .badFmtErr
   338                              <1>     ;File ptr moved forwards to next section header
   339 00005936 81459828000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   340                              <1>     ;Section header read, now we load section into memory
   341                              <1>     ;Move file ptr to data location
   342 0000593D 8B15(47DA0300)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   343 00005943 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   344 00005947 31C0                <1>     xor eax, eax    ;Seek from start of file
   345 00005949 51                  <1>     push rcx
   346 0000594A 57                  <1>     push rdi
   347 0000594B E870D9FFFF          <1>     call lseekHdl
   348 00005950 5F                  <1>     pop rdi
   349 00005951 59                  <1>     pop rcx
   350                              <1> 
   351 00005952 51                  <1>     push rcx
   352 00005953 57                  <1>     push rdi    ;Save current buffer offset
   353 00005954 8B0D(43DA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dSizeOfRawData]   ;Get # of bytes
   354 0000595A 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   355 0000595D E8C6020000          <1>     call .readDataFromHdl
   356 00005962 5F                  <1>     pop rdi
   357 00005963 59                  <1>     pop rcx
   358 00005964 0F829D020000        <1>     jc .badFmtErr
   359 0000596A 85C0                <1>     test eax, eax
   360 0000596C 0F8495020000        <1>     jz .badFmtErr
   361 00005972 3B05(43DA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   362 00005978 0F8589020000        <1>     jne .badFmtErr
   363                              <1>     ;Data read ok, now fill in any zeros needed
   364 0000597E 8B05(43DA0300)      <1>     mov eax, dword [sectHdr + imageSectionHdr.dSizeOfRawData]
   365 00005984 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   366 00005987 3B05(3BDA0300)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   367 0000598D 730E                <1>     jae .skipPadding
   368 0000598F 51                  <1>     push rcx
   369 00005990 8B0D(3BDA0300)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]
   370 00005996 29C1                <1>     sub ecx, eax    ;Get number of bytes to pad with in ecx
   371                              <1>     ;rdi points to pad space
   372 00005998 31C0                <1>     xor eax, eax
   373 0000599A F3AA                <1>     rep stosb   ;Pad that many zeros
   374 0000599C 59                  <1>     pop rcx
   375                              <1> .skipPadding:
   376 0000599D FFC9                <1>     dec ecx ;Decrement our section counter
   377 0000599F 7419                <1>     jz .doExeFixups
   378                              <1>     ;Read next section header in here
   379 000059A1 51                  <1>     push rcx
   380 000059A2 57                  <1>     push rdi
   381 000059A3 30C0                <1>     xor al, al  ;Move rel start of file
   382 000059A5 8B5598              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   383 000059A8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   384 000059AC 31C9                <1>     xor ecx, ecx
   385 000059AE E80DD9FFFF          <1>     call lseekHdl
   386 000059B3 5F                  <1>     pop rdi
   387 000059B4 59                  <1>     pop rcx
   388 000059B5 E954FFFFFF          <1>     jmp .loadLp
   389                              <1> .doExeFixups:
   390                              <1> ;Here we fixup addresses as needed
   391                              <1> ;Program Entrypoint is saved in the header structure in the SDA
   392                              <1> ;Move File pointer to COFF header Coff + optional header sizes
   393                              <1> ;We look only for .reloc segment. We have it in memory too so use it to make 
   394                              <1> ; fixups. Zero the in memory image of reloc segment once we are done with it. 
   395                              <1> ;We checked that .reloc exists so all ok
   396 000059BA 8B15(2FDA0300)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   397 000059C0 8B55A8              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   398 000059C3 81C2AC000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   399                              <1>     ;eax now points to position in file of direcotry entry for reloc
   400 000059C9 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   401 000059CD 31C0                <1>     xor eax, eax
   402 000059CF E8ECD8FFFF          <1>     call lseekHdl   ;Move handle there in file
   403 000059D4 894598              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   404 000059D7 B908000000          <1>     mov ecx, imageDataDirectory_size
   405                              <1>     ;Read 8 bytes into sectHdr space
   406 000059DC 488D15(33DA0300)    <1>     lea rdx, sectHdr
   407 000059E3 E840020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   408                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   409 000059E8 8B35(33DA0300)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   410 000059EE 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   411 000059F0 0F840F010000        <1>     jz .buildChildPSP   ;... including if overlay
   412 000059F6 480375B8            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   413                              <1>     ;Now rsi points to where in memory the relocation data table is
   414                              <1>     ;Now compute the relocation factor 
   415 000059FA 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   416 000059FE 482B05(DBD90300)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   417                              <1>     ;The value in rax gives how much to subtract by
   418 00005A05 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   419 00005A09 7507                <1>     jne .notOverlayReloc
   420 00005A0B 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   421 00005A0F 034308              <1>     add eax, dword [rbx + loadOvly.dRelocFct]   ;Add the overlay reloc factor
   422                              <1> .notOverlayReloc:
   423 00005A12 48894598            <1>     mov qword [rbp - execFrame.qRelocVal], rax  ;Save relocation value
   424 00005A16 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   425                              <1>     ;rsi points to relocation data table in memory
   426 00005A19 8B0D(37DA0300)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   427 00005A1F 81F900000000        <1>     cmp ecx, 0    ;If no relocations, skip
   428 00005A25 0F84DA000000        <1>     jz .buildChildPSP
   429 00005A2B 488B7DB8            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   430                              <1>     ;rsi points to the first base relocation block. The relocations begin
   431                              <1>     ; after the first block
   432                              <1>     ;ecx has the number of base relocation blocks to process.
   433                              <1> .nextBlock:
   434 00005A2F 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   435 00005A30 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   436 00005A32 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   437 00005A35 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes
   438 00005A38 D1E9                <1>     shr ecx, 1  ;Divide by 2 to get number of words = # of relocs to do
   439 00005A3A 67E311              <1>     jecxz .blockDone
   440                              <1> .blockNotDone:
   441 00005A3D 66AD                <1>     lodsw   ;Get the next page offset word
   442 00005A3F 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   443 00005A44 4801C7              <1>     add rdi, rax    ;Add this offset to rdi, the pointer to program image
   444                              <1>     ;rdi points to qword to rebase
   445 00005A47 48011F              <1>     add qword [rdi], rbx    ;Relocation factor was saved in rbx
   446 00005A4A FFC9                <1>     dec ecx
   447 00005A4C 75EF                <1>     jnz .blockNotDone
   448                              <1> .blockDone:
   449 00005A4E 59                  <1>     pop rcx
   450 00005A4F FFC9                <1>     dec ecx
   451 00005A51 75DC                <1>     jnz .nextBlock
   452 00005A53 8B05(D3D90300)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   453 00005A59 480345B8            <1>     add rax, qword [rbp - execFrame.pProgBase]
   454 00005A5D 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   455 00005A61 E99F000000          <1>     jmp .buildChildPSP
   456                              <1> .loadCom:
   457                              <1>     ;File is open here, so just read the file into memory. 
   458                              <1>     ;The file cannot exceed 64Kb in size. COM ONLY for small files!!!!
   459                              <1>     ;Allocate 64Kb of memory, or as much as we can
   460 00005A66 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   461 00005A6A 744E                <1>     je .comOverlay
   462 00005A6C BBFFFF0000          <1>     mov ebx, 0FFFFh ;64Kb pls
   463 00005A71 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   464 00005A74 55                  <1>     push rbp
   465 00005A75 E853F4FFFF          <1>     call allocateMemory
   466 00005A7A 5D                  <1>     pop rbp
   467 00005A7B 734A                <1>     jnc .comallocOk
   468 00005A7D 3C08                <1>     cmp al, errNoMem
   469 00005A7F 0F8587010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   470                              <1>     ;rbx should have the amount available
   471                              <1>     ;We check if this value is psp_size more than filesize
   472 00005A85 53                  <1>     push rbx    ;Save new minimum size
   473 00005A86 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   474 00005A8B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   475 00005A8F 31D2                <1>     xor edx, edx    ;Go to end of file
   476 00005A91 E82AD8FFFF          <1>     call lseekHdl
   477                              <1>     ;eax has file size
   478 00005A96 5B                  <1>     pop rbx ;Get back max alloc size
   479 00005A97 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   480 00005A99 29C2                <1>     sub edx, eax
   481 00005A9B 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   482 00005AA1 0F82EEFCFFFF        <1>     jb .insufficientMemory   ;Fail
   483 00005AA7 895DB0              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   484 00005AAA E81EF4FFFF          <1>     call allocateMemory
   485 00005AAF 0F8257010000        <1>     jc .cleanAndFail
   486 00005AB5 E90D000000          <1>     jmp .comallocOk
   487                              <1> .comOverlay:
   488                              <1>     ;Here we simply read the file into the buffer provided
   489 00005ABA 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam]
   490 00005ABE 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   491 00005AC1 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   492 00005AC5 EB0A                <1>     jmp short .comRead
   493                              <1> .comallocOk:
   494                              <1>     ;rax should point to the first byte
   495 00005AC7 488945C0            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   496 00005ACB 480500010000        <1>     add rax, psp_size
   497                              <1> .comRead:
   498 00005AD1 488945B8            <1>     mov qword [rbp - execFrame.pProgBase], rax
   499                              <1> 
   500 00005AD5 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   501 00005ADA 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   502 00005ADE 31D2                <1>     xor edx, edx    ;Go to end of file
   503 00005AE0 E8DBD7FFFF          <1>     call lseekHdl
   504                              <1>     ;eax has filesize now
   505 00005AE5 50                  <1>     push rax    ;Save filesize
   506 00005AE6 31C0                <1>     xor eax, eax    ;Reposition to start of file
   507 00005AE8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   508 00005AEC 31D2                <1>     xor edx, edx    ;Go to start of file
   509 00005AEE E8CDD7FFFF          <1>     call lseekHdl
   510 00005AF3 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   511 00005AF4 488B55B8            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   512 00005AF8 E82B010000          <1>     call .readDataFromHdl   ;Read from the file handle
   513 00005AFD 488B45B8            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   514 00005B01 488945A8            <1>     mov qword [rbp - execFrame.pProgEP], rax
   515                              <1> .buildChildPSP:
   516                              <1>     ;We can close handle now
   517 00005B05 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   518 00005B09 55                  <1>     push rbp
   519 00005B0A E8C6D6FFFF          <1>     call closeFileHdl   ;Close the file
   520 00005B0F 5D                  <1>     pop rbp
   521                              <1> 
   522                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   523 00005B10 807DF803            <1>     cmp byte [rbp - execFrame.bSubFunc], execOverlay
   524 00005B14 0F84CB000000        <1>     je .overlayExit
   525                              <1>     ;Now build the PSP
   526 00005B1A 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   527 00005B1D 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   528 00005B21 52                  <1>     push rdx
   529 00005B22 55                  <1>     push rbp
   530 00005B23 E816F9FFFF          <1>     call createPSP
   531 00005B28 5D                  <1>     pop rbp
   532 00005B29 5A                  <1>     pop rdx
   533                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   534 00005B2A 488915(04C40300)    <1>     mov qword [currentPSP], rdx
   535 00005B31 E83F0F0000          <1>     call dosCrit1Enter
   536 00005B36 E812010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   537                              <1> 
   538 00005B3B 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   539 00005B42 48893D(FCC30300)    <1>     mov qword [currentDTA], rdi ;and set it!
   540                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   541                              <1>     ; and set FS to point to the PSP
   542 00005B49 488B5DD8            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   543                              <1> 
   544 00005B4D 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   545 00005B51 B925000000          <1>     mov ecx, fcb_size
   546 00005B56 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   547 00005B5A 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   548 00005B5C F3A4                <1>     rep movsb   ;Copy fcb 1 over
   549 00005B5E 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   550 00005B62 B925000000          <1>     mov ecx, fcb_size
   551 00005B67 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   552 00005B6B 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   553 00005B6D F3A4                <1>     rep movsb   ;Copy fcb 2 over
   554 00005B6F 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   555 00005B73 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   556 00005B7A B980000000          <1>     mov ecx, 80h
   557 00005B7F F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   558                              <1> 
   559 00005B81 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   560 00005B83 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   561                              <1> 
   562                              <1>     ;Put PSP base value in edx:eax to place in FS, dont rely on this in future!
   563 00005B86 B9000100C0          <1>     mov ecx, 0C0000100h ;R/W FS MSR
   564 00005B8B 89D0                <1>     mov eax, edx    ;Move low dword address into rax
   565 00005B8D 48C1EA20            <1>     shr rdx, 20h    ;Shift high dword in low dword
   566 00005B91 0F30                <1>     wrmsr   ;Write the new value to FS MSR
   567                              <1> 
   568 00005B93 E8800A0000          <1>     call getUserRegs    ;Need to get Int 42h address from stack
   569 00005B98 488B4648            <1>     mov rax, qword [rsi + callerFrame.rip]  ;Get parent return address
   570 00005B9C 4889470A            <1>     mov qword [rdi + psp.oldInt42h], rax    ;and save it in PSP
   571 00005BA0 4889C2              <1>     mov rdx, rax    ;Move return address to rdx to set up the Interrupt Vector
   572 00005BA3 B042                <1>     mov al, 42h
   573 00005BA5 E8C3100000          <1>     call setIntVector   ;bx preserved by this call
   574                              <1> 
   575                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   576 00005BAA 88D8                <1>     mov al, bl
   577 00005BAC 30DB                <1>     xor bl, bl
   578 00005BAE E8890A0000          <1>     call setDrive
   579 00005BB3 7302                <1>     jnc .drive1Ok
   580 00005BB5 B3FF                <1>     mov bl, -1
   581                              <1> .drive1Ok:
   582 00005BB7 88F8                <1>     mov al, bh
   583 00005BB9 30FF                <1>     xor bh, bh
   584 00005BBB E87C0A0000          <1>     call setDrive
   585 00005BC0 7302                <1>     jnc .drive2Ok
   586 00005BC2 B7FF                <1>     mov bh, -1
   587                              <1> .drive2Ok:
   588                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   589                              <1>     ;rdi has pointer to psp
   590 00005BC4 8B75B0              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   591                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   592 00005BC7 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   593 00005BCC 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   594 00005BD0 741C                <1>     je .xfrProgram
   595 00005BD2 488B45A8            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   596 00005BD6 488B55D8            <1>     mov rdx, qword [rbp - execFrame.pParam]
   597 00005BDA 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   598 00005BDE 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   599 00005BE2 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   600                              <1> .overlayExit:
   601 00005BE5 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   602 00005BE8 5D                  <1>     pop rbp ;Point rsp to the return address
   603 00005BE9 E9C40E0000          <1>     jmp extGoodExit ;And return!
   604                              <1> .xfrProgram:
   605 00005BEE FA                  <1>     cli
   606 00005BEF 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   607 00005BF2 C605(EDC30300)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   608 00005BF9 FB                  <1>     sti
   609 00005BFA FF75A8              <1>     push qword [rbp - execFrame.pProgEP]
   610 00005BFD 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   611 00005C00 4989F9              <1>     mov r9, rdi
   612 00005C03 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   613                              <1>     return  ;Return to child task
    18                              <2> %%_ret:
    19 00005C06 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   614                              <1> 
   615                              <1> .badFmtErr:
   616 00005C07 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   617                              <1> .cleanAndFail:
   618                              <1> ;Close the open file and any open resources and fail
   619 00005C0C E82D000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   620 00005C11 E8690E0000          <1>     call dosCrit1Exit
   621 00005C16 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   622 00005C1A 50                  <1>     push rax    ;Save error code
   623 00005C1B 55                  <1>     push rbp
   624 00005C1C E8B4D5FFFF          <1>     call closeFileHdl
   625 00005C21 5D                  <1>     pop rbp
   626 00005C22 58                  <1>     pop rax
   627 00005C23 E9AFFAFFFF          <1>     jmp .badExit
   628                              <1> 
   629                              <1> .readDataFromHdl:
   630                              <1> ;Input: bx = File Handle
   631                              <1> ;       ecx = Number of bytes to transfer
   632                              <1> ;       rdx = Ptr to the buffer to use
   633 00005C28 E811000000          <1>     call .clearArenaOwner   ;Entering critical section!
   634 00005C2D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   635 00005C31 55                  <1>     push rbp
   636 00005C32 E8DDD5FFFF          <1>     call readFileHdl
   637 00005C37 5D                  <1>     pop rbp
   638 00005C38 E810000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   639                              <1>     return
    18                              <2> %%_ret:
    19 00005C3D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   640                              <1> .clearArenaOwner:
   641 00005C3E 53                  <1>     push rbx
   642 00005C3F 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   643 00005C41 E82F0E0000          <1>     call dosCrit1Enter
   644 00005C46 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   645 00005C4B 5B                  <1>     pop rbx
   646                              <1>     return
    18                              <2> %%_ret:
    19 00005C4C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   647                              <1> .setPSPArenaOwner:
   648                              <1> ;Sets the current PSP as the arena owner
   649 00005C4D 53                  <1>     push rbx
   650 00005C4E 488B1D(04C40300)    <1>     mov rbx, qword [currentPSP]
   651 00005C55 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   652 00005C5A E8200E0000          <1>     call dosCrit1Exit
   653 00005C5F 5B                  <1>     pop rbx
   654                              <1>     return
    18                              <2> %%_ret:
    19 00005C60 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   655                              <1> .setProgOrEnvArenaOwnerToRBX:
   656                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   657 00005C61 9C                  <1>     pushfq
   658 00005C62 50                  <1>     push rax
   659                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   660                              <1>     ;This is because they are set up at separate points in the routine!
   661 00005C63 488B45C0            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   662 00005C67 E80C000000          <1>     call .writeArenaHeaderOwner
   663 00005C6C 488B45C8            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   664 00005C70 E803000000          <1>     call .writeArenaHeaderOwner
   665 00005C75 58                  <1>     pop rax
   666 00005C76 9D                  <1>     popfq
   667                              <1>     return
    18                              <2> %%_ret:
    19 00005C77 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   668                              <1> .writeArenaHeaderOwner:
   669                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   670                              <1> ;       rbx = Owner ID
   671 00005C78 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   672                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00005C7B 74FA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   673 00005C7D 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   674 00005C83 48895801            <1>     mov qword [rax + 1], rbx
   675                              <1>     return
    18                              <2> %%_ret:
    19 00005C87 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    36                                  %include "./Source/Kernel/Local/local.asm"
    37                              <1> ;Localisation based functions live here
    38                              <1> 
    39                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    40                              <1> ;al = 0 => Get the switch char
    41                              <1> ;al = 1 => Set the switch char to whats in DL
    42                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
    43                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
    44                              <1> ;       Always returns -1 => /DEV/ optional
    45                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    46                              <1> ;       Input value is ignored
    47 00005C88 3C01                <1>     cmp al, 01
    48 00005C8A 740B                <1>     je .setSC
    49 00005C8C 7210                <1>     jb .getSC
    50 00005C8E 3C03                <1>     cmp al, 03
    51 00005C90 7214                <1>     jb .getDev
    52 00005C92 741C                <1>     je .setDev
    53 00005C94 B0FF                <1>     mov al, -1
    54                              <1>     return
    18                              <2> %%_ret:
    19 00005C96 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    55                              <1> .setSC:
    56 00005C97 8815(B6C30300)      <1>     mov byte [switchChar], dl
    57                              <1>     return
    18                              <2> %%_ret:
    19 00005C9D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> .getSC:
    59 00005C9E 8A15(B6C30300)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    60 00005CA4 EB02                <1>     jmp short .getRet
    61                              <1> .getDev:
    62 00005CA6 B2FF                <1>     mov dl, -1
    63                              <1> .getRet:
    64 00005CA8 E86B090000          <1>     call getUserRegs
    65 00005CAD 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    66                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    67                              <1>     return
    18                              <2> %%_ret:
    19 00005CB0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    68                              <1> 
    69                              <1> 
    70                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    71                              <1> ;Currently only accept subfunction al = 0, current country
    72                              <1> ;AL > 0 => errInvFnc, Subfunction error
    73                              <1> ;rdx = Ptr to buffer. If -1 => Set Country information. Also error for now.
    74 00005CB1 84C0                <1>     test al, al
    75 00005CB3 740A                <1>     jz .currentCountry
    76                              <1> .invalidFunction:
    77 00005CB5 B801000000          <1>     mov eax, errInvFnc
    78 00005CBA E9010E0000          <1>     jmp extErrExit
    79                              <1> .currentCountry:
    80 00005CBF 4881FAFFFFFFFF      <1>     cmp rdx, -1
    81 00005CC6 74ED                <1>     je .invalidFunction
    82 00005CC8 488D354DA3FFFF      <1>     lea rsi, ctryTbl
    83 00005CCF 4889D7              <1>     mov rdi, rdx
    84 00005CD2 B926000000          <1>     mov ecx, countryStruc_size
    85 00005CD7 F3A4                <1>     rep movsb
    86 00005CD9 31C0                <1>     xor eax, eax
    87 00005CDB E9D20D0000          <1>     jmp extGoodExit
    88                              <1> 
    89                              <1> 
    90                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    91                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    92 00005CE0 C3                  <1>     ret
    37                                  %include "./Source/Kernel/ctrlc.asm"
    38                              <1> 
    39                              <1> fullcriticalErrorInvoke:
    40 00005CE1 B803000000          <1>     mov eax, 03 ;Always fail for now
    41 00005CE6 F9                  <1>     stc
    42                              <1>     return
    18                              <2> %%_ret:
    19 00005CE7 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    43                              <1> xlatHardError:
    44                              <1> ;Translates a hard error code to a generic DOS error
    45                              <1> ;Input: edi = eax = Hard Error Code
    46 00005CE8 50                  <1>     push rax
    47 00005CE9 3D13000000          <1>     cmp eax, drvErrShft
    48 00005CEE 7205                <1>     jb .skipXlat
    49 00005CF0 0513000000          <1>     add eax, drvErrShft
    50                              <1> .skipXlat:
    51 00005CF5 8805D6A5FFFF        <1>     mov byte [hardErrorStack], al   ;Store this error code here
    52 00005CFB 58                  <1>     pop rax
    53 00005CFC 56                  <1>     push rsi
    54 00005CFD 488D3529A4FFFF      <1>     lea rsi, extErrTbl
    55 00005D04 E8100E0000          <1>     call setErrorVars
    56 00005D09 5E                  <1>     pop rsi
    57                              <1>     return
    18                              <2> %%_ret:
    19 00005D0A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> 
    59                              <1> diskDevErr:
    60                              <1> ;Called, NOT Jumped to. 
    61                              <1> ;Input: rdi = Disk Buffer pointer
    62                              <1> ;       eax = Status word (Zero Extended)
    63                              <1> ;       rbp = Disk DPB pointer
    64                              <1> ; [Int44hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    65                              <1> ;Output: al = Int 44h response (0-3)
    66                              <1> ; All other registers preserved
    67 00005D0B 48893D(F4C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi (Disk Buffer pointer)
    68 00005D12 89C7                <1>     mov edi, eax    ;Store status word in rdi
    69 00005D14 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    70 00005D17 8A25(4CC40300)      <1>     mov ah, byte [Int44bitfld]  ;Get the permissions in var
    71 00005D1D 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set bits
    72                              <1>     ;Test for correct buffer data type
    73 00005D20 53                  <1>     push rbx    ;Save rbx temporarily
    74 00005D21 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Get the buffer data type
    75 00005D24 F6C301              <1>     test bl, dosBuffer
    76 00005D27 7505                <1>     jnz .df0
    77 00005D29 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    78 00005D2C EB17                <1>     jmp short .df3
    79                              <1> .df0:
    80 00005D2E F6C302              <1>     test bl, fatBuffer
    81 00005D31 7505                <1>     jnz .df1
    82 00005D33 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    83 00005D36 EB0D                <1>     jmp short .df3
    84                              <1> .df1:
    85 00005D38 F6C304              <1>     test bl, dirBuffer
    86 00005D3B 7505                <1>     jnz .df2
    87 00005D3D 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    88 00005D40 EB03                <1>     jmp short .df3
    89                              <1> .df2:
    90 00005D42 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    91                              <1> .df3:
    92 00005D45 5B                  <1>     pop rbx
    93 00005D46 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
    94 00005D4A E812000000          <1>     call criticalErrorSetup ;Save ah and rbp in this function
    95 00005D4F 488B2D(6EC70300)    <1>     mov rbp, qword [tmpDPBPtr]  ;Get back rbp that was saved by critErrSetup
    96 00005D56 488B3D(F4C30300)    <1>     mov rdi, qword [xInt44RDI]  ;Return original rdi value
    97                              <1>     return
    18                              <2> %%_ret:
    19 00005D5D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    98                              <1> 
    99                              <1> charDevErr:
   100                              <1> ;Called with ah with additional bits
   101 00005D5E 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK  ;Ignore,Retry,Fail OK
   102                              <1> criticalErrorSetup:
   103 00005D61 8825(4CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save bitfield
   104 00005D67 48892D(6EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;rbp is the DPB if a disk operation errored
   105 00005D6E 81E7FF000000        <1>     and edi, 00FFh  ;Save only low byte of error
   106                              <1>     ;For now, fall through, but need much work to change it later! 
   107                              <1> 
   108                              <1> 
   109                              <1> criticalDOSError:   ;Int 4Fh, AX=1206h, Invoke Critical Error Function 
   110                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
   111                              <1> ; to the critical error handler.
   112                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
   113                              <1> ; and with Int44Bitfield set
   114                              <1> ;               AH = Critical Error Bitfield
   115                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   116                              <1> ;               Bit 6 - Reserved
   117                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   118                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   119                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   120                              <1> ;               Bits [2-1] = Affected Disk Error
   121                              <1> ;                     0 0   DOS area
   122                              <1> ;                     0 1   FAT area
   123                              <1> ;                     1 0   Directory area
   124                              <1> ;                     1 1   Data area
   125                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   126                              <1> ;               AL  = Failing drive number if AH[7] = 0
   127                              <1> ;               DIL = Error code for errorMsg
   128                              <1> ;               RSI = EA of Device Header for which device the error occured
   129                              <1> ;Return:
   130                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   131                              <1> ;                  = 1 - Retry the Operation    (Retry)
   132                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   133                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   134                              <1> ; Return response from int 44h in al
   135                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   136                              <1> ; This function will terminate the program if an abort was requested!
   137                              <1> ; This function also destroys RBP
   138 00005D74 803D(ECC30300)01    <1>     cmp byte [critErrFlag], 1
   139 00005D7B 7204                <1>     jb .noIntError  ;If not 0, enter
   140 00005D7D B003                <1>     mov al, critFail    ;Else, return Fail always
   141 00005D7F EB51                <1>     jmp short .exit     ;Don't translate fail to abort
   142                              <1> .noIntError:
   143 00005D81 FA                  <1>     cli ;Disable Interrupts
   144 00005D82 FE05(ECC30300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
   145 00005D88 FE0D(EDC30300)      <1>     dec byte [inDOS]    ;Exiting DOS
   146 00005D8E 488925(44C40300)    <1>     mov qword [xInt44hRSP], rsp
   147 00005D95 488B25(5FC40300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
   148 00005D9C 31ED                <1>     xor ebp, ebp    ;Always zeroed
   149 00005D9E CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
   150 00005DA0 488B25(44C40300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
   151 00005DA7 C605(ECC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   152 00005DAE FE05(EDC30300)      <1>     inc byte [inDOS]    ;Reenter DOS
   153 00005DB4 FB                  <1>     sti ;Reenable Interrupts
   154                              <1>     ;Now we check that the response given was allowed, and translate if needed
   155                              <1> .checkResponse:
   156 00005DB5 3C00                <1>     cmp al, critIgnore
   157 00005DB7 7421                <1>     je .checkIgnore
   158 00005DB9 3C01                <1>     cmp al, critRetry
   159 00005DBB 7428                <1>     je .checkRetry
   160 00005DBD 3C03                <1>     cmp al, critFail
   161 00005DBF 752F                <1>     jne .abort   ;Must be abort
   162                              <1> .setFail:   ;Here is for fail
   163 00005DC1 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int44 responded Fail)
   164 00005DC3 FE05(4EC40300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
   165 00005DC9 F605(4CC40300)08    <1>     test byte [Int44bitfld], critFailOK
   166 00005DD0 741E                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   167                              <1> .exit:
   168 00005DD2 C605(EEC30300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   169                              <1>     return
    18                              <2> %%_ret:
    19 00005DD9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   170                              <1> .checkIgnore:
   171 00005DDA F605(4CC40300)20    <1>     test byte [Int44bitfld], critIgnorOK
   172 00005DE1 75EF                <1>     jnz .exit
   173 00005DE3 EBDC                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   174                              <1> .checkRetry:
   175 00005DE5 F605(4CC40300)10    <1>     test byte [Int44bitfld], critRetryOK
   176 00005DEC 75E4                <1>     jnz .exit   
   177 00005DEE EBD1                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   178                              <1> .abort:
   179                              <1> ;Prepare to abort. We abort from within!
   180                              <1> ;If a network request requests abort, translate to fail
   181 00005DF0 803D(E2C60300)FF    <1>     cmp byte [dosInvoke], -1
   182 00005DF7 7509                <1>     jne .kill   ;If this is zero, local invokation
   183 00005DF9 C605(7AC40300)FF    <1>     mov byte [Int44Trans], -1   ;We are translating a Abort to Fail. Mark it
   184 00005E00 EBD0                <1>     jmp short .exit
   185                              <1> .kill:
   186 00005E02 66893D(F0C30300)    <1>     mov word [errorExCde], di ;Save the error code if Abort
   187 00005E09 89F8                <1>     mov eax, edi    ;Make the return error code the Driver Error Code
   188 00005E0B C605(E6C60300)02    <1>     mov byte [exitType], 2    ;We are returning from Abort, ret type 2!
   189 00005E12 E948F7FFFF          <1>     jmp terminateClean.altEP
   190                              <1> 
   191                              <1> ctrlBreakHdlr:
   192 00005E17 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   193 00005E19 E8B2C7FFFF          <1>     call printCaretASCII
   194 00005E1E E8DDC7FFFF          <1>     call printCRLF
   195                              <1>     ;Reset the console back to 0
   196 00005E23 C605(78C40300)00    <1>     mov byte [vConDrvSwp],  0   ;Set to 0
   197                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   198                              <1> .exceptEP:
   199 00005E2A FA                  <1> 	cli
   200 00005E2B 488B25(5FC40300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   201 00005E32 E8100C0000          <1> 	call dosPopRegs ;Get user state back
   202 00005E37 488925(0CC40300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   203 00005E3E F8                  <1>     clc
   204 00005E3F CD43                <1>     int 43h ;Call critical error handler
   205 00005E41 FA                  <1>     cli ;Clear interrupts again
   206 00005E42 488905(18C40300)    <1>     mov qword [oldRAX], rax ;Save rax
   207 00005E49 9C                  <1>     pushfq  ;Get flags in rax
   208 00005E4A 58                  <1>     pop rax 
   209 00005E4B 483B25(0CC40300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   210 00005E52 750C                <1>     jne .checkCF
   211                              <1> .returnToDOS:
   212 00005E54 488B05(18C40300)    <1>     mov rax, qword [oldRAX]
   213 00005E5B E98D0A0000          <1>     jmp functionDispatch    ;Goto int 41h
   214                              <1> .checkCF:
   215 00005E60 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   216 00005E67 A801                <1>     test al, 1  ;CF set?
   217 00005E69 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   218 00005E6B B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   219 00005E70 C605(70C40300)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   220 00005E77 E9710A0000          <1>     jmp functionDispatch
   221                              <1> 
   222                              <1> ;CPU Exception handlers
   223                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   224                              <1> ; CTRL+C exit.
   225                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   226                              <1> ; system.
   227                              <1> ; Also halt if the application is it's own parent.
   228                              <1> ;An application should hook these interupts if they wish to not 
   229                              <1> ; CTRL+C exit, and instead return to DOS.
   230                              <1> i0:
   231 00005E7C 31C0                <1>     xor eax, eax
   232 00005E7E E9AB000000          <1>     jmp cpu_2args
   233                              <1> i1:
   234 00005E83 B801000000          <1>     mov eax, 1
   235 00005E88 E9A1000000          <1>     jmp cpu_2args
   236                              <1> i2:
   237 00005E8D B802000000          <1>     mov eax, 2
   238 00005E92 E997000000          <1>     jmp cpu_2args
   239                              <1> i3:
   240 00005E97 B803000000          <1>     mov eax, 3
   241 00005E9C E98D000000          <1>     jmp cpu_2args
   242                              <1> i4:
   243 00005EA1 B804000000          <1>     mov eax, 4
   244 00005EA6 E983000000          <1>     jmp cpu_2args
   245                              <1> i5:
   246 00005EAB B805000000          <1>     mov eax, 5
   247 00005EB0 EB7C                <1>     jmp short cpu_2args
   248                              <1> i6:
   249 00005EB2 B806000000          <1>     mov eax, 6
   250 00005EB7 EB75                <1>     jmp short cpu_2args
   251                              <1> i7:
   252 00005EB9 B807000000          <1>     mov eax, 7
   253 00005EBE EB6E                <1>     jmp short cpu_2args
   254                              <1> i8:
   255 00005EC0 B808000000          <1>     mov eax, 8
   256 00005EC5 EB60                <1>     jmp short cpu_3args
   257                              <1> i9:
   258 00005EC7 B809000000          <1>     mov eax, 9
   259 00005ECC EB60                <1>     jmp short cpu_2args
   260                              <1> i10:
   261 00005ECE B80A000000          <1>     mov eax, 0Ah
   262 00005ED3 EB52                <1>     jmp short cpu_3args
   263                              <1> i11:
   264 00005ED5 B80B000000          <1>     mov eax, 0Bh
   265 00005EDA EB4B                <1>     jmp short cpu_3args
   266                              <1> i12:
   267 00005EDC B80C000000          <1>     mov eax, 0Ch
   268 00005EE1 EB44                <1>     jmp short cpu_3args
   269                              <1> i13:
   270 00005EE3 B80D000000          <1>     mov eax, 0Dh
   271 00005EE8 EB3D                <1>     jmp short cpu_3args
   272                              <1> i14:
   273 00005EEA B80E000000          <1>     mov eax, 0Eh
   274 00005EEF EB2F                <1>     jmp short cpu_4args
   275                              <1> i15:
   276 00005EF1 B80F000000          <1>     mov eax, 0Fh
   277 00005EF6 EB36                <1>     jmp short cpu_2args
   278                              <1> i16:
   279 00005EF8 B810000000          <1>     mov eax, 10h
   280 00005EFD EB2F                <1>     jmp short cpu_2args
   281                              <1> i17:
   282 00005EFF B811000000          <1>     mov eax, 11h
   283 00005F04 EB21                <1>     jmp short cpu_3args
   284                              <1> i18:
   285 00005F06 B812000000          <1>     mov eax, 12h
   286 00005F0B EB21                <1>     jmp short cpu_2args
   287                              <1> i19:
   288 00005F0D B813000000          <1>     mov eax, 13h
   289 00005F12 EB1A                <1>     jmp short cpu_2args
   290                              <1> i20:
   291 00005F14 B814000000          <1>     mov eax, 14h
   292 00005F19 EB13                <1>     jmp short cpu_2args
   293                              <1> i21:
   294 00005F1B B815000000          <1>     mov eax, 15h
   295                              <1> cpu_4args:
   296 00005F20 B903000000          <1>     mov ecx, 3
   297 00005F25 EB0C                <1>     jmp short cpu_exception
   298                              <1> cpu_3args:
   299 00005F27 B902000000          <1>     mov ecx, 2
   300 00005F2C EB05                <1>     jmp short cpu_exception
   301                              <1> cpu_2args:
   302 00005F2E B901000000          <1>     mov ecx, 1
   303                              <1> cpu_exception:
   304                              <1> ;Enter with:
   305                              <1> ; eax = Exception number in binary
   306                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   307 00005F33 488D3501020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   308 00005F3A BB21000000          <1>     mov ebx, fatalt0L  ;Get the length
   309 00005F3F E8AF010000          <1>     call .writeExceptionMessage
   310                              <1> 
   311 00005F44 803D(EDC30300)01    <1>     cmp byte [inDOS], 1
   312 00005F4B 7327                <1>     jae .introStop
   313 00005F4D 3D02000000          <1>     cmp eax, 2
   314 00005F52 7420                <1>     je .introStop
   315                              <1> 
   316 00005F54 488B1D(04C40300)    <1>     mov rbx, qword [currentPSP] ;If a command shell craps out, Halt
   317 00005F5B 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr]
   318 00005F5F 7413                <1>     je .introStop
   319                              <1> 
   320 00005F61 488D35F4010000      <1>     lea rsi, .fatal1
   321 00005F68 BBAE000000          <1>     mov ebx, fatal1L
   322 00005F6D E881010000          <1>     call .writeExceptionMessage
   323 00005F72 EB18                <1>     jmp short .introEnd
   324                              <1> .introStop:
   325 00005F74 C605(6BDA0300)FF    <1>     mov byte [haltDOS], -1
   326 00005F7B 488D358B020000      <1>     lea rsi, .fatalHalt   ;Get the ptr
   327 00005F82 BB15000000          <1>     mov ebx, fatalHaltL  ;Get the length
   328 00005F87 E867010000          <1>     call .writeExceptionMessage
   329                              <1> .introEnd:
   330 00005F8C 488D3D(5BDA0300)    <1>     lea rdi, byteBuffer
   331 00005F93 E829010000          <1>     call .printbyte ;Store the error code in the byte buffer
   332 00005F98 488D35(5BDA0300)    <1>     lea rsi, byteBuffer
   333 00005F9F BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   334 00005FA4 E84A010000          <1>     call .writeExceptionMessage
   335                              <1> 
   336 00005FA9 488D355A020000      <1>     lea rsi, .fatal2
   337 00005FB0 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   338 00005FB5 E839010000          <1>     call .writeExceptionMessage
   339                              <1> 
   340 00005FBA 80F901              <1>     cmp cl, 1
   341 00005FBD 7768                <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   342                              <1> .cpurollprint:
   343 00005FBF 488D3D(5BDA0300)    <1>     lea rdi, byteBuffer
   344 00005FC6 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   345                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   346 00005FCA B108                <1>     mov cl, 8    ;8 bytes
   347                              <1> .cpurollprint1:
   348 00005FCC 48C1C208            <1>     rol rdx, 8
   349 00005FD0 88D0                <1>     mov al, dl
   350 00005FD2 52                  <1>     push rdx
   351 00005FD3 E8E9000000          <1>     call .printbyte
   352 00005FD8 5A                  <1>     pop rdx
   353 00005FD9 FEC9                <1>     dec cl
   354 00005FDB 75EF                <1>     jnz .cpurollprint1
   355                              <1> 
   356 00005FDD BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   357 00005FE2 488D35(5BDA0300)    <1>     lea rsi, byteBuffer
   358 00005FE9 E805010000          <1>     call .writeExceptionMessage
   359                              <1> 
   360 00005FEE BB03000000          <1>     mov ebx, crlfL
   361 00005FF3 488D3528020000      <1>     lea rsi, .crlf
   362 00005FFA E8F4000000          <1>     call .writeExceptionMessage    
   363                              <1> 
   364 00005FFF F605(6BDA0300)FF    <1>     test byte [haltDOS], -1
   365 00006006 7516                <1>     jnz .fatalStop
   366 00006008 E8D1000000          <1>     call .readInputChar
   367 0000600D B8004C0000          <1>     mov eax, 4c00h
   368 00006012 C605(70C40300)FF    <1>     mov byte [ctrlCExit], -1
   369 00006019 E9CF080000          <1>     jmp functionDispatch    ;Call Int 41h politely
   370                              <1> .fatalStop:
   371                              <1> ;This is called if inDOS > 1 or NMI occured
   372                              <1> ;Permanently locks up the system by turning off interrupts and infinite looping.
   373 0000601E E8660A0000          <1>     call dosCrit2Enter  ;Suspend multitasking now
   374                              <1> .fatalLp:
   375 00006023 FA                  <1>     cli
   376 00006024 F4                  <1>     hlt
   377 00006025 EBFC                <1>     jmp short .fatalLp
   378                              <1> 
   379                              <1> .cpuextendederror:
   380 00006027 5A                  <1>     pop rdx
   381 00006028 48FFC9              <1>     dec rcx
   382 0000602B 51                  <1>     push rcx
   383 0000602C 488D3D(5BDA0300)    <1>     lea rdi, byteBuffer
   384 00006033 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   385 00006035 86D6                <1>     xchg dl, dh   
   386                              <1> .pr1:
   387 00006037 88D0                <1>     mov al, dl
   388 00006039 52                  <1>     push rdx
   389 0000603A E882000000          <1>     call .printbyte
   390 0000603F 5A                  <1>     pop rdx
   391 00006040 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   392 00006043 FEC9                <1>     dec cl
   393 00006045 75F0                <1>     jnz .pr1
   394                              <1> 
   395 00006047 488D35(5BDA0300)    <1>     lea rsi, byteBuffer
   396 0000604E BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   397 00006053 E89B000000          <1>     call .writeExceptionMessage
   398                              <1> 
   399 00006058 488D35AB010000      <1>     lea rsi, .fatal2
   400 0000605F BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   401 00006064 E88A000000          <1>     call .writeExceptionMessage
   402                              <1> 
   403 00006069 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   404 0000606A 48FFC9              <1>     dec rcx
   405 0000606D 0F844CFFFFFF        <1>     jz .cpurollprint
   406                              <1> 
   407 00006073 B108                <1>     mov cl, 8   ;16 nybbles
   408 00006075 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   409 00006078 488D3D(5BDA0300)    <1>     lea rdi, byteBuffer
   410                              <1> .pr2:
   411 0000607F 48C1C208            <1>     rol rdx, 8    ;Print rdx
   412 00006083 88D0                <1>     mov al, dl
   413 00006085 52                  <1>     push rdx
   414 00006086 E836000000          <1>     call .printbyte
   415 0000608B 5A                  <1>     pop rdx
   416 0000608C FEC9                <1>     dec cl
   417 0000608E 75EF                <1>     jnz .pr2
   418                              <1> 
   419 00006090 488D35(5BDA0300)    <1>     lea rsi, byteBuffer
   420 00006097 BB10000000          <1>     mov ebx, 16
   421 0000609C E852000000          <1>     call .writeExceptionMessage
   422                              <1> 
   423 000060A1 488D3562010000      <1>     lea rsi, .fatal2
   424 000060A8 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   425 000060AD E841000000          <1>     call .writeExceptionMessage
   426                              <1> 
   427 000060B2 E908FFFFFF          <1>     jmp .cpurollprint
   428                              <1> 
   429                              <1> 
   430                              <1> .char:    ;Print a single character
   431 000060B7 488D1D6D000000      <1>     lea rbx, .ascii
   432 000060BE D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   433 000060BF AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   434 000060C0 C3                  <1>     ret
   435                              <1> .printbyte:
   436 000060C1 88C2                <1>     mov dl, al            ;save byte in dl
   437 000060C3 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   438 000060C7 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   439 000060CC 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   440 000060D0 E8E2FFFFFF          <1>     call .char
   441 000060D5 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   442 000060D8 E8DAFFFFFF          <1>     call .char
   443 000060DD C3                  <1>     ret        
   444                              <1> 
   445                              <1> 
   446                              <1> .readInputChar:
   447 000060DE C605(D1C40300)04    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   448 000060E5 488D35(00C50300)    <1>     lea rsi, singleIObyt
   449 000060EC BB01000000          <1>     mov ebx, 1  ;Read one char
   450 000060F1 EB07                <1>     jmp short .ioException
   451                              <1> .writeExceptionMessage:
   452                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   453 000060F3 C605(D1C40300)08    <1>     mov byte [critReqHdr + ioReqPkt.cmdcde], drvWRITE
   454                              <1> .ioException:
   455 000060FA C605(CFC40300)2A    <1>     mov byte [critReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   456 00006101 66C705(D2C40300)00- <1>     mov word [critReqHdr + ioReqPkt.status], 0
   456 00006109 00                  <1>
   457 0000610A 891D(E5C40300)      <1>     mov dword [critReqHdr + ioReqPkt.tfrlen], ebx
   458 00006110 488D1D(CFC40300)    <1>     lea rbx, critReqHdr
   459 00006117 488935(DDC40300)    <1>     mov qword [critReqHdr + ioReqPkt.bufptr], rsi
   460 0000611E 488B35(59C00300)    <1>     mov rsi, qword [vConPtr]
   461 00006125 E803010000          <1>     call goDriver
   462                              <1>     return
    18                              <2> %%_ret:
    19 0000612A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   463                              <1> 
   464                              <1> 
   465                              <1> ;Error messages
   466 0000612B 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   466 00006134 39414243444546      <1>
   467 0000613B 0D0A0A5343502F444F- <1> .fatalt0:  db CR,LF,LF,"SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   467 00006144 532045584345505449- <1>
   467 0000614D 4F4E20444554454354- <1>
   467 00006156 4544210D0A0A        <1>
   468                              <1> fatalt0L   equ $ - .fatalt0
   469                              <1> 
   470                              <1> .fatal1:   
   471 0000615C 4120706F74656E7469- <1>     db "A potentially fatal error has been detected and the current application"
   471 00006165 616C6C792066617461- <1>
   471 0000616E 6C206572726F722068- <1>
   471 00006177 6173206265656E2064- <1>
   471 00006180 657465637465642061- <1>
   471 00006189 6E6420746865206375- <1>
   471 00006192 7272656E7420617070- <1>
   471 0000619B 6C69636174696F6E    <1>
   472 000061A3 2077696C6C20626520- <1>     db " will be terminated.",CR,LF,
   472 000061AC 7465726D696E617465- <1>
   472 000061B5 642E0D0A            <1>
   473 000061B9 507265737320616E79- <1>     db "Press any key to continue or CTRL+ALT+DEL to restart the machine."
   473 000061C2 206B657920746F2063- <1>
   473 000061CB 6F6E74696E7565206F- <1>
   473 000061D4 72204354524C2B414C- <1>
   473 000061DD 542B44454C20746F20- <1>
   473 000061E6 726573746172742074- <1>
   473 000061EF 6865206D616368696E- <1>
   473 000061F8 652E                <1>
   474 000061FA 0D0A53595354454D20- <1>     db CR,LF,"SYSTEM ERROR: "   ;Print standard Error message here
   474 00006203 4552524F523A20      <1>
   475                              <1> fatal1L equ $ - .fatal1
   476                              <1> 
   477 0000620A 203A20              <1> .fatal2:   db " : "
   478                              <1> fatal2L    equ $ - .fatal2
   479                              <1> 
   480                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   481 0000620D 5343502F444F532053- <1> .fatalHalt: db "SCP/DOS SYSTEM STOP: "
   481 00006216 595354454D2053544F- <1>
   481 0000621F 503A20              <1>
   482                              <1> fatalHaltL equ $ - .fatalHalt
   483 00006222 0D0A0A              <1> .crlf:  db CR,LF,LF
   484                              <1> crlfL  equ $ - .crlf
    38                                  %include "./Source/Kernel/dosPrim.asm"
    39                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    40                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    41                              <1> 
    42                              <1> dosDefCritErrHdlr:
    43                              <1> ;The DOS default critical error handler always returns FAIL
    44 00006225 B003                <1>     mov al, critFail
    45 00006227 48CF                <1>     iretq
    46                              <1> goDriverChar:
    47                              <1> ;Shortcut for Char requests, make a driver request
    48                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    49 00006229 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    50                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    51                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    52                              <1> ;       rbx = Ptr to the request header for the driver call!
    53 0000622D E857080000          <1>     call dosCrit2Enter
    54 00006232 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    55 00006235 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    56 00006238 E856080000          <1>     call dosCrit2Exit
    57                              <1>     return
    18                              <2> %%_ret:
    19 0000623D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    58                              <1> 
    59                              <1> setupPhysicalDiskRequest:
    60                              <1> ;Ensure that al has valid disk number
    61                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    62                              <1> ;If CF=NC, rbp = DPB ptr.
    63                              <1> ;If CF=CY, exit error
    64 0000623E 84C0                <1>     test al, al
    65 00006240 723F                <1>     jc .diskError
    66 00006242 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
    67 00006248 7337                <1>     jae .diskError
    68 0000624A 50                  <1>     push rax
    69 0000624B FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    70 0000624D E853040000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    71 00006252 58                  <1>     pop rax
    72 00006253 7235                <1>     jc .error
    73 00006255 8805(E9C60300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    74 0000625B 488B2D(F2C60300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    75 00006262 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsRedirDrive   ;On a network?
    76 0000626A 750A                <1>     jnz .netError
    77 0000626C 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    78 00006270 E82E030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    79                              <1>     return
    18                              <2> %%_ret:
    19 00006275 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    80                              <1> .netError:
    81 00006276 66C705(F0C30300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    81 0000627E 00                  <1>
    82 0000627F EB09                <1>     jmp short .error
    83                              <1> .diskError:
    84 00006281 66C705(F0C30300)0F- <1>     mov word [errorExCde], errBadDrv
    84 00006289 00                  <1>
    85                              <1> .error: ;This error setting needs to remain as is to allow for Int 45/46
    86 0000628A C605(EFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    87 00006291 C605(F2C30300)07    <1>     mov byte [errorAction], eActRetUsr
    88 00006298 C605(F3C30300)09    <1>     mov byte [errorClass], eClsBadFmt
    89 0000629F F9                  <1>     stc
    90                              <1>     return
    18                              <2> %%_ret:
    19 000062A0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> setupAbsDiskEntry:
    93                              <1> ;Prepares to sets up the CDS and DPB for the request
    94 000062A1 FE05(EDC30300)      <1>     inc byte [inDOS]
    95 000062A7 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    96 000062A8 FC                  <1>     cld ;Set string ops in the right direction
    97 000062A9 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    98 000062AE 7223                <1>     jc .exit    ;Error exit
    99 000062B0 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
   100 000062B7 56                  <1>     push rsi
   101 000062B8 50                  <1>     push rax
   102 000062B9 488D35(02C50300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
   103 000062C0 8806                <1>     mov byte [rsi], al  ;Construct a path
   104 000062C2 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
   105 000062C5 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
   106 000062C9 F8                  <1>     clc
   107                              <1> ;++++++++++++++++++++++++++++
   108                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
   109                              <1> ;Entered with path in rsi (ah=03h)
   110 000062CA B800030000          <1>     mov eax, 0300h  
   111 000062CF CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
   112                              <1> ;++++++++++++++++++++++++++++
   113 000062D1 58                  <1>     pop rax
   114 000062D2 5E                  <1>     pop rsi
   115                              <1> .exit:
   116 000062D3 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   117                              <1>     return
    18                              <2> %%_ret:
    19 000062D5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   118                              <1> 
   119                              <1> absDiskWrite:       ;Int 46h
   120                              <1> ;al = Drive number
   121                              <1> ;rbx = Memory Buffer address to read from
   122                              <1> ;ecx = Number of sectors to write
   123                              <1> ;rdx = Start LBA to write to
   124 000062D6 FA                  <1>     cli
   125 000062D7 488925(5FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   126 000062DE 488D25(B9D90300)    <1>     lea rsp, DiskStakTop
   127 000062E5 55                  <1>     push rbp
   128 000062E6 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   129 000062E7 E8B5FFFFFF          <1>     call setupAbsDiskEntry
   130 000062EC 7252                <1>     jc absDiskExit
   131 000062EE E8C3010000          <1>     call primReqWriteSetup
   132 000062F3 EB1D                <1>     jmp short absDiskReadWriteCommon
   133                              <1> absDiskRead:        ;Int 45h
   134                              <1> ;al = Drive number
   135                              <1> ;rbx = Memory Buffer address to write to
   136                              <1> ;ecx = Number of sectors to read
   137                              <1> ;rdx = Start LBA to read from
   138 000062F5 FA                  <1>     cli 
   139 000062F6 488925(5FC40300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   140 000062FD 488D25(B9D90300)    <1>     lea rsp, DiskStakTop
   141 00006304 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   142 00006305 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   143 00006306 E896FFFFFF          <1>     call setupAbsDiskEntry
   144 0000630B 7233                <1>     jc absDiskExit
   145 0000630D E8AF010000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   146                              <1> absDiskReadWriteCommon:
   147                              <1> ;Entered with the appropriate function number in ah
   148                              <1> ; and primary request header in rbx
   149 00006312 E83B000000          <1>     call absDiskDriverCall
   150 00006317 7427                <1>     jz absDiskExit  ;Skip error code checking
   151 00006319 8A05(A8C40300)      <1>     mov al, byte [primReqHdr + ioReqPkt.status] ;Get low byte into al
   152                              <1>     ;DOS uses the following pairs in a table
   153                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   154 0000631F B480                <1>     mov ah, 80h ;Attachment failure
   155 00006321 3C0C                <1>     cmp al, 0Ch ;Gen error
   156 00006323 741A                <1>     je .absExit
   157 00006325 B440                <1>     mov ah, 40h ;Seek error
   158 00006327 3C06                <1>     cmp al, 06h
   159 00006329 7414                <1>     je .absExit
   160 0000632B B408                <1>     mov ah, 08h ;Bad CRC
   161 0000632D 3C04                <1>     cmp al, 04h
   162 0000632F 740E                <1>     je .absExit
   163 00006331 B404                <1>     mov ah, 04h ;Sector not found
   164 00006333 3C08                <1>     cmp al, 08h
   165 00006335 7408                <1>     je .absExit
   166 00006337 30E4                <1>     xor ah, ah  ;Write Protect Violation
   167 00006339 84C0                <1>     test al, al
   168 0000633B 7402                <1>     je .absExit
   169 0000633D B402                <1>     mov ah, 02h ;Other Error
   170                              <1> .absExit:
   171 0000633F F9                  <1>     stc
   172                              <1> absDiskExit:
   173 00006340 5B                  <1>     pop rbx
   174 00006341 5D                  <1>     pop rbp
   175 00006342 FA                  <1>     cli
   176 00006343 FE0D(EDC30300)      <1>     dec byte [inDOS]
   177 00006349 488B25(5FC40300)    <1>     mov rsp, qword [oldRSP]
   178 00006350 FB                  <1>     sti ;Reenable interrupts
   179                              <1>     return ;Return from interrupt without popping flags!
    18                              <2> %%_ret:
    19 00006351 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   180                              <1> absDiskDriverCall:
   181                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   182                              <1> ;       rbx = Request header address
   183                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   184                              <1> ;       eax = Status word from request
   185                              <1> ;       ecx = Number of sectors transferred
   186 00006352 56                  <1>     push rsi
   187                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   188 00006353 8B0D(BBC40300)      <1>     mov ecx, dword [primReqHdr + ioReqPkt.tfrlen]
   189                              <1>     ;Prepare for goDriver now
   190 00006359 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   191 0000635D E8CBFEFFFF          <1>     call goDriver   ;Make request
   192 00006362 5E                  <1>     pop rsi
   193 00006363 8B05(BBC40300)      <1>     mov eax, dword [primReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   194 00006369 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   195 0000636B 0FB705(A8C40300)    <1>     movzx eax, word [primReqHdr + ioReqPkt.status]
   196 00006372 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   197                              <1>     return
    18                              <2> %%_ret:
    19 00006376 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   198                              <1> 
   199                              <1> getDiskDPB:
   200                              <1> ;Gets the disk DPB if the Disk is valid
   201                              <1> ;Otherwise will return a pointer to the drive DPB
   202                              <1> ;Called with rdi pointing to the CDS
   203                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   204 00006377 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   205 0000637B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   206 0000637E 8805(E9C60300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   207 00006384 E81A020000          <1>     call setWorkingDPB
   208 00006389 57                  <1>     push rdi    ;Save the CDS ptr
   209 0000638A E84E000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   210 0000638F 5F                  <1>     pop rdi
   211 00006390 724A                <1>     jc .exitBad ;Preserve CF
   212 00006392 7547                <1>     jnz .exit
   213                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   214 00006394 0FB60D(7EC00300)    <1>     movzx ecx, byte [lastdrvNum]
   215 0000639B 31C0                <1>     xor eax, eax
   216 0000639D 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   217 000063A0 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   218 000063A4 488B3D(6BC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   219                              <1> .checkCDS:
   220 000063AB 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   221 000063B1 751D                <1>     jnz .next
   222 000063B3 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi
   223 000063B7 7517                <1>     jne .next
   224 000063B9 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   225 000063BD 7411                <1>     jz .next    ;IF yes, skip it
   226 000063BF 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   227                              <1>     ;Subst drives should just fail if the subdir doesnt exist.
   228                              <1>     ;TEMP TEMP: subst will become deactivated and their StartingClust=-1
   229 000063C2 66F747430010        <1>     test word [rdi + cds.wFlags], cdsSubstDrive
   230 000063C8 7406                <1>     jz .next    ;If bit not set, skip this next bit
   231 000063CA 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Clear the flags rendering this drv dead
   232                              <1> .next:
   233 000063D0 4881C75B000000      <1>     add rdi, cds_size
   234 000063D7 FFC9                <1>     dec ecx
   235 000063D9 75D0                <1>     jnz .checkCDS
   236                              <1> .exit:
   237 000063DB F8                  <1>     clc
   238                              <1> .exitBad:
   239                              <1>     return
    18                              <2> %%_ret:
    19 000063DC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> ensureDiskValid:
   242                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   243                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   244                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   245                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   246                              <1> .medChk:
   247 000063DD E828010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   248                              <1> ;Return in rbx the req hdr address
   249 000063E2 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   250 000063E6 E842FEFFFF          <1>     call goDriver   ;Request!
   251 000063EB 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   252 000063EF F7C700800000        <1>     test edi, drvErrStatus
   253 000063F5 756B                <1>     jnz .diskDrvCritErrMedChk
   254                              <1> .medChkIgnore:
   255 000063F7 8A05(E9C60300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   256 000063FD 30E4                <1>     xor ah, ah
   257 000063FF 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   258 00006402 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   259 00006405 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   260 00006407 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   261 00006409 E897A5FFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   262 0000640E F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   263 0000640F 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   264                              <1>     ;ZF=NZ from test for dirty buffers
   265                              <1> .exit:
   266                              <1>     return
    18                              <2> %%_ret:
    19 00006411 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   267                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   268 00006412 C605(C1D90300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   269 00006419 E8ABA5FFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   270                              <1>     ;Get a buffer to read BPB into in rdi
   271 0000641E 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   272 00006420 E8A5A7FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   273 00006425 72EA                <1>     jc .exit    ;Immediately exit with the carry flag set
   274 00006427 488D7B30            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   275                              <1> .repeatEP:
   276 0000642B E806010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   277 00006430 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   278 00006434 E8F4FDFFFF          <1>     call goDriver   ;Request!
   279 00006439 0FB74303            <1>     movzx eax, word [rbx + bpbBuildReqPkt.status]
   280 0000643D A900800000          <1>     test eax, drvErrStatus
   281 00006442 755C                <1>     jnz .diskDrvCritErrBPB
   282                              <1>     ;Now rebuild the dpb fields for this drive
   283 00006444 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   284 00006448 E834090000          <1>     call createDPB
   285                              <1>     ;Adjust the buffer header information
   286 0000644D 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   287 00006450 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   288 00006453 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   289 00006456 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   290 00006459 30E4                <1>     xor ah, ah
   291 0000645B 8825(C1D90300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   292                              <1>     return
    18                              <2> %%_ret:
    19 00006461 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   293                              <1> .diskDrvCritErrMedChk:
   294                              <1> ;Critical Errors fall through here
   295                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   296 00006462 48893D(F4C30300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   297 00006469 48892D(6EC70300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   298 00006470 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   299 00006473 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   300 00006475 8825(4CC40300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   301 0000647B E8F4F8FFFF          <1>     call criticalDOSError
   302 00006480 488B3D(F4C30300)    <1>     mov rdi, qword [xInt44RDI]
   303 00006487 488B2D(6EC70300)    <1>     mov rbp, qword [tmpDPBPtr]
   304 0000648E 3C01                <1>     cmp al, critRetry
   305 00006490 0F8447FFFFFF        <1>     je .medChk
   306 00006496 3C00                <1>     cmp al, critIgnore
   307 00006498 0F8459FFFFFF        <1>     je .medChkIgnore
   308 0000649E F9                  <1>     stc ;Set error flag to indicate fail
   309                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 0000649F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   310                              <1> 
   311                              <1> .diskDrvCritErrBPB:
   312                              <1>     ;eax has status word, rbp has dpb ptr
   313                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   314 000064A0 C605(4CC40300)18    <1>     mov byte [Int44bitfld], critRead | critDOS | critFailOK | critRetryOK
   315 000064A7 E85FF8FFFF          <1>     call diskDevErr
   316 000064AC 3C01                <1>     cmp al, critRetry
   317 000064AE 0F8477FFFFFF        <1>     je .repeatEP
   318                              <1>     ;Else we fail (Ignore=Fail here)
   319 000064B4 F9                  <1>     stc ;Set error flag to indicate fail
   320                              <1>     return ;And exit from function with CF set
    18                              <2> %%_ret:
    19 000064B5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   322                              <1> ;           Primitive Driver Requests
   323                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   324                              <1> ;First are Disk requests, then Char device requests
   325                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   326                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   327                              <1> 
   328                              <1> primReqWriteSetup:
   329 000064B6 50                  <1>     push rax
   330 000064B7 B408                <1>     mov ah, drvWRITE    ;Command code
   331 000064B9 0225(B5C30300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   332 000064BF EB03                <1>     jmp short primReqRWCommon
   333                              <1> primReqReadSetup:
   334 000064C1 50                  <1>     push rax
   335 000064C2 B404                <1>     mov ah, drvREAD
   336                              <1> primReqRWCommon:
   337                              <1> ;Sets up the IO request packet with:
   338                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   339                              <1> ; rbx = Data storage buffer ptr
   340                              <1> ; ecx = Number of sectors to transfer
   341                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   342                              <1> ; ~~~~ Set by entry function ~~~~ 
   343                              <1> ; ah = Command code
   344                              <1> ; All regs preserved EXCEPT rbx.
   345                              <1> ; Return: rbx = Transfer Address
   346 000064C4 48891D(B3C40300)    <1>     mov qword [primReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   347 000064CB 890D(BBC40300)      <1>     mov dword [primReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   348 000064D1 C605(A5C40300)2A    <1>     mov byte [primReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   349 000064D8 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   350 000064DD 8905(A6C40300)      <1>     mov dword [primReqHdr + ioReqPkt.unitnm], eax   ;Clear unit number field
   351 000064E3 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   352 000064E6 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   353                              <1>     ;Disk operations only here!
   354 000064E8 488915(BFC40300)    <1>     mov qword [primReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   355 000064EF 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   356 000064F2 8805(B2C40300)      <1>     mov byte [primReqHdr + ioReqPkt.medesc], al ;Store medesc!
   357 000064F8 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   358 000064FB 8805(A6C40300)      <1>     mov byte [primReqHdr + ioReqPkt.unitnm], al ;Store the unit number
   359                              <1> primReqCommonExit:
   360                              <1> ;Returns in rbx the primary request header as these functions
   361                              <1> ; setup the request in the primary request header space
   362 00006501 58                  <1>     pop rax
   363 00006502 488D1D(A5C40300)    <1>     lea rbx, primReqHdr ;Put in rbx the primary request header
   364                              <1>     return
    18                              <2> %%_ret:
    19 00006509 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   365                              <1> 
   366                              <1> primReqMedCheckSetup:
   367                              <1> ;Prepare the diskIO packet for mediacheck
   368                              <1> ;rbp has DPB pointer for device to check media on
   369 0000650A 50                  <1>     push rax
   370 0000650B C605(A5C40300)17    <1>     mov byte [primReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   371 00006512 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   372 00006515 8805(B2C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.medesc], al
   373 0000651B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   374 0000651E 8805(A6C40300)      <1>     mov byte [primReqHdr + mediaCheckReqPkt.unitnm], al
   375 00006524 C605(A7C40300)01    <1>     mov byte [primReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   376 0000652B 66C705(A8C40300)00- <1>     mov word [primReqHdr + mediaCheckReqPkt.status], 0
   376 00006533 00                  <1>
   377 00006534 EBCB                <1>     jmp short primReqCommonExit
   378                              <1> 
   379                              <1> primReqGetBPBSetup:
   380                              <1> ;rbp has DPB pointer for device
   381                              <1> ;rdi has sector buffer header pointer for transfer
   382 00006536 50                  <1>     push rax
   383 00006537 488D4730            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   384 0000653B 48893D(B3C40300)    <1>     mov qword [primReqHdr + bpbBuildReqPkt.bufptr], rdi
   385 00006542 C605(A5C40300)1E    <1>     mov byte [primReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   386 00006549 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   387 0000654C 8805(B2C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.medesc], al
   388 00006552 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   389 00006555 8805(A6C40300)      <1>     mov byte [primReqHdr + bpbBuildReqPkt.unitnm], al
   390 0000655B C605(A7C40300)02    <1>     mov byte [primReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   391 00006562 66C705(A8C40300)00- <1>     mov word [primReqHdr + bpbBuildReqPkt.status], 0
   391 0000656A 00                  <1>
   392 0000656B EB94                <1>     jmp short primReqCommonExit
   393                              <1> 
   394                              <1> primReqOpenSetup:
   395                              <1> ;al = unit number if a disk device. Undefined otherwise
   396 0000656D 50                  <1>     push rax
   397 0000656E B40D                <1>     mov ah, drvOPEN
   398 00006570 EB03                <1>     jmp short primReqOCcommon
   399                              <1> primReqCloseSetup:
   400                              <1> ;al = unit number if a disk device. Undefined otherwise
   401 00006572 50                  <1>     push rax
   402 00006573 B40E                <1>     mov ah, drvCLOSE
   403                              <1> primReqOCcommon:
   404 00006575 C605(A5C40300)0D    <1>     mov byte [primReqHdr + openReqPkt.hdrlen], openReqPkt_size
   405 0000657C 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   406 0000657D 8905(A6C40300)      <1>     mov dword [primReqHdr + openReqPkt.unitnm], eax
   407                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   408 00006583 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   409                              <1> 
   410                              <1> secdReqCharIOReq:
   411                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   412                              <1> ;Input:
   413                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   414                              <1> ; ecx = Length of buffer
   415                              <1> ; rdi = Buffer pointer
   416                              <1> ;Output: 
   417                              <1> ; rbx = Transfer Address 
   418 00006588 488D1D(7BC40300)    <1>     lea rbx, secdReqHdr
   419 0000658F C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   420 00006592 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   421 00006595 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   422 0000659B 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   423 0000659F 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   424                              <1>     return
    18                              <2> %%_ret:
    19 000065A2 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   425                              <1> ;If the device which will process this request is a disk device
   426                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   427                              <1> ;Then we will read the appropriate byte from that buffer to the 
   428                              <1> ; singleIOByt buffer.
   429                              <1> ;Such a request will require additional setup with the following fields:
   430                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    39                                  %include "./Source/Kernel/dosUtils.asm"
    40                              <1> ;DOS utility functions 
    41                              <1> 
    42                              <1> ;Basic Drive related Utilities
    43                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    44                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    45                              <1> ; that gets set up)
    46                              <1> 
    47                              <1> setWorkingDPB:
    48                              <1> ;Gets dpb in rbp and saves to workingDPB
    49 000065A3 48892D(EAC60300)    <1>     mov qword [workingDPB], rbp
    50                              <1>     return
    18                              <2> %%_ret:
    19 000065AA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> testCDSNet:
    53                              <1> ;Checks if the workingCDS is a redirector drive
    54                              <1> ;Returns: CF=NC => Not net
    55                              <1> ;         CF=CY => Network redirector
    56                              <1> ;         ZF=ZE => Net without CDS (\\ paths only)
    57                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    58                              <1> ;         rdi = workingCDS ptr
    59 000065AB 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS]
    60 000065B2 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    61 000065B9 7409                <1>     je .net
    62 000065BB 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    63 000065C1 7501                <1>     jnz .net ;Net with CDS
    64                              <1>     return  ;CF=NC => Not net
    18                              <2> %%_ret:
    19 000065C3 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    65                              <1> .net:
    66 000065C4 F9                  <1>     stc ;Set Net bit
    67                              <1>     return
    18                              <2> %%_ret:
    19 000065C5 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    68                              <1> 
    69                              <1> getDiskData:
    70                              <1> ;This function returns:
    71                              <1> ;al = sectors per cluster
    72                              <1> ;ah = media ID byte
    73                              <1> ;ebx = total clusters
    74                              <1> ;cx = bytes per sector
    75                              <1> ;edx = number of available clusters
    76                              <1> ;
    77                              <1> ;If CF=CY on exit, al contains the error code
    78 000065C6 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    79 000065CB 7308                <1>     jnc .physical
    80                              <1>     ;Beep a redir request out
    81 000065CD B80C110000          <1>     mov eax, 110Ch 
    82 000065D2 CD4F                <1>     int 4Fh
    83                              <1>     return
    18                              <2> %%_ret:
    19 000065D4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> .physical:
    85                              <1> ;Now we must lock the structures
    86 000065D5 C605(EFC30300)02    <1>     mov byte [errorLocus], eLocDsk
    87 000065DC E894040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    88 000065E1 E891FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    89 000065E6 721C                <1>     jc .exit
    90 000065E8 E8DEA7FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    91 000065ED 7215                <1>     jc .exit
    92 000065EF 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    93 000065F2 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    94 000065F4 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    95 000065F7 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    96 000065FA FFCB                <1>     dec ebx ;This is a count of clusters + 1 so subtract 1
    97 000065FC 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    98 00006600 8B5531              <1>     mov edx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Get # free clusters
    99 00006603 F8                  <1>     clc
   100                              <1> .exit:
   101 00006604 E876040000          <1>     call dosCrit1Exit
   102                              <1>     return
    18                              <2> %%_ret:
    19 00006609 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   103                              <1> 
   104                              <1> muxGetIntVector:    ;Int 4Fh AX=1202h
   105                              <1> ;Input: al = Interrupt number
   106                              <1> ;Output: rbx = Interrupt Vector
   107 0000660A 50                  <1>     push rax    ;Preserve rax, segment selector returned by call
   108 0000660B 52                  <1>     push rdx    ;Preserve rdx, Attribute Word returned by call
   109 0000660C 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   110 0000660E B807F00000          <1>     mov eax, 0F007h
   111 00006613 CD35                <1>     int 35h
   112 00006615 5A                  <1>     pop rdx
   113 00006616 58                  <1>     pop rax
   114                              <1>     return
    18                              <2> %%_ret:
    19 00006617 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   115                              <1> 
   116                              <1> getUserRegs:   ;Int 4Fh AX=1218h
   117                              <1> ;Returns ptr to user regs in rsi
   118 00006618 488B35(5FC40300)    <1>     mov rsi, qword [oldRSP]
   119                              <1>     return
    18                              <2> %%_ret:
    19 0000661F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   120                              <1> 
   121                              <1> walkDPBchain:
   122                              <1> ;Called with al = 0 based drive number
   123                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
   124 00006620 488B35(49C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
   125                              <1> .walk:
   126 00006627 4881FEFFFFFFFF      <1>     cmp rsi, -1
   127 0000662E 740A                <1>     je .exitBad
   128 00006630 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   129 00006632 7407                <1>     je .exit    ;Drive found
   130 00006634 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   131 00006638 EBED                <1>     jmp short .walk
   132                              <1> .exitBad:
   133 0000663A F9                  <1>     stc
   134                              <1> .exit:
   135                              <1>     return
    18                              <2> %%_ret:
    19 0000663B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   136                              <1> setDrive:   
   137                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
   138                              <1> ;Input: al = 1-based drive number
   139                              <1> ;Output: al = 0-based drive number
   140                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
   141                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
   142                              <1> ;            set.
   143 0000663C E864000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   144 00006641 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   145 00006643 56                  <1>     push rsi
   146 00006644 488B35(F2C60300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   147 0000664B 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   148 00006651 5E                  <1>     pop rsi
   149 00006652 7401                <1>     jz .exit
   150 00006654 F9                  <1>     stc
   151                              <1> .exit:
   152                              <1>     return
    18                              <2> %%_ret:
    19 00006655 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   153                              <1> 
   154                              <1> buildNewCDS:   ;Int 4Fh AX=121Fh
   155                              <1> ;Allows a redirector or subst/join to build a CDS
   156                              <1> ;Input drive letter must be above the reserved CDS entries for the system 
   157                              <1> ; volumes, that are made at system boot.
   158                              <1> ;Input: al = Drive Letter for drive
   159                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   160                              <1> ;Output: rdi = newly filled in workingCDS
   161                              <1> ;CF=NC => CDS valid and has a DPB
   162                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   163 00006656 50                  <1>     push rax
   164 00006657 2C40                <1>     sub al, "A"-1
   165 00006659 3A05(7DC00300)      <1>     cmp al, byte [numPhysVol]    ;al must be bigger than # of block drives
   166 0000665F 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   167 00006666 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   168 0000666C 58                  <1>     pop rax
   169 0000666D 7235                <1>     jb .exit    ;Exit with CF=CY
   170 0000666F 50                  <1>     push rax
   171 00006670 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   172 00006675 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   173 00006677 58                  <1>     pop rax
   174 00006678 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   175 0000667E C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   176 00006685 48C7475100000000    <1>     mov qword [rdi + cds.qReserved], 0   ;Optional redir signature field
   177 0000668D 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   178                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   179 00006693 50                  <1>     push rax
   180 00006694 56                  <1>     push rsi
   181 00006695 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   182 00006697 E884FFFFFF          <1>     call walkDPBchain
   183 0000669C 7204                <1>     jb .skipSettingDPB
   184 0000669E 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   185                              <1> .skipSettingDPB:
   186 000066A2 5E                  <1>     pop rsi
   187 000066A3 58                  <1>     pop rax
   188                              <1> .exit:
   189                              <1>     return
    18                              <2> %%_ret:
    19 000066A4 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   190                              <1> 
   191                              <1> getCDS:     ;Int 4Fh AX=1219h
   192                              <1> ;Gets the device DPB and saves it in the DOS variable
   193                              <1> ;This can be called to get CDS for network drives too!
   194                              <1> ;Input: al = 1 based drive number
   195                              <1> ;Sets workingCDS var with the CDS for the device. 
   196                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   197 000066A5 84C0                <1>     test al, al
   198 000066A7 7508                <1>     jnz .skip
   199 000066A9 8A05(16C40300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   200 000066AF FEC0                <1>     inc al
   201                              <1> .skip:
   202 000066B1 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   203 000066B3 56                  <1>     push rsi
   204 000066B4 C605(EFC30300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   205 000066BB F605(E2C60300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   206 000066C2 7423                <1>     jz .physDrive
   207                              <1>     ;Invokation via 21/5D00
   208 000066C4 50                  <1>     push rax
   209 000066C5 57                  <1>     push rdi
   210 000066C6 488D3D(5EC60300)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   211 000066CD 48893D(F2C60300)    <1>     mov qword [workingCDS], rdi ;Make it current
   212 000066D4 0441                <1>     add al, "A" ;Convert to a drive letter
   213 000066D6 E87BFFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   214 000066DB 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   215 000066E1 5F                  <1>     pop rdi
   216 000066E2 58                  <1>     pop rax
   217 000066E3 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   218 000066E5 EB17                <1>     jmp short .exitOk   ;All oki
   219                              <1> .physDrive:
   220 000066E7 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   221 000066EC 7208                <1>     jc .exitBad
   222 000066EE 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   223 000066F4 7508                <1>     jnz .exitOk ;Exit with flag cleared
   224                              <1>     ;Else Return to unknown error locus
   225                              <1> .exitBad:
   226 000066F6 C605(EFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   227                              <1> .exitBad1:
   228 000066FD F9                  <1>     stc
   229                              <1> .exitOk:
   230 000066FE 5E                  <1>     pop rsi
   231                              <1>     return
    18                              <2> %%_ret:
    19 000066FF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> 
   233                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
   234                              <1>     ;Gets the CDS for the current drive in al
   235                              <1>     ;Input: al = Drive number, 0 = A ...
   236                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   237                              <1>     ;        CF=CY => al not valid
   238 00006700 3A05(7EC00300)      <1>     cmp al, byte [lastdrvNum]
   239 00006706 7202                <1>     jb .ctn
   240 00006708 F9                  <1>     stc 
   241                              <1>     return
    18                              <2> %%_ret:
    19 00006709 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   242                              <1> .ctn:
   243 0000670A 50                  <1>     push rax
   244 0000670B 52                  <1>     push rdx
   245 0000670C 0FB6C0              <1>     movzx eax, al
   246 0000670F 48BE5B000000000000- <1>     mov rsi, cds_size
   246 00006718 00                  <1>
   247 00006719 31D2                <1>     xor edx, edx
   248 0000671B F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   249 0000671D 488B35(6BC00300)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   250 00006724 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   251 00006727 488935(F2C60300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   252 0000672E 5A                  <1>     pop rdx
   253 0000672F 58                  <1>     pop rax
   254 00006730 F8                  <1>     clc
   255                              <1>     return
    18                              <2> %%_ret:
    19 00006731 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   256                              <1> 
   257                              <1> 
   258                              <1> swapPathSeparator:  ;Int 4Fh, AX=1204h, Normalise Path Separator
   259                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   260                              <1> ;Input: AL = Char to normalise.
   261                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   262                              <1> ;If path separator, set ZF=ZE
   263 00006732 3C5C                <1>     cmp al, "\"
   264 00006734 7406                <1>     je .exit
   265 00006736 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   266 00006738 7502                <1>     jne .exit
   267 0000673A B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   268                              <1> .exit:
   269                              <1>     return
    18                              <2> %%_ret:
    19 0000673C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   270                              <1> 
   271                              <1> uppercaseCharAtPtr:
   272                              <1> ;Get the char pointed to by rsi and then fall
   273 0000673D AC                  <1>     lodsb
   274                              <1> uppercaseChar:      ;Int 4Fh, AX=1213h, Uppercase Char
   275                              <1> ;Convert a lowercase char to uppercase
   276                              <1> ; Leave alone uppercase chars and invalid chars
   277                              <1> ;Input: al = Char to convert to uppercase
   278                              <1> ;Output: al = Processed char
   279 0000673E 53                  <1>     push rbx
   280 0000673F 3C61                <1>     cmp al, "a"
   281 00006741 7214                <1>     jb .exit
   282 00006743 3C7A                <1>     cmp al, "z"
   283 00006745 7702                <1>     ja .checkExt
   284 00006747 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   285                              <1> .checkExt:
   286 00006749 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   287 0000674B 720A                <1>     jb .exit
   288 0000674D 2C80                <1>     sub al, 80h ;Turn into table offset
   289 0000674F 488B1DD898FFFF      <1>     mov rbx, qword [ctryTbl + countryStruc.mapaddr]    ;Get ptr to extAsciiTable
   290 00006756 D7                  <1>     xlatb   ;Get converted extended byte into al
   291                              <1> .exit:
   292 00006757 50                  <1>     push rax    ;Save al temporarily
   293 00006758 488D1DF29AFFFF      <1>     lea rbx, asciiCharProperties
   294 0000675F D7                  <1>     xlatb   ;Get the signature in al
   295 00006760 A801                <1>     test al, 1 ;test bit 0. Set ZF as appropriate
   296 00006762 58                  <1>     pop rax
   297 00006763 5B                  <1>     pop rbx
   298                              <1>     return
    18                              <2> %%_ret:
    19 00006764 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   299                              <1> 
   300                              <1> strlen2:    ;Int 4Fh, AX=1212h
   301                              <1> ;Entry point for Multiplex
   302 00006765 57                  <1>     push rdi
   303 00006766 4889F7              <1>     mov rdi, rsi
   304 00006769 E802000000          <1>     call strlen
   305 0000676E 5F                  <1>     pop rdi
   306                              <1>     return
    18                              <2> %%_ret:
    19 0000676F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   307                              <1> strlen: 
   308                              <1> ;Gets the length of a ASCIIZ string
   309                              <1> ;Input: rdi = Source buffer
   310                              <1> ;Output: ecx = Length of string
   311 00006770 50                  <1>     push rax
   312 00006771 57                  <1>     push rdi
   313 00006772 30C0                <1>     xor al, al
   314 00006774 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   315 00006776 FFC9                <1>     dec ecx ;rcx = -1
   316 00006778 F2AE                <1>     repne scasb
   317 0000677A F7D1                <1>     not ecx
   318 0000677C 5F                  <1>     pop rdi
   319 0000677D 58                  <1>     pop rax
   320                              <1>     return
    18                              <2> %%_ret:
    19 0000677E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   321                              <1> 
   322                              <1> strcpy:
   323                              <1> ;Copies a null terminated string from rsi to rdi
   324 0000677F AC                  <1>     lodsb
   325 00006780 AA                  <1>     stosb
   326 00006781 84C0                <1>     test al, al
   327                              <1>     retz
    46                              <2> cret z
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00006783 74F9                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   328 00006785 EBF8                <1>     jmp short strcpy
   329                              <1> 
   330                              <1> strcmp:
   331                              <1> ;Compares two ASCIIZ strings for equality.
   332                              <1> ;Input: rsi = First string
   333                              <1> ;       rdi = Second string
   334                              <1> ;       ecx = Number of bytes to compare
   335                              <1> ;Output: ZF=ZE => Equal
   336                              <1> ;        ZF=NZ => Not equal
   337 00006787 56                  <1>     push rsi
   338 00006788 57                  <1>     push rdi
   339 00006789 F3A6                <1>     repe cmpsb
   340 0000678B 5F                  <1>     pop rdi
   341 0000678C 5E                  <1>     pop rsi
   342                              <1>     return
    18                              <2> %%_ret:
    19 0000678D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   343                              <1> 
   344                              <1> 
   345                              <1> normaliseFileName:  ;Int 4Fh, AX=1211h
   346                              <1> ;Converts lowercase to uppercase and / to "\"
   347                              <1> ;Input: rsi = Source buffer
   348                              <1> ;       rdi = Buffer to place normalised path
   349 0000678E 50                  <1>     push rax
   350 0000678F 56                  <1>     push rsi
   351 00006790 57                  <1>     push rdi
   352                              <1> .scan:
   353 00006791 AC                  <1>     lodsb
   354 00006792 84C0                <1>     test al, al
   355 00006794 740D                <1>     jz .exit
   356 00006796 E897FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   357 0000679B E89EFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   358 000067A0 AA                  <1>     stosb
   359 000067A1 EBEE                <1>     jmp short .scan
   360                              <1> .exit:
   361 000067A3 5F                  <1>     pop rdi
   362 000067A4 5E                  <1>     pop rsi
   363 000067A5 58                  <1>     pop rax
   364                              <1>     return
    18                              <2> %%_ret:
    19 000067A6 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   365                              <1> 
   366                              <1> compareFileNames:   ;Int 4Fh, AX=121Eh
   367                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   368                              <1> ;Input: rsi = One ASCIIZ pathname
   369                              <1> ;       rdi = Second ASCIIZ pathname
   370                              <1> ;Return:
   371                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   372 000067A7 50                  <1>     push rax
   373 000067A8 56                  <1>     push rsi
   374 000067A9 57                  <1>     push rdi
   375                              <1> .scan:
   376 000067AA 8A06                <1>     mov al, byte [rsi]
   377 000067AC 84C0                <1>     test al, al
   378 000067AE 7424                <1>     jz .endOfString
   379 000067B0 8A27                <1>     mov ah, byte [rdi]
   380 000067B2 E87BFFFFFF          <1>     call swapPathSeparator  ;Convert al to \ if pathsep
   381 000067B7 7410                <1>     jz .pathseps
   382 000067B9 660D2020            <1>     or ax, 2020h    ;Convert both chars to lower case
   383 000067BD 38E0                <1>     cmp al, ah
   384 000067BF 7515                <1>     jnz .exit
   385                              <1> .nextChar:
   386 000067C1 48FFC6              <1>     inc rsi
   387 000067C4 48FFC7              <1>     inc rdi
   388 000067C7 EBE1                <1>     jmp short .scan
   389                              <1> .pathseps:
   390 000067C9 86E0                <1>     xchg ah, al
   391 000067CB E862FFFFFF          <1>     call swapPathSeparator  ;If ah is not a pathsep, then exit ZF=NZ
   392 000067D0 7504                <1>     jnz .exit
   393 000067D2 EBED                <1>     jmp short .nextChar ;Else get the next chars
   394                              <1> .endOfString:
   395 000067D4 84E4                <1>     test ah, ah ;If ah is also the end of the path, then ZF=ZE else ZF=NZ
   396                              <1> .exit:
   397 000067D6 5F                  <1>     pop rdi
   398 000067D7 5E                  <1>     pop rsi
   399 000067D8 58                  <1>     pop rax
   400                              <1>     return
    18                              <2> %%_ret:
    19 000067D9 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   401                              <1> checkPathspecOK:
   402                              <1> ;Input:
   403                              <1> ;rsi -> points to a path to verify if it is ok.
   404                              <1> ;Output:
   405                              <1> ;CF=NC => The path is totally clean and ok to use.
   406                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   407                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   408                              <1> ; and depending on method of invokation and caller, may be permissable.
   409                              <1> ;We accept lc and uc characters in this check function.
   410 000067DA 50                  <1>     push rax
   411 000067DB 53                  <1>     push rbx    ;Use rbx as the return flag status
   412 000067DC 56                  <1>     push rsi
   413 000067DD 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   414                              <1> 
   415                              <1>     ;Start by getting the length of the ASCIIZ string.
   416 000067DF 51                  <1>     push rcx
   417 000067E0 57                  <1>     push rdi
   418 000067E1 4889F7              <1>     mov rdi, rsi
   419 000067E4 E887FFFFFF          <1>     call strlen
   420 000067E9 81F940000000        <1>     cmp ecx, 64    ;Check
   421 000067EF 5F                  <1>     pop rdi
   422 000067F0 59                  <1>     pop rcx
   423 000067F1 776E                <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   424                              <1>     ;First we verify if our path is relative or canonical (absolute)
   425 000067F3 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   426 000067F6 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   427 000067FA 7416                <1>     je .netName
   428 000067FC 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   429 00006800 7410                <1>     je .netName
   430 00006802 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   431 00006805 7412                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   432                              <1>     ;Here if relative
   433 00006807 F605(E2C60300)FF    <1>     test byte [dosInvoke], -1
   434 0000680E 7551                <1>     jnz .badExit    ;If this is -1, server invoke.
   435 00006810 EB1F                <1>     jmp short .okToScan
   436                              <1> .netName:
   437 00006812 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the \    jmp short .okToScan
   439                              <1> .diskPath:
   440 00006819 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   441 00006820 F605(E2C60300)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   442 00006827 7408                <1>     jz .okToScan
   443 00006829 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   444 0000682A E803FFFFFF          <1>     call swapPathSeparator
   445 0000682F 7530                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   446                              <1> .okToScan:
   447 00006831 AC                  <1>     lodsb   
   448 00006832 84C0                <1>     test al, al ;End of path char?
   449 00006834 7430                <1>     jz .exit
   450 00006836 E8F7FEFFFF          <1>     call swapPathSeparator
   451 0000683B 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   452 0000683D 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   453 0000683F 7411                <1>     je .wcFound
   454 00006841 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   455 00006843 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   456                              <1>     ;Else we check that the char in al is an acceptable char
   457 00006845 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   458 00006847 74E8                <1>     je .okToScan
   459 00006849 E831000000          <1>     call checkCharValid
   460 0000684E 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   461 00006850 EBDF                <1>     jmp short .okToScan
   462                              <1> .wcFound:
   463 00006852 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   464 00006857 EBD8                <1>     jmp short .okToScan
   465                              <1> .wcCheck:
   466                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   467 00006859 F7C340000000        <1>     test ebx, 40h
   468 0000685F 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   469                              <1>     ;Else fall through in error
   470                              <1> .badExit:
   471 00006861 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   472                              <1> .exit:
   473 00006866 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   474 00006867 9D                  <1>     popfq
   475 00006868 5E                  <1>     pop rsi
   476 00006869 5B                  <1>     pop rbx
   477 0000686A 58                  <1>     pop rax
   478                              <1>     return
    18                              <2> %%_ret:
    19 0000686B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   479                              <1> 
   480                              <1> scanPathWC:
   481                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   482                              <1> ; even in the final path componant.
   483                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   484                              <1> ;Output: CF=NC => No wildcards present
   485                              <1> ;        CF=CY => Wildcards found
   486 0000686C 50                  <1>     push rax
   487 0000686D 56                  <1>     push rsi
   488                              <1> .scan:
   489 0000686E AC                  <1>     lodsb
   490 0000686F 84C0                <1>     test al, al
   491 00006871 7409                <1>     jz .exit
   492 00006873 3C3F                <1>     cmp al, "?"
   493 00006875 7404                <1>     je .wcFnd
   494 00006877 3C2A                <1>     cmp al, "*"
   495 00006879 75F3                <1>     jne .scan
   496                              <1> .wcFnd:
   497 0000687B F9                  <1>     stc
   498                              <1> .exit:
   499 0000687C 5E                  <1>     pop rsi
   500 0000687D 58                  <1>     pop rax
   501                              <1>     return
    18                              <2> %%_ret:
    19 0000687E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   502                              <1> 
   503                              <1> checkCharValid:
   504                              <1> ;If ZF=ZE => Invalid Char
   505                              <1> ;If ZF=NZ => Valid Char
   506 0000687F 51                  <1>     push rcx
   507 00006880 57                  <1>     push rdi
   508 00006881 B930000000          <1>     mov ecx, badDirNameCharL    ;Get table length
   509 00006886 488D3D1499FFFF      <1>     lea rdi, badDirNameChar ;Point to bad char table
   510 0000688D F2AE                <1>     repne scasb ;Scan. Stop when equal
   511 0000688F 5F                  <1>     pop rdi
   512 00006890 59                  <1>     pop rcx
   513                              <1>     return
    18                              <2> %%_ret:
    19 00006891 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   514                              <1> 
   515                              <1> 
   516                              <1> skipSpacesAndTabs:
   517                              <1> ;Input: rsi -> String 
   518                              <1> ;Output: rsi -> First non Space or Tab type char
   519 00006892 AC                  <1>     lodsb
   520 00006893 E815000000          <1>     call isCharSpaceType
   521 00006898 74F8                <1>     jz skipSpacesAndTabs
   522 0000689A 48FFCE              <1>     dec rsi
   523                              <1>     return
    18                              <2> %%_ret:
    19 0000689D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> isCharDelimType:
   526                              <1> ;Input: al = Char to check properties of
   527                              <1> ;Output:    ZF=NZ => Char not name delimiter
   528                              <1> ;           ZF=ZE => Char delimiter
   529 0000689E 50                  <1>     push rax
   530 0000689F 53                  <1>     push rbx
   531 000068A0 488D1DAA99FFFF      <1>     lea rbx, asciiCharProperties
   532 000068A7 D7                  <1>     xlatb
   533 000068A8 A802                <1>     test al, 2
   534 000068AA 5B                  <1>     pop rbx
   535 000068AB 58                  <1>     pop rax
   536                              <1>     return
    18                              <2> %%_ret:
    19 000068AC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   537                              <1> 
   538                              <1> isCharSpaceType:
   539                              <1> ;Input: al = Char to check properties of
   540                              <1> ;Output:    ZF=NZ => Char not Space or Tab
   541                              <1> ;           ZF=ZE => Char Space or Tab
   542 000068AD 50                  <1>     push rax
   543 000068AE 53                  <1>     push rbx
   544 000068AF 488D1D9B99FFFF      <1>     lea rbx, asciiCharProperties
   545 000068B6 D7                  <1>     xlatb
   546 000068B7 A804                <1>     test al, 4
   547 000068B9 5B                  <1>     pop rbx
   548 000068BA 58                  <1>     pop rax
   549                              <1>     return
    18                              <2> %%_ret:
    19 000068BB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   550                              <1> 
   551                              <1> compareFarPointers: ;Int 4Fh, AX = 1214h
   552                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   553                              <1> ;Input: rsi = One pointer
   554                              <1> ;       rdi = Second pointer
   555                              <1> ;Output: ZF=ZE if equal
   556                              <1> ;        ZF=NZ if not
   557 000068BC 4839FE              <1>     cmp rsi, rdi
   558                              <1>     return
    18                              <2> %%_ret:
    19 000068BF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   559                              <1> 
   560                              <1> checkPathNet:
   561                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   562                              <1> ;Output: ZF=ZE => Path is a net path
   563                              <1> ;        ZF=NZ => Path is not a net path
   564 000068C0 50                  <1>     push rax
   565 000068C1 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   566 000068C4 E869FEFFFF          <1>     call swapPathSeparator
   567 000068C9 7505                <1>     jnz .exit
   568 000068CB E862FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   569                              <1> .exit:
   570 000068D0 58                  <1>     pop rax
   571                              <1>     return
    18                              <2> %%_ret:
    19 000068D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   572                              <1> 
   573                              <1> getCharDevDriverPtr:
   574                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   575                              <1> ;Input: rax = Device Driver name (space padded)
   576                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   577 000068D2 488D3D(80C00300)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   578                              <1> .lp:
   579 000068D9 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   580                              <1>     rete    ;Exit if equal
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000068DD 74F2                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   581 000068DF 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   582 000068E2 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   583 000068E9 75EE                <1>     jne .lp ;If not loop
   584 000068EB F9                  <1>     stc ;Else bad exit
   585                              <1>     return
    18                              <2> %%_ret:
    19 000068EC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   586                              <1> 
    40                                  %include "./Source/Kernel/dosMain.asm"
    41                              <1> ;-----------------------------------:
    42                              <1> ;        Main Kernel dispatch       :
    43                              <1> ;            and routines           :
    44                              <1> ;-----------------------------------:
    45                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    46                              <1> ;ah = Function number, all other registers have various meanings
    47                              <1>  %if DEBUG
    48                              <1>     ;Entry function
    49                              <1>     debugEnterM
    50                              <1>     lea rbp, .l0000
    51                              <1>     call debPrintNullString
    52                              <1>     call debPrintFunctionName
    53                              <1>     jmp short .l0001
    54                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    55                              <1> .l0001:    
    56                              <1>     debugExitM
    57                              <1>     %endif
    58 000068ED FA                  <1>     cli ;Halt external interrupts
    59 000068EE FC                  <1>     cld ;Ensure all string ops occur in the right direction
    60 000068EF 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    61 000068F2 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    62                              <1>     ;Cherry pick functions
    63 000068F8 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    64 000068FB 722C                <1>     jb .fsbegin   ;If below skip these checks
    65 000068FD 0F847C020000        <1>     je ctrlBreakCheck
    66 00006903 80FC64              <1>     cmp ah, 64h
    67 00006906 0F84BC020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    68 0000690C 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    69 0000690E 80FC51              <1>     cmp ah, 51h
    70 00006911 0F849F020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    71 00006917 80FC62              <1>     cmp ah, 62h
    72 0000691A 0F849F020000        <1>     je getPSPaddr          ;Calls the above function
    73 00006920 80FC50              <1>     cmp ah, 50h
    74 00006923 0F8484020000        <1>     je setCurrProcessID
    75                              <1> .fsbegin:
    76 00006929 E830010000          <1>     call dosPushRegs ;Push the usual prologue registers
    77 0000692E 48891D(67C40300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    78 00006935 66C705(28C40300)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    78 0000693D 00                  <1>
    79 0000693E 488B05(5FC40300)    <1>     mov rax, qword [oldRSP]
    80 00006945 488905(4FC40300)    <1>     mov qword [oldoldRSP], rax
    81 0000694C FE05(EDC30300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    82 00006952 488925(5FC40300)    <1>     mov qword [oldRSP], rsp
    83                              <1> ;Network related variable resetting
    84 00006959 C605(E2C60300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    85                              <1> ;Here, we want to save oldRSP in the callers PSP
    86 00006960 803D(EDC30300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    87 00006967 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    88 00006969 488B05(04C40300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    89 00006970 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    90                              <1> .fsb1:
    91 00006974 58                  <1>     pop rax     ;Get old rax back
    92 00006975 50                  <1>     push rax    ;and push it back onto the stack
    93                              <1> .abortEP:
    94                              <1> .charFun0CEP:
    95                              <1> .serverEP:
    96 00006976 488D25(EACC0300)    <1>     lea rsp, critStakTop
    97 0000697D FB                  <1>     sti         ;Reenable interrupts
    98                              <1> 
    99 0000697E 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
   100 00006980 881D(78C40300)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
   101 00006986 C605(79C40300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   102 0000698D 881D(4EC40300)      <1>     mov byte [Int44Fail], bl    ;Clear the Int44 returned fail flag
   103 00006993 881D(6FC40300)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
   104                              <1> 
   105 00006999 50                  <1>     push rax        ;Save rax to use temporarily as table base 
   106 0000699A 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
   107 0000699C D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
   108 0000699E 488D053099FFFF      <1>     lea rax, kDispTbl
   109 000069A5 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   110 000069A8 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
   111 000069AC 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
   112 000069AF 58                  <1>     pop rax
   113                              <1> 
   114 000069B0 84E4                <1>     test ah, ah     ;Simple Terminate function?
   115 000069B2 741C                <1>     jz .fddiskOp
   116 000069B4 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   117 000069B7 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   118 000069B9 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   119 000069BC 7712                <1>     ja .fddiskOp
   120                              <1> ;Char operations here
   121 000069BE F605(ECC30300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   122 000069C5 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   123 000069C7 488D25(79D30300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   124 000069CE EB40                <1>     jmp short .fdGoToFunction
   125                              <1> .fddiskOp:
   126                              <1>     ;Disk operations go here
   127                              <1>     ;Save rax on entry to a disk funciton
   128 000069D0 488905(18C40300)    <1>     mov qword [oldRAX], rax
   129                              <1>     ;Clear up error info
   130 000069D7 C605(EFC30300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   131 000069DE C605(ECC30300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   132 000069E5 C605(EEC30300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   133                              <1> 
   134 000069EC 50                  <1>     push rax
   135 000069ED B482                <1>     mov ah, 82h ;Cancel all critical section!
   136 000069EF CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   137 000069F1 58                  <1>     pop rax
   138                              <1> 
   139 000069F2 C605(79C40300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   140 000069F9 488D25(B9D90300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   141 00006A00 F605(17C40300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   142 00006A07 7407                <1>     jz .fdGoToFunction
   143                              <1> ; HANDLE CTRL+BREAK HERE!
   144 00006A09 50                  <1>     push rax
   145 00006A0A E8FFBBFFFF          <1>     call checkBreak   ; Check for a ^C
   146 00006A0F 58                  <1>     pop rax
   147                              <1> .fdGoToFunction:
   148 00006A10 48871D(67C40300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   149                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   150                              <1>     ;
   151                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   152                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   153                              <1>     ;
   154                              <1>     %if DEBUG && REGS
   155                              <1>     ;Print stack if necessary function
   156                              <1>     debugEnterM
   157                              <1>     call debPrintDOSStack
   158                              <1>     debugExitM
   159                              <1>     %endif
   160 00006A17 FF15(67C40300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   161                              <1>     %if DEBUG
   162                              <1>     ;Entry function
   163                              <1>     debugEnterM
   164                              <1>     lea rbp, .l0002
   165                              <1>     call debPrintNullString
   166                              <1>     jmp short .l0003
   167                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   168                              <1> .l0003:    
   169                              <1>     debugExitM
   170                              <1>     %endif
   171                              <1>     %if DEBUG && REGS
   172                              <1>     ;Exit function
   173                              <1>     debugEnterM
   174                              <1>     call debPrintDOSStack
   175                              <1>     debugExitM
   176                              <1>     %endif
   177                              <1> .fdExit:
   178 00006A1D FA                  <1>     cli     ;Redisable interrupts
   179 00006A1E FE0D(EDC30300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   180 00006A24 488B25(5FC40300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   181 00006A2B 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   182 00006A2E 488B05(4FC40300)    <1>     mov rax, qword [oldoldRSP]
   183 00006A35 488905(5FC40300)    <1>     mov qword [oldRSP], rax
   184 00006A3C E806000000          <1>     call dosPopRegs  ;Pop the frame
   185 00006A41 48CF                <1>     iretq
   186                              <1> .fdExitBad:
   187 00006A43 30C0                <1>     xor al, al
   188                              <1> defaultIretq:
   189 00006A45 48CF                <1>     iretq
   190                              <1> dosPopRegs:
   191 00006A47 8F05(57C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   192 00006A4D 58                  <1>     pop rax
   193 00006A4E 5B                  <1>     pop rbx
   194 00006A4F 59                  <1>     pop rcx
   195 00006A50 5A                  <1>     pop rdx
   196 00006A51 5E                  <1>     pop rsi
   197 00006A52 5F                  <1>     pop rdi
   198 00006A53 5D                  <1>     pop rbp
   199 00006A54 4158                <1>     pop r8
   200 00006A56 4159                <1>     pop r9
   201 00006A58 FF25(57C40300)      <1>     jmp qword [dosReturn]
   202                              <1> dosPushRegs:
   203 00006A5E 8F05(57C40300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   204 00006A64 4151                <1>     push r9
   205 00006A66 4150                <1>     push r8
   206 00006A68 55                  <1>     push rbp
   207 00006A69 57                  <1>     push rdi
   208 00006A6A 56                  <1>     push rsi
   209 00006A6B 52                  <1>     push rdx
   210 00006A6C 51                  <1>     push rcx
   211 00006A6D 53                  <1>     push rbx
   212 00006A6E 50                  <1>     push rax
   213 00006A6F FF25(57C40300)      <1>     jmp qword [dosReturn]
   214                              <1> dosCrit1Enter:
   215                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    18                              <2> %%_ret:
    19 00006A75 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   216 00006A76 B801800000          <1>     mov eax, 8001h
   217 00006A7B CD4A                <1>     int 4ah
   218 00006A7D 58                  <1>     pop rax
   219                              <1>     return
    18                              <2> %%_ret:
    19 00006A7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   220                              <1> dosCrit1Exit:
   221                              <1>     return
    18                              <2> %%_ret:
    19 00006A7F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   222 00006A80 B801810000          <1>     mov eax, 8101h
   223 00006A85 CD4A                <1>     int 4ah
   224 00006A87 58                  <1>     pop rax
   225                              <1>     return
    18                              <2> %%_ret:
    19 00006A88 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   226                              <1> dosCrit2Enter:
   227                              <1>     return
    18                              <2> %%_ret:
    19 00006A89 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   228 00006A8A B802800000          <1>     mov eax, 8002h
   229 00006A8F CD4A                <1>     int 4ah
   230 00006A91 58                  <1>     pop rax
   231                              <1>     return
    18                              <2> %%_ret:
    19 00006A92 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   232                              <1> dosCrit2Exit:
   233                              <1>     return
    18                              <2> %%_ret:
    19 00006A93 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   234 00006A94 B802810000          <1>     mov eax, 8102h
   235 00006A99 CD4A                <1>     int 4ah
   236 00006A9B 58                  <1>     pop rax
   237                              <1>     return
    18                              <2> %%_ret:
    19 00006A9C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   238                              <1> 
   239                              <1> ;FCB specific returns
   240                              <1> fcbGoodExit:
   241                              <1> ;Preserve the carry flag on entry to DOS
   242 00006A9D 30C0                <1>     xor al, al ;Set return code al = 0
   243                              <1>     return
    18                              <2> %%_ret:
    19 00006A9F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   244                              <1> fcbErrExit:
   245                              <1> ;Preserve the carry flag on entry to DOS
   246                              <1> ;Input: eax = Extended error code to store in SDA 
   247 00006AA0 E836000000          <1>     call xLatError
   248 00006AA5 B0FF                <1>     mov al, -1  ;Set return code al = -1
   249 00006AA7 F9                  <1>     stc
   250                              <1>     return
    18                              <2> %%_ret:
    19 00006AA8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   251                              <1> 
   252                              <1> ;Handle and General DOS Returns
   253                              <1> ;All good exits destroy AT LEAST ax 
   254                              <1> extGoodExit2:
   255                              <1> ;Good exit with an extended return code in eax
   256 00006AA9 E86AFBFFFF          <1>     call getUserRegs
   257 00006AAE 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   258 00006AB0 EB08                <1>     jmp short extGoodExit.extGoodCommon
   259                              <1> extGoodExit:
   260                              <1> ;Good exit
   261                              <1> ;Return code in ax
   262 00006AB2 E861FBFFFF          <1>     call getUserRegs
   263 00006AB7 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   264                              <1> .extGoodCommon:
   265 00006ABA 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   266 00006ABE F8                  <1>     clc
   267                              <1>     return
    18                              <2> %%_ret:
    19 00006ABF C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   268                              <1> extErrExit:
   269                              <1> ;The extended error exit from DOS
   270                              <1> ;Jumped to with AL=Extended error code
   271                              <1> ;Can be called too.
   272                              <1> ;Input: al = Extended error code
   273                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   274                              <1> ;   Returns with: eax = xLat Error
   275                              <1> ;                 rsi = callerFrame
   276 00006AC0 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   277 00006AC3 E813000000          <1>     call xLatError
   278 00006AC8 E891000000          <1>     call checkFail
   279 00006ACD E846FBFFFF          <1>     call getUserRegs
   280 00006AD2 668906              <1>     mov word [rsi + callerFrame.rax], ax
   281 00006AD5 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   282 00006AD9 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   283                              <1>     return
    18                              <2> %%_ret:
    19 00006ADA C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   284                              <1> xLatError:
   285                              <1> ;Translates the error code given in ax and sets error code in the var
   286                              <1> ; Input: ax = Extended Error Code
   287                              <1> ; Output: ax = Potentially translated Error Code
   288                              <1> ;         [errorExCde] = Original Error Code
   289                              <1> ;Preserves all registers except ax
   290                              <1> ;AH is always returned as 0
   291 00006ADB 53                  <1>     push rbx
   292 00006ADC 51                  <1>     push rcx
   293 00006ADD 56                  <1>     push rsi
   294 00006ADE 668905(F0C30300)    <1>     mov word [errorExCde], ax
   295 00006AE5 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   296 00006AE7 488D35A395FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   297                              <1> .readEntry:
   298 00006AEE 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   299 00006AF0 3CFF                <1>     cmp al, -1
   300 00006AF2 741F                <1>     je .skipXlat
   301 00006AF4 3A05(19C40300)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   302 00006AFA 7408                <1>     je .found
   303                              <1>     ;Here, entry not found, goto next entry
   304 00006AFC 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   305 00006AFF 4801C6              <1>     add rsi, rax    ;Goto next entry
   306 00006B02 EBEA                <1>     jmp short .readEntry
   307                              <1> .found:
   308                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   309 00006B04 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   310                              <1> .mainSearch:
   311 00006B07 AC                  <1>     lodsb   ;Get one byte into al
   312 00006B08 38C3                <1>     cmp bl, al  ;Check against the error code
   313 00006B0A 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   314 00006B0C FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   315 00006B0E 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   316                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   317 00006B10 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   318                              <1> .skipXlat:
   319 00006B13 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   320 00006B15 5E                  <1>     pop rsi
   321 00006B16 59                  <1>     pop rcx
   322 00006B17 5B                  <1>     pop rbx
   323                              <1>     return
    18                              <2> %%_ret:
    19 00006B18 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   324                              <1> setErrorVars:   ;Int 4Fh, AX=1222h
   325                              <1> ;Looks up the error code in the variable and sets the other error vars
   326                              <1> ;Called with the lookup table in rsi
   327                              <1> ;All regs preserved
   328 00006B19 50                  <1>     push rax
   329 00006B1A 53                  <1>     push rbx
   330 00006B1B 51                  <1>     push rcx
   331 00006B1C 56                  <1>     push rsi
   332 00006B1D 0FB71D(F0C30300)    <1>     movzx ebx, word [errorExCde]
   333 00006B24 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   334                              <1> .readEntry:
   335 00006B29 AD                  <1>     lodsd   ;Read the dword table entry into eax
   336 00006B2A 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   337 00006B2F 7428                <1>     je .exit    
   338 00006B31 38D8                <1>     cmp al, bl  ;Compare the error codes
   339 00006B33 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   340 00006B35 D3E8                <1>     shr eax, cl
   341 00006B37 3CFF                <1>     cmp al, -1
   342 00006B39 7406                <1>     je .skipClass
   343 00006B3B 8805(F3C30300)      <1>     mov byte [errorClass], al
   344                              <1> .skipClass:
   345 00006B41 D3E8                <1>     shr eax, cl
   346 00006B43 3CFF                <1>     cmp al, -1
   347 00006B45 7406                <1>     je .skipAct
   348 00006B47 8805(F2C30300)      <1>     mov byte [errorAction], al
   349                              <1> .skipAct:
   350 00006B4D D3E8                <1>     shr eax, cl
   351 00006B4F 3CFF                <1>     cmp al, -1
   352 00006B51 7406                <1>     je .exit
   353 00006B53 8805(EFC30300)      <1>     mov byte [errorLocus], al
   354                              <1> .exit:
   355 00006B59 5E                  <1>     pop rsi
   356 00006B5A 59                  <1>     pop rcx
   357 00006B5B 5B                  <1>     pop rbx
   358 00006B5C 58                  <1>     pop rax
   359                              <1>     return
    18                              <2> %%_ret:
    19 00006B5D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   360                              <1> checkFail:
   361                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 44h
   362                              <1> ; and swaps the var error code if so
   363 00006B5E 803D(4EC40300)00    <1>     cmp byte [Int44Fail], 0
   364 00006B65 7509                <1>     jnz .skipFail
   365 00006B67 66C705(F0C30300)53- <1>     mov word [errorExCde], errFI44  ;Set error to "Fail on Int 44h"
   365 00006B6F 00                  <1>
   366                              <1> .skipFail:
   367 00006B70 56                  <1>     push rsi
   368 00006B71 488D35B595FFFF      <1>     lea rsi, extErrTbl
   369 00006B78 E89CFFFFFF          <1>     call setErrorVars
   370 00006B7D 5E                  <1>     pop rsi
   371                              <1>     return
    18                              <2> %%_ret:
    19 00006B7E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   372                              <1> ;========================================:
   373                              <1> ;      Reentrant Kernel Functions        :
   374                              <1> ;========================================:
   375                              <1> ctrlBreakCheck:    ;ah = 33h
   376 00006B7F 84C0                <1>     test al, al
   377 00006B81 7508                <1>     jnz .cbcget  ;Get the state or other functions
   378 00006B83 8A15(17C40300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   379 00006B89 48CF                <1>     iretq
   380                              <1> .cbcget:
   381 00006B8B 3C02                <1>     cmp al, 02h
   382 00006B8D 771A                <1>     ja .cbcBad
   383 00006B8F 740D                <1>     jz .cbcxchg ;Function 2
   384 00006B91 52                  <1>     push rdx
   385 00006B92 80E201              <1>     and dl, 1   ;Get only the bottom bit
   386 00006B95 8815(17C40300)      <1>     mov byte [breakFlag], dl    ;Set the state
   387 00006B9B 5A                  <1>     pop rdx
   388 00006B9C 48CF                <1>     iretq
   389                              <1> .cbcxchg:
   390 00006B9E 80E201              <1>     and dl, 1
   391 00006BA1 8615(17C40300)      <1>     xchg byte [breakFlag], dl
   392 00006BA7 48CF                <1>     iretq
   393                              <1> .cbcBad:
   394 00006BA9 B0FF                <1>     mov al, -1
   395 00006BAB 48CF                <1>     iretq
   396                              <1> 
   397                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   398 00006BAD 48891D(04C40300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   399 00006BB4 48CF                <1>     iretq
   400                              <1> 
   401                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   402 00006BB6 488B15(04C40300)    <1>     mov rdx, qword [currentPSP]
   403 00006BBD 48CF                <1>     iretq
   404                              <1> 
   405                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   406 00006BBF 488B15(04C40300)    <1>     mov rdx, qword [currentPSP]
   407 00006BC6 48CF                <1>     iretq
   408                              <1> 
   409                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   410 00006BC8 8805(C2D90300)      <1>     mov byte [lookahead], al    
   411 00006BCE 48CF                <1>     iretq
   412                              <1> 
   413                              <1> ;========================================:
   414                              <1> ;            Kernel Functions            :
   415                              <1> ;========================================:
   416                              <1> diskReset:         ;ah = 0Dh
   417                              <1> ;Flush all dirty buffers to disk
   418 00006BD0 E8A0FEFFFF          <1>     call dosCrit1Enter
   419 00006BD5 488B3D(63C00300)    <1>     mov rdi, qword [bufHeadPtr]
   420                              <1> .drCheckBuffer:
   421 00006BDC F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   422 00006BE0 7407                <1>     jz .drGotoNextBuffer
   423                              <1> .drFlushBuffer:
   424 00006BE2 E8F39CFFFF          <1>     call flushAndFreeBuffer    ;Called with rdi = buffer header
   425 00006BE7 720C                <1>     jc .drExit
   426                              <1> .drGotoNextBuffer:
   427 00006BE9 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   428 00006BEC 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   429 00006BF3 75E7                <1>     jne .drCheckBuffer
   430                              <1> .drExit:
   431 00006BF5 E885FEFFFF          <1>     call dosCrit1Exit
   432 00006BFA B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   433 00006BFF CD4F                <1>     int 4fh
   434                              <1>     return
    18                              <2> %%_ret:
    19 00006C01 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   435                              <1> 
   436                              <1> selectDisk:        ;ah = 0Eh
   437                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   438 00006C02 88D0                <1>     mov al, dl
   439 00006C04 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   440 00006C06 E831FAFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   441 00006C0B 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   442 00006C0D 8805(16C40300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   443                              <1> .skipSettingCurrent:
   444 00006C13 0FB605(7EC00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   445                              <1>     return
    18                              <2> %%_ret:
    19 00006C1A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   448 00006C1B 8A05(16C40300)      <1>     mov al, byte [currentDrv]
   449                              <1>     return
    18                              <2> %%_ret:
    19 00006C21 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   450                              <1> 
   451                              <1> FATinfoDefault:    ;ah = 1Bh
   452 00006C22 30D2                <1>     xor dl, dl
   453                              <1> FATinfoDevice:     ;ah = 1Ch
   454                              <1> ;Input: dl = 1 based drive number
   455                              <1> ;Output:
   456                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   457                              <1> ;cx = bytes per sector
   458                              <1> ;edx = total number of clusters
   459                              <1> ;rbx = Ptr to media ID byte
   460 00006C24 88D0                <1>     mov al, dl  ;Move drive number into al
   461 00006C26 E87AFAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   462 00006C2B 7307                <1>     jnc .fidCDSFound
   463 00006C2D B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   464 00006C32 EB2E                <1>     jmp short .error 
   465                              <1> .fidCDSFound:
   466 00006C34 E88DF9FFFF          <1>     call getDiskData
   467 00006C39 7227                <1>     jc .error
   468                              <1> ;Now we have that:
   469                              <1> ;al = sectors per cluster
   470                              <1> ;ah = media ID byte
   471                              <1> ;ebx = total clusters
   472                              <1> ;cx = bytes per sector
   473                              <1> ;edx = number of available clusters
   474 00006C3B E8D8F9FFFF          <1>     call getUserRegs
   475 00006C40 8825(76C70300)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   476 00006C46 30E4                <1>     xor ah, ah
   477 00006C48 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   478 00006C4B 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   479 00006C4F 488D1D(76C70300)    <1>     lea rbx, mediaByte
   480 00006C56 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   481 00006C5A 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   482                              <1> .badExit:
   483 00006C5E 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   484                              <1>     return
    18                              <2> %%_ret:
    19 00006C61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   485                              <1> .error:
   486 00006C62 E859FEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   487 00006C67 66B8FFFF            <1>     mov ax, -1
   488 00006C6B EBF1                <1>     jmp short .badExit
   489                              <1> 
   490                              <1> setIntVector:      ;ah = 25h
   491                              <1> ;Called with:
   492                              <1> ;   rdx = Pointer to interrupt handler
   493                              <1> ;   al = Interrupt number
   494 00006C6D 50                  <1>     push rax    ;Preserve all registers in call
   495 00006C6E 53                  <1>     push rbx
   496 00006C6F 51                  <1>     push rcx
   497 00006C70 52                  <1>     push rdx
   498 00006C71 56                  <1>     push rsi
   499 00006C72 55                  <1>     push rbp
   500 00006C73 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   501 00006C75 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   502                              <1> ;First call to get default BIOS segement selector and attribute word
   503 00006C7B 88C3                <1>     mov bl, al  ;Set interrupt number 
   504 00006C7D B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   505 00006C82 CD35                <1>     int 35h
   506 00006C84 E88FF9FFFF          <1>     call getUserRegs
   507 00006C89 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   508 00006C8D 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   509 00006C8F 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   510                              <1> ;dx preserves the attribute word
   511 00006C91 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   512 00006C96 CD35                <1>     int 35h
   513 00006C98 5D                  <1>     pop rbp
   514 00006C99 5E                  <1>     pop rsi
   515 00006C9A 5A                  <1>     pop rdx
   516 00006C9B 59                  <1>     pop rcx
   517 00006C9C 5B                  <1>     pop rbx
   518 00006C9D 58                  <1>     pop rax
   519                              <1>     return
    18                              <2> %%_ret:
    19 00006C9E C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   522 00006C9F 8805(B5C30300)      <1>     mov byte [verifyFlag], al
   523 00006CA5 8025(B5C30300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   524                              <1>     return
    18                              <2> %%_ret:
    19 00006CAC C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   525                              <1> getDOSversion:     ;ah = 30h
   526 00006CAD E866F9FFFF          <1>     call getUserRegs
   527 00006CB2 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   528 00006CB4 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   529 00006CB7 668B054293FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   530 00006CBE 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   531                              <1>     return
    18                              <2> %%_ret:
    19 00006CC1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   534                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   535 00006CC2 30D2                <1>     xor dl, dl
   536                              <1> getDeviceDPBptr:   ;ah = 32h
   537                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   538                              <1> ;On exit: rbx = DPB pointer
   539 00006CC4 88D0                <1>     mov al, dl
   540 00006CC6 E8DAF9FFFF          <1>     call getCDS
   541 00006CCB 722C                <1>     jc .bad
   542 00006CCD 488B3D(F2C60300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   543 00006CD4 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   544 00006CDA 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   545                              <1>     ;Here ONLY if accessing critical Disk data structures
   546 00006CDC E894FDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   547 00006CE1 E891F6FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   548 00006CE6 E894FDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   549 00006CEB 720C                <1>     jc .bad
   550 00006CED E826F9FFFF          <1>     call getUserRegs
   551 00006CF2 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   552 00006CF6 30C0                <1>     xor al, al
   553                              <1>     return
    18                              <2> %%_ret:
    19 00006CF8 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   554                              <1> .bad:
   555 00006CF9 B0FF                <1>     mov al, -1
   556                              <1>     return
    18                              <2> %%_ret:
    19 00006CFB C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   557                              <1> 
   558                              <1> getInDOSflagPtr:   ;ah = 34h
   559 00006CFC 488D15(EDC30300)    <1>     lea rdx, inDOS
   560 00006D03 E810F9FFFF          <1>     call getUserRegs
   561 00006D08 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   562                              <1>     return
    18                              <2> %%_ret:
    19 00006D0C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   563                              <1> 
   564                              <1> getIntVector:      ;ah = 35h
   565                              <1> ;Called with:
   566                              <1> ;   al = Interrupt Number
   567                              <1> ;Returns:
   568                              <1> ;   rbx = Pointer to interrupt handler
   569 00006D0D E8F8F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   570 00006D12 E801F9FFFF          <1>     call getUserRegs
   571 00006D17 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   572 00006D1B 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   573                              <1>     return
    18                              <2> %%_ret:
    19 00006D1D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   574                              <1> 
   575                              <1> getDiskFreeSpace:  ;ah = 36h
   576                              <1> ;Input: Drive number in dl (0 = Current)
   577                              <1> ;Output:    ax = sectors per cluster
   578                              <1> ;           ebx = number of free clusters
   579                              <1> ;           cx = bytes per sector
   580                              <1> ;           edx = total clusters on drive
   581 00006D1E 88D0                <1>     mov al, dl
   582 00006D20 E880F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   583 00006D25 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   584                              <1> ;Else, we at an error.
   585                              <1> ;Simply return with CY set and error code in al with extended error info
   586 00006D27 B80F000000          <1>     mov eax, errBadDrv
   587 00006D2C E88FFDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   588                              <1>     ;extErrExit sets rsi to caller regs
   589 00006D31 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   590                              <1>     return
    18                              <2> %%_ret:
    19 00006D36 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   591                              <1> .gdfsCDSFound:
   592 00006D37 E88AF8FFFF          <1>     call getDiskData
   593 00006D3C 7219                <1>     jc .error
   594                              <1> ;Now we have that:
   595                              <1> ;al = sectors per cluster
   596                              <1> ;ah = media ID byte
   597                              <1> ;ebx = total clusters
   598                              <1> ;cx = bytes per sector
   599                              <1> ;edx = number of available clusters
   600 00006D3E E8D5F8FFFF          <1>     call getUserRegs
   601 00006D43 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   602 00006D45 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   603 00006D48 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   604 00006D4C 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   605 00006D4F 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   606                              <1> .badExit:
   607 00006D53 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   608                              <1>     return
    18                              <2> %%_ret:
    19 00006D56 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   609                              <1> .error:
   610 00006D57 E864FDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   611 00006D5C 66B8FFFF            <1>     mov ax, -1
   612 00006D60 EBF1                <1>     jmp short .badExit
   613                              <1> 
   614                              <1> 
   615                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   616 00006D62 31C0                <1>     xor eax, eax
   617 00006D64 668705(14C40300)    <1>     xchg ax, word [errorLevel]
   618 00006D6B E942FDFFFF          <1>     jmp extGoodExit
   619                              <1> 
   620                              <1> getSysVarsPtr:     ;ah = 52h
   621 00006D70 488D15(41C00300)    <1>     lea rdx, sysVarsPtr
   622 00006D77 E89CF8FFFF          <1>     call getUserRegs
   623 00006D7C 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   624                              <1>     return
    18                              <2> %%_ret:
    19 00006D80 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   625                              <1> 
   626                              <1> 
   627                              <1> ;AH = 53h - CREATE DPB
   628                              <1> createDPB:         ;generates a DPB from a given BPB
   629                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   630                              <1> ;This is done so that the other fields of the DPB can be recycled
   631                              <1> ;Input: rsi = ptr to the BPB
   632                              <1> ;       rbp = ptr to the DPB
   633                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   634                              <1> ;bMediaDescriptor
   635 00006D81 8A4615              <1>     mov al, byte [rsi + bpb.media]
   636 00006D84 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   637                              <1> ;dFirstFreeCluster
   638 00006D87 C7452D00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   639                              <1> ;dNumberOfFreeClusters
   640 00006D8E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   641                              <1> ;wBytesPerSector
   642 00006D95 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   643 00006D99 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   644                              <1> ;bMaxSectorInCluster
   645 00006D9D 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   646 00006DA0 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   647 00006DA2 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   648                              <1> ;bSectorsPerClusterShift
   649 00006DA5 FEC0                <1>     inc al
   650 00006DA7 30C9                <1>     xor cl, cl
   651                              <1> .cd2:
   652 00006DA9 D0E8                <1>     shr al, 1
   653 00006DAB 7404                <1>     jz .cd3
   654 00006DAD FEC1                <1>     inc cl
   655 00006DAF EBF8                <1>     jmp short .cd2
   656                              <1> .cd3:
   657 00006DB1 884D05              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   658                              <1> ;wFAToffset, number of reserved sectors in partition
   659 00006DB4 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   660 00006DB8 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   661                              <1> ;bNumberOfFATs
   662 00006DBC 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   663 00006DBF 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   664                              <1> ;wNumberRootDirEntries
   665                              <1> ;Gets the number of 32 byte entries in the root directory
   666                              <1> ;Only valid for FAT 12/16
   667 00006DC2 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   668 00006DC6 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   669                              <1> ;dFATlength, get the FAT length
   670 00006DCA 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   671 00006DCE 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   672 00006DD1 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   673 00006DD3 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   674 00006DD6 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   675                              <1> ;Complex cases below...
   676                              <1> ;dClusterHeapOffset, start sector of the data area
   677 00006DD9 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   678 00006DDD 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   679 00006DE0 85C0                <1>     test eax, eax
   680 00006DE2 0F44C3              <1>     cmovz eax, ebx
   681                              <1> ;eax = FATsz
   682 00006DE5 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   683 00006DE9 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   684 00006DEC 85DB                <1>     test ebx, ebx
   685 00006DEE 0F44D9              <1>     cmovz ebx, ecx 
   686                              <1> ;ebx = TotSec
   687 00006DF1 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   688 00006DF4 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   689                              <1> .cd4:
   690 00006DF6 01C2                <1>     add edx, eax
   691 00006DF8 FEC9                <1>     dec cl
   692 00006DFA 75FA                <1>     jnz .cd4
   693 00006DFC 89D0                <1>     mov eax, edx    ;Store product in eax
   694 00006DFE 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   695 00006E02 01D0                <1>     add eax, edx
   696                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   697 00006E04 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   698 00006E08 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   699 00006E0B 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   700 00006E0F 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   701 00006E10 89D0                <1>     mov eax, edx
   702 00006E12 31D2                <1>     xor edx, edx
   703 00006E14 F7F1                <1>     div ecx
   704 00006E16 89C2                <1>     mov edx, eax
   705 00006E18 58                  <1>     pop rax
   706 00006E19 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   707                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   708                              <1>     ;aka eax = Start sector of the data area in volume
   709 00006E1B 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   710                              <1> ;dClusterCount
   711 00006E1E 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   712 00006E20 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   713 00006E22 31D2                <1>     xor edx, edx
   714 00006E24 BB01000000          <1>     mov ebx, 1
   715 00006E29 8A4D05              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   716 00006E2C D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   717 00006E2E F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   718 00006E30 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   719 00006E32 89450F              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   720                              <1> ;dFirstUnitOfRootDir
   721 00006E35 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   722 00006E3A 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   723 00006E3D 770F                <1>     ja .cd5
   724                              <1>     ;Else, we need to find the first sector of the root directory
   725                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   726 00006E3F 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   727 00006E43 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   728                              <1> .cd51:
   729 00006E47 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   730 00006E4A FFC9                <1>     dec ecx
   731 00006E4C 75F9                <1>     jnz .cd51
   732                              <1> .cd5:
   733 00006E4E 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   734                              <1> ;Exit epilogue
   735 00006E51 488B1D(5FC40300)    <1>     mov rbx, qword [oldRSP]
   736 00006E58 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   737                              <1>     %if DEBUG && DPBINFO
   738                              <1>     ;Print DPB 
   739                              <1>     debugEnterM
   740                              <1>     push rbp
   741                              <1>     lea rbp, .l0000
   742                              <1>     call debPrintNullString
   743                              <1>     pop rbp
   744                              <1>     call debDPBBPBptr
   745                              <1>     call debMakeDebuggerRespond
   746                              <1>     jmp short .l0001
   747                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   748                              <1> .l0001:
   749                              <1>     debugExitM
   750                              <1>     %endif
   751                              <1>     return
    18                              <2> %%_ret:
    19 00006E5A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   752                              <1> 
   753                              <1> getVerifySetting:  ;ah = 54h
   754 00006E5B 8A05(B5C30300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   755                              <1>     return
    18                              <2> %%_ret:
    19 00006E61 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   756                              <1> 
   757                              <1> getExtendedError:  ;ah = 59h
   758 00006E62 E8B1F7FFFF          <1>     call getUserRegs
   759 00006E67 668B05(F0C30300)    <1>     mov ax, word [errorExCde]
   760 00006E6E 8A2D(EFC30300)      <1>     mov ch, byte [errorLocus]
   761 00006E74 8A3D(F3C30300)      <1>     mov bh, byte [errorClass]
   762 00006E7A 8A1D(F2C30300)      <1>     mov bl, byte [errorAction]
   763 00006E80 668906              <1>     mov word [rsi + callerFrame.rax], ax
   764 00006E83 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   765 00006E87 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   766                              <1>     return
    18                              <2> %%_ret:
    19 00006E8A C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   767                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   768                              <1> noOp:
   769                              <1>     return
    18                              <2> %%_ret:
    19 00006E8B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    41                                  %include "./Source/Kernel/Net/server.asm"
    42                              <1> ;Network functions here
    43                              <1> 
    44                              <1> dosServer:  ;ah = 5Dh
    45                              <1> ;Dispatches the server function in al. Many of these are share hooks.
    46                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
    47                              <1> ;   rdx = Pointer to DPL
    48 00006E8C 3C07                <1>     cmp al, 07h
    49 00006E8E 7204                <1>     jb .skip
    50 00006E90 3C09                <1>     cmp al, 09h
    51 00006E92 7619                <1>     jbe .skip2
    52                              <1> .skip:
    53 00006E94 4889D6              <1>     mov rsi, rdx
    54 00006E97 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    55 00006E9B 66891D(28C40300)    <1>     mov word [machineNum], bx
    56 00006EA2 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    57 00006EA6 48891D(20C40300)    <1>     mov qword [serverPSP], rbx
    58                              <1> .skip2:
    59 00006EAD 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    60 00006EB4 53                  <1>     push rbx
    61 00006EB5 488B1D(6CDA0300)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    62 00006EBC 53                  <1>     push rbx    ;Push the table ptr on the stack
    63 00006EBD 50                  <1>     push rax    ;Push al onto stack as a qword
    64 00006EBE E856010000          <1>     call serverFunctionSelect
    65 00006EC3 B801000000          <1>     mov eax, eLocUnk
    66 00006EC8 8805(EFC30300)      <1>     mov byte [errorLocus], al
    67 00006ECE E9EDFBFFFF          <1>     jmp extErrExit
    68                              <1> 
    69                              <1> serverDispatch: ;AX=5D00h
    70                              <1> ;Input: rsi points to the DOS parameter list
    71 00006ED3 58                  <1>     pop rax ;Pop additional return ptr off the stack
    72 00006ED4 56                  <1>     push rsi    ;Put dpl ptr in rdi
    73 00006ED5 5F                  <1>     pop rdi
    74 00006ED6 E83DF7FFFF          <1>     call getUserRegs
    75 00006EDB 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    76 00006EDE 56                  <1>     push rsi
    77 00006EDF B906000000          <1>     mov ecx, 6
    78 00006EE4 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    79 00006EE7 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    80 00006EEE 48A5                <1>     movsq   ;Transfer r8...
    81 00006EF0 48A5                <1>     movsq   ;... and r9
    82 00006EF2 5E                  <1>     pop rsi
    83 00006EF3 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    84 00006EF6 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    85 00006EFA 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    86 00006EFE 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    87 00006F02 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    88 00006F06 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    89 00006F0A 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    90 00006F0E 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    91 00006F12 48891D(67C40300)    <1>     mov qword [oldRBX], rbx
    92 00006F19 C605(E2C60300)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    93 00006F20 E951FAFFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    94                              <1> 
    95                              <1> commitAllFilesForProcess:   ;AX=5D01h
    96                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    97                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    98                              <1> ;Thus we check the first two bytes of the current PSP to be CD 40h
    99                              <1> ;If so, we proceed, otherwise, fail with AccDen
   100 00006F25 488B1D(04C40300)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
   101 00006F2C 66813BCD40          <1>     cmp word [rbx], 40CDh
   102 00006F31 740A                <1>     je .validTask
   103 00006F33 B805000000          <1>     mov eax, errAccDen
   104 00006F38 E983FBFFFF          <1>     jmp extErrExit
   105                              <1> .validTask:
   106 00006F3D 31DB                <1>     xor ebx, ebx    ;Start from file 0
   107 00006F3F E831FBFFFF          <1>     call dosCrit1Enter
   108                              <1> .mainLoop:
   109                              <1>     ;Now loop through the JFT of the current task committing the files
   110 00006F44 53                  <1>     push rbx
   111 00006F45 E8DCD9FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
   112 00006F4A 7227                <1>     jc .exit
   113 00006F4C 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
   114 00006F51 741B                <1>     je .gotoNextFile
   115 00006F53 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
   116 00006F58 7414                <1>     je .gotoNextFile
   117 00006F5A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
   118 00006F60 750C                <1>     jnz .gotoNextFile
   119 00006F62 48893D(12C70300)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
   120 00006F69 E8F6C7FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
   121                              <1>     ;If it succeeded, great, cool also if not, keep going!
   122                              <1> .gotoNextFile:
   123 00006F6E 5B                  <1>     pop rbx
   124 00006F6F FFC3                <1>     inc ebx
   125 00006F71 EBD1                <1>     jmp short .mainLoop
   126                              <1> .exit:
   127 00006F73 E807FBFFFF          <1>     call dosCrit1Exit
   128 00006F78 5B                  <1>     pop rbx ;Align stack
   129 00006F79 E934FBFFFF          <1>     jmp extGoodExit
   130                              <1> 
   131                              <1> closeFilesByName:           ;AX=5D02h
   132 00006F7E FF15(CCC00300)      <1>     call qword [closeNameShare]
   133                              <1> .shareExit: ;Use this symbol if we need a decision to be made
   134                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
   135 00006F84 0F8236FBFFFF        <1>     jc extErrExit
   136                              <1> .shareExitGood:
   137 00006F8A E923FBFFFF          <1>     jmp extGoodExit
   138                              <1> 
   139                              <1> closeFilesByComputer:       ;AX=5D03h
   140 00006F8F FF15(BCC00300)      <1>     call qword [closeCompShare]
   141 00006F95 EBED                <1>     jmp short closeFilesByName.shareExit
   142                              <1> 
   143                              <1> closeFilesByProcess:        ;AX=5D04h
   144 00006F97 FF15(C4C00300)      <1>     call qword [closeTaskShare]
   145 00006F9D EBE5                <1>     jmp short closeFilesByName.shareExit
   146                              <1> 
   147                              <1> getOpenFileListEntry:       ;AX=5D05h
   148 00006F9F FF15(ECC00300)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   149 00006FA5 72DD                <1>     jc closeFilesByName.shareExitBad
   150 00006FA7 E86CF6FFFF          <1>     call getUserRegs
   151 00006FAC 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   152 00006FB0 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   153                              <1> .shareExit:    ;rcx must be zero extended however to use this
   154 00006FB4 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   155                              <1> .shareExit2:
   156 00006FB8 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   157                              <1> 
   158                              <1> getSDAData:                 ;AX=5D06h
   159                              <1> ;Returns:
   160                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   161                              <1> ;   (critical error flag is first byte) (see #01687)
   162                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   163                              <1> ;   rdx = size in bytes of area which must always be swapped
   164 00006FBA 488D3D(ECC30300)    <1>     lea rdi, sda
   165 00006FC1 48B980160000000000- <1>     mov rcx, sdaLen
   165 00006FCA 00                  <1>
   166 00006FCB 48BA54160000000000- <1>     mov rdx, sdaMSLen
   166 00006FD4 00                  <1>
   167 00006FD5 E83EF6FFFF          <1>     call getUserRegs
   168 00006FDA 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   169 00006FDE 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   170 00006FE2 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   171                              <1> 
   172                              <1> printerRedir:               ;AX=5D07/8/9h
   173 00006FE4 50                  <1>     push rax
   174 00006FE5 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   175 00006FEA CD4F                <1>     int 4Fh
   176 00006FEC 5B                  <1>     pop rbx
   177 00006FED 7295                <1>     jc short closeFilesByName.shareExitBad
   178 00006FEF EB99                <1>     jmp short  closeFilesByName.shareExitGood
   179                              <1> 
   180                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   181                              <1> ;Input:
   182                              <1> ;   rsi -> DPL
   183 00006FF1 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   184 00006FF3 668905(F0C30300)    <1>     mov word [errorExCde], ax
   185 00006FFA 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Get rdi as a full ptr
   186 00006FFE 488905(F4C30300)    <1>     mov qword [xInt44RDI], rax
   187 00007005 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   188 00007008 668905(F2C30300)    <1>     mov word [errorAction], ax  ;Store action and class together
   189 0000700F 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   190 00007012 8825(EFC30300)      <1>     mov byte [errorLocus], ah
   191                              <1>     return  ;Return to the function ptr on the stack (the return function)
    18                              <2> %%_ret:
    19 00007018 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   192                              <1> 
   193                              <1> serverFunctionSelect:
   194                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   195                              <1> ;Second parameter is table address, (BP + 3*8)
   196 00007019 55                  <1>     push rbp
   197 0000701A 4889E5              <1>     mov rbp, rsp
   198 0000701D 53                  <1>     push rbx
   199 0000701E 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   200 00007022 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   201 00007025 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   202 00007028 731E                <1>     jnb .argumentTooBig
   203 0000702A 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx zeroextended
   204 0000702E C1E302              <1>     shl ebx, 2  ;Convert to word offset
   205 00007031 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   206 00007033 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   207 00007036 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   208 0000703A 48895D10            <1>     mov qword [rbp + 2*8], rbx  ;Store this address as the return address
   209 0000703E 5B                  <1>     pop rbx
   210 0000703F 5D                  <1>     pop rbp
   211 00007040 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   212                              <1>     return
    18                              <2> %%_ret:
    19 00007047 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   213                              <1> .argumentTooBig:
   214 00007048 5B                  <1>     pop rbx
   215 00007049 5D                  <1>     pop rbp
   216 0000704A C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   217                              <1> 
   218                              <1> netServices:   ;ah = 5Eh, do nothing
   219                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   220 0000704D 3C01                <1>     cmp al, 01
   221 0000704F 7214                <1>     jb .getName
   222 00007051 7437                <1>     jz .setName
   223 00007053 3C06                <1>     cmp al, 6
   224 00007055 724C                <1>     jb .netRedir
   225 00007057 C605(EFC30300)01    <1>     mov byte [errorLocus], eLocUnk
   226 0000705E B001                <1>     mov al, errInvFnc
   227                              <1> .badExit:
   228 00007060 E95BFAFFFF          <1>     jmp extErrExit
   229                              <1> .getName:
   230                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   231                              <1> ;Output: CF=NC => Success.
   232                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   233                              <1> ;        CL = NetBIOS number for the machine
   234                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   235                              <1> ;        CF=CY => Failure
   236                              <1> ;        AX = Errorcode
   237 00007065 4889D7              <1>     mov rdi, rdx
   238 00007068 0FB70D(23C00300)    <1>     movzx ecx, word [validNetNam]
   239 0000706F E8A4F5FFFF          <1>     call getUserRegs
   240 00007074 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   241 00007078 488D35(BBC30300)    <1>     lea rsi, machineName
   242                              <1> .nameCmn:
   243 0000707F 31C0                <1>     xor eax, eax
   244 00007081 48A5                <1>     movsq
   245 00007083 A5                  <1>     movsd
   246 00007084 66A5                <1>     movsw
   247 00007086 A4                  <1>     movsb
   248 00007087 AA                  <1>     stosb   ;Store terminating null
   249 00007088 EB24                <1>     jmp short .exitGood
   250                              <1> .setName:
   251                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   252                              <1> ;       CH = 0 => Mark name as invalid
   253                              <1> ;         != 0 => Mark name as valid
   254                              <1> ;       CL = NetBIOS number for the name
   255 0000708A 66890D(23C00300)    <1>     mov word [validNetNam], cx
   256 00007091 4889D6              <1>     mov rsi, rdx
   257 00007094 FE05(BAC30300)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   258 0000709A 488D3D(BBC30300)    <1>     lea rdi, machineName
   259 000070A1 EBDC                <1>     jmp short .nameCmn
   260                              <1> 
   261                              <1> .netRedir:
   262 000070A3 50                  <1>     push rax
   263 000070A4 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   264 000070A9 CD4F                <1>     int 4Fh
   265 000070AB 5A                  <1>     pop rdx
   266 000070AC 72B2                <1>     jc .badExit
   267                              <1> .exitGood:
   268 000070AE E9FFF9FFFF          <1>     jmp extGoodExit
   269                              <1> 
   270                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   271                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   272 000070B3 80FC07              <1>     cmp ah, 07h
   273 000070B6 7419                <1>     je .driveAction
   274 000070B8 80FC08              <1>     cmp ah, 08h
   275 000070BB 7414                <1>     je .driveAction
   276                              <1>     ;Else, use redirector to process request
   277 000070BD 50                  <1>     push rax
   278 000070BE B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   279 000070C3 CD4F                <1>     int 4Fh
   280 000070C5 5B                  <1>     pop rbx
   281                              <1> .badExit:
   282 000070C6 0F82F4F9FFFF        <1>     jc extErrExit
   283                              <1> .goodExit:
   284 000070CC E9E1F9FFFF          <1>     jmp extGoodExit
   285                              <1> .driveAction:
   286                              <1> ;dl must have valid 0-based drive number
   287 000070D1 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   288 000070D3 E828F6FFFF          <1>     call getCDSforDrive
   289 000070D8 72EC                <1>     jc short .badExit
   290                              <1>     ;rsi points to CDS
   291 000070DA 80EA07              <1>     sub dl, 7
   292 000070DD 7408                <1>     jz .enable
   293 000070DF 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   294 000070E5 EBE5                <1>     jmp short .goodExit
   295                              <1> .enable:
   296 000070E7 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   297 000070ED EBDD                <1>     jmp short .goodExit
    42                                  %include "./Source/Kernel/Net/multiplx.asm"
    43                              <1> ;Default multiplexer. Current only installed function is ah=12h
    44                              <1> ;If a ah=11h request is made, we return CF=CY (as intended)
    45                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    46                              <1> ; stack before the interrupt is called. This word is always read from the
    47                              <1> ; stack, but the stack is not rejiggled to remove it
    48                              <1> 
    49                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    50 000070EF 80FC12              <1>     cmp ah, 12h
    51 000070F2 7546                <1>     jne .exitBad       ;Exit if not for us
    52 000070F4 3C26                <1>     cmp al, mDispTblL / 2
    53 000070F6 7342                <1>     jae .exitBad   ;If above or equal, exit
    54 000070F8 53                  <1>     push rbx
    55 000070F9 51                  <1>     push rcx
    56 000070FA 488D1DA892FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    57 00007101 53                  <1>     push rbx
    58 00007102 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    59 00007105 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Pick the word pushed on the stack before call 
    60 0000710A D1E1                <1>     shl ecx, 1   ;multiply by 2
    61 0000710C 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    62 00007110 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    63 00007111 4801CB              <1>     add rbx, rcx
    64 00007114 48891D(67C40300)    <1>     mov qword [oldRBX], rbx
    65 0000711B 59                  <1>     pop rcx
    66 0000711C 5B                  <1>     pop rbx
    67 0000711D FF15(67C40300)      <1>     call qword [oldRBX]
    68 00007123 48891D(67C40300)    <1>     mov qword [oldRBX], rbx
    69 0000712A 9C                  <1>     pushfq  ;Move flags on the stack
    70 0000712B 5B                  <1>     pop rbx
    71 0000712C 48895C2410          <1>     mov qword [rsp + 8*2], rbx  ;Replace entry flags with our own flags
    72 00007131 488B1D(67C40300)    <1>     mov rbx, qword [oldRBX]
    73 00007138 48CF                <1>     iretq
    74                              <1> .exitBad:
    75 0000713A 804C241001          <1>     or byte [rsp + 8h*2], 1
    76 0000713F 48CF                <1>     iretq
    77                              <1> multiplexTest:
    78 00007141 B0FF                <1>     mov al, -1
    79 00007143 C3                  <1>     ret
    80                              <1> getDosDataSeg:  ;Int 4Fh, AX=1203h
    81                              <1> ;Return: r8 = Dos Data Segment Pointer
    82 00007144 4C8D05(00C00300)    <1>     lea r8, dosDataArea
    83                              <1>     return
    18                              <2> %%_ret:
    19 0000714B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    84                              <1> 
    43                                  %include "./Source/Kernel/Net/share.asm"
    44                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
    45                              <1> 
    46                              <1> ;Generic Share Hooks and Wrappers
    47                              <1> shareBadFunction:
    48 0000714C B801000000          <1>     mov eax, errInvFnc
    49 00007151 668905(F0C30300)    <1>     mov word [errorExCde], ax
    50 00007158 F9                  <1>     stc
    51                              <1>     return
    18                              <2> %%_ret:
    19 00007159 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    52                              <1> badDfltShareHook:
    53                              <1> ;Return CF=CY
    54 0000715A E8EDFFFFFF          <1>     call shareBadFunction
    55                              <1>     return
    18                              <2> %%_ret:
    19 0000715F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    56                              <1> goodDfltShareHook:
    57                              <1> ;Return CF=NC
    58 00007160 F8                  <1>     clc
    59                              <1>     return
    18                              <2> %%_ret:
    19 00007161 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    60                              <1> openShareCallWrapper:
    61 00007162 FF15(ACC00300)      <1>     call qword [openShare]
    62                              <1>     return
    18                              <2> %%_ret:
    19 00007168 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    63                              <1> closeShareCallWrapper:
    64 00007169 FF15(B4C00300)      <1>     call qword [closeShare]
    65                              <1>     return
    18                              <2> %%_ret:
    19 0000716F C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    66                              <1> 
    67                              <1> retryShareIODelay:
    68                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    69                              <1> ;Called only in readDiskFile and writeDiskFile
    70                              <1> ;Input: rdi -> SFT for current file
    71                              <1> ;       ecx = Length of region from current position in file
    72                              <1> ;Output: If CF=NC, not locked
    73                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    74 00007170 0FB71D(25C00300)    <1>     movzx ebx, word [shareCount]
    75                              <1> .mainLoop:      
    76 00007177 53                  <1>     push rbx
    77 00007178 FF15(E4C00300)      <1>     call qword [checkFileLockShare]
    78 0000717E 5B                  <1>     pop rbx
    79                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000717F 73EE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    80 00007181 E806000000          <1>     call shareRetryCountdown
    81 00007186 FFCB                <1>     dec ebx
    82 00007188 75ED                <1>     jnz .mainLoop
    83 0000718A F9                  <1>     stc
    84                              <1>     return
    18                              <2> %%_ret:
    19 0000718B C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> shareRetryCountdown:
    87                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    88                              <1> ;Does the retry wait IFF the request was not a server request.
    89 0000718C F605(E2C60300)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    90                              <1>     retnz   ;Exit by default if it is a server call
    50                              <2> cret nz
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00007193 75F6                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
    91 00007195 51                  <1>     push rcx
    92 00007196 0FB70D(27C00300)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    93 0000719D 67E30D              <1>     jecxz .exit
    94                              <1> .loopBody:
    95 000071A0 51                  <1>     push rcx
    96 000071A1 31C9                <1>     xor ecx, ecx
    97                              <1> .mainLoop:
    98 000071A3 66FFC9              <1>     dec cx
    99 000071A6 75FB                <1>     jnz .mainLoop
   100 000071A8 59                  <1>     pop rcx
   101 000071A9 FFC9                <1>     dec ecx
   102 000071AB 75F3                <1>     jnz .loopBody
   103                              <1> .exit:
   104 000071AD 59                  <1>     pop rcx
   105                              <1>     return
    18                              <2> %%_ret:
    19 000071AE C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   106                              <1> 
   107                              <1> shareCheckOpenViolation:
   108                              <1> ;Input: rdi -> Locally complete SFT we are opening
   109 000071AF 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   110 000071B5 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   111 000071B7 50                  <1>     push rax
   112 000071B8 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   113 000071BC 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   114 000071C1 58                  <1>     pop rax
   115 000071C2 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   116                              <1> .fcbQuirk:
   117 000071C4 E83B000000          <1>     call shareLockViolationCriticalError
   118                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 000071C9 73E3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   119                              <1> .notInCompatMode:
   120 000071CB B820000000          <1>     mov eax, errShrVio
   121 000071D0 F9                  <1>     stc ;Set the flag for error
   122                              <1>     return
    18                              <2> %%_ret:
    19 000071D1 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   123                              <1> 
   124                              <1> 
   125                              <1> 
   126                              <1> shareFile:
   127                              <1> ;Once the SFT has been made, here we allocate resoureces within share to
   128                              <1> ; share the file, if it is possible to do so!
   129                              <1> ; This is done by calling the open wrapper
   130 000071D2 51                  <1>     push rcx
   131                              <1> .reloadCounter:
   132 000071D3 0FB70D(25C00300)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
   133                              <1> .keepLooping:
   134 000071DA 488B3D(12C70300)    <1>     mov rdi, qword [currentSFT]
   135 000071E1 31C0                <1>     xor eax, eax
   136 000071E3 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
   137 000071E9 51                  <1>     push rcx
   138 000071EA E873FFFFFF          <1>     call openShareCallWrapper
   139 000071EF 59                  <1>     pop rcx
   140 000071F0 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
   141 000071F2 E895FFFFFF          <1>     call shareRetryCountdown
   142 000071F7 FFC9                <1>     dec ecx
   143 000071F9 75DF                <1>     jnz .keepLooping
   144 000071FB E827000000          <1>     call shareCriticalError
   145 00007200 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   146                              <1> .exit:
   147 00007202 59                  <1>     pop rcx
   148                              <1>     return
    18                              <2> %%_ret:
    19 00007203 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   149                              <1> 
   150                              <1> shareLockViolationCriticalError:
   151                              <1> ;This does NOT force rwFlag to 0.
   152 00007204 57                  <1>     push rdi
   153 00007205 C605(4CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   154 0000720C B821000000          <1>     mov eax, errLokVio
   155 00007211 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
   156                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   157 00007218 E8C4EAFFFF          <1>     call fullcriticalErrorInvoke
   158 0000721D 5F                  <1>     pop rdi
   159 0000721E 3D01000000          <1>     cmp eax, critRetry
   160                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00007223 74DE                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   161 00007225 F9                  <1>     stc
   162                              <1>     return
    18                              <2> %%_ret:
    19 00007226 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> shareCriticalError: ;Int 4Fh AX=120Ah
   165                              <1> ;Used for share Read/Write requests
   166 00007227 57                  <1>     push rdi
   167 00007228 C605(E0C60300)00    <1>     mov byte [rwFlag], 0    ;Default to read
   168 0000722F C605(4CC40300)18    <1>     mov byte [Int44bitfld], critRetryOK | critFailOK
   169 00007236 488B2D(EAC60300)    <1>     mov rbp, qword [workingDPB]
   170 0000723D BF01000000          <1>     mov edi, 1
   171                              <1>     ;Figure out what goes here once we figure out the full crit error invoke
   172 00007242 E89AEAFFFF          <1>     call fullcriticalErrorInvoke
   173 00007247 5F                  <1>     pop rdi
   174 00007248 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   175                              <1>     rete
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 0000724A 74DA                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   176 0000724C F9                  <1>     stc
   177                              <1>     return
    18                              <2> %%_ret:
    19 0000724D C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   178                              <1> 
   179                              <1> shareReadWriteViolationError:
   180                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
   181 0000724E 3C0F                <1>     cmp al, drvBadDskChnge
   182 00007250 7510                <1>     jne .doReq
   183 00007252 50                  <1>     push rax    ;IF a bad disk change, drop the volume descriptor ptr here
   184 00007253 488B05(C7C40300)    <1>     mov rax, qword [primReqHdr + ioReqPkt.desptr]   ;Get volume descriptor ptr
   185 0000725A 488905(F4C30300)    <1>     mov qword [xInt44RDI], rax
   186 00007261 58                  <1>     pop rax
   187                              <1> .doReq:
   188 00007262 E87AEAFFFF          <1>     call fullcriticalErrorInvoke
   189                              <1>     return
    18                              <2> %%_ret:
    19 00007267 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   190                              <1> 
   191                              <1> shareCheckWriteLockViolation:
   192 00007268 C605(E0C60300)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   193 0000726F EB07                <1>     jmp short shareCheckReadLockViolation.common
   194                              <1> shareCheckReadLockViolation:
   195 00007271 C605(E0C60300)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   196                              <1> .common:
   197                              <1> ;Input:
   198                              <1> ;rdi -> SFT for the file we are reading
   199 00007278 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   200 0000727E 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   201 00007280 50                  <1>     push rax
   202 00007281 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   203 00007285 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   204 0000728A 58                  <1>     pop rax
   205 0000728B 7507                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   206                              <1> .fcbQuirk:
   207 0000728D E872FFFFFF          <1>     call shareLockViolationCriticalError
   208                              <1>     retnc
    66                              <2> cret nc
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00007292 73D3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   209                              <1> .notInCompatMode:
   210 00007294 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   211 00007296 B821000000          <1>     mov eax, errLokVio
   212 0000729B F9                  <1>     stc ;Set the flag for error
   213                              <1>     return
    18                              <2> %%_ret:
    19 0000729C C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
    44                                  %include "./Source/Drivers/drvData.asm"
    45                              <1> ;-----------------------------------:
    46                              <1> ;          Driver routines          :
    47                              <1> ;-----------------------------------:
    48                              <1> drivers:
    49                              <1> conHdr:
    50 0000729D [BF72000000000000]  <1>     dq auxHdr
    51 000072A5 1380                <1>     dw 08013h
    52 000072A7 [3D74000000000000]  <1>     dq commonStrat
    53 000072AF [4C74000000000000]  <1>     dq conDriver
    54 000072B7 434F4E2020202020    <1>     db "CON     "
    55                              <1> auxHdr:
    56 000072BF [E172000000000000]  <1>     dq prnHdr
    57 000072C7 0080                <1>     dw 08000h
    58 000072C9 [3D74000000000000]  <1>     dq commonStrat
    59 000072D1 [0177000000000000]  <1>     dq com1Intr
    60 000072D9 4155582020202020    <1>     db "AUX     "
    61                              <1> prnHdr:
    62 000072E1 [0373000000000000]  <1>     dq clkHdr
    63 000072E9 40A0                <1>     dw 0A040h
    64 000072EB [4574000000000000]  <1>     dq nulStrat
    65 000072F3 [4B74000000000000]  <1>     dq nulIntr
    66 000072FB 50524E2020202020    <1>     db "PRN     "
    67                              <1> clkHdr:
    68 00007303 [2573000000000000]  <1>     dq msdHdr
    69 0000730B 0880                <1>     dw 08008h
    70 0000730D [3D74000000000000]  <1>     dq commonStrat
    71 00007315 [9975000000000000]  <1>     dq clkDriver
    72 0000731D 434C4F434B242020    <1>     db "CLOCK$  "
    73                              <1> msdHdr:
    74 00007325 [4773000000000000]  <1>     dq com1Hdr
    75 0000732D 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    76 0000732F [3D74000000000000]  <1>     dq commonStrat
    77 00007337 [8578000000000000]  <1>     dq msdDriver
    78 0000733F 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    79                              <1> com1Hdr:
    80 00007347 [6973000000000000]  <1>     dq com2Hdr
    81 0000734F 0080                <1>     dw 08000h
    82 00007351 [3D74000000000000]  <1>     dq commonStrat
    83 00007359 [0177000000000000]  <1>     dq com1Intr
    84 00007361 434F4D3120202020    <1>     db "COM1    "
    85                              <1> com2Hdr:
    86 00007369 [8B73000000000000]  <1>     dq com3Hdr
    87 00007371 0080                <1>     dw 08000h
    88 00007373 [3D74000000000000]  <1>     dq commonStrat
    89 0000737B [0A77000000000000]  <1>     dq com2Intr
    90 00007383 434F4D3220202020    <1>     db "COM2    "
    91                              <1> com3Hdr:
    92 0000738B [AD73000000000000]  <1>     dq com4Hdr
    93 00007393 0080                <1>     dw 08000h
    94 00007395 [3D74000000000000]  <1>     dq commonStrat
    95 0000739D [1377000000000000]  <1>     dq com3Intr
    96 000073A5 434F4D3320202020    <1>     db "COM3    "
    97                              <1> com4Hdr:
    98 000073AD [CF73000000000000]  <1>     dq lpt1Hdr
    99 000073B5 0080                <1>     dw 08000h
   100 000073B7 [3D74000000000000]  <1>     dq commonStrat
   101 000073BF [1C77000000000000]  <1>     dq com4Intr
   102 000073C7 434F4D3420202020    <1>     db "COM4    "
   103                              <1> lpt1Hdr:
   104 000073CF [F173000000000000]  <1>     dq lpt2Hdr
   105 000073D7 40A0                <1>     dw 0A040h
   106 000073D9 [4574000000000000]  <1>     dq nulStrat
   107 000073E1 [4B74000000000000]  <1>     dq nulIntr
   108 000073E9 4C50543120202020    <1>     db "LPT1    "
   109                              <1> lpt2Hdr:
   110 000073F1 [1374000000000000]  <1>     dq lpt3Hdr
   111 000073F9 40A0                <1>     dw 0A040h
   112 000073FB [4574000000000000]  <1>     dq nulStrat
   113 00007403 [4B74000000000000]  <1>     dq nulIntr
   114 0000740B 4C50543220202020    <1>     db "LPT2    "
   115                              <1> lpt3Hdr:
   116 00007413 FFFFFFFFFFFFFFFF    <1>     dq -1
   117 0000741B 40A0                <1>     dw 0A040h
   118 0000741D [4574000000000000]  <1>     dq nulStrat
   119 00007425 [4B74000000000000]  <1>     dq nulIntr
   120 0000742D 4C50543320202020    <1>     dq "LPT3    "
   121 00007435 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    45                                  %include "./Source/Drivers/charDrv.asm"
    46                              <1> commonStrat:
    47                              <1> ;DOS calls this function with rbx=Ptr to request header
    48 0000743D 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    49 00007444 C3                  <1>     ret
    50                              <1> nulStrat:
    51 00007445 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    52                              <1> nulIntr:
    53 0000744B C3                  <1>     ret
    54                              <1> conDriver:
    55 0000744C 50                  <1>     push rax
    56 0000744D 53                  <1>     push rbx
    57 0000744E 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    58 00007455 B003                <1>     mov al, 03h ;Unknown Command
    59 00007457 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    60 0000745B 7739                <1>     ja .conWriteErrorCode ;If yes, error!
    61                              <1> 
    62 0000745D 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    63 00007460 3C04                <1>     cmp al, 4
    64 00007462 7441                <1>     jz .conRead
    65 00007464 3C05                <1>     cmp al, 5
    66 00007466 0F847F000000        <1>     jz .conNondestructiveRead
    67 0000746C 3C06                <1>     cmp al, 6
    68 0000746E 0F84A8000000        <1>     jz .conInputStatus
    69 00007474 3C07                <1>     cmp al, 7
    70 00007476 0F84B0000000        <1>     jz .conFlushInputBuffers
    71 0000747C 3C08                <1>     cmp al, 8
    72 0000747E 0F84CA000000        <1>     jz .conWrite
    73 00007484 3C09                <1>     cmp al, 9
    74 00007486 0F84C2000000        <1>     jz .conWrite
    75 0000748C 3C0A                <1>     cmp al, 0Ah
    76 0000748E 0F84E3000000        <1>     jz .conOutputStatus
    77 00007494 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    78                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    79 00007496 B480                <1>     mov ah, 80h ;Set error bit
    80 00007498 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    81                              <1> .conExit:
    82 0000749C 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    83 000074A2 5B                  <1>     pop rbx
    84 000074A3 58                  <1>     pop rax
    85 000074A4 C3                  <1>     ret
    86                              <1> .conRead:    ;Function 4
    87 000074A5 B005                <1>     mov al, 05h ;Bad request structure length?
    88 000074A7 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    89 000074AA 75EA                <1>     jne .conWriteErrorCode
    90                              <1> 
    91 000074AC 57                  <1>     push rdi
    92 000074AD 51                  <1>     push rcx
    93 000074AE 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    94 000074B2 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    95                              <1> .cre1:
    96 000074B4 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    97 000074B7 741C                <1>     je .cre2
    98 000074B9 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    99 000074C0 751A                <1>     jnz .cre3   ;No, get the buffer value
   100 000074C2 31C0                <1>     xor eax, eax
   101 000074C4 CD36                <1>     int 36h
   102                              <1> .cre11:
   103 000074C6 AA                  <1>     stosb
   104 000074C7 84C0                <1>     test al, al ;Was the ascii code stored 0?
   105 000074C9 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
   106 000074CB 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
   107                              <1> .cre12:
   108 000074D1 FFC1                <1>     inc ecx ;Inc chars stored in buffer
   109 000074D3 EBDF                <1>     jmp short .cre1
   110                              <1> .cre2:
   111 000074D5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   112 000074D8 59                  <1>     pop rcx
   113 000074D9 5F                  <1>     pop rdi
   114 000074DA EBC0                <1>     jmp short .conExit
   115                              <1> .cre3:
   116 000074DC 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   117 000074E2 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   118 000074E9 EBDB                <1>     jmp short .cre11
   119                              <1> 
   120                              <1> .conNondestructiveRead:  ;Function 5
   121 000074EB B005                <1>     mov al, 05h ;Bad request structure length?
   122 000074ED 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   123 000074F0 75A4                <1>     jne .conWriteErrorCode
   124 000074F2 803D8E00000000      <1>     cmp byte [.conBuf], 0
   125 000074F9 7519                <1>     jnz .cnr2
   126 000074FB B401                <1>     mov ah, 01h     ;Get key if exists
   127 000074FD CD36                <1>     int 36h
   128 000074FF 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   129                              <1>     ;Keystroke available
   130                              <1> .cnr0:
   131 00007501 88430D              <1>     mov byte [rbx + ndInNoWaitPkt.retbyt], al   ;Move char in al
   132 00007504 E993FFFFFF          <1>     jmp .conExit
   133                              <1> .cnr1: ;No keystroke available
   134 00007509 66C743030002        <1>     mov word [rbx + ndInNoWaitPkt.status], 0200h   ;Set busy bit
   135 0000750F E988FFFFFF          <1>     jmp .conExit
   136                              <1> .cnr2:
   137 00007514 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   138 0000751A EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   139                              <1> 
   140                              <1> .conInputStatus:         ;Function 6
   141 0000751C B005                <1>     mov al, 05h ;Bad request structure length?
   142 0000751E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   143 00007521 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   144 00007527 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   145                              <1> 
   146                              <1> .conFlushInputBuffers:   ;Function 7
   147 0000752C B005                <1>     mov al, 05h ;Bad request structure length?
   148 0000752E 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   149 00007531 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   150 00007537 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   151                              <1> .cfib0:
   152 0000753E B401                <1>     mov ah, 01      ;Get buffer status
   153 00007540 CD36                <1>     int 36h
   154 00007542 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   155 00007548 30E4                <1>     xor ah, ah
   156 0000754A CD36                <1>     int 36h ;Read key to flush from buffer
   157 0000754C EBF0                <1>     jmp short .cfib0
   158                              <1> 
   159                              <1> .conWrite:   ;Function 8 and 9
   160 0000754E B005                <1>     mov al, 05h ;Bad request structure length?
   161 00007550 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   162 00007553 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   163                              <1> 
   164 00007559 56                  <1>     push rsi
   165 0000755A 51                  <1>     push rcx
   166 0000755B 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   167 0000755F 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   168                              <1> .cw1: 
   169 00007561 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   170 00007564 7407                <1>     je .cw2
   171 00007566 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   172 00007567 CD49                <1>     int 49h ;Fast print char
   173 00007569 FFC1                <1>     inc ecx
   174 0000756B EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   175                              <1> .cw2:
   176 0000756D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   177 00007570 59                  <1>     pop rcx
   178 00007571 5E                  <1>     pop rsi
   179 00007572 E925FFFFFF          <1>     jmp .conExit
   180                              <1> .conOutputStatus:   ;Function 0Ah
   181 00007577 B005                <1>     mov al, 05h ;Bad request structure length?
   182 00007579 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   183 0000757C 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   184 00007582 E915FFFFFF          <1>     jmp .conExit
   185                              <1> 
   186 00007587 00                  <1> .conBuf db 0    ;Single byte buffer
   187                              <1> fastOutput:         ;This CON driver supports Int 49h
   188                              <1> ;Called with char to transfer in al
   189 00007588 50                  <1>     push rax
   190 00007589 B40E                <1>     mov ah, 0Eh
   191 0000758B CD30                <1>     int 30h
   192 0000758D 58                  <1>     pop rax
   193 0000758E 48CF                <1>     iretq
   194                              <1> ctrlBreak:
   195                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   196 00007590 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   197 00007597 48CF                <1>     iretq
   198                              <1> 
   199                              <1> clkDriver:
   200 00007599 50                  <1>     push rax
   201 0000759A 53                  <1>     push rbx
   202 0000759B 51                  <1>     push rcx
   203 0000759C 52                  <1>     push rdx
   204 0000759D 56                  <1>     push rsi
   205 0000759E 55                  <1>     push rbp
   206 0000759F 488B1D8FFEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   207 000075A6 B003                <1>     mov al, 03h ;Unknown Command
   208 000075A8 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   209 000075AC 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   210                              <1> 
   211 000075AE 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   212 000075B1 3C04                <1>     cmp al, 04h
   213 000075B3 7437                <1>     jz .clkRead
   214 000075B5 3C06                <1>     cmp al, 06h
   215 000075B7 0F8494000000        <1>     jz .clkInputStatus
   216 000075BD 3C07                <1>     cmp al, 07h
   217 000075BF 0F8498000000        <1>     jz .clkFlushInputBuffers
   218 000075C5 3C08                <1>     cmp al, 08h
   219 000075C7 0F84A0000000        <1>     jz .clkWrite
   220 000075CD 3C09                <1>     cmp al, 09h
   221 000075CF 0F8498000000        <1>     jz .clkWrite
   222 000075D5 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   223                              <1> .clkNotFunctioning:
   224 000075D7 B002                <1>     mov al, 02h ;Device not ready error
   225                              <1> .clkWriteErrorCode:
   226 000075D9 B480                <1>     mov ah, 80h ;Set error bit
   227 000075DB 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   228                              <1> .clkExit:
   229 000075DF 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   230 000075E5 5D                  <1>     pop rbp
   231 000075E6 5E                  <1>     pop rsi
   232 000075E7 5A                  <1>     pop rdx
   233 000075E8 59                  <1>     pop rcx
   234 000075E9 5B                  <1>     pop rbx
   235 000075EA 58                  <1>     pop rax
   236 000075EB C3                  <1>     ret
   237                              <1> 
   238                              <1> .clkRead:           ;Function 4
   239 000075EC B005                <1>     mov al, 05h ;Bad request structure length?
   240 000075EE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   241 000075F1 75E6                <1>     jne .clkWriteErrorCode
   242                              <1> 
   243 000075F3 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   244 000075F6 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   245 000075FA 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   246 00007601 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   247 00007605 30E4                <1>     xor ah, ah
   248 00007607 CD3A                <1>     int 3Ah         ;Read the system timer
   249 00007609 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   250 0000760B 740D                <1>     jz .clkr1       ;Nope, now just time 
   251 0000760D 30E4                <1>     xor ah, ah
   252                              <1>     ;This works as al should keep count of the # of days passed since last read
   253 0000760F 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   254 00007613 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   255                              <1> .clkr1:
   256 0000761A 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   257 0000761D 0FB7D2              <1>     movzx edx, dx
   258 00007620 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   259 00007622 89D0                <1>     mov eax, edx
   260 00007624 31D2                <1>     xor edx, edx
   261 00007626 89D8                <1>     mov eax, ebx
   262 00007628 B944040000          <1>     mov ecx, 1092   
   263 0000762D F7F1                <1>     div ecx
   264 0000762F 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   265 00007632 89D0                <1>     mov eax, edx    ;Get remainder in eax
   266 00007634 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   267 00007638 31D2                <1>     xor edx, edx
   268 0000763A B95B000000          <1>     mov ecx, 91 ;5*18.2
   269 0000763F F7F1                <1>     div ecx
   270 00007641 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   271 00007644 89D0                <1>     mov eax, edx    ;Get remainder in eax
   272                              <1>     ;lea eax, dword [eax + 4*eax]
   273                              <1>     ;add eax, edx    ;Essentially multiply by 6
   274 00007646 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   275 00007649 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   276 0000764C E98EFFFFFF          <1>     jmp .clkExit
   277                              <1> 
   278                              <1> .clkInputStatus:    ;Function 6
   279                              <1> ;Always return ready
   280 00007651 B005                <1>     mov al, 05h ;Bad request structure length?
   281 00007653 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   282 00007656 7581                <1>     jne .clkWriteErrorCode
   283 00007658 E982FFFFFF          <1>     jmp .clkExit
   284                              <1> .clkFlushInputBuffers:  ;Function 7
   285                              <1> ;Always return done immediately
   286 0000765D B005                <1>     mov al, 05h ;Bad request structure length?
   287 0000765F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   288 00007662 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   289 00007668 E972FFFFFF          <1>     jmp .clkExit
   290                              <1> 
   291                              <1> .clkWrite:          ;Functions 8 and 9
   292 0000766D B005                <1>     mov al, 05h ;Bad request structure length?
   293 0000766F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   294 00007672 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   295                              <1> 
   296 00007678 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   297 0000767B 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   298 0000767F 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   299 00007683 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   300                              <1> 
   301 0000768A 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   302 0000768C 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   303 00007690 B105                <1>     mov cl, 5
   304 00007692 F6F1                <1>     div cl          ;Divide al by 5
   305 00007694 30E4                <1>     xor ah, ah      ;Remove the remainder
   306 00007696 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   307                              <1> ;Using the decimal part of this formula for the low count
   308                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   309 00007698 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   310 0000769B B912000000          <1>     mov ecx, 18
   311 000076A0 F7E1                <1>     mul ecx  
   312 000076A2 01C3                <1>     add ebx, eax
   313                              <1> 
   314 000076A4 31D2                <1>     xor edx, edx
   315 000076A6 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   316 000076AA B944040000          <1>     mov ecx, 1092
   317 000076AF F7E1                <1>     mul ecx
   318 000076B1 01C3                <1>     add ebx, eax
   319 000076B3 89DA                <1>     mov edx, ebx    ;edx now has low count
   320 000076B5 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   321 000076B9 B401                <1>     mov ah, 01h     ;Set the system time
   322 000076BB CD3A                <1>     int 3Ah
   323                              <1> 
   324 000076BD 4889F3              <1>     mov rbx, rsi
   325 000076C0 E91AFFFFFF          <1>     jmp .clkExit
   326                              <1> 
   327                              <1> .clkBCDtoHex:
   328                              <1> ;Converts a BCD value to a Hex byte
   329                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   330 000076C5 51                  <1>     push rcx
   331 000076C6 0FB6C0              <1>     movzx eax, al   ;Zero extend
   332 000076C9 89C1                <1>     mov ecx, eax    ;Save al in ecx
   333 000076CB 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   334 000076D0 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   335 000076D6 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   336                              <1> .cbth0:
   337 000076D9 050A000000          <1>     add eax, 10
   338 000076DE E2F9                <1>     loop .cbth0
   339 000076E0 59                  <1>     pop rcx
   340 000076E1 C3                  <1>     ret
   341                              <1> 
   342                              <1> .clkHexToBCD:
   343                              <1> ;Converts a Hex byte into two BCD digits
   344                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   345 000076E2 51                  <1>     push rcx
   346 000076E3 0FB6C0              <1>     movzx eax, al   ;Zero extend
   347 000076E6 31C9                <1>     xor ecx, ecx
   348                              <1> .chtb0:
   349 000076E8 3D0A000000          <1>     cmp eax, 10
   350 000076ED 7209                <1>     jb .chtb1
   351 000076EF 2D0A000000          <1>     sub eax, 10
   352 000076F4 FFC1                <1>     inc ecx
   353 000076F6 EBF0                <1>     jmp short .chtb0
   354                              <1> .chtb1:
   355 000076F8 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   356 000076FB 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   357 000076FD 59                  <1>     pop rcx
   358 000076FE C3                  <1>     ret
   359 000076FF 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   360                              <1> 
   361                              <1> ;COM Driver headers and main interrupt strat
   362                              <1> com1Intr:
   363 00007701 C6057C01000000      <1>     mov byte [comIntr.comDevice], 0
   364 00007708 EB19                <1>     jmp short comIntr
   365                              <1> com2Intr:
   366 0000770A C6057301000001      <1>     mov byte [comIntr.comDevice], 1
   367 00007711 EB10                <1>     jmp short comIntr
   368                              <1> com3Intr:
   369 00007713 C6056A01000002      <1>     mov byte [comIntr.comDevice], 2
   370 0000771A EB07                <1>     jmp short comIntr
   371                              <1> com4Intr:
   372 0000771C C6056101000003      <1>     mov byte [comIntr.comDevice], 3
   373                              <1> comIntr:
   374 00007723 50                  <1>     push rax
   375 00007724 53                  <1>     push rbx
   376 00007725 51                  <1>     push rcx
   377 00007726 52                  <1>     push rdx
   378 00007727 56                  <1>     push rsi
   379 00007728 57                  <1>     push rdi
   380 00007729 488B1D05FDFFFF      <1>     mov rbx, qword [reqHdrPtr]
   381 00007730 B003                <1>     mov al, 03h ;Unknown Command
   382 00007732 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   383 00007736 7758                <1>     ja .comWriteErrorCode ;If yes, error!
   384                              <1> 
   385 00007738 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   386 0000773B 3C04                <1>     cmp al, 4   ;Read Character(s)
   387 0000773D 7464                <1>     jz .comRead
   388 0000773F 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   389 00007741 0F849D000000        <1>     jz .comNondestructiveRead   
   390 00007747 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   391 00007749 0F8486000000        <1>     jz .comReadInputStatus
   392 0000774F 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   393 00007751 0F849C000000        <1>     jz .comFlushInputBuffers
   394 00007757 3C08                <1>     cmp al, 8
   395 00007759 0F84BA000000        <1>     jz .comWrite
   396 0000775F 3C09                <1>     cmp al, 9
   397 00007761 0F84B2000000        <1>     jz .comWrite
   398 00007767 3C0A                <1>     cmp al, 0Ah
   399 00007769 0F84DF000000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   400 0000776F EB25                <1>     jmp short .comExit  ;All other valid functions should return done
   401                              <1> .comErrorNoCount:
   402 00007771 B002                <1>     mov al, 02h ;Unknown device
   403 00007773 EB1B                <1>     jmp short .comWriteErrorCode
   404                              <1> .comReadError:
   405 00007775 BA0B000000          <1>     mov edx, 0Bh
   406 0000777A EB05                <1>     jmp short .comError
   407                              <1> .comWriteError:
   408 0000777C BA0A000000          <1>     mov edx, 0Ah
   409                              <1> .comError:
   410 00007781 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   411 00007784 B902000000          <1>     mov ecx, 02h    ;Unknown device
   412 00007789 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   413 0000778B 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   414 0000778E 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   415                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   416 00007790 B480                <1>     mov ah, 80h ;Set error bit
   417 00007792 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   418                              <1> .comExit:
   419 00007796 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   420 0000779C 5F                  <1>     pop rdi
   421 0000779D 5E                  <1>     pop rsi
   422 0000779E 5A                  <1>     pop rdx
   423 0000779F 59                  <1>     pop rcx
   424 000077A0 5B                  <1>     pop rbx
   425 000077A1 58                  <1>     pop rax
   426 000077A2 C3                  <1>     ret
   427                              <1> 
   428                              <1> .comRead:
   429 000077A3 B005                <1>     mov al, 05h ;Bad request structure length?
   430 000077A5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   431 000077A8 75E6                <1>     jne .comWriteErrorCode
   432 000077AA 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   433 000077AE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   434                              <1> .cr1:
   435 000077B0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   436 000077B3 741B                <1>     je .cre2
   437                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   438 000077B5 B800020000          <1>     mov eax, 0200h    ;Recieve 
   439 000077BA 0FB615C3000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   440 000077C1 F8                  <1>     clc
   441 000077C2 CD34                <1>     int 34h ;Recieve Char
   442 000077C4 72BB                <1>     jc .comError
   443 000077C6 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   444 000077C9 74EA                <1>     je .cr11
   445 000077CB AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   446 000077CC FFC1                <1>     inc ecx
   447 000077CE EBE0                <1>     jmp short .cr1
   448                              <1> .cre2:
   449 000077D0 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   450 000077D3 EBC1                <1>     jmp short .comExit
   451                              <1> 
   452                              <1> .comReadInputStatus:
   453 000077D5 B005                <1>     mov al, 05h ;Bad request structure length?
   454 000077D7 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   455 000077DA 75B4                <1>     jne .comWriteErrorCode
   456 000077DC 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   457 000077E2 EBB2                <1>     jmp short .comExit
   458                              <1> 
   459                              <1> .comNondestructiveRead:
   460                              <1> ;The buffer is always empty for now (no keystroke available)
   461 000077E4 B005                <1>     mov al, 05h ;Bad request structure length?
   462 000077E6 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ndInNoWaitPkt_size
   463 000077E9 75A5                <1>     jne .comWriteErrorCode
   464 000077EB 66C743030000        <1>     mov word [rbx + ndInNoWaitPkt.status], 0 ;Busy bit clear
   465 000077F1 EBA3                <1>     jmp short .comExit
   466                              <1> 
   467                              <1> .comFlushInputBuffers:
   468 000077F3 B005                <1>     mov al, 05h ;Bad request structure length?
   469 000077F5 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   470 000077F8 7596                <1>     jne .comWriteErrorCode
   471                              <1> .cfib0:
   472 000077FA 0FB61583000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   473 00007801 B800020000          <1>     mov eax, 0200h    ;Recieve
   474 00007806 F8                  <1>     clc
   475 00007807 CD34                <1>     int 34h
   476 00007809 0F8262FFFFFF        <1>     jc .comErrorNoCount
   477 0000780F 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   478 00007812 75E6                <1>     jne .cfib0
   479 00007814 E97DFFFFFF          <1>     jmp .comExit
   480                              <1> 
   481                              <1> .comWrite:
   482 00007819 B005                <1>     mov al, 05h ;Bad request structure length?
   483 0000781B 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   484 0000781E 0F856CFFFFFF        <1>     jne .comWriteErrorCode
   485                              <1> 
   486 00007824 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   487 00007828 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   488                              <1> .cw1: 
   489 0000782A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   490 0000782D 7417                <1>     je .cw2
   491 0000782F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   492 00007830 B401                <1>     mov ah, 01h ;Move function number into ah
   493 00007832 0FB6154B000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   494 00007839 F8                  <1>     clc
   495 0000783A CD34                <1>     int 34h ;Transmit char
   496 0000783C 0F823FFFFFFF        <1>     jc .comError
   497 00007842 FFC1                <1>     inc ecx
   498 00007844 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   499                              <1> .cw2:
   500 00007846 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   501 00007849 E948FFFFFF          <1>     jmp .comExit
   502                              <1> 
   503                              <1> .comOutputStatus:
   504                              <1> ;Read MODEM status
   505 0000784E B005                <1>     mov al, 05h ;Bad request structure length?
   506 00007850 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   507 00007853 0F8537FFFFFF        <1>     jne .comWriteErrorCode
   508                              <1> 
   509 00007859 0FB61524000000      <1>     movzx edx, byte [.comDevice]    ;Get transacting com device
   510 00007860 B403                <1>     mov ah, 03h     ;Get status
   511 00007862 F8                  <1>     clc
   512 00007863 CD34                <1>     int 34h
   513 00007865 0F8206FFFFFF        <1>     jc .comErrorNoCount
   514 0000786B 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   515 00007870 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   516 00007873 F7D0                <1>     not eax      ;Bitwise inversion
   517 00007875 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   518 0000787A 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   519 0000787F E912FFFFFF          <1>     jmp .comExit
   520 00007884 00                  <1> .comDevice   db 0
    46                                  %include "./Source/Drivers/diskDrv.asm"
    47                              <1> msdDriver:
    48 00007885 50                  <1>     push rax
    49 00007886 53                  <1>     push rbx
    50 00007887 51                  <1>     push rcx
    51 00007888 52                  <1>     push rdx
    52 00007889 56                  <1>     push rsi
    53 0000788A 57                  <1>     push rdi
    54 0000788B 55                  <1>     push rbp
    55 0000788C 4150                <1>     push r8
    56 0000788E 488B1DA0FBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    57 00007895 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    58 00007899 B003                <1>     mov al, drvBadCmd
    59 0000789B 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    60 000078A1 B001                <1>     mov al, drvBadUnit 
    61 000078A3 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    62 000078A7 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    63 000078AD 488D35C3030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    64 000078B4 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    65 000078B8 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    66 000078BB 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    67 000078BF 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    68 000078C3 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    69 000078C5 488D0D9A000000      <1>     lea rcx, .msdTable
    70 000078CC 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    71 000078D0 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    72 000078D2 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    73 000078D4 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    74 000078D7 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    75                              <1> .msdDriverExit:
    76 000078D9 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    77 000078DF 4158                <1>     pop r8
    78 000078E1 5D                  <1>     pop rbp
    79 000078E2 5F                  <1>     pop rdi
    80 000078E3 5E                  <1>     pop rsi
    81 000078E4 5A                  <1>     pop rdx
    82 000078E5 59                  <1>     pop rcx
    83 000078E6 5B                  <1>     pop rbx
    84 000078E7 58                  <1>     pop rax
    85 000078E8 C3                  <1>     ret
    86                              <1> 
    87                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    88 000078E9 4889FB              <1>     mov rbx, rdi
    89 000078EC 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    90 000078EF 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    91 000078F1 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    92                              <1> ;Now fall through to general error
    93                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    94 000078F4 B401                <1>     mov ah, 01h
    95 000078F6 CD33                <1>     int 33h ;Read status of last operation
    96 000078F8 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    97 000078FB B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    98 000078FD 7460                <1>     je .msdWriteErrorCode 
    99 000078FF B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
   100 00007901 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
   101 00007904 7459                <1>     je .msdWriteErrorCode 
   102 00007906 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
   103 00007909 7454                <1>     je .msdWriteErrorCode
   104                              <1> ;Device Not Ready
   105 0000790B B002                <1>     mov al, 02h  ;Device not ready code
   106 0000790D 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
   107 00007910 744D                <1>     je .msdWriteErrorCode
   108 00007912 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
   109 00007916 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
   110                              <1> ;Write Protected
   111 0000791A 30C0                <1>     xor al, al
   112 0000791C 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   113 00007921 743C                <1>     je .msdWriteErrorCode
   114                              <1> ;CRC Error
   115 00007923 B004                <1>     mov al, 04h     ;CRC error code
   116 00007925 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   117 0000792A 7433                <1>     je .msdWriteErrorCode
   118 0000792C 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   119 00007931 742C                <1>     je .msdWriteErrorCode
   120 00007933 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   121 00007938 7425                <1>     je .msdWriteErrorCode
   122                              <1> ;Seek Error
   123 0000793A B006                <1>     mov al, 06h     ;Seek error code
   124 0000793C 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   125 0000793F 741E                <1>     je .msdWriteErrorCode
   126                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   127                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   128 00007941 B007                <1>     mov al, 07h
   129 00007943 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   130 00007946 7417                <1>     je .msdWriteErrorCode
   131                              <1> ;Sector Not Found
   132 00007948 B008                <1>     mov al, 08h     ;Sector not found code
   133 0000794A 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   134 0000794D 7410                <1>     je .msdWriteErrorCode
   135                              <1> ;Write faults
   136 0000794F B00A                <1>     mov al, 0Ah     ;Write fault
   137 00007951 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   138 00007954 7409                <1>     je .msdWriteErrorCode
   139                              <1> ;Read faults
   140 00007956 B00B                <1>     mov al, 0Bh     ;Read fault
   141 00007958 80F911              <1>     cmp cl, 11h     ;Read error
   142 0000795B 7402                <1>     je .msdWriteErrorCode
   143                              <1> ;General Errors
   144 0000795D B00C                <1>     mov al, 0Ch     ;Everything else is general error
   145                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   146 0000795F B480                <1>     mov ah, 80h ;Set error bit
   147 00007961 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   148 00007965 C3                  <1>     ret ;Return to set done bit
   149                              <1> .msdTable:
   150 00007966 0000                <1>     dw 0                            ;Function 0
   151 00007968 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   152 0000796A 9800                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   153 0000796C F800                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   154 0000796E 0401                <1>     dw .msdRead - .msdTable         ;Function 4
   155 00007970 0000                <1>     dw 0                            ;Function 5
   156 00007972 0000                <1>     dw 0                            ;Function 6
   157 00007974 0000                <1>     dw 0                            ;Function 7
   158 00007976 3D01                <1>     dw .msdWrite - .msdTable        ;Function 8
   159 00007978 7601                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   160 0000797A 0000                <1>     dw 0                            ;Function 10
   161 0000797C 0000                <1>     dw 0                            ;Function 11
   162 0000797E BC01                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   163 00007980 C801                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   164 00007982 E301                <1>     dw .msdDevClose - .msdTable     ;Function 14
   165 00007984 FE01                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   166 00007986 0000                <1>     dw 0                            ;Function 16
   167 00007988 0000                <1>     dw 0                            ;Function 17
   168 0000798A 0000                <1>     dw 0                            ;Function 18
   169 0000798C 2602                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   170 0000798E 0000                <1>     dw 0                            ;Function 20
   171 00007990 0000                <1>     dw 0                            ;Function 21
   172 00007992 0000                <1>     dw 0                            ;Function 22
   173 00007994 3202                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   174 00007996 4702                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   175                              <1> 
   176                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   177                              <1> .msdMedChk:          ;Function 1
   178 00007998 B005                <1>     mov al, 05h ;Bad request structure length
   179 0000799A 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   180 0000799D 75C0                <1>     jne .msdWriteErrorCode
   181                              <1> 
   182 0000799F E83D020000          <1>     call .msdCheckDeviceType    ;Check and ensure that media type is "swapped"
   183 000079A4 753E                <1>     jnz .mmcChange  ;Always change if swapping between same phys volume!
   184 000079A6 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   185 000079AB 488D0DBB020000      <1>     lea rcx, .msdBIOSmap
   186 000079B2 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   187 000079B5 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   188 000079B8 753F                <1>     jnz .mmcNoChange
   189                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   190 000079BA B416                <1>     mov ah, 16h 
   191 000079BC CD33                <1>     int 33h
   192 000079BE 0F8230FFFFFF        <1>     jc .msdGenDiskError
   193 000079C4 80FC80              <1>     cmp ah, 80h
   194 000079C7 740E                <1>     je .mmcNoChangeLine
   195 000079C9 80FC86              <1>     cmp ah, 86h
   196 000079CC 7409                <1>     je .mmcNoChangeLine
   197 000079CE 84E4                <1>     test ah, ah ;No change?
   198 000079D0 7427                <1>     jz .mmcNoChange
   199 000079D2 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   200 000079D5 750D                <1>     jnz .mmcChange
   201                              <1> ;If nothing, fall through and test manually, should never happen though
   202                              <1> .mmcNoChangeLine:
   203                              <1> ;Now we test Media Descriptor
   204 000079D7 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   205 000079DC 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   206 000079DF 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   207 000079E2 7410                <1>     je .mmcUnsure
   208                              <1> .mmcChange:
   209 000079E4 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   210 000079E8 488D0574020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   211 000079EF 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   212                              <1>     ;Check here if there were any open handles on the device when it was changed
   213 000079F3 C3                  <1>     ret
   214                              <1> .mmcUnsure:
   215 000079F4 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   216 000079F8 C3                  <1>     ret
   217                              <1> .mmcNoChange:
   218 000079F9 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   219 000079FD C3                  <1>     ret
   220                              <1> 
   221                              <1> 
   222                              <1> .msdBuildBPB:        ;Function 2
   223 000079FE B005                <1>     mov al, 05h ;Bad request structure length
   224 00007A00 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   225 00007A03 0F8556FFFFFF        <1>     jne .msdWriteErrorCode
   226                              <1> 
   227 00007A09 4889DE              <1>     mov rsi, rbx
   228 00007A0C 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   229 00007A11 488D0D55020000      <1>     lea rcx, .msdBIOSmap
   230 00007A18 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   231 00007A1B 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   232 00007A1F 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   233 00007A21 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   234 00007A24 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   235 00007A29 CD33                <1>     int 33h
   236 00007A2B 0F82C3FEFFFF        <1>     jc .msdGenDiskError
   237                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   238 00007A31 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   239 00007A35 7418                <1>     je .mbbpb0
   240 00007A37 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   241 00007A3B 7412                <1>     je .mbbpb0
   242 00007A3D 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   243 00007A41 740C                <1>     je .mbbpb0
   244 00007A43 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   245 00007A47 B007                <1>     mov al, 07h ;Unknown media error code
   246 00007A49 0F8210FFFFFF        <1>     jb .msdWriteErrorCode
   247                              <1> .mbbpb0:
   248 00007A4F 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   249 00007A52 4889EF              <1>     mov rdi, rbp     ;Get pointer to buffer to overwrite
   250 00007A55 B90F000000          <1>     mov ecx, bpbEx_size/8
   251 00007A5A F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   252 00007A5D C3                  <1>     ret
   253                              <1> .msdIOCTLRead:       ;Function 3, returns done
   254 00007A5E B005                <1>     mov al, drvBadDrvReq
   255 00007A60 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   256 00007A63 0F85F6FEFFFF        <1>     jne .msdWriteErrorCode
   257 00007A69 C3                  <1>     ret
   258                              <1> .msdRead:            ;Function 4
   259                              <1> ;Will read one sector at a time.
   260 00007A6A B005                <1>     mov al, 05h ;Bad request structure length
   261 00007A6C 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   262 00007A6F 0F85EAFEFFFF        <1>     jne .msdWriteErrorCode
   263                              <1> 
   264 00007A75 E867010000          <1>     call .msdCheckDeviceType
   265                              <1> 
   266 00007A7A 4889DF              <1>     mov rdi, rbx
   267 00007A7D 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   268                              <1> .msdr0:
   269 00007A7F B682                <1>     mov dh, 82h ;LBA Read Sectors
   270 00007A81 E83C010000          <1>     call .msdBlkIOCommon
   271 00007A86 0F825DFEFFFF        <1>     jc .msdIOError
   272 00007A8C 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   273 00007A90 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   274 00007A94 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   275 00007A98 FFC6                <1>     inc esi
   276 00007A9A 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   277 00007A9D 75E0                <1>     jne .msdr0
   278 00007A9F 4889FB              <1>     mov rbx, rdi
   279 00007AA2 C3                  <1>     ret
   280                              <1> .msdWrite:           ;Function 8
   281                              <1> ;Will write one sector at a time.
   282 00007AA3 B005                <1>     mov al, 05h ;Bad request structure length
   283 00007AA5 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   284 00007AA8 0F85B1FEFFFF        <1>     jne .msdWriteErrorCode
   285                              <1> 
   286 00007AAE E82E010000          <1>     call .msdCheckDeviceType
   287                              <1> 
   288 00007AB3 4889DF              <1>     mov rdi, rbx
   289 00007AB6 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   290                              <1> .msdw0:
   291 00007AB8 B683                <1>     mov dh, 83h ;LBA Write Sectors
   292 00007ABA E803010000          <1>     call .msdBlkIOCommon
   293 00007ABF 0F8224FEFFFF        <1>     jc .msdIOError
   294 00007AC5 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   295 00007AC9 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   296 00007ACD 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   297 00007AD1 FFC6                <1>     inc esi
   298 00007AD3 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   299 00007AD6 75E0                <1>     jne .msdw0
   300 00007AD8 4889FB              <1>     mov rbx, rdi
   301 00007ADB C3                  <1>     ret
   302                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   303                              <1> ;Will write one sector at a time and then verify it.
   304 00007ADC B005                <1>     mov al, 05h ;Bad request structure length
   305 00007ADE 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   306 00007AE1 0F8578FEFFFF        <1>     jne .msdWriteErrorCode
   307                              <1> 
   308 00007AE7 E8F5000000          <1>     call .msdCheckDeviceType
   309                              <1> 
   310 00007AEC 4889DF              <1>     mov rdi, rbx
   311 00007AEF 31F6                <1>     xor esi, esi  ;Set counter to zero
   312                              <1> .msdwv0:
   313 00007AF1 B683                <1>     mov dh, 83h ;LBA Write Sectors
   314 00007AF3 E8CA000000          <1>     call .msdBlkIOCommon
   315 00007AF8 0F82EBFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   316 00007AFE B684                <1>     mov dh, 84h ;LBA Verify Sectors
   317 00007B00 E8BD000000          <1>     call .msdBlkIOCommon
   318 00007B05 0F82DEFDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   319 00007B0B 0FB7450B            <1>     movzx eax, word [rbp + bpb.bytsPerSec] 
   320 00007B0F 4801471A            <1>     add qword [rdi + ioReqPkt.strtsc], rax  ;Add one sector
   321 00007B13 4801470E            <1>     add qword [rdi + ioReqPkt.bufptr], rax  ;Add one sector
   322 00007B17 FFC6                <1>     inc esi
   323 00007B19 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   324 00007B1C 75D3                <1>     jne .msdwv0
   325 00007B1E 4889FB              <1>     mov rbx, rdi
   326 00007B21 C3                  <1>     ret
   327                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   328 00007B22 B005                <1>     mov al, drvBadDrvReq
   329 00007B24 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   330 00007B27 0F8532FEFFFF        <1>     jne .msdWriteErrorCode
   331                              <1> 
   332 00007B2D C3                  <1>     ret
   333                              <1> .msdDevOpen:         ;Function 13
   334 00007B2E B005                <1>     mov al, drvBadDrvReq
   335 00007B30 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   336 00007B33 0F8526FEFFFF        <1>     jne .msdWriteErrorCode
   337                              <1> 
   338 00007B39 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   339 00007B3E 488D0D2D010000      <1>     lea rcx, .msdHdlCnt
   340 00007B45 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   341 00007B48 C3                  <1>     ret
   342                              <1> .msdDevClose:        ;Function 14
   343 00007B49 B005                <1>     mov al, drvBadDrvReq
   344 00007B4B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   345 00007B4E 0F850BFEFFFF        <1>     jne .msdWriteErrorCode
   346                              <1> 
   347 00007B54 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   348 00007B59 488D0D12010000      <1>     lea rcx, .msdHdlCnt
   349 00007B60 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   350 00007B63 C3                  <1>     ret
   351                              <1> .msdRemovableMedia:  ;Function 15
   352 00007B64 B005                <1>     mov al, drvBadDrvReq
   353 00007B66 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   354 00007B69 0F85F0FDFFFF        <1>     jne .msdWriteErrorCode
   355                              <1> 
   356 00007B6F 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   357 00007B74 488D0DF2000000      <1>     lea rcx, .msdBIOSmap
   358 00007B7B 0FB60401            <1>     movzx eax, byte [rcx + rax]    ;Get BIOS number
   359 00007B7F 2580000000          <1>     and eax, 80h ;Isolate bit 7 (the fixed drive bit)
   360 00007B84 C1E002              <1>     shl eax, 2  ;Shift the removable bit (bit 7) to the busy bit (bit 9)
   361 00007B87 66894303            <1>     mov word [rbx + remMediaReqPkt.status], ax  ;Busy set if fixed!
   362 00007B8B C3                  <1>     ret
   363                              <1> .msdGenericIOCTL:    ;Function 19
   364 00007B8C B005                <1>     mov al, drvBadDrvReq
   365 00007B8E 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   366 00007B91 0F85C8FDFFFF        <1>     jne .msdWriteErrorCode
   367                              <1> 
   368 00007B97 C3                  <1>     ret
   369                              <1> .msdGetLogicalDev:   ;Function 23
   370 00007B98 B005                <1>     mov al, drvBadDrvReq
   371 00007B9A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   372 00007B9D 0F85BCFDFFFF        <1>     jne .msdWriteErrorCode
   373                              <1> 
   374 00007BA3 8A05C3000000        <1>     mov al, byte [.msdCurDev]
   375 00007BA9 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   376 00007BAC C3                  <1>     ret
   377                              <1> .msdSetLogicalDev:   ;Function 24
   378 00007BAD B005                <1>     mov al, drvBadDrvReq
   379 00007BAF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   380 00007BB2 0F85A7FDFFFF        <1>     jne .msdWriteErrorCode
   381                              <1> .msdInternalSetUnitNumber:  ;Called to set the unit number from reqpkt
   382 00007BB8 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   383 00007BBB 8805AB000000        <1>     mov byte [.msdCurDev], al
   384 00007BC1 C3                  <1>     ret
   385                              <1> 
   386                              <1> .msdBlkIOCommon:  ;Does block IO
   387                              <1> ;Called with rdi containing old rbx value and ah with function number
   388                              <1> ;rbp points to bpb
   389                              <1> ;Error handled by caller
   390                              <1> ;Sector count handled by caller
   391                              <1> ;Called with dh = BIOS function number
   392 00007BC2 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   393 00007BC7 8A90[6D7C0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   394 00007BCD 31C9                <1>     xor ecx, ecx
   395 00007BCF 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   396 00007BD2 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   397 00007BD6 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   398 00007BDA 88F4                <1>     mov ah, dh
   399 00007BDC B001                <1>     mov al, 01h ;Do one sector at a time 
   400 00007BDE CD33                <1>     int 33h
   401                              <1>     return
    18                              <2> %%_ret:
    19 00007BE0 C3                  <2>  ret
    20                              <2> %assign retOff %%_ret-$$
   402                              <1> 
   403                              <1> .msdCheckDeviceType:
   404                              <1> ;If the device numbers dont match but the bpb numbers do, print the message
   405                              <1> ;!!!WARNING!!! THIS USES THE CONSOLE BIOS!!! VIOLATES HARDWARE ABSTRACTION!!!!
   406                              <1> ;Returns ZF=NZ if media number changed!
   407 00007BE1 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]    ;Get the now unit number
   408 00007BE5 3A0581000000        <1>     cmp al, byte [.msdCurDev]    ;Compare against the last transacted device
   409                              <1>     rete    ;Exit if equal (ZF=ZE)
    54                              <2> cret e
    24                              <3> %%_base:
    25                              <3> %assign baseVar %%_base-$$
    26                              <3>  %ifdef retOff
    27                              <3>  %if (baseVar - retOff <= 126) && (baseVar > retOff)
    28                              <3>  %ifdef currSegVBase
    29 00007BEB 74F3                <3>  j%+1 short (retOff+currSegVBase)
    30                              <3>  %else
    31                              <3>  j%+1 short retOff
    32                              <3>  %endif
    33                              <3>  %else
    34                              <3>  j%-1 short %%a
    35                              <3>  return
    36                              <3> %%a:
    37                              <3>  %endif
    38                              <3>  %else
    39                              <3>  j%-1 short %%a
    40                              <3>  return
    41                              <3> %%a:
    42                              <3>  %endif
   410                              <1> ;If not equal, check they use different BPB's before continuing
   411 00007BED 488D3583000000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
   412 00007BF4 C1E003              <1>     shl eax, 3
   413 00007BF7 488B1406            <1>     mov rdx, qword [rsi + rax]  ;Get the bpbptr of this device too
   414 00007BFB 4839D5              <1>     cmp rbp, rdx    ;Is the bpb of the transacting device the same as before?
   415 00007BFE 7522                <1>     jne .msdCDTexit ;Exit by setting the new unit number
   416                              <1>     ;Here, device numbers are neq but bpb's are eq. Thus print message
   417 00007C00 C1E803              <1>     shr eax, 3 
   418 00007C03 0441                <1>     add al, "A" ;Convert to a letter
   419 00007C05 880534000000        <1>     mov byte [.msdStrikeLetter], al
   420 00007C0B 488D351A000000      <1>     lea rsi, .msdStrike
   421 00007C12 B937000000          <1>     mov ecx, .msdStrikeL
   422                              <1> .msdCDTprintMessage:
   423 00007C17 AC                  <1>     lodsb   ;Get the char in al, inc rsi
   424 00007C18 CD49                <1>     int 49h ;Print char in al
   425 00007C1A FFC9                <1>     dec ecx
   426 00007C1C 75F9                <1>     jnz .msdCDTprintMessage
   427 00007C1E 31C0                <1>     xor eax, eax
   428 00007C20 CD36                <1>     int 36h ;Blocking wait at the keyboard for a keystroke
   429                              <1> .msdCDTexit:
   430 00007C22 E891FFFFFF          <1>     call .msdInternalSetUnitNumber  ;Set unit number internally
   431 00007C27 31C0                <1>     xor eax, eax
   432 00007C29 FFC0                <1>     inc eax ;Clear ZF flag (ZF=NZ)
   433 00007C2B C3                  <1>     ret
   434                              <1> 
   435 00007C2C 0D0A496E7365727420- <1> .msdStrike db 0Dh,0Ah,"Insert for drive "
   435 00007C35 666F72206472697665- <1>
   435 00007C3E 20                  <1>
   436 00007C3F 413A20616E64207374- <1> .msdStrikeLetter db "A: and strike",0Dh,0Ah,"any key when ready",0Dh,0Ah,0Ah
   436 00007C48 72696B650D0A616E79- <1>
   436 00007C51 206B6579207768656E- <1>
   436 00007C5A 2072656164790D0A0A  <1>
   437                              <1> .msdStrikeL equ $ - .msdStrike
   438                              <1> 
   439 00007C63 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   440                              <1> ;LASTDRIVE default is 5
   441                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   442                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   443 00007C6C 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   444                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   445 00007C6D 0001FFFFFF          <1> .msdBIOSmap  db 0, 1, -1, -1, -1 ;Translates DOS drive number to BIOS number
   446 00007C72 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   447 00007C77 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   447 00007C80 000000000000000000- <1>
   447 00007C89 000000000000000000- <1>
   447 00007C92 000000000000000000- <1>
   447 00007C9B 00000000            <1>
   448                              <1> .msdBPBblks  defaultBPB ;Add two default BPB's. If no remdrv, these are used
   448                              <2> .msdBPBblks :
   181 00007C9F E9                  <2>  db 0E9h
   182 00007CA0 00                  <2>  db 00h
   183 00007CA1 90                  <2>  db 90h
   184 00007CA2 534350444F537631    <2>  db 'SCPDOSv1'
   185 00007CAA 0002                <2>  dw 0200h
   186 00007CAC 01                  <2>  db 01h
   187 00007CAD 0100                <2>  dw 0001h
   188 00007CAF 02                  <2>  db 02h
   189 00007CB0 E000                <2>  dw 00E0h
   190 00007CB2 400B                <2>  dw 0B40h
   191 00007CB4 F0                  <2>  db 0F0h
   192 00007CB5 0900                <2>  dw 0009h
   193 00007CB7 1200                <2>  dw 0012h
   194 00007CB9 0200                <2>  dw 0002h
   195 00007CBB 00000000            <2>  dd 0
   196 00007CBF 00000000            <2>  dd 0
   197 00007CC3 00                  <2>  db 00h
   198 00007CC4 00                  <2>  db 00h
   199 00007CC5 29                  <2>  db 29h
   200 00007CC6 00000000            <2>  dd 0
   201 00007CCA 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00007CD3 2020                <2>
   202 00007CD5 4641543132202020    <2>  db 'FAT12   '
   203 00007CDD 000000000000000000- <2>  db 58 dup 0
   203 00007CE6 000000000000000000- <2>
   203 00007CEF 000000000000000000- <2>
   203 00007CF8 000000000000000000- <2>
   203 00007D01 000000000000000000- <2>
   203 00007D0A 000000000000000000- <2>
   203 00007D13 00000000            <2>
   449                              <1>              defaultBPB ;If remdrvs found, these are overridden
   181 00007D17 E9                  <2>  db 0E9h
   182 00007D18 00                  <2>  db 00h
   183 00007D19 90                  <2>  db 90h
   184 00007D1A 534350444F537631    <2>  db 'SCPDOSv1'
   185 00007D22 0002                <2>  dw 0200h
   186 00007D24 01                  <2>  db 01h
   187 00007D25 0100                <2>  dw 0001h
   188 00007D27 02                  <2>  db 02h
   189 00007D28 E000                <2>  dw 00E0h
   190 00007D2A 400B                <2>  dw 0B40h
   191 00007D2C F0                  <2>  db 0F0h
   192 00007D2D 0900                <2>  dw 0009h
   193 00007D2F 1200                <2>  dw 0012h
   194 00007D31 0200                <2>  dw 0002h
   195 00007D33 00000000            <2>  dd 0
   196 00007D37 00000000            <2>  dd 0
   197 00007D3B 00                  <2>  db 00h
   198 00007D3C 00                  <2>  db 00h
   199 00007D3D 29                  <2>  db 29h
   200 00007D3E 00000000            <2>  dd 0
   201 00007D42 4E4F204E414D452020- <2>  db 'NO NAME    '
   201 00007D4B 2020                <2>
   202 00007D4D 4641543132202020    <2>  db 'FAT12   '
   203 00007D55 000000000000000000- <2>  db 58 dup 0
   203 00007D5E 000000000000000000- <2>
   203 00007D67 000000000000000000- <2>
   203 00007D70 000000000000000000- <2>
   203 00007D79 000000000000000000- <2>
   203 00007D82 000000000000000000- <2>
   203 00007D8B 00000000            <2>
   450 00007D8F 000000000000000000- <1>              db 3*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   450 00007D98 000000000000000000- <1>
   450 00007DA1 000000000000000000- <1>
   450 00007DAA 000000000000000000- <1>
   450 00007DB3 000000000000000000- <1>
   450 00007DBC 000000000000000000- <1>
   450 00007DC5 000000000000000000- <1>
   450 00007DCE 000000000000000000- <1>
   450 00007DD7 000000000000000000- <1>
   450 00007DE0 000000000000000000- <1>
   450 00007DE9 000000000000000000- <1>
   450 00007DF2 000000000000000000- <1>
   450 00007DFB 000000000000000000- <1>
   450 00007E04 000000000000000000- <1>
   450 00007E0D 000000000000000000- <1>
   450 00007E16 000000000000000000- <1>
   450 00007E1F 000000000000000000- <1>
   450 00007E28 000000000000000000- <1>
   450 00007E31 000000000000000000- <1>
   450 00007E3A 000000000000000000- <1>
   450 00007E43 000000000000000000- <1>
   450 00007E4C 000000000000000000- <1>
   450 00007E55 000000000000000000- <1>
   450 00007E5E 000000000000000000- <1>
   450 00007E67 000000000000000000- <1>
   450 00007E70 000000000000000000- <1>
   450 00007E79 000000000000000000- <1>
   450 00007E82 000000000000000000- <1>
   450 00007E8B 000000000000000000- <1>
   450 00007E94 000000000000000000- <1>
   450 00007E9D 000000000000000000- <1>
   450 00007EA6 000000000000000000- <1>
   450 00007EAF 000000000000000000- <1>
   450 00007EB8 000000000000000000- <1>
   450 00007EC1 000000000000000000- <1>
   450 00007ECA 000000000000000000- <1>
   450 00007ED3 000000000000000000- <1>
   450 00007EDC 000000000000000000- <1>
   450 00007EE5 000000000000000000- <1>
   450 00007EEE 000000000000000000  <1>
   451                              <1> endptr equ $
    47                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    48                                  ;Paragraph alignment
    49                                  %include "./Source/BSS/dosDynaDataArea.asm"
    50                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    51                              <1> ; the MCB chain!
    52                              <1> ddaStart:
    53 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    54                              <1> 
    55                              <1> dosDynamicArea: ;Difference of this symbol with cfgFrame endPtr gives alloc size
    56                              <1> ;Create DPB chain of first 5 available DPB slots
    57 00000010 <res 35h>           <1> firstDPB        resb dpb_size   ;First two are always present
    58 00000045 <res 35h>           <1> secondDPB       resb dpb_size
    59 0000007A <res 35h>           <1> thirdDPB        resb dpb_size
    60 000000AF <res 35h>           <1> fourthDPB       resb dpb_size
    61 000000E4 <res 35h>           <1> fifthDPB        resb dpb_size 
    62                              <1> 
    63                              <1> ;fcbsArray       resb sfth_size + 4*sft_size ;One header plus 4 SFT entries
    64                              <1> 
    65 00000119 <res 1C7h>          <1> cdsArray        resb 5*cds_size ;5 CDS's unless more are specified
    66                              <1> 
    67 000002E0 <res 30h>           <1> tmpBufHdr       resb bufferHdr_size
    68 00000310 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    69                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    70                              <1> cfgLoad:    ;This symbol is used to read config.sys here
    71                              <1> dynamicDataAreaLength equ $ - ddaStart
    71          ------------------  <1>  info: assembly required 1+16+2 passes

