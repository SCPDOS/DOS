     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Driver status word status bit meanings
    70                              <1>     drvErrStatus    equ 8000h  
    71                              <1>     drvDonStatus    equ 0100h
    72                              <1>     drvBsyStatus    equ 0200h
    73                              <1> ;Driver structures
    74                              <1> struc drvReqHdr
    75                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc initReqPkt  ;Init Request Packet
    79                              <1> 
    80                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    81 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    82 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    83 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    84 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    85                              <1> 
    86                              <1> endstruc
    87                              <1> 
    88                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    89                              <1> 
    90                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    91 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    92 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    93 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    94                              <1> 
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    98                              <1> 
    99                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   100 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   101 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   102 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   103                              <1> 
   104                              <1> endstruc
   105                              <1> 
   106                              <1> struc ioReqPkt   ;IO Request Packet
   107                              <1> 
   108                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   109 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   110 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   111 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   112 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   113 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   114                              <1> 
   115                              <1> endstruc
   116                              <1> 
   117                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   118                              <1>     
   119                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   120 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   121                              <1> 
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc statusReqPkt   ;Status Request Packet
   125                              <1> 
   126                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   127                              <1> 
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   131                              <1> 
   132                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   133                              <1>      
   134                              <1> endstruc
   135                              <1> 
   136                              <1> struc openReqPkt ;Open Device Request Packet
   137                              <1> 
   138                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   139                              <1>      
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc closeReqPkt ;Close Device Request Packet
   143                              <1> 
   144                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   145                              <1>      
   146                              <1> endstruc
   147                              <1> 
   148                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   149                              <1> 
   150                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   151                              <1>      
   152                              <1> endstruc
   153                              <1> 
   154                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   155                              <1> 
   156                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   157 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   158 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   159 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   160 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   161 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   162                              <1> 
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   166                              <1>     
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   168                              <1> 
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   172                              <1>     
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   174                              <1> 
   175                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Only affects for SUBST drives, not JOIN
    69                              <1> ; Flags: Bit 15 set = Network drive
    70                              <1> ;        Bit 14 set = Physical drive
    71                              <1> ;        Bit 13 set = JOIN'ed drive
    72                              <1> ;        Bit 12 set = SUBST'ed drive
    73                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    74                              <1> endstruc
    75                              <1> ;CDS equates
    76                              <1> cdsNetDrive     equ 8000h
    77                              <1> cdsPhysDrive    equ 4000h
    78                              <1> cdsJoinDrive    equ 2000h
    79                              <1> cdsSubstDrive   equ 1000h
    80                              <1> cdsRedirDrive   equ 0080h
    81                              <1> ;------------------------------------------------------------------------;
    82                              <1> ; The SFT is a way to allow applications to open file handles to files 
    83                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    84                              <1> ; under the first header, and then a second header will be linked to the 
    85                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    86                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    87                              <1> ; using the FCBS= command. Default FCBS=5.
    88                              <1> ;
    89                              <1> ; A file handle describes the file, and the location within the file that
    90                              <1> ; we are reading. The file handle can be manipulated without the file
    91                              <1> ; being in memory, thus allowing the user to access data without needing 
    92                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    93                              <1> ; accessing devices, by treating them as files with their drivers 
    94                              <1> ; responding and translating the manipulations of the file handle itself.
    95                              <1> ; Neither the driver nor the application should see or use the SFT for
    96                              <1> ; the handle, as it is subject to change (and will change when file 
    97                              <1> ; sharing provisions are included). The DOS will make requests to the 
    98                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    99                              <1> ; track of the information in the SFT entry for that handle. 
   100                              <1> ;
   101                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   102                              <1> ; can point to the same file. It all depends on what the applications 
   103                              <1> ; want to do with the File.
   104                              <1> ;
   105                              <1> ; !!!!IMPORTANT!!!!
   106                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   107                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   108                              <1> ;
   109                              <1> ;Each SFT may look like this:
   110                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   111                              <1> ;            |                |
   112                              <1> ;       wNumFiles*sft    wNumFiles*sft
   113                              <1> ;
   114                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   115                              <1> ; System FCBs.
   116                              <1> ;
   117                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   118                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   119                              <1> ;
   120                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   121                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   122                              <1> ;------------------------------------------------------------------------;
   123                              <1> struc sfth   ;System file table header
   124                              <1> ; This is the SFT header.
   125                              <1> ; This structure comes before the start of the first file in the array/table.
   126 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   127 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   128                              <1> endstruc
   129                              <1> 
   130                              <1> struc sft
   131                              <1> ;This is the file struc itself
   132 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   133 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   134 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   135 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   136 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   137 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file pointed to by SFT entry
   138 00000013 ????                <1>     .wTime       resw 1    ;File Time
   139 00000015 ????                <1>     .wDate       resw 1    ;File Date
   140 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   141 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset pointed to by SFT entry, in bytes
   142 0000001F ????????            <1>     .dRelClust   resd 1    ;Rel cluster pointed to by SFT entry
   143 00000023 ????????????????    <1>     .qDirSect    resq 1    ;Abs number of sector containing directory entry 
   144 0000002B ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   145 0000002C <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   146 00000037 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   147 0000003F ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster pointed to by SFT entry
   148                              <1> endstruc
   149                              <1> ;Open Mode equates
   150                              <1> ;Access modes   Bits[2:0]
   151                              <1> ReadAccess      equ 0h
   152                              <1> WriteAccess     equ 1h
   153                              <1> RWAccess        equ 2h
   154                              <1> ;Bit 3 reserved 0
   155                              <1> ;Sharing modes  Bits[6:4]
   156                              <1> CompatShare     equ 0h
   157                              <1> denyRWShare     equ 10h
   158                              <1> denyWriteShare  equ 20h
   159                              <1> denyReadShare   equ 30h
   160                              <1> denyNoneShare   equ 40h
   161                              <1> ;Bit 7 reserved 0
   162                              <1> ;Bits 8-12 reserved 0
   163                              <1> ;Critical Error handling
   164                              <1> critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   165                              <1> ;Buffering on writes
   166                              <1> noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   167                              <1> ;FCB opened file?
   168                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   169                              <1> ;Attribute Byte
   170                              <1> readOnlyFile    equ 1h
   171                              <1> hiddenFile      equ 2h
   172                              <1> systemFile      equ 4h
   173                              <1> volumeLabel     equ 8h
   174                              <1> directoryFile   equ 10h ;Directory entry
   175                              <1> archiveFile     equ 20h
   176                              <1> ;Device Info equates
   177                              <1> ;For a block device, bits [5:0] contain the drive number
   178                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   179                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   180                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   181                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   182                              <1> charDevFastOut  equ 10h ;If set, device supports INT 49h
   183                              <1> devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   184                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   185                              <1> blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   186                              <1> devCharDev      equ 80h ;If set, it is a char device!
   187                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   188                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   189                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   190                              <1> blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   191                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   192                              <1> ;------------------------------------------------------------------------;
   193                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   194                              <1> ; to an internal buffer, and then copying it to the specified location
   195                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   196                              <1> ; another request for the same sector from the same device is made, so 
   197                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   198                              <1> ; size, selected according to the largest detected sector size during 
   199                              <1> ; the initial loadup.
   200                              <1> ;
   201                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   202                              <1> ;
   203                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   204                              <1> ;------------------------------------------------------------------------;
   205                              <1> 
   206                              <1> struc bufferHdr
   207 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   208 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   209 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   210 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   211 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   212 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   213 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   214 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   215                              <1>     .dataarea:             ;Points to the start of the data area
   216                              <1> endstruc
   217                              <1> ;Buffer Flag equates
   218                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   219                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   220                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   221                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   222                              <1> refBuffer   equ 20h ;Data in buffer referenced by an application
   223                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   224                              <1> ;------------------------------------------------------------------------;
   225                              <1> ; Memory control block for each memory arena
   226                              <1> ;------------------------------------------------------------------------;
   227                              <1> struc mcb
   228 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   229 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP (para aligned) or 0 for free
   230 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   231 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   232                              <1>     .program:
   233                              <1> endstruc
   234                              <1> ;MCB equates
   235                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   236                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   237                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   238                              <1> mcbMarkCtn      equ "M"
   239                              <1> mcbMarkEnd      equ "Z"
   240                              <1> 
   241                              <1> memFirstFit     equ 0   ;First free block goes to application
   242                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   243                              <1> memLastFit      equ 2   ;Last free block goes to application
   244                              <1> 
   245                              <1> ;Owner = Para aligned address => Owning application PSP
   246                              <1> ;...To consider...
   247                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   248                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   249                              <1> ;------------------------------------------------------------------------;
   250                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   251                              <1> ; following order, thus allowing for return values to be placed in the 
   252                              <1> ; registers by accessing the caller register stack frame.
   253                              <1> ;------------------------------------------------------------------------;
   254                              <1> struc callerFrame
   255 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   256 00000008 ????????????????    <1>     .rbx    resq 1    
   257 00000010 ????????????????    <1>     .rcx    resq 1
   258 00000018 ????????????????    <1>     .rdx    resq 1
   259 00000020 ????????????????    <1>     .rsi    resq 1
   260 00000028 ????????????????    <1>     .rdi    resq 1
   261 00000030 ????????????????    <1>     .rbp    resq 1
   262 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   263 00000040 ????????????????    <1>     .r9     resq 1
   264                              <1> ;Pushed by Processor when invoked via Interrupt
   265 00000048 ????????????????    <1>     .rip    resq 1
   266 00000050 ????????????????    <1>     .cs     resq 1
   267 00000058 ????????????????    <1>     .flags  resq 1
   268                              <1> endstruc
   269                              <1> 
   270                              <1> struc fcb
   271                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   272 00000000 ??                  <1>     .driveNum   resb 1
   273 00000001 ????????????????    <1>     .filename   resb 8
   274 00000009 ??????              <1>     .fileext    resb 3
   275 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   276                              <1> ;One block consists of 128 records, of size denoted in the below
   277 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   278 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   279 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   280 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   281 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   282 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   283 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   284 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   285 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   286                              <1>     ;If record size > 64, high byte is ignored.
   287                              <1>     ;Used for random read and write operations to find the right record
   288                              <1> endstruc
   289                              <1> 
   290                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   291 00000000 ??                  <1>     .driveNum   resb 1  ;Drive we are searching on
   292 00000001 <res Bh>            <1>     .template   resb 11 ;Search template (? meaning anything)
   293 0000000C ??                  <1>     .attrib     resb 1  ;Search attribute
   294 0000000D ????????            <1>     .dirOffset  resd 1  ;Entry within dir (made a dword but will never be so)
   295 00000011 ????????            <1>     .parCluster resd 1  ;Parent cluster number
   296 00000015 ??                  <1>     .atrribFnd  resb 1  ;Attrib of file found
   297 00000016 ????                <1>     .fileTime   resw 1  ;File time
   298 00000018 ????                <1>     .fileDate   resw 1  ;File date
   299 0000001A ????????            <1>     .fileSize   resd 1  ;Number of bytes
   300 0000001E <res Dh>            <1>     .asciizName resb 13 ;ASCIIZ name with dot and terminating nul
   301                              <1> endstruc
   302                              <1> 
   303                              <1> struc psp
   304 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   305 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   306 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   307 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   308 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   309 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   310 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   311 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   312 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   313 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   314 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   315 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   316 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   317                              <1> ;Extra handle arrays are grouped into a linked list
   318                              <1> ;The below are in the same place as in DOS
   319 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   320 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   321                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   322 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   323 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   324                              <1> endstruc
   325                              <1> 
   326                              <1> struc clkStruc
   327 00000000 ????                <1>     .dateWord   resw 1
   328 00000002 ??                  <1>     .minutes    resb 1
   329 00000003 ??                  <1>     .hours      resb 1
   330 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   331 00000005 ??                  <1>     .seconds    resb 1
   332                              <1> endstruc
   333                              <1> 
   334                              <1> ;60 4kb pages, giving a total of 264kb of space allocated to paging
   335                              <1> ;for a space of 64Gb
   336                              <1> dosAPTsize  equ 60*4096
   337                              <1> 
   338                              <1> ;Critical Error AH bitfield equates
   339                              <1> critRead    equ 0h
   340                              <1> critWrite   equ 1h
   341                              <1> critDOS     equ 0h
   342                              <1> critFAT     equ 2h
   343                              <1> critDir     equ 4h
   344                              <1> critData    equ 6h
   345                              <1> critFailOK  equ 8h
   346                              <1> critRetryOK equ 10h
   347                              <1> critIgnorOK equ 20h
   348                              <1> critCharDev equ 80h
   349                              <1> 
   350                              <1> critIgnore  equ 0
   351                              <1> critRetry   equ 1
   352                              <1> critAbort   equ 2
   353                              <1> critFail    equ 3
     8                                  %include "./Source/Debug/debSym.inc"
     9                              <1> ;This file will include the debuging symbols
    10                              <1> 
    11                              <1> %define true 1
    12                              <1> %define false 0
    13                              <1> 
    14                              <1> ;Switch the DEBUG to false in production!
    15                              <1> %define DEBUG false
    16                              <1> %define DPBINFO false
    17                              <1> %define REGS true
    18                              <1> %define ENDSTATUS true
    19                              <1> %define ALLOCTEST true
    20                              <1> 
    21                              <1> 
    22                              <1> ;Use this space as the debug stack
    23                              <1> %define debStackTop 80000h
     9                                  %include "./Source/Include/dosError.inc"
    10                              <1> ;DOS Error codes
    11                              <1> 
    12                              <1> ;Extended Error Codes
    13                              <1> errInvFnc   equ 1   ;Invalid function number
    14                              <1> errFnf      equ 2   ;File not found
    15                              <1> errPnf      equ 3   ;Path not found
    16                              <1> errNhl      equ 4   ;Too many open handles, no handles left
    17                              <1> errAccDen   equ 5   ;Access denied (to resource)
    18                              <1> errBadHdl   equ 6   ;Invalid handle
    19                              <1> errMCBbad   equ 7   ;MCB's destroyed
    20                              <1> errNoMem    equ 8   ;Insufficient memory
    21                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    22                              <1> errBadEnv   equ 10  ;Invalid environment
    23                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    24                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    25                              <1> errInvDat   equ 13  ;Invalid data
    26                              <1> ;           equ 14  ;Reserved
    27                              <1> errBadDrv   equ 15  ;Invalid drive specified
    28                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    29                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    30                              <1> errNoFil    equ 18  ;No more files
    31                              <1> ;The following are Driver error codes + 19
    32                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    33                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    34                              <1> errUnkUnt   equ 20  ;Unknown Unit
    35                              <1> errDrvNR    equ 21  ;Drive not ready
    36                              <1> errUnkCmd   equ 22  ;Unknown Command
    37                              <1> errCRCerr   equ 23  ;Data (CRC) error
    38                              <1> errBadRLn   equ 24  ;Bad request structure length
    39                              <1> errSekErr   equ 25  ;Seek error
    40                              <1> errUnkMed   equ 26  ;Unknown media type
    41                              <1> errSecNF    equ 27  ;Sector not Found
    42                              <1> errNoPap    equ 28  ;Printer out of paper
    43                              <1> errWF       equ 29  ;Write fault
    44                              <1> errRF       equ 30  ;Read fault
    45                              <1> errGF       equ 31  ;General fault
    46                              <1> ;Number 32-33 reserved
    47                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change
    48                              <1> errNoFCB    equ 35  ;FCB unavailable
    49                              <1> ;Numbers 36-82 reserved
    50                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    51                              <1> errFI44     equ 83  ;Fail on INT 44h
    52                              <1> ;Numbers 84-88 reserved
    53                              <1> ;-----------------------------------------------------------------------------
    54                              <1> ;Error Loci
    55                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    56                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    57                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    58                              <1> eLocSer     equ 4   ;Serial Device error
    59                              <1> eLocMem     equ 5   ;Related to RAM
    60                              <1> ;-----------------------------------------------------------------------------
    61                              <1> ;Error Actions
    62                              <1> eActRet     equ 1   ;Retry
    63                              <1> eActDRet    equ 2   ;Delay then retry
    64                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    65                              <1> eActAbt     equ 4   ;Abort with cleanup
    66                              <1> eActKil     equ 5   ;Abort without cleanup
    67                              <1> eActIgn     equ 6   ;Ignore error
    68                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    69                              <1> ;-----------------------------------------------------------------------------
    70                              <1> ;Error classes
    71                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    72                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    73                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    74                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    75                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    76                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    77                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    78                              <1> eClsNotFnd  equ 8   ;Resource not found
    79                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    80                              <1> eClsLocked  equ 10  ;Resource Locked
    81                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    82                              <1> eClsClash   equ 12  ;Resource already exists!
    83                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  Segment .text align=1   ;Init code
    11                                  %include "./Source/Sysinit/sysInit.asm"
    12                              <1> ; We arrive here with the following values in the registers.
    13                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    14                              <1> ; dx  = Int 33h boot device number
    15                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    16                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    17 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    18 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    18 0000000B 909090909090909090- <1>
    18 00000014 909090909090909090- <1>
    18 0000001D 909090909090909090- <1>
    18 00000026 909090909090909090- <1>
    18 0000002F 909090909090909090- <1>
    18 00000038 909090909090909090- <1>
    18 00000041 909090909090909090- <1>
    18 0000004A 909090909090909090- <1>
    18 00000053 909090909090909090- <1>
    18 0000005C 909090909090909090- <1>
    18 00000065 909090909090909090- <1>
    18 0000006E 909090909090909090- <1>
    18 00000077 909090909090909090- <1>
    18 00000080 909090909090909090- <1>
    18 00000089 909090909090909090- <1>
    18 00000092 909090909090909090- <1>
    18 0000009B 909090909090909090- <1>
    18 000000A4 909090909090909090- <1>
    18 000000AD 909090909090909090- <1>
    18 000000B6 909090909090909090- <1>
    18 000000BF 909090909090909090- <1>
    18 000000C8 909090909090909090- <1>
    18 000000D1 909090909090909090- <1>
    18 000000DA 909090909090909090- <1>
    18 000000E3 909090909090909090- <1>
    18 000000EC 909090909090909090- <1>
    18 000000F5 909090909090909090- <1>
    18 000000FE 9090                <1>
    19                              <1> ;First move the alignment of the DOSSEG to 4Kb
    20 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    21 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    22 00000106 0F32                <1>     rdmsr
    23 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    24 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    25 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    26 00000110 4889FE              <1>     mov rsi, rdi        ;Save userbase in rsi temporarily
    27 00000113 4881E700F0FFFF      <1>     and rdi, ~0FFFh
    28 0000011A 4881C700100000      <1>     add rdi, 1000h      ;Make this pointer 4Kb aligned!
    29 00000121 89F8                <1>     mov eax, edi
    30 00000123 4889FA              <1>     mov rdx, rdi
    31 00000126 48C1EA20            <1>     shr rdx, 20h
    32 0000012A 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    33 0000012C 5A                  <1>     pop rdx
    34                              <1> ;------------------------------------------------;
    35                              <1> ;              Connect Debugger                  ;
    36                              <1> ;------------------------------------------------;
    37                              <1> %if DEBUG
    38                              <1> ;Only connect if in debug mode
    39                              <1>     mov eax, 0C501h ;Connect debugger
    40                              <1>     int 35h
    41                              <1> %endif
    42                              <1> ;------------------------------------------------;
    43                              <1> ;           Sanitise the data area               ;
    44                              <1> ;------------------------------------------------;
    45 0000012D B9[51D50300]        <1>     mov ecx, dSegLen
    46 00000132 30C0                <1>     xor al, al
    47 00000134 57                  <1>     push rdi    ;Temp save rdi on the stack
    48 00000135 F3AA                <1>     rep stosb
    49 00000137 5F                  <1>     pop rdi
    50                              <1> ;------------------------------------------------;
    51                              <1> ;          Start saving Basic DOS data           ;
    52                              <1> ;------------------------------------------------;
    53 00000138 64881425[10C00300]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    54                              <1> ;Copy DOS to its final resting place
    55 00000140 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    55 00000145 [00C00300]          <1>
    56 00000149 6448893425-         <1>     mov qword fs:[biosUBase], rsi
    56 0000014E [08C00300]          <1>
    57 00000152 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rbp
    58 00000155 4881C7[51D50300]    <1>     add rdi, dSegLen ;Move destination past end of data area
    59 0000015C 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    60 00000163 B900100000          <1>     mov ecx, 1000h
    61 00000168 F348A5              <1>     rep movsq
    62                              <1> 
    63 0000016B CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    64 0000016D 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    65 00000171 664489C0            <1>     mov ax, r8w
    66 00000175 64882425[11C00300]  <1>     mov byte fs:[numRemDrv], ah    ;Save num of phys int 33h rem drives
    67 0000017D 64880425[12C00300]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    68 00000185 64C60425[B2C00300]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    68 0000018D 05                  <1>
    69 0000018E 64C60425[13C00300]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    69 00000196 00                  <1>
    70 00000197 6466C70425-         <1>     mov word fs:[numFiles], 5      ;Default 8 files, at start 5
    70 0000019C [B4C00300]0500      <1>
    71 000001A2 6466C70425-         <1>     mov word fs:[maxHndls], 20     ;Maximum of 20 handles per app initially
    71 000001A7 [B6C00300]1400      <1>
    72 000001AD 64C60425[B3C00300]- <1>     mov byte fs:[numBuffers], 1    ;Default 30 buffers, at start 1 
    72 000001B5 01                  <1>
    73                              <1>     ;If no detected Int 33h devices, halt 
    74 000001B6 49C1E810            <1>     shr r8, 2*8
    75 000001BA 4584C0              <1>     test r8b, r8b
    76 000001BD 0F84F60A0000        <1>     jz errorInit
    77                              <1> ;------------------------------------------------;
    78                              <1> ;          Add additional page tables            ;
    79                              <1> ;------------------------------------------------;
    80                              <1> ;This will allow for up to 64Gb of addressible space
    81 000001C3 4889EF              <1>     mov rdi, rbp
    82                              <1>     ;Each entry is a 2Mb (200000h) multiple from 4Gb (100000000h)
    83 000001C6 B900780000          <1>     mov ecx, dosAPTsize/8   ;This many entries as qwords
    84 000001CB 57                  <1>     push rdi
    85 000001CC 48B883000000010000- <1>     mov rax, 100000000h | 83h ;Make each pde 2Mb, present and r/w
    85 000001D5 00                  <1>
    86                              <1> pdtLoop:
    87 000001D6 48AB                <1>     stosq
    88 000001D8 480500002000        <1>     add rax, 200000h
    89 000001DE FFC9                <1>     dec ecx
    90 000001E0 75F4                <1>     jnz pdtLoop
    91 000001E2 58                  <1>     pop rax ;Get the pointer back to the top of the memory area in rax
    92                              <1> ;Now we add every 4kb page to the page directory pointer table
    93                              <1> ;15 4kb pages to consider
    94 000001E3 0F20DF              <1>     mov rdi, cr3    ;Get Page level 4 table pointer
    95 000001E6 488B3F              <1>     mov rdi, qword [rdi] ;Go to next level
    96 000001E9 4881E700FFFFFF      <1>     and rdi, ~0FFh  ;Strip bottom two nybbles
    97 000001F0 4881C720000000      <1>     add rdi, 4*8    ;Go to 4th entry
    98 000001F7 B93C000000          <1>     mov ecx, 60
    99 000001FC 480D03000000        <1>     or rax, 3h      ;present and r/w
   100                              <1> pdptLoop:
   101 00000202 48AB                <1>     stosq
   102 00000204 480500100000        <1>     add rax, 1000h  ;Goto next 4kb page
   103 0000020A FFC9                <1>     dec ecx
   104 0000020C 75F4                <1>     jnz pdptLoop
   105 0000020E 0F20DF              <1>     mov rdi, cr3
   106 00000211 0F22DF              <1>     mov cr3, rdi
   107                              <1> 
   108                              <1> ;------------------------------------------------;
   109                              <1> ;                   MCB inits                    ;
   110                              <1> ;------------------------------------------------;
   111                              <1> mcbInit:
   112 00000214 B820E80000          <1>     mov eax, 0E820h
   113 00000219 CD35                <1>     int 35h
   114                              <1>     ;rax has pointer to USERBASE, rsi has pointer to memory map
   115 0000021B E808010000          <1>     call .mcbFindAddress
   116 00000220 7349                <1>     jnc .mcbi1  ;If found, proceed
   117                              <1>     ;Here, we try use E801h
   118 00000222 B801E80000          <1>     mov eax, 0E801h
   119 00000227 CD35                <1>     int 35h
   120 00000229 0FB7C0              <1>     movzx eax, ax   ;ax has 1Kb blocks from userbase to ISA hole (if pres)
   121 0000022C 0FB7DB              <1>     movzx ebx, bx   ;cx has 64Kb blocks from 16Mb to PCI hole
   122 0000022F 85C0                <1>     test eax, eax
   123 00000231 741B                <1>     jz .worst
   124 00000233 C1E009              <1>     shl eax, 9      ;Multiply by 9 to get number of bytes
   125 00000236 C1E310              <1>     shl ebx, 16     ;Multiply by 16 to get number of bytes
   126 00000239 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   127 00000241 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx
   128 00000249 E927010000          <1>     jmp mcbBuild
   129                              <1> .worst:
   130                              <1>     ;Get USERBASE pointer and subtract it from 2Mb
   131 0000024E B800002000          <1>     mov eax, 200000h
   132 00000253 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]   ;Get userbase
   132 00000258 [08C00300]          <1>
   133 0000025C 29D8                <1>     sub eax, ebx
   134 0000025E 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax  ;The leftover goes here
   135 00000266 E90A010000          <1>     jmp mcbBuild 
   136                              <1> .mcbi1:
   137 0000026B 488B10              <1>     mov rdx, qword [rax]    ;Save the userbase in rdx
   138 0000026E 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   138 00000277 00                  <1>
   139 00000278 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, fail boot
   140 0000027C 0F85C6000000        <1>     jne .mcbFail
   141 00000282 488B4008            <1>     mov rax, qword [rax + 8]    ;Get arena size in rax
   142                              <1>     ;PCI hole always exists so this value will always be a dword
   143 00000286 64890425[14C00300]  <1>     mov dword fs:[loProtMem], eax
   144 0000028E 4889D3              <1>     mov rbx, rdx    ;Get userbase into rbx
   145 00000291 4801C3              <1>     add rbx, rax    ;Check if it goes above 16Mb?
   146 00000294 4881FB00000001      <1>     cmp rbx, 1000000h  
   147 0000029B 773C                <1>     ja .skipISA
   148                              <1> ;Here we deal with ISA hole issues
   149 0000029D B820E80000          <1>     mov eax, 0E820h
   150 000002A2 CD35                <1>     int 35h
   151 000002A4 48B800000001000000- <1>     mov rax, 1000000h
   151 000002AD 00                  <1>
   152 000002AE E875000000          <1>     call .mcbFindAddress
   153 000002B3 0F82BC000000        <1>     jc mcbBuild  ;If address doesnt exist, must not be any memory above 16MB
   154 000002B9 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   154 000002C2 00                  <1>
   155 000002C3 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   156 000002C7 0F85A8000000        <1>     jne mcbBuild  
   157 000002CD 488B5808            <1>     mov rbx, qword [rax + 8]
   158 000002D1 64891C25[18C00300]  <1>     mov dword fs:[hiProtMem], ebx   ;Save data 
   159                              <1> .skipISA:
   160 000002D9 B820E80000          <1>     mov eax, 0E820h
   161 000002DE CD35                <1>     int 35h
   162 000002E0 48B800000000010000- <1>     mov rax, 100000000h ;4Gb boundary
   162 000002E9 00                  <1>
   163 000002EA E839000000          <1>     call .mcbFindAddress
   164 000002EF 0F8280000000        <1>     jc mcbBuild    ;If no memory above 4Gb, proceed as normal
   165 000002F5 48BB01000000010000- <1>     mov rbx, 100000001h ;Valid entry signature
   165 000002FE 00                  <1>
   166 000002FF 48395810            <1>     cmp qword [rax + 16], rbx ;If entry is marked as invalid, ignore domain
   167 00000303 7570                <1>     jne mcbBuild   
   168 00000305 488B5808            <1>     mov rbx, qword [rax + 8]
   169                              <1>     ;If this size is above 60Gb, store 60Gb as this is max long arena size!
   170 00000309 48B9000000000F0000- <1>     mov rcx, 0F00000000h    ;60Gb value
   170 00000312 00                  <1>
   171 00000313 4839CB              <1>     cmp rbx, rcx
   172 00000316 480F47D9            <1>     cmova rbx, rcx  ;Move the value of rcx into rbx IF it is above
   173 0000031A 6448891C25-         <1>     mov qword fs:[longMem], rbx   ;Save data 
   173 0000031F [1CC00300]          <1>
   174 00000323 E94D000000          <1>     jmp mcbBuild
   175                              <1> .mcbFindAddress:
   176                              <1> ;Takes an address in rax and tries to find the 24 byte entry in the memory map
   177                              <1> ;Entry: rax = Address of arena to search for
   178                              <1> ;       rsi = Pointer to memory map
   179                              <1> ;       ecx = Number of 24 byte entries
   180                              <1> ;Exit:  CF=NC : rax = Pointer to 24 byte entry 
   181                              <1> ;       CF=CY : value in rax not found
   182 00000328 56                  <1>     push rsi
   183 00000329 51                  <1>     push rcx
   184 0000032A 50                  <1>     push rax
   185                              <1> .mfa0:
   186 0000032B 483B06              <1>     cmp rax, qword [rsi]
   187 0000032E 7410                <1>     je .mcbAddressFound
   188 00000330 4881C618000000      <1>     add rsi, 24 ;Goto next entry
   189 00000337 FFC9                <1>     dec ecx
   190 00000339 79F0                <1>     jns .mfa0
   191                              <1> .mcbNoAddressFound: ;If ecx changes sign, we have used up all entries
   192 0000033B 58                  <1>     pop rax
   193 0000033C 59                  <1>     pop rcx
   194 0000033D 5E                  <1>     pop rsi
   195 0000033E F9                  <1>     stc
   196 0000033F C3                  <1>     ret
   197                              <1> .mcbAddressFound:
   198 00000340 4889F0              <1>     mov rax, rsi    ;Save pointer to entry in rax
   199 00000343 59                  <1>     pop rcx ;Pop old rax value off
   200 00000344 59                  <1>     pop rcx
   201 00000345 5E                  <1>     pop rsi
   202 00000346 F8                  <1>     clc
   203 00000347 C3                  <1>     ret
   204                              <1> .mcbFail:
   205 00000348 488D2D0C000000      <1>     lea rbp, .mcbFailmsg
   206 0000034F B804130000          <1>     mov eax, 1304h
   207 00000354 CD30                <1>     int 30h
   208 00000356 E95E090000          <1>     jmp errorInit
   209 0000035B 4D656D6F727920416C- <1> .mcbFailmsg: db "Memory Allocation Error",0Ah,0Dh,0
   209 00000364 6C6F636174696F6E20- <1>
   209 0000036D 4572726F720A0D00    <1>
   210                              <1> mcbBuild:
   211                              <1> ;Actually build the MCB chain here
   212                              <1> ;Start by computing the difference between userbase and DOS area
   213                              <1> ;This value needs to be subtracted from loProtMem to get free memory
   214 00000375 64488B1C25-         <1>     mov rbx, qword fs:[biosUBase]
   214 0000037A [08C00300]          <1>
   215 0000037E 488DB5[00000000]    <1>     lea rsi, qword [rbp + dosMCB]  ;Get the fs relative address of this ptr
   216 00000385 56                  <1>     push rsi    ;Save ptr
   217 00000386 4881C610000000      <1>     add rsi, mcb.program    ;Point to free space
   218 0000038D 4829DE              <1>     sub rsi, rbx    ;Get difference from userbase and first byte after DOS
   219 00000390 64293425[14C00300]  <1>     sub dword fs:[loProtMem], esi  ;Hide DOS data and code segs
   220 00000398 5B                  <1>     pop rbx
   221 00000399 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd  ;Mark as end of chain
   222 0000039C 48C7430108000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerDOS
   223 000003A4 648B3425[14C00300]  <1>     mov esi, dword fs:[loProtMem]
   224 000003AC C1EE04              <1>     shr esi, 4  ;Shift down by a nybble to get paragraphs
   225 000003AF 897309              <1>     mov dword [rbx + mcb.blockSize], esi
   226 000003B2 6448891C25-         <1>     mov qword fs:[mcbChainPtr], rbx ;Save pointer
   226 000003B7 [78C00300]          <1>
   227                              <1> 
   228                              <1>     ;Now check the hiProtMem count. If it is 0, skip ISA hole computations.
   229 000003BB 64813C25[18C00300]- <1>     cmp dword fs:[hiProtMem], 0
   229 000003C3 00000000            <1>
   230 000003C7 746E                <1>     jz .skipISA
   231                              <1>     ;Here if an ISA hole exists, place a MCB around it
   232 000003C9 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)    
   233                              <1>     ;Remove one MCB worth of space from alloc
   234 000003D0 31C9                <1>     xor ecx, ecx
   235 000003D2 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   236 000003D5 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   237 000003DB C1E104              <1>     shl ecx, 4  ;Convert from paragraphs
   238 000003DE C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn  ;Change marker in anchor
   239 000003E1 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   240 000003E4 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   241 000003E7 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   242 000003EF 48B900000001000000- <1>     mov rcx, 1000000h   ;Move 16Mb in rcx
   242 000003F8 00                  <1>
   243 000003F9 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   244 000003FC 480510000000        <1>     add rax, mcb_size
   245 00000402 4829C1              <1>     sub rcx, rax    ;Take their difference
   246 00000405 C1E904              <1>     shr ecx, 4
   247 00000408 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   248 0000040B C1E104              <1>     shl ecx, 4  ;Get bytes again
   249 0000040E 4881C310000000      <1>     add rbx, mcb_size
   250 00000415 4801CB              <1>     add rbx, rcx
   251                              <1>     ;RBX should now be at 16Mb
   252 00000418 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   253 0000041B 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   254 00000423 648B0C25[18C00300]  <1>     mov ecx, dword fs:[hiProtMem]
   255 0000042B C1E904              <1>     shr ecx, 4  ;Get paragraphs
   256 0000042E 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   257 00000434 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   258                              <1> .skipISA:
   259                              <1>     ;Now check the longMem count. If it is 0, skip PCI hole computations.
   260                              <1>     ;rbx points to a block with "Z" marker
   261 00000437 64813C25[1CC00300]- <1>     cmp dword fs:[longMem], 0
   261 0000043F 00000000            <1>
   262 00000443 7470                <1>     jz .exit
   263                              <1>     ;Add PCI hole MCB
   264 00000445 816B0901000000      <1>     sub dword [rbx + mcb.blockSize], (mcb_size>>4)
   265                              <1>     ;Remove one MCB worth of space from alloc
   266 0000044C 31C9                <1>     xor ecx, ecx
   267 0000044E 8B4B09              <1>     mov ecx, dword [rbx + mcb.blockSize]
   268 00000451 81C101000000        <1>     add ecx, (mcb_size >> 4)    ;Add one as the block starts AFTER the MCB
   269 00000457 C1E104              <1>     shl ecx, 4  ;Get bytes
   270 0000045A C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn ;Change marker in prev MCB
   271 0000045D 4801CB              <1>     add rbx, rcx   ;Point rbx to next space
   272 00000460 C6034D              <1>     mov byte [rbx + mcb.marker], mcbMarkCtn
   273 00000463 48C7430107000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerHole
   274 0000046B 48B900000000010000- <1>     mov rcx, 100000000h   ;Move 4Gb in rcx
   274 00000474 00                  <1>
   275 00000475 4889D8              <1>     mov rax, rbx    ;Get mcb pointer in rax
   276 00000478 480510000000        <1>     add rax, mcb_size
   277 0000047E 4829C1              <1>     sub rcx, rax    ;Take their difference
   278 00000481 C1E904              <1>     shr ecx, 4
   279 00000484 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx    ;Save the difference
   280 00000487 C1E104              <1>     shl ecx, 4  ;Get bytes again
   281 0000048A 4881C310000000      <1>     add rbx, mcb_size
   282 00000491 4801CB              <1>     add rbx, rcx
   283                              <1>     ;RBX should now be at 4Gb
   284 00000494 C6035A              <1>     mov byte [rbx + mcb.marker], mcbMarkEnd
   285 00000497 48C7430100000000    <1>     mov qword [rbx + mcb.owner], mcbOwnerFree
   286 0000049F 64488B0C25-         <1>     mov rcx, qword fs:[longMem]
   286 000004A4 [1CC00300]          <1>
   287 000004A8 48C1E904            <1>     shr rcx, 4
   288 000004AC 81E901000000        <1>     sub ecx, (mcb_size>>4)  ;Reserve space for one mcb
   289 000004B2 894B09              <1>     mov dword [rbx + mcb.blockSize], ecx
   290                              <1> .exit:
   291                              <1>     ;The last arena doesn't need to reserve space for one more MCB
   292 000004B5 81430901000000      <1>     add dword [rbx + mcb.blockSize], (mcb_size>>4)
   293                              <1> ;------------------------------------------------;
   294                              <1> ;          Kernel inits and adjustments          ;
   295                              <1> ;------------------------------------------------;
   296                              <1> ;Adjust Interrupt Entries Int 40h-49h
   297                              <1> adjInts:
   298 000004BC B340                <1>     mov bl, 40h
   299 000004BE B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   300 000004C3 CD35                <1>     int 35h
   301 000004C5 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
   302 000004CA 488D3D4C080000      <1>     lea rdi, intData
   303 000004D1 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   304                              <1> .ai0:
   305 000004D3 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
   306 000004D8 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
   307 000004DB 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
   308                              <1> .ai1:
   309 000004DE CD35                <1>     int 35h
   310 000004E0 4881C708000000      <1>     add rdi, 8
   311 000004E7 FFC1                <1>     inc ecx
   312 000004E9 81F950000000        <1>     cmp ecx, 50h
   313 000004EF 75E2                <1>     jne .ai0
   314                              <1> 
   315                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   316                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   317                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   318                              <1>     %if DEBUG
   319                              <1> debugPopUpMsg:
   320                              <1>     push rbx
   321                              <1>     push rbp
   322                              <1>     push rcx
   323                              <1>     push rdx
   324                              <1>     mov ecx, 53 ;A large number of lines
   325                              <1>     xor edx, edx    ;COM 1
   326                              <1> .cls:
   327                              <1>     mov eax, 010Ah ;Transmit Line feed
   328                              <1>     int 34h
   329                              <1>     dec ecx
   330                              <1>     jnz .cls
   331                              <1>     lea rbx, qword [debPrintNullString + rbp]
   332                              <1>     lea rbp, .msg
   333                              <1>     call rbx
   334                              <1>     jmp short .exit
   335                              <1> .msg:   db 0Ah,0Dh,"SCP/DOS Kernel Debugger Connected on COM1:2400,n,8,1",0Ah,0Dh,0
   336                              <1> .exit:
   337                              <1>     pop rdx
   338                              <1>     pop rcx
   339                              <1>     pop rbp
   340                              <1>     pop rbx
   341                              <1>     %endif
   342                              <1> 
   343                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   344 000004F1 488D15C1070000      <1>     lea rdx, errorInit ;Get segment start address
   345 000004F8 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   346 000004FD CD41                <1>     int 41h
   347 000004FF 488D15B3070000      <1>     lea rdx, errorInit ;Get segment start address
   348 00000506 B844250000          <1>     mov eax, 2544h
   349 0000050B CD41                <1>     int 41h
   350                              <1> ;------------------------------------------------;
   351                              <1> ;          Driver Adjustments and inits          ;
   352                              <1> ;------------------------------------------------;
   353                              <1> ;Modify the pointers in nData before putting them in the data area
   354 0000050D 48012D89080000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   355 00000514 48012D8C080000      <1>     add qword [nData + drvHdr.strPtr], rbp
   356 0000051B 48012D8D080000      <1>     add qword [nData + drvHdr.intPtr], rbp
   357                              <1> ;Copy the Null driver to its location in Sysvars
   358 00000522 B922000000          <1>     mov ecx, drvHdr_size
   359 00000527 488D356F080000      <1>     lea rsi, qword [nData]
   360 0000052E 488DBD[C3C00300]    <1>     lea rdi, qword [rbp + nulDevHdr]
   361 00000535 F3A4                <1>     rep movsb   
   362                              <1> 
   363                              <1> ;Adjust the addresses in the other driver headers 
   364 00000537 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   364 00000539 [BA22000000000000]  <1>
   365 00000541 B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   366 00000546 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   367                              <1> adjDrivers:
   368 0000054A E857070000          <1>     call adjustDrvHdr
   369 0000054F E2F9                <1>     loop adjDrivers
   370                              <1> 
   371                              <1> ;Open NUL
   372 00000551 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr]
   373 00000558 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   374 0000055B C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   375 0000055F FF95[CDC00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   376 00000565 FF95[D5C00300]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   377                              <1> ;Open CON
   378                              <1> conInit:    ;Rather than keeping this resident... do it here
   379                              <1> ;Start by hooking int 3Bh and int 49h as part of the CON driver
   380 0000056B 488D95[A1250000]    <1>     lea rdx, qword [rbp + fastOutput]
   381 00000572 B849250000          <1>     mov eax, 2549h
   382 00000577 CD41                <1>     int 41h ;Hook int 49h (fast CON output)
   383 00000579 488D95[A9250000]    <1>     lea rdx, qword [rbp + ctrlBreak]
   384 00000580 B83B250000          <1>     mov eax, 253Bh
   385 00000585 CD41                <1>     int 41h ;Hook int 3Bh
   386                              <1> .ci0:
   387 00000587 B401                <1>     mov ah, 01      ;Get buffer status
   388 00000589 CD36                <1>     int 36h
   389 0000058B 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   390 0000058D 30E4                <1>     xor ah, ah
   391 0000058F CD36                <1>     int 36h ;Read key to flush from buffer
   392 00000591 EBF4                <1>     jmp short .ci0
   393                              <1> .ci1:
   394 00000593 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   395 00000598 CD30                <1>     int 30h
   396 0000059A B402                <1>     mov ah, 02h
   397 0000059C 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   398 0000059E 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   399 000005A0 CD30                <1>     int 30h
   400 000005A2 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   401 000005A4 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   402 000005A9 CD30                <1>     int 30h
   403                              <1> 
   404                              <1>     ;Save ptr to ConHdr in Sysvars
   405 000005AB 488D85[BA220000]    <1>     lea rax, qword [rbp + conHdr]
   406 000005B2 6448890425-         <1>     mov qword fs:[conPtr], rax
   406 000005B7 [98C00300]          <1>
   407                              <1> 
   408                              <1>     ;Save ptr to ClkHdr in Sysvars
   409 000005BB 488D85[20230000]    <1>     lea rax, qword [rbp + clkHdr]
   410 000005C2 6448890425-         <1>     mov qword fs:[clockPtr], rax
   410 000005C7 [90C00300]          <1>
   411                              <1> 
   412                              <1> ;------------------------------------------------;
   413                              <1> ;         Link DOS to temporary Buffer           ;
   414                              <1> ;------------------------------------------------;
   415                              <1> tempBufferInit:
   416 000005CB 488DBD[C8020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   417 000005D2 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   417 000005D7 [A2C00300]          <1>
   418 000005DB 31C0                <1>     xor eax, eax
   419 000005DD 48FFC8              <1>     dec rax
   420 000005E0 48AB                <1>     stosq   ;.nextBufPtr, end of list
   421 000005E2 AA                  <1>     stosb   ;.driveNumber, Free entry
   422 000005E3 48FFC0              <1>     inc rax
   423 000005E6 AA                  <1>     stosb   ;.bufferFlags, No flags
   424                              <1> ;------------------------------------------------;
   425                              <1> ;         Init msd driver, create DPB            ;
   426                              <1> ;------------------------------------------------;
   427                              <1> storageInits:
   428                              <1> ;First save dpb pointer in sysvars
   429 000005E7 488D9D[69010000]    <1>     lea rbx, qword [rbp + firstDPB]
   430 000005EE 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   430 000005F3 [80C00300]          <1>
   431                              <1> ;Open Mass Storage
   432                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   433                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   434                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   435                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   436                              <1>     ;mov al, byte fs:[numLogDrv]
   437                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   438                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   439                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   440                              <1>     ;Check if it returned OK first!
   441                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   442                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   443                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   444                              <1>     ;mov byte fs:[numLogDrv], al
   445                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   446                              <1> 
   447                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   448 000005F7 E8C3070000          <1>     call diskInit
   449 000005FC 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   450 000005FF 648A0425[13C00300]  <1>     mov al, byte fs:[numLogDrv]
   451 00000607 488D95[612C0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   452 0000060E 30C9                <1>     xor cl, cl  ;Clear counter
   453 00000610 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   453 00000615 [80C00300]          <1>
   454                              <1> .si0:   
   455 00000619 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   456 0000061C B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   457 0000061E CD41                <1>     int 41h
   458                              <1> ;Add other data to DPB
   459 00000620 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   460 00000623 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   461 00000626 50                  <1>     push rax
   462 00000627 488D87[42230000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   463 0000062E 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   464 00000632 58                  <1>     pop rax
   465 00000633 FEC1                <1>     inc cl
   466 00000635 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   467 00000637 7416                <1>     je .si1
   468 00000639 50                  <1>     push rax
   469 0000063A 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   470 0000063E 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   471 00000642 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   472 00000645 58                  <1>     pop rax
   473 00000646 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   474 0000064D EBCA                <1>     jmp short .si0
   475                              <1> .si1:
   476                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   477 0000064F 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   478 00000657 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   479                              <1> ;------------------------------------------------;
   480                              <1> ;          Find largest sector size              ;
   481                              <1> ;------------------------------------------------;
   482                              <1> sectorSizeSearch:
   483                              <1> ;Done by reading BPB's for each drive
   484 0000065A 488D9D[612C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   485                              <1>     
   486                              <1>     ;Go thru each block individually
   487 00000661 31C0                <1>     xor eax, eax
   488 00000663 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   489                              <1> .findLargest:
   490 00000666 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   491 0000066A 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   492 0000066F 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   493 00000676 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   494 00000679 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   495 0000067C 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   496 0000067E 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   496 00000683 [A0C00300]          <1>
   497                              <1>     
   498                              <1> ;------------------------------------------------;
   499                              <1> ;                 Temp CDS inits                 ;
   500                              <1> ;------------------------------------------------;
   501                              <1> tempCDS:
   502                              <1> ;Build a temporary CDS for Drive A to use it for booting
   503 00000687 488DBD[6D020000]    <1>     lea rdi, qword [rbp + initCDS]
   504 0000068E 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   504 00000693 [AAC00300]          <1>
   505 00000697 B943000000          <1>     mov ecx, 67 ;Buffer length
   506 0000069C 31C0                <1>     xor eax, eax
   507 0000069E 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   508 000006A1 F3AA                <1>     rep stosb   ;Zero out the path string
   509 000006A3 4889DF              <1>     mov rdi, rbx
   510 000006A6 B041                <1>     mov al, "A"
   511 000006A8 AA                  <1>     stosb
   512 000006A9 B03A                <1>     mov al, ":"
   513 000006AB AA                  <1>     stosb
   514 000006AC B05C                <1>     mov al, "\"
   515 000006AE AA                  <1>     stosb
   516 000006AF 4889DF              <1>     mov rdi, rbx
   517 000006B2 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   518 000006B8 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   518 000006BD [80C00300]          <1>
   519 000006C1 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   520 000006C5 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   521                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   522                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   523                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   524 000006CB 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   525                              <1> ;------------------------------------------------;
   526                              <1> ;     Set up general PSP areas and DOS vars      ;
   527                              <1> ;------------------------------------------------;
   528                              <1>     ;Additional DOS Vars init
   529 000006CE 31C0                <1>     xor eax, eax
   530 000006D0 64880425[3BC10300]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   531 000006D8 64880425[3DC10300]  <1>     mov byte fs:[breakFlag], al  ;Break off
   532 000006E0 64880425[3EC10300]  <1>     mov byte fs:[verifyFlag], al ;Write only
   533 000006E8 64880425[3CC10300]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   534 000006F0 64880425[0EC10300]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   535 000006F8 64880425[0FC10300]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   536 00000700 64C60425[10C10300]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   536 00000708 FF                  <1>
   537 00000709 6466890425-         <1>     mov word fs:[errorLevel], ax   ;Last return code is 0, no error
   537 0000070E [38C10300]          <1>
   538 00000712 64880425[3AC10300]  <1>     mov byte fs:[allocStrat], al    ;First Fit
   539                              <1> 
   540                              <1>     ;SYSVARS PSP Init
   541 0000071A 488D1DDFF8FFFF      <1>     lea rbx, qword [tempPSP]
   542 00000721 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   542 00000726 [26C10300]          <1>
   543 0000072A 53                  <1>     push rbx
   544 0000072B 4881C380000000      <1>     add rbx, psp.dta
   545 00000732 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   545 00000737 [1EC10300]          <1>
   546 0000073B 5B                  <1>     pop rbx
   547 0000073C 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   548 00000741 C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   549 00000748 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   550 0000074C 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   551 00000750 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   552 00000754 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   553 00000758 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   553 00000761 00                  <1>
   554 00000762 48AB                <1>     stosq   ;8 bytes
   555 00000764 31C0                <1>     xor eax, eax
   556 00000766 48AB                <1>     stosq   ;16 bytes
   557 00000768 AB                  <1>     stosd   ;20 bytes
   558 00000769 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   559 00000771 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   560 00000775 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   561 00000779 4889DA              <1>     mov rdx, rbx
   562 0000077C B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   563 00000781 CD41                <1>     int 41h
   564 00000783 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   565 00000787 B843350000          <1>     mov eax, 3543h
   566 0000078C CD41                <1>     int 41h
   567 0000078E 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   568 00000792 B844350000          <1>     mov eax, 3544h
   569 00000797 CD41                <1>     int 41h
   570 00000799 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   571                              <1> 
   572 0000079D B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   573 000007A2 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   574 000007A6 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   575                              <1> ;------------------------------------------------;
   576                              <1> ;          Default File Handle Creation          ;
   577                              <1> ;------------------------------------------------;
   578                              <1> defaultFileHandles:
   579                              <1> ;Fill in the default file table entries
   580 000007A8 488D9D[10000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   581 000007AF 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   582 000007B6 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   583 000007BC 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   583 000007C1 [88C00300]          <1>
   584                              <1> ;GOTO FIRST FILE 
   585 000007C5 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   586                              <1> ;Write CON
   587 000007CC 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   588 000007D1 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   589 000007D7 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   590 000007DB C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   591                              <1>     ;No EOF when reading from the device
   592 000007DF 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   592 000007E4 [98C00300]          <1>
   593 000007E8 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   594                              <1>     ;Ignore disk related fields and Date/Time of open
   595 000007EC 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   596 000007F0 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   597                              <1>     ;11 chars in 8.3 name
   598 000007F7 48A5                <1>     movsq   ;8 chars
   599 000007F9 66A5                <1>     movsw   ;10 chars
   600 000007FB A4                  <1>     movsb   ;11 chars
   601 000007FC 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   601 00000801 [26C10300]          <1>
   602 00000805 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   603                              <1> ;GOTO NEXT ENTRY
   604 00000809 4881C343000000      <1>     add rbx, sft_size   ;Goto next SFT
   605                              <1> ;Write AUX
   606 00000810 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   607 00000815 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   608 0000081B C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   609 0000081F C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   610                              <1>     ;No EOF when reading from the device
   611 00000823 488B85[DC220000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   612 0000082A 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   613                              <1>     ;Ignore disk related fields and Date/Time of open
   614 0000082E 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   615 00000832 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   616                              <1>     ;11 chars in 8.3 name
   617 00000839 48A5                <1>     movsq   ;8 chars
   618 0000083B 66A5                <1>     movsw   ;10 chars
   619 0000083D A4                  <1>     movsb   ;11 chars
   620 0000083E 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   620 00000843 [26C10300]          <1>
   621 00000847 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   622                              <1> ;GOTO NEXT ENTRY
   623 0000084B 4881C343000000      <1>     add rbx, sft_size   ;Goto next SFT
   624                              <1> ;Write PRN
   625 00000852 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   626 00000857 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   627 0000085D C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   628 00000861 C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   629                              <1>     ;Want EOF when reading from to the device
   630 00000865 488B85[FE220000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   631 0000086C 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   632                              <1>     ;Ignore disk related fields and Date/Time of open
   633 00000870 488D7B2C            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   634 00000874 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   635                              <1>     ;11 chars in 8.3 name
   636 0000087B 48A5                <1>     movsq   ;8 chars
   637 0000087D 66A5                <1>     movsw   ;10 chars
   638 0000087F A4                  <1>     movsb   ;11 chars
   639 00000880 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   639 00000885 [26C10300]          <1>
   640 00000889 48894337            <1>     mov qword [rbx + sft.qPSPOwner], rax
   641 0000088D EB21                <1>     jmp short .dfhExit
   642 0000088F 434F4E202020202020- <1> .dfhCon db "CON        "
   642 00000898 2020                <1>
   643 0000089A 415558202020202020- <1> .dfhAux db "AUX        "
   643 000008A3 2020                <1>
   644 000008A5 50524E202020202020- <1> .dfhPrn db "PRN        "
   644 000008AE 2020                <1>
   645                              <1> .dfhExit:
   646                              <1> ;------------------------------------------------;
   647                              <1> ;               Load CONFIG.SYS                  ;
   648                              <1> ;------------------------------------------------;
   649                              <1> ;------------------------------------------------;
   650                              <1> ;              Process CONFIG.SYS                ;
   651                              <1> ;------------------------------------------------;
   652                              <1> ;------------------------------------------------;
   653                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   654                              <1> ;------------------------------------------------;
   655                              <1> ;------------------------------------------------;
   656                              <1> ;   Setup Final Data Areas With Overrides from   ;
   657                              <1> ;                  CONFIG.SYS                    ;
   658                              <1> ;------------------------------------------------;
   659                              <1> ;------------------------------------------------;
   660                              <1> ;           Load Command interpreter             ;
   661                              <1> ;------------------------------------------------;
   662 000008B0 488D1513040000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   663 000008B7 B409                <1>     mov ah, 09h
   664 000008B9 CD41                <1>     int 41h
   665                              <1> ;Resize DOS allocation before loading COMMAND.COM
   666 000008BB 644C8B0425-         <1>     mov r8, qword fs:[mcbChainPtr] ;Get ptr
   666 000008C0 [78C00300]          <1>
   667 000008C4 4981C010000000      <1>     add r8, mcb.program
   668 000008CB BBE8120000          <1>     mov ebx, dynamicDataAreaLength
   669 000008D0 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   670 000008D3 FFC3                <1>     inc ebx
   671 000008D5 B44A                <1>     mov ah, 4Ah
   672 000008D7 CD41                <1>     int 41h
   673                              <1>     
   674                              <1>     %if DEBUG && ALLOCTEST
   675                              <1> ;Test Allocation, Growth and Deallocation
   676                              <1>     mov r15, qword fs:[currentPSP]
   677                              <1>     mov qword fs:[currentPSP], 5A5Ah ;5A5Ah is a reserved addr
   678                              <1>     mov ebx, 10 ;Allocate 10 paragraphs pls
   679                              <1>     mov ah, 48h ;Allocate
   680                              <1>     int 41h
   681                              <1> 
   682                              <1>     mov r8, rax ;Move the pointer to r8
   683                              <1>     mov ebx, 20 ;Increase allocation to 20 paragraphs
   684                              <1>     mov ah, 4Ah
   685                              <1>     int 41h
   686                              <1> 
   687                              <1>     mov ah, 49h ;Free r8
   688                              <1>     int 41h
   689                              <1>     mov qword fs:[currentPSP], r15
   690                              <1>     %endif
   691                              <1> 
   692                              <1>     %if ENDSTATUS
   693                              <1> debugFinal:
   694                              <1>     ;Print system state
   695 000008D9 55                  <1>     push rbp    ;Only rbp really matters here
   696 000008DA 4989E8              <1>     mov r8, rbp
   697                              <1> 
   698 000008DD 488D2DD0020000      <1>     lea rbp, .msg2
   699 000008E4 4D8D88[C4010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   700 000008EB 41FFD1              <1>     call r9
   701                              <1> 
   702 000008EE 488D1D48010000      <1>     lea rbx, qword [.msg + 15]
   703 000008F5 64488B0425-         <1>     mov rax, qword fs:[biosUBase]
   703 000008FA [08C00300]          <1>
   704                              <1> 
   705 000008FE 4D8D88[FF040000]    <1>     lea r9, qword [r8 + overlayQword]
   706 00000905 41FFD1              <1>     call r9
   707                              <1> 
   708 00000908 4881C31B000000      <1>     add rbx, 19+8
   709 0000090F 64488B0425-         <1>     mov rax, qword fs:[dosSegPtr]
   709 00000914 [00C00300]          <1>
   710 00000918 41FFD1              <1>     call r9
   711                              <1> 
   712 0000091B 4881C31B000000      <1>     add rbx, 19+8
   713 00000922 64488B0425-         <1>     mov rax, qword fs:[mcbChainPtr]
   713 00000927 [78C00300]          <1>
   714 0000092B 41FFD1              <1>     call r9
   715                              <1> 
   716 0000092E 4881C31C000000      <1>     add rbx, 20+8
   717 00000935 4D8D88[BC040000]    <1>     lea r9, qword [r8 + overlayDword]
   718 0000093C 648B0425[14C00300]  <1>     mov eax, dword fs:[loProtMem]
   719 00000944 41FFD1              <1>     call r9
   720                              <1> 
   721 00000947 4881C312000000      <1>     add rbx, 10+8
   722 0000094E 648B0425[18C00300]  <1>     mov eax, dword fs:[hiProtMem]
   723 00000956 41FFD1              <1>     call r9
   724                              <1> 
   725 00000959 4881C312000000      <1>     add rbx, 10+8
   726 00000960 64488B0425-         <1>     mov rax, qword fs:[longMem]
   726 00000965 [1CC00300]          <1>
   727 00000969 4D8D88[FF040000]    <1>     lea r9, qword [r8 + overlayQword]
   728 00000970 41FFD1              <1>     call r9
   729                              <1> 
   730 00000973 4881C31B000000      <1>     add rbx, 19+8
   731 0000097A 64488B0425-         <1>     mov rax, qword fs:[dpbHeadPtr]
   731 0000097F [80C00300]          <1>
   732 00000983 41FFD1              <1>     call r9
   733                              <1> 
   734 00000986 4881C31B000000      <1>     add rbx, 19+8
   735 0000098D 64488B0425-         <1>     mov rax, qword fs:[sftHeadPtr]
   735 00000992 [88C00300]          <1>
   736 00000996 41FFD1              <1>     call r9
   737                              <1> 
   738 00000999 4881C31B000000      <1>     add rbx, 19+8
   739 000009A0 64488B0425-         <1>     mov rax, qword fs:[bufHeadPtr]
   739 000009A5 [A2C00300]          <1>
   740 000009A9 41FFD1              <1>     call r9
   741                              <1> 
   742 000009AC 4881C31B000000      <1>     add rbx, 19+8
   743 000009B3 64488B0425-         <1>     mov rax, qword fs:[cdsHeadPtr]
   743 000009B8 [AAC00300]          <1>
   744 000009BC 41FFD1              <1>     call r9
   745                              <1> 
   746 000009BF 4D8D88[4A040000]    <1>     lea r9, qword [r8 + overlayByte]
   747                              <1> 
   748 000009C6 4881C32C000000      <1>     add rbx, 25+19
   749 000009CD 64480FB60425-       <1>     movzx rax, byte fs:[numLogDrv]
   749 000009D3 [13C00300]          <1>
   750 000009D7 41FFD1              <1>     call r9
   751                              <1> 
   752 000009DA 4881C31E000000      <1>     add rbx, 30
   753 000009E1 64480FB60425-       <1>     movzx rax, byte fs:[numFixDrv]
   753 000009E7 [12C00300]          <1>
   754 000009EB 41FFD1              <1>     call r9
   755                              <1> 
   756 000009EE 4881C31E000000      <1>     add rbx, 30
   757 000009F5 64480FB60425-       <1>     movzx rax, byte fs:[numRemDrv]
   757 000009FB [11C00300]          <1>
   758 000009FF 41FFD1              <1>     call r9
   759                              <1> 
   760 00000A02 4881C310000000      <1>     add rbx, 16
   761 00000A09 64480FB60425-       <1>     movzx rax, byte fs:[bootDrive]
   761 00000A0F [10C00300]          <1>
   762 00000A13 0441                <1>     add al, "A"
   763 00000A15 8803                <1>     mov byte [rbx], al
   764                              <1> 
   765 00000A17 488D2D10000000      <1>     lea rbp, .msg
   766 00000A1E 4D8D88[C4010000]    <1>     lea r9, qword [r8 + debPrintNullString]
   767 00000A25 41FFD1              <1>     call r9
   768 00000A28 5D                  <1>     pop rbp
   769 00000A29 E99E010000          <1>     jmp l1
   770 00000A2E 42494F532075736572- <1> .msg:   db "BIOS user base FFFFFFFFFFFFFFFFh",0Ah,0Dh ;15 chars to number
   770 00000A37 206261736520464646- <1>
   770 00000A40 464646464646464646- <1>
   770 00000A49 46464646680A0D      <1>
   771 00000A50 444F53205365672046- <1>         db "DOS Seg FFFFFFFFFFFFFFFFh",0Ah,0Dh
   771 00000A59 464646464646464646- <1>
   771 00000A62 464646464646680A0D  <1>
   772 00000A6B 4D4342707472202046- <1>         db "MCBptr  FFFFFFFFFFFFFFFFh ",0Ah,0Dh
   772 00000A74 464646464646464646- <1>
   772 00000A7D 46464646464668200A- <1>
   772 00000A86 0D                  <1>
   773 00000A87 4172656E61313A2046- <1>         db "Arena1: FFFFFFFFh ",
   773 00000A90 464646464646466820  <1>
   774 00000A99 4172656E61323A2046- <1>         db "Arena2: FFFFFFFFh ",
   774 00000AA2 464646464646466820  <1>
   775 00000AAB 4172656E61333A2046- <1>         db "Arena3: FFFFFFFFFFFFFFFFh",0Ah,0Dh
   775 00000AB4 464646464646464646- <1>
   775 00000ABD 464646464646680A0D  <1>
   776 00000AC6 445042707472202046- <1>         db "DPBptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   776 00000ACF 464646464646464646- <1>
   776 00000AD8 464646464646680A0D  <1>
   777 00000AE1 534654707472202046- <1>         db "SFTptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   777 00000AEA 464646464646464646- <1>
   777 00000AF3 464646464646680A0D  <1>
   778 00000AFC 627566507472202046- <1>         db "bufPtr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   778 00000B05 464646464646464646- <1>
   778 00000B0E 464646464646680A0D  <1>
   779 00000B17 434453707472202046- <1>         db "CDSptr  FFFFFFFFFFFFFFFFh",0Ah,0Dh
   779 00000B20 464646464646464646- <1>
   779 00000B29 464646464646680A0D  <1>
   780 00000B32 4E756D626572206F66- <1>         db "Number of Logical Drives FFh",0Ah,0Dh
   780 00000B3B 204C6F676963616C20- <1>
   780 00000B44 447269766573204646- <1>
   780 00000B4D 680A0D              <1>
   781 00000B50 4E756D626572206F66- <1>         db "Number of Fixed Drives   FFh",0Ah,0Dh
   781 00000B59 204669786564204472- <1>
   781 00000B62 697665732020204646- <1>
   781 00000B6B 680A0D              <1>
   782 00000B6E 4E756D626572206F66- <1>         db "Number of Removable Drvs FFh",0Ah,0Dh
   782 00000B77 2052656D6F7661626C- <1>
   782 00000B80 652044727673204646- <1>
   782 00000B89 680A0D              <1>
   783 00000B8C 426F6F742064726976- <1>         db "Boot drive Z:",0Ah,0Dh
   783 00000B95 65205A3A0A0D        <1>
   784 00000B9B 4C6F6164696E672043- <1>         db "Loading COMMAND.COM...",0Ah,0Dh,0
   784 00000BA4 4F4D4D414E442E434F- <1>
   784 00000BAD 4D2E2E2E0A0D00      <1>
   785 00000BB4 0A0D456E64206F6620- <1> .msg2:  db 0Ah,0Dh,"End of boot summary",0Ah,0Dh,0
   785 00000BBD 626F6F742073756D6D- <1>
   785 00000BC6 6172790A0D00        <1>
   786                              <1>     %endif
   787                              <1> l1:
   788 00000BCC B401                <1>     mov ah, 01h  ;Write with echo
   789 00000BCE CD41                <1>     int 41h
   790 00000BD0 3C00                <1>     cmp al, 0
   791 00000BD2 7402                <1>     je l2
   792 00000BD4 EBF6                <1>     jmp short l1
   793                              <1> l2:
   794 00000BD6 B407                <1>     mov ah, 07h
   795 00000BD8 CD41                <1>     int 41h
   796 00000BDA 3C42                <1>     cmp al, 42h
   797 00000BDC 75EE                <1>     jne l1
   798                              <1> l3:
   799 00000BDE 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   799 00000BE3 [8BC20300]0000      <1>
   800 00000BE9 488D9D[24C00300]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   801 00000BF0 488D85[8BC20300]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   802 00000BF7 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   803 00000BFA C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   804 00000BFE 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   805 00000C04 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   806 00000C08 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   807 00000C0F FF95[2A230000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   808 00000C15 FF95[32230000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   809                              <1> 
   810 00000C1B B403                <1>     mov ah, 03h
   811 00000C1D 30FF                <1>     xor bh, bh
   812 00000C1F CD30                <1>     int 30h
   813 00000C21 30D2                <1>     xor dl, dl  ;0 column
   814 00000C23 B402                <1>     mov ah, 02h
   815 00000C25 CD30                <1>     int 30h
   816                              <1> 
   817 00000C27 488D9D[8BC20300]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   818 00000C2E 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   819 00000C32 E832000000          <1>     call .clkHexToBCD
   820 00000C37 B40E                <1>     mov ah, 0Eh
   821 00000C39 B03A                <1>     mov al, ":"
   822 00000C3B CD30                <1>     int 30h
   823 00000C3D 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   824 00000C41 E823000000          <1>     call .clkHexToBCD
   825 00000C46 B40E                <1>     mov ah, 0Eh
   826 00000C48 B03A                <1>     mov al, ":"
   827 00000C4A CD30                <1>     int 30h
   828 00000C4C 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   829 00000C50 E814000000          <1>     call .clkHexToBCD
   830 00000C55 B40E                <1>     mov ah, 0Eh
   831 00000C57 B02E                <1>     mov al, "."
   832 00000C59 CD30                <1>     int 30h
   833 00000C5B 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   834 00000C5F E805000000          <1>     call .clkHexToBCD
   835 00000C64 E963FFFFFF          <1>     jmp l1
   836                              <1> .clkHexToBCD:
   837                              <1> ;Converts a Hex byte into two BCD digits
   838                              <1> ;Takes input in each nybble of al
   839 00000C69 53                  <1>     push rbx
   840 00000C6A 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   840 00000C73 00                  <1>
   841 00000C74 31D2                <1>     xor edx, edx
   842 00000C76 48F7F3              <1>     div rbx
   843 00000C79 80C230              <1>     add dl, '0'
   844 00000C7C 80FA39              <1>     cmp dl, '9'
   845 00000C7F 7603                <1>     jbe .chtb0
   846 00000C81 80C207              <1>     add dl, 'A'-'0'-10
   847                              <1> .chtb0:
   848 00000C84 88D1                <1>     mov cl, dl    ;Save remainder byte
   849 00000C86 31D2                <1>     xor edx, edx
   850 00000C88 48F7F3              <1>     div rbx
   851 00000C8B 80C230              <1>     add dl, '0'
   852 00000C8E 80FA39              <1>     cmp dl, '9'
   853 00000C91 7603                <1>     jbe .chtb1
   854 00000C93 80C207              <1>     add dl, 'A'-'0'-10
   855                              <1> .chtb1:
   856 00000C96 88D5                <1>     mov ch, dl    ;Save remainder byte
   857                              <1> 
   858 00000C98 88E8                <1>     mov al, ch    ;Get most sig digit into al
   859 00000C9A B40E                <1>     mov ah, 0Eh
   860 00000C9C CD30                <1>     int 30h
   861 00000C9E 88C8                <1>     mov al, cl    ;Get least sig digit into al
   862 00000CA0 B40E                <1>     mov ah, 0Eh
   863 00000CA2 CD30                <1>     int 30h
   864 00000CA4 5B                  <1>     pop rbx
   865 00000CA5 C3                  <1>     ret
   866                              <1> ;--------------------------------
   867                              <1> ;       PROCS FOR SYSINIT       :
   868                              <1> ;--------------------------------
   869                              <1> adjustDrvHdr:
   870                              <1> ;Input: rsi = Effective address of driver in DOS segment
   871                              <1> ;       rbp = Ptr to the start of the DOS segment
   872                              <1> ;Output: rsi = EA of next header in DOS segment
   873 00000CA6 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   874 00000CA9 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   875 00000CAD 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   876 00000CB1 4881C622000000      <1>     add rsi, drvHdr_size
   877 00000CB8 C3                  <1>     ret
   878                              <1> errorInit:
   879                              <1> ;If a critical error occurs during sysinit, fail through here
   880                              <1> ;Int 42h, 43h and 44h point here during sysinit
   881 00000CB9 488D2D20000000      <1>     lea rbp, hltmsg
   882 00000CC0 B804130000          <1>     mov eax, 1304h
   883 00000CC5 CD30                <1>     int 30h
   884                              <1>     ;cli ;Clear interrupts
   885                              <1>     ;mov al, -1
   886                              <1>     ;mov dx, 0A1h    ;PIC2 data
   887                              <1>     ;out dx, al      ;Mask all lines
   888                              <1>     ;mov dx, 21h     ;PIC1 data
   889                              <1>     ;out dx, al      ;Mask all lines
   890                              <1> .ei0:
   891 00000CC7 F4                  <1>     hlt
   892 00000CC8 EBFD                <1>     jmp short .ei0
   893                              <1> ;--------------------------------
   894                              <1> ;       DATA FOR SYSINIT        :
   895                              <1> ;--------------------------------
   896 00000CCA 5374617274696E6720- <1> strtmsg db "Starting SCP/DOS...",0Ah,0Dh,"$"
   896 00000CD3 5343502F444F532E2E- <1>
   896 00000CDC 2E0A0D24            <1>
   897 00000CE0 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   897 00000CE9 7469616C6973696E67- <1>
   897 00000CF2 20534350444F532E53- <1>
   897 00000CFB 59532E205379737465- <1>
   897 00000D04 6D2068616C74696E67- <1>
   897 00000D0D 2E2E2E00            <1>
   898 00000D11 434F4E00            <1> conName db "CON",0
   899 00000D15 41555800            <1> auxName db "AUX",0
   900 00000D19 50524E00            <1> prnName db "PRN",0
   901                              <1> intData:
   902 00000D1D [1416000000000000]  <1>     dq terminateProcess ;Int 40h
   903 00000D25 [091B000000000000]  <1>     dq functionDispatch ;Int 41h
   904 00000D2D [B90C000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   905 00000D35 [451C000000000000]  <1>     dq defaultIretq     ;Int 43h, ignore any CTRL+C during init
   906 00000D3D [E916000000000000]  <1>     dq dosDefCritErrHdlr 
   907 00000D45 [B417000000000000]  <1>     dq absDiskRead      ;Int 45h
   908 00000D4D [9617000000000000]  <1>     dq absDiskWrite     ;Int 46h
   909 00000D55 [1616000000000000]  <1>     dq terminateRes     ;Int 47h
   910 00000D5D [451C000000000000]  <1>     dq defaultIretq     ;Int 48h
   911 00000D65 [451C000000000000]  <1>     dq defaultIretq     ;Int 49h
   912 00000D6D [451C000000000000]  <1>     dq defaultIretq     ;Int 4Ah
   913 00000D75 [451C000000000000]  <1>     dq defaultIretq     ;Int 4Bh
   914 00000D7D [451C000000000000]  <1>     dq defaultIretq     ;Int 4Ch
   915 00000D85 [451C000000000000]  <1>     dq defaultIretq     ;Int 4Dh
   916 00000D8D [451C000000000000]  <1>     dq defaultIretq     ;Int 4Eh
   917 00000D95 [0320000000000000]  <1>     dq multiplexHdlr    ;Int 4Fh, multiplex default handler
   918                              <1> nData:
   919 00000D9D [BA22000000000000]  <1>     dq conHdr
   920 00000DA5 0480                <1>     dw 08004h
   921 00000DA7 [6224000000000000]  <1>     dq nulStrat
   922 00000DAF [6824000000000000]  <1>     dq nulIntr
   923 00000DB7 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   924                              <1> 
   925                              <1> diskInit:
   926                              <1>     ;We create a function to deal with BPB parsing etc
   927                              <1>     ;Start with the first primary partition on each hard disk (until max)
   928                              <1>     ;   They dont have to be bootable
   929                              <1>     ;Then go back and look for other partitions partitions. 
   930                              <1>     ;   Add each other primary or logical ptn (until max)
   931                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   932                              <1>     ;Use r8 as device counter
   933 00000DBF 488DBD[892C0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   934 00000DC6 64803C25[12C00300]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   934 00000DCE 00                  <1>
   935 00000DCF 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   936 00000DD5 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   936 00000DDE 00                  <1>
   937 00000DDF B280                <1>     mov dl, 80h ;Start with HDD 0
   938                              <1> .primary:
   939 00000DE1 64803C25[13C00300]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   939 00000DE9 03                  <1>
   940 00000DEA 0F84AB000000        <1>     je .remInit
   941 00000DF0 31C9                <1>     xor ecx, ecx    ;Sector 0
   942 00000DF2 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   943 00000DF7 0F8289000000        <1>     jc .primaryEpilog
   944                              <1>     ;Here, check MBR or BPB
   945 00000DFD 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   946 00000E06 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   947                              <1>     ;Now check if BPB or MBR
   948 00000E08 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   949 00000E0A 8A6302              <1>     mov ah, byte [rbx + 2]
   950 00000E0D 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   951 00000E11 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   952                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   953                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   954 00000E13 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   955 00000E1A B104                <1>     mov cl, 4
   956                              <1> .checkPrimary:
   957 00000E1C 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   958 00000E1F 3C01                <1>     cmp al, 01
   959 00000E21 7421                <1>     je .primaryFound
   960 00000E23 3C04                <1>     cmp al, 04
   961 00000E25 741D                <1>     je .primaryFound
   962 00000E27 3C06                <1>     cmp al, 06
   963 00000E29 7419                <1>     je .primaryFound
   964 00000E2B 3C0B                <1>     cmp al, 0Bh
   965 00000E2D 7415                <1>     je .primaryFound
   966 00000E2F 3C0C                <1>     cmp al, 0Ch
   967 00000E31 7411                <1>     je .primaryFound
   968 00000E33 3C0E                <1>     cmp al, 0Eh
   969 00000E35 740D                <1>     je .primaryFound
   970 00000E37 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   971 00000E3E FEC9                <1>     dec cl
   972 00000E40 7444                <1>     jz .primaryEpilog
   973 00000E42 EBD8                <1>     jmp short .checkPrimary
   974                              <1> .primaryFound:
   975                              <1>     ;Copy the first sector of this partition into memory
   976 00000E44 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   977 00000E47 E8E9000000          <1>     call .initReadSector
   978 00000E4C 7238                <1>     jc .primaryEpilog
   979                              <1>     ;Now verify this is a BPB
   980 00000E4E 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   981 00000E50 8A6302              <1>     mov ah, byte [rbx + 2]
   982 00000E53 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   983 00000E57 752D                <1>     jne .primaryEpilog   ;If not, skip
   984                              <1>     ;Now copy data to internal tables
   985 00000E59 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   986 00000E5C B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   987 00000E61 57                  <1>     push rdi
   988 00000E62 F348A5              <1>     rep movsq   ;Copy the BPB
   989 00000E65 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   990                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   991 00000E66 4A8D9C05[572C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   992                              <1>     ;Add device count to rbx to point to correct entry
   993 00000E6E 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   994 00000E70 4A8D9CC5[612C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   995 00000E78 488933              <1>     mov qword [rbx], rsi
   996 00000E7B 49FFC0              <1>     inc r8  ;Goto next logical drive
   997 00000E7E 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   998                              <1> .primaryEpilog:
   999 00000E86 FEC2                <1>     inc dl  ;Goto next BIOS drive
  1000 00000E88 88D6                <1>     mov dh, dl
  1001 00000E8A 80E67F              <1>     and dh, 7Fh ;Clear bit 7
  1002 00000E8D 643A3425[12C00300]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
  1003 00000E95 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
  1004                              <1> .extended:
  1005                              <1> ;We have gone through all the devices once
  1006                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
  1007                              <1>     ;je .remInit ;If yes, get removable devices
  1008                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
  1009                              <1>     ;xor ecx, ecx    ;Get MBR back
  1010                              <1>     ;call .initReadSector
  1011                              <1>     ;Now we eventually search MBR for a FAT extended partition
  1012                              <1> .remInit:
  1013                              <1> ;Now handle removable devices, at least 2 rem. devs.
  1014 00000E9B 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
  1015 00000E9E 30D2                <1>     xor dl, dl  ;Start with removable device 0
  1016 00000EA0 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
  1017                              <1>     ;rdi points to the space for the subsequent bpb's
  1018                              <1> .removables:
  1019 00000EA3 31C9                <1>     xor ecx, ecx    ;Read sector 0
  1020 00000EA5 E88B000000          <1>     call .initReadSector
  1021 00000EAA 7238                <1>     jc .removableEpilogue   ;Goto next device
  1022                              <1>     ;Now verify this is a BPB
  1023 00000EAC 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
  1024 00000EAE 8A6302              <1>     mov ah, byte [rbx + 2]
  1025 00000EB1 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
  1026 00000EB5 752D                <1>     jne .removableEpilogue   ;If not, skip
  1027                              <1>     ;Now copy data to internal tables
  1028 00000EB7 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
  1029 00000EBA B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
  1030 00000EBF 57                  <1>     push rdi
  1031 00000EC0 F348A5              <1>     rep movsq   ;Copy the BPB
  1032 00000EC3 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
  1033                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
  1034 00000EC4 4A8D9C05[572C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
  1035                              <1>     ;Add device count to rbx to point to correct entry
  1036 00000ECC 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
  1037 00000ECE 4A8D9CC5[612C0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
  1038 00000ED6 488933              <1>     mov qword [rbx], rsi
  1039 00000ED9 49FFC0              <1>     inc r8  ;Goto next logical drive
  1040 00000EDC 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
  1041                              <1> .removableEpilogue:
  1042 00000EE4 FEC2                <1>     inc dl  ;Goto next BIOS device now
  1043 00000EE6 643A1425[11C00300]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
  1044 00000EEE 7412                <1>     je .end
  1045 00000EF0 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
  1046 00000EF7 7403                <1>     je .re0
  1047 00000EF9 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
  1048                              <1> .re0:
  1049 00000EFC 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
  1050 00000F00 72A1                <1>     jb .removables
  1051                              <1> .end:
  1052 00000F02 64803C25[11C00300]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
  1052 00000F0A 01                  <1>
  1053 00000F0B 7401                <1>     je .singleRemDev
  1054 00000F0D C3                  <1>     ret
  1055                              <1> .singleRemDev:
  1056                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
  1057 00000F0E 488D9D[572C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
  1058 00000F15 8A95[572C0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
  1059 00000F1B 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
  1060 00000F1E 488D9D[612C0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
  1061 00000F25 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
  1062 00000F28 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
  1063 00000F2C 64FE0425[13C00300]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
  1064 00000F34 C3                  <1>     ret
  1065                              <1> .initReadSector:
  1066                              <1> ;Called with sector number in rcx and BIOS device number in dl
  1067 00000F35 B482                <1>     mov ah, 82h ;Read
  1068 00000F37 B001                <1>     mov al, 1   ;One sector
  1069 00000F39 488D9D[E8020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
  1070 00000F40 CD33                <1>     int 33h
  1071 00000F42 C3                  <1>     ret
    12                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    13                                  %include "./Source/BSS/dosSeg.asm"
    14                              <1> ;This file contains the main DOS data segment
    15                              <1> dosAPT: ;Additional Page tables
    16 00000000 <res 3C000h>        <1>     resb dosAPTsize    ;60kb of space for the page tables
    17                              <1> dosDataArea:
    18 0003C000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    19 0003C008 ????????????????    <1>     biosUBase   resq 1    ;Ptr to the BIOS userbase
    20 0003C010 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    21 0003C011 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    22 0003C012 ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    23 0003C013 ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    24 0003C014 ????????            <1>     loProtMem   resd 1    ;Num bytes free in (lo) protected from userbase
    25 0003C018 ????????            <1>     hiProtMem   resd 1    ;Num bytes in hi protec. arena (or 0 if no ISA hole)
    26 0003C01C ????????????????    <1>     longMem     resq 1    ;Num bytes in long memory arena
    27 0003C024 <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    28 0003C04E <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    29                              <1>     ;The device driver header with space for the largest possible packet
    30 0003C078 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    31                              <1> sysVarsPtr:
    32 0003C080 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    33 0003C088 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    34 0003C090 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    35                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    36 0003C098 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    37                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    38 0003C0A0 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    39 0003C0A2 ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    40 0003C0AA ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    41 0003C0B2 ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    42 0003C0B3 ??                  <1>     numBuffers  resb 1    ;Buffers=30 default
    43 0003C0B4 ????                <1>     numFiles    resw 1    ;FILES=5 default
    44 0003C0B6 ????                <1>     maxHndls    resw 1    ;Initially hardcoded 20, will be made changable later
    45 0003C0B8 ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    46 0003C0C0 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    47 0003C0C2 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    48 0003C0C3 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    49                              <1> 
    50 0003C0E5 <res 20h>           <1>     critPtchTbl resq 4  ;Offsets from DosDataArea addr to the 4 funcs
    51 0003C105 ??                  <1>                 resb 1  ;Alignment byte
    52                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
    53 0003C106 ????????????????    <1>     oldRAX      resq 1  ;Store rax on entering Int41h or returning Int 43h
    54 0003C10E ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    55 0003C10F ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    56 0003C110 ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    57 0003C111 ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    58 0003C112 ????                <1>     errorExCde  resw 1  ;Extended Error Code
    59 0003C114 ??                  <1>     errorAction resb 1  ;Suggested action for error  
    60 0003C115 ??                  <1>     errorClass  resb 1  ;Error Class
    61                              <1> 
    62 0003C116 ????????????????    <1>     dosReturn   resq 1  ;Used as a var to return when juggling stack
    63                              <1> 
    64 0003C11E ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    65 0003C126 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    66 0003C12E ????                <1>     Int44Error  resw 1  ;Saves Error code from request status word
    67 0003C130 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    68 0003C138 ????                <1>     errorLevel  resw 1  ;Last return code returned by Int 41h/4Ch x
    69 0003C13A ??                  <1>     allocStrat  resb 1  ;Allocation strategy. First, Best or Last fit
    70 0003C13B ??                  <1>     currentDrv  resb 1  ;Default drive x
    71                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    72 0003C13C ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    73                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    74 0003C13D ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    75 0003C13E ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    76                              <1> ;SDA, needs to be replaced between processes
    77 0003C13F ????????????????    <1>     firstMCB    resq 1  ;First fit MCB for request
    78 0003C147 ????????????????    <1>     bestMCB     resq 1  ;Best fit MCB for request
    79 0003C14F ????????????????    <1>     lastMCB     resq 1  ;Last fit MCB for request
    80 0003C157 ????????????????    <1>     xInt44RDI   resq 1  ;Preserved rdi across a critical error
    81 0003C15F ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    82 0003C167 ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    83 0003C168 ??                  <1>     Int44Fail   resb 1  ;Counts the number of fails that have occured
    84 0003C169 ??                  <1>     Int44Trans  resb 1  ;Set to -1 if Abort translated to Fail
    85 0003C16A ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    86 0003C16B ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    87 0003C173 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    88 0003C17B ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    89 0003C183 ??                  <1>     dosInvoke   resb 1  ;FIXED 0, any other value fails calls (-1 = server invoke)
    90 0003C184 ??                  <1>     critExit    resb 1  ;-1 => CTRL+BREAK termination, 0 otherwise
    91                              <1> ;The above flag tells DOS to print ^C in the termination function
    92                              <1> 
    93                              <1> ;Time stuff
    94 0003C185 ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    95 0003C186 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    96 0003C187 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    97 0003C188 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    98 0003C18A ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    99                              <1> 
   100                              <1> ;Buffers
   101 0003C18B <res 80h>           <1>     buffer1     resb 128  ;Space for one path and file name
   102 0003C20B <res 80h>           <1>     buffer2     resb 128  ;Space for a second path and file name
   103 0003C28B ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
   104 0003C291 ??                  <1>     singleIObyt resb 1  ;For single IO byte buffers
   105                              <1> ;Misc bookkeeping flags and vars
   106                              <1>     ;secClusConv resb 1  ;For networking, do we convert sector to cluster?
   107 0003C292 ??                  <1>     rwFlag      resb 1  ;00h=Read, 01h=Write
   108 0003C293 ??                  <1>     fileFDflg   resb 1  ;01h = File Found!, 04h = File deleted!
   109 0003C294 ??                  <1>     fileOpenMd  resb 1  ;Open mode (compat, r/w/rw?)
   110 0003C295 ??                  <1>     typePSPcopy resb 1  ;00=Simple copy, -1=Make Child process
   111 0003C296 ??                  <1>     spliceFlag  resb 1  ;01 = file name and directory name together
   112                              <1> 
   113 0003C297 ??                  <1>     workingDrv  resb 1  ;Working drive number
   114 0003C298 ????????????????    <1>     workingDPB  resq 1  ;Ptr to the DPB of the drive being accessed
   115 0003C2A0 ????????????????    <1>     workingCDS  resq 1  ;Ptr to the CDS of the drive being accessed
   116 0003C2A8 <res 5Bh>           <1>     curDrvCDS   resb cds_size   ;Working cp of CDS of drv being accessed
   117 0003C303 ????????????????    <1>     currentJFT  resq 1  ;Ptr to JFT num in caller PSP of file being accessed
   118 0003C30B ????????????????    <1>     currentSFT  resq 1  ;Ptr to the SFT of the file being accessed
   119 0003C313 ????                <1>     currentHdl  resw 1  ;The current file handle is saved here
   120 0003C315 ????????????????    <1>     currBuff    resq 1  ;Ptr to the Current Buffer (hdr) being accessed
   121                              <1> ;Temp vars, used when walking FAT or changing sectors
   122 0003C31D ????????????????    <1>     tempSect    resq 1  ;A scratch sector number
   123 0003C325 ????                <1>     entries     resw 1  ;FAT entries per FAT sector
   124                              <1> ;Needs to be set up before any file access          |
   125                              <1> ;These vars keep track of file access properties    |
   126                              <1> ;  and must be used only for such purposes.         |
   127 0003C327 ????????            <1>     currClust   resd 1  ;Relative cluster in file being r/w to/from
   128 0003C32B ????????            <1>     currClustA  resd 1  ;Current Cluster (abs) on disk being r/w to/from
   129 0003C32F ??                  <1>     clustFact   resb 1  ;NUMBER of sectors per cluster
   130 0003C330 ??                  <1>     currSect    resb 1  ;Current Sector in Cluster being r/w to/from
   131 0003C331 ????????????????    <1>     currSectA   resq 1  ;Current absolute Sector number on Disk
   132 0003C339 ????                <1>     currByte    resw 1  ;Current Byte in sector being r/w to/from
   133 0003C33B ????????            <1>     currByteA   resd 1  ;Current Byte in file being r/w to/from
   134                              <1> ;*****************************************          |
   135 0003C33F ????????            <1>     lastClust   resd 1  ;Number of the last (rel) cluster of the file
   136 0003C343 ????????            <1>     lastClustA  resd 1  ;Number of the last (abs) cluster of file on disk
   137 0003C347 ????????            <1>     bytesAdded  resd 1  ;Number of bytes added to file (max 2Gb filesize!)
   138                              <1> ;Directory stuff
   139 0003C34B ????????            <1>     dirClust    resd 1  ;Cluster number of current directory
   140 0003C34F ????????            <1>     dirClustA   resd 1  ;Absolute cluster number of current directory
   141 0003C353 ??                  <1>     dirSect     resb 1  ;Sector of current directory
   142 0003C354 ??                  <1>     dirEntry    resb 1  ;32 byte offset in dir sect for file being searched for
   143                              <1> ;Error DPB 
   144 0003C355 ????????????????    <1>     tmpDPBPtr   resq 1  ;A DPB for error/temporary  situations
   145                              <1>     
   146                              <1> ;Stacks and scratch SFT
   147 0003C35D <res 528h>          <1>     critStack   resq 165
   148 0003C885 ????????????????    <1>     critStakTop resq 1
   149                              <1> 
   150 0003C88D <res 43h>           <1>     scratchSFT  resb sft_size   ;Used in FCB calls to emulate a SFT
   151                              <1> 
   152 0003C8D0 <res 638h>          <1>     AuxStack    resq 199
   153 0003CF08 ????????????????    <1>     AuxStakTop  resq 1  ;Auxilliary stack (Char IO, INT 45h/46h etc)
   154 0003CF10 <res 638h>          <1>     DiskStack   resq 199
   155 0003D548 ????????????????    <1>     DiskStakTop resq 1
   156 0003D550 ??                  <1>     diskChange  resb 1  ;-1 = disk has been changed!
   157                              <1>     dSegLen     equ     $
    14                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    15                                  %include "./Source/Data/staticData.asm"
    16                              <1> 
    17                              <1> ;-----------------------------------:
    18                              <1> ;           Static Data             :
    19                              <1> ;-----------------------------------:
    20 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    21 00000001 01                  <1> dosMinor    db 01h      ;.01
    22 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    22 0000000B 535953              <1>
    23 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    23 00000017 535953              <1>
    24 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    16                                  %include "./Source/Data/dispTbl.asm"
    17                              <1> ;Kernel Dispatch Function Table
    18                              <1> 
    19                              <1> kDispTbl:
    20 0000001B FD15                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
    21 0000001D 050C                <1>     dw stdinReadEcho - kDispTbl       ;AH = 01H, CHAR IO
    22 0000001F 720C                <1>     dw stdoutWrite - kDispTbl         ;AH = 02H, CHAR IO
    23 00000021 AB0C                <1>     dw stdauxRead - kDispTbl          ;AH = 03H, CHAR IO
    24 00000023 AB0C                <1>     dw stdauxWrite - kDispTbl         ;AH = 04H, CHAR IO
    25 00000025 AB0C                <1>     dw stdprnWrite - kDispTbl         ;AH = 05H, CHAR IO
    26 00000027 AB0C                <1>     dw directCONIO - kDispTbl         ;AH = 06H, CHAR IO
    27 00000029 AB0C                <1>     dw waitDirectInNoEcho - kDispTbl  ;AH = 07H, CHAR IO
    28 0000002B E40C                <1>     dw waitStdinNoEcho - kDispTbl     ;AH = 08H, CHAR IO
    29 0000002D E50C                <1>     dw printString - kDispTbl         ;AH = 09H, CHAR IO
    30 0000002F 270D                <1>     dw buffStdinInput - kDispTbl      ;AH = 0AH, CHAR IO
    31 00000031 270D                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    32 00000033 270D                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    33 00000035 CD1C                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    34 00000037 EE1C                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    35 00000039 A00D                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    36 0000003B A00D                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    37 0000003D A00D                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    38 0000003F A00D                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    39 00000041 A00D                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    40 00000043 A00D                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    41 00000045 A00D                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    42 00000047 A00D                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    43 00000049 A00D                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    44 0000004B E71F                <1>     dw return - kDispTbl              ;AH = 18H, RESERVED
    45 0000004D 071D                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    46 0000004F A10D                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    47 00000051 0E1D                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    48 00000053 101D                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    49 00000055 E71F                <1>     dw return - kDispTbl              ;AH = 1DH, RESERVED
    50 00000057 E71F                <1>     dw return - kDispTbl              ;AH = 1EH, RESERVED
    51 00000059 D31D                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    52 0000005B E71F                <1>     dw return - kDispTbl              ;AH = 20H, RESERVED
    53 0000005D B40D                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    54 0000005F B40D                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    55 00000061 B40D                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    56 00000063 B40D                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    57 00000065 821D                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    58 00000067 AF1D                <1>     dw createNewPSP - kDispTbl        ;AH = 26H, PROCESS MANAGEMENT
    59 00000069 B40D                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    60 0000006B B40D                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    61 0000006D B40D                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    62 0000006F 9F0D                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    63 00000071 9F0D                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    64 00000073 9F0D                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    65 00000075 9F0D                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    66 00000077 B01D                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    67 00000079 B50D                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    68 0000007B BE1D                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    69 0000007D FE15                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    70 0000007F D51D                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    71 00000081 821C                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    72 00000083 1C1E                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    73 00000085 2D1E                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    74 00000087 421E                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    75 00000089 0116                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    76 0000008B 0116                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    77 0000008D 6808                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    78 0000008F 6808                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    79 00000091 6808                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    80 00000093 C80D                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    81 00000095 C90D                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    82 00000097 CA0D                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    83 00000099 CB0D                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    84 0000009B D40D                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    85 0000009D 110E                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    86 0000009F 110E                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    87 000000A1 640E                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    88 000000A3 640E                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    89 000000A5 640E                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    90 000000A7 640E                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    91 000000A9 6808                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    92 000000AB F20F                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    93 000000AD 0F12                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    94 000000AF 3813                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    95 000000B1 FF15                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    96 000000B3 0016                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    97 000000B5 B31E                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    98 000000B7 640E                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    99 000000B9 640E                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
   100 000000BB B01C                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   101 000000BD B91C                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   102 000000BF C51E                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   103 000000C1 D61E                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   104 000000C3 B51F                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
   105 000000C5 BC1F                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   106 000000C7 640E                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
   107 000000C9 6808                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
   108 000000CB E914                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
   109 000000CD BD1F                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
   110 000000CF 640E                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
   111 000000D1 640E                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
   112 000000D3 640E                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
   113 000000D5 E61F                <1>     dw getCritErrorInfo - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   114 000000D7 E61F                <1>     dw networkServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
   115 000000D9 E61F                <1>     dw networkRedirection - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   116 000000DB 6808                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   117 000000DD E71F                <1>     dw return - kDispTbl              ;AH = 61H, RESERVED
   118 000000DF C21C                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   119 000000E1 E71F                <1>     dw return - kDispTbl              ;AH = 63H, RESERVED
   120 000000E3 CB1C                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   121 000000E5 0116                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   122 000000E7 0116                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   123 000000E9 640E                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   124 000000EB 640E                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   125 000000ED E71F                <1>     dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   126                              <1> kDispTblL  equ $ - kDispTbl 
   127                              <1> 
   128                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   129 000000EF 351F                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   130                              <1> mDispTblL   equ     $ - mDispTbl
    17                                  %include "./Source/Debug/debug.asm"
    18                              <1> ;This file contains debugging macros, procs and strings
    19                              <1> ; that we can use to output to COM1 bypassing the operating system.
    20                              <1> ;A serial terminal must be connected for this to work.
    21                              <1> 
    22                              <1> ;Variables and equates
    23                              <1> 
    24 000000F1 0000000000000000    <1> debOldRSP   dq 0    ;The RSP value when entering a debug output block
    25                              <1> 
    26 000000F9 303132333435363738- <1> debascii: db '0123456789ABCDEF'
    26 00000102 39414243444546      <1>
    27                              <1> ;Common procedures
    28                              <1> debMakeDebuggerRespond:
    29 00000109 488D2D26000000      <1>     lea rbp, .msg
    30 00000110 E8AF000000          <1>     call debPrintNullString
    31 00000115 B900001000          <1>     mov ecx, 100000h
    32                              <1> .waiting:
    33 0000011A FFC9                <1>     dec ecx
    34 0000011C 740C                <1>     jz .timeout
    35 0000011E B402                <1>     mov ah, 02h ;Blocking recieve!
    36 00000120 31D2                <1>     xor edx, edx
    37 00000122 CD34                <1>     int 34h
    38 00000124 F6C480              <1>     test ah, 80h    ;Was no char recieved? Keep waiting
    39 00000127 75F1                <1>     jnz .waiting
    40 00000129 C3                  <1>     ret
    41                              <1> .timeout:
    42 0000012A 488D2D47000000      <1>     lea rbp, .msg2
    43 00000131 E98E000000          <1>     jmp debPrintNullString
    44 00000136 537472696B65206120- <1> .msg: db "Strike a key at the terminal to continue or wait for timeout...",0Ah,0Dh,0
    44 0000013F 6B6579206174207468- <1>
    44 00000148 65207465726D696E61- <1>
    44 00000151 6C20746F20636F6E74- <1>
    44 0000015A 696E7565206F722077- <1>
    44 00000163 61697420666F722074- <1>
    44 0000016C 696D656F75742E2E2E- <1>
    44 00000175 0A0D00              <1>
    45 00000178 54696D656F75742E20- <1> .msg2: db "Timeout. Continuing...",0Ah,0Dh,0
    45 00000181 436F6E74696E75696E- <1>
    45 0000018A 672E2E2E0A0D00      <1>
    46                              <1> debPrintHexByte:
    47                              <1> ;Print the hex byte in al as a hex value
    48 00000191 52                  <1>     push rdx
    49 00000192 53                  <1>     push rbx
    50 00000193 50                  <1>     push rax
    51                              <1> 
    52 00000194 88C2                <1>     mov dl, al           ;save byte in dl
    53 00000196 6625F000            <1>     and ax, 00F0h        ;Hi nybble
    54 0000019A 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
    55 0000019F 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
    56 000001A3 E80C000000          <1>     call .wrchar
    57 000001A8 6689D0              <1>     mov ax, dx           ;mov lo nybble, to print
    58 000001AB E804000000          <1>     call .wrchar
    59                              <1> 
    60 000001B0 58                  <1>     pop rax
    61 000001B1 5B                  <1>     pop rbx
    62 000001B2 5A                  <1>     pop rdx
    63 000001B3 C3                  <1>     ret
    64                              <1> .wrchar:
    65 000001B4 6687DB              <1>     xchg bx, bx
    66 000001B7 488D1D3BFFFFFF      <1>     lea rbx, debascii
    67 000001BE D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
    68 000001BF B401                <1>     mov ah, 01h
    69 000001C1 CD34                <1>     int 34h  ;print char
    70 000001C3 C3                  <1>     ret
    71                              <1> 
    72                              <1> debPrintNullString:
    73                              <1> ;Print a null terminated string pointed to by rbp
    74 000001C4 56                  <1>     push rsi
    75 000001C5 50                  <1>     push rax
    76 000001C6 52                  <1>     push rdx
    77 000001C7 31D2                <1>     xor edx, edx    ;Select COM1
    78 000001C9 4889EE              <1>     mov rsi, rbp
    79                              <1> .getChar:
    80 000001CC AC                  <1>     lodsb
    81 000001CD 84C0                <1>     test al, al
    82 000001CF 7406                <1>     jz .exit
    83 000001D1 B401                <1>     mov ah, 01h
    84 000001D3 CD34                <1>     int 34h
    85 000001D5 EBF5                <1>     jmp short .getChar
    86                              <1> .exit:
    87 000001D7 5A                  <1>     pop rdx
    88 000001D8 58                  <1>     pop rax
    89 000001D9 5E                  <1>     pop rsi
    90 000001DA C3                  <1>     ret
    91                              <1> 
    92                              <1> debPrintDOSStack:
    93                              <1> ;Function that shows me the state on entering and exiting a DOS kernel function
    94                              <1> ;Shows me which function, and parameters passed and returned
    95 000001DB 488D2DA5010000      <1>     lea rbp, .a1
    96 000001E2 E8DDFFFFFF          <1>     call debPrintNullString
    97 000001E7 488B15(73C10300)    <1>     mov rdx, qword [oldRSP] ;Get caller RSP value
    98 000001EE 488D1DB2000000      <1>     lea rbx, qword [.a0 + 4]    ;Go past the rax= part
    99 000001F5 488B02              <1>     mov rax, qword [rdx + callerFrame.rax]
   100 000001F8 E802030000          <1>     call overlayQword
   101 000001FD 4881C316000000      <1>     add rbx, 22
   102 00000204 488B4208            <1>     mov rax, qword [rdx + callerFrame.rbx]
   103 00000208 E8F2020000          <1>     call overlayQword
   104 0000020D 4881C316000000      <1>     add rbx, 22
   105 00000214 488B4210            <1>     mov rax, qword [rdx + callerFrame.rcx]
   106 00000218 E8E2020000          <1>     call overlayQword
   107 0000021D 4881C318000000      <1>     add rbx, 22 + 2  ;Skip crlf
   108 00000224 488B4218            <1>     mov rax, qword [rdx + callerFrame.rdx]
   109 00000228 E8D2020000          <1>     call overlayQword
   110 0000022D 4881C316000000      <1>     add rbx, 22 
   111 00000234 488B4220            <1>     mov rax, qword [rdx + callerFrame.rsi]
   112 00000238 E8C2020000          <1>     call overlayQword
   113 0000023D 4881C316000000      <1>     add rbx, 22
   114 00000244 488B4228            <1>     mov rax, qword [rdx + callerFrame.rdi]
   115 00000248 E8B2020000          <1>     call overlayQword
   116 0000024D 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   117 00000254 488B4230            <1>     mov rax, qword [rdx + callerFrame.rbp]
   118 00000258 E8A2020000          <1>     call overlayQword
   119 0000025D 4881C316000000      <1>     add rbx, 22
   120 00000264 488B05(73C10300)    <1>     mov rax, qword [oldRSP]
   121 0000026B 480560000000        <1>     add rax, callerFrame_size
   122 00000271 E889020000          <1>     call overlayQword
   123 00000276 4881C316000000      <1>     add rbx, 22
   124 0000027D 488B4248            <1>     mov rax, qword [rdx + callerFrame.rip]
   125 00000281 E879020000          <1>     call overlayQword
   126 00000286 4881C318000000      <1>     add rbx, 22 + 2 ;Skip crlf
   127 0000028D 488B4258            <1>     mov rax, qword [rdx + callerFrame.flags]
   128 00000291 E869020000          <1>     call overlayQword
   129 00000296 488D2D06000000      <1>     lea rbp, .a0
   130 0000029D E822FFFFFF          <1>     call debPrintNullString
   131 000002A2 C3                  <1>     ret
   132                              <1> 
   133 000002A3 7261783D3030303030- <1> .a0 db "rax=0000000000000000h " ;each line is 22 chars long
   133 000002AC 303030303030303030- <1>
   133 000002B5 30306820            <1>
   134 000002B9 7262783D3030303030- <1>     db "rbx=0000000000000000h "
   134 000002C2 303030303030303030- <1>
   134 000002CB 30306820            <1>
   135 000002CF 7263783D3030303030- <1>     db "rcx=0000000000000000h "
   135 000002D8 303030303030303030- <1>
   135 000002E1 30306820            <1>
   136 000002E5 0A0D                <1>     db  0Ah,0Dh
   137 000002E7 7264783D3030303030- <1>     db "rdx=0000000000000000h "
   137 000002F0 303030303030303030- <1>
   137 000002F9 30306820            <1>
   138 000002FD 7273693D3030303030- <1>     db "rsi=0000000000000000h "
   138 00000306 303030303030303030- <1>
   138 0000030F 30306820            <1>
   139 00000313 7264693D3030303030- <1>     db "rdi=0000000000000000h "
   139 0000031C 303030303030303030- <1>
   139 00000325 30306820            <1>
   140 00000329 0A0D                <1>     db 0Ah, 0Dh
   141 0000032B 7262703D3030303030- <1>     db "rbp=0000000000000000h "
   141 00000334 303030303030303030- <1>
   141 0000033D 30306820            <1>
   142 00000341 7273703D3030303030- <1>     db "rsp=0000000000000000h "
   142 0000034A 303030303030303030- <1>
   142 00000353 30306820            <1>
   143 00000357 7269703D3030303030- <1>     db "rip=0000000000000000h"
   143 00000360 303030303030303030- <1>
   143 00000369 303068              <1>
   144 0000036C 0A0D                <1>     db 0Ah, 0Dh
   145 0000036E 666C673D3030303030- <1>     db "flg=0000000000000000h "
   145 00000377 303030303030303030- <1>
   145 00000380 30306820            <1>
   146 00000384 0A0D00              <1>     db 0Ah,0Dh,0
   147 00000387 526567697374657273- <1> .a1 db "Registers on Int 41h stack",0Ah,0Dh,0
   147 00000390 206F6E20496E742034- <1>
   147 00000399 316820737461636B0A- <1>
   147 000003A2 0D00                <1>
   148                              <1> 
   149                              <1> debDPBptr:
   150                              <1>     ;rbp has dpb pointer in it or if -1, no dpb
   151 000003A4 488D1D1F000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   152 000003AB 4889E8              <1>     mov rax, rbp
   153 000003AE E84C010000          <1>     call overlayQword
   154 000003B3 488D2D06000000      <1>     lea rbp, .dpb
   155 000003BA E805FEFFFF          <1>     call debPrintNullString
   156 000003BF C3                  <1>     ret
   157                              <1> .dpb: 
   158 000003C0 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   158 000003C9 203030303030303030- <1>
   158 000003D2 303030303030303068- <1>
   158 000003DB 200A0D00            <1>
   159                              <1> 
   160                              <1> debDPBBPBptr:
   161                              <1>     ;rbp has dpb ptr in it or -1 if no dpb
   162                              <1>     ;rsi has bpb ptr in it or -1 if no bpb
   163 000003DF 488D1D2E000000      <1>     lea rbx, qword [.dpb + 10]   ;Goto first number
   164 000003E6 4889E8              <1>     mov rax, rbp
   165 000003E9 E811010000          <1>     call overlayQword
   166 000003EE 4881C321000000      <1>     add rbx, 33
   167 000003F5 4889F0              <1>     mov rax, rsi
   168 000003F8 E802010000          <1>     call overlayQword
   169 000003FD 488D2D06000000      <1>     lea rbp, .dpb
   170 00000404 E8BBFDFFFF          <1>     call debPrintNullString
   171 00000409 C3                  <1>     ret
   172                              <1> .dpb: 
   173 0000040A 445042207074722040- <1>     db "DPB ptr @ 0000000000000000h from "
   173 00000413 203030303030303030- <1>
   173 0000041C 303030303030303068- <1>
   173 00000425 2066726F6D20        <1>
   174 0000042B 425042207074722040- <1>     db "BPB ptr @ 0000000000000000h ",0Ah,0Dh,0
   174 00000434 203030303030303030- <1>
   174 0000043D 303030303030303068- <1>
   174 00000446 200A0D00            <1>
   175                              <1> overlayByte:
   176                              <1>     ;Called with number in rax
   177                              <1>     ;pointer to START of 16 byte space for number in rbx
   178 0000044A 53                  <1>     push rbx
   179 0000044B 51                  <1>     push rcx
   180 0000044C 52                  <1>     push rdx
   181 0000044D 55                  <1>     push rbp
   182 0000044E 4889DD              <1>     mov rbp, rbx
   183 00000451 4889C2              <1>     mov rdx, rax
   184 00000454 48FFC5              <1>     inc rbp ;Go to end of number
   185                              <1> 
   186 00000457 488D1D9BFCFFFF      <1>     lea rbx, debascii
   187 0000045E 88D0                <1>     mov al, dl  ;Go low nybble first
   188 00000460 240F                <1>     and al, 0Fh
   189 00000462 D7                  <1>     xlatb
   190 00000463 884500              <1>     mov byte [rbp], al
   191 00000466 48FFCD              <1>     dec rbp ;Go down one char pos
   192 00000469 88D0                <1>     mov al, dl
   193 0000046B 24F0                <1>     and al, 0F0h    ;Hi nybble next
   194 0000046D C0E804              <1>     shr al, 4   ;Shift hi nybble low
   195 00000470 D7                  <1>     xlatb
   196 00000471 884500              <1>     mov byte [rbp], al  ;Store char
   197                              <1> 
   198 00000474 5D                  <1>     pop rbp
   199 00000475 5A                  <1>     pop rdx
   200 00000476 59                  <1>     pop rcx
   201 00000477 5B                  <1>     pop rbx
   202 00000478 C3                  <1>     ret
   203                              <1> 
   204                              <1> overlayWord:
   205                              <1>     ;Called with number in rax
   206                              <1>     ;pointer to START of 16 byte space for number in rbx
   207 00000479 53                  <1>     push rbx
   208 0000047A 51                  <1>     push rcx
   209 0000047B 52                  <1>     push rdx
   210 0000047C 55                  <1>     push rbp
   211 0000047D 4889DD              <1>     mov rbp, rbx
   212 00000480 4889C2              <1>     mov rdx, rax
   213 00000483 4881C503000000      <1>     add rbp, 3 ;Go to end of number
   214 0000048A B902000000          <1>     mov ecx, 2 ;4 digits, 2 at a time
   215 0000048F 488D1D63FCFFFF      <1>     lea rbx, debascii
   216                              <1> .ow0:
   217 00000496 88D0                <1>     mov al, dl  ;Go low nybble first
   218 00000498 240F                <1>     and al, 0Fh
   219 0000049A D7                  <1>     xlatb
   220 0000049B 884500              <1>     mov byte [rbp], al
   221 0000049E 48FFCD              <1>     dec rbp ;Go down one char pos
   222 000004A1 88D0                <1>     mov al, dl
   223 000004A3 24F0                <1>     and al, 0F0h    ;Hi nybble next
   224 000004A5 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   225 000004A8 D7                  <1>     xlatb
   226 000004A9 884500              <1>     mov byte [rbp], al  ;Store char
   227 000004AC 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   228 000004B0 48FFCD              <1>     dec rbp
   229 000004B3 FFC9                <1>     dec ecx
   230 000004B5 75DF                <1>     jnz .ow0
   231 000004B7 5D                  <1>     pop rbp
   232 000004B8 5A                  <1>     pop rdx
   233 000004B9 59                  <1>     pop rcx
   234 000004BA 5B                  <1>     pop rbx
   235 000004BB C3                  <1>     ret
   236                              <1> 
   237                              <1> overlayDword:
   238                              <1>     ;Called with number in rax
   239                              <1>     ;pointer to START of 16 byte space for number in rbx
   240 000004BC 53                  <1>     push rbx
   241 000004BD 51                  <1>     push rcx
   242 000004BE 52                  <1>     push rdx
   243 000004BF 55                  <1>     push rbp
   244 000004C0 4889DD              <1>     mov rbp, rbx
   245 000004C3 4889C2              <1>     mov rdx, rax
   246 000004C6 4881C507000000      <1>     add rbp, 7 ;Go to end of number
   247 000004CD B904000000          <1>     mov ecx, 4 ;8 digits, 2 at a time
   248 000004D2 488D1D20FCFFFF      <1>     lea rbx, debascii
   249                              <1> .od0:
   250 000004D9 88D0                <1>     mov al, dl  ;Go low nybble first
   251 000004DB 240F                <1>     and al, 0Fh
   252 000004DD D7                  <1>     xlatb
   253 000004DE 884500              <1>     mov byte [rbp], al
   254 000004E1 48FFCD              <1>     dec rbp ;Go down one char pos
   255 000004E4 88D0                <1>     mov al, dl
   256 000004E6 24F0                <1>     and al, 0F0h    ;Hi nybble next
   257 000004E8 C0E804              <1>     shr al, 4   ;Shift hi nybble low
   258 000004EB D7                  <1>     xlatb
   259 000004EC 884500              <1>     mov byte [rbp], al  ;Store char
   260 000004EF 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   261 000004F3 48FFCD              <1>     dec rbp
   262 000004F6 FFC9                <1>     dec ecx
   263 000004F8 75DF                <1>     jnz .od0
   264 000004FA 5D                  <1>     pop rbp
   265 000004FB 5A                  <1>     pop rdx
   266 000004FC 59                  <1>     pop rcx
   267 000004FD 5B                  <1>     pop rbx
   268 000004FE C3                  <1>     ret
   269                              <1> 
   270                              <1> overlayQword:
   271                              <1>     ;Called with number in rax
   272                              <1>     ;pointer to START of 16 byte space for number in rbx
   273 000004FF 53                  <1>     push rbx
   274 00000500 51                  <1>     push rcx
   275 00000501 52                  <1>     push rdx
   276 00000502 55                  <1>     push rbp
   277 00000503 4889DD              <1>     mov rbp, rbx
   278 00000506 4889C2              <1>     mov rdx, rax
   279 00000509 4881C50F000000      <1>     add rbp, 15 ;Go to end of number
   280 00000510 B908000000          <1>     mov ecx, 8 ;16 digits, 2 at a time
   281 00000515 488D1DDDFBFFFF      <1>     lea rbx, debascii
   282                              <1> .oq0:
   283 0000051C 88D0                <1>     mov al, dl  ;Go low nybble first
   284 0000051E 240F                <1>     and al, 0Fh
   285 00000520 D7                  <1>     xlatb
   286 00000521 884500              <1>     mov byte [rbp], al
   287 00000524 48FFCD              <1>     dec rbp ;Go down one char pos
   288 00000527 88D0                <1>     mov al, dl
   289 00000529 24F0                <1>     and al, 0F0h    ;Hi nybble next
   290 0000052B C0E804              <1>     shr al, 4   ;Shift hi nybble low
   291 0000052E D7                  <1>     xlatb
   292 0000052F 884500              <1>     mov byte [rbp], al  ;Store char
   293 00000532 48C1EA08            <1>     shr rdx, 8  ;Get next digit from rdx
   294 00000536 48FFCD              <1>     dec rbp
   295 00000539 FFC9                <1>     dec ecx
   296 0000053B 75DF                <1>     jnz .oq0
   297 0000053D 5D                  <1>     pop rbp
   298 0000053E 5A                  <1>     pop rdx
   299 0000053F 59                  <1>     pop rcx
   300 00000540 5B                  <1>     pop rbx
   301 00000541 C3                  <1>     ret
   302                              <1> 
   303                              <1> debPrintFunctionName:
   304                              <1> ;Prints the DOS function that has been entered
   305                              <1> ;Entered with ah = Function number
   306 00000542 88E0                <1>     mov al, ah  ;Get dos function number
   307 00000544 488D1DAEFBFFFF      <1>     lea rbx, debascii
   308 0000054B 488D1535000000      <1>     lea rdx, .number
   309 00000552 24F0                <1>     and al, 0F0h    ;Get high nybble first
   310 00000554 C0E804              <1>     shr al, 4
   311 00000557 D7                  <1>     xlatb
   312 00000558 8802                <1>     mov byte [rdx], al
   313 0000055A 88E0                <1>     mov al, ah
   314 0000055C 240F                <1>     and al, 0Fh
   315 0000055E D7                  <1>     xlatb
   316 0000055F 884201              <1>     mov byte [rdx + 1], al
   317 00000562 488D2D06000000      <1>     lea rbp, .dosString
   318 00000569 E856FCFFFF          <1>     call debPrintNullString
   319 0000056E C3                  <1>     ret
   320 0000056F 444F532066756E6374- <1> .dosString db "DOS function Int 41h/AH="
   320 00000578 696F6E20496E742034- <1>
   320 00000581 31682F41483D        <1>
   321 00000587 3030680A0D00        <1> .number db "00h",0Ah,0Dh,0
   322                              <1> 
   323                              <1> ;----------------:
   324                              <1> ;!!!! MACROS !!!!:
   325                              <1> ;----------------:
   326                              <1> ;Insert macro when entering a debug block
   327                              <1> %macro debugEnterM 0
   328                              <1>     mov qword [debOldRSP], rsp  ;Save rsp
   329                              <1>     mov rsp, debStackTop
   330                              <1> ;Push all registers except rsp on stack
   331                              <1>     push rax
   332                              <1>     push rbx
   333                              <1>     push rcx
   334                              <1>     push rdx
   335                              <1>     push rsi
   336                              <1>     push rdi
   337                              <1>     push rbp
   338                              <1>     push r8
   339                              <1>     push r9
   340                              <1>     push r10
   341                              <1>     push r11
   342                              <1>     push r12
   343                              <1>     push r13
   344                              <1>     push r14
   345                              <1>     push r15
   346                              <1>     pushfq
   347                              <1> %endmacro
   348                              <1> ;Insert macro when exiting a debug block
   349                              <1> %macro debugExitM 0
   350                              <1>     popfq
   351                              <1>     pop r15
   352                              <1>     pop r14
   353                              <1>     pop r13
   354                              <1>     pop r12
   355                              <1>     pop r11
   356                              <1>     pop r10
   357                              <1>     pop r9
   358                              <1>     pop r8
   359                              <1>     pop rbp
   360                              <1>     pop rdi
   361                              <1>     pop rsi
   362                              <1>     pop rdx
   363                              <1>     pop rcx
   364                              <1>     pop rbx
   365                              <1>     pop rax
   366                              <1>     mov rsp, qword [debOldRSP]  ;Return original stack pointer
   367                              <1> %endmacro
    18                                  %include "./Source/Kernel/FAT/bufferFunctions.asm"
    19                              <1> ;This file contains FAT disk buffer related functions that
    20                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
    21                              <1> ;----------------------------------------------------
    22                              <1> ;           Externally referenced functions         :
    23                              <1> ;----------------------------------------------------
    24                              <1> testDirtyBufferForDrive:    ;External linkage
    25                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
    26                              <1> ;Input: al = Drive number (0 based)
    27                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
    28                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
    29 0000058D 53                  <1>     push rbx
    30 0000058E 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    31                              <1> .tdbfdCheckBuffer:
    32 00000595 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
    33 00000598 7509                <1>     jne .tdbfdGotoNextBuffer
    34 0000059A F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
    35 0000059E 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
    36 000005A0 F9                  <1>     stc ;Else dirty buffer found, set carry flag
    37                              <1> .tdbfdExit:
    38 000005A1 5B                  <1>     pop rbx
    39 000005A2 C3                  <1>     ret
    40                              <1> .tdbfdGotoNextBuffer:
    41 000005A3 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
    42 000005A6 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
    43 000005AD 74F2                <1>     je .tdbfdExit
    44 000005AF EBE4                <1>     jmp short .tdbfdCheckBuffer
    45                              <1> 
    46                              <1> freeBuffersForDPB:
    47                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
    48                              <1> ; to have a drive number of -1, thus freeing it
    49                              <1> ;Given DPB is in rbp
    50 000005B1 53                  <1>     push rbx
    51 000005B2 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    52                              <1> .i0:
    53 000005B9 48396B17            <1>     cmp qword [rbx + bufferHdr.driveDPBPtr], rbp  ;Chosen DPB?
    54 000005BD 7506                <1>     jne .i1 ;If no, skip freeing
    55 000005BF 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
    56                              <1> .i1:
    57 000005C5 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
    58 000005C8 4881FBFFFFFFFF      <1>     cmp rbx, -1
    59 000005CF 75E8                <1>     jne .i0
    60                              <1> .exit:
    61 000005D1 5B                  <1>     pop rbx
    62 000005D2 C3                  <1>     ret
    63                              <1> 
    64                              <1> 
    65                              <1> freeBuffersForDrive:
    66                              <1> ;Walks the buffer chain and sets ALL buffers with the given drive number 
    67                              <1> ; to have a drive number of -1, thus freeing it
    68                              <1> ;Given drive number is in al
    69 000005D3 53                  <1>     push rbx
    70 000005D4 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
    71                              <1> .i0:
    72 000005DB 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al  ;Chosen drive?
    73 000005DE 7506                <1>     jne .i1 ;If no, skip freeing
    74 000005E0 66C74308FF00        <1>     mov word [rbx + bufferHdr.driveNumber], 00FFh  ;Free buffer and clear flags
    75                              <1> .i1:
    76 000005E6 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr] ;goto next buffer
    77 000005E9 4881FBFFFFFFFF      <1>     cmp rbx, -1
    78 000005F0 75E9                <1>     jne .i0
    79                              <1> .exit:
    80 000005F2 5B                  <1>     pop rbx
    81 000005F3 C3                  <1>     ret
    82                              <1> 
    83                              <1> 
    84                              <1> getBuffer: ;External Linkage (dosPrim.asm, fat.asm)
    85                              <1> ;
    86                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    87                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
    88                              <1> ;Flushes if not in disk change mode. 
    89                              <1> ;If in disk change mode, will check to see if the selected buffer 
    90                              <1> ; has data referring a device using the same DPB as we are changing.
    91                              <1> ; If it is, skip flushing, if not, flush first!
    92                              <1> ;
    93                              <1> ;This function will return a pointer to the desired data sector OR 
    94                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    95                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    96                              <1> ;Entry: rax = Sector to read
    97                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
    98                              <1> ;       qword [workingDPB] = DPB to use for transaction
    99                              <1> ;Exit:  CF=NC => 
   100                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   101                              <1> ;       CF=CY => Critical Error returned Fail
   102 000005F4 51                  <1>     push rcx
   103 000005F5 52                  <1>     push rdx
   104 000005F6 56                  <1>     push rsi
   105 000005F7 57                  <1>     push rdi
   106 000005F8 488B35(98C20300)    <1>     mov rsi, qword [workingDPB]  ;Get DPB of transacting device
   107 000005FF 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   108 00000601 E83B020000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   109 00000606 4881FBFFFFFFFF      <1>     cmp rbx, -1
   110 0000060D 7406                <1>     je .rbReadNewSector
   111                              <1> .rbExit:
   112 0000060F F8                  <1>     clc
   113                              <1> .rbExitNoFlag:
   114 00000610 5F                  <1>     pop rdi
   115 00000611 5E                  <1>     pop rsi
   116 00000612 5A                  <1>     pop rdx
   117 00000613 59                  <1>     pop rcx
   118 00000614 C3                  <1>     ret
   119                              <1> .rbReadNewSector:
   120 00000615 E8D0010000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
   121 0000061A 4889DF              <1>     mov rdi, rbx
   122 0000061D 803D(50D50300)FF    <1>     cmp byte [diskChange], -1 ;Are we in disk change?
   123 00000624 7506                <1>     jne .flush  ;We are not, flush buffer
   124 00000626 483B7717            <1>     cmp rsi, qword [rdi + bufferHdr.driveDPBPtr]    ;If yes...
   125 0000062A 7407                <1>     je .skipFlush   ;Avoid flushing if same DPB being used
   126                              <1> .flush:
   127 0000062C E8DF000000          <1>     call flushBuffer
   128 00000631 72DD                <1>     jc .rbExitNoFlag    ;Preserve the set carry flag
   129                              <1> .skipFlush:
   130                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   131 00000633 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   132 00000636 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
   133 00000639 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   134 0000063D 80F902              <1>     cmp cl, fatBuffer
   135 00000640 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   136 00000642 7503                <1>     jne .rbNonFATbuffer
   137 00000644 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   138                              <1> .rbNonFATbuffer:
   139 00000647 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   140 0000064A 8B5612              <1>     mov edx, dword [rsi + dpb.dFATlength]
   141 0000064D 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   142 00000650 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   143 00000654 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   144 00000658 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   145 0000065D EBB1                <1>     jmp short .rbExitNoFlag
   146                              <1> 
   147                              <1> ;----------------------------------------------------
   148                              <1> ;           Internally referenced functions         :
   149                              <1> ;----------------------------------------------------
   150                              <1> 
   151                              <1> readSectorBuffer:   ;Internal Linkage
   152                              <1> ;Reads a sector into a built sector buffer
   153                              <1> ;Entry: rdi = Pointer to buffer header
   154                              <1> ;Exit:  CF=NC : Success
   155                              <1> ;       CF=CY : Fail, terminate the request
   156                              <1> ;       rbx pointing to buffer header
   157                              <1> ;First make request to device driver
   158 0000065F 50                  <1>     push rax
   159 00000660 53                  <1>     push rbx
   160 00000661 51                  <1>     push rcx
   161 00000662 52                  <1>     push rdx
   162 00000663 56                  <1>     push rsi
   163 00000664 55                  <1>     push rbp
   164                              <1> .rsRequest0:
   165 00000665 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   166 0000066A F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   167 0000066E 7406                <1>     jz .rsRequest1
   168 00000670 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   169                              <1> .rsRequest1:
   170 00000676 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   171 00000679 B901000000          <1>     mov ecx, 1  ;One sector to copy
   172 0000067E 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   173 00000682 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   174 00000686 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   175 0000068A E88F130000          <1>     call diskReadSetup  ;Setup request (preserves setup registers)
   176 0000068F E87B110000          <1>     call absDiskDriverCall    ;Make Driver Request
   177 00000694 7508                <1>     jnz .rsFail
   178                              <1> .rsExit:
   179 00000696 F8                  <1>     clc
   180                              <1> .rsExitFail:
   181 00000697 5D                  <1>     pop rbp
   182 00000698 5E                  <1>     pop rsi
   183 00000699 5A                  <1>     pop rdx
   184 0000069A 59                  <1>     pop rcx
   185 0000069B 5B                  <1>     pop rbx
   186 0000069C 58                  <1>     pop rax
   187 0000069D C3                  <1>     ret
   188                              <1> .rsFail:
   189                              <1> ;Enter here only if the request failed
   190 0000069E FFCE                <1>     dec esi
   191 000006A0 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   192                              <1> ;Request failed thrice, critical error call
   193 000006A2 48893D(57C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   194 000006A9 48892D(55C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   195 000006B0 89C7                <1>     mov edi, eax    ;Save status word in di
   196 000006B2 48892D(55C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   197 000006B9 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   198 000006BC B418                <1>     mov ah, critRead | critFailOK | critRetryOK ;Set bits
   199                              <1>     ;Test for correct buffer data type
   200 000006BE F6C401              <1>     test ah, dosBuffer
   201 000006C1 7505                <1>     jnz .rsFail0
   202 000006C3 80CC00              <1>     or ah, critDOS
   203 000006C6 EB14                <1>     jmp short .rsFailMain
   204                              <1> .rsFail0:
   205 000006C8 F6C402              <1>     test ah, fatBuffer
   206 000006CB 7504                <1>     jnz .rsFail1
   207 000006CD B402                <1>     mov ah, critFAT
   208 000006CF EB0B                <1>     jmp short .rsFailMain
   209                              <1> .rsFail1:
   210 000006D1 F6C404              <1>     test ah, dirBuffer
   211 000006D4 7504                <1>     jnz .rsFail2
   212 000006D6 B404                <1>     mov ah, critDir
   213 000006D8 EB02                <1>     jmp short .rsFailMain
   214                              <1> .rsFail2:
   215                              <1> ;Here it must be a data buffer
   216 000006DA B406                <1>     mov ah, critData
   217                              <1> .rsFailMain:
   218 000006DC 8825(67C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   219 000006E2 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   220 000006E6 E8320F0000          <1>     call criticalDOSError
   221 000006EB 488B3D(57C10300)    <1>     mov rdi, qword [xInt44RDI]
   222 000006F2 488B2D(55C30300)    <1>     mov rbp, qword [tmpDPBPtr]
   223 000006F9 3C01                <1>     cmp al, critRetry
   224 000006FB 0F8464FFFFFF        <1>     je .rsRequest0
   225                              <1>     ;Else we fail (Ignore=Fail here)
   226 00000701 66C705(12C10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   226 00000709 00                  <1>
   227 0000070A F9                  <1>     stc ;Set error flag to indicate fail
   228 0000070B E987FFFFFF          <1>     jmp .rsExitFail
   229                              <1> 
   230                              <1> flushBuffer:    ;Internal Linkage
   231                              <1> ;Flushes the data in a sector buffer to disk!
   232                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   233                              <1> ;Exit:  CF=NC : Success
   234                              <1> ;       CF=CY : Fail, terminate the request
   235                              <1> ;First make request to device driver
   236 00000710 50                  <1>     push rax
   237 00000711 53                  <1>     push rbx
   238 00000712 51                  <1>     push rcx
   239 00000713 52                  <1>     push rdx
   240 00000714 56                  <1>     push rsi
   241 00000715 55                  <1>     push rbp
   242 00000716 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   243 0000071A 744E                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   244                              <1> .fbRequest0:
   245 0000071C BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   246 00000721 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   247 00000725 7406                <1>     jz .fbRequest1
   248 00000727 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   249                              <1> .fbRequest1:
   250 0000072D 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   251 00000730 B901000000          <1>     mov ecx, 1  ;One sector to copy
   252 00000735 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   253 00000739 488B5F20            <1>     mov rbx, qword [rdi + bufferHdr.dataarea]
   254 0000073D 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   255 00000741 E8CD120000          <1>     call diskWriteSetup  ;Setup request (preserves setup registers)
   256 00000746 E8C4100000          <1>     call absDiskDriverCall    ;Make Driver Request
   257 0000074B 752B                <1>     jnz .fbFail
   258                              <1> ;Now check if the buffer was a FAT, to write additional copies
   259 0000074D F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   260 00000751 7417                <1>     jz .fbFreeExit  ;If not, exit
   261 00000753 FE4F12              <1>     dec byte [rdi + bufferHdr.bufFATcopy]
   262 00000756 740C                <1>     jz .fbFreeExit1  ;Once this goes to 0, stop writing FAT copies
   263 00000758 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   264 0000075B 4801470A            <1>     add qword [rdi + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   265 0000075F E9B8FFFFFF          <1>     jmp .fbRequest0 ;Make another request
   266                              <1> .fbFreeExit1:
   267 00000764 8A5D07              <1>     mov bl, byte [rbp + dpb.bNumberOfFATs]
   268 00000767 885F12              <1>     mov byte [rdi + bufferHdr.bufFATcopy], bl    ;Just in case, replace this
   269                              <1> .fbFreeExit:
   270                              <1> ;Free the buffer if it was flushed successfully
   271 0000076A 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], 00FFh   ;Free buffer and clear flags
   272 00000770 F8                  <1>     clc
   273                              <1> .fbExitFail:
   274 00000771 5D                  <1>     pop rbp
   275 00000772 5E                  <1>     pop rsi
   276 00000773 5A                  <1>     pop rdx
   277 00000774 59                  <1>     pop rcx
   278 00000775 5B                  <1>     pop rbx
   279 00000776 58                  <1>     pop rax
   280 00000777 C3                  <1>     ret
   281                              <1> .fbFail:
   282                              <1> ;Enter here only if the request failed
   283 00000778 FFCE                <1>     dec esi
   284 0000077A 75B1                <1>     jnz .fbRequest1 ;Try the request again!
   285                              <1> ;Request failed thrice, critical error call
   286 0000077C 48893D(57C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   287 00000783 48892D(55C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   288 0000078A 89C7                <1>     mov edi, eax    ;Save status word in di
   289 0000078C 48892D(55C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   290 00000793 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   291 00000796 B419                <1>     mov ah, critWrite | critFailOK | critRetryOK ;Set bits
   292                              <1>     ;Test for correct buffer data type
   293 00000798 F6C401              <1>     test ah, dosBuffer
   294 0000079B 7505                <1>     jnz .fbFail0
   295 0000079D 80CC00              <1>     or ah, critDOS
   296 000007A0 EB14                <1>     jmp short .fbFailMain
   297                              <1> .fbFail0:
   298 000007A2 F6C402              <1>     test ah, fatBuffer
   299 000007A5 7504                <1>     jnz .fbFail1
   300 000007A7 B402                <1>     mov ah, critFAT
   301 000007A9 EB0B                <1>     jmp short .fbFailMain
   302                              <1> .fbFail1:
   303 000007AB F6C404              <1>     test ah, dirBuffer
   304 000007AE 7504                <1>     jnz .fbFail2
   305 000007B0 B404                <1>     mov ah, critDir
   306 000007B2 EB02                <1>     jmp short .fbFailMain
   307                              <1> .fbFail2:
   308                              <1> ;Here it must be a data buffer
   309 000007B4 B406                <1>     mov ah, critData
   310                              <1> .fbFailMain:
   311 000007B6 8825(67C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   312 000007BC 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver header ptr from dpb
   313 000007C0 E8580E0000          <1>     call criticalDOSError   ;Return in al the return code
   314 000007C5 488B3D(57C10300)    <1>     mov rdi, qword [xInt44RDI]
   315 000007CC 488B2D(55C30300)    <1>     mov rbp, qword [tmpDPBPtr]
   316 000007D3 3C01                <1>     cmp al, critRetry
   317 000007D5 0F8441FFFFFF        <1>     je .fbRequest0
   318                              <1>     ;Else we fail (Ignore=Fail here)
   319 000007DB 66C705(12C10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   319 000007E3 00                  <1>
   320 000007E4 F9                  <1>     stc ;Set error flag to indicate fail
   321 000007E5 E987FFFFFF          <1>     jmp .fbExitFail
   322                              <1>     
   323                              <1> findLRUBuffer: ;Internal Linkage
   324                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   325                              <1> ; in rbx and the currBuff variable
   326                              <1> ;Input: Nothing
   327                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   328 000007EA 52                  <1>     push rdx
   329 000007EB 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   330 000007F2 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   331 000007F6 7436                <1>     je .flbExit 
   332 000007F8 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   333 000007FF 742D                <1>     je .flbExit
   334                              <1> .flbWalk:
   335 00000801 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   336 00000804 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   337 00000807 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   338 0000080B 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   339 0000080D 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   340 00000814 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   341 00000816 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   342                              <1> .flbHeadLink:
   343 0000081D 488B15(A2C00300)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   344 00000824 48891D(A2C00300)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   345 0000082B 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   346                              <1> .flbExit:
   347 0000082E 5A                  <1>     pop rdx
   348 0000082F 48891D(15C30300)    <1>     mov qword [currBuff], rbx   ;Save in variable too
   349 00000836 C3                  <1>     ret
   350                              <1> .flbFreeLink:
   351 00000837 51                  <1>     push rcx
   352 00000838 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   353 0000083B 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   354 0000083E 59                  <1>     pop rcx
   355 0000083F EBDC                <1>     jmp short .flbHeadLink
   356                              <1> 
   357                              <1> findSectorInBuffer:     ;Internal linkage
   358                              <1> ;Finds the Buffer for a sector
   359                              <1> ;If the sector is not in a buffer, returns with a -1
   360                              <1> ;Input: rax = Sector number
   361                              <1> ;        dl = Drive number
   362                              <1> ;Output: rbx = Buffer hdr pointer or -1
   363 00000841 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   364                              <1> .fsiCheckBuffer:
   365 00000848 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   366 0000084B 7507                <1>     jne .fsiGotoNextBuffer
   367 0000084D 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   368 00000851 7501                <1>     jne .fsiGotoNextBuffer
   369                              <1> .fsiExit:
   370 00000853 C3                  <1>     ret
   371                              <1> .fsiGotoNextBuffer:
   372 00000854 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   373 00000857 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   374 0000085E 74F3                <1>     je .fsiExit
   375 00000860 EBE6                <1>     jmp short .fsiCheckBuffer
   376                              <1> 
   377                              <1> 
   378                              <1> findDirtyBufferForDrive:    ;No Use
   379                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   380                              <1> ;Input: dl = Drive number
   381                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   382 00000862 488B1D(A2C00300)    <1>     mov rbx, qword [bufHeadPtr]
   383                              <1> .fdbfdCheckBuffer:
   384 00000869 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   385 0000086C 7507                <1>     jne .fdbfdGotoNextBuffer
   386 0000086E F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   387 00000872 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   388                              <1> .fdbfdExit:
   389 00000874 C3                  <1>     ret
   390                              <1> .fdbfdGotoNextBuffer:
   391 00000875 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   392 00000878 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   393 0000087F 74F3                <1>     je .fdbfdExit
   394 00000881 EBE6                <1>     jmp short .fdbfdCheckBuffer
    19                                  %include "./Source/Kernel/FAT/fat.asm"
    20                              <1> ;---------------------------------------------------:
    21                              <1> ;                   KERNEL FUNCTIONS                :
    22                              <1> ;---------------------------------------------------:
    23                              <1> makeDIR:           ;ah = 39h
    24                              <1> removeDIR:         ;ah = 3Ah
    25                              <1> setCurrentDIR:     ;ah = 3Bh, set dir for current drive (or drive in path)
    26                              <1> getCurrentDIR:     ;ah = 47h
    27                              <1> getSetFileDateTime:;ah = 57h
    28                              <1> trueName:          ;ah = 60h, get fully qualified name
    29 00000883 C3                  <1>     ret
    30                              <1> 
    31                              <1> 
    32                              <1> ;-----------------------------------:
    33                              <1> ;       File System routines        :
    34                              <1> ;-----------------------------------:
    35                              <1> getFATtype:
    36                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
    37                              <1> ;Entry: rbp = DPB to ascertain FAT
    38                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
    39 00000884 53                  <1>     push rbx
    40 00000885 8B5D0E              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    41 00000888 B901000000          <1>     mov ecx, 1  ;FAT 16 marker
    42 0000088D 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    43 00000893 730F                <1>     jae .exit
    44 00000895 FFC9                <1>     dec ecx     ;FAT 12 marker
    45 00000897 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    46 0000089D 7205                <1>     jb .exit
    47 0000089F B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
    48                              <1> .exit:
    49 000008A4 5B                  <1>     pop rbx
    50 000008A5 C3                  <1>     ret
    51                              <1> 
    52                              <1> clust2FATEntry:
    53                              <1> ;Converts a cluster number to a offset in the FAT
    54                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    55                              <1> ;        eax = Cluster number to look for
    56                              <1> ;Exit:   eax = Sector on disk of FAT 
    57                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    58                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    59 000008A6 53                  <1>     push rbx
    60 000008A7 55                  <1>     push rbp
    61 000008A8 488B2D(98C20300)    <1>     mov rbp, qword [workingDPB]
    62 000008AF 8B5D0E              <1>     mov ebx, dword [rbp + dpb.dClusterCount]
    63 000008B2 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    64 000008B8 731E                <1>     jae .fat32
    65 000008BA 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    66 000008C0 7209                <1>     jb .fat12
    67                              <1> ;FAT16
    68 000008C2 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    69 000008C4 6801000000          <1>     push qword 1
    70 000008C9 EB15                <1>     jmp short .common
    71                              <1> .fat12:
    72 000008CB 89C1                <1>     mov ecx, eax    ;ecx = eax
    73 000008CD D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    74 000008CF 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    75 000008D1 6800000000          <1>     push qword 0
    76 000008D6 EB08                <1>     jmp short .common
    77                              <1> .fat32:
    78 000008D8 6802000000          <1>     push qword 2
    79 000008DD C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    80                              <1> .common:
    81                              <1> ;eax has the FAToffset
    82 000008E0 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
    83 000008E3 BA01000000          <1>     mov edx, 1
    84 000008E8 D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
    85 000008EA 89D1                <1>     mov ecx, edx
    86 000008EC 31D2                <1>     xor edx, edx    ;edx = 0
    87 000008EE F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    88 000008F0 0FB75D05            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    89 000008F4 01D8                <1>     add eax, ebx
    90 000008F6 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    91 000008F7 5D                  <1>     pop rbp
    92 000008F8 5B                  <1>     pop rbx
    93 000008F9 C3                  <1>     ret
    94                              <1> 
    95                              <1> getStartSectorOfCluster:
    96                              <1> ;Input: eax = Cluster Number
    97                              <1> ;       rbp = dpb pointer
    98                              <1> ;Output: rax = Starting Sector number for cluster
    99                              <1> ;Gives the data sector we are at in the current cluster
   100                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   101 000008FA 51                  <1>     push rcx
   102 000008FB 09C0                <1>     or eax, eax ;Zero upper dword
   103 000008FD 482D02000000        <1>     sub rax, 2
   104 00000903 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   105 00000906 48D3E0              <1>     shl rax, cl
   106 00000909 31C9                <1>     xor ecx, ecx
   107 0000090B 8B4D0A              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
   108 0000090E 4801C8              <1>     add rax, rcx
   109                              <1>     ;rax now has the first sector of the current cluster
   110 00000911 59                  <1>     pop rcx
   111 00000912 C3                  <1>     ret
   112                              <1> 
   113                              <1> findFreeCluster:
   114                              <1> ;Walks the FAT to find a free cluster and returns the 
   115                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   116                              <1> ;Works on the workingDPB
   117                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   118 00000913 53                  <1>     push rbx
   119 00000914 51                  <1>     push rcx
   120 00000915 52                  <1>     push rdx
   121 00000916 57                  <1>     push rdi
   122 00000917 55                  <1>     push rbp
   123 00000918 488B2D(98C20300)    <1>     mov rbp, qword [workingDPB]
   124 0000091F 0FB74505            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get first FAT sector
   125 00000923 488905(1DC30300)    <1>     mov qword [tempSect], rax   ;Save the sector number temporarily
   126                              <1> ;Use ebp as sector counter
   127 0000092A 8B5512              <1>     mov edx, dword [rbp + dpb.dFATlength]
   128                              <1> ;Get Sector Size in bytes in ebx
   129 0000092D BB01000000          <1>     mov ebx, 1
   130 00000932 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   131 00000935 D3E3                <1>     shl ebx, cl ;Get sector size in ebx
   132                              <1> ;Get FAT type
   133 00000937 E848FFFFFF          <1>     call getFATtype ;Gets FAT type (for number of elements in sector)
   134 0000093C 0F84B6000000        <1>     jz .fat12
   135 00000942 F6C101              <1>     test cl, 1
   136 00000945 7571                <1>     jnz .fat16
   137                              <1> ;FAT32 proceeds here
   138 00000947 C1EB02              <1>     shr ebx, 2  ;Divide by 4 to get number of FAT entries in a sector buffer
   139 0000094A 66891D(25C30300)    <1>     mov word [entries], bx
   140                              <1> .fat32Search:
   141 00000951 B102                <1>     mov cl, fatBuffer
   142 00000953 488B05(1DC30300)    <1>     mov rax, qword [tempSect]
   143 0000095A E895FCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   144 0000095F 724A                <1>     jc .exitFail
   145 00000961 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   146 00000965 31C0                <1>     xor eax, eax
   147 00000967 0FB70D(25C30300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   148 0000096E F2AF                <1>     repne scasd ;Look for the zero dword 
   149 00000970 740D                <1>     je .fat32Found  ;If found, report cluster number (offset into FAT)
   150 00000972 FFCA                <1>     dec edx ;Dec number of sectors left to search
   151 00000974 743B                <1>     jz .noFreeClusters
   152 00000976 48FF05(1DC30300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   153 0000097D EBD2                <1>     jmp short .fat32Search
   154                              <1> .fat32Found:
   155 0000097F 81EF04000000        <1>     sub edi, 4  ;edi is one dword past the entry
   156                              <1> .computeEntry:
   157 00000985 480FB74D05          <1>     movzx rcx, word [rbp + dpb.wFAToffset] ;Get start sector number of FAT 
   158 0000098A 488B05(1DC30300)    <1>     mov rax, qword [tempSect]   ;Get disk sector number of FAT into rax
   159 00000991 4829C8              <1>     sub rax, rcx   ;Get Offset into FAT in rax
   160 00000994 0FB70D(25C30300)    <1>     movzx ecx, word [entries] ;Get number of entries in a FAT sector
   161 0000099B 52                  <1>     push rdx
   162 0000099C 48F7E1              <1>     mul rcx ;Multiply rax with rcx (technically eax with ecx)
   163 0000099F 5A                  <1>     pop rdx
   164                              <1> ;rbx points to current buffer header
   165 000009A0 488D5320            <1>     lea rdx, qword [rbx + bufferHdr.dataarea]
   166 000009A4 4829D7              <1>     sub rdi, rdx
   167 000009A7 4801F8              <1>     add rax, rdi    ;Add the offset into the sector to rax to get cluster number
   168                              <1> .exit:
   169 000009AA F8                  <1>     clc
   170                              <1> .exitFail:      ;Keep carry flag
   171 000009AB 5D                  <1>     pop rbp
   172 000009AC 5F                  <1>     pop rdi
   173 000009AD 5A                  <1>     pop rdx
   174 000009AE 59                  <1>     pop rcx
   175 000009AF 5B                  <1>     pop rbx
   176 000009B0 C3                  <1>     ret
   177                              <1> .noFreeClusters:
   178 000009B1 B8FFFFFFFF          <1>     mov eax, -1 ;No free cluster marker
   179 000009B6 EBF2                <1>     jmp short .exit
   180                              <1> .fat16:
   181 000009B8 D1EB                <1>     shr ebx, 1  ;Divide by 2 to get number of FAT entries in a sector buffer
   182 000009BA 66891D(25C30300)    <1>     mov word [entries], bx
   183                              <1> .fat16Search:
   184 000009C1 B102                <1>     mov cl, fatBuffer
   185 000009C3 488B05(1DC30300)    <1>     mov rax, qword [tempSect]
   186 000009CA E825FCFFFF          <1>     call getBuffer ;Buffer Header in ebx
   187 000009CF 72DA                <1>     jc .exitFail
   188 000009D1 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   189 000009D5 31C0                <1>     xor eax, eax
   190 000009D7 0FB70D(25C30300)    <1>     movzx ecx, word [entries]   ;Get entries per FAT sector in ecx
   191 000009DE F266AF              <1>     repne scasw ;Look for the zero word 
   192 000009E1 740D                <1>     je .fat16Found  ;If found, report cluster number (offset into FAT)
   193 000009E3 FFCA                <1>     dec edx ;Dec number of sectors left to search
   194 000009E5 74CA                <1>     jz .noFreeClusters
   195 000009E7 48FF05(1DC30300)    <1>     inc qword [tempSect]    ;Go to the next FAT sector
   196 000009EE EBD1                <1>     jmp short .fat16Search
   197                              <1> .fat16Found:
   198 000009F0 81EF02000000        <1>     sub edi, 2  ;edi is one word past the entry
   199 000009F6 EB8D                <1>     jmp short .computeEntry
   200                              <1> .fat12:
   201 000009F8 89D8                <1>     mov eax, ebx    ;Get sectorsize in ax
   202 000009FA D1E0                <1>     shl eax, 1  ;Multiply by 2
   203 000009FC B903000000          <1>     mov ecx, 3  ;1.5 bytes per FAT entry *2
   204 00000A01 52                  <1>     push rdx    ;Preserve number of sectors in FAT counter
   205 00000A02 31D2                <1>     xor edx, edx
   206 00000A04 F7F1                <1>     div ecx
   207 00000A06 5A                  <1>     pop rdx
   208 00000A07 668905(25C30300)    <1>     mov word [entries], ax ;Get quotient (number of whole entries in sector) 
   209                              <1>     ;The value is rounded down so we can read the next sector for the 
   210                              <1>     ;last entry manually (thus buffering it if it not already buffered)
   211 00000A0E B102                <1>     mov cl, fatBuffer
   212 00000A10 488B05(1DC30300)    <1>     mov rax, qword [tempSect]
   213 00000A17 E8D8FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   214 00000A1C 728D                <1>     jc .exitFail
   215 00000A1E 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   216                              <1> .fat12SearchNewSector:
   217 00000A22 0FB70D(25C30300)    <1>     movzx ecx, word [entries]   ;This is total entries in Sector rounded down
   218                              <1> .fat12Search:
   219 00000A29 0FB707              <1>     movzx eax, word [rdi]   ;Get first word (EVEN ENTRY)
   220 00000A2C 25FF0F0000          <1>     and eax, 0FFFh   ;Clear upper nybble
   221 00000A31 744A                <1>     jz .fat12EntryFound
   222 00000A33 48FFC7              <1>     inc rdi ;Goto next byte
   223 00000A36 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   224 00000A38 0FB707              <1>     movzx eax, word [rdi]  ;Get second word (ODD ENTRY)
   225 00000A3B C1E804              <1>     shr eax, 4  ;Shift down by 4
   226 00000A3E 743D                <1>     jz .fat12EntryFound
   227 00000A40 48FFC7              <1>     inc rdi ;Goto next entry
   228 00000A43 FFC9                <1>     dec ecx ;Dec the number of entries to search in sector
   229 00000A45 75E2                <1>     jnz .fat12Search
   230                              <1> ;We arrive here when we are at the last entry in the sector
   231 00000A47 48FF05(1DC30300)    <1>     inc qword [tempSect]    ;Get next Sector
   232 00000A4E 488B05(1DC30300)    <1>     mov rax, qword [tempSect]   ;Get this sector in rax
   233 00000A55 B102                <1>     mov cl, fatBuffer
   234 00000A57 E898FBFFFF          <1>     call getBuffer ;Buffer Header in ebx
   235 00000A5C 0F8249FFFFFF        <1>     jc .exitFail
   236 00000A62 0FB607              <1>     movzx eax, byte [rdi]  ;Get last byte in old buffer (rdi still points there)
   237 00000A65 488D4B20            <1>     lea rcx, qword [rbx + bufferHdr.dataarea]   ;Go to data area (preserve rdi)
   238 00000A69 8A21                <1>     mov ah, byte [rcx]  ;Get first byte in new sector
   239 00000A6B C1E804              <1>     shr eax, 4  ;Clear out bottom nybble
   240 00000A6E 740D                <1>     jz .fat12EntryFound ;Found a sector!
   241                              <1>     ;Empty cluster not found in sector
   242 00000A70 FFCA                <1>     dec edx ;Decrement sector count
   243 00000A72 0F8439FFFFFF        <1>     jz .noFreeClusters
   244 00000A78 4889CF              <1>     mov rdi, rcx    ;Set rdi to point at start of next sector
   245 00000A7B EBA5                <1>     jmp short .fat12SearchNewSector ;Reload the number of entries and search
   246                              <1> .fat12EntryFound:
   247 00000A7D E903FFFFFF          <1>     jmp .computeEntry   ;Unnecessary redirection
   248                              <1> 
   249                              <1> getNextSectorOfFile:
   250                              <1> ;This function will read the next sector for a file into a buffer.
   251                              <1> ;If the next sector to be read lives in the next cluster, it will update
   252                              <1> ; the file handle of the file being read/written to the new cluster
   253                              <1> ;
   254                              <1> ;Input: qword [currentSFT] = sft pointer
   255                              <1> ;Output:
   256                              <1> ;       qword [currBuff] = ptr to buffer data (if rbx = -1, end of file reached)
   257                              <1> ;       CF = NC, buffer OK to read
   258                              <1> ;       CF = CY, Fail request
   259                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   260                              <1>     ; next cluster and read first sector 
   261 00000A82 50                  <1>     push rax
   262 00000A83 53                  <1>     push rbx
   263 00000A84 51                  <1>     push rcx
   264 00000A85 52                  <1>     push rdx
   265 00000A86 56                  <1>     push rsi
   266 00000A87 57                  <1>     push rdi
   267 00000A88 55                  <1>     push rbp
   268                              <1>     ;Check if we need to go to next cluster
   269 00000A89 488B35(0BC30300)    <1>     mov rsi, qword [currentSFT] ;Get the current SFT
   270 00000A90 488B2D(98C20300)    <1>     mov rbp, qword [workingDPB] ;Get DPB pointer for file
   271 00000A97 8A05(30C30300)      <1>     mov al, byte [currSect]    ;Get current sector rel Cluster
   272 00000A9D 3A4503              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   273 00000AA0 7452                <1>     je .gotoNextCluster
   274                              <1>     ;Goto next sector in same cluster
   275 00000AA2 FE05(30C30300)      <1>     inc byte [currSect]    ;Goto next sector in cluster
   276 00000AA8 48FF05(31C30300)    <1>     inc qword [currSectA]  ;Goto next sector on Disk
   277                              <1> .getSector:
   278 00000AAF 488B05(31C30300)    <1>     mov rax, qword [currSectA]  ;Get the disk sector number to read
   279                              <1>     ;Read the sector into a buffer
   280                              <1>     ;The sector read here is either DATA or DOS
   281 00000AB6 488D762C            <1>     lea rsi, qword [rsi + sft.sFileName]
   282 00000ABA 488D3D41F5FFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   283 00000AC1 B90B000000          <1>     mov ecx, 11             ;File name length
   284 00000AC6 F3A6                <1>     repe cmpsb
   285 00000AC8 7426                <1>     je .OSFile
   286 00000ACA 488D762C            <1>     lea rsi, qword [rsi + sft.sFileName]
   287 00000ACE 488D3D39F5FFFF      <1>     lea rdi, dosKernName
   288 00000AD5 B90B000000          <1>     mov ecx, 11             ;File name length
   289 00000ADA F3A6                <1>     repe cmpsb
   290 00000ADC 7412                <1>     je .OSFile
   291                              <1>     ;Not an OS file, dataBuffer
   292 00000ADE B108                <1>     mov cl, dataBuffer
   293                              <1> .getSectorRead:
   294 00000AE0 E80FFBFFFF          <1>     call getBuffer  ;Get ptr to buffer header in [currBuff]
   295 00000AE5 7201                <1>     jc .exitFail
   296                              <1> .getSectorExit:
   297 00000AE7 F8                  <1>     clc
   298                              <1> .exitFail:
   299 00000AE8 5D                  <1>     pop rbp
   300 00000AE9 5F                  <1>     pop rdi
   301 00000AEA 5E                  <1>     pop rsi
   302 00000AEB 5A                  <1>     pop rdx
   303 00000AEC 59                  <1>     pop rcx
   304 00000AED 5B                  <1>     pop rbx
   305 00000AEE 58                  <1>     pop rax
   306 00000AEF C3                  <1>     ret
   307                              <1> .OSFile:
   308 00000AF0 B101                <1>     mov cl, dosBuffer
   309 00000AF2 EBEC                <1>     jmp short .getSectorRead
   310                              <1> .gotoNextCluster:
   311 00000AF4 8B05(2BC30300)      <1>     mov eax, dword [currClustA] ;Get absolute cluster number
   312 00000AFA E814000000          <1>     call walkFAT
   313                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   314 00000AFF 3DFFFFFFFF          <1>     cmp eax, -1
   315 00000B04 75A9                <1>     jne .getSector
   316                              <1> ;Else, we are at the last sector, we return -1 ,and the caller decides 
   317                              <1> ; based on the call what to do!
   318 00000B06 48C705(15C30300)FF- <1>     mov qword [currBuff], -1    ;Set current buffer to -1
   318 00000B0E FFFFFF              <1>
   319 00000B11 EBD4                <1>     jmp short .getSectorExit
   320                              <1> 
   321                              <1> walkFAT:
   322                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   323                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   324                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   325                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   326                              <1> ;If carry set, getBuffer failed!
   327 00000B13 53                  <1>     push rbx
   328 00000B14 51                  <1>     push rcx
   329 00000B15 52                  <1>     push rdx
   330 00000B16 57                  <1>     push rdi
   331 00000B17 55                  <1>     push rbp
   332 00000B18 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   333 00000B1A E887FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   334                              <1>     ;and FAT type in ecx
   335 00000B1F 0FB75D05            <1>     movzx ebx, word [rbp + dpb.wFAToffset]
   336 00000B23 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   337 00000B25 51                  <1>     push rcx    ;Move FAT signature onto stack
   338 00000B26 B102                <1>     mov cl, fatBuffer
   339 00000B28 E8C7FAFFFF          <1>     call getBuffer ;Buffer Header in ebx
   340 00000B2D 59                  <1>     pop rcx
   341 00000B2E 722D                <1>     jc .exitFail
   342                              <1>     ;Check if FAT 12, 16, 32
   343 00000B30 85C9                <1>     test ecx, ecx
   344 00000B32 742F                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   345 00000B34 F7C101000000        <1>     test ecx, 1
   346 00000B3A 7410                <1>     jz .goToNextClusterFat32
   347                              <1>     ;Here we handle FAT16
   348 00000B3C 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   349 00000B41 663DFFFF            <1>     cmp ax, -1
   350 00000B45 7515                <1>     jne .exit
   351 00000B47 0FBEC0              <1>     movsx eax, al
   352 00000B4A EB10                <1>     jmp short .exit
   353                              <1> .goToNextClusterFat32:
   354 00000B4C 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   355 00000B50 3DFFFFFFFF          <1>     cmp eax, -1
   356 00000B55 7405                <1>     je .exit   ;If EOC, skip zeroing nybble
   357 00000B57 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   358                              <1> .exit:
   359 00000B5C F8                  <1>     clc
   360                              <1> .exitFail:
   361 00000B5D 5D                  <1>     pop rbp
   362 00000B5E 5F                  <1>     pop rdi
   363 00000B5F 5A                  <1>     pop rdx
   364 00000B60 59                  <1>     pop rcx
   365 00000B61 5B                  <1>     pop rbx
   366 00000B62 C3                  <1>     ret
   367                              <1> .gotoNextClusterFat12:
   368                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   369                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   370                              <1> 
   371 00000B63 57                  <1>     push rdi    ;Save the cluster number on the stack
   372 00000B64 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   373 00000B67 FFC0                <1>     inc eax ;Get next sector
   374 00000B69 B102                <1>     mov cl, fatBuffer
   375 00000B6B E884FAFFFF          <1>     call getBuffer ;Buffer Header in ebx
   376 00000B70 59                  <1>     pop rcx ;Return the cluster number in rcx
   377 00000B71 72EA                <1>     jc .exitFail
   378                              <1>     ;rdi has first buffer header, rbx has second buffer header
   379                              <1>     ;rdx has offset into first header for entry
   380 00000B73 F7C101000000        <1>     test ecx, 1  ;Check if cluster is odd
   381 00000B79 7428                <1>     jz .gotoNextClusterFat12Even
   382                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   383 00000B7B B801000000          <1>     mov eax, 1
   384 00000B80 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   385 00000B83 D3E0                <1>     shl eax, cl
   386 00000B85 29D0                <1>     sub eax, edx
   387 00000B87 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   388 00000B89 750E                <1>     jnz .gotoNextClusterFat12NoCross
   389                              <1>     ;Boundary cross, build entry properly
   390 00000B8B 31C0                <1>     xor eax, eax
   391 00000B8D 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   392 00000B91 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   393 00000B94 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   394 00000B97 EB14                <1>     jmp short .checkIfLastFAT12Cluster
   395                              <1> .gotoNextClusterFat12NoCross:
   396 00000B99 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   397 00000B9E C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   398 00000BA1 EB0A                <1>     jmp short .checkIfLastFAT12Cluster
   399                              <1> .gotoNextClusterFat12Even:
   400                              <1>     ;Here the cluster is even and can't cross a sector boundary
   401 00000BA3 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   402 00000BA8 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   403                              <1> .checkIfLastFAT12Cluster:
   404 00000BAD 663DFF0F            <1>     cmp ax, 0FFFh
   405 00000BB1 75A9                <1>     jne .exit
   406 00000BB3 B8FFFFFFFF          <1>     mov eax, -1
   407 00000BB8 E99FFFFFFF          <1>     jmp .exit
   408                              <1> 
   409                              <1> setSectorVars:
   410                              <1> ;Uses the currByteA and cluster variables to update the sector variables
   411                              <1> ;   currByte (byte granular sector offset), currSect and currSectA
   412 00000BBD 50                  <1>     push rax
   413 00000BBE 51                  <1>     push rcx
   414 00000BBF 52                  <1>     push rdx
   415 00000BC0 55                  <1>     push rbp
   416 00000BC1 488B2D(98C20300)    <1>     mov rbp, qword [workingDPB]
   417 00000BC8 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   418 00000BCB 024D04              <1>     add cl, byte [rbp + dpb.bSectorsPerClusterShift]
   419                              <1>     ;Get in cl bytes per Cluster shift
   420 00000BCE 8B05(27C30300)      <1>     mov eax, dword [currClust]  ;Get current file cluster number
   421 00000BD4 D3E0                <1>     shl eax, cl ;Get number of bytes to the current File Relative cluster
   422 00000BD6 8B0D(3BC30300)      <1>     mov ecx, dword [currByteA]
   423 00000BDC 29C1                <1>     sub ecx, eax    ;Get the difference
   424                              <1>     ;ecx now has the offset in bytes into the current cluster
   425 00000BDE 480FB605(2FC30300)  <1>     movzx rax, byte [clustFact] ;Get number of sectors per cluster into al
   426 00000BE6 0FB64D02            <1>     movzx ecx, byte [rbp + dpb.bBytesPerSectorShift]
   427 00000BEA D3E0                <1>     shl eax, cl ;Get bytes per cluster in eax
   428                              <1>     ;eax now has the number of bytes in a cluster
   429 00000BEC 91                  <1>     xchg eax, ecx   ;Swap em
   430 00000BED 31D2                <1>     xor edx, edx
   431 00000BEF F7F1                <1>     div ecx ;Offset into cluster (bytes)/bytes in sector (bytes)
   432                              <1>     ;edx has the offset into the current sector in bytes (remainder)
   433                              <1>     ;eax has the number of sectors into the cluster in sectors (quotient)
   434 00000BF1 668915(39C30300)    <1>     mov word [currByte], dx ;Save sector offset
   435 00000BF8 8805(30C30300)      <1>     mov byte [currSect], al ;Save cluster relative sector number
   436                              <1> ;Get Disk Relative (absolute) Sector being pointed to
   437 00000BFE 8B05(2BC30300)      <1>     mov eax, [currClustA]   ;Get current absolute cluster
   438 00000C04 E8F1FCFFFF          <1>     call getStartSectorOfCluster    ;rbp points to dpb and eax has cluster num
   439                              <1>     ;rax has starting disk sector of cluster
   440 00000C09 480FB60D(30C30300)  <1>     movzx rcx, byte [currSect]  ;Get cluster relative sector offset
   441 00000C11 4801C8              <1>     add rax, rcx    
   442 00000C14 488905(31C30300)    <1>     mov qword [currSectA], rax  ;Save the current disk relative sector number
   443 00000C1B 5D                  <1>     pop rbp
   444 00000C1C 5A                  <1>     pop rdx
   445 00000C1D 59                  <1>     pop rcx
   446 00000C1E 58                  <1>     pop rax
   447 00000C1F C3                  <1>     ret
    20                                  %include "./Source/Kernel/CharDevs/charFunctions.asm"
    21                              <1> ;Dos default char functions live here
    22                              <1> 
    23                              <1> stdinReadEcho:     ;ah = 01h
    24                              <1> ;Return char that has been read and echoed in al
    25 00000C20 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    26 00000C27 488D05(91C20300)    <1>     lea rax, singleIObyt
    27 00000C2E C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    28 00000C31 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    29 00000C35 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    30 00000C3B 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    31 00000C3F C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    32                              <1> 
    33 00000C46 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    34 00000C4D E89B0A0000          <1>     call goDriver
    35                              <1> 
    36 00000C52 803D(91C20300)00    <1>     cmp byte [singleIObyt], 00h
    37 00000C59 742B                <1>     jz .stdireexit
    38 00000C5B 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    39 00000C62 488D05(91C20300)    <1>     lea rax, singleIObyt
    40 00000C69 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    41 00000C6C C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    42 00000C70 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    43 00000C76 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    44 00000C7A C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    45 00000C81 E8670A0000          <1>     call goDriver   ;rbx has reqheader ptr
    46                              <1> .stdireexit:
    47 00000C86 8A05(91C20300)      <1>     mov al, byte [singleIObyt]
    48 00000C8C C3                  <1>     ret
    49                              <1> 
    50                              <1> stdoutWrite:       ;ah = 02h
    51                              <1> ;Bspace is regular cursor left, does not insert a blank
    52 00000C8D 8815(91C20300)      <1>     mov byte [singleIObyt], dl
    53 00000C93 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    54 00000C9A 488D15(91C20300)    <1>     lea rdx, singleIObyt
    55 00000CA1 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    56 00000CA4 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    57 00000CA8 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    58 00000CAE 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    59 00000CB2 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    60                              <1> 
    61 00000CB9 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    62 00000CC0 E8280A0000          <1>     call goDriver
    63 00000CC5 C3                  <1>     ret
    64                              <1> stdauxRead:        ;ah = 03h
    65                              <1> stdauxWrite:       ;ah = 04h
    66                              <1> stdprnWrite:       ;ah = 05h
    67                              <1> directCONIO:       ;ah = 06h
    68                              <1> waitDirectInNoEcho:;ah = 07h
    69                              <1> ;Return char in al
    70 00000CC6 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    71 00000CCD 488D05(91C20300)    <1>     lea rax, singleIObyt
    72 00000CD4 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    73 00000CD7 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    74 00000CDB 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    75 00000CE1 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    76 00000CE5 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    77                              <1> 
    78 00000CEC 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
    79 00000CF3 E8F5090000          <1>     call goDriver
    80 00000CF8 8A05(91C20300)      <1>     mov al, byte [singleIObyt]
    81 00000CFE C3                  <1>     ret
    82                              <1> waitStdinNoEcho:   ;ah = 08h
    83 00000CFF C3                  <1>     ret
    84                              <1> printString:       ;ah = 09h
    85 00000D00 31C9                <1>     xor ecx, ecx    ;Clear char counter
    86 00000D02 B824000000          <1>     mov eax, "$"    ;Terminating char
    87 00000D07 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    88                              <1> .ps0:   ;Search for $ to get count of chars
    89 00000D0A AE                  <1>     scasb
    90 00000D0B 7404                <1>     je .ps1
    91 00000D0D FFC1                <1>     inc ecx
    92 00000D0F EBF9                <1>     jmp short .ps0
    93                              <1> .ps1:   ;Use handle 
    94 00000D11 488D1D(24C00300)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    95 00000D18 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    96 00000D1B C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    97 00000D1F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    98 00000D25 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    99 00000D29 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   100                              <1>     
   101 00000D2C 488B35(98C00300)    <1>     mov rsi, qword [conPtr]   ;Get ptr to current con device header
   102 00000D33 E8B5090000          <1>     call goDriver   ;Called with rbx pointing to the request header
   103                              <1> 
   104 00000D38 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   105 00000D3F 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   106 00000D41 C3                  <1>     ret
   107                              <1> buffStdinInput:    ;ah = 0Ah
   108                              <1> checkStdinStatus:  ;ah = 0Bh
   109                              <1> clearbuffDoFunc:   ;ah = 0Ch
   110                              <1> 
   111                              <1> ;Utility functions
   112                              <1> checkBreakOnCon:
   113                              <1> ;Reads bytes from CON if there are any bytes to read and 
   114                              <1> ; if it is a ^C or CTRL+BREAK, then exit via INT 43h
   115 00000D42 803D(0FC10300)01    <1>     cmp byte [inDOS], 1
   116 00000D49 7401                <1>     je checkBreak  ;Only check ^C on first entry to DOS
   117 00000D4B C3                  <1>     ret
   118                              <1> checkBreak:
   119                              <1> ;Returns in al the keystroke that is available IF one is available
   120                              <1> ; or al=0 if no keystroke available
   121 00000D4C 53                  <1>     push rbx
   122 00000D4D 56                  <1>     push rsi
   123 00000D4E 488B35(98C00300)    <1>     mov rsi, qword [conPtr] ;Get pointer to Console device driver
   124 00000D55 31C0                <1>     xor eax, eax
   125                              <1>     ;Place command code and a zero status word at the same time
   126 00000D57 B005                <1>     mov al, drvNONDESTREAD
   127 00000D59 8905(26C00300)      <1>     mov dword [charReqHdr + nonDestInNoWaitReqPkt.cmdcde], eax
   128                              <1>     ;Place the packet size in the hdrlen field
   129 00000D5F B00E                <1>     mov al, nonDestInNoWaitReqPkt_size
   130 00000D61 8805(24C00300)      <1>     mov byte [charReqHdr + nonDestInNoWaitReqPkt.hdrlen], al
   131 00000D67 488D1D(24C00300)    <1>     lea rbx, charReqHdr
   132 00000D6E E87A090000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   133                              <1>     ;Check if the busy bit is set (No keystroke available)
   134 00000D73 66F705(27C00300)00- <1>     test word [charReqHdr + nonDestInNoWaitReqPkt.status], drvBsyStatus
   134 00000D7B 02                  <1>
   135 00000D7C 7403                <1>     jz .charFound
   136                              <1> .exit:
   137 00000D7E 5E                  <1>     pop rsi
   138 00000D7F 5B                  <1>     pop rbx
   139 00000D80 C3                  <1>     ret
   140                              <1> .charFound:
   141                              <1> ;Keystroke available, proceed
   142 00000D81 8A05(31C00300)      <1>     mov al, byte [charReqHdr + nonDestInNoWaitReqPkt.retbyt]    ;Get char
   143 00000D87 3C03                <1>     cmp al, 03h ;BREAK/^C =ASCII 03h
   144 00000D89 75F3                <1>     jne .exit   ;If not equal exit
   145                              <1> ;Now we pull the char out of the buffer
   146 00000D8B 31C0                <1>     xor eax, eax
   147 00000D8D B004                <1>     mov al, drvREAD ;Read command
   148 00000D8F 8905(26C00300)      <1>     mov dword [charReqHdr + ioReqPkt.cmdcde], eax
   149                              <1>     ;Place packet size
   150 00000D95 C605(24C00300)2A    <1>     mov byte [charReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   151                              <1>     ;Place pointers and number of chars
   152 00000D9C C705(3AC00300)0100- <1>     mov dword [charReqHdr + ioReqPkt.tfrlen], 1 ;One char to be read
   152 00000DA4 0000                <1>
   153 00000DA6 488D05(91C20300)    <1>     lea rax, singleIObyt    ;IO Byte buffer
   154 00000DAD 488905(32C00300)    <1>     mov qword [charReqHdr + ioReqPkt.bufptr], rax
   155 00000DB4 E834090000          <1>     call goDriver   ;RSI and RBX as before
   156 00000DB9 C3                  <1>     ret ;Stopgap right now, do nothing
   157                              <1> 
   158                              <1> 
   159                              <1>     
    21                                  %include "./Source/Kernel/CharDevs/dateTimeFunctions.asm"
    22                              <1> ;Major kernel date time functions and subroutines
    23                              <1> 
    24                              <1> getDate:           ;ah = 2Ah
    25                              <1> setDate:           ;ah = 2Bh
    26                              <1> getTime:           ;ah = 2Ch
    27                              <1> setTime:           ;ah = 2Dh
    28 00000DBA C3                  <1>     ret
    22                                  %include "./Source/Kernel/FileIO/fcbFunctions.asm"
    23                              <1> openFileFCB:       ;ah = 0Fh
    24                              <1> closeFileFCB:      ;ah = 10h
    25                              <1> findFirstFileFCB:  ;ah = 11h
    26                              <1> findNextFileFCB:   ;ah = 12h
    27                              <1> deleteFileFCB:     ;ah = 13h
    28                              <1> sequentialReadFCB: ;ah = 14h
    29                              <1> sequentialWriteFCB:;ah = 15h
    30                              <1> createFileFCB:     ;ah = 16h
    31                              <1> renameFileFCB:     ;ah = 17h
    32 00000DBB C3                  <1>     ret
    33                              <1> setDTA:            ;ah = 1Ah
    34                              <1> ;Called with:
    35                              <1> ;   rdx = Pointer to the new default DTA
    36 00000DBC 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
    37 00000DC3 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    38 00000DC7 488915(1EC10300)    <1>     mov qword [currentDTA], rdx
    39 00000DCE C3                  <1>     ret
    40                              <1> randomReadFCB:     ;ah = 21h
    41                              <1> randomWriteFCB:    ;ah = 22h
    42                              <1> getFileSizeFCB:    ;ah = 23h
    43                              <1> setRelRecordFCB:   ;ah = 24h
    44                              <1> randBlockReadFCB:  ;ah = 27h
    45                              <1> randBlockWriteFCB: ;ah = 28h
    46                              <1> parseFilenameFCB:  ;ah = 29h
    47 00000DCF C3                  <1>     ret
    48                              <1> getDTA:            ;ah = 2Fh
    49 00000DD0 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
    50 00000DD7 488B1D(1EC10300)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    51 00000DDE 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    52 00000DE2 C3                  <1>     ret
    23                                  %include "./Source/Kernel/FileIO/handleFunctions.asm"
    24                              <1> ;-----------------------------------:
    25                              <1> ;    File Handle Kernel routines    :
    26                              <1> ;-----------------------------------:
    27                              <1> 
    28                              <1> createFileHdl:     ;ah = 3Ch, handle function
    29 00000DE3 C3                  <1>     ret
    30                              <1> openFileHdl:       ;ah = 3Dh, handle function
    31 00000DE4 C3                  <1>     ret
    32                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    33 00000DE5 C3                  <1>     ret
    34                              <1> readFileHdl:       ;ah = 3Fh, handle function
    35 00000DE6 C605(92C20300)00    <1>     mov byte [rwFlag], 0    ;Read
    36 00000DED EB07                <1>     jmp short rwFileHndleCommon
    37                              <1> writeFileHdl:      ;ah = 40h, handle function
    38 00000DEF C605(92C20300)01    <1>     mov byte [rwFlag], 1    ;Write
    39                              <1> rwFileHndleCommon:
    40                              <1> ;bx has file handle, ecx has number of bytes to read
    41 00000DF6 66891D(13C30300)    <1>     mov word [currentHdl], bx
    42 00000DFD E8D8000000          <1>     call getSFTPtr  ;Get SFT ptr in var in rdi and var
    43 00000E02 7236                <1>     jc short lseekHdl.exitBad ;If file handle not good, recycle error
    44                              <1>     ;Now check if device or disk file
    45 00000E04 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Is it a char dev?
    46 00000E0A 7518                <1>     jnz .charDev
    47                              <1>     ;We are a disk (eventually, network too) file.
    48                              <1>     ;Check if we can set the cluster fields first (is dCurntOff <= dFileSize)
    49                              <1>     ;rdi has the SFT pointer
    50 00000E0C 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
    51 00000E0F 3B4717              <1>     cmp eax, dword [rdi + sft.dFileSize]
    52 00000E12 7300                <1>     jae .above
    53                              <1> .above:
    54                              <1> ;If it is a read, operation, return 0 bytes.
    55 00000E14 F605(92C20300)01    <1>     test byte [rwFlag], 1
    56 00000E1B 7507                <1>     jnz .writeAbove
    57 00000E1D 31C0                <1>     xor eax, eax    ;No characters transferred
    58 00000E1F E900000000          <1>     jmp .exitOK
    59                              <1> .writeAbove:
    60                              <1> .charDev:
    61                              <1> .exitOK:
    62 00000E24 E8360C0000          <1>     call getUserRegs
    63 00000E29 8906                <1>     mov dword [rsi + callerFrame.rax], eax  ;Store number of chars transferred
    64 00000E2B C3                  <1>     ret
    65                              <1> 
    66                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    67                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
    68                              <1> ;New pointer passed in edx! ecx will be DOCUMENTED as having to be 0
    69 00000E2C E8A9000000          <1>     call getSFTPtr
    70 00000E31 7326                <1>     jnc .sftValid
    71                              <1>     ;Error code and exit
    72                              <1>     ;al (eax) has error code for bad file handle
    73 00000E33 668905(12C10300)    <1>     mov word [errorExCde], ax
    74                              <1> .exitBad:
    75 00000E3A C605(11C10300)01    <1>     mov byte [errorLocus], eLocUnk  ;Unknown Locus
    76 00000E41 C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Reinput data
    77 00000E48 C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd
    78 00000E4F E80B0C0000          <1>     call getUserRegs    ;Get user regs in rsi
    79 00000E54 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set CF
    80 00000E58 C3                  <1>     ret
    81                              <1> .sftValid:
    82 00000E59 3C03                <1>     cmp al, 3
    83 00000E5B 7206                <1>     jb .validFunction
    84                              <1>     ;Error code and exit
    85 00000E5D 66B80100            <1>     mov ax, errInvFnc
    86 00000E61 EBD7                <1>     jmp short .exitBad
    87                              <1> .validFunction:
    88 00000E63 3C01                <1>     cmp al, 1
    89 00000E65 7713                <1>     ja .seekend
    90 00000E67 7203                <1>     jb .seekset
    91                              <1> ;Here we are at seekcur, seek from current (signed)
    92 00000E69 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
    93                              <1> .seekset:
    94                              <1> ;Seek from the start (unsigned)
    95 00000E6C 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
    96 00000E6F E8EB0B0000          <1>     call getUserRegs    ;Get user regs in rsi
    97 00000E74 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
    98 00000E77 30C0                <1>     xor al, al  ;Return OK!
    99 00000E79 C3                  <1>     ret
   100                              <1> .seekend:
   101                              <1> ;Here we are at seekend, seek from end (signed)
   102 00000E7A 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   103 00000E7D EBED                <1>     jmp short .seekset
   104                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   105                              <1> ioctrl:            ;ah = 44h, handle function
   106                              <1> duplicateHandle:   ;ah = 45h, handle function
   107                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   108                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   109                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   110                              <1> renameFile:        ;ah = 56h
   111                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   112                              <1> createNewFile:     ;ah = 5Bh
   113                              <1> lockUnlockFile:    ;ah = 5Ch
   114                              <1> setHandleCount:    ;ah = 67h
   115                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   116 00000E7F C3                  <1>     ret
   117                              <1> ;-----------------------------------:
   118                              <1> ;        File Handle routines       :
   119                              <1> ;-----------------------------------:
   120                              <1> setFileAccessVariables:
   121                              <1> ;This will set up the file access variables and currentSFT 
   122                              <1> ; for the SFT pointer in rsi
   123                              <1> ;Only used if the SFT is pointing and reading/writing to/from a 
   124                              <1> ; hardfile (not device)
   125                              <1> ;Uses the file pointer value in the given SFT and the given SFT for
   126                              <1> ; computations.
   127                              <1> ;Sets up the variables for the SFT AS IT IS WHEN THE FUNCTION IS INVOKED
   128                              <1> ;Input: rsi = SFT to setup for
   129                              <1> ;Output: Variables initialised:
   130                              <1> ;   currentSFT, workingDPB
   131                              <1> ;   currClust, currClustA, clustFact, currSect, currSectA, currByte
   132                              <1> ;   currByteA
   133 00000E80 50                  <1>     push rax
   134 00000E81 51                  <1>     push rcx
   135 00000E82 52                  <1>     push rdx
   136 00000E83 56                  <1>     push rsi
   137 00000E84 55                  <1>     push rbp
   138                              <1> ;Set current SFT
   139 00000E85 E840000000          <1>     call setCurrentSFT  ;Set rsi the current SFT ptr
   140 00000E8A 31C0                <1>     xor eax, eax
   141                              <1> ;Get Disk Relative (absolute) cluster
   142 00000E8C 8B463F              <1>     mov eax, dword [rsi + sft.dAbsClusr]
   143 00000E8F 8905(2BC30300)      <1>     mov dword [currClustA], eax 
   144                              <1> ;Get File Relative Cluster
   145 00000E95 8B461F              <1>     mov eax, dword [rsi + sft.dRelClust]
   146 00000E98 8905(27C30300)      <1>     mov dword [currClust], eax
   147                              <1> ;Set working DPB
   148 00000E9E 488B6E07            <1>     mov rbp, qword [rsi + sft.qPtr] ;Get DPB ptr
   149 00000EA2 E8B00B0000          <1>     call setWorkingDPB
   150                              <1> ;Get Number of Sectors per Cluster
   151 00000EA7 31C0                <1>     xor eax, eax
   152 00000EA9 FFC0                <1>     inc eax
   153 00000EAB 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   154 00000EAE D3E0                <1>     shl eax, cl ;Get number of Sectors Per Cluster
   155 00000EB0 8805(2FC30300)      <1>     mov byte [clustFact], al 
   156                              <1> ;Get Current Byte in File we are pointing to relative to the start of the file
   157 00000EB6 8B4E1B              <1>     mov ecx, dword [rsi + sft.dCurntOff]
   158 00000EB9 890D(3BC30300)      <1>     mov dword [currByteA], ecx
   159                              <1> ;___
   160                              <1> ; | DO THE FOLLOWING TOGETHER
   161                              <1> ; | Get Cluster Relative Sector being pointed to
   162                              <1> ; | Get Current Byte in File we are pointing to relative to the sector
   163                              <1> ; | Get Disk Relative (absolute) Sector being pointed to
   164                              <1> ;_|_
   165 00000EBF E8F9FCFFFF          <1>     call setSectorVars
   166 00000EC4 5D                  <1>     pop rbp
   167 00000EC5 5E                  <1>     pop rsi
   168 00000EC6 5A                  <1>     pop rdx
   169 00000EC7 59                  <1>     pop rcx
   170 00000EC8 58                  <1>     pop rax
   171 00000EC9 C3                  <1>     ret
   172                              <1> 
   173                              <1> 
   174                              <1> setCurrentSFT:
   175                              <1> ;Set the pointer in rsi as current SFT 
   176 00000ECA 488935(0BC30300)    <1>     mov qword [currentSFT], rsi
   177 00000ED1 C3                  <1>     ret
   178                              <1> getCurrentSFT:
   179                              <1> ;Get the current SFT pointer in rsi
   180 00000ED2 488B35(0BC30300)    <1>     mov rsi, qword [currentSFT]
   181 00000ED9 C3                  <1>     ret
   182                              <1> 
   183                              <1> getSFTPtr:
   184                              <1> ;Gets the SFT pointer for a given file handle from the calling application
   185                              <1> ;On entry:
   186                              <1> ;   bx = File handle from JFT for calling application
   187                              <1> ;On exit: CF=NC, SFT found and placed in var and rdi
   188                              <1> ;         CF=CY, SFT not found, abort! al=BadHdl errorcode
   189 00000EDA 50                  <1>     push rax
   190 00000EDB 53                  <1>     push rbx
   191 00000EDC 56                  <1>     push rsi
   192 00000EDD 663B1D(B6C00300)    <1>     cmp bx, word [maxHndls]  ;current max number of file handles
   193 00000EE4 7365                <1>     jnb .gspFail
   194 00000EE6 488B35(26C10300)    <1>     mov rsi, qword [currentPSP]
   195 00000EED 480FB7DB            <1>     movzx rbx, bx
   196 00000EF1 488D5C1E2A          <1>     lea rbx, qword [rsi + psp.jobFileTbl + rbx] 
   197 00000EF6 48891D(03C30300)    <1>     mov [currentJFT], rbx   ;Save a pointer to the JFT entry
   198 00000EFD 8A1B                <1>     mov bl, byte [rbx]   ;Use jft entry to get sft num
   199 00000EFF 80FBFF              <1>     cmp bl, -1  ;Non-existant SFT reference?
   200 00000F02 7447                <1>     je .gspFail
   201 00000F04 31C0                <1>     xor eax, eax
   202 00000F06 488B3D(88C00300)    <1>     mov rdi, qword [sftHeadPtr]
   203                              <1> .gsp0:
   204 00000F0D 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   205 00000F11 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   206 00000F13 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   207 00000F15 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   208 00000F1C 742D                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   209 00000F1E 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   210 00000F21 EBEA                <1>     jmp short .gsp0 ;Search again
   211                              <1> .gsp1: 
   212                              <1>     ;Now point to the right entry
   213 00000F23 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   214 00000F25 0FB6C0              <1>     movzx eax, al
   215 00000F28 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   216 00000F2F 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   217 00000F31 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   218                              <1> .gsp11:
   219 00000F33 4881C743000000      <1>     add rdi, sft_size
   220 00000F3A FEC8                <1>     dec al
   221 00000F3C 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   222                              <1> .gsp12:
   223 00000F3E 4889FE              <1>     mov rsi, rdi
   224 00000F41 E884FFFFFF          <1>     call setCurrentSFT ;Set Current SFT pointer to rsi value
   225 00000F46 F8                  <1>     clc
   226                              <1> .gspExit:
   227 00000F47 5E                  <1>     pop rsi
   228 00000F48 5B                  <1>     pop rbx
   229 00000F49 58                  <1>     pop rax
   230 00000F4A C3                  <1>     ret
   231                              <1> .gspFail:
   232 00000F4B B806000000          <1>     mov eax, errBadHdl  ;al, zero rest of it
   233 00000F50 F9                  <1>     stc
   234 00000F51 EBF4                <1>     jmp short .gspExit
   235                              <1> 
   236                              <1> copySFTtoSDA:
   237                              <1> ;Called with rsi pointing to SFT structure
   238                              <1> ;Prepares the scratch SFT in SDA for use
   239 00000F53 488D3D(8DC80300)    <1>     lea rdi, scratchSFT
   240 00000F5A 488B35(0BC30300)    <1>     mov rsi, qword [currentSFT]   ;Get current SFT
   241 00000F61 EB0E                <1>     jmp short copySScommon
   242                              <1> copySDAtoSFT:
   243 00000F63 488D35(8DC80300)    <1>     lea rsi, scratchSFT
   244 00000F6A 488B3D(0BC30300)    <1>     mov rdi, qword [currentSFT]   ;Get current SFT
   245                              <1> copySScommon:
   246 00000F71 51                  <1>     push rcx
   247 00000F72 B943000000          <1>     mov ecx, sft_size
   248 00000F77 F3A4                <1>     rep movsb   ;Copy
   249 00000F79 59                  <1>     pop rcx
   250 00000F7A C3                  <1>     ret
   251                              <1> 
   252                              <1> updateCurrentSFT:
   253                              <1> ;Updates the Current SFT fields before returning from a file handle operation
   254 00000F7B 56                  <1>     push rsi
   255 00000F7C 50                  <1>     push rax
   256 00000F7D 488B35(0BC30300)    <1>     mov rsi, qword [currentSFT]
   257 00000F84 8B05(3BC30300)      <1>     mov eax, dword [currByteA]
   258 00000F8A 89461B              <1>     mov dword [rsi + sft.dCurntOff], eax
   259 00000F8D 8B05(2BC30300)      <1>     mov eax, dword [currClustA]
   260 00000F93 89463F              <1>     mov dword [rsi + sft.dAbsClusr], eax
   261 00000F96 8B05(27C30300)      <1>     mov eax, dword [currClust]
   262 00000F9C 89461F              <1>     mov dword [rsi + sft.dRelClust], eax
   263 00000F9F 58                  <1>     pop rax
   264 00000FA0 5E                  <1>     pop rsi
   265 00000FA1 C3                  <1>     ret
   266                              <1> 
   267                              <1> setClusterVars:
   268                              <1> ;Uses the number given in eax as the file pointer, to compute
   269                              <1> ; sft fields
   270                              <1> ;Works on the SFT pointer provided in rsi
   271                              <1> ;Input: rsi = SFT entry pointer
   272                              <1> ;Output: rsi = SFT cluster fields updated IF CF=NC
   273                              <1> ;       CF=CY => Fail request with Int 44h
   274 00000FA2 50                  <1>     push rax
   275 00000FA3 53                  <1>     push rbx
   276 00000FA4 51                  <1>     push rcx
   277 00000FA5 52                  <1>     push rdx
   278 00000FA6 55                  <1>     push rbp
   279                              <1> ;Use variables instead of SFT fields in case the disk fails
   280 00000FA7 8905(3BC30300)      <1>     mov dword [currByteA], eax
   281 00000FAD 31C9                <1>     xor ecx, ecx
   282 00000FAF 31D2                <1>     xor edx, edx
   283 00000FB1 488B6E07            <1>     mov rbp, qword [rsi + sft.qPtr] ;Get DPB pointer
   284 00000FB5 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   285 00000FB8 024D04              <1>     add cl, byte [rbp + dpb.bSectorsPerClusterShift]
   286                              <1>     ;Get in cl bytes per Cluster shift
   287 00000FBB BA01000000          <1>     mov edx, 1
   288 00000FC0 D3E2                <1>     shl edx, cl ;Get number of bytes in a cluster in edx
   289 00000FC2 89D1                <1>     mov ecx, edx    ;Move the number of bytes in a cluster to ecx
   290 00000FC4 31D2                <1>     xor edx, edx
   291 00000FC6 89C3                <1>     mov ebx, eax    ;Save byte pointer in ebx
   292 00000FC8 F7F1                <1>     div ecx
   293                              <1>     ;eax = Quotient => Relative cluster number
   294                              <1>     ;edx = Remainder => Byte offset into cluster
   295 00000FCA 8905(27C30300)      <1>     mov dword [currClust], eax    ;Save relative cluster 
   296                              <1> ;Now walk the FAT relative cluster number of times
   297 00000FD0 89C1                <1>     mov ecx, eax
   298 00000FD2 8B460F              <1>     mov eax, dword [rsi + sft.dStartClust]
   299 00000FD5 48892D(98C20300)    <1>     mov qword [workingDPB], rbp ;Make the dpb working for walkFAT
   300                              <1> .fatWalk:
   301 00000FDC 3DFFFFFFFF          <1>     cmp eax, -1
   302 00000FE1 742A                <1>     je .getFreeSector
   303 00000FE3 E82BFBFFFF          <1>     call walkFAT
   304 00000FE8 7220                <1>     jc .diskFail
   305 00000FEA FFC9                <1>     dec ecx
   306 00000FEC 75EE                <1>     jnz .fatWalk
   307                              <1> ;eax has absolute cluster number now, set SFT fields
   308 00000FEE 89463F              <1>     mov dword [rsi + sft.dAbsClusr], eax
   309 00000FF1 8B05(27C30300)      <1>     mov eax, dword [currClust]
   310 00000FF7 89461F              <1>     mov dword [rsi + sft.dRelClust], eax
   311 00000FFA 8B05(3BC30300)      <1>     mov eax, dword [currByteA]
   312 00001000 89461B              <1>     mov dword [rsi + sft.dCurntOff], eax
   313 00001003 F8                  <1>     clc
   314                              <1> .exit:
   315 00001004 5D                  <1>     pop rbp
   316 00001005 5A                  <1>     pop rdx
   317 00001006 59                  <1>     pop rcx
   318 00001007 5B                  <1>     pop rbx
   319 00001008 58                  <1>     pop rax
   320 00001009 C3                  <1>     ret
   321                              <1> .diskFail:
   322                              <1> ;FAT read failed, error
   323 0000100A F9                  <1>     stc
   324 0000100B EBF7                <1>     jmp short .exit
   325                              <1> .getFreeSector:
   326                              <1> ;Simply need to get the first free sector and add it to the file allocation
    24                                  %include "./Source/Kernel/MemExec/memFunc.asm"
    25                              <1> ;Memory related functions
    26                              <1> 
    27                              <1> ;-----------------------------------:
    28                              <1> ;  Memory related Kernel routines   :
    29                              <1> ;-----------------------------------:
    30                              <1> allocateMemory:    ;ah = 48h
    31                              <1> ;Input: ebx = Number of paragraphs requested
    32                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    33                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    34 0000100D 31D2                <1>     xor edx, edx
    35                              <1>     ;Clear the pointers
    36 0000100F 488915(3FC10300)    <1>     mov qword [firstMCB], rdx
    37 00001016 488915(47C10300)    <1>     mov qword [bestMCB], rdx
    38 0000101D 488915(4FC10300)    <1>     mov qword [lastMCB], rdx
    39 00001024 31ED                <1>     xor ebp, ebp    
    40 00001026 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    41 00001028 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    42                              <1> .walk:
    43 0000102F 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    44 00001032 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    45 00001035 7409                <1>     je .walk1
    46 00001037 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    47 0000103A 0F8565050000        <1>     jne memSysHalt
    48                              <1> .walk1:
    49                              <1>     ;Here if valid but not the last block
    50 00001040 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    51 00001048 0F8582000000        <1>     jne .walk2
    52                              <1>     ;Here we consolidate adjacent free blocks if there are any
    53                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    54                              <1>     ;End consolidation at first non free block or at last block in chain
    55 0000104E 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    56 00001051 744A                <1>     je .det0    ;Determine if this block is useful
    57 00001053 31C9                <1>     xor ecx, ecx
    58 00001055 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    59 00001058 4881C610000000      <1>     add rsi, mcb.program
    60                              <1> .cons0:
    61 0000105F 48C1E104            <1>     shl rcx, 4
    62 00001063 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    63 00001066 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    64 00001069 7409                <1>     je .cons1
    65 0000106B 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    66 0000106E 0F8531050000        <1>     jne memSysHalt 
    67                              <1> .cons1:
    68 00001074 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    69 0000107C 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    70                              <1>     ;Here rsi, points to a free block, add it to rdi
    71 0000107E 31C9                <1>     xor ecx, ecx
    72 00001080 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    73 00001083 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    74 00001089 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    75 0000108C 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    76 0000108E 31D2                <1>     xor edx, edx
    77 00001090 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    78 00001093 48895608            <1>     mov qword [rsi + 8], rdx
    79 00001097 3C5A                <1>     cmp al, mcbMarkEnd
    80 00001099 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    81                              <1>     ;Here we deal with if the block was the last one 
    82 0000109B 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    83                              <1> .det0:  ;Now determine if pointer in rdi is useful
    84 0000109D 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    85                              <1> ;ebx must be less than the arena size for the arena to be useful!
    86 000010A0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    87 000010A3 39D9                <1>     cmp ecx, ebx
    88 000010A5 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    89 000010A7 488935(4FC10300)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    90 000010AE 488B05(3FC10300)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    91 000010B5 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    92 000010B8 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    93 000010BA 488935(3FC10300)    <1>     mov qword [firstMCB], rsi
    94                              <1> .det1:
    95                              <1>     ;Now test for best fit.
    96 000010C1 29D9                <1>     sub ecx, ebx    ;Block - ebx
    97 000010C3 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    98 000010C5 7209                <1>     jb .walk2
    99 000010C7 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
   100 000010C9 488935(47C10300)    <1>     mov qword [bestMCB], rsi
   101                              <1> .walk2:
   102 000010D0 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   103 000010D3 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
   104 000010D5 31C9                <1>     xor ecx, ecx
   105 000010D7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 000010DA 48C1E104            <1>     shl rcx, 4
   107 000010DE 4881C610000000      <1>     add rsi, mcb.program
   108 000010E5 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
   109 000010E8 E942FFFFFF          <1>     jmp .walk
   110                              <1> .allocate:
   111                              <1>     ;Allocation fails IF the pointer is the null pointer
   112 000010ED 803D(3AC10300)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
   113 000010F4 7261                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
   114                              <1>     ;Fall thru if last fit
   115 000010F6 488B35(4FC10300)    <1>     mov rsi, qword [lastMCB]
   116 000010FD 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   117 00001100 0F84CE000000        <1>     jz .allocFail
   118 00001106 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   119 00001108 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   120 0000110B 31C9                <1>     xor ecx, ecx
   121 0000110D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   122 00001110 29D9                <1>     sub ecx, ebx
   123 00001112 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   124 00001118 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   125 0000111B 48C1E104            <1>     shl rcx, 4
   126 0000111F 4881C610000000      <1>     add rsi, mcb.program
   127 00001126 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   128 00001129 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   129 0000112B 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   130 0000112E 488B15(26C10300)    <1>     mov rdx, qword [currentPSP] ;Owner is the calling application
   131 00001135 48895601            <1>     mov qword [rsi + mcb.owner], rdx
   132 00001139 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   133 00001140 4881C610000000      <1>     add rsi, mcb.program    ;Point to program area
   134 00001147 4889F0              <1>     mov rax, rsi
   135 0000114A 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save pointer in rax
   136 0000114D 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   137 00001151 E824040000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   138 00001156 C3                  <1>     ret
   139                              <1> .bfCommon:
   140 00001157 488B35(3FC10300)    <1>     mov rsi, qword [firstMCB]
   141 0000115E 803D(3AC10300)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   142 00001165 480F4435(47C10300)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   143 0000116D 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   144 00001170 7462                <1>     jz .allocFail
   145 00001172 8A06                <1>     mov al, byte [rsi + mcb.marker]
   146 00001174 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   147 00001177 31C9                <1>     xor ecx, ecx
   148 00001179 8B4E09              <1>     mov ecx, [rsi + mcb.blockSize]  ;Get current whole block size
   149 0000117C 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   150 0000117E 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   151 00001184 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   152 00001187 488B15(26C10300)    <1>     mov rdx, qword [currentPSP]
   153 0000118E 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   154 00001192 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   155 00001195 4881C610000000      <1>     add rsi, mcb.program
   156 0000119C 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   157 000011A2 48C1E304            <1>     shl rbx, 4
   158 000011A6 4801DE              <1>     add rsi, rbx
   159 000011A9 8806                <1>     mov byte [rsi + mcb.marker], al ;Store old marker in new block
   160 000011AB 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   161 000011B3 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx
   162 000011B6 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   163 000011BD 4881C710000000      <1>     add rdi, mcb.program    ;Point to program area
   164 000011C4 4889F8              <1>     mov rax, rdi
   165 000011C7 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   166 000011CA 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   167 000011CE E8A7030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   168 000011D3 C3                  <1>     ret
   169                              <1> .allocFail:
   170                              <1>     ;Walk the MCB chain to determine the biggest block size
   171 000011D4 488B35(78C00300)    <1>     mov rsi, [mcbChainPtr]
   172 000011DB 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   173                              <1> .af0:
   174 000011DD 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   175 000011E0 7409                <1>     je .af1
   176 000011E2 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   177 000011E5 0F85BA030000        <1>     jne memSysHalt
   178                              <1> .af1:
   179 000011EB 31C9                <1>     xor ecx, ecx
   180 000011ED 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   181 000011F0 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   182 000011F8 7505                <1>     jne .af2
   183 000011FA 39D9                <1>     cmp ecx, ebx
   184 000011FC 0F47D9              <1>     cmova ebx, ecx
   185                              <1> .af2:
   186 000011FF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   187 00001202 7410                <1>     je .afExit
   188 00001204 48C1E104            <1>     shl rcx, 4
   189 00001208 4881C610000000      <1>     add rsi, mcb.program
   190 0000120F 4801CE              <1>     add rsi, rcx
   191 00001212 EBD7                <1>     jmp short .af1
   192                              <1> .afExit:
   193 00001214 B808000000          <1>     mov eax, errNoMem
   194 00001219 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   195 00001220 8802                <1>     mov byte [rdx + callerFrame.rax], al
   196 00001222 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx
   197 00001225 804A5801            <1>     or byte [rdx + callerFrame.flags], 1
   198 00001229 C3                  <1>     ret
   199                              <1> freeMemory:        ;ah = 49h
   200                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   201                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   202                              <1> ;Always skip the first block as this is the anchor for DOS
   203 0000122A 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   204 00001231 31C9                <1>     xor ecx, ecx
   205 00001233 488B35(78C00300)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   206 0000123A 4889F7              <1>     mov rdi, rsi
   207 0000123D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   208 00001240 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   209 00001244 4881C610000000      <1>     add rsi, mcb.program
   210 0000124B 4801CE              <1>     add rsi, rcx    ;Go to next block
   211                              <1> .mainLoop:
   212 0000124E 31C9                <1>     xor ecx, ecx
   213 00001250 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   214 00001253 7409                <1>     je .valid
   215 00001255 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   216 00001258 0F8547030000        <1>     jne memSysHalt
   217                              <1> .valid:
   218 0000125E 4939F0              <1>     cmp r8, rsi
   219 00001261 741C                <1>     je .blockFound
   220                              <1>     ;Not valid, check if last block in chain
   221 00001263 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   222 00001266 0F84A0000000        <1>     je .blockNotFound
   223 0000126C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   224 0000126F 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   225 00001273 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   226 0000127A 4801CE              <1>     add rsi, rcx    ;Go to next block
   227 0000127D EBCF                <1>     jmp short .mainLoop
   228                              <1> .blockFound:
   229                              <1>     ;If hole, error.
   230                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   231 0000127F 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   232 00001287 0F8488000000        <1>     je .blockHole
   233 0000128D 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   234 00001295 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   235 0000129D 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   236                              <1>     ;It is, let it absorb this space
   237 0000129F 31C9                <1>     xor ecx, ecx
   238 000012A1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   239 000012A4 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   240 000012AA 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   241                              <1>     ;Replace block marker
   242 000012AD 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   243 000012AF 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   244 000012B1 31C9                <1>     xor ecx, ecx
   245 000012B3 48890E              <1>     mov qword [rsi], rcx
   246 000012B6 48894E08            <1>     mov qword [rsi + 8], rcx
   247 000012BA 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   248                              <1> .blockFoundCheckFollowing:
   249                              <1>     ;First check if we are the last block in chain
   250 000012BD 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   251 000012C0 7439                <1>     je .blockFoundExit  ;If yes, exit!
   252 000012C2 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   253 000012C5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   254 000012C8 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   255 000012CC 4881C110000000      <1>     add rcx, mcb.program
   256 000012D3 4801CE              <1>     add rsi, rcx    ;Go to next block
   257 000012D6 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   258 000012DE 751B                <1>     jne .blockFoundExit ;If not free, exit
   259                              <1>     ;If free, absorb into block pointed to by rdi
   260 000012E0 31C9                <1>     xor ecx, ecx
   261 000012E2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   262 000012E5 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   263 000012EB 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   264                              <1>     ;Replace block marker
   265 000012EE 8A06                <1>     mov al, byte [rsi + mcb.marker]
   266 000012F0 8807                <1>     mov byte [rdi + mcb.marker], al
   267 000012F2 31C9                <1>     xor ecx, ecx
   268 000012F4 48890E              <1>     mov qword [rsi], rcx
   269 000012F7 48894E08            <1>     mov qword [rsi + 8], rcx
   270                              <1> .blockFoundExit:
   271 000012FB E87A020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   272 00001300 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   273 00001307 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   274 0000130B C3                  <1>     ret
   275                              <1> .blockNotFound:
   276                              <1>     ;Set CF and error code
   277 0000130C C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd   ;Block not found 
   278 00001313 EB07                <1>     jmp short .blockError
   279                              <1> .blockHole:
   280                              <1> ;Cannot free a hole! Fail!
   281 00001315 C605(15C10300)0A    <1>     mov byte [errorClass], eClsLocked   ;Cant free a hole
   282                              <1> .blockError:
   283 0000131C C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   284 00001323 C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   285 0000132A 66C705(12C10300)09- <1>     mov word [errorExCde], errMemAddr   ;Invalid mem addr
   285 00001332 00                  <1>
   286 00001333 C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   287 0000133A B809000000          <1>     mov eax, errMemAddr
   288 0000133F 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   289 00001346 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   290 00001349 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   291 0000134D E828020000          <1>     call verifyIntegrityOfMCBChain
   292 00001352 C3                  <1>     ret
   293                              <1> reallocMemory:     ;ah = 4Ah
   294                              <1> ;Input: r8 = address of the block to be realloc'ed
   295                              <1> ;       ebx = How many paras this block should contain after realloc. 
   296                              <1> ;               If ebx = 0, jump to free memory
   297 00001353 85DB                <1>     test ebx, ebx
   298 00001355 0F84CFFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   299 0000135B 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   300 00001362 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   301 00001365 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   302 00001368 7409                <1>     je .ctn
   303 0000136A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   304 0000136D 0F855C010000        <1>     jne .badAddrGiven
   305                              <1> .ctn:
   306                              <1>     ;Provided block is valid and not a hole
   307                              <1>     ;Check if Growth or Shrink
   308 00001373 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   309 0000137B 7498                <1>     je freeMemory.blockHole
   310 0000137D 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   311 00001380 31C9                <1>     xor ecx, ecx
   312 00001382 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   313 00001385 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   314 00001387 0F8786000000        <1>     ja .growth
   315 0000138D 0F8414010000        <1>     je .exit    ;If they are equal, do nothing!
   316                              <1> ;We can always shrink
   317 00001393 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   318 00001395 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   319 0000139B 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   320 0000139E 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   321 000013A4 48C1E304            <1>     shl rbx, 4
   322 000013A8 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   323 000013AF 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   324 000013B2 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   325 000013B4 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   326 000013B7 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   327 000013B9 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   328 000013C1 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   329 000013C4 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   330 000013C6 0F84DB000000        <1>     je .exit
   331                              <1> ;Else, now see if the block following is also free and absorb it
   332 000013CC 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   333 000013CF 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   334 000013D3 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   335 000013DA 4801CE              <1>     add rsi, rcx    ;Goto next arena
   336 000013DD 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   337 000013E0 7409                <1>     je .shrinkAbsorb
   338 000013E2 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   339 000013E5 0F85BA010000        <1>     jne memSysHalt
   340                              <1> .shrinkAbsorb:
   341 000013EB 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   342 000013F3 0F85AE000000        <1>     jne .exit
   343                              <1>     ;It is free, absorb it
   344 000013F9 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   345 000013FC 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the space of the absorbed MCB
   346 00001402 014F09              <1>     add dword [rdi + mcb.blockSize], ecx ;Add it to the new arena size
   347 00001405 31C9                <1>     xor ecx, ecx
   348                              <1>     ;Clear absorbed MCB
   349 00001407 48890E              <1>     mov qword [rsi], rcx
   350 0000140A 48894E08            <1>     mov qword [rsi + 8], rcx
   351 0000140E E994000000          <1>     jmp .exit
   352                              <1> .growth:
   353                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   354 00001413 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   355 00001416 0F84A0000000        <1>     je .notEnuffMem
   356                              <1> ;Now check the following space is free. If not, not enuff mem err
   357 0000141C 31C9                <1>     xor ecx, ecx
   358 0000141E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   359 00001421 48C1E104            <1>     shl rcx, 4
   360 00001425 4889F7              <1>     mov rdi, rsi    
   361 00001428 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   362 0000142F 4801CE              <1>     add rsi, rcx
   363 00001432 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   364 00001435 7409                <1>     je .growthOK
   365 00001437 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   366 0000143A 0F8565010000        <1>     jne memSysHalt
   367                              <1> .growthOK:
   368                              <1>     ;rdi points to block we are growing
   369 00001440 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   370 00001448 7572                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   371                              <1>     ;rsi must own all memory up to the next owned arena
   372 0000144A 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   373 0000144C 31C9                <1>     xor ecx, ecx
   374 0000144E 31D2                <1>     xor edx, edx
   375 00001450 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   376 00001453 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   377 00001459 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   378 0000145C 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   379 0000145E 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   380 00001460 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   381 00001463 7759                <1>     ja .notEnuffMem1
   382 00001465 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   383 00001467 81FA01000000        <1>     cmp edx, 1
   384 0000146D 7449                <1>     je .notEnuffMem2
   385 0000146F 31C9                <1>     xor ecx, ecx
   386 00001471 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   387 00001474 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   388 00001478 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   389 0000147B 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   390 0000147E 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   391 00001485 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   392 00001489 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   393 0000148C 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   394 00001490 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   395                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   396                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   397 00001492 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   398 00001494 7411                <1>     jz .exit
   399 00001496 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   400 0000149C 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   401 0000149F 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   402                              <1> .exit:
   403 000014A7 E8CE000000          <1>     call verifyIntegrityOfMCBChain
   404 000014AC 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   405 000014B3 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   406 000014B7 C3                  <1>     ret
   407                              <1> .notEnuffMem2:
   408 000014B8 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   409 000014BA EB02                <1>     jmp short .notEnuffMem1
   410                              <1> .notEnuffMem:
   411 000014BC 31DB                <1>     xor ebx, ebx    ;No space to grow
   412                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   413 000014BE B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   414 000014C3 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   415 000014CA 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   416 000014CD EB0C                <1>     jmp short .bad
   417                              <1> .badAddrGiven:
   418 000014CF 488B15(73C10300)    <1>     mov rdx, qword [oldRSP]
   419 000014D6 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   420                              <1> .bad:
   421 000014DB C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   422 000014E2 C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   423 000014E9 668905(12C10300)    <1>     mov word [errorExCde], ax   ;Error code
   424 000014F0 C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   425 000014F7 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save this word on stack
   426 000014FA 804A5801            <1>     or byte [rdx + callerFrame.flags], 1    ;Set Carry flag on
   427 000014FE E877000000          <1>     call verifyIntegrityOfMCBChain
   428 00001503 C3                  <1>     ret
   429                              <1> getsetMallocStrat: ;ah = 58h
   430 00001504 84C0                <1>     test al, al
   431 00001506 741F                <1>     jz .get
   432 00001508 3C02                <1>     cmp al, 2
   433 0000150A 7337                <1>     jae .bad
   434                              <1> ;Set here
   435 0000150C 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   436 00001513 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   437 00001517 8805(3AC10300)      <1>     mov byte [allocStrat], al   ;Only save low word
   438 0000151D 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   439 00001521 E854000000          <1>     call verifyIntegrityOfMCBChain
   440 00001526 C3                  <1>     ret
   441                              <1> .get:
   442 00001527 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   443 0000152E 31C0                <1>     xor eax, eax
   444 00001530 8A05(3AC10300)      <1>     mov al, byte [allocStrat]
   445 00001536 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   446 00001539 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   447 0000153D E838000000          <1>     call verifyIntegrityOfMCBChain
   448 00001542 C3                  <1>     ret
   449                              <1> .bad:
   450 00001543 C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   451 0000154A C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   452 00001551 66C705(12C10300)01- <1>     mov word [errorExCde], errInvFnc   ;Invalid function number addr
   452 00001559 00                  <1>
   453 0000155A C605(14C10300)03    <1>     mov byte [errorAction], eActUsr ;Retry with different value
   454 00001561 B801000000          <1>     mov eax, errInvFnc
   455 00001566 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   456 0000156D 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Save this word on stack
   457 00001570 804B5801            <1>     or byte [rbx + callerFrame.flags], 1    ;Set Carry flag on
   458 00001574 E801000000          <1>     call verifyIntegrityOfMCBChain
   459 00001579 C3                  <1>     ret
   460                              <1> ;-----------------------------------:
   461                              <1> ;      Memory related routines      :
   462                              <1> ;-----------------------------------:
   463                              <1> verifyIntegrityOfMCBChain:
   464 0000157A 50                  <1>     push rax
   465 0000157B 53                  <1>     push rbx
   466 0000157C 488B1D(78C00300)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   467                              <1> .ok:
   468 00001583 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   469 00001586 7408                <1>     je .ok1
   470 00001588 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   471 0000158B 7518                <1>     jne memSysHalt    ;It was not M or Z, fail violently
   472                              <1> .exit:
   473 0000158D 5B                  <1>     pop rbx
   474 0000158E 58                  <1>     pop rax
   475 0000158F C3                  <1>     ret ;We have reached the end of the chain, return all good!
   476                              <1> .ok1:
   477 00001590 31C0                <1>     xor eax, eax
   478 00001592 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   479 00001595 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   480 00001599 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   481 000015A0 4801C3              <1>     add rbx, rax
   482 000015A3 EBDE                <1>     jmp short .ok
   483                              <1> memSysHalt:
   484                              <1> ;Only arrive here if the integrity of the system is not verified
   485                              <1> ;Lock the system
   486 000015A5 C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;No drive
   487 000015AC C605(11C10300)05    <1>     mov byte [errorLocus], eLocMem  ;Memory locus
   488 000015B3 66C705(12C10300)07- <1>     mov word [errorExCde], errMCBbad   ;Destroyed MCB chain
   488 000015BB 00                  <1>
   489 000015BC C605(14C10300)05    <1>     mov byte [errorAction], eActKil ;Abort the system
   490 000015C3 488D150E000000      <1>     lea rdx, .sysHltString
   491 000015CA B409                <1>     mov ah, 09h
   492 000015CC CD41                <1>     int 41h
   493                              <1>     ;Only halt IRQ's in production!
   494                              <1>     %if !DEBUG
   495 000015CE FA                  <1>     cli ;Halt interrupts
   496 000015CF B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
   497 000015D1 E6A1                <1>     out 0A1h, al
   498 000015D3 E621                <1>     out 021h, al
   499                              <1>     %endif
   500 000015D5 F4                  <1>     hlt             ;Halt the system
   501 000015D6 EBFD                <1>     jmp short $ - 1 ;Go back far enough to capture the hlt
   502 000015D8 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
   502 000015E1 6C6F636174696F6E20- <1>
   502 000015EA 6572726F720D0A      <1>
   503 000015F1 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
   503 000015FA 616420434F4D4D414E- <1>
   503 00001603 442C2073797374656D- <1>
   503 0000160C 2068616C74656424    <1>
    25                                  %include "./Source/Kernel/MemExec/execTerm.asm"
    26                              <1> ;EXEC and all default terminates are here
    27                              <1> 
    28                              <1> ;========================
    29                              <1> ;   Interrupt handlers
    30                              <1> ;========================
    31                              <1> terminateProcess:   ;Int 40h
    32 00001614 48CF                <1>     iretq
    33                              <1> terminateRes:       ;Int 47h
    34 00001616 48CF                <1>     iretq
    35                              <1> ;========================
    36                              <1> ;    Int 21h functions
    37                              <1> ;========================
    38                              <1> simpleTerminate:   ;ah = 00h
    39 00001618 C3                  <1>     ret
    40                              <1> terminateStayRes:  ;ah = 31h
    41 00001619 C3                  <1>     ret
    42                              <1> loadExecChild:     ;ah = 4Bh, EXEC
    43 0000161A C3                  <1>     ret
    44                              <1> terminateClean:    ;ah = 4Ch, EXIT
    45 0000161B C3                  <1>     ret
    26                                  %include "./Source/Kernel/Local/Local.asm"
    27                              <1> ;Localisation based functions live here
    28                              <1> 
    29                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    30                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    31                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    32                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    33 0000161C C3                  <1>     ret
    27                                  %include "./Source/Kernel/ctrlc.asm"
    28                              <1> criticalDOSError:
    29                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    30                              <1> ; to the critical error handler.
    31                              <1> ; Called with rsi set as required by Int 44h (caller decides), ax, di
    32                              <1> ; and with Int44Bitfield set
    33                              <1> ;               AH = Critical Error Bitfield
    34                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    35                              <1> ;               Bit 6 - Reserved
    36                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    37                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    38                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    39                              <1> ;               Bits [2-1] = Affected Disk Error
    40                              <1> ;                     0 0   DOS area
    41                              <1> ;                     0 1   FAT area
    42                              <1> ;                     1 0   Directory area
    43                              <1> ;                     1 1   Data area
    44                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    45                              <1> ;               AL  = Failing drive number if AH[7] = 0
    46                              <1> ;               DIL = Error code for errorMsg
    47                              <1> ;               RSI = EA of Device Header for which device the error occured
    48                              <1> ;Return:
    49                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    50                              <1> ;                  = 1 - Retry the Operation    (Retry)
    51                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
    52                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    53                              <1> ; Return response from int 44h in al
    54                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
    55                              <1> ; This function will terminate the program if an abort was requested!
    56                              <1> ; This function also destroys RBP
    57 0000161D 803D(0EC10300)01    <1>     cmp byte [critErrFlag], 1
    58 00001624 7204                <1>     jb .noIntError  ;If not 0, enter
    59 00001626 B003                <1>     mov al, critFail    ;Else, return Fail always
    60 00001628 EB34                <1>     jmp short .checkResponse
    61                              <1> .noIntError:
    62 0000162A FA                  <1>     cli ;Disable Interrupts
    63 0000162B FE05(0EC10300)      <1>     inc byte [critErrFlag]  ;Set flag for critical error
    64 00001631 FE0D(0FC10300)      <1>     dec byte [inDOS]    ;Exiting DOS
    65 00001637 488925(5FC10300)    <1>     mov qword [xInt44hRSP], rsp
    66 0000163E 488B25(73C10300)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    67 00001645 31ED                <1>     xor ebp, ebp
    68 00001647 CD44                <1>     int 44h ;Call critical error handler, sets interrupts on again
    69 00001649 488B25(5FC10300)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    70 00001650 C605(0EC10300)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    71 00001657 FE05(0FC10300)      <1>     inc byte [inDOS]    ;Reenter DOS
    72 0000165D FB                  <1>     sti ;Reenable Interrupts
    73                              <1>     ;Now we check that the response given was allowed, and translate if needed
    74                              <1> .checkResponse:
    75 0000165E 3C01                <1>     cmp al, 01h
    76 00001660 7217                <1>     jb .checkIgnore
    77 00001662 7420                <1>     je .checkRetry
    78 00001664 3C03                <1>     cmp al, 03h
    79 00001666 752F                <1>     jne .abort   ;Must be abort
    80                              <1> ;Here is for fail
    81 00001668 F605(67C10300)08    <1>     test byte [Int44bitfld], critFailOK
    82 0000166F 7526                <1>     jnz .abort
    83                              <1> .exit:
    84 00001671 C605(10C10300)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
    85 00001678 C3                  <1>     ret
    86                              <1> .checkIgnore:
    87 00001679 F605(67C10300)20    <1>     test byte [Int44bitfld], critIgnorOK
    88 00001680 75EF                <1>     jnz .exit
    89 00001682 EB09                <1>     jmp short .setFail
    90                              <1> .checkRetry:
    91 00001684 F605(67C10300)10    <1>     test byte [Int44bitfld], critRetryOK
    92 0000168B 75E4                <1>     jnz .exit
    93                              <1> .setFail:
    94 0000168D B003                <1>     mov al, critFail
    95 0000168F FE05(68C10300)      <1>     inc byte [Int44Fail]        ;Inc the fail counter!
    96 00001695 EBC7                <1>     jmp short .checkResponse    ;Double check if I can return Fail
    97                              <1> .abort:
    98                              <1> ;Prepare to abort. We abort from within!
    99                              <1> ;Currently fall into ^C
   100                              <1> ctrlBreakHdlr:
   101                              <1> ;Handles a control break, juggles stacks and enters int 41h 
   102 00001697 FA                  <1> 	cli
   103 00001698 488B25(73C10300)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   104 0000169F E8A3050000          <1> 	call dosPopRegs ;Get user state back
   105 000016A4 488925(30C10300)    <1>     mov qword [xInt43hRSP], rsp  ;Save user rsp
   106 000016AB F8                  <1>     clc
   107 000016AC CD43                <1>     int 43h ;Call critical error handler
   108 000016AE FA                  <1>     cli ;Clear interrupts again
   109 000016AF 488905(06C10300)    <1>     mov qword [oldRAX], rax ;Save rax
   110 000016B6 9C                  <1>     pushfq  ;Get flags in rax
   111 000016B7 58                  <1>     pop rax 
   112 000016B8 483B25(30C10300)    <1>     cmp rsp, qword [xInt43hRSP] ;Did the user return with ret 8?
   113 000016BF 750C                <1>     jne .checkCF
   114                              <1> .returnToDOS:
   115 000016C1 488B05(06C10300)    <1>     mov rax, qword [oldRAX]
   116 000016C8 E93C040000          <1>     jmp functionDispatch    ;Goto int 41h
   117                              <1> .checkCF:
   118 000016CD 4881C408000000      <1>     add rsp, 8  ;Account for the flags left on the stack
   119 000016D4 A801                <1>     test al, 1  ;CF set?
   120 000016D6 74E9                <1>     jz .returnToDOS ;Yes, subfunction number must be in al
   121 000016D8 B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   122 000016DD C605(84C10300)FF    <1>     mov byte [critExit], -1  ;CTRL+BREAK termination
   123 000016E4 E920040000          <1>     jmp functionDispatch
   124                              <1> 
    28                                  %include "./Source/Kernel/dosPrim.asm"
    29                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
    30                              <1> ; are placed here (Int 45h Int 46h and goDriver)
    31                              <1> 
    32                              <1> dosDefCritErrHdlr:
    33                              <1> ;The DOS default critical error handler always returns FAIL
    34 000016E9 B003                <1>     mov al, critFail
    35 000016EB 48CF                <1>     iretq
    36                              <1> 
    37                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    38                              <1> ;Input: rsi = Ptr to the driver to handler the call!
    39                              <1> ;       rbx = Ptr to the request header for the driver call!
    40 000016ED E897050000          <1>     call dosCrit2Enter
    41 000016F2 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    42 000016F5 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    43 000016F8 E896050000          <1>     call dosCrit2Exit
    44 000016FD C3                  <1>     ret
    45                              <1> 
    46                              <1> setupPhysicalDiskRequest:
    47                              <1> ;Ensure that al has valid disk number
    48                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    49                              <1> ;If CF=NC, rbp = DPB ptr.
    50                              <1> ;If CF=CY, exit error
    51 000016FE 84C0                <1>     test al, al
    52 00001700 723F                <1>     jc .diskError
    53 00001702 3A05(B2C00300)      <1>     cmp al, byte [lastdrvNum]
    54 00001708 7337                <1>     jae .diskError
    55 0000170A 50                  <1>     push rax
    56 0000170B FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    57 0000170D E8BD030000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    58 00001712 58                  <1>     pop rax
    59 00001713 7235                <1>     jc .error
    60 00001715 8805(97C20300)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    61 0000171B 488B2D(A0C20300)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    62 00001722 48F7454300800000    <1>     test qword [rbp +cds.wFlags], cdsNetDrive   ;On a network?
    63 0000172A 750A                <1>     jnz .netError
    64 0000172C 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    65 00001730 E822030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    66 00001735 C3                  <1>     ret
    67                              <1> .netError:
    68 00001736 66C705(12C10300)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    68 0000173E 00                  <1>
    69 0000173F EB09                <1>     jmp short .error
    70                              <1> .diskError:
    71 00001741 66C705(12C10300)0F- <1>     mov word [errorExCde], errBadDrv
    71 00001749 00                  <1>
    72                              <1> .error:
    73 0000174A C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk
    74 00001751 C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr
    75 00001758 C605(15C10300)09    <1>     mov byte [errorClass], eClsBadFmt
    76 0000175F F9                  <1>     stc
    77 00001760 C3                  <1>     ret
    78                              <1> 
    79                              <1> setupAbsDiskEntry:
    80                              <1> ;Prepares to sets up the CDS and DPB for the request
    81 00001761 FE05(0FC10300)      <1>     inc byte [inDOS]
    82 00001767 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    83 00001768 FC                  <1>     cld ;Set string ops in the right direction
    84 00001769 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    85 0000176E 7223                <1>     jc .exit    ;Error exit
    86 00001770 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;We prob. will invalidate
    87 00001777 56                  <1>     push rsi
    88 00001778 50                  <1>     push rax
    89 00001779 488D35(8BC10300)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    90 00001780 8806                <1>     mov byte [rsi], al  ;Construct a path
    91 00001782 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    92 00001785 C646013A            <1>     mov byte [rsi + 1], ":" ;Path Colon
    93 00001789 F8                  <1>     clc
    94                              <1> ;++++++++++++++++++++++++++++
    95                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    96                              <1> ;Entered with path in rsi (ah=03h)
    97 0000178A B800030000          <1>     mov eax, 0300h  
    98 0000178F CD4A                <1>     int 4Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    99                              <1> ;++++++++++++++++++++++++++++
   100 00001791 58                  <1>     pop rax
   101 00001792 5E                  <1>     pop rsi
   102                              <1> .exit:
   103 00001793 72A1                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
   104 00001795 C3                  <1>     ret
   105                              <1> 
   106                              <1> absDiskWrite:       ;Int 46h
   107                              <1> ;al = Drive number
   108                              <1> ;rbx = Memory Buffer address to read from
   109                              <1> ;ecx = Number of sectors to write
   110                              <1> ;rdx = Start LBA to write to
   111 00001796 FA                  <1>     cli
   112 00001797 488925(73C10300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   113 0000179E 488D25(08CF0300)    <1>     lea rsp, AuxStakTop
   114 000017A5 55                  <1>     push rbp
   115 000017A6 E8B6FFFFFF          <1>     call setupAbsDiskEntry
   116 000017AB 7251                <1>     jc absDiskExit
   117 000017AD E861020000          <1>     call diskWriteSetup
   118 000017B2 EB1C                <1>     jmp short absDiskReadWriteCommon
   119                              <1> absDiskRead:        ;Int 45h
   120                              <1> ;al = Drive number
   121                              <1> ;rbx = Memory Buffer address to write to
   122                              <1> ;ecx = Number of sectors to read
   123                              <1> ;rdx = Start LBA to read from
   124 000017B4 FA                  <1>     cli 
   125 000017B5 488925(73C10300)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   126 000017BC 488D25(08CF0300)    <1>     lea rsp, AuxStakTop
   127 000017C3 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   128 000017C4 E898FFFFFF          <1>     call setupAbsDiskEntry
   129 000017C9 7233                <1>     jc absDiskExit
   130 000017CB E84E020000          <1>     call diskReadSetup
   131                              <1> absDiskReadWriteCommon:
   132                              <1> ;Entered with the appropriate function number in ah
   133 000017D0 E83A000000          <1>     call absDiskDriverCall
   134 000017D5 7427                <1>     jz absDiskExit  ;Skip error code checking
   135 000017D7 8A05(51C00300)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   136                              <1>     ;DOS uses the following pairs in a table
   137                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   138 000017DD B480                <1>     mov ah, 80h ;Attachment failure
   139 000017DF 3C0C                <1>     cmp al, 0Ch ;Gen error
   140 000017E1 741A                <1>     je .absExit
   141 000017E3 B440                <1>     mov ah, 40h ;Seek error
   142 000017E5 3C06                <1>     cmp al, 06h
   143 000017E7 7414                <1>     je .absExit
   144 000017E9 B408                <1>     mov ah, 08h ;Bad CRC
   145 000017EB 3C04                <1>     cmp al, 04h
   146 000017ED 740E                <1>     je .absExit
   147 000017EF B404                <1>     mov ah, 04h ;Sector not found
   148 000017F1 3C08                <1>     cmp al, 08h
   149 000017F3 7408                <1>     je .absExit
   150 000017F5 30E4                <1>     xor ah, ah  ;Write Protect Violation
   151 000017F7 84C0                <1>     test al, al
   152 000017F9 7402                <1>     je .absExit
   153 000017FB B402                <1>     mov ah, 02h ;Other Error
   154                              <1> .absExit:
   155 000017FD F9                  <1>     stc
   156                              <1> absDiskExit:
   157 000017FE 5D                  <1>     pop rbp
   158 000017FF FA                  <1>     cli
   159 00001800 FE0D(0FC10300)      <1>     dec byte [inDOS]
   160 00001806 488B25(73C10300)    <1>     mov rsp, qword [oldRSP]
   161 0000180D FB                  <1>     sti ;Reenable interrupts
   162 0000180E C3                  <1>     ret ;Return from interrupt without popping flags!
   163                              <1> absDiskDriverCall:
   164                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   165                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   166                              <1> ;       eax = Status word from request
   167                              <1> ;       ecx = Number of sectors transferred
   168 0000180F 53                  <1>     push rbx
   169 00001810 56                  <1>     push rsi
   170                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   171 00001811 8B0D(64C00300)      <1>     mov ecx, dword [diskReqHdr + ioReqPkt.tfrlen]
   172                              <1>     ;Prepare for goDriver now
   173 00001817 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   174 0000181B 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   175 00001822 E8C6FEFFFF          <1>     call goDriver   ;Make request
   176 00001827 5E                  <1>     pop rsi
   177 00001828 5B                  <1>     pop rbx
   178 00001829 8B05(64C00300)      <1>     mov eax, dword [diskReqHdr + ioReqPkt.tfrlen]   ;Get actual num tfrd
   179 0000182F 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   180 00001831 0FB705(51C00300)    <1>     movzx eax, word [diskReqHdr + ioReqPkt.status]
   181 00001838 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   182 0000183C C3                  <1>     ret
   183                              <1> 
   184                              <1> getDiskDPB:
   185                              <1> ;Gets the disk DPB if the Disk is physical
   186                              <1> ;Otherwise will return a pointer to the drive DPB
   187                              <1> ;Called with rdi pointing to the CDS
   188                              <1> ;CF=NC => RBP=DPBptr, CF=CY => Error exit
   189 0000183D 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   190 00001841 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   191 00001844 8805(97C20300)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   192 0000184A E808020000          <1>     call setWorkingDPB
   193 0000184F 57                  <1>     push rdi    ;Save the CDS ptr
   194 00001850 E838000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   195 00001855 5F                  <1>     pop rdi
   196 00001856 7234                <1>     jc .exitBad ;Preserve CF
   197 00001858 7531                <1>     jnz .exit
   198                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   199 0000185A 8A0D(B2C00300)      <1>     mov cl, byte [lastdrvNum]
   200 00001860 4831C0              <1>     xor rax, rax
   201 00001863 48FFC8              <1>     dec rax ; -1 means start of root dir and never accessed (i.e. reset path)!
   202 00001866 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   203 0000186A 488B3D(AAC00300)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   204                              <1> .checkCDS:
   205 00001871 483B7745            <1>     cmp rsi, qword [rdi + cds.qDPBPtr]
   206 00001875 7509                <1>     jne .next
   207 00001877 48854745            <1>     test qword [rdi + cds.qDPBPtr], rax ;Is this DPB entry empty?
   208 0000187B 7403                <1>     jz .next    ;IF yes, skip it
   209 0000187D 894745              <1>     mov dword [rdi + cds.qDPBPtr], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00001880 4881C75B000000      <1>     add rdi, cds_size
   212 00001887 FEC9                <1>     dec cl
   213 00001889 75E6                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 0000188B F8                  <1>     clc
   216                              <1> .exitBad:
   217 0000188C C3                  <1>     ret
   218                              <1> 
   219                              <1> ensureDiskValid:
   220                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   221                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   222                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   223                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   224                              <1> .medChk:
   225 0000188D E81E010000          <1>     call diskDrvMedCheck    ;Prepare disk io packet for media check
   226 00001892 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   227 00001899 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   228 0000189D E84BFEFFFF          <1>     call goDriver   ;Request!
   229 000018A2 480FB73D(51C00300)  <1>     movzx rdi, word [diskReqHdr + mediaCheckReqPkt.status]
   230 000018AA F7C700800000        <1>     test edi, drvErrStatus
   231 000018B0 7576                <1>     jnz .diskDrvCritErrMedChk
   232                              <1> .medChkIgnore:
   233 000018B2 8A05(97C20300)      <1>     mov al, byte [workingDrv]   ;Get the drive number for test
   234 000018B8 30E4                <1>     xor ah, ah
   235 000018BA 866523              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old access flag
   236 000018BD 84630E              <1>     test byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   237 000018C0 780B                <1>     js .invalidateBuffers  ;If byte is -1, freebuffers and buildbpb
   238 000018C2 7508                <1>     jnz .exit ;If zero, check for dirty buffers for drv, if found, exit
   239 000018C4 E8C4ECFFFF          <1>     call testDirtyBufferForDrive  ;If CF=CY, dirty buffer found. DO NOT GET NEW BPB!
   240 000018C9 F5                  <1>     cmc ;Compliment CF to ensure we return CF=NC if dirty buffer found
   241 000018CA 7201                <1>     jc .invalidateBuffers   ;Exit ONLY if a dirty buffer found!
   242                              <1>     ;ZF=NZ from test for dirty buffers
   243                              <1> .exit:
   244 000018CC C3                  <1>     ret
   245                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   246 000018CD C605(50D50300)FF    <1>     mov byte [diskChange], -1   ;In disk Change!
   247 000018D4 E8D8ECFFFF          <1>     call freeBuffersForDPB    ;Free all the buffers with the DPB in rbp
   248                              <1>     ;Get a buffer to read BPB into in rdi
   249 000018D9 B101                <1>     mov cl, dosBuffer
   250 000018DB 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   251 000018DD E812EDFFFF          <1>     call getBuffer ;Get a disk buffer
   252 000018E2 72E8                <1>     jc .exit    ;Immediately exit with the carry flag set
   253 000018E4 4889DF              <1>     mov rdi, rbx
   254                              <1> .repeatEP:
   255 000018E7 E8F0000000          <1>     call diskDrvGetBPB  ;Prepare to get BPB
   256 000018EC 488D1D(4EC00300)    <1>     lea rbx, diskReqHdr
   257 000018F3 488B751A            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   258 000018F7 E8F1FDFFFF          <1>     call goDriver   ;Request!
   259 000018FC 0FB705(51C00300)    <1>     movzx eax, word [diskReqHdr + bpbBuildReqPkt.status]
   260 00001903 A900800000          <1>     test eax, drvErrStatus
   261 00001908 7565                <1>     jnz .diskDrvCritErrBPB
   262                              <1>     ;Now rebuild the dpb fields for this drive
   263 0000190A 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   264 0000190E E8DE050000          <1>     call createDPB  
   265                              <1>     ;Adjust the buffer header information
   266 00001913 8B4512              <1>     mov eax, dword [rbp + dpb.dFATlength]
   267 00001916 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   268 00001919 8A4507              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   269 0000191C 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   270 0000191F 30E4                <1>     xor ah, ah
   271 00001921 8825(50D50300)      <1>     mov byte [diskChange], ah   ;Clear Disk Change flag and Set ZF and clear CF
   272 00001927 C3                  <1>     ret
   273                              <1> .diskDrvCritErrMedChk:
   274                              <1> ;Critical Errors fall through here
   275                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   276 00001928 48893D(57C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   277 0000192F 48892D(55C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   278 00001936 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   279 00001939 B438                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK | critIgnorOK
   280 0000193B 8825(67C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   281 00001941 E8D7FCFFFF          <1>     call criticalDOSError
   282 00001946 488B3D(57C10300)    <1>     mov rdi, qword [xInt44RDI]
   283 0000194D 488B2D(55C30300)    <1>     mov rbp, qword [tmpDPBPtr]
   284 00001954 3C01                <1>     cmp al, critRetry
   285 00001956 0F8431FFFFFF        <1>     je .medChk
   286 0000195C 3C00                <1>     cmp al, critIgnore
   287 0000195E 0F844EFFFFFF        <1>     je .medChkIgnore
   288 00001964 66C705(12C10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   288 0000196C 00                  <1>
   289 0000196D F9                  <1>     stc ;Set error flag to indicate fail
   290 0000196E C3                  <1>     ret ;And exit from function with CF set
   291                              <1> 
   292                              <1> .diskDrvCritErrBPB:
   293                              <1>     ;eax has status word, rbp has dpb ptr
   294                              <1>     ;rdi has buffer header pointer, rsi points to the driver
   295 0000196F 48893D(57C10300)    <1>     mov qword [xInt44RDI], rdi  ;Save rdi
   296 00001976 48892D(55C30300)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   297 0000197D 89C7                <1>     mov edi, eax    ;Transfer the status word over
   298 0000197F 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
   299 00001982 B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK ;Set bits
   300 00001984 8825(67C10300)      <1>     mov byte [Int44bitfld], ah  ;Save the permissions in var
   301 0000198A E88EFCFFFF          <1>     call criticalDOSError
   302 0000198F 488B3D(57C10300)    <1>     mov rdi, qword [xInt44RDI]
   303 00001996 488B2D(55C30300)    <1>     mov rbp, qword [tmpDPBPtr]
   304 0000199D 3C01                <1>     cmp al, critRetry
   305 0000199F 0F8442FFFFFF        <1>     je .repeatEP
   306                              <1>     ;Else we fail (Ignore=Fail here)
   307 000019A5 66C705(12C10300)53- <1>     mov word [errorExCde], errFI44  ;Replace with Fail on Int 44h
   307 000019AD 00                  <1>
   308 000019AE F9                  <1>     stc ;Set error flag to indicate fail
   309 000019AF C3                  <1>     ret ;And exit from function with CF set
   310                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   311                              <1> ;           Primitive Driver Requests
   312                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   313                              <1> ;First are Disk requests, then Char device requests
   314                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   315                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   316                              <1> 
   317                              <1> diskDrvMedCheck:
   318                              <1> ;Prepare the diskIO packet for mediacheck
   319                              <1> ;rbp has DPB pointer for device to check media on
   320 000019B0 50                  <1>     push rax
   321 000019B1 C605(4EC00300)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   322 000019B8 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   323 000019BB 8805(5BC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   324 000019C1 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   325 000019C4 8805(4FC00300)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], al
   326 000019CA C605(50C00300)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   327 000019D1 66C705(51C00300)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   327 000019D9 00                  <1>
   328                              <1> diskDrvCommonExit:
   329 000019DA 58                  <1>     pop rax
   330 000019DB C3                  <1>     ret
   331                              <1> 
   332                              <1> diskDrvGetBPB:
   333                              <1> ;rbp has DPB pointer for device
   334                              <1> ;rdi has sector buffer header pointer for transfer
   335 000019DC 50                  <1>     push rax
   336 000019DD 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   337 000019E1 48893D(5CC00300)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rdi
   338 000019E8 C605(4EC00300)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   339 000019EF 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   340 000019F2 8805(5BC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   341 000019F8 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   342 000019FB 8805(4FC00300)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], al
   343 00001A01 C605(50C00300)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   344 00001A08 66C705(51C00300)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0
   344 00001A10 00                  <1>
   345 00001A11 EBC7                <1>     jmp short diskDrvCommonExit
   346                              <1> 
   347                              <1> diskWriteSetup:
   348 00001A13 50                  <1>     push rax
   349 00001A14 B408                <1>     mov ah, drvWRITE    ;Command code
   350 00001A16 0225(3EC10300)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   351 00001A1C EB03                <1>     jmp short diskRWCommon
   352                              <1> diskReadSetup:
   353 00001A1E 50                  <1>     push rax
   354 00001A1F B404                <1>     mov ah, drvREAD
   355                              <1> diskRWCommon:
   356                              <1> ;Sets up the IO request packet with:
   357                              <1> ; rbp = DPB ptr
   358                              <1> ; rbx = Data storage buffer ptr
   359                              <1> ; ecx = Number of sectors to transfer
   360                              <1> ; rdx = Starting sector to read from
   361                              <1> ; All regs preserved
   362 00001A21 B02A                <1>     mov al, ioReqPkt_size
   363 00001A23 48891D(5CC00300)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx   ;Buffer
   364 00001A2A 890D(64C00300)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx   ;Number of sectors
   365 00001A30 488915(68C00300)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx   ;Start sector
   366 00001A37 C605(4EC00300)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   367 00001A3E 25FFFF0000          <1>     and eax, 0000FFFFh  ;Clear the upper word (status word)
   368 00001A43 8905(4FC00300)      <1>     mov dword [diskReqHdr + ioReqPkt.unitnm], eax
   369 00001A49 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   370 00001A4C 8805(68C00300)      <1>     mov byte [diskReqHdr + ioReqPkt.strtsc], al ;Store medesc!
   371 00001A52 E983FFFFFF          <1>     jmp diskDrvCommonExit   ;Jump popping rax
    29                                  %include "./Source/Kernel/dosUtils.asm"
    30                              <1> ;DOS utility functions (Will be made available through Int 4F ah=12xx eventually)
    31                              <1> 
    32                              <1> ;Basic Drive related Utilities
    33                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
    34                              <1> ; argument provided on the stack when called from Int 4Fh interface (when 
    35                              <1> ; that gets set up)
    36                              <1> 
    37                              <1> setWorkingDPB:
    38                              <1> ;Gets dpb in rbp and saves to curDrvDPB (working dpb)
    39 00001A57 48892D(98C20300)    <1>     mov qword [workingDPB], rbp
    40 00001A5E C3                  <1>     ret
    41                              <1> 
    42                              <1> getUserRegs:   ;Int 4Fh AX=1218h
    43                              <1> ;Returns ptr to user regs in rsi
    44 00001A5F 488B35(73C10300)    <1>     mov rsi, qword [oldRSP]
    45 00001A66 C3                  <1>     ret
    46                              <1> 
    47                              <1> getCDSforDrive:     ;Int 4Fh AX=1217h
    48                              <1>     ;Gets the CDS for the current drive in al
    49                              <1>     ;Input: al = Drive number, 0 = A ...
    50                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
    51                              <1>     ;        CF=CY => al not valid
    52 00001A67 3A05(B2C00300)      <1>     cmp al, byte [lastdrvNum]
    53 00001A6D 7202                <1>     jb .ctn
    54 00001A6F F9                  <1>     stc 
    55 00001A70 C3                  <1>     ret
    56                              <1> .ctn:
    57 00001A71 50                  <1>     push rax
    58 00001A72 52                  <1>     push rdx
    59 00001A73 0FB6C0              <1>     movzx eax, al
    60 00001A76 48BE5B000000000000- <1>     mov rsi, cds_size
    60 00001A7F 00                  <1>
    61 00001A80 31D2                <1>     xor edx, edx
    62 00001A82 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip
    63 00001A84 488D05(AAC00300)    <1>     lea rax, qword [cdsHeadPtr] ;Get the first CDS
    64 00001A8B 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
    65 00001A8E 488935(A0C20300)    <1>     mov qword [workingCDS], rsi  ;Save in data area
    66 00001A95 5A                  <1>     pop rdx
    67 00001A96 58                  <1>     pop rax
    68 00001A97 F8                  <1>     clc
    69 00001A98 C3                  <1>     ret
    70                              <1> 
    71                              <1> walkDPBchain:
    72                              <1> ;Called with al = 0 based drive number
    73                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    74 00001A99 488B35(88C00300)    <1>     mov rsi, qword [sftHeadPtr]  ;Get variable pointing to first DPB
    75                              <1> .walk:
    76 00001AA0 4881FEFFFFFFFF      <1>     cmp rsi, -1
    77 00001AA7 740A                <1>     je .exitBad
    78 00001AA9 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
    79 00001AAB 7407                <1>     je .exit    ;Drive found
    80 00001AAD 488B7624            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
    81 00001AB1 EBED                <1>     jmp short .walk
    82                              <1> .exitBad:
    83 00001AB3 F9                  <1>     stc
    84                              <1> .exit:
    85 00001AB4 C3                  <1>     ret
    86                              <1> setDrive:   ;Int 4Fh AX=1219h   
    87                              <1> ;Gets a drive CDS, sets it as working and checks it is a valid physical drive
    88                              <1> ;Input: al = 1-based drive number
    89                              <1> ;Output: al = 0-based drive number
    90                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Not Network or Join)
    91                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Net or Join flags
    92                              <1> ;            set.
    93 00001AB5 E815000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
    94 00001ABA 7212                <1>     jc .exit    ;Carry the CF flag if not Physical
    95 00001ABC 56                  <1>     push rsi
    96 00001ABD 488B35(A0C20300)    <1>     mov rsi, qword [workingCDS] ;Get CDS
    97 00001AC4 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
    98 00001ACA 5E                  <1>     pop rsi
    99 00001ACB 7401                <1>     jz .exit
   100 00001ACD F9                  <1>     stc
   101                              <1> .exit:
   102 00001ACE C3                  <1>     ret
   103                              <1> getCDS:
   104                              <1> ;Gets the device DPB and saves it in the DOS variable
   105                              <1> ;This can be called to get CDS for network drives too!
   106                              <1> ;Input: al = 1 based drive number
   107                              <1> ;Sets workingCDS var with the CDS for the device. 
   108                              <1> ;   If device on a network, sets CF
   109                              <1> ;Returns al with 0-based drive number
   110 00001ACF 84C0                <1>     test al, al
   111 00001AD1 7508                <1>     jnz .skip
   112 00001AD3 8A05(3BC10300)      <1>     mov al, byte [currentDrv]   ;Get current drive
   113 00001AD9 FEC0                <1>     inc al
   114                              <1> .skip:
   115 00001ADB FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   116 00001ADD 56                  <1>     push rsi
   117 00001ADE C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   118 00001AE5 F605(83C10300)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   119 00001AEC 7402                <1>     jz .physDrive
   120                              <1>     ;Invalid invokation (21/5D00 invokation not yet supported)
   121                              <1>     ;If returned with CF=CY, consider it an error for now
   122                              <1>     ;Eventually, here we will build a fresh DPB for the non-physical drive
   123 00001AEE EB16                <1>     jmp short .exitBad1
   124                              <1> .physDrive:
   125 00001AF0 E872FFFFFF          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   126 00001AF5 7208                <1>     jc .exitBad
   127 00001AF7 66F746430040        <1>     test word [rsi + cds.wFlags], cdsPhysDrive
   128 00001AFD 7508                <1>     jnz .exitOk ;Exit with flag cleared
   129                              <1>     ;Else Return to unknown error locus
   130                              <1> .exitBad:
   131 00001AFF C605(11C10300)01    <1>     mov byte [errorLocus], eLocUnk
   132                              <1> .exitBad1:
   133 00001B06 F9                  <1>     stc
   134                              <1> .exitOk:
   135 00001B07 5E                  <1>     pop rsi
   136 00001B08 C3                  <1>     ret
    30                                  %include "./Source/Kernel/dosMain.asm"
    31                              <1> ;-----------------------------------:
    32                              <1> ;        Main Kernel dispatch       :
    33                              <1> ;            and routines           :
    34                              <1> ;-----------------------------------:
    35                              <1> functionDispatch:   ;Int 41h Main function dispatcher
    36                              <1> ;ah = Function number, all other registers have various meanings
    37                              <1>  %if DEBUG
    38                              <1>     ;Entry function
    39                              <1>     debugEnterM
    40                              <1>     lea rbp, .l0000
    41                              <1>     call debPrintNullString
    42                              <1>     call debPrintFunctionName
    43                              <1>     jmp short .l0001
    44                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    45                              <1> .l0001:    
    46                              <1>     debugExitM
    47                              <1>     %endif
    48 00001B09 FA                  <1>     cli ;Halt external interrupts
    49 00001B0A FC                  <1>     cld ;Ensure all string ops occur in the right direction
    50 00001B0B 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    51 00001B0E 0F832F010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    52                              <1>     ;Cherry pick functions
    53 00001B14 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    54 00001B17 722C                <1>     jb .fsbegin   ;If below skip these checks
    55 00001B19 0F847E010000        <1>     je ctrlBreakCheck
    56 00001B1F 80FC64              <1>     cmp ah, 64h
    57 00001B22 0F84BE010000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
    58 00001B28 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
    59 00001B2A 80FC51              <1>     cmp ah, 51h
    60 00001B2D 0F84A1010000        <1>     je getCurrProcessID    ;This and below are exactly the same
    61 00001B33 80FC62              <1>     cmp ah, 62h
    62 00001B36 0F84A1010000        <1>     je getPSPaddr          ;Calls the above function
    63 00001B3C 80FC50              <1>     cmp ah, 50h
    64 00001B3F 0F8486010000        <1>     je setCurrProcessID
    65                              <1> .fsbegin:
    66 00001B45 E814010000          <1>     call dosPushRegs ;Push the usual prologue registers
    67 00001B4A 488B05(73C10300)    <1>     mov rax, qword [oldRSP]
    68 00001B51 488905(6BC10300)    <1>     mov qword [oldoldRSP], rax
    69 00001B58 FE05(0FC10300)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    70 00001B5E 488925(73C10300)    <1>     mov qword [oldRSP], rsp
    71                              <1> ;Network related variable resetting
    72 00001B65 C605(83C10300)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    73                              <1> ;Here, we want to save oldRSP in the callers PSP
    74 00001B6C 803D(0FC10300)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
    75 00001B73 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
    76 00001B75 488B05(26C10300)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    77 00001B7C 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    78                              <1> .fsb1:
    79 00001B80 58                  <1>     pop rax     ;Get old rax back
    80 00001B81 50                  <1>     push rax    ;and push it back onto the stack
    81 00001B82 488D25(85C80300)    <1>     lea rsp, critStakTop
    82 00001B89 FB                  <1>     sti         ;Reenable interrupts
    83                              <1> 
    84 00001B8A C605(6AC10300)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
    85 00001B91 48891D(7BC10300)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    86 00001B98 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
    87 00001B9B D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    88 00001B9D 50                  <1>     push rax        ;Push rax onto the stack
    89 00001B9E 488D0576E4FFFF      <1>     lea rax, kDispTbl
    90 00001BA5 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    91 00001BA8 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    92 00001BAC 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    93 00001BAF 58                  <1>     pop rax
    94                              <1> 
    95 00001BB0 84E4                <1>     test ah, ah     ;Simple Terminate function?
    96 00001BB2 741C                <1>     jz .fddiskOp
    97 00001BB4 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    98 00001BB7 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    99 00001BB9 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   100 00001BBC 7712                <1>     ja .fddiskOp
   101                              <1> ;Char operations here
   102 00001BBE F605(0EC10300)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   103 00001BC5 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   104 00001BC7 488D25(08CF0300)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
   105 00001BCE EB40                <1>     jmp short .fdGoToFunction
   106                              <1> .fddiskOp:
   107                              <1>     ;Disk operations go here
   108                              <1>     ;Save rax on entry to a disk funciton
   109 00001BD0 488905(06C10300)    <1>     mov qword [oldRAX], rax
   110                              <1>     ;Clear up error info
   111 00001BD7 C605(11C10300)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   112 00001BDE C605(0EC10300)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   113 00001BE5 C605(10C10300)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   114                              <1> 
   115 00001BEC 50                  <1>     push rax
   116 00001BED B482                <1>     mov ah, 82h ;Cancel all critical section!
   117 00001BEF CD4A                <1>     int 4ah ;DOS critical section semphore handler (default, iretq)
   118 00001BF1 58                  <1>     pop rax
   119                              <1> 
   120 00001BF2 C605(6AC10300)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   121 00001BF9 488D25(48D50300)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   122 00001C00 F605(3DC10300)FF    <1>     test byte [breakFlag], -1   ;Test if set
   123 00001C07 7407                <1>     jz .fdGoToFunction
   124                              <1> ; HANDLE CTRL+BREAK HERE!
   125 00001C09 50                  <1>     push rax
   126 00001C0A E833F1FFFF          <1>     call checkBreakOnCon    ; Check for a ^C in the CON buffer
   127 00001C0F 58                  <1>     pop rax
   128                              <1> .fdGoToFunction:
   129 00001C10 48871D(7BC10300)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   130                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   131                              <1>     ;
   132                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   133                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   134                              <1>     ;
   135                              <1>     %if DEBUG && REGS
   136                              <1>     ;Print stack if necessary function
   137                              <1>     debugEnterM
   138                              <1>     call debPrintDOSStack
   139                              <1>     debugExitM
   140                              <1>     %endif
   141 00001C17 FF15(7BC10300)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   142                              <1>     %if DEBUG
   143                              <1>     ;Entry function
   144                              <1>     debugEnterM
   145                              <1>     lea rbp, .l0002
   146                              <1>     call debPrintNullString
   147                              <1>     jmp short .l0003
   148                              <1> .l0002 db "Exiting Int 41h",0Ah,0Dh,0
   149                              <1> .l0003:    
   150                              <1>     debugExitM
   151                              <1>     %endif
   152                              <1>     %if DEBUG && REGS
   153                              <1>     ;Exit function
   154                              <1>     debugEnterM
   155                              <1>     call debPrintDOSStack
   156                              <1>     debugExitM
   157                              <1>     %endif
   158                              <1> .fdExit:
   159 00001C1D FA                  <1>     cli     ;Redisable interrupts
   160 00001C1E FE0D(0FC10300)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   161 00001C24 488B25(73C10300)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   162 00001C2B 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   163 00001C2E 488B05(6BC10300)    <1>     mov rax, qword [oldoldRSP]
   164 00001C35 488905(73C10300)    <1>     mov qword [oldRSP], rax
   165 00001C3C E806000000          <1>     call dosPopRegs  ;Pop the frame
   166 00001C41 48CF                <1>     iretq
   167                              <1> .fdExitBad:
   168 00001C43 30C0                <1>     xor al, al
   169                              <1> defaultIretq:
   170 00001C45 48CF                <1>     iretq
   171                              <1> dosPopRegs:
   172 00001C47 8F05(16C10300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   173 00001C4D 58                  <1>     pop rax
   174 00001C4E 5B                  <1>     pop rbx
   175 00001C4F 59                  <1>     pop rcx
   176 00001C50 5A                  <1>     pop rdx
   177 00001C51 5E                  <1>     pop rsi
   178 00001C52 5F                  <1>     pop rdi
   179 00001C53 5D                  <1>     pop rbp
   180 00001C54 4158                <1>     pop r8
   181 00001C56 4159                <1>     pop r9
   182 00001C58 FF25(16C10300)      <1>     jmp qword [dosReturn]
   183                              <1> dosPushRegs:
   184 00001C5E 8F05(16C10300)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   185 00001C64 4151                <1>     push r9
   186 00001C66 4150                <1>     push r8
   187 00001C68 55                  <1>     push rbp
   188 00001C69 57                  <1>     push rdi
   189 00001C6A 56                  <1>     push rsi
   190 00001C6B 52                  <1>     push rdx
   191 00001C6C 51                  <1>     push rcx
   192 00001C6D 53                  <1>     push rbx
   193 00001C6E 50                  <1>     push rax
   194 00001C6F FF25(16C10300)      <1>     jmp qword [dosReturn]
   195                              <1> dosCrit1Enter:
   196 00001C75 C3                  <1>     ret     ;Needs to be patched with 50h (PUSH RAX)
   197 00001C76 B801800000          <1>     mov eax, 8001h
   198 00001C7B CD4A                <1>     int 4ah
   199 00001C7D 58                  <1>     pop rax
   200 00001C7E C3                  <1>     ret
   201                              <1> dosCrit1Exit:
   202 00001C7F C3                  <1>     ret
   203 00001C80 B801810000          <1>     mov eax, 8101h
   204 00001C85 CD4A                <1>     int 4ah
   205 00001C87 58                  <1>     pop rax
   206 00001C88 C3                  <1>     ret
   207                              <1> dosCrit2Enter:
   208 00001C89 C3                  <1>     ret
   209 00001C8A B802800000          <1>     mov eax, 8002h
   210 00001C8F CD4A                <1>     int 4ah
   211 00001C91 58                  <1>     pop rax
   212 00001C92 C3                  <1>     ret
   213                              <1> dosCrit2Exit:
   214 00001C93 C3                  <1>     ret
   215 00001C94 B802810000          <1>     mov eax, 8102h
   216 00001C99 CD4A                <1>     int 4ah
   217 00001C9B 58                  <1>     pop rax
   218 00001C9C C3                  <1>     ret
   219                              <1> ;========================================:
   220                              <1> ;      Reentrant Kernel Functions        :
   221                              <1> ;========================================:
   222                              <1> ctrlBreakCheck:    ;ah = 33h
   223 00001C9D 84C0                <1>     test al, al
   224 00001C9F 7508                <1>     jnz .cbcget  ;Get the state or other functions
   225 00001CA1 8A15(3DC10300)      <1>     mov dl, byte [breakFlag]    ;Get the state
   226 00001CA7 48CF                <1>     iretq
   227                              <1> .cbcget:
   228 00001CA9 3C02                <1>     cmp al, 02h
   229 00001CAB 771A                <1>     ja .cbcBad
   230 00001CAD 740D                <1>     jz .cbcxchg ;Function 2
   231 00001CAF 52                  <1>     push rdx
   232 00001CB0 80E201              <1>     and dl, 1   ;Get only the bottom bit
   233 00001CB3 8815(3DC10300)      <1>     mov byte [breakFlag], dl    ;Set the state
   234 00001CB9 5A                  <1>     pop rdx
   235 00001CBA 48CF                <1>     iretq
   236                              <1> .cbcxchg:
   237 00001CBC 80E201              <1>     and dl, 1
   238 00001CBF 8615(3DC10300)      <1>     xchg byte [breakFlag], dl
   239 00001CC5 48CF                <1>     iretq
   240                              <1> .cbcBad:
   241 00001CC7 B0FF                <1>     mov al, -1
   242 00001CC9 48CF                <1>     iretq
   243                              <1> 
   244                              <1> 
   245                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   246 00001CCB 48891D(26C10300)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   247 00001CD2 48CF                <1>     iretq
   248                              <1> 
   249                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   250 00001CD4 488B15(26C10300)    <1>     mov rdx, qword [currentPSP]
   251 00001CDB 48CF                <1>     iretq
   252                              <1> 
   253                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   254 00001CDD 488B15(26C10300)    <1>     mov rdx, qword [currentPSP]
   255 00001CE4 48CF                <1>     iretq
   256                              <1> 
   257                              <1> setDriverLookahead:;ah = 64h, reserved
   258 00001CE6 48CF                <1>     iretq
   259                              <1> 
   260                              <1> ;========================================:
   261                              <1> ;            Kernel Functions            :
   262                              <1> ;========================================:
   263                              <1> diskReset:         ;ah = 0Dh
   264                              <1> ;Flush all dirty buffers to disk
   265 00001CE8 488B3D(A2C00300)    <1>     mov rdi, qword [bufHeadPtr]
   266                              <1> .drCheckBuffer:
   267 00001CEF F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer
   268 00001CF3 7407                <1>     jz .drGotoNextBuffer
   269                              <1> .drFlushBuffer:
   270 00001CF5 E816EAFFFF          <1>     call flushBuffer    ;Called with rdi = buffer header
   271 00001CFA 720C                <1>     jc .drExit
   272                              <1> .drGotoNextBuffer:
   273 00001CFC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   274 00001CFF 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   275 00001D06 75E7                <1>     jne .drCheckBuffer
   276                              <1> .drExit:
   277 00001D08 C3                  <1>     ret
   278                              <1> 
   279                              <1> selectDisk:        ;ah = 0Eh
   280                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   281 00001D09 88D0                <1>     mov al, dl
   282 00001D0B FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   283 00001D0D E8A3FDFFFF          <1>     call setDrive  ;Must make sure provided drive is valid
   284 00001D12 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   285 00001D14 8805(3BC10300)      <1>     mov byte [currentDrv], al   ;Set drive as current
   286                              <1> .skipSettingCurrent:
   287 00001D1A 0FB605(B2C00300)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   288 00001D21 C3                  <1>     ret
   289                              <1> 
   290                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   291 00001D22 8A05(3BC10300)      <1>     mov al, byte [currentDrv]
   292 00001D28 C3                  <1>     ret
   293                              <1> 
   294                              <1> FATinfoDefault:    ;ah = 1Bh
   295 00001D29 30D2                <1>     xor dl, dl
   296                              <1> FATinfoDevice:     ;ah = 1Ch
   297                              <1> ;Return in:
   298                              <1> ;   al = Number of sectors per cluster
   299                              <1> ;   edx = Number of clusters
   300                              <1> ;   cx =  Size of a clsuter
   301 00001D2B 84D2                <1>     test dl, dl
   302 00001D2D 7508                <1>     jnz .fidSkipdefault
   303 00001D2F 8A15(3BC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   304 00001D35 FEC2                <1>     inc dl
   305                              <1> .fidSkipdefault:
   306 00001D37 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   307                              <1> ;Walk the dpb chain manually
   308 00001D39 88D0                <1>     mov al, dl  ;Move drive number into al
   309 00001D3B E859FDFFFF          <1>     call walkDPBchain    ;Get in rsi the dpb pointer for drive in al
   310 00001D40 7331                <1>     jnc .fidDPBFound
   311                              <1> ;Else, we at an error.
   312                              <1> ;Simply return with CY set and error code in al with extended error info
   313 00001D42 E818FDFFFF          <1>     call getUserRegs
   314 00001D47 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set the CY flag
   315 00001D4F B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   316 00001D54 66C705(12C10300)0F- <1>     mov word [errorExCde], errBadDrv     
   316 00001D5C 00                  <1>
   317 00001D5D C605(11C10300)01    <1>     mov byte [errorLocus], eLocUnk    ;Not appropriate
   318 00001D64 C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   319 00001D6B C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   320 00001D72 C3                  <1>     ret
   321                              <1> .fidDPBFound:
   322 00001D73 8A4603              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   323 00001D76 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   324 00001D78 8B560E              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   325 00001D7B 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   326 00001D7E BB01000000          <1>     mov ebx, 1
   327 00001D83 D3E3                <1>     shl ebx, cl
   328 00001D85 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   329 00001D87 488D5E22            <1>     lea rbx, qword [rsi + dpb.bMediaDescriptor]
   330 00001D8B E8CFFCFFFF          <1>     call getUserRegs
   331 00001D90 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   332 00001D94 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   333 00001D98 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   334 00001D9C C3                  <1>     ret
   335                              <1> 
   336                              <1> setIntVector:      ;ah = 25h
   337                              <1> ;Called with:
   338                              <1> ;   rdx = Pointer to interrupt handler
   339                              <1> ;   al = Interrupt number
   340 00001D9D 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   341 00001D9F 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   342                              <1> ;First call to get default BIOS segement selector and attribute word
   343 00001DA5 88C3                <1>     mov bl, al  ;Set interrupt number 
   344 00001DA7 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   345 00001DAC CD35                <1>     int 35h
   346 00001DAE E8ACFCFFFF          <1>     call getUserRegs
   347 00001DB3 488B5E18            <1>     mov rbx, qword [rsi + callerFrame.rdx]  ;Pointer passed in rdx
   348 00001DB7 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   349 00001DB9 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   350                              <1> ;dx preserves the attribute word
   351 00001DBB B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   352 00001DC0 CD35                <1>     int 35h
   353 00001DC2 E898FCFFFF          <1>     call getUserRegs
   354 00001DC7 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Preserve low byte of rax
   355 00001DC9 C3                  <1>     ret
   356                              <1> createNewPSP:      ;ah = 26h
   357 00001DCA C3                  <1>     ret
   358                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   359 00001DCB 8805(3EC10300)      <1>     mov byte [verifyFlag], al
   360 00001DD1 8025(3EC10300)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   361 00001DD8 C3                  <1>     ret
   362                              <1> getDOSversion:     ;ah = 30h
   363 00001DD9 E881FCFFFF          <1>     call getUserRegs
   364 00001DDE 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   365 00001DE0 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   366 00001DE3 668B0516E2FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   367 00001DEA 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   368 00001DED C3                  <1>     ret
   369                              <1> 
   370                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   371                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 41h\ah=32h with dl=0
   372 00001DEE 30D2                <1>     xor dl, dl
   373                              <1> getDeviceDPBptr:   ;ah = 32h
   374                              <1> ;On entry: dl = Drive number
   375                              <1> ;On exit: rbx = DPB pointer
   376 00001DF0 84D2                <1>     test dl, dl
   377 00001DF2 7508                <1>     jnz .gddpskipdefault
   378 00001DF4 8A15(3BC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   379 00001DFA FEC2                <1>     inc dl
   380                              <1> .gddpskipdefault:
   381                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   382 00001DFC FECA                <1>     dec dl
   383 00001DFE 88D0                <1>     mov al, dl
   384 00001E00 E8CAFCFFFF          <1>     call getCDS ;Get in rsi the dpb pointer for drive dl
   385 00001E05 722D                <1>     jc .bad
   386 00001E07 488B3D(A0C20300)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   387 00001E0E 48F7C700800000      <1>     test rdi, cdsNetDrive ;Is dev a network drv (since they have no DPB)?
   388 00001E15 751D                <1>     jnz .bad
   389 00001E17 E859FEFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   390 00001E1C E81CFAFFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   391 00001E21 E859FEFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   392 00001E26 720C                <1>     jc .bad
   393 00001E28 E832FCFFFF          <1>     call getUserRegs
   394 00001E2D 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   395 00001E31 30C0                <1>     xor al, al
   396 00001E33 C3                  <1>     ret
   397                              <1> .bad:
   398 00001E34 B0FF                <1>     mov al, -1
   399 00001E36 C3                  <1>     ret
   400                              <1> 
   401                              <1> getInDOSflagPtr:   ;ah = 34h
   402 00001E37 488D15(0FC10300)    <1>     lea rdx, inDOS
   403 00001E3E E81CFCFFFF          <1>     call getUserRegs
   404 00001E43 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   405 00001E47 C3                  <1>     ret
   406                              <1> getIntVector:      ;ah = 35h
   407                              <1> ;Called with:
   408                              <1> ;   al = Interrupt Number
   409                              <1> ;Returns:
   410                              <1> ;   rbx = Pointer to interrupt handler
   411 00001E48 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   412 00001E4A B807F00000          <1>     mov eax, 0F007h
   413 00001E4F CD35                <1>     int 35h
   414 00001E51 E809FCFFFF          <1>     call getUserRegs
   415 00001E56 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   416 00001E5A 8A06                <1>     mov al, byte [rsi + callerFrame.rax]    ;Get the low byte in al
   417 00001E5C C3                  <1>     ret
   418                              <1> 
   419                              <1> getDiskFreeSpace:  ;ah = 36h
   420 00001E5D 84D2                <1>     test dl, dl
   421 00001E5F 7508                <1>     jnz .gdfsSkipdefault
   422 00001E61 8A15(3BC10300)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   423 00001E67 FEC2                <1>     inc dl
   424                              <1> .gdfsSkipdefault:
   425 00001E69 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   426 00001E6B 88D0                <1>     mov al, dl
   427 00001E6D E827FCFFFF          <1>     call walkDPBchain ;Get in rsi the dpb pointer for drive al
   428 00001E72 7331                <1>     jnc .gdfsDPBFound
   429                              <1> ;Else, we at an error.
   430                              <1> ;Simply return with CY set and error code in al with extended error info
   431 00001E74 66C705(12C10300)0F- <1>     mov word [errorExCde], errBadDrv     ;Invalid drive error
   431 00001E7C 00                  <1>
   432 00001E7D C605(11C10300)02    <1>     mov byte [errorLocus], eLocDsk    ;Not appropriate
   433 00001E84 C605(15C10300)08    <1>     mov byte [errorClass], eClsNotFnd    ;Drive not found
   434 00001E8B C605(14C10300)07    <1>     mov byte [errorAction], eActRetUsr   ;Retry after user intervention
   435 00001E92 E8C8FBFFFF          <1>     call getUserRegs
   436 00001E97 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   437 00001E9C 48814E5801000000    <1>     or qword [rsi + callerFrame.flags], 1   ;Set CF=CY
   438 00001EA4 C3                  <1>     ret
   439                              <1> .gdfsDPBFound:
   440 00001EA5 8A4603              <1>     mov al, byte [rsi + dpb.bMaxSectorInCluster]
   441 00001EA8 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   442 00001EAA 8B560E              <1>     mov edx, dword [rsi + dpb.dClusterCount]
   443 00001EAD 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   444 00001EB0 BB01000000          <1>     mov ebx, 1
   445 00001EB5 D3E3                <1>     shl ebx, cl
   446 00001EB7 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   447 00001EB9 8B5E30              <1>     mov ebx, dword [rsi + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   448 00001EBC E89EFBFFFF          <1>     call getUserRegs
   449 00001EC1 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   450 00001EC5 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   451 00001EC9 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   452 00001ECD C3                  <1>     ret
   453                              <1> 
   454                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   455 00001ECE 31C0                <1>     xor eax, eax
   456 00001ED0 668705(38C10300)    <1>     xchg ax, word [errorLevel]
   457 00001ED7 E883FBFFFF          <1>     call getUserRegs
   458 00001EDC 668906              <1>     mov word [rsi + callerFrame.rax], ax
   459 00001EDF C3                  <1>     ret
   460                              <1> 
   461                              <1> getSysVarsPtr:     ;ah = 52h
   462 00001EE0 488D15(80C00300)    <1>     lea rdx, sysVarsPtr
   463 00001EE7 E873FBFFFF          <1>     call getUserRegs
   464 00001EEC 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   465 00001EF0 C3                  <1>     ret
   466                              <1> 
   467                              <1> 
   468                              <1> ;AH = 53h - CREATE DPB
   469                              <1> createDPB:         ;generates a DPB from a given BPB
   470                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   471                              <1> ;This is done so that the other fields of the DPB can be recycled
   472                              <1> ;Input: rsi = ptr to the BPB
   473                              <1> ;       rbp = ptr to the DPB
   474                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   475                              <1> ;bMediaDescriptor
   476 00001EF1 8A4615              <1>     mov al, byte [rsi + bpb.media]
   477 00001EF4 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   478                              <1> ;dFirstFreeCluster
   479 00001EF7 C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   480                              <1> ;dNumberOfFreeClusters
   481 00001EFE C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   482                              <1> ;bBytesPerSectorShift
   483 00001F05 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   484 00001F09 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   485 00001F0B 66D3E8              <1>     shr ax, cl  ;Shift down
   486                              <1> .cd0:
   487 00001F0E 66D1E8              <1>     shr ax, 1
   488 00001F11 7404                <1>     jz .cd1
   489 00001F13 FEC1                <1>     inc cl
   490 00001F15 EBF7                <1>     jmp short .cd0
   491                              <1> .cd1:
   492 00001F17 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   493                              <1> ;bMaxSectorInCluster
   494 00001F1A 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   495 00001F1D FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   496 00001F1F 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   497                              <1> ;bSectorsPerClusterShift
   498 00001F22 FEC0                <1>     inc al
   499 00001F24 30C9                <1>     xor cl, cl
   500                              <1> .cd2:
   501 00001F26 D0E8                <1>     shr al, 1
   502 00001F28 7404                <1>     jz .cd3
   503 00001F2A FEC1                <1>     inc cl
   504 00001F2C EBF8                <1>     jmp short .cd2
   505                              <1> .cd3:
   506 00001F2E 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   507                              <1> ;wFAToffset, number of reserved sectors in partition
   508 00001F31 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   509 00001F35 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   510                              <1> ;bNumberOfFATs
   511 00001F39 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   512 00001F3C 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   513                              <1> ;wNumberRootDirSectors
   514 00001F3F 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   515 00001F43 C1E005              <1>     shl eax, 5  ;Multiply by 32
   516 00001F46 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   517 00001F4A FFC9                <1>     dec ecx
   518 00001F4C 01C8                <1>     add eax, ecx
   519 00001F4E 31D2                <1>     xor edx, edx    ;Clear for divide
   520 00001F50 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   521 00001F52 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   522                              <1> ;dFATlength, get the FAT length
   523 00001F56 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   524 00001F5A 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   525 00001F5D 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   526 00001F5F 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   527 00001F62 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   528                              <1> ;Complex cases below...
   529                              <1> ;dClusterHeapOffset, start sector of the data area
   530 00001F65 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   531 00001F69 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   532 00001F6C 85C0                <1>     test eax, eax
   533 00001F6E 0F44C3              <1>     cmovz eax, ebx
   534                              <1> ;eax = FATsz
   535 00001F71 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   536 00001F75 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   537 00001F78 85DB                <1>     test ebx, ebx
   538 00001F7A 0F44D9              <1>     cmovz ebx, ecx 
   539                              <1> ;ebx = TotSec
   540 00001F7D 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   541 00001F80 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   542                              <1> .cd4:
   543 00001F82 01C2                <1>     add edx, eax
   544 00001F84 FEC9                <1>     dec cl
   545 00001F86 75FA                <1>     jnz .cd4
   546 00001F88 89D0                <1>     mov eax, edx    ;Store product in eax
   547 00001F8A 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   548 00001F8E 01D0                <1>     add eax, edx
   549 00001F90 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   550 00001F94 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   551                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   552                              <1>     ;aka eax = Start sector of the data area in volume
   553 00001F96 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   554                              <1> ;dClusterCount
   555 00001F99 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   556 00001F9B 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   557 00001F9D 31D2                <1>     xor edx, edx
   558 00001F9F BB01000000          <1>     mov ebx, 1
   559 00001FA4 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   560 00001FA7 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   561 00001FA9 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   562 00001FAB FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   563 00001FAD 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   564                              <1> ;dFirstUnitOfRootDir
   565 00001FB0 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   566 00001FB5 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   567 00001FB8 7709                <1>     ja .cd5
   568                              <1>     ;Else, we need to find the first sector of the root directory
   569                              <1>     ;Get the start sector of data area in volume 
   570                              <1>     ; and sub the number of sectors in the root directory
   571 00001FBA 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   572 00001FBD 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   573 00001FC1 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   574                              <1> .cd5:
   575 00001FC3 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   576                              <1> ;Exit epilogue
   577 00001FC6 488B1D(73C10300)    <1>     mov rbx, qword [oldRSP]
   578 00001FCD 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   579                              <1>     %if DEBUG && DPBINFO
   580                              <1>     ;Print DPB 
   581                              <1>     debugEnterM
   582                              <1>     push rbp
   583                              <1>     lea rbp, .l0000
   584                              <1>     call debPrintNullString
   585                              <1>     pop rbp
   586                              <1>     call debDPBBPBptr
   587                              <1>     call debMakeDebuggerRespond
   588                              <1>     jmp short .l0001
   589                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   590                              <1> .l0001:
   591                              <1>     debugExitM
   592                              <1>     %endif
   593 00001FCF C3                  <1>     ret
   594                              <1> 
   595                              <1> getVerifySetting:  ;ah = 54h
   596 00001FD0 8A05(3EC10300)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   597 00001FD6 C3                  <1>     ret
   598                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   599 00001FD7 C3                  <1>     ret
   600                              <1> getExtendedError:  ;ah = 59h
   601 00001FD8 E882FAFFFF          <1>     call getUserRegs
   602 00001FDD 668B05(12C10300)    <1>     mov ax, word [errorExCde]
   603 00001FE4 8A2D(11C10300)      <1>     mov ch, byte [errorLocus]
   604 00001FEA 8A3D(15C10300)      <1>     mov bh, byte [errorClass]
   605 00001FF0 8A1D(14C10300)      <1>     mov bl, byte [errorAction]
   606 00001FF6 668906              <1>     mov word [rsi + callerFrame.rax], ax
   607 00001FF9 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   608 00001FFD 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   609 00002000 C3                  <1>     ret
   610                              <1> getCritErrorInfo:  ;ah = 5Dh
   611                              <1> networkServices:   ;ah = 5Eh, do nothing
   612                              <1> networkRedirection:;ah = 5Fh, do nothing
   613 00002001 C3                  <1>     ret
   614                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   615                              <1> return:
   616 00002002 C3                  <1>     ret
    31                                  %include "./Source/Kernel/multiplx.asm"
    32                              <1> ;Default multiplexer. Current only installed function is ah=12h
    33                              <1> 
    34                              <1> multiplexHdlr:          ;Int 4Fh, AH=12h, exposed internal functions
    35 00002003 80FC12              <1>     cmp ah, 12h
    36 00002006 751A                <1>     jne .exit       ;Exit if not for us
    37 00002008 3C01                <1>     cmp al, mDispTblL / 2
    38 0000200A 7316                <1>     jae .exit   ;If above or equal, exit
    39 0000200C 53                  <1>     push rbx
    40 0000200D 51                  <1>     push rcx
    41 0000200E 31C9                <1>     xor ecx, ecx
    42 00002010 488D1DD8E0FFFF      <1>     lea rbx, mDispTbl   ;Get multiplex displacement table
    43 00002017 88C1                <1>     mov cl, al   ;Get the subfunction number into ecx
    44 00002019 D1E1                <1>     shl ecx, 1   ;multiply by 2
    45 0000201B 4801CB              <1>     add rbx, rcx    ;rbx now points to function to call
    46 0000201E FFD3                <1>     call rbx
    47 00002020 59                  <1>     pop rcx
    48 00002021 5B                  <1>     pop rbx
    49                              <1> .exit:
    50 00002022 48CF                <1>     iretq
    51                              <1> multiplexTest:
    52 00002024 B0FF                <1>     mov al, -1
    53 00002026 C3                  <1>     ret
    32                                  %include "./Source/Misc/int44h.asm"
    33                              <1> critErrorHandler:   ;Int 44h
    34                              <1> ;User Stack in usage here, must be swapped to before this is called
    35                              <1> ;Entered with:  
    36                              <1> ;               AH = Critical Error Bitfield
    37                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    38                              <1> ;               Bit 6 - Reserved
    39                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    40                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    41                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    42                              <1> ;               Bits [2-1] = Affected Disk Error
    43                              <1> ;                     0 0   DOS area
    44                              <1> ;                     0 1   FAT area
    45                              <1> ;                     1 0   Directory area
    46                              <1> ;                     1 1   Data area
    47                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    48                              <1> ;               AL  = Failing drive number if AH[7] = 0
    49                              <1> ;               DIL = Error code for errorMsg
    50                              <1> ;               RSI = EA of Device Header for which device the error occured
    51                              <1> ;Return:
    52                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    53                              <1> ;                  = 1 - Retry the Operation    (Retry)
    54                              <1> ;                  = 2 - Terminate the Program  (Abort)
    55                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    56 00002027 53                  <1>     push rbx
    57 00002028 51                  <1>     push rcx
    58 00002029 52                  <1>     push rdx
    59 0000202A 57                  <1>     push rdi
    60 0000202B 56                  <1>     push rsi
    61 0000202C FC                  <1>     cld         ;Make String ops go forward
    62                              <1> 
    63 0000202D 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    64 00002030 488D155E020000      <1>     lea rdx, qword [.crlf]
    65 00002037 B409                <1>     mov ah, 09h ;Print String
    66 00002039 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    67                              <1> 
    68 0000203B 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    69 00002041 B90C000000          <1>     mov ecx, 0Ch
    70 00002046 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    71 00002048 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    72 0000204B 480FB7FF            <1>     movzx rdi, di
    73 0000204F 4889FA              <1>     mov rdx, rdi    ;Copy error code
    74 00002052 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    75 00002056 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    76 00002059 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    77 0000205C 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    78 00002063 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    79 00002067 B409                <1>     mov ah, 09h ;Print String
    80 00002069 CD41                <1>     int 41h     ;Call DOS to print first part of message
    81                              <1> 
    82 0000206B 488D1505020000      <1>     lea rdx, qword [.readmsg]
    83 00002072 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    84 00002079 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    85 0000207C 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    86 00002080 B409                <1>     mov ah, 09h ;Print String
    87 00002082 CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    88                              <1> 
    89 00002084 F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    90 00002087 0F85DF000000        <1>     jnz .charError
    91                              <1> ;Disk error continues here
    92 0000208D 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    93 00002094 B409                <1>     mov ah, 09h
    94 00002096 CD41                <1>     int 41h
    95 00002098 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    96 0000209A 80C241              <1>     add dl, "A" ;Add ASCII code
    97 0000209D B402                <1>     mov ah, 02h ;Print char in dl
    98 0000209F CD41                <1>     int 41h
    99                              <1> .userInput:
   100 000020A1 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
   101 000020A8 B409                <1>     mov ah, 09h
   102 000020AA CD41                <1>     int 41h
   103                              <1> ;Abort, Retry, Ignore, Fail is word order
   104                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
   105                              <1> .userAbort:
   106                              <1> ;Abort is always an option
   107 000020AC 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
   108 000020B3 B409                <1>     mov ah, 09h
   109 000020B5 CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   110                              <1> .userRetry:
   111 000020B7 F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   112 000020BA 7416                <1>     jz .userIgnore    ;If clear, dont print message
   113 000020BC 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   114 000020C3 B409                <1>     mov ah, 09h
   115 000020C5 CD41                <1>     int 41h
   116 000020C7 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   117 000020CE B409                <1>     mov ah, 09h
   118 000020D0 CD41                <1>     int 41h
   119                              <1> .userIgnore:
   120 000020D2 F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   121 000020D5 7416                <1>     jz .userFail
   122 000020D7 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   123 000020DE B409                <1>     mov ah, 09h
   124 000020E0 CD41                <1>     int 41h
   125 000020E2 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   126 000020E9 B409                <1>     mov ah, 09h
   127 000020EB CD41                <1>     int 41h
   128                              <1> .userFail:
   129 000020ED F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   130 000020F0 7416                <1>     jz .userMsgEnd
   131 000020F2 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   132 000020F9 B409                <1>     mov ah, 09h
   133 000020FB CD41                <1>     int 41h
   134 000020FD 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   135 00002104 B409                <1>     mov ah, 09h
   136 00002106 CD41                <1>     int 41h
   137                              <1> .userMsgEnd:
   138 00002108 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   139 0000210F B409                <1>     mov ah, 09h
   140 00002111 CD41                <1>     int 41h
   141                              <1> ;Get user input now 
   142 00002113 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   143 00002115 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   144 0000211C B401                <1>     mov ah, 01h ;STDIN without Console Echo
   145 0000211E CD41                <1>     int 41h ;Get char in al
   146 00002120 3C61                <1>     cmp al, "a" ;Chack if lowercase
   147 00002122 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   148 00002124 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   149                              <1> .uip1:
   150 00002126 AE                  <1>     scasb   ;Compare char to list, offset gives return code
   151 00002127 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   152 00002129 FFC1                <1>     inc ecx
   153 0000212B 81F904000000        <1>     cmp ecx, 4
   154 00002131 75F3                <1>     jne .uip1
   155 00002133 E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   156                              <1> .validInput:
   157 00002138 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   158                              <1> ;Now check if the input is permitted
   159 0000213A 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   160 0000213C 7427                <1>     je .cehExit
   161 0000213E 84C0                <1>     test al, al ;Check if 0 => Ignore
   162 00002140 740F                <1>     je .viIgnore
   163 00002142 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   164 00002144 7416                <1>     je .viRetry
   165                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   166 00002146 F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   167 00002149 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   168 0000214F EB14                <1>     jmp short .cehExit
   169                              <1> .viIgnore:
   170 00002151 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   171 00002154 0F8447FFFFFF        <1>     jz .userInput
   172 0000215A EB09                <1>     jmp short .cehExit
   173                              <1> .viRetry:
   174 0000215C F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   175 0000215F 0F843CFFFFFF        <1>     jz .userInput
   176                              <1> .cehExit:
   177 00002165 5E                  <1>     pop rsi
   178 00002166 5F                  <1>     pop rdi
   179 00002167 5A                  <1>     pop rdx
   180 00002168 59                  <1>     pop rcx
   181 00002169 5B                  <1>     pop rbx
   182 0000216A 48CF                <1>     iretq
   183                              <1> .charError:
   184 0000216C B908000000          <1>     mov ecx, 8  ;8 chars in device name
   185 00002171 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   186                              <1> .ce1:
   187 00002178 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   188 00002179 88C2                <1>     mov dl, al  ;Move char into dl
   189 0000217B B402                <1>     mov ah, 02h
   190 0000217D CD41                <1>     int 41h ;Print char
   191 0000217F E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   192 00002181 E91BFFFFFF          <1>     jmp .userInput
   193                              <1> 
   194                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   195 00002186 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   195 0000218F 746563742024202020  <1>
   196 00002198 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   196 000021A1 6E6974202420202020  <1>
   197 000021AA 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   197 000021B3 202420202020202020  <1>
   198 000021BC 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   198 000021C5 6F6D6D616E64202420  <1>
   199 000021CE 446174612024202020- <1>             db "Data $            "       ;Error 4
   199 000021D7 202020202020202020  <1>
   200 000021E0 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   200 000021E9 737420242020202020  <1>
   201 000021F2 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   201 000021FB 202020202020202020  <1>
   202 00002204 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   202 0000220D 656469612024202020  <1>
   203 00002216 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   203 0000221F 7420466F756E642024  <1>
   204 00002228 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   204 00002231 706572202420202020  <1>
   205 0000223A 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   205 00002243 6C7420242020202020  <1>
   206 0000224C 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   206 00002255 742024202020202020  <1>
   207 0000225E 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   207 00002267 61696C757265202420  <1>
   208                              <1> 
   209 00002270 64726976652024      <1> .drive      db "drive $"
   210 00002277 6572726F7220726561- <1> .readmsg    db "error reading $"
   210 00002280 64696E672024        <1>
   211 00002286 6572726F7220777269- <1> .writemsg   db "error writing $"
   211 0000228F 74696E672024        <1>
   212 00002295 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   213 00002298 41626F727424        <1> .abortmsg   db "Abort$" 
   214 0000229E 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   215 000022A5 526574727924        <1> .retrymsg   db "Retry$"
   216 000022AB 4661696C24          <1> .failmsg    db "Fail$"
   217 000022B0 2C2024              <1> .betweenMsg db ", $"
   218 000022B3 3F2024              <1> .endMsg     db "? $"
   219 000022B6 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    33                                  %include "./Source/Drivers/drvData.asm"
    34                              <1> ;-----------------------------------:
    35                              <1> ;          Driver routines          :
    36                              <1> ;-----------------------------------:
    37                              <1> drivers:
    38                              <1> conHdr:
    39 000022BA [DC22000000000000]  <1>     dq auxHdr
    40 000022C2 1308                <1>     dw 0813h
    41 000022C4 [5A24000000000000]  <1>     dq commonStrat
    42 000022CC [6924000000000000]  <1>     dq conDriver
    43 000022D4 434F4E2020202020    <1>     db "CON     "
    44                              <1> auxHdr:
    45 000022DC [FE22000000000000]  <1>     dq prnHdr
    46 000022E4 0080                <1>     dw 08000h
    47 000022E6 [5A24000000000000]  <1>     dq commonStrat
    48 000022EE [3F27000000000000]  <1>     dq com1Intr
    49 000022F6 4155582020202020    <1>     db "AUX     "
    50                              <1> prnHdr:
    51 000022FE [2023000000000000]  <1>     dq clkHdr
    52 00002306 40A0                <1>     dw 0A040h
    53 00002308 [6224000000000000]  <1>     dq nulStrat
    54 00002310 [6824000000000000]  <1>     dq nulIntr
    55 00002318 50524E2020202020    <1>     db "PRN     "
    56                              <1> clkHdr:
    57 00002320 [4223000000000000]  <1>     dq msdHdr
    58 00002328 0880                <1>     dw 08008h
    59 0000232A [5A24000000000000]  <1>     dq commonStrat
    60 00002332 [B225000000000000]  <1>     dq clkDriver
    61 0000233A 434C4F434B242020    <1>     db "CLOCK$  "
    62                              <1> msdHdr:
    63 00002342 [6423000000000000]  <1>     dq com1Hdr
    64 0000234A 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    65 0000234C [5A24000000000000]  <1>     dq commonStrat
    66 00002354 [E428000000000000]  <1>     dq msdDriver
    67 0000235C 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    68                              <1> com1Hdr:
    69 00002364 [8623000000000000]  <1>     dq com2Hdr
    70 0000236C 0080                <1>     dw 08000h
    71 0000236E [5A24000000000000]  <1>     dq commonStrat
    72 00002376 [3F27000000000000]  <1>     dq com1Intr
    73 0000237E 434F4D3120202020    <1>     db "COM1    "
    74                              <1> com2Hdr:
    75 00002386 [A823000000000000]  <1>     dq com3Hdr
    76 0000238E 0080                <1>     dw 08000h
    77 00002390 [5A24000000000000]  <1>     dq commonStrat
    78 00002398 [4827000000000000]  <1>     dq com2Intr
    79 000023A0 434F4D3220202020    <1>     db "COM2    "
    80                              <1> com3Hdr:
    81 000023A8 [CA23000000000000]  <1>     dq com4Hdr
    82 000023B0 0080                <1>     dw 08000h
    83 000023B2 [5A24000000000000]  <1>     dq commonStrat
    84 000023BA [5127000000000000]  <1>     dq com3Intr
    85 000023C2 434F4D3320202020    <1>     db "COM3    "
    86                              <1> com4Hdr:
    87 000023CA [EC23000000000000]  <1>     dq lpt1Hdr
    88 000023D2 0080                <1>     dw 08000h
    89 000023D4 [5A24000000000000]  <1>     dq commonStrat
    90 000023DC [5A27000000000000]  <1>     dq com4Intr
    91 000023E4 434F4D3420202020    <1>     db "COM4    "
    92                              <1> lpt1Hdr:
    93 000023EC [0E24000000000000]  <1>     dq lpt2Hdr
    94 000023F4 40A0                <1>     dw 0A040h
    95 000023F6 [6224000000000000]  <1>     dq nulStrat
    96 000023FE [6824000000000000]  <1>     dq nulIntr
    97 00002406 4C50543120202020    <1>     db "LPT1    "
    98                              <1> lpt2Hdr:
    99 0000240E [3024000000000000]  <1>     dq lpt3Hdr
   100 00002416 40A0                <1>     dw 0A040h
   101 00002418 [6224000000000000]  <1>     dq nulStrat
   102 00002420 [6824000000000000]  <1>     dq nulIntr
   103 00002428 4C50543220202020    <1>     db "LPT2    "
   104                              <1> lpt3Hdr:
   105 00002430 FFFFFFFFFFFFFFFF    <1>     dq -1
   106 00002438 40A0                <1>     dw 0A040h
   107 0000243A [6224000000000000]  <1>     dq nulStrat
   108 00002442 [6824000000000000]  <1>     dq nulIntr
   109 0000244A 4C50543320202020    <1>     dq "LPT3    "
   110 00002452 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    34                                  %include "./Source/Drivers/charDrv.asm"
    35                              <1> commonStrat:
    36                              <1> ;DOS calls this function with rbx=Ptr to request header
    37 0000245A 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    38 00002461 C3                  <1>     ret
    39                              <1> nulStrat:
    40 00002462 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    41                              <1> nulIntr:
    42 00002468 C3                  <1>     ret
    43                              <1> conDriver:
    44 00002469 50                  <1>     push rax
    45 0000246A 53                  <1>     push rbx
    46 0000246B 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    47 00002472 B003                <1>     mov al, 03h ;Unknown Command
    48 00002474 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    49 00002478 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    50                              <1> 
    51 0000247A 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    52 0000247D 3C04                <1>     cmp al, 4
    53 0000247F 743D                <1>     jz .conRead
    54 00002481 3C05                <1>     cmp al, 5
    55 00002483 747F                <1>     jz .conNondestructiveRead
    56 00002485 3C06                <1>     cmp al, 6
    57 00002487 0F84A8000000        <1>     jz .conInputStatus
    58 0000248D 3C07                <1>     cmp al, 7
    59 0000248F 0F84B0000000        <1>     jz .conFlushInputBuffers
    60 00002495 3C08                <1>     cmp al, 8
    61 00002497 0F84CA000000        <1>     jz .conWrite
    62 0000249D 3C09                <1>     cmp al, 9
    63 0000249F 0F84C2000000        <1>     jz .conWrite
    64 000024A5 3C0A                <1>     cmp al, 0Ah
    65 000024A7 0F84E3000000        <1>     jz .conOutputStatus
    66 000024AD EB06                <1>     jmp short .conExit  ;All other valid functions return done
    67                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    68 000024AF B480                <1>     mov ah, 80h ;Set error bit
    69 000024B1 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    70                              <1> .conExit:
    71 000024B5 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    72 000024BB 5B                  <1>     pop rbx
    73 000024BC 58                  <1>     pop rax
    74 000024BD C3                  <1>     ret
    75                              <1> .conRead:    ;Function 4
    76 000024BE B005                <1>     mov al, 05h ;Bad request structure length?
    77 000024C0 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    78 000024C3 75EA                <1>     jne .conWriteErrorCode
    79                              <1> 
    80 000024C5 57                  <1>     push rdi
    81 000024C6 51                  <1>     push rcx
    82 000024C7 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    83 000024CB 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    84                              <1> .cre1:
    85 000024CD 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    86 000024D0 741C                <1>     je .cre2
    87 000024D2 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    88 000024D9 751A                <1>     jnz .cre3   ;No, get the buffer value
    89 000024DB 31C0                <1>     xor eax, eax
    90 000024DD CD36                <1>     int 36h
    91                              <1> .cre11:
    92 000024DF AA                  <1>     stosb
    93 000024E0 84C0                <1>     test al, al ;Was the ascii code stored 0?
    94 000024E2 7506                <1>     jnz .cre12  ;No, skip storing scancode in buffer
    95 000024E4 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    96                              <1> .cre12:
    97 000024EA FFC1                <1>     inc ecx ;Inc chars stored in buffer
    98 000024EC EBDF                <1>     jmp short .cre1
    99                              <1> .cre2:
   100 000024EE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   101 000024F1 59                  <1>     pop rcx
   102 000024F2 5F                  <1>     pop rdi
   103 000024F3 EBC0                <1>     jmp short .conExit
   104                              <1> .cre3:
   105 000024F5 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
   106 000024FB C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
   107 00002502 EBDB                <1>     jmp short .cre11
   108                              <1> 
   109                              <1> .conNondestructiveRead:  ;Function 5
   110 00002504 B005                <1>     mov al, 05h ;Bad request structure length?
   111 00002506 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   112 00002509 75A4                <1>     jne .conWriteErrorCode
   113 0000250B 803D8E00000000      <1>     cmp byte [.conBuf], 0
   114 00002512 7519                <1>     jnz .cnr2
   115 00002514 B401                <1>     mov ah, 01h     ;Get key if exists
   116 00002516 CD36                <1>     int 36h
   117 00002518 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   118                              <1>     ;Keystroke available
   119                              <1> .cnr0:
   120 0000251A 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   121 0000251D E993FFFFFF          <1>     jmp .conExit
   122                              <1> .cnr1: ;No keystroke available
   123 00002522 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   124 00002528 E988FFFFFF          <1>     jmp .conExit
   125                              <1> .cnr2:
   126 0000252D 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   127 00002533 EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   128                              <1> 
   129                              <1> .conInputStatus:         ;Function 6
   130 00002535 B005                <1>     mov al, 05h ;Bad request structure length?
   131 00002537 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   132 0000253A 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   133 00002540 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   134                              <1> 
   135                              <1> .conFlushInputBuffers:   ;Function 7
   136 00002545 B005                <1>     mov al, 05h ;Bad request structure length?
   137 00002547 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   138 0000254A 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   139 00002550 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   140                              <1> .cfib0:
   141 00002557 B401                <1>     mov ah, 01      ;Get buffer status
   142 00002559 CD36                <1>     int 36h
   143 0000255B 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   144 00002561 30E4                <1>     xor ah, ah
   145 00002563 CD36                <1>     int 36h ;Read key to flush from buffer
   146 00002565 EBF0                <1>     jmp short .cfib0
   147                              <1> 
   148                              <1> .conWrite:   ;Function 8 and 9
   149 00002567 B005                <1>     mov al, 05h ;Bad request structure length?
   150 00002569 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   151 0000256C 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   152                              <1> 
   153 00002572 56                  <1>     push rsi
   154 00002573 51                  <1>     push rcx
   155 00002574 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   156 00002578 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   157                              <1> .cw1: 
   158 0000257A 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   159 0000257D 7407                <1>     je .cw2
   160 0000257F AC                  <1>     lodsb   ;Get char into al, and inc rsi
   161 00002580 CD49                <1>     int 49h ;Fast print char
   162 00002582 FFC1                <1>     inc ecx
   163 00002584 EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   164                              <1> .cw2:
   165 00002586 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   166 00002589 59                  <1>     pop rcx
   167 0000258A 5E                  <1>     pop rsi
   168 0000258B E925FFFFFF          <1>     jmp .conExit
   169                              <1> .conOutputStatus:   ;Function 0Ah
   170 00002590 B005                <1>     mov al, 05h ;Bad request structure length?
   171 00002592 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   172 00002595 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   173 0000259B E915FFFFFF          <1>     jmp .conExit
   174                              <1> 
   175 000025A0 00                  <1> .conBuf db 0    ;Single byte buffer
   176                              <1> fastOutput:         ;This CON driver supports Int 49h
   177                              <1> ;Called with char to transfer in al
   178 000025A1 50                  <1>     push rax
   179 000025A2 B40E                <1>     mov ah, 0Eh
   180 000025A4 CD30                <1>     int 30h
   181 000025A6 58                  <1>     pop rax
   182 000025A7 48CF                <1>     iretq
   183                              <1> ctrlBreak:
   184                              <1> ;CON Int 3Bh handler to detect CTRL+BREAK
   185 000025A9 C605F0FFFFFF03      <1>     mov byte [conDriver.conBuf], 03h    ;Place a ^C in buffer
   186 000025B0 48CF                <1>     iretq
   187                              <1> 
   188                              <1> clkDriver:
   189 000025B2 50                  <1>     push rax
   190 000025B3 53                  <1>     push rbx
   191 000025B4 51                  <1>     push rcx
   192 000025B5 52                  <1>     push rdx
   193 000025B6 56                  <1>     push rsi
   194 000025B7 55                  <1>     push rbp
   195 000025B8 488B1D93FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   196 000025BF B003                <1>     mov al, 03h ;Unknown Command
   197 000025C1 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   198 000025C5 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   199                              <1> 
   200 000025C7 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   201 000025CA 3C04                <1>     cmp al, 04h
   202 000025CC 7437                <1>     jz .clkRead
   203 000025CE 3C06                <1>     cmp al, 06h
   204 000025D0 0F8494000000        <1>     jz .clkInputStatus
   205 000025D6 3C07                <1>     cmp al, 07h
   206 000025D8 0F8498000000        <1>     jz .clkFlushInputBuffers
   207 000025DE 3C08                <1>     cmp al, 08h
   208 000025E0 0F84A0000000        <1>     jz .clkWrite
   209 000025E6 3C09                <1>     cmp al, 09h
   210 000025E8 0F8498000000        <1>     jz .clkWrite
   211 000025EE EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   212                              <1> .clkNotFunctioning:
   213 000025F0 B002                <1>     mov al, 02h ;Device not ready error
   214                              <1> .clkWriteErrorCode:
   215 000025F2 B480                <1>     mov ah, 80h ;Set error bit
   216 000025F4 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   217                              <1> .clkExit:
   218 000025F8 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   219 000025FE 5D                  <1>     pop rbp
   220 000025FF 5E                  <1>     pop rsi
   221 00002600 5A                  <1>     pop rdx
   222 00002601 59                  <1>     pop rcx
   223 00002602 5B                  <1>     pop rbx
   224 00002603 58                  <1>     pop rax
   225 00002604 C3                  <1>     ret
   226                              <1> 
   227                              <1> .clkRead:           ;Function 4
   228 00002605 B005                <1>     mov al, 05h ;Bad request structure length?
   229 00002607 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   230 0000260A 75E6                <1>     jne .clkWriteErrorCode
   231                              <1> 
   232 0000260C 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   233 0000260F 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   234 00002613 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   235 0000261A 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   236 0000261E 30E4                <1>     xor ah, ah
   237 00002620 CD3A                <1>     int 3Ah         ;Read the system timer
   238 00002622 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   239 00002624 740D                <1>     jz .clkr1       ;Nope, now just time 
   240 00002626 30E4                <1>     xor ah, ah
   241                              <1>     ;This works as al should keep count of the # of days passed since last read
   242 00002628 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   243 0000262C 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   244                              <1> .clkr1:
   245 00002633 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   246 00002636 0FB7D2              <1>     movzx edx, dx
   247 00002639 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   248 0000263B 89D0                <1>     mov eax, edx
   249 0000263D 31D2                <1>     xor edx, edx
   250 0000263F 89D8                <1>     mov eax, ebx
   251 00002641 B944040000          <1>     mov ecx, 1092   
   252 00002646 F7F1                <1>     div ecx
   253 00002648 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   254 0000264B 89D0                <1>     mov eax, edx    ;Get remainder in eax
   255 0000264D 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   256 00002651 31D2                <1>     xor edx, edx
   257 00002653 B95B000000          <1>     mov ecx, 91 ;5*18.2
   258 00002658 F7F1                <1>     div ecx
   259 0000265A 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   260 0000265D 89D0                <1>     mov eax, edx    ;Get remainder in eax
   261                              <1>     ;lea eax, dword [eax + 4*eax]
   262                              <1>     ;add eax, edx    ;Essentially multiply by 6
   263 0000265F 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   264 00002662 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   265 00002665 E98EFFFFFF          <1>     jmp .clkExit
   266                              <1> 
   267                              <1> .clkInputStatus:    ;Function 6
   268                              <1> ;Always return ready
   269 0000266A B005                <1>     mov al, 05h ;Bad request structure length?
   270 0000266C 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   271 0000266F 7581                <1>     jne .clkWriteErrorCode
   272 00002671 E982FFFFFF          <1>     jmp .clkExit
   273                              <1> .clkFlushInputBuffers:  ;Function 7
   274                              <1> ;Always return done immediately
   275 00002676 B005                <1>     mov al, 05h ;Bad request structure length?
   276 00002678 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   277 0000267B 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   278 00002681 E972FFFFFF          <1>     jmp .clkExit
   279                              <1> 
   280                              <1> .clkWrite:          ;Functions 8 and 9
   281 00002686 B005                <1>     mov al, 05h ;Bad request structure length?
   282 00002688 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   283 0000268B 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   284                              <1> 
   285 00002691 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   286 00002694 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   287 00002698 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   288 0000269C 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   289                              <1> 
   290 000026A3 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   291 000026A5 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   292 000026A9 B105                <1>     mov cl, 5
   293 000026AB F6F1                <1>     div cl          ;Divide al by 5
   294 000026AD 30E4                <1>     xor ah, ah      ;Remove the remainder
   295 000026AF 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   296                              <1> ;Using the decimal part of this formula for the low count
   297                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   298 000026B1 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   299 000026B4 B912000000          <1>     mov ecx, 18
   300 000026B9 F7E1                <1>     mul ecx  
   301 000026BB 01C3                <1>     add ebx, eax
   302                              <1> 
   303 000026BD 31D2                <1>     xor edx, edx
   304 000026BF 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   305 000026C3 B944040000          <1>     mov ecx, 1092
   306 000026C8 F7E1                <1>     mul ecx
   307 000026CA 01C3                <1>     add ebx, eax
   308 000026CC 89DA                <1>     mov edx, ebx    ;edx now has low count
   309 000026CE 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   310 000026D2 B401                <1>     mov ah, 01h     ;Set the system time
   311 000026D4 CD3A                <1>     int 3Ah
   312                              <1> 
   313 000026D6 4889F3              <1>     mov rbx, rsi
   314 000026D9 E91AFFFFFF          <1>     jmp .clkExit
   315                              <1> 
   316                              <1> .clkBCDtoHex:
   317                              <1> ;Converts a BCD value to a Hex byte
   318                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   319 000026DE 51                  <1>     push rcx
   320 000026DF 0FB6C0              <1>     movzx eax, al   ;Zero extend
   321 000026E2 89C1                <1>     mov ecx, eax    ;Save al in ecx
   322 000026E4 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   323 000026E9 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   324 000026EF C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   325                              <1> .cbth0:
   326 000026F2 050A000000          <1>     add eax, 10
   327 000026F7 E2F9                <1>     loop .cbth0
   328 000026F9 59                  <1>     pop rcx
   329 000026FA C3                  <1>     ret
   330                              <1> 
   331                              <1> .clkHexToBCD:
   332                              <1> ;Converts a Hex byte into two BCD digits
   333                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   334 000026FB 51                  <1>     push rcx
   335 000026FC 0FB6C0              <1>     movzx eax, al   ;Zero extend
   336 000026FF 31C9                <1>     xor ecx, ecx
   337                              <1> .chtb0:
   338 00002701 3D0A000000          <1>     cmp eax, 10
   339 00002706 7209                <1>     jb .chtb1
   340 00002708 2D0A000000          <1>     sub eax, 10
   341 0000270D FFC1                <1>     inc ecx
   342 0000270F EBF0                <1>     jmp short .chtb0
   343                              <1> .chtb1:
   344 00002711 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   345 00002714 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   346 00002716 59                  <1>     pop rcx
   347 00002717 C3                  <1>     ret
   348 00002718 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   349                              <1> ;When counting the number of days, first compute the number of years since
   350                              <1> ; 1980 and your year. 
   351                              <1> ;Then, using the table below, find the number of leap years between 1980
   352                              <1> ; and (YourYear - 1). 
   353                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   354                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   355                              <1> ;Use the months table to get the number of days in a normal month as leap 
   356                              <1> ; years are added using the previous comment.
   357                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   358                              <1> ; a leap year using the table. If it is, add an extra day.
   359                              <1> .clkLeapYears:
   360 0000271A 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   360 00002723 24282C30            <1>
   361 00002727 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   361 00002730 585C60              <1>
   362                              <1> .clkMonths:
   363 00002733 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   363 0000273C 1F1E1F              <1>
   364                              <1> ;COM Driver headers and main interrupt strat
   365                              <1> com1Intr:
   366 0000273F C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   367 00002746 EB19                <1>     jmp short comIntr
   368                              <1> com2Intr:
   369 00002748 C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   370 0000274F EB10                <1>     jmp short comIntr
   371                              <1> com3Intr:
   372 00002751 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   373 00002758 EB07                <1>     jmp short comIntr
   374                              <1> com4Intr:
   375 0000275A C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   376                              <1> comIntr:
   377 00002761 50                  <1>     push rax
   378 00002762 53                  <1>     push rbx
   379 00002763 51                  <1>     push rcx
   380 00002764 52                  <1>     push rdx
   381 00002765 56                  <1>     push rsi
   382 00002766 57                  <1>     push rdi
   383 00002767 488B1DE4FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   384 0000276E B003                <1>     mov al, 03h ;Unknown Command
   385 00002770 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   386 00002774 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   387                              <1> 
   388 00002776 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   389 00002779 3C04                <1>     cmp al, 4   ;Read Character(s)
   390 0000277B 7462                <1>     jz .comRead
   391 0000277D 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   392 0000277F 0F849B000000        <1>     jz .comNondestructiveRead   
   393 00002785 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   394 00002787 0F8484000000        <1>     jz .comReadInputStatus
   395 0000278D 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   396 0000278F 0F84B9000000        <1>     jz .comFlushInputBuffers
   397 00002795 3C08                <1>     cmp al, 8
   398 00002797 0F84DB000000        <1>     jz .comWrite
   399 0000279D 3C09                <1>     cmp al, 9
   400 0000279F 0F84D3000000        <1>     jz .comWrite
   401 000027A5 3C0A                <1>     cmp al, 0Ah
   402 000027A7 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   403 000027AD EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   404                              <1> .comErrorNoCount:
   405 000027AF B002                <1>     mov al, 02h ;Unknown device
   406 000027B1 EB19                <1>     jmp short .comWriteErrorCode
   407                              <1> .comReadError:
   408 000027B3 BA0B000000          <1>     mov edx, 0Bh
   409                              <1> .comWriteError:
   410 000027B8 BA0A000000          <1>     mov edx, 0Ah
   411                              <1> .comError:
   412 000027BD 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   413 000027C0 B902000000          <1>     mov ecx, 02h    ;Unknown device
   414 000027C5 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   415 000027C7 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   416 000027CA 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   417                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   418 000027CC B480                <1>     mov ah, 80h ;Set error bit
   419 000027CE 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   420                              <1> .comExit:
   421 000027D2 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   422 000027D8 5F                  <1>     pop rdi
   423 000027D9 5E                  <1>     pop rsi
   424 000027DA 5A                  <1>     pop rdx
   425 000027DB 59                  <1>     pop rcx
   426 000027DC 5B                  <1>     pop rbx
   427 000027DD 58                  <1>     pop rax
   428 000027DE C3                  <1>     ret
   429                              <1> 
   430                              <1> .comRead:
   431 000027DF B005                <1>     mov al, 05h ;Bad request structure length?
   432 000027E1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   433 000027E4 75E6                <1>     jne .comWriteErrorCode
   434                              <1> 
   435 000027E6 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   436 000027EA 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   437                              <1> .cr1:
   438 000027EC 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   439 000027EF 741B                <1>     je .cre2
   440                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   441 000027F1 B802000000          <1>     mov eax, 02h    ;Recieve 
   442 000027F6 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   443 000027FC 6698                <1>     cbw     ;Zero extend to upper byte
   444 000027FE CD34                <1>     int 34h ;Recieve Char
   445 00002800 72BB                <1>     jc .comError
   446 00002802 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   447 00002805 74EA                <1>     je .cr11
   448 00002807 AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   449 00002808 FFC1                <1>     inc ecx
   450 0000280A EBE0                <1>     jmp short .cr1
   451                              <1> .cre2:
   452 0000280C 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   453 0000280F EBC1                <1>     jmp short .comExit
   454                              <1> 
   455                              <1> .comReadInputStatus:
   456 00002811 B005                <1>     mov al, 05h ;Bad request structure length?
   457 00002813 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   458 00002816 75B4                <1>     jne .comWriteErrorCode
   459 00002818 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   460 0000281E EBB2                <1>     jmp short .comExit
   461                              <1> 
   462                              <1> .comNondestructiveRead:
   463                              <1> ;Acts like a "read one character if there is one" function
   464 00002820 B005                <1>     mov al, 05h ;Bad request structure length?
   465 00002822 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   466 00002825 75A5                <1>     jne .comWriteErrorCode
   467                              <1> .cndr1:
   468 00002827 B802000000          <1>     mov eax, 02h    ;Recieve 
   469 0000282C 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   470 00002832 6698                <1>     cbw     ;Zero extend to upper byte
   471 00002834 CD34                <1>     int 34h ;Recieve Char
   472 00002836 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   473 0000283C 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   474 0000283F 7405                <1>     je .cndr2
   475 00002841 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   476 00002844 EB8C                <1>     jmp short .comExit
   477                              <1> .cndr2:
   478 00002846 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   479 0000284C EB84                <1>     jmp short .comExit
   480                              <1> 
   481                              <1> .comFlushInputBuffers:
   482 0000284E B005                <1>     mov al, 05h ;Bad request structure length?
   483 00002850 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   484 00002853 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   485                              <1> .cfib0:
   486 00002859 8A1584000000        <1>     mov dl, byte [.comDevice]
   487 0000285F 6698                <1>     cbw
   488 00002861 B802000000          <1>     mov eax, 02h    ;Recieve
   489 00002866 CD34                <1>     int 34h
   490 00002868 0F8241FFFFFF        <1>     jc .comErrorNoCount
   491 0000286E 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   492 00002871 75E6                <1>     jne .cfib0
   493 00002873 E95AFFFFFF          <1>     jmp .comExit
   494                              <1> 
   495                              <1> .comWrite:
   496 00002878 B005                <1>     mov al, 05h ;Bad request structure length?
   497 0000287A 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   498 0000287D 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   499                              <1> 
   500 00002883 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   501 00002887 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   502                              <1> .cw1: 
   503 00002889 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   504 0000288C 7417                <1>     je .cw2
   505 0000288E AC                  <1>     lodsb   ;Get char into al, and inc rsi
   506 0000288F B401                <1>     mov ah, 01h ;Move function number into ah
   507 00002891 8A154C000000        <1>     mov dl, byte [.comDevice]
   508 00002897 6698                <1>     cbw     ;Zero extend to upper byte
   509 00002899 CD34                <1>     int 34h ;Transmit char
   510 0000289B 0F821CFFFFFF        <1>     jc .comError
   511 000028A1 FFC1                <1>     inc ecx
   512 000028A3 EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   513                              <1> .cw2:
   514 000028A5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   515 000028A8 E925FFFFFF          <1>     jmp .comExit
   516                              <1> 
   517                              <1> .comOutputStatus:
   518                              <1> ;Read MODEM status
   519 000028AD B005                <1>     mov al, 05h ;Bad request structure length?
   520 000028AF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   521 000028B2 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   522                              <1> 
   523 000028B8 8A1525000000        <1>     mov dl, byte [.comDevice]
   524 000028BE 6698                <1>     cbw     ;Zero extend to upper byte
   525 000028C0 B403                <1>     mov ah, 03h     ;Get status
   526 000028C2 CD34                <1>     int 34h
   527 000028C4 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   528 000028CA 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   529 000028CF C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   530 000028D2 F7D0                <1>     not eax      ;Bitwise inversion
   531 000028D4 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   532 000028D9 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   533 000028DE E9EFFEFFFF          <1>     jmp .comExit
   534 000028E3 00                  <1> .comDevice   db 0
    35                                  %include "./Source/Drivers/diskDrv.asm"
    36                              <1> msdDriver:
    37 000028E4 50                  <1>     push rax
    38 000028E5 53                  <1>     push rbx
    39 000028E6 51                  <1>     push rcx
    40 000028E7 52                  <1>     push rdx
    41 000028E8 56                  <1>     push rsi
    42 000028E9 57                  <1>     push rdi
    43 000028EA 55                  <1>     push rbp
    44 000028EB 4150                <1>     push r8
    45 000028ED 488B1D5EFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    46 000028F4 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    47 000028F8 B003                <1>     mov al, drvBadCmd
    48 000028FA 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    49 00002900 B001                <1>     mov al, drvBadUnit 
    50 00002902 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    51 00002906 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    52 0000290C 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    53 00002913 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    54 00002917 C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    55 0000291A 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    56 0000291E 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    57 00002922 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    58 00002924 488D0D9A000000      <1>     lea rcx, .msdTable
    59 0000292B 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    60 0000292F 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    61 00002931 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    62 00002933 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    63 00002936 FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    64                              <1> .msdDriverExit:
    65 00002938 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    66 0000293E 4158                <1>     pop r8
    67 00002940 5D                  <1>     pop rbp
    68 00002941 5F                  <1>     pop rdi
    69 00002942 5E                  <1>     pop rsi
    70 00002943 5A                  <1>     pop rdx
    71 00002944 59                  <1>     pop rcx
    72 00002945 5B                  <1>     pop rbx
    73 00002946 58                  <1>     pop rax
    74 00002947 C3                  <1>     ret
    75                              <1> 
    76                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    77 00002948 4889FB              <1>     mov rbx, rdi
    78 0000294B 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    79 0000294E 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    80 00002950 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    81                              <1> ;Now fall through to general error
    82                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    83 00002953 B401                <1>     mov ah, 01h
    84 00002955 CD33                <1>     int 33h ;Read status of last operation
    85 00002957 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    86 0000295A B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    87 0000295C 7460                <1>     je .msdWriteErrorCode 
    88 0000295E B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    89 00002960 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    90 00002963 7459                <1>     je .msdWriteErrorCode 
    91 00002965 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    92 00002968 7454                <1>     je .msdWriteErrorCode
    93                              <1> ;Device Not Ready
    94 0000296A B002                <1>     mov al, 02h  ;Device not ready code
    95 0000296C 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    96 0000296F 744D                <1>     je .msdWriteErrorCode
    97 00002971 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    98 00002975 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    99                              <1> ;Write Protected
   100 00002979 30C0                <1>     xor al, al
   101 0000297B 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
   102 00002980 743C                <1>     je .msdWriteErrorCode
   103                              <1> ;CRC Error
   104 00002982 B004                <1>     mov al, 04h     ;CRC error code
   105 00002984 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
   106 00002989 7433                <1>     je .msdWriteErrorCode
   107 0000298B 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
   108 00002990 742C                <1>     je .msdWriteErrorCode
   109 00002992 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   110 00002997 7425                <1>     je .msdWriteErrorCode
   111                              <1> ;Seek Error
   112 00002999 B006                <1>     mov al, 06h     ;Seek error code
   113 0000299B 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   114 0000299E 741E                <1>     je .msdWriteErrorCode
   115                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   116                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   117 000029A0 B007                <1>     mov al, 07h
   118 000029A2 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   119 000029A5 7417                <1>     je .msdWriteErrorCode
   120                              <1> ;Sector Not Found
   121 000029A7 B008                <1>     mov al, 08h     ;Sector not found code
   122 000029A9 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   123 000029AC 7410                <1>     je .msdWriteErrorCode
   124                              <1> ;Write faults
   125 000029AE B00A                <1>     mov al, 0Ah     ;Write fault
   126 000029B0 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   127 000029B3 7409                <1>     je .msdWriteErrorCode
   128                              <1> ;Read faults
   129 000029B5 B00B                <1>     mov al, 0Bh     ;Read fault
   130 000029B7 80F911              <1>     cmp cl, 11h     ;Read error
   131 000029BA 7402                <1>     je .msdWriteErrorCode
   132                              <1> ;General Errors
   133 000029BC B00C                <1>     mov al, 0Ch     ;Everything else is general error
   134                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   135 000029BE B480                <1>     mov ah, 80h ;Set error bit
   136 000029C0 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   137 000029C4 C3                  <1>     ret ;Return to set done bit
   138                              <1> .msdTable:
   139 000029C5 0000                <1>     dw 0                            ;Function 0
   140 000029C7 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   141 000029C9 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   142 000029CB 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   143 000029CD 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   144 000029CF 0000                <1>     dw 0                            ;Function 5
   145 000029D1 0000                <1>     dw 0                            ;Function 6
   146 000029D3 0000                <1>     dw 0                            ;Function 7
   147 000029D5 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   148 000029D7 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   149 000029D9 0000                <1>     dw 0                            ;Function 10
   150 000029DB 0000                <1>     dw 0                            ;Function 11
   151 000029DD C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   152 000029DF D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   153 000029E1 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   154 000029E3 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   155 000029E5 0000                <1>     dw 0                            ;Function 16
   156 000029E7 0000                <1>     dw 0                            ;Function 17
   157 000029E9 0000                <1>     dw 0                            ;Function 18
   158 000029EB 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   159 000029ED 0000                <1>     dw 0                            ;Function 20
   160 000029EF 0000                <1>     dw 0                            ;Function 21
   161 000029F1 0000                <1>     dw 0                            ;Function 22
   162 000029F3 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   163 000029F5 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   164                              <1> 
   165                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   166                              <1> .msdMedChk:          ;Function 1
   167 000029F7 B005                <1>     mov al, 05h ;Bad request structure length
   168 000029F9 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   169 000029FC 75C0                <1>     jne .msdWriteErrorCode
   170                              <1> 
   171 000029FE 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   172 00002A03 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   173 00002A0A 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   174 00002A0D F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   175 00002A10 753F                <1>     jnz .mmcNoChange
   176                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   177 00002A12 B416                <1>     mov ah, 16h 
   178 00002A14 CD33                <1>     int 33h
   179 00002A16 0F8237FFFFFF        <1>     jc .msdGenDiskError
   180 00002A1C 80FC80              <1>     cmp ah, 80h
   181 00002A1F 740E                <1>     je .mmcNoChangeLine
   182 00002A21 80FC86              <1>     cmp ah, 86h
   183 00002A24 7409                <1>     je .mmcNoChangeLine
   184 00002A26 84E4                <1>     test ah, ah ;No change?
   185 00002A28 7427                <1>     jz .mmcNoChange
   186 00002A2A F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   187 00002A2D 750D                <1>     jnz .mmcChange
   188                              <1> ;If nothing, fall through and test manually, should never happen though
   189                              <1> .mmcNoChangeLine:
   190                              <1> ;Now we test Media Descriptor
   191 00002A2F 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   192 00002A34 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   193 00002A37 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   194 00002A3A 7410                <1>     je .mmcUnsure
   195                              <1> .mmcChange:
   196 00002A3C C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   197 00002A40 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   198 00002A47 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   199                              <1>     ;Check here if there were any open handles on the device when it was changed
   200 00002A4B C3                  <1>     ret
   201                              <1> .mmcUnsure:
   202 00002A4C C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   203 00002A50 C3                  <1>     ret
   204                              <1> .mmcNoChange:
   205 00002A51 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   206 00002A55 C3                  <1>     ret
   207                              <1> 
   208                              <1> 
   209                              <1> .msdBuildBPB:        ;Function 2
   210 00002A56 B005                <1>     mov al, 05h ;Bad request structure length
   211 00002A58 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   212 00002A5B 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   213                              <1> 
   214 00002A61 4889DE              <1>     mov rsi, rbx
   215 00002A64 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   216 00002A69 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   217 00002A70 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   218 00002A73 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   219 00002A77 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   220 00002A79 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   221 00002A7C B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   222 00002A81 CD33                <1>     int 33h
   223 00002A83 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   224                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   225 00002A89 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   226 00002A8D 7418                <1>     je .mbbpb0
   227 00002A8F 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   228 00002A93 7412                <1>     je .mbbpb0
   229 00002A95 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   230 00002A99 740C                <1>     je .mbbpb0
   231 00002A9B 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   232 00002A9F B007                <1>     mov al, 07h ;Unknown media error code
   233 00002AA1 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   234                              <1> .mbbpb0:
   235 00002AA7 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   236 00002AAA 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   237 00002AAF 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   238 00002AB6 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   239 00002ABA 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   240 00002ABD 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   241 00002AC1 B90F000000          <1>     mov ecx, bpbEx_size/8
   242 00002AC6 F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   243 00002AC9 C3                  <1>     ret
   244                              <1> .msdIOCTLRead:       ;Function 3, returns done
   245 00002ACA B005                <1>     mov al, drvBadDrvReq
   246 00002ACC 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   247 00002ACF 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   248 00002AD5 C3                  <1>     ret
   249                              <1> .msdRead:            ;Function 4
   250                              <1> ;Will read one sector at a time.
   251 00002AD6 B005                <1>     mov al, 05h ;Bad request structure length
   252 00002AD8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   253 00002ADB 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   254                              <1> 
   255 00002AE1 4889DF              <1>     mov rdi, rbx
   256 00002AE4 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   257                              <1> .msdr0:
   258 00002AE6 B682                <1>     mov dh, 82h ;LBA Read Sectors
   259 00002AE8 E841010000          <1>     call .msdBlkIOCommon
   260 00002AED 0F8255FEFFFF        <1>     jc .msdIOError
   261 00002AF3 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   262 00002AFB 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   263 00002B03 FFC6                <1>     inc esi
   264 00002B05 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   265 00002B08 75DC                <1>     jne .msdr0
   266 00002B0A 4889FB              <1>     mov rbx, rdi
   267 00002B0D C3                  <1>     ret
   268                              <1> .msdWrite:           ;Function 8
   269                              <1> ;Will write one sector at a time.
   270 00002B0E B005                <1>     mov al, 05h ;Bad request structure length
   271 00002B10 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   272 00002B13 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   273                              <1> 
   274 00002B19 4889DF              <1>     mov rdi, rbx
   275 00002B1C 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   276                              <1> .msdw0:
   277 00002B1E B683                <1>     mov dh, 83h ;LBA Write Sectors
   278 00002B20 E809010000          <1>     call .msdBlkIOCommon
   279 00002B25 0F821DFEFFFF        <1>     jc .msdIOError
   280 00002B2B 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   281 00002B33 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   282 00002B3B FFC6                <1>     inc esi
   283 00002B3D 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   284 00002B40 75DC                <1>     jne .msdw0
   285 00002B42 4889FB              <1>     mov rbx, rdi
   286 00002B45 C3                  <1>     ret
   287                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   288                              <1> ;Will write one sector at a time and then verify it.
   289 00002B46 B005                <1>     mov al, 05h ;Bad request structure length
   290 00002B48 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   291 00002B4B 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   292                              <1> 
   293 00002B51 4889DF              <1>     mov rdi, rbx
   294 00002B54 31F6                <1>     xor esi, esi  ;Set counter to zero
   295                              <1> .msdwv0:
   296 00002B56 B683                <1>     mov dh, 83h ;LBA Write Sectors
   297 00002B58 E8D1000000          <1>     call .msdBlkIOCommon
   298 00002B5D 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   299 00002B63 B684                <1>     mov dh, 84h ;LBA Verify Sectors
   300 00002B65 E8C4000000          <1>     call .msdBlkIOCommon
   301 00002B6A 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   302 00002B70 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   303 00002B78 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   304 00002B80 FFC6                <1>     inc esi
   305 00002B82 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   306 00002B85 75CF                <1>     jne .msdwv0
   307 00002B87 4889FB              <1>     mov rbx, rdi
   308 00002B8A C3                  <1>     ret
   309                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   310 00002B8B B005                <1>     mov al, drvBadDrvReq
   311 00002B8D 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   312 00002B90 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   313                              <1> 
   314 00002B96 C3                  <1>     ret
   315                              <1> .msdDevOpen:         ;Function 13
   316 00002B97 B005                <1>     mov al, drvBadDrvReq
   317 00002B99 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   318 00002B9C 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   319                              <1> 
   320 00002BA2 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   321 00002BA7 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   322 00002BAE FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   323 00002BB1 C3                  <1>     ret
   324                              <1> .msdDevClose:        ;Function 14
   325 00002BB2 B005                <1>     mov al, drvBadDrvReq
   326 00002BB4 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   327 00002BB7 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   328                              <1> 
   329 00002BBD 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   330 00002BC2 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   331 00002BC9 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   332 00002BCC C3                  <1>     ret
   333                              <1> .msdRemovableMedia:  ;Function 15
   334 00002BCD B005                <1>     mov al, drvBadDrvReq
   335 00002BCF 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   336 00002BD2 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   337                              <1> 
   338 00002BD8 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   339 00002BDD 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   340 00002BE4 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   341 00002BE7 B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   342 00002BEC 31D2                <1>     xor edx, edx    ;Busy bit clear
   343 00002BEE A880                <1>     test al, 80h
   344 00002BF0 0F44CA              <1>     cmovz ecx, edx
   345 00002BF3 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   346 00002BF7 C3                  <1>     ret
   347                              <1> .msdGenericIOCTL:    ;Function 19
   348 00002BF8 B005                <1>     mov al, drvBadDrvReq
   349 00002BFA 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   350 00002BFD 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   351                              <1> 
   352 00002C03 C3                  <1>     ret
   353                              <1> .msdGetLogicalDev:   ;Function 23
   354 00002C04 B005                <1>     mov al, drvBadDrvReq
   355 00002C06 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   356 00002C09 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   357                              <1> 
   358 00002C0F 8A0541000000        <1>     mov al, byte [.msdCurDev]
   359 00002C15 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   360 00002C18 C3                  <1>     ret
   361                              <1> .msdSetLogicalDev:   ;Function 24
   362 00002C19 B005                <1>     mov al, drvBadDrvReq
   363 00002C1B 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   364 00002C1E 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   365                              <1> 
   366 00002C24 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   367 00002C27 880529000000        <1>     mov byte [.msdCurDev], al
   368 00002C2D C3                  <1>     ret
   369                              <1> 
   370                              <1> .msdBlkIOCommon:  ;Does block IO
   371                              <1> ;Called with rdi containing old rbx value and ah with function number
   372                              <1> ;rbp points to bpb
   373                              <1> ;Error handled by caller
   374                              <1> ;Sector count handled by caller
   375                              <1> ;Called with dh = BIOS function number
   376 00002C2E 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   377 00002C33 8A90[572C0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   378 00002C39 31C9                <1>     xor ecx, ecx
   379 00002C3B 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   380 00002C3E 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   381 00002C42 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   382 00002C46 88F4                <1>     mov ah, dh
   383 00002C48 B001                <1>     mov al, 01h ;Do one sector at a time 
   384 00002C4A CD33                <1>     int 33h
   385 00002C4C C3                  <1>     ret
   386                              <1> 
   387 00002C4D 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   388                              <1> ;LASTDRIVE default is 5
   389                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   390                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   391 00002C56 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   392                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   393 00002C57 FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   394 00002C5C 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   395 00002C61 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   395 00002C6A 000000000000000000- <1>
   395 00002C73 000000000000000000- <1>
   395 00002C7C 000000000000000000- <1>
   395 00002C85 00000000            <1>
   396 00002C89 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   396 00002C92 000000000000000000- <1>
   396 00002C9B 000000000000000000- <1>
   396 00002CA4 000000000000000000- <1>
   396 00002CAD 000000000000000000- <1>
   396 00002CB6 000000000000000000- <1>
   396 00002CBF 000000000000000000- <1>
   396 00002CC8 000000000000000000- <1>
   396 00002CD1 000000000000000000- <1>
   396 00002CDA 000000000000000000- <1>
   396 00002CE3 000000000000000000- <1>
   396 00002CEC 000000000000000000- <1>
   396 00002CF5 000000000000000000- <1>
   396 00002CFE 000000000000000000- <1>
   396 00002D07 000000000000000000- <1>
   396 00002D10 000000000000000000- <1>
   396 00002D19 000000000000000000- <1>
   396 00002D22 000000000000000000- <1>
   396 00002D2B 000000000000000000- <1>
   396 00002D34 000000000000000000- <1>
   396 00002D3D 000000000000000000- <1>
   396 00002D46 000000000000000000- <1>
   396 00002D4F 000000000000000000- <1>
   396 00002D58 000000000000000000- <1>
   396 00002D61 000000000000000000- <1>
   396 00002D6A 000000000000000000- <1>
   396 00002D73 000000000000000000- <1>
   396 00002D7C 000000000000000000- <1>
   396 00002D85 000000000000000000- <1>
   396 00002D8E 000000000000000000- <1>
   396 00002D97 000000000000000000- <1>
   396 00002DA0 000000000000000000- <1>
   396 00002DA9 000000000000000000- <1>
   396 00002DB2 000000000000000000- <1>
   396 00002DBB 000000000000000000- <1>
   396 00002DC4 000000000000000000- <1>
   396 00002DCD 000000000000000000- <1>
   396 00002DD6 000000000000000000- <1>
   396 00002DDF 000000000000000000- <1>
   396 00002DE8 000000000000000000- <1>
   396 00002DF1 000000000000000000- <1>
   396 00002DFA 000000000000000000- <1>
   396 00002E03 000000000000000000- <1>
   396 00002E0C 000000000000000000- <1>
   396 00002E15 000000000000000000- <1>
   396 00002E1E 000000000000000000- <1>
   396 00002E27 000000000000000000- <1>
   396 00002E30 000000000000000000- <1>
   396 00002E39 000000000000000000- <1>
   396 00002E42 000000000000000000- <1>
   396 00002E4B 000000000000000000- <1>
   396 00002E54 000000000000000000- <1>
   396 00002E5D 000000000000000000- <1>
   396 00002E66 000000000000000000- <1>
   396 00002E6F 000000000000000000- <1>
   396 00002E78 000000000000000000- <1>
   396 00002E81 000000000000000000- <1>
   396 00002E8A 000000000000000000- <1>
   396 00002E93 000000000000000000- <1>
   396 00002E9C 000000000000000000- <1>
   396 00002EA5 000000000000000000- <1>
   396 00002EAE 000000000000000000- <1>
   396 00002EB7 000000000000000000- <1>
   396 00002EC0 000000000000000000- <1>
   396 00002EC9 000000000000000000- <1>
   396 00002ED2 000000000000000000- <1>
   396 00002EDB 000000000000        <1>
   397                              <1> 
   398                              <1> endptr equ $
    36                                  Segment dynamicDataArea nobits valign=10h vfollows=resSeg
    37                                  ;Paragraph alignment
    38                                  %include "./Source/BSS/dosDynaDataArea.asm"
    39                              <1> ;This is the scratch space allocated by DOS. This also forms the start of 
    40                              <1> ; the MCB chain!
    41                              <1> ddaStart:
    42 00000000 <res 10h>           <1> dosMCB          resb mcb_size
    43                              <1> 
    44                              <1> ;Create SFT header and corresponding array of five default sft entries
    45 00000010 <res Ah>            <1> firstSftHeader  resb sfth_size
    46 0000001A <res 43h>           <1> firstSft        resb sft_size
    47 0000005D <res 43h>           <1> secondSft       resb sft_size
    48 000000A0 <res 43h>           <1> thirdSft        resb sft_size
    49 000000E3 <res 43h>           <1> fourthSft       resb sft_size
    50 00000126 <res 43h>           <1> fifthSft        resb sft_size
    51                              <1> 
    52                              <1> ;Create DPB chain of first 5 available DPB slots
    53                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    54 00000169 <res 34h>           <1> firstDPB        resb dpb_size
    55 0000019D <res 34h>           <1> secondDPB       resb dpb_size
    56                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    57                              <1> ;Always jettison this space
    58 000001D1 <res 34h>           <1> thirdDPB        resb dpb_size
    59 00000205 <res 34h>           <1> fourthDPB       resb dpb_size
    60 00000239 <res 34h>           <1> fifthDPB        resb dpb_size 
    61                              <1> 
    62                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    63                              <1> ;Replace once CONFGI.SYS has been read
    64 0000026D <res 5Bh>           <1> initCDS         resb cds_size 
    65                              <1> 
    66                              <1> 
    67 000002C8 <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    68 000002E8 <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    69                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    70                              <1> dynamicDataAreaLength equ $ - ddaStart
