     1                                  [map all ./Listings/SCPDOS/scpdos.map]
     2                                  [DEFAULT REL]
     3                                  BITS 64
     4                                  ;Defs and strucs
     5                                  %include "./Source/Include/driverStruc.inc"
     6                              <1> 
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     9                              <1> ; device driver related structures.                     ;
    10                              <1> ;-------------------------------------------------------;
    11                              <1> 
    12                              <1> struc drvHdr  ;Device Driver Header for character and block devices
    13                              <1> 
    14 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    15 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    16 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    17 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    18 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    19                              <1> 
    20                              <1> endstruc
    21                              <1> 
    22                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    23                              <1> 
    24                              <1>     .hdrlen resb 1  ;Length of the request header
    25                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    26                              <1>     .cmdcde resb 1  ;Command code
    27                              <1>     .status resw 1  ;Status word
    28                              <1>     .devptr resq 1  ;Device queue pointer field
    29                              <1> 
    30                              <1> %endmacro
    31                              <1> ;Command Code equates
    32                              <1>     drvINIT         equ 0
    33                              <1>     drvMEDCHK       equ 1
    34                              <1>     drvBUILDBPB     equ 2
    35                              <1>     drvIOCTLREAD    equ 3
    36                              <1>     drvREAD         equ 4
    37                              <1>     drvNONDESTREAD  equ 5
    38                              <1>     drvINSTATUS     equ 6
    39                              <1>     drvFLUSHINBUF   equ 7
    40                              <1>     drvWRITE        equ 8
    41                              <1>     drvWRITEVERIFY  equ 9
    42                              <1>     drvOUTSTATUS    equ 10
    43                              <1>     drvFLUSHOUTBUF  equ 11
    44                              <1>     drvIOCTLWRITE   equ 12
    45                              <1>     drvOPEN         equ 13
    46                              <1>     drvCLOSE        equ 14
    47                              <1>     drvREMMEDCHECK  equ 15
    48                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    49                              <1>     drvIOCTL        equ 19
    50                              <1>     drvGETDRVMAP    equ 23
    51                              <1>     drvSETDRVMAP    equ 24
    52                              <1>     
    53                              <1> ;Driver Error equates 
    54                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    55                              <1>     drvBadUnit      equ 1   ;Unknown unit
    56                              <1>     drvNotReady     equ 2   ;Device not ready
    57                              <1>     drvBadCmd       equ 3   ;Unknown command
    58                              <1>     drvCRCErr       equ 4   ;CRC Error
    59                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    60                              <1>     drvBadSeek      equ 6   ;Seek error
    61                              <1>     drvBadMed       equ 7   ;Unknown media
    62                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    63                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    64                              <1>     drvWriteFault   equ 10  ;Write Fault
    65                              <1>     drvReadFault    equ 11  ;Read Fault
    66                              <1>     drvGenFault     equ 12  ;General Fault
    67                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    68                              <1> 
    69                              <1> ;Drive structures
    70                              <1> struc drvReqHdr
    71                              <1>     drvReqHdrM
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    72                              <1> endstruc
    73                              <1> 
    74                              <1> struc initReqPkt  ;Init Request Packet
    75                              <1> 
    76                              <1>     drvReqHdrM   ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    77 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
    78 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
    79 00000016 ????????????????    <1>     .optptr resq 1  ;Pointer to the BPB array (block) or optional args (char)
    80 0000001E ??                  <1>     .drvnum resb 1  ;Drive number
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
    85                              <1> 
    86                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    87 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    88 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
    89 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
    90                              <1> 
    91                              <1> endstruc
    92                              <1> 
    93                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
    94                              <1> 
    95                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
    96 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
    97 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
    98 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
    99                              <1> 
   100                              <1> endstruc
   101                              <1> 
   102                              <1> struc ioReqPkt   ;IO Request Packet
   103                              <1> 
   104                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   105 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   106 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   107 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   108 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   109 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc nonDestInNoWaitReqPkt    ;Nondestructive Input No Wait Request Packet
   114                              <1>     
   115                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   116 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc statusReqPkt   ;Status Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   123                              <1> 
   124                              <1> endstruc
   125                              <1> 
   126                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   127                              <1> 
   128                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   129                              <1>      
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc openReqPkt ;Open Device Request Packet
   133                              <1> 
   134                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   135                              <1>      
   136                              <1> endstruc
   137                              <1> 
   138                              <1> struc closeReqPkt ;Close Device Request Packet
   139                              <1> 
   140                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   141                              <1>      
   142                              <1> endstruc
   143                              <1> 
   144                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   145                              <1> 
   146                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   147                              <1>      
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   151                              <1> 
   152                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   153 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   154 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   155 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   156 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   157 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   162                              <1>     
   163                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   164                              <1> 
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   168                              <1>     
   169                              <1>     drvReqHdrM    ;Common Driver Header Macro
    23                              <2> 
    24 00000000 ??                  <2>  .hdrlen resb 1
    25 00000001 ??                  <2>  .unitnm resb 1
    26 00000002 ??                  <2>  .cmdcde resb 1
    27 00000003 ????                <2>  .status resw 1
    28 00000005 ????????????????    <2>  .devptr resq 1
    29                              <2> 
   170                              <1> 
   171                              <1> endstruc
     6                                  %include "./Source/Include/fatStruc.inc"
     7                              <1> 
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ; This include file contains miscellaneous FAT driver   ;
    10                              <1> ; structures. exFAT will have it's own files at a later ;
    11                              <1> ; stage.                                                ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> ;-------------------------------------------------------;
    14                              <1> ;-------------------------------------------------------;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    17                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    18                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    19                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    20                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    21                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    22                              <1> ;-------------------------------------------------------;
    23                              <1> 
    24                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    25                              <1> 
    26 00000000 ??????              <1>     .jmpBoot    resb 3 
    27 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    28 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    29 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    30 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    31 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    32 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    33 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    34 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    35 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    36 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    37 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    38 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    39 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    40                              <1> 
    41 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    42 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    43 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    44 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    45 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    46 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    47                              <1> 
    48                              <1> endstruc
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    51                              <1> 
    52 00000000 ??????              <1>     .jmpBoot    resb 3
    53 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    54 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    55 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    56 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    57 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    58 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    59 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    60 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    61 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    62 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    63 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    64 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    65 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    66                              <1> 
    67 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    68 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    69 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    70 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    71 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    72 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    73 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    74                              <1> 
    75 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    76 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    77 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    78 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    79 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    80 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    81                              <1> 
    82                              <1> endstruc
    83                              <1> 
    84                              <1> struc mbr
    85 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    86 000001B8 ????????            <1>     .diskID     resb 4
    87 000001BC ????                <1>     .reserved   resb 2
    88 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    89 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    90 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    91 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    92 000001FE ????                <1>     .mbrSig     resb 2
    93                              <1> endstruc
    94                              <1> 
    95                              <1> struc mbrEntry
    96 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    97 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    98 00000004 ??                  <1>     .ptnType    resb 1
    99 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
   100 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
   101 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc ebr
   105 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   106 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   107 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   108 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   109 000001FE ????                <1>     .mbrSig     resb 2
   110                              <1> endstruc
   111                              <1> 
   112                              <1> 
   113                              <1> struc fatDirEntry
   114                              <1> 
   115 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name
   116 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   121 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date
   122 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   127                              <1> 
   128                              <1> endstruc
   129                              <1> ;Directory attribute equates
   130                              <1>     dirReadOnly     equ 01h
   131                              <1>     dirHidden       equ 02h
   132                              <1>     dirSystem       equ 04h
   133                              <1>     dirVolumeID     equ 08h
   134                              <1>     dirDirectory    equ 10h
   135                              <1>     dirArchive      equ 20h
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1> 
   138                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   139                              <1> 
   140 00000000 ??????              <1>     .jmpBoot                resb 3 
   141 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   142 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   143 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   144 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   145 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   146 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   147 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   148 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   149 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   150 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   151 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   152 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   153 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   154 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   155 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   156 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   157 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   158 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   159                              <1> 
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc FSInfo
   163                              <1> 
   164 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   165 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   166 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   167 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   168 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   169 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   170 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   171                              <1> 
   172                              <1> endstruc
     7                                  %include "./Source/Include/dosStruc.inc"
     8                              <1> 
     9                              <1> ;-------------------------------------------------------;
    10                              <1> ; This include file contains miscellaneous internal     ;
    11                              <1> ; SCP/DOS structures.                                   ;
    12                              <1> ;-------------------------------------------------------;
    13                              <1> 
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    16                              <1> ; its file system structure. This is used to locate files and structures
    17                              <1> ; on the device itself and to translate file requests to cluster chains
    18                              <1> ; to LBAs to pass to the disk driver..
    19                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    20                              <1> ; drivers Initialise routine has been called.
    21                              <1> ;------------------------------------------------------------------------;
    22                              <1> struc dpb        ;Drive Parameter Block
    23                              <1> 
    24 00000000 ??                  <1>     .bDriveNumber            resb 1  ;Drive number (0=A, 1=B ...) x
    25 00000001 ??                  <1>     .bUnitNumber             resb 1  ;Unit number in device x
    26 00000002 ??                  <1>     .bBytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)x
    27 00000003 ??                  <1>     .bMaxSectorInCluster     resb 1  ;(Maximum sector in cluster) - 1 x
    28 00000004 ??                  <1>     .bSectorsPerClusterShift resb 1  ;Sectors per cluster exponent x
    29 00000005 ????                <1>     .wFAToffset              resw 1  ;Number of reserved sectors in partition x
    30 00000007 ??                  <1>     .bNumberOfFATs           resb 1  ;Number of FATs x
    31 00000008 ????                <1>     .wNumberRootDirSectors   resw 1  ;In sectors, this is 0 for FAT32 formats x
    32 0000000A ????????            <1>     .dClusterHeapOffset      resd 1  ;Start sector of data area x
    33 0000000E ????????            <1>     .dClusterCount           resd 1  ;Total number of clusters in data area x
    34 00000012 ????????            <1>     .dFATlength              resd 1  ;FAT length, in sectors x
    35 00000016 ????????            <1>     .dFirstUnitOfRootDir     resd 1  
    36                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)x
    37 0000001A ????????????????    <1>     .qDriverHeaderPtr        resq 1  ;Pointer to device driver header x
    38 00000022 ??                  <1>     .bMediaDescriptor        resb 1  ;Media descriptor x
    39 00000023 ??                  <1>     .bAccessFlag             resb 1  ;Access Flag (0 if accessed, else -1) x
    40 00000024 ????????????????    <1>     .qNextDPBPtr             resq 1  ;Pointer to next DPB, -1 if at end
    41 0000002C ????????            <1>     .dFirstFreeCluster       resd 1  ;Starting cluster of free space search x
    42 00000030 ????????            <1>     .dNumberOfFreeClusters   resd 1  ;Number of free clusters, -1 unknown x
    43                              <1> 
    44                              <1> endstruc
    45                              <1> 
    46                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    47                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    48                              <1> ;------------------------------------------------------------------------;
    49                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    50                              <1> ; All disk pathing requests go via the CDS for that drive.
    51                              <1> ; The default drive is the last accessed drive, this number is stored
    52                              <1> ; in the DOS data area.
    53                              <1> ; The CDS is stored as an array with the offset into the array being 
    54                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    55                              <1> ;
    56                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    57                              <1> ;------------------------------------------------------------------------;
    58                              <1> struc cds       ;Current Directory structure
    59 00000000 <res 43h>           <1>     .sCurrentPath        resb 67    ;Current Directory Path String
    60 00000043 ????                <1>     .wFlags              resw 1 ;CDS Flags - 
    61 00000045 ????????????????    <1>     .qDPBPtr             resq 1 ;Ptr to the DPB of the dev using this CDS
    62 0000004D ????????            <1>     .dStartCluster       resd 1 ;Starting cluster of the directory on disk
    63 00000051 ????????????????    <1>     .qReserved           resq 1 ;Reserved for future expansions
    64 00000059 ????                <1>     .wBackslashOffset    resw 1 ;How many chars to start of current dir in the 
    65                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    66                              <1> ; another, we save the number of chars to skip to that deep level).
    67                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    68                              <1> ; Flags: Bit 15 set = Network drive
    69                              <1> ;        Bit 14 set = Physical drive
    70                              <1> ;        Bit 13 set = JOIN'ed drive
    71                              <1> ;        Bit 12 set = SUBST'ed drive
    72                              <1> ;        Bit 7  set = Redirected, not network, drive (This is how MSCDEX worked)
    73                              <1> endstruc
    74                              <1> ;CDS equates
    75                              <1>     cdsNetDrive     equ 8000h
    76                              <1>     cdsPhysDrive    equ 4000h
    77                              <1>     cdsJoinDrive    equ 2000h
    78                              <1>     cdsSubstDrive   equ 1000h
    79                              <1>     cdsRedirDrive   equ 0080h
    80                              <1> ;------------------------------------------------------------------------;
    81                              <1> ; The SFT is a way to allow applications to open file handles to files 
    82                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    83                              <1> ; under the first header, and then a second header will be linked to the 
    84                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    85                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    86                              <1> ; using the FCBS= command. Default FCBS=5.
    87                              <1> ;
    88                              <1> ; A file handle describes the file, and the location within the file that
    89                              <1> ; we are reading. The file handle can be manipulated without the file
    90                              <1> ; being in memory, thus allowing the user to access data without needing 
    91                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    92                              <1> ; accessing devices, by treating them as files with their drivers 
    93                              <1> ; responding and translating the manipulations of the file handle itself.
    94                              <1> ; Neither the driver nor the application should see or use the SFT for
    95                              <1> ; the handle, as it is subject to change (and will change when file 
    96                              <1> ; sharing provisions are included). The DOS will make requests to the 
    97                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    98                              <1> ; track of the information in the SFT entry for that handle. 
    99                              <1> ;
   100                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   101                              <1> ; can point to the same file. It all depends on what the applications 
   102                              <1> ; want to do with the File.
   103                              <1> ;
   104                              <1> ; !!!!IMPORTANT!!!!
   105                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   106                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   107                              <1> ;
   108                              <1> ;Each SFT may look like this:
   109                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   110                              <1> ;            |                |
   111                              <1> ;       wNumFiles*sft    wNumFiles*sft
   112                              <1> ;
   113                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   114                              <1> ; System FCBs.
   115                              <1> ;
   116                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   117                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   118                              <1> ;
   119                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   120                              <1> ; DEFAULT FCBS=5, MINIMUM FCBS=5
   121                              <1> ;------------------------------------------------------------------------;
   122                              <1> struc sfth   ;System file table header
   123                              <1> ; This is the SFT header.
   124                              <1> ; This structure comes before the start of the first file in the array/table.
   125 00000000 ????????????????    <1>     .qNextSFTPtr resq 1    ;Pointer to the next SFT
   126 00000008 ????                <1>     .wNumFiles   resw 1    ;Number of files in this table
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc sft
   130                              <1> ;This is the file struc itself
   131 00000000 ????                <1>     .wNumHandles resw 1    ;Number of handles pointing to this file
   132 00000002 ????                <1>     .wOpenMode   resw 1    ;File access permissions and behvaiours
   133 00000004 ??                  <1>     .bFileAttrib resb 1    ;Regular File Attributes
   134 00000005 ????                <1>     .wDeviceInfo resw 1    ;Includes Device number
   135 00000007 ????????????????    <1>     .qPtr        resq 1    ;IF char, ptr to device driver, ELSE DPBptr
   136 0000000F ????????            <1>     .dStartClust resd 1    ;Start cluster of file
   137 00000013 ????                <1>     .wTime       resw 1    ;File Time
   138 00000015 ????                <1>     .wDate       resw 1    ;File Date
   139 00000017 ????????            <1>     .dFileSize   resd 1    ;File Size, in bytes
   140 0000001B ????????            <1>     .dCurntOff   resd 1    ;Current Offset in file, in bytes
   141 0000001F ????                <1>     .wRelSect    resw 1    ;Rel sector in the last cluster accessed
   142 00000021 ????????            <1>     .dDirSect    resd 1    ;Rel number of sector containing directory entry 
   143 00000025 ??                  <1>     .bNumDirEnt  resb 1    ;Directory entry within dir sector (byte offset/32)
   144 00000026 <res Bh>            <1>     .sFileName   resb 11   ;8.3 Filename
   145 00000031 ????????????????    <1>     .qPSPOwner   resq 1    ;Addr of PSP of program which first opened this file
   146 00000039 ????????            <1>     .dAbsClusr   resd 1    ;Absolute cluster of last cluster accessed
   147                              <1> endstruc
   148                              <1> ;Open Mode equates
   149                              <1> ;Access modes   Bits[2:0]
   150                              <1>     ReadAccess      equ 0h
   151                              <1>     WriteAccess     equ 1h
   152                              <1>     RWAccess        equ 2h
   153                              <1> ;Bit 3 reserved 0
   154                              <1> ;Sharing modes  Bits[6:4]
   155                              <1>     CompatShare     equ 0h
   156                              <1>     denyRWShare     equ 10h
   157                              <1>     denyWriteShare  equ 20h
   158                              <1>     denyReadShare   equ 30h
   159                              <1>     denyNoneShare   equ 40h
   160                              <1> ;Bit 7 reserved 0
   161                              <1> ;Bits 8-12 reserved 0
   162                              <1> ;Critical Error handling
   163                              <1>     critErrHdl      equ 2000h   ;If set, return error code. If clear, INT 44h
   164                              <1> ;Buffering on writes
   165                              <1>     noBufferWrites  equ 4000h   ;If set, dont buffer writes, always update disk
   166                              <1> ;FCB opened file?
   167                              <1>     FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else SFT
   168                              <1> ;Attribute Byte
   169                              <1>     readOnlyFile    equ 1h
   170                              <1>     hiddenFile      equ 2h
   171                              <1>     systemFile      equ 4h
   172                              <1>     volumeLabel     equ 8h
   173                              <1>     directoryFile   equ 10h ;Directory entry
   174                              <1>     archiveFile     equ 20h
   175                              <1> ;Device Info equates
   176                              <1> ;For a block device, bits [5:0] contain the drive number
   177                              <1>     charDevConIn    equ 1h  ;If set, device is CON input
   178                              <1>     charDevConOut   equ 2h  ;If set, device is CON output
   179                              <1>     charDevNulDev   equ 4h  ;If set, device is NULL device
   180                              <1>     charDevClockDev equ 8h  ;If set, device is CLOCK device
   181                              <1>     charDevFastOut  equ 10h ;If set, device supports INT 49h
   182                              <1>     devBinary       equ 20h ;If set, r/w device in Binary mode!!!
   183                              <1>     charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   184                              <1>     blokDevNotFlush equ 40h ;If set, file not written to disk yet!!!
   185                              <1>     devCharDev      equ 80h ;If set, it is a char device!
   186                              <1>     charDevNetSpool equ 800h    ;If set, device is a network spooler
   187                              <1>     devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   188                              <1>     charDevNamePipe equ 2000h   ;If set, device is a named pipe
   189                              <1>     blokDevDTSet    equ 4000h   ;If set, date and time updated for all i/o
   190                              <1>     devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   191                              <1> ;------------------------------------------------------------------------;
   192                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   193                              <1> ; to an internal buffer, and then copying it to the specified location
   194                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   195                              <1> ; another request for the same sector from the same device is made, so 
   196                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   197                              <1> ; size, selected according to the largest detected sector size during 
   198                              <1> ; the initial loadup.
   199                              <1> ;
   200                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   201                              <1> ;
   202                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   203                              <1> ;------------------------------------------------------------------------;
   204                              <1> 
   205                              <1> struc bufferHdr
   206 00000000 ????????????????    <1>     .nextBufPtr  resq  1   ;Pointer to the next buffer in the chain or -1 at end
   207 00000008 ??                  <1>     .driveNumber resb  1   ;Drive number the buffer is used for (or -1 for free)
   208 00000009 ??                  <1>     .bufferFlags resb  1   ;Standard Flags
   209 0000000A ????????????????    <1>     .bufferLBA   resq  1   ;LBA the buffer contains
   210 00000012 ??                  <1>     .bufFATcopy  resb  1   ;Number of copies of the FAT to write (1 if non-FAT)
   211 00000013 ????????            <1>     .bufFATsize  resd  1   ;Number of sectors per FAT (or 0 if non-FAT)
   212 00000017 ????????????????    <1>     .driveDPBPtr resq  1   ;Pointer to the device DPB block
   213 0000001F ??                  <1>     .reserved    resb  1   ;Alignment byte
   214                              <1>     .dataarea:             ;Points to the start of the data area
   215                              <1> endstruc
   216                              <1> ;Buffer Flag equates
   217                              <1>     dosBuffer   equ 1h  ;DOS data sector in buffer
   218                              <1>     fatBuffer   equ 2h  ;FAT sector in buffer
   219                              <1>     dirBuffer   equ 4h  ;Directory sector in buffer
   220                              <1>     dataBuffer  equ 8h  ;File Data sector in buffer
   221                              <1>     refBuffer   equ 20h ;Data in buffer referenced by an application
   222                              <1>     dirtyBuffer equ 40h ;Data in buffer modified by an application
   223                              <1> ;------------------------------------------------------------------------;
   224                              <1> ; Memory control block for each memory arena
   225                              <1> ;------------------------------------------------------------------------;
   226                              <1> struc mcb
   227 00000000 ??                  <1>     .marker     resb 1  ;M = Member of the MCB chain. Z = Last member
   228 00000001 ????????????????    <1>     .owner      resq 1  ;Owning application PSP or 0 for free space
   229 00000009 ????????            <1>     .blockSize  resd 1  ;Number of contiguous paragraphs owned by this block
   230 0000000D ??????              <1>     .reserved   resb 3  ;Reserved three bytes
   231                              <1>     .program:
   232                              <1> endstruc
   233                              <1> ;MCB equates
   234                              <1> mcbOwnerHole    equ -1  ;Owner = -1 => Memory hole
   235                              <1> mcbOwnerFree    equ 0   ;Owner =  0 => Free and available space
   236                              <1> mcbOwnerDOS     equ 8   ;Owner =  8 => Owned by DOS
   237                              <1> ;Owner = Para aligned address => Owning application PSP
   238                              <1> ;...To consider...
   239                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   240                              <1> 
   241                              <1> ;------------------------------------------------------------------------;
   242                              <1> ; For Int 41h, the callers registers are saved on their stack in the 
   243                              <1> ; following order, thus allowing for return values to be placed in the 
   244                              <1> ; registers by accessing the caller register stack frame.
   245                              <1> ;------------------------------------------------------------------------;
   246                              <1> struc callerFrame
   247 00000000 ????????????????    <1>     .rax    resq 1  ;Bottom of frame, pointer to rax saved in oldRSP
   248 00000008 ????????????????    <1>     .rbx    resq 1    
   249 00000010 ????????????????    <1>     .rcx    resq 1
   250 00000018 ????????????????    <1>     .rdx    resq 1
   251 00000020 ????????????????    <1>     .rsi    resq 1
   252 00000028 ????????????????    <1>     .rdi    resq 1
   253 00000030 ????????????????    <1>     .rbp    resq 1
   254 00000038 ????????????????    <1>     .r8     resq 1  ;To be removed if truly not needed
   255 00000040 ????????????????    <1>     .r9     resq 1
   256                              <1> ;Pushed by Processor when invoked via Interrupt
   257 00000048 ????????????????    <1>     .rip    resq 1
   258 00000050 ????????????????    <1>     .cs     resq 1
   259 00000058 ????????????????    <1>     .flags  resq 1
   260                              <1> endstruc
   261                              <1> 
   262                              <1> %macro pushDOS 0
   263                              <1>     push r9
   264                              <1>     push r8
   265                              <1>     push rbp
   266                              <1>     push rdi
   267                              <1>     push rsi
   268                              <1>     push rdx
   269                              <1>     push rcx
   270                              <1>     push rbx
   271                              <1>     push rax
   272                              <1> %endmacro
   273                              <1> 
   274                              <1> %macro popDOS 0
   275                              <1>     pop rax
   276                              <1>     pop rbx
   277                              <1>     pop rcx
   278                              <1>     pop rdx
   279                              <1>     pop rsi
   280                              <1>     pop rdi
   281                              <1>     pop rbp
   282                              <1>     pop r8
   283                              <1>     pop r9
   284                              <1> %endmacro
   285                              <1> struc fcb
   286                              <1> ;Similar to a DOS 2.0 FCB. Who even used them in DOS 3.x and higher?
   287 00000000 ??                  <1>     .driveNum   resb 1
   288 00000001 ????????????????    <1>     .filename   resb 8
   289 00000009 ??????              <1>     .fileext    resb 3
   290 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
   291                              <1> ;One block consists of 128 records, of size denoted in the below
   292 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
   293 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
   294 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
   295 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
   296 00000018 ??                  <1>     .fcbByte    resb 1  ;Res. byte, bit7 = Logical drive, bit 6 = open file
   297 00000019 ????????            <1>     .cluster    resb 4  ;Res. dword, Current Cluster number on disk
   298 0000001D ??????              <1>     .reserved   resb 3  ;Res. 3 alignment bytes
   299 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
   300 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
   301                              <1>     ;If record size > 64, high byte is ignored.
   302                              <1>     ;Used for random read and write operations to find the right record
   303                              <1> endstruc
   304                              <1> 
   305                              <1> struc psp
   306 00000000 ????                <1>     .return     resb 2  ;Should always be CDh 40h, same place as DOS
   307 00000002 ????????????????    <1>     .startSeg   resq 1  ;Pointer to the start of the PSP
   308 0000000A ????????????????    <1>     .oldInt42h  resq 1  ;Int 42h pointer on overlay load
   309 00000012 ????????????????    <1>     .oldInt43h  resq 1  ;Int 43h pointer on overlay load
   310 0000001A ????????????????    <1>     .oldInt44h  resq 1  ;Int 44h pointer on overlay load
   311 00000022 ????????????????    <1>     .parentPtr  resq 1  ;Pointer to parent process PSP
   312 0000002A <res 14h>           <1>     .jobFileTbl resb 20 ;Main File handle array, JFT
   313 0000003E ????????????????    <1>     .envPtr     resq 1  ;Pointer to the environment
   314 00000046 ????????????????    <1>     .rspPtr     resq 1  ;Pointer to rsp on entry to Int 41h
   315 0000004E ????                <1>     .xtraHdlSz  resw 1  ;Additional File Handle array size, 0 by default
   316 00000050 ??????              <1>     .unixEntry  resb 3  ;Must always be CDh 41h CBh, same place as DOS
   317 00000053 ????????????????    <1>     .prevPSP    resq 1  ;Pointer to the previous PSP in chain
   318 0000005B ??                  <1>     .xtraHdlNum resb 1  ;Lookup number of extra handle array, -1 = unused
   319                              <1> ;Extra handle arrays are grouped into a linked list
   320                              <1> ;The below are in the same place as in DOS
   321 0000005C <res 10h>           <1>     .fcb1       resb 16  ;First FCB
   322 0000006C <res 14h>           <1>     .fcb2       resb 20  ;Second FCB
   323                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   324 00000080 ??                  <1>     .parmList   resb 1   ;Number of characters in command tail
   325 00000081 <res 7Fh>           <1>     .progTail   resb 127 ;Default DTA/Program tail
   326                              <1> endstruc
   327                              <1> 
   328                              <1> struc clkStruc
   329 00000000 ????                <1>     .dateWord   resw 1
   330 00000002 ??                  <1>     .minutes    resb 1
   331 00000003 ??                  <1>     .hours      resb 1
   332 00000004 ??                  <1>     .hseconds   resb 1  ;Hundreths of seconds
   333 00000005 ??                  <1>     .seconds    resb 1
   334                              <1> endstruc
     8                                  Segment .text align=1   ;Init code
     9                                  %include "./Source/Sysinit/sysInit.asm"
    10                              <1> ; We arrive here with the following values in the registers.
    11                              <1> ; rbx =  LBA of first Logical Block after SCP/BIOS
    12                              <1> ; dx  = Int 33h boot device number
    13                              <1> ; fs  = userbase pointer (pointer to first usable block of RAM)
    14                              <1> tempPSP:    ;Here to allow the loader to use Int 41h once it is loaded high
    15 00000000 55AA                <1>     dw 0AA55h           ;Initial signature
    16 00000002 909090909090909090- <1>     db (100h-2) dup (90h)   ;Duplicate NOPs for the PSP
    16 0000000B 909090909090909090- <1>
    16 00000014 909090909090909090- <1>
    16 0000001D 909090909090909090- <1>
    16 00000026 909090909090909090- <1>
    16 0000002F 909090909090909090- <1>
    16 00000038 909090909090909090- <1>
    16 00000041 909090909090909090- <1>
    16 0000004A 909090909090909090- <1>
    16 00000053 909090909090909090- <1>
    16 0000005C 909090909090909090- <1>
    16 00000065 909090909090909090- <1>
    16 0000006E 909090909090909090- <1>
    16 00000077 909090909090909090- <1>
    16 00000080 909090909090909090- <1>
    16 00000089 909090909090909090- <1>
    16 00000092 909090909090909090- <1>
    16 0000009B 909090909090909090- <1>
    16 000000A4 909090909090909090- <1>
    16 000000AD 909090909090909090- <1>
    16 000000B6 909090909090909090- <1>
    16 000000BF 909090909090909090- <1>
    16 000000C8 909090909090909090- <1>
    16 000000D1 909090909090909090- <1>
    16 000000DA 909090909090909090- <1>
    16 000000E3 909090909090909090- <1>
    16 000000EC 909090909090909090- <1>
    16 000000F5 909090909090909090- <1>
    16 000000FE 9090                <1>
    17                              <1> ;First make space for the MCB
    18 00000100 52                  <1>     push rdx    ;Save dl on stack briefly
    19 00000101 B9000100C0          <1>     mov ecx, 0C0000100h ;Read FS MSR
    20 00000106 0F32                <1>     rdmsr
    21 00000108 89D7                <1>     mov edi, edx        ;Get the hi dword, and clear the upper bytes
    22 0000010A 48C1E720            <1>     shl rdi, 20h        ;Shift high
    23 0000010E 89C7                <1>     mov edi, eax        ;Get the low dword in
    24 00000110 4881C710000000      <1>     add rdi, mcb_size   ;Make space for the MCB
    25 00000117 89F8                <1>     mov eax, edi
    26 00000119 4889FA              <1>     mov rdx, rdi
    27 0000011C 48C1EA20            <1>     shr rdx, 20h
    28 00000120 0F30                <1>     wrmsr   ;Write the new value to FS MSR
    29 00000122 5A                  <1>     pop rdx
    30                              <1> ;------------------------------------------------;
    31                              <1> ;              Connect Debugger                  ;
    32                              <1> ;------------------------------------------------;
    33 00000123 B801C50000          <1>     mov eax, 0C501h ;Connect debugger
    34 00000128 CD35                <1>     int 35h
    35                              <1> ;------------------------------------------------;
    36                              <1> ;           Sanitise the data area               ;
    37                              <1> ;------------------------------------------------;
    38 0000012A B9[D4130000]        <1>     mov ecx, dSegLen
    39 0000012F 30C0                <1>     xor al, al
    40 00000131 57                  <1>     push rdi    ;Temp save rdi on the stack
    41 00000132 F3AA                <1>     rep stosb
    42 00000134 5F                  <1>     pop rdi
    43                              <1> 
    44                              <1> ;------------------------------------------------;
    45                              <1> ;          Start saving Basic DOS data           ;
    46                              <1> ;------------------------------------------------;
    47 00000135 64881425[08000000]  <1>     mov byte fs:[bootDrive], dl ;Save the boot drive in memory
    48                              <1> ;Copy DOS to its final resting place
    49 0000013D 6448893C25-         <1>     mov qword fs:[dosSegPtr], rdi 
    49 00000142 [00000000]          <1>
    50 00000146 4889FD              <1>     mov rbp, rdi    ;Save the start of dosSeg in rdx 
    51 00000149 4881C7[D4130000]    <1>     add rdi, dSegLen ;Move destination past end of data area
    52 00000150 488D35(00000000)    <1>     lea rsi, section.resSeg.start  ;Get RIP relative address to copy high
    53 00000157 B900100000          <1>     mov ecx, 1000h
    54 0000015C F348A5              <1>     rep movsq
    55                              <1> 
    56 0000015F CD31                <1>     int 31h ;Get number of Int 33h devices in r8b
    57 00000161 49C1E808            <1>     shr r8, 8   ;Isolate bytes 1 and 2 of r8
    58 00000165 664489C0            <1>     mov ax, r8w
    59 00000169 64882425[09000000]  <1>     mov byte fs:[numRemDrv], ah    ;Save number of physical int 33h removable drvs
    60 00000171 64880425[0A000000]  <1>     mov byte fs:[numFixDrv], al    ;Save number of physical hard drives
    61 00000179 64C60425[9A000000]- <1>     mov byte fs:[lastdrvNum], 5    ;Last drive is by default 5
    61 00000181 05                  <1>
    62 00000182 64C60425[0B000000]- <1>     mov byte fs:[numLogDrv], 0     ;Number of logical drives
    62 0000018A 00                  <1>
    63                              <1>     ;If no detected Int 33h devices, halt 
    64 0000018B 49C1E810            <1>     shr r8, 2*8
    65 0000018F 4584C0              <1>     test r8b, r8b
    66 00000192 0F84ED040000        <1>     jz errorInit
    67                              <1> ;------------------------------------------------;
    68                              <1> ;          Kernel inits and adjustments          ;
    69                              <1> ;------------------------------------------------;
    70                              <1> ;Adjust Int 41h address table
    71                              <1> adjInt41h:
    72 00000198 B96A000000          <1>     mov ecx, kernelDispatchTableL/8 ;Number of elements in table
    73 0000019D 48BB-               <1>     mov rbx, kernelDispatchTable ;Get EA of table
    73 0000019F [0F0F000000000000]  <1>
    74 000001A7 488D5C1D00          <1>     lea rbx, qword [rbp + rbx]    ;Point to the start of the relocated table 
    75                              <1> .ai41h:
    76 000001AC 48012B              <1>     add qword [rbx], rbp    ;Add base address value to entry in reloc table
    77 000001AF 4881C308000000      <1>     add rbx, 8              ;Each entry is size 8
    78 000001B6 FFC9                <1>     dec ecx
    79 000001B8 75F2                <1>     jnz .ai41h  ;Keep looping until all entries have been adjusted
    80                              <1> 
    81                              <1> ;Adjust Interrupt Entries Int 40h-49h
    82                              <1> adjInts:
    83 000001BA B340                <1>     mov bl, 40h
    84 000001BC B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
    85 000001C1 CD35                <1>     int 35h
    86 000001C3 B940000000          <1>     mov ecx, 40h    ;Start from interrupt 40h
    87 000001C8 488D3D1C050000      <1>     lea rdi, intData
    88 000001CF 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
    89                              <1> .ai0:
    90 000001D1 B808F00000          <1>     mov eax, 0F008h ;Set the descriptor
    91 000001D6 488B1F              <1>     mov rbx, qword [rdi]    ;Get address pointed to by rdi
    92 000001D9 4801EB              <1>     add rbx, rbp            ;Add the relocated base to rbx
    93                              <1> .ai1:
    94 000001DC CD35                <1>     int 35h
    95 000001DE 4881C708000000      <1>     add rdi, 8
    96 000001E5 FFC1                <1>     inc ecx
    97 000001E7 81F94A000000        <1>     cmp ecx, 4Ah
    98 000001ED 75E2                <1>     jne .ai0
    99                              <1> 
   100                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   101                              <1> ;    DOS INTERRUPTS CAN BE USED FROM HERE ON     ;
   102                              <1> ;++++++++++++++++++++++++++++++++++++++++++++++++;
   103                              <1> 
   104                              <1> ;Now adjust int 42h 43h and 44h correctly using DOS
   105 000001EF 488D158F040000      <1>     lea rdx, errorInit ;Get segment start address
   106 000001F6 B842250000          <1>     mov eax, 2542h  ;Int 42, set vector
   107 000001FB CD41                <1>     int 41h
   108 000001FD 488D1581040000      <1>     lea rdx, errorInit ;Get segment start address
   109 00000204 B844250000          <1>     mov eax, 2544h
   110 00000209 CD41                <1>     int 41h
   111                              <1> 
   112                              <1> ;------------------------------------------------;
   113                              <1> ;          Driver Adjustments and inits          ;
   114                              <1> ;------------------------------------------------;
   115                              <1> ;Modify the pointers in nData before putting them in the data area
   116 0000020B 48012D29050000      <1>     add qword [nData + drvHdr.nxtPtr], rbp
   117 00000212 48012D2C050000      <1>     add qword [nData + drvHdr.strPtr], rbp
   118 00000219 48012D2D050000      <1>     add qword [nData + drvHdr.intPtr], rbp
   119                              <1> ;Copy the Null driver to its location in Sysvars
   120 00000220 B922000000          <1>     mov ecx, drvHdr_size
   121 00000225 488D350F050000      <1>     lea rsi, qword [nData]
   122 0000022C 488DBD[A6000000]    <1>     lea rdi, qword [rbp + nulDevHdr]
   123 00000233 F3A4                <1>     rep movsb   
   124                              <1> 
   125                              <1> ;Adjust the addresses in the other driver headers 
   126 00000235 48BE-               <1>     mov rsi, conHdr ;Point to the first non-NUL dev in chain
   126 00000237 [F214000000000000]  <1>
   127 0000023F B90C000000          <1>     mov ecx, 12      ;12 drivers in data area
   128 00000244 488D342E            <1>     lea rsi, qword [rsi + rbp]  ;Get effective addr of driver header
   129                              <1> adjDrivers:
   130 00000248 E825040000          <1>     call adjustDrvHdr
   131 0000024D E2F9                <1>     loop adjDrivers
   132                              <1> 
   133                              <1> ;Open NUL
   134 0000024F 488D9D[0C000000]    <1>     lea rbx, qword [rbp + charReqHdr]
   135 00000256 C6030D              <1>     mov byte [rbx + openReqPkt.hdrlen], openReqPkt_size
   136 00000259 C6430300            <1>     mov byte [rbx + openReqPkt.status], 0
   137 0000025D FF95[B0000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.strPtr]
   138 00000263 FF95[B8000000]      <1>     call qword [rbp + nulDevHdr + drvHdr.intPtr]
   139                              <1> ;Open CON
   140                              <1> conInit:    ;Rather than keeping this resident... do it here
   141                              <1> .ci0:
   142 00000269 B401                <1>     mov ah, 01      ;Get buffer status
   143 0000026B CD36                <1>     int 36h
   144 0000026D 7406                <1>     jz .ci1      ;If zero clear => no more keys to read
   145 0000026F 30E4                <1>     xor ah, ah
   146 00000271 CD36                <1>     int 36h ;Read key to flush from buffer
   147 00000273 EBF4                <1>     jmp short .ci0
   148                              <1> .ci1:
   149 00000275 B800050000          <1>     mov eax, 0500h  ;Set page zero as the default page
   150 0000027A CD30                <1>     int 30h
   151 0000027C B402                <1>     mov ah, 02h
   152 0000027E 31D2                <1>     xor edx, edx    ;Set screen cursor to top right corner
   153 00000280 88D7                <1>     mov bh, dl      ;Set cursor for page 0
   154 00000282 CD30                <1>     int 30h
   155 00000284 B707                <1>     mov bh, 07h     ;Grey/Black attribs
   156 00000286 B800060000          <1>     mov eax, 0600h  ;Clear whole screen
   157 0000028B CD30                <1>     int 30h
   158                              <1> 
   159                              <1>     ;Save ptr to ConHdr in Sysvars
   160 0000028D 488D85[F2140000]    <1>     lea rax, qword [rbp + conHdr]
   161 00000294 6448890425-         <1>     mov qword fs:[conPtr], rax
   161 00000299 [80000000]          <1>
   162                              <1> 
   163                              <1>     ;Save ptr to ClkHdr in Sysvars
   164 0000029D 488D85[58150000]    <1>     lea rax, qword [rbp + clkHdr]
   165 000002A4 6448890425-         <1>     mov qword fs:[clockPtr], rax
   165 000002A9 [78000000]          <1>
   166                              <1> 
   167                              <1> ;------------------------------------------------;
   168                              <1> ;         Link DOS to temporary Buffer           ;
   169                              <1> ;------------------------------------------------;
   170                              <1> tempBufferInit:
   171 000002AD 488DBD[9A020000]    <1>     lea rdi, qword [rbp + tmpBufHdr]
   172 000002B4 6448893C25-         <1>     mov qword fs:[bufHeadPtr], rdi  ;Save pointer to temp buffer "list"
   172 000002B9 [8A000000]          <1>
   173 000002BD 31C0                <1>     xor eax, eax
   174 000002BF 48FFC8              <1>     dec rax
   175 000002C2 48AB                <1>     stosq   ;.nextBufPTr, end of list
   176 000002C4 AA                  <1>     stosb   ;.driveNumber, Free entry
   177 000002C5 48FFC0              <1>     inc rax
   178 000002C8 AA                  <1>     stosb   ;.bufferFlags, No flags
   179                              <1> ;------------------------------------------------;
   180                              <1> ;         Init msd driver, create DPB            ;
   181                              <1> ;------------------------------------------------;
   182                              <1> storageInits:
   183                              <1> ;First save dpb pointer in sysvars
   184 000002C9 488D9D[3B010000]    <1>     lea rbx, qword [rbp + firstDPB]
   185 000002D0 6448891C25-         <1>     mov qword fs:[dpbHeadPtr], rbx
   185 000002D5 [68000000]          <1>
   186                              <1> ;Open Mass Storage
   187                              <1>     ;lea rbx, qword [rbp + diskReqHdr]
   188                              <1>     ;mov byte [rbx + initReqPkt.hdrlen], initReqPkt_size
   189                              <1>     ;mov byte [rbx + initReqPkt.cmdcde], 00h     ;MSD init
   190                              <1>     ;mov word [rbx + initReqPkt.status], 0       ;Zero status word
   191                              <1>     ;mov al, byte fs:[numLogDrv]
   192                              <1>     ;mov byte [rbx + initReqPkt.drvnum], al      ;First unit is drive A
   193                              <1>     ;call qword [rbp + msdHdr + drvHdr.strPtr]
   194                              <1>     ;call qword [rbp + msdHdr + drvHdr.intPtr]
   195                              <1>     ;Check if it returned OK first!
   196                              <1>     ;test word [rbx + initReqPkt.status], 8000h  ;Test the error bit
   197                              <1>     ;jnz errorInit   ;If the bit is set, halt execution
   198                              <1>     ;mov al, byte [rbx + initReqPkt.numunt]
   199                              <1>     ;mov byte fs:[numLogDrv], al
   200                              <1>     ;mov byte [rbp + msdHdr + drvHdr.drvNam], al ;Save # of units in name field
   201                              <1> 
   202                              <1>     ;mov rdx, qword [rbx + initReqPkt.optptr]    ;Get ptr to bpbPtrTbl in rdx
   203 000002D9 E87F040000          <1>     call diskInit
   204 000002DE 4889EF              <1>     mov rdi, rbp ;Save rbp in rdi temporarily
   205 000002E1 648A0425[0B000000]  <1>     mov al, byte fs:[numLogDrv]
   206 000002E9 488D95[881E0000]    <1>     lea rdx, qword [rbp + msdDriver.msdBPBTbl]
   207 000002F0 30C9                <1>     xor cl, cl  ;Clear counter
   208 000002F2 64488B2C25-         <1>     mov rbp, fs:[dpbHeadPtr]  ;Get first DPB address in rdi
   208 000002F7 [68000000]          <1>
   209                              <1> .si0:   
   210 000002FB 488B32              <1>     mov rsi, qword [rdx]    ;Get pointer to device media bpb
   211 000002FE B453                <1>     mov ah, 53h ;Fill dpb with translated BPB data
   212 00000300 CD41                <1>     int 41h
   213                              <1> ;Add other data to DPB
   214 00000302 884D00              <1>     mov byte [rbp + dpb.bDriveNumber], cl ;Remember, rbp points to dpb!!
   215 00000305 884D01              <1>     mov byte [rbp + dpb.bUnitNumber], cl
   216 00000308 50                  <1>     push rax
   217 00000309 488D87[7A150000]    <1>     lea rax, qword [rdi + msdHdr]   ;Get ptr to msd driver header
   218 00000310 4889451A            <1>     mov qword [rbp + dpb.qDriverHeaderPtr], rax
   219 00000314 58                  <1>     pop rax
   220 00000315 FEC1                <1>     inc cl
   221 00000317 38C1                <1>     cmp cl, al  ;When equal, we are have finished
   222 00000319 7416                <1>     je .si1
   223 0000031B 50                  <1>     push rax
   224 0000031C 488D4534            <1>     lea rax, qword [rbp + dpb_size] ;Load address of next dpb to rax
   225 00000320 48894524            <1>     mov qword [rbp + dpb.qNextDPBPtr], rax  ;Save pointer
   226 00000324 4889C5              <1>     mov rbp, rax        ;Now move current device pointer over
   227 00000327 58                  <1>     pop rax
   228 00000328 4881C208000000      <1>     add rdx, 8  ;Goto next pointer in table
   229 0000032F EBCA                <1>     jmp short .si0
   230                              <1> .si1:
   231                              <1> ;Remember to now place a -1 in the qNextDPBPtr field 
   232 00000331 48C74524FFFFFFFF    <1>     mov qword [rbp + dpb.qNextDPBPtr], -1
   233 00000339 4889FD              <1>     mov rbp, rdi    ;Now return to rbp a pointer to the head of dos segment
   234                              <1> ;------------------------------------------------;
   235                              <1> ;          Find largest sector size              ;
   236                              <1> ;------------------------------------------------;
   237                              <1> sectorSizeSearch:
   238                              <1> ;Done by reading BPB's for each drive
   239 0000033C 6687DB              <1>     xchg bx, bx
   240 0000033F 488D9D[881E0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] ;Get first pointer to BPB
   241                              <1>     
   242                              <1>     ;Go thru each block individually
   243 00000346 31C0                <1>     xor eax, eax
   244 00000348 488B13              <1>     mov rdx, qword [rbx]    ;Get bpb pointer into rdx
   245                              <1> .findLargest:
   246 0000034B 663B420B            <1>     cmp ax, word [rdx + bpb.bytsPerSec]
   247 0000034F 660F42420B          <1>     cmovb ax, word [rdx + bpb.bytsPerSec] ;Only replace ax if the word is above ax
   248 00000354 4881C308000000      <1>     add rbx, 8 ;Goto next entry
   249 0000035B 488B13              <1>     mov rdx, qword [rbx]    ;Get next bpb pointer into rdx
   250 0000035E 4885D2              <1>     test rdx, rdx   ;Are we at the end?
   251 00000361 75E8                <1>     jnz .findLargest    ;Nope, keep checking!
   252 00000363 6466890425-         <1>     mov word fs:[maxBytesSec], ax
   252 00000368 [88000000]          <1>
   253                              <1>     
   254                              <1> ;------------------------------------------------;
   255                              <1> ;                 Temp CDS inits                 ;
   256                              <1> ;------------------------------------------------;
   257                              <1> tempCDS:
   258                              <1> ;Build a temporary CDS for Drive A to use it for booting
   259 0000036C 488DBD[3F020000]    <1>     lea rdi, qword [rbp + initCDS]
   260 00000373 6448893C25-         <1>     mov qword fs:[cdsHeadPtr], rdi
   260 00000378 [92000000]          <1>
   261 0000037C B943000000          <1>     mov ecx, 67 ;Buffer length
   262 00000381 31C0                <1>     xor eax, eax
   263 00000383 4889FB              <1>     mov rbx, rdi    ;Save CDS pointer in rbx
   264 00000386 F3AA                <1>     rep stosb   ;Zero out the path string
   265 00000388 4889DF              <1>     mov rdi, rbx
   266 0000038B B041                <1>     mov al, "A"
   267 0000038D AA                  <1>     stosb
   268 0000038E B03A                <1>     mov al, ":"
   269 00000390 AA                  <1>     stosb
   270 00000391 B05C                <1>     mov al, "\"
   271 00000393 AA                  <1>     stosb
   272 00000394 4889DF              <1>     mov rdi, rbx
   273 00000397 66C747430040        <1>     mov word [rdi + cds.wFlags], cdsPhysDrive   ;Must be a physical drive
   274 0000039D 64488B1C25-         <1>     mov rbx, qword fs:[dpbHeadPtr]  ;Get the DPB of first drive in rbx
   274 000003A2 [68000000]          <1>
   275 000003A6 48895F45            <1>     mov qword [rdi + cds.qDPBPtr], rbx
   276 000003AA 66C747590200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip the A:
   277                              <1>     ;On FAT12/16, startcluster = 0 => Root Dir Sector
   278                              <1>     ;On FAT32, startcluster = 0 => Alias for root cluster. 
   279                              <1>     ;   Read dpb.dFirstUnitOfRootDir for first cluster of root dir
   280 000003B0 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax    ;eax was zeroed before
   281                              <1> ;------------------------------------------------;
   282                              <1> ;     Set up general PSP areas and DOS vars      ;
   283                              <1> ;------------------------------------------------;
   284                              <1>     ;Additional DOS Vars init
   285 000003B3 31C0                <1>     xor eax, eax
   286 000003B5 64880425[F2000000]  <1>     mov byte fs:[currentDrv], al ;Current Drive = Drive A
   287 000003BD 64880425[F3000000]  <1>     mov byte fs:[breakFlag], al  ;Break off
   288 000003C5 64880425[F4000000]  <1>     mov byte fs:[verifyFlag], al ;Write only
   289 000003CD 64880425[FD000000]  <1>     mov byte fs:[singleDrv], al  ;Only used on single drive systems
   290 000003D5 64880425[C8000000]  <1>     mov byte fs:[critErrFlag], al   ;Not in critical error
   291 000003DD 64880425[C9000000]  <1>     mov byte fs:[inDOS], al      ;Not in DOS
   292 000003E5 64C60425[CA000000]- <1>     mov byte fs:[errorDrv], -1   ;No error drive
   292 000003ED FF                  <1>
   293 000003EE 6466890425-         <1>     mov word fs:[lastRetCode], ax   ;Last return code is 0, no error
   293 000003F3 [F0000000]          <1>
   294                              <1> 
   295                              <1>     ;SYSVARS PSP Init
   296 000003F7 488D1D02FCFFFF      <1>     lea rbx, qword [tempPSP]
   297 000003FE 6448891C25-         <1>     mov qword fs:[currentPSP], rbx    ;Save current PSP
   297 00000403 [D8000000]          <1>
   298 00000407 53                  <1>     push rbx
   299 00000408 4881C380000000      <1>     add rbx, psp.dta
   300 0000040F 6448891C25-         <1>     mov qword fs:[currentDTA], rbx    ;Save current DTA
   300 00000414 [D0000000]          <1>
   301 00000418 5B                  <1>     pop rbx
   302 00000419 66C70340CD          <1>     mov word [rbx + psp.return], 0CD40h ;DOS return function
   303 0000041E C7435000CB40CD      <1>     mov dword [rbx + psp.unixEntry], 0CD40CB00h  ;Last byte overlaied
   304 00000425 48895B02            <1>     mov qword [rbx + psp.startSeg], rbx ;Save start segment of app
   305 00000429 48895B22            <1>     mov qword [rbx + psp.parentPtr], rbx ;Save self as parent Process
   306 0000042D 48895B53            <1>     mov qword [rbx + psp.prevPSP], rbx  ;Save self as previous PSP
   307 00000431 488D7B2A            <1>     lea rdi, qword [rbx + psp.jobFileTbl]
   308 00000435 48B800000001020000- <1>     mov rax, 0000000201000000h  ;Store default handles in JFT
   308 0000043E 00                  <1>
   309 0000043F 48AB                <1>     stosq   ;8 bytes
   310 00000441 31C0                <1>     xor eax, eax
   311 00000443 48AB                <1>     stosq   ;16 bytes
   312 00000445 AB                  <1>     stosd   ;20 bytes
   313 00000446 48C7433EFFFFFFFF    <1>     mov qword [rbx + psp.envPtr], -1    ;No environment
   314 0000044E 6689434E            <1>     mov word [rbx + psp.xtraHdlSz], ax  ;No size
   315 00000452 C6435BFF            <1>     mov byte [rbx + psp.xtraHdlNum], -1 ;Unused
   316 00000456 4889DA              <1>     mov rdx, rbx
   317 00000459 B842350000          <1>     mov eax, 3542h  ;Get pointer for Int 42h in rbx
   318 0000045E CD41                <1>     int 41h
   319 00000460 48895A0A            <1>     mov qword [rdx + psp.oldInt42h], rbx
   320 00000464 B843350000          <1>     mov eax, 3543h
   321 00000469 CD41                <1>     int 41h
   322 0000046B 48895A12            <1>     mov qword [rdx + psp.oldInt43h], rbx
   323 0000046F B844350000          <1>     mov eax, 3544h
   324 00000474 CD41                <1>     int 41h
   325 00000476 48895A1A            <1>     mov qword [rdx + psp.oldInt44h], rbx
   326                              <1> 
   327 0000047A B929000000          <1>     mov ecx, (psp_size - psp.fcb1)/4    ;Clear the dta and fcb space
   328 0000047F 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1] ;Point to fcb1
   329 00000483 F3AB                <1>     rep stosd   ;Efficiently Clear DTA and FCBs
   330                              <1> ;------------------------------------------------;
   331                              <1> ;          Default File Handle Creation          ;
   332                              <1> ;------------------------------------------------;
   333                              <1> defaultFileHandles:
   334                              <1> ;Fill in the default file table entries
   335 00000485 488D9D[00000000]    <1>     lea rbx, qword [rbp + firstSftHeader]
   336 0000048C 48C703FFFFFFFF      <1>     mov qword [rbx + sfth.qNextSFTPtr], -1  ;Last sfth in chain
   337 00000493 66C743080500        <1>     mov word [rbx + sfth.wNumFiles], 5      ;5 default files
   338 00000499 6448891C25-         <1>     mov qword fs:[sftHeadPtr], rbx  ;Save ptr to this sft header in SysVars
   338 0000049E [70000000]          <1>
   339                              <1> ;GOTO FIRST FILE 
   340 000004A2 4881C30A000000      <1>     add rbx, sfth_size  ;Goto first driver
   341                              <1> ;Write CON
   342 000004A9 66C7030300          <1>     mov word [rbx + sft.wNumHandles], 3 ;Sysinit stdin/out/err
   343 000004AE 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   344 000004B4 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   345 000004B8 C64305D3            <1>     mov byte [rbx + sft.wDeviceInfo], charDevConIn|charDevConOut|charDevFastOut|charDevNoEOF|devCharDev 
   346                              <1>     ;No EOF when reading from the device
   347 000004BC 64488B0425-         <1>     mov rax, qword fs:[conPtr]  ;Get pointer to CON device
   347 000004C1 [80000000]          <1>
   348 000004C5 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   349                              <1>     ;Ignore disk related fields and Date/Time of open
   350 000004C9 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   351 000004CD 488D3598000000      <1>     lea rsi, qword [.dfhCon]
   352                              <1>     ;11 chars in 8.3 name
   353 000004D4 48A5                <1>     movsq   ;8 chars
   354 000004D6 66A5                <1>     movsw   ;10 chars
   355 000004D8 A4                  <1>     movsb   ;11 chars
   356 000004D9 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   356 000004DE [D8000000]          <1>
   357 000004E2 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   358                              <1> ;GOTO NEXT ENTRY
   359 000004E6 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   360                              <1> ;Write AUX
   361 000004ED 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdaux
   362 000004F2 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   363 000004F8 C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   364 000004FC C64305C0            <1>     mov byte [rbx + sft.wDeviceInfo], charDevNoEOF| devCharDev 
   365                              <1>     ;No EOF when reading from the device
   366 00000500 488B85[14150000]    <1>     mov rax, qword [rbp + auxHdr]  ;Get pointer to AUX device
   367 00000507 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   368                              <1>     ;Ignore disk related fields and Date/Time of open
   369 0000050B 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   370 0000050F 488D3561000000      <1>     lea rsi, qword [.dfhAux]
   371                              <1>     ;11 chars in 8.3 name
   372 00000516 48A5                <1>     movsq   ;8 chars
   373 00000518 66A5                <1>     movsw   ;10 chars
   374 0000051A A4                  <1>     movsb   ;11 chars
   375 0000051B 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   375 00000520 [D8000000]          <1>
   376 00000524 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   377                              <1> ;GOTO NEXT ENTRY
   378 00000528 4881C33D000000      <1>     add rbx, sft_size   ;Goto next SFT
   379                              <1> ;Write PRN
   380 0000052F 66C7030100          <1>     mov word [rbx + sft.wNumHandles], 1 ;Sysinit stdprn
   381 00000534 66C743024220        <1>     mov word [rbx + sft.wOpenMode], critErrHdl | denyNoneShare | RWAccess
   382 0000053A C6430426            <1>     mov byte [rbx + sft.bFileAttrib], archiveFile | systemFile | hiddenFile
   383 0000053E C6430580            <1>     mov byte [rbx + sft.wDeviceInfo], devCharDev 
   384                              <1>     ;Want EOF when reading from to the device
   385 00000542 488B85[36150000]    <1>     mov rax, qword [rbp + prnHdr]  ;Get pointer to PRN device
   386 00000549 48894307            <1>     mov qword [rbx + sft.qPtr], rax
   387                              <1>     ;Ignore disk related fields and Date/Time of open
   388 0000054D 488D7B26            <1>     lea rdi, qword [rbx + sft.sFileName]  ;Get file name space pointer
   389 00000551 488D352A000000      <1>     lea rsi, qword [.dfhPrn]
   390                              <1>     ;11 chars in 8.3 name
   391 00000558 48A5                <1>     movsq   ;8 chars
   392 0000055A 66A5                <1>     movsw   ;10 chars
   393 0000055C A4                  <1>     movsb   ;11 chars
   394 0000055D 64488B0425-         <1>     mov rax, qword fs:[currentPSP]  ;Get current PSP
   394 00000562 [D8000000]          <1>
   395 00000566 48894331            <1>     mov qword [rbx + sft.qPSPOwner], rax
   396 0000056A EB21                <1>     jmp short .dfhExit
   397 0000056C 434F4E202020202020- <1> .dfhCon db "CON        "
   397 00000575 2020                <1>
   398 00000577 415558202020202020- <1> .dfhAux db "AUX        "
   398 00000580 2020                <1>
   399 00000582 50524E202020202020- <1> .dfhPrn db "PRN        "
   399 0000058B 2020                <1>
   400                              <1> .dfhExit:
   401                              <1> ;------------------------------------------------;
   402                              <1> ;               Load CONFIG.SYS                  ;
   403                              <1> ;------------------------------------------------;
   404                              <1> ;------------------------------------------------;
   405                              <1> ;              Process CONFIG.SYS                ;
   406                              <1> ;------------------------------------------------;
   407                              <1> ;------------------------------------------------;
   408                              <1> ;       Load User Drivers from CONFIG.SYS        ;
   409                              <1> ;------------------------------------------------;
   410                              <1> ;------------------------------------------------;
   411                              <1> ;   Setup Final Data Areas With Overrides from   ;
   412                              <1> ;                  CONFIG.SYS                    ;
   413                              <1> ;------------------------------------------------;
   414                              <1> ;------------------------------------------------;
   415                              <1> ;                   MCB inits                    ;
   416                              <1> ;------------------------------------------------;
   417                              <1> mcbInit:
   418                              <1> 
   419                              <1> .mcbExit:
   420                              <1> ;------------------------------------------------;
   421                              <1> ;           Load Command interpreter             ;
   422                              <1> ;------------------------------------------------;
   423                              <1> 
   424 0000058D 488D1502010000      <1>     lea rdx, qword [strtmsg]   ;Get the absolute address of message
   425 00000594 B409                <1>     mov ah, 09h
   426 00000596 CD41                <1>     int 41h
   427                              <1> l1:
   428 00000598 B401                <1>     mov ah, 01h  ;Write with echo
   429 0000059A CD41                <1>     int 41h
   430 0000059C 3C00                <1>     cmp al, 0
   431 0000059E 7402                <1>     je l2
   432 000005A0 EBF6                <1>     jmp short l1
   433                              <1> l2:
   434 000005A2 B407                <1>     mov ah, 07h
   435 000005A4 CD41                <1>     int 41h
   436 000005A6 3C42                <1>     cmp al, 42h
   437 000005A8 75EE                <1>     jne l1
   438                              <1> l3:
   439 000005AA 6466C70425-         <1>     mov word fs:[CLOCKrecrd + clkStruc.dateWord], 0
   439 000005AF [19010000]0000      <1>
   440 000005B5 488D9D[0C000000]    <1>     lea rbx, qword [rbp + charReqHdr] ;Get the address of this request block
   441 000005BC 488D85[19010000]    <1>     lea rax, qword [rbp + CLOCKrecrd]
   442 000005C3 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   443 000005C6 C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read the time
   444 000005CA 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
   445 000005D0 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
   446 000005D4 C7431606000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 06
   447 000005DB FF95[62150000]      <1>     call qword [rbp + clkHdr + drvHdr.strPtr]
   448 000005E1 FF95[6A150000]      <1>     call qword [rbp + clkHdr + drvHdr.intPtr] 
   449                              <1> 
   450 000005E7 B403                <1>     mov ah, 03h
   451 000005E9 30FF                <1>     xor bh, bh
   452 000005EB CD30                <1>     int 30h
   453 000005ED 30D2                <1>     xor dl, dl  ;0 column
   454 000005EF B402                <1>     mov ah, 02h
   455 000005F1 CD30                <1>     int 30h
   456                              <1> 
   457 000005F3 488D9D[19010000]    <1>     lea rbx, qword [rbp + CLOCKrecrd]
   458 000005FA 0FB64303            <1>     movzx eax, byte [rbx + clkStruc.hours]
   459 000005FE E832000000          <1>     call .clkHexToBCD
   460 00000603 B40E                <1>     mov ah, 0Eh
   461 00000605 B03A                <1>     mov al, ":"
   462 00000607 CD30                <1>     int 30h
   463 00000609 0FB64302            <1>     movzx eax, byte [rbx + clkStruc.minutes]
   464 0000060D E823000000          <1>     call .clkHexToBCD
   465 00000612 B40E                <1>     mov ah, 0Eh
   466 00000614 B03A                <1>     mov al, ":"
   467 00000616 CD30                <1>     int 30h
   468 00000618 0FB64305            <1>     movzx eax, byte [rbx + clkStruc.seconds]
   469 0000061C E814000000          <1>     call .clkHexToBCD
   470 00000621 B40E                <1>     mov ah, 0Eh
   471 00000623 B02E                <1>     mov al, "."
   472 00000625 CD30                <1>     int 30h
   473 00000627 0FB64304            <1>     movzx eax, byte [rbx + clkStruc.hseconds]
   474 0000062B E805000000          <1>     call .clkHexToBCD
   475 00000630 E963FFFFFF          <1>     jmp l1
   476                              <1> .clkHexToBCD:
   477                              <1> ;Converts a Hex byte into two BCD digits
   478                              <1> ;Takes input in each nybble of al
   479 00000635 53                  <1>     push rbx
   480 00000636 48BB0A000000000000- <1>     mov rbx, 0Ah  ;Divide by 10
   480 0000063F 00                  <1>
   481 00000640 31D2                <1>     xor edx, edx
   482 00000642 48F7F3              <1>     div rbx
   483 00000645 80C230              <1>     add dl, '0'
   484 00000648 80FA39              <1>     cmp dl, '9'
   485 0000064B 7603                <1>     jbe .chtb0
   486 0000064D 80C207              <1>     add dl, 'A'-'0'-10
   487                              <1> .chtb0:
   488 00000650 88D1                <1>     mov cl, dl    ;Save remainder byte
   489 00000652 31D2                <1>     xor edx, edx
   490 00000654 48F7F3              <1>     div rbx
   491 00000657 80C230              <1>     add dl, '0'
   492 0000065A 80FA39              <1>     cmp dl, '9'
   493 0000065D 7603                <1>     jbe .chtb1
   494 0000065F 80C207              <1>     add dl, 'A'-'0'-10
   495                              <1> .chtb1:
   496 00000662 88D5                <1>     mov ch, dl    ;Save remainder byte
   497                              <1> 
   498 00000664 88E8                <1>     mov al, ch    ;Get most sig digit into al
   499 00000666 B40E                <1>     mov ah, 0Eh
   500 00000668 CD30                <1>     int 30h
   501 0000066A 88C8                <1>     mov al, cl    ;Get least sig digit into al
   502 0000066C B40E                <1>     mov ah, 0Eh
   503 0000066E CD30                <1>     int 30h
   504 00000670 5B                  <1>     pop rbx
   505 00000671 C3                  <1>     ret
   506                              <1> ;--------------------------------
   507                              <1> ;       PROCS FOR SYSINIT       :
   508                              <1> ;--------------------------------
   509                              <1> adjustDrvHdr:
   510                              <1> ;Input: rsi = Effective address of driver in DOS segment
   511                              <1> ;       rbp = Ptr to the start of the DOS segment
   512                              <1> ;Output: rsi = EA of next header in DOS segment
   513 00000672 48012E              <1>     add qword [rsi + drvHdr.nxtPtr], rbp    ;Adjust address
   514 00000675 48016E0A            <1>     add qword [rsi + drvHdr.strPtr], rbp
   515 00000679 48016E12            <1>     add qword [rsi + drvHdr.intPtr], rbp
   516 0000067D 4881C622000000      <1>     add rsi, drvHdr_size
   517 00000684 C3                  <1>     ret
   518                              <1> errorInit:
   519                              <1> ;If a critical error occurs during sysinit, fail through here
   520                              <1> ;Int 42h, 43h and 44h point here during sysinit
   521 00000685 488D2D22000000      <1>     lea rbp, hltmsg
   522 0000068C B804130000          <1>     mov eax, 1304h
   523 00000691 CD30                <1>     int 30h
   524                              <1>     ;cli ;Clear interrupts
   525                              <1>     ;mov al, -1
   526                              <1>     ;mov dx, 0A1h    ;PIC2 data
   527                              <1>     ;out dx, al      ;Mask all lines
   528                              <1>     ;mov dx, 21h     ;PIC1 data
   529                              <1>     ;out dx, al      ;Mask all lines
   530                              <1> .ei0:
   531 00000693 F4                  <1>     hlt
   532 00000694 EBFD                <1>     jmp short .ei0
   533                              <1> ;--------------------------------
   534                              <1> ;       DATA FOR SYSINIT        :
   535                              <1> ;--------------------------------
   536 00000696 0A0D5374617274696E- <1> strtmsg db 0Ah,0Dh,"Starting SCP/DOS...",0Ah,0Dh,"$"
   536 0000069F 67205343502F444F53- <1>
   536 000006A8 2E2E2E0A0D24        <1>
   537 000006AE 4572726F7220696E69- <1> hltmsg  db "Error initialising SCPDOS.SYS. System halting...",0
   537 000006B7 7469616C6973696E67- <1>
   537 000006C0 20534350444F532E53- <1>
   537 000006C9 59532E205379737465- <1>
   537 000006D2 6D2068616C74696E67- <1>
   537 000006DB 2E2E2E00            <1>
   538 000006DF 434F4E00            <1> conName db "CON",0
   539 000006E3 41555800            <1> auxName db "AUX",0
   540 000006E7 50524E00            <1> prnName db "PRN",0
   541                              <1> intData:
   542 000006EB [F306000000000000]  <1>     dq terminateProcess ;Int 40h
   543 000006F3 [A707000000000000]  <1>     dq functionDispatch ;Int 41h
   544 000006FB [8506000000000000]  <1>     dq errorInit        ;Int 42h, If sysinit terminates, halt system
   545 00000703 [F506000000000000]  <1>     dq ctrlCHandler     ;Int 43h, ignore any CTRL+C during init
   546 0000070B [8506000000000000]  <1>     dq errorInit        ;Int 44h, If critical error in sysinit, halt system
   547 00000713 [0507000000000000]  <1>     dq absDiskRead      ;Int 45h
   548 0000071B [F706000000000000]  <1>     dq absDiskWrite     ;Int 46h
   549 00000723 [9907000000000000]  <1>     dq terminateResident    ;Int 47h
   550 0000072B [9907000000000000]  <1>     dq inDosHandler     ;Int 48h
   551 00000733 [9B07000000000000]  <1>     dq fastOutput       ;Int 49h
   552                              <1> nData:
   553 0000073B [F214000000000000]  <1>     dq conHdr
   554 00000743 0480                <1>     dw 08004h
   555 00000745 [9A16000000000000]  <1>     dq nulStrat
   556 0000074D [A016000000000000]  <1>     dq nulIntr
   557 00000755 4E554C2020202020    <1>     db "NUL     " ;Default NUL data
   558                              <1> 
   559                              <1> diskInit:
   560                              <1>     ;We create a function to deal with BPB parsing etc
   561                              <1>     ;Start with the first primary partition on each hard disk (until max)
   562                              <1>     ;   They dont have to be bootable
   563                              <1>     ;Then go back and look for other partitions partitions. 
   564                              <1>     ;   Add each other primary or logical ptn (until max)
   565                              <1>     ;Then finish with removable devices. First two devs become A: and B: resp.
   566                              <1>     ;Use r8 as device counter
   567 0000075D 488DBD[B01E0000]    <1>     lea rdi, [rbp + msdDriver.msdBPBblks]    ;Prepare to write BPBs
   568 00000764 64803C25[0A000000]- <1>     cmp byte fs:[numFixDrv], 0 ;Do we have any fixed drives?
   568 0000076C 00                  <1>
   569 0000076D 0F84C6000000        <1>     jz .remInit ;No? Go to removables
   570 00000773 49B802000000000000- <1>     mov r8, 2   ;Device number 2 = C:
   570 0000077C 00                  <1>
   571 0000077D B280                <1>     mov dl, 80h ;Start with HDD 0
   572                              <1> .primary:
   573 0000077F 64803C25[0B000000]- <1>     cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   573 00000787 03                  <1>
   574 00000788 0F84AB000000        <1>     je .remInit
   575 0000078E 31C9                <1>     xor ecx, ecx    ;Sector 0
   576 00000790 E83E010000          <1>     call .initReadSector ;Sets rbx to msdtempbuffer
   577 00000795 0F8289000000        <1>     jc .primaryEpilog
   578                              <1>     ;Here, check MBR or BPB
   579 0000079B 6681BBFE01000055AA  <1>     cmp word [rbx + 1FEh], 0AA55h
   580 000007A4 757E                <1>     jne .primaryEpilog  ;Not a valid MBR or BPB, skip disk
   581                              <1>     ;Now check if BPB or MBR
   582 000007A6 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   583 000007A8 8A6302              <1>     mov ah, byte [rbx + 2]
   584 000007AB 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   585 000007AF 7473                <1>     je .primaryEpilog ;Will process these during Extended Ptn search
   586                              <1>     ;Here with a MBR. Search the MBR for the first Primary Partition
   587                              <1>     ;Look for CHS/LBA types (01h/04h/06h/0Bh/0Ch/0Eh) for primary ptns
   588 000007B1 4881C3BE010000      <1>     add rbx, mbr.mbrEntry1 ;Point rbx to mbrEntry1
   589 000007B8 B104                <1>     mov cl, 4
   590                              <1> .checkPrimary:
   591 000007BA 8A4304              <1>     mov al, byte [rbx + mbrEntry.ptnType]
   592 000007BD 3C01                <1>     cmp al, 01
   593 000007BF 7421                <1>     je .primaryFound
   594 000007C1 3C04                <1>     cmp al, 04
   595 000007C3 741D                <1>     je .primaryFound
   596 000007C5 3C06                <1>     cmp al, 06
   597 000007C7 7419                <1>     je .primaryFound
   598 000007C9 3C0B                <1>     cmp al, 0Bh
   599 000007CB 7415                <1>     je .primaryFound
   600 000007CD 3C0C                <1>     cmp al, 0Ch
   601 000007CF 7411                <1>     je .primaryFound
   602 000007D1 3C0E                <1>     cmp al, 0Eh
   603 000007D3 740D                <1>     je .primaryFound
   604 000007D5 4881C310000000      <1>     add rbx, mbrEntry_size  ;Goto next entry byte
   605 000007DC FEC9                <1>     dec cl
   606 000007DE 7444                <1>     jz .primaryEpilog
   607 000007E0 EBD8                <1>     jmp short .checkPrimary
   608                              <1> .primaryFound:
   609                              <1>     ;Copy the first sector of this partition into memory
   610 000007E2 8B4B08              <1>     mov ecx, dword [rbx + mbrEntry.lbaStart]    ;Get lba for volume start
   611 000007E5 E8E9000000          <1>     call .initReadSector
   612 000007EA 7238                <1>     jc .primaryEpilog
   613                              <1>     ;Now verify this is a BPB
   614 000007EC 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   615 000007EE 8A6302              <1>     mov ah, byte [rbx + 2]
   616 000007F1 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   617 000007F5 752D                <1>     jne .primaryEpilog   ;If not, skip
   618                              <1>     ;Now copy data to internal tables
   619 000007F7 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   620 000007FA B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   621 000007FF 57                  <1>     push rdi
   622 00000800 F348A5              <1>     rep movsq   ;Copy the BPB
   623 00000803 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   624                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   625 00000804 4A8D9C05[7E1E0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   626                              <1>     ;Add device count to rbx to point to correct entry
   627 0000080C 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   628 0000080E 4A8D9CC5[881E0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   629 00000816 488933              <1>     mov qword [rbx], rsi
   630 00000819 49FFC0              <1>     inc r8  ;Goto next logical drive
   631 0000081C 64FE0425[0B000000]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have
   632                              <1> .primaryEpilog:
   633 00000824 FEC2                <1>     inc dl  ;Goto next BIOS drive
   634 00000826 88D6                <1>     mov dh, dl
   635 00000828 80E67F              <1>     and dh, 7Fh ;Clear bit 7
   636 0000082B 643A3425[0A000000]  <1>     cmp dh, byte fs:[numFixDrv]    ;Have we gone thru all hard drives?
   637 00000833 0F8546FFFFFF        <1>     jne .primary    ;Whilst we have fewer, go back
   638                              <1> .extended:
   639                              <1> ;We have gone through all the devices once
   640                              <1>     ;cmp byte fs:[numLogDrv], 3  ;Are we at maximum devices (A: B: reserved)?
   641                              <1>     ;je .remInit ;If yes, get removable devices
   642                              <1>     ;mov dl, 80h ;Go back to hard drive 80h
   643                              <1>     ;xor ecx, ecx    ;Get MBR back
   644                              <1>     ;call .initReadSector
   645                              <1>     ;Now we eventually search MBR for a FAT extended partition
   646                              <1> .remInit:
   647                              <1> ;Now handle removable devices, at least 2 rem. devs.
   648 00000839 4D89C1              <1>     mov r9, r8  ;Save number of next device in r9b
   649 0000083C 30D2                <1>     xor dl, dl  ;Start with removable device 0
   650 0000083E 4188D0              <1>     mov r8b, dl ;Once r8b becomes 2, go past the disk drives
   651                              <1>     ;rdi points to the space for the subsequent bpb's
   652                              <1> .removables:
   653 00000841 31C9                <1>     xor ecx, ecx    ;Read sector 0
   654 00000843 E88B000000          <1>     call .initReadSector
   655 00000848 7238                <1>     jc .removableEpilogue   ;Goto next device
   656                              <1>     ;Now verify this is a BPB
   657 0000084A 8A03                <1>     mov al, byte [rbx]  ;rbx is pointed to the temp buffer by initreadsector
   658 0000084C 8A6302              <1>     mov ah, byte [rbx + 2]
   659 0000084F 663DEB90            <1>     cmp ax, 090EBh  ;WinDOS and SCP compatible (always generate short jmp)
   660 00000853 752D                <1>     jne .removableEpilogue   ;If not, skip
   661                              <1>     ;Now copy data to internal tables
   662 00000855 4889DE              <1>     mov rsi, rbx    ;Point rsi to the temp buffer
   663 00000858 B90F000000          <1>     mov ecx, bpbEx_size/8   ;Copy BPB
   664 0000085D 57                  <1>     push rdi
   665 0000085E F348A5              <1>     rep movsq   ;Copy the BPB
   666 00000861 5E                  <1>     pop rsi ;Get the pointer to the copied bpb into rsi
   667                              <1>     ;Store BIOS map value and BPBblk pointer in bpbTbl
   668 00000862 4A8D9C05[7E1E0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap + r8]
   669                              <1>     ;Add device count to rbx to point to correct entry
   670 0000086A 8813                <1>     mov byte [rbx], dl  ;Store BIOS map value 
   671 0000086C 4A8D9CC5[881E0000]  <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl + 8*r8]
   672 00000874 488933              <1>     mov qword [rbx], rsi
   673 00000877 49FFC0              <1>     inc r8  ;Goto next logical drive
   674 0000087A 64FE0425[0B000000]  <1>     inc byte fs:[numLogDrv] ;Increment the number of valid drives we have    
   675                              <1> .removableEpilogue:
   676 00000882 FEC2                <1>     inc dl  ;Goto next BIOS device now
   677 00000884 643A1425[09000000]  <1>     cmp dl, byte fs:[numRemDrv] ;Are we past last rem dev?
   678 0000088C 7412                <1>     je .end
   679 0000088E 4981F802000000      <1>     cmp r8, 2 ;Are we back at drive C: ?
   680 00000895 7403                <1>     je .re0
   681 00000897 4500C8              <1>     add r8b, r9b    ;Add the number of fixed disk volumes
   682                              <1> .re0:
   683 0000089A 4180F805            <1>     cmp r8b, 5  ;Are we at logical device 5 (F:, not supported)?
   684 0000089E 72A1                <1>     jb .removables
   685                              <1> .end:
   686 000008A0 64803C25[09000000]- <1>     cmp byte fs:[numRemDrv], 1  ;Do we have only 1 removable device?
   686 000008A8 01                  <1>
   687 000008A9 7401                <1>     je .singleRemDev
   688 000008AB C3                  <1>     ret
   689                              <1> .singleRemDev:
   690                              <1>     ;Copy Drive A: BPB pointer and BIOS map data for Drive B:
   691 000008AC 488D9D[7E1E0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBIOSmap]
   692 000008B3 8A95[7E1E0000]      <1>     mov dl, byte [rbp + msdDriver.msdBIOSmap]   ;Get drive A: BIOS map
   693 000008B9 885301              <1>     mov byte [rbx + 1], dl  ;Store in byte for Drive B:
   694 000008BC 488D9D[881E0000]    <1>     lea rbx, qword [rbp + msdDriver.msdBPBTbl] 
   695 000008C3 488B13              <1>     mov rdx, qword [rbx]    ;Get BPB pointer of Drive A:
   696 000008C6 48895308            <1>     mov qword [rbx + 8], rdx    ;Store in qword for Drive B:
   697 000008CA 64FE0425[0B000000]  <1>     inc byte fs:[numLogDrv] ;Gotta register the phantom drive!
   698 000008D2 C3                  <1>     ret
   699                              <1> .initReadSector:
   700                              <1> ;Called with sector number in rcx and BIOS device number in dl
   701 000008D3 B482                <1>     mov ah, 82h ;Read
   702 000008D5 B001                <1>     mov al, 1   ;One sector
   703 000008D7 488D9D[BA020000]    <1>     lea rbx, qword [rbp + msdTempBuffer]  ;Into temporary buffer
   704 000008DE CD33                <1>     int 33h
   705 000008E0 C3                  <1>     ret
    10                                  Segment dSeg nobits align=1 start=0     ;BSS data segment
    11                                  %include "./Source/BSS/dosSeg.asm"
    12                              <1> ;This file contains the main DOS data segment
    13                              <1> 
    14 00000000 ????????????????    <1>     dosSegPtr   resq 1    ;Pointer to the data Segment itself x
    15 00000008 ??                  <1>     bootDrive   resb 1    ;The Int 33h device we booted from x
    16 00000009 ??                  <1>     numRemDrv   resb 1    ;Number of physical removable MSDs in system x
    17 0000000A ??                  <1>     numFixDrv   resb 1    ;Number of physical fixed drives in system
    18 0000000B ??                  <1>     numLogDrv   resb 1    ;Number of logical drives in system x
    19 0000000C <res 2Ah>           <1>     charReqHdr  resb ioReqPkt_size  ;Character IO Request header x
    20 00000036 <res 2Ah>           <1>     diskReqHdr  resb ioReqPkt_size  ;Disk Action Request header x
    21                              <1>     ;The device driver header with space for the largest possible packet
    22 00000060 ????????????????    <1>     mcbChainPtr resq 1    ;Pointer to the MCB chain x
    23                              <1> sysVarsPtr:
    24 00000068 ????????????????    <1>     dpbHeadPtr  resq 1    ;Pointer to the first DPB in the DPB chain x
    25 00000070 ????????????????    <1>     sftHeadPtr  resq 1    ;Pointer to the first SFT header in SFT chain
    26 00000078 ????????????????    <1>     clockPtr    resq 1    ;Pointer to the current active CLOCK$ device header x
    27                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    28 00000080 ????????????????    <1>     conPtr      resq 1    ;Pointer to the current active CON device header  x
    29                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    30 00000088 ????                <1>     maxBytesSec resw 1    ;Maximum number of bytes per sector (size of buffers)x
    31 0000008A ????????????????    <1>     bufHeadPtr  resq 1    ;Pointer to the head of the disk buffer chain x
    32 00000092 ????????????????    <1>     cdsHeadPtr  resq 1    ;Pointer to the head of the CDS array x
    33 0000009A ??                  <1>     lastdrvNum  resb 1    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    34 0000009B ????????????????    <1>     sfcbHeadPtr resq 1    ;Pointer to the head of the System FCB chain
    35 000000A3 ????                <1>     numSafeSFCB resw 1    ;Number of protected FCBs (y in FCBS=x,y)
    36 000000A5 ??                  <1>     numJoinDrv  resb 1    ;Number of Joined Drives
    37 000000A6 <res 22h>           <1>     nulDevHdr   resb drvHdr_size
    38                              <1> 
    39                              <1> ;Start of Swappable Data Area, this bit can remain static
    40 000000C8 ??                  <1>     critErrFlag resb 1  ;Critical error flag, set on entry to INT 44h x
    41 000000C9 ??                  <1>     inDOS       resb 1  ;Inc on each DOS call, dec when leaving x
    42 000000CA ??                  <1>     errorDrv    resb 1  ;Drive on which error occured or FFh x
    43 000000CB ??                  <1>     errorLocus  resb 1  ;Where the error took place  
    44 000000CC ????                <1>     errorExt    resw 1  ;Extended Error Code
    45 000000CE ??                  <1>     errorAction resb 1  ;Suggested action for error  
    46 000000CF ??                  <1>     errorClass  resb 1  ;Error Class
    47                              <1> 
    48 000000D0 ????????????????    <1>     currentDTA  resq 1  ;Address of the current DTA x
    49 000000D8 ????????????????    <1>     currentPSP  resq 1  ;Address of current PSP x
    50 000000E0 ????????????????    <1>     rdiErrorPtr resq 1  ;Saves RDI value of last error (could make this di)
    51 000000E8 ????????????????    <1>     xInt43hRSP  resq 1  ;Saves RSP across an Int 43h call
    52 000000F0 ????                <1>     lastRetCode resw 1  ;Last return code returned by Int 41h/4Ch x
    53 000000F2 ??                  <1>     currentDrv  resb 1  ;Default drive x
    54 000000F3 ??                  <1>     breakFlag   resb 1  ;If set, check for CTRL+C on all DOS calls x
    55 000000F4 ??                  <1>     verifyFlag  resb 1  ;If set, writes are replaces with write/verify x
    56                              <1> ;SDA, needs to be replaced between processes
    57 000000F5 ????????????????    <1>     xInt44hRSP  resq 1  ;RSP across an Int 44h call
    58                              <1> ;Only used on single remdrive systems, marks if drive A or B was last accessed
    59 000000FD ??                  <1>     singleDrv   resb 1  ;Set if last drive accessed was drive B x
    60                              <1> ;This is done to allow for DOS to give the user a change to swap devices
    61                              <1> 
    62 000000FE ??                  <1>     Int44RetVal resb 1  ;Saves a copy of the Int 44 return value
    63 000000FF ??                  <1>     Int44bitfld resb 1  ;Copies the bit field given to the Int 44h handler
    64 00000100 ??                  <1>     int48Flag   resb 1  ;If set, Int 48h should be called, if clear no
    65 00000101 ????????????????    <1>     oldoldRSP   resq 1  ;RSP at prev Int 41h entry if called from within Int 41h
    66 00000109 ????????????????    <1>     oldRSP      resq 1  ;RSP when entering Int 41h
    67 00000111 ????????????????    <1>     oldRBX      resq 1  ;Temp var to save value of rbx during an Int 41 call
    68                              <1> ;Time stuff
    69 00000119 ????????????        <1>     CLOCKrecrd  resb 6  ;Clock driver record
    70 0000011F ??                  <1>     dayOfMonth  resb 1  ;01h - 1Fh (1 - 31)
    71 00000120 ??                  <1>     monthOfYear resb 1  ;01h - 0Ch (1 - 12)
    72 00000121 ??                  <1>     years       resb 1  ;00h - FFh (00 = 1980 - 128 = 2107)
    73 00000122 ????                <1>     daysOffset  resw 1  ;Days since 1-1-1980
    74 00000124 ??                  <1>     dayOfWeek   resb 1  ;0 = Sunday <-> 6 = Saturday
    75                              <1> ;String Stuff
    76 00000125 <res FFh>           <1>     asciiBuffer resb 255    ;Have a 255 char buffer for the ascii terminal
    77                              <1> ;Stacks
    78 00000224 <res 528h>          <1>     critStack   resq 165
    79 0000074C ????????????????    <1>     critStakTop resq 1
    80 00000754 <res 638h>          <1>     IOStack     resq 199
    81 00000D8C ????????????????    <1>     IOStakTop   resq 1
    82 00000D94 <res 638h>          <1>     DiskStack   resq 199
    83 000013CC ????????????????    <1>     DiskStakTop resq 1
    84                              <1>     dSegLen     equ     $
    12                                  Segment resSeg follows=.text align=1 vfollows=dSeg valign=1 ;DOS main code seg
    13                                  %include "./Source/Data/staticData.asm"
    14                              <1> 
    15                              <1> ;-----------------------------------:
    16                              <1> ;           Static Data             :
    17                              <1> ;-----------------------------------:
    18 00000000 00                  <1> dosMajor    db 00h      ;Version 0
    19 00000001 01                  <1> dosMinor    db 01h      ;.01
    20 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    20 0000000B 535953              <1>
    21 0000000E 53435042444F53202E- <1> dosKernName db "SCPBDOS .SYS"
    21 00000017 535953              <1>
    22 0000001A 2F                  <1> switchchar  db "/" ;Editable by the Int 41h/ah=37h
    14                                  %include "./Source/Kernel/bufferFunctions.asm"
    15                              <1> ;This file contains miscellaneous disk buffer related functions that
    16                              <1> ; dont fit anywhere else
    17                              <1> 
    18                              <1> readBuffer:
    19                              <1> ;
    20                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
    21                              <1> ;TO CALL!
    22                              <1> ;
    23                              <1> ;This function will return a pointer to the desired data sector OR 
    24                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
    25                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
    26                              <1> ;Entry: rax = Sector to read
    27                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data) 
    28                              <1> ;       rsi = DPB of transacting drive
    29                              <1> ;Exit:  CF = NC : All ok!
    30                              <1> ;       rbx = Pointer to buffer header with valid data in buffer.
    31                              <1> ;       All other registers as before
    32                              <1> ;       CF = CY: Something went wrong, return error code or INT 44h
    33                              <1> ;       ch = 0 -> Data Not Flushed To Disk
    34                              <1> ;       ch = 1 -> Data Not Read From Disk
    35                              <1> ;       rbx = Pointer to buffer containing sector without valid data in buffer ;            (either unflushed or unread)
    36 0000001B 52                  <1>     push rdx
    37 0000001C 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
    38 0000001E E848010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
    39 00000023 4881FBFFFFFFFF      <1>     cmp rbx, -1
    40 0000002A 7403                <1>     je .rbReadNewSector
    41                              <1> .rbExit:
    42 0000002C F8                  <1>     clc
    43                              <1> .rbExitNoFlag:
    44 0000002D 5A                  <1>     pop rdx
    45 0000002E C3                  <1>     ret
    46                              <1> .rbReadNewSector:
    47 0000002F E8C6000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rbx
    48 00000034 4889DD              <1>     mov rbp, rbx
    49 00000037 30ED                <1>     xor ch, ch
    50 00000039 E869000000          <1>     call flushBuffer
    51 0000003E 72ED                <1>     jc .rbExitNoFlag    ;Exit in error
    52                              <1> ;rbp points to bufferHdr that has been appropriately linked to the head of chain
    53 00000040 51                  <1>     push rcx
    54 00000041 885508              <1>     mov byte [rbp + bufferHdr.driveNumber], dl
    55 00000044 884D09              <1>     mov byte [rbp + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA
    56 00000047 4889450A            <1>     mov qword [rbp + bufferHdr.bufferLBA], rax
    57 0000004B 80F902              <1>     cmp cl, fatBuffer
    58 0000004E B201                <1>     mov dl, 1   ;Default values if not fat buffer
    59 00000050 B900000000          <1>     mov ecx, 0  ;Ditto!
    60 00000055 7506                <1>     jne .rbNonFATbuffer
    61 00000057 8A5607              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
    62 0000005A 8B4E12              <1>     mov ecx, dword [rsi + dpb.dFATlength]
    63                              <1> .rbNonFATbuffer:
    64 0000005D 885512              <1>     mov byte [rbp + bufferHdr.bufFATcopy], dl
    65 00000060 894D13              <1>     mov dword [rbp + bufferHdr.bufFATsize], ecx
    66 00000063 48897517            <1>     mov qword [rbp + bufferHdr.driveDPBPtr], rsi
    67 00000067 C6451F00            <1>     mov byte [rbp + bufferHdr.reserved], 0
    68 0000006B 59                  <1>     pop rcx
    69 0000006C FEC5                <1>     inc ch  ;If an error occurs, have the signature in ch
    70 0000006E E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
    71 00000073 EBB8                <1>     jmp short .rbExitNoFlag
    72                              <1> 
    73                              <1> readSectorBuffer:
    74                              <1> ;Reads a sector into a built sector buffer
    75                              <1> ;Entry: rbp = Pointer to buffer header
    76                              <1> ;Exit:  CF=NC : Success
    77                              <1> ;       CF=CY : Fail, terminate the request
    78                              <1> ;       rbx pointing to buffer header
    79                              <1> ;First make request to device driver
    80 00000075 50                  <1>     push rax
    81 00000076 53                  <1>     push rbx
    82 00000077 51                  <1>     push rcx
    83 00000078 52                  <1>     push rdx
    84 00000079 56                  <1>     push rsi
    85                              <1> .rsRequest0:
    86 0000007A BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
    87                              <1> .rsRequest1:
    88 0000007F 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
    89 00000082 B901000000          <1>     mov ecx, 1  ;One sector to copy
    90 00000087 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
    91 0000008B 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
    92 0000008F E871060000          <1>     call absDiskRead    ;Call INT 45h
    93 00000094 7207                <1>     jc .rsFail
    94                              <1> .rsExit:
    95 00000096 F8                  <1>     clc
    96                              <1> .rsExitBad:
    97 00000097 5E                  <1>     pop rsi
    98 00000098 5A                  <1>     pop rdx
    99 00000099 59                  <1>     pop rcx
   100 0000009A 5B                  <1>     pop rbx
   101 0000009B 58                  <1>     pop rax
   102 0000009C C3                  <1>     ret
   103                              <1> .rsFail:
   104                              <1> ;Enter here only if the request failed
   105 0000009D FFCE                <1>     dec esi
   106 0000009F 75DE                <1>     jnz .rsRequest1 ;Try the request again!
   107                              <1> ;Request failed thrice, critical error call
   108 000000A1 F9                  <1>     stc
   109 000000A2 E9F0FFFFFF          <1>     jmp .rsExitBad  ;Abort
   110                              <1> 
   111                              <1> flushBuffer:
   112                              <1> ;Flushes the data in a sector buffer to disk!
   113                              <1> ;Entry: rbp = Pointer to buffer header for this buffer
   114                              <1> ;Exit:  CF=NC : Success
   115                              <1> ;       CF=CY : Fail, terminate the request
   116                              <1> ;First make request to device driver
   117 000000A7 50                  <1>     push rax
   118 000000A8 53                  <1>     push rbx
   119 000000A9 51                  <1>     push rcx
   120 000000AA 52                  <1>     push rdx
   121 000000AB 56                  <1>     push rsi
   122 000000AC F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer    ;Data modified?
   123 000000B0 7433                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   124                              <1> .fbRequest0:
   125 000000B2 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   126                              <1> .fbRequest1:
   127 000000B7 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   128 000000BA B901000000          <1>     mov ecx, 1  ;One sector to copy
   129 000000BF 488B550A            <1>     mov rdx, qword [rbp + bufferHdr.bufferLBA]
   130 000000C3 488B5D20            <1>     mov rbx, qword [rbp + bufferHdr.dataarea]
   131 000000C7 E82B060000          <1>     call absDiskWrite    ;Call INT 46h
   132 000000CC 7222                <1>     jc .fbFail
   133                              <1> ;Now check if the buffer was a FAT, to write additional copies
   134 000000CE F6450902            <1>     test byte [rbp + bufferHdr.bufferFlags], fatBuffer ;FAT buffer?
   135 000000D2 7411                <1>     jz .fbFreeExit  ;If not, exit
   136 000000D4 FE4D12              <1>     dec byte [rbp + bufferHdr.bufFATcopy]
   137 000000D7 740C                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   138 000000D9 8B4513              <1>     mov eax, dword [rbp + bufferHdr.bufFATsize]
   139 000000DC 4801450A            <1>     add qword [rbp + bufferHdr.bufferLBA], rax ;Add the FAT size to the LBA
   140 000000E0 E9CDFFFFFF          <1>     jmp .fbRequest0 ;Make another request
   141                              <1> .fbFreeExit:
   142                              <1> ;Free the buffer if it was flushed successfully
   143 000000E5 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1
   144 000000E9 F8                  <1>     clc
   145                              <1> .fbExitBad:
   146 000000EA 5E                  <1>     pop rsi
   147 000000EB 5A                  <1>     pop rdx
   148 000000EC 59                  <1>     pop rcx
   149 000000ED 5B                  <1>     pop rbx
   150 000000EE 58                  <1>     pop rax
   151 000000EF C3                  <1>     ret
   152                              <1> .fbFail:
   153                              <1> ;Enter here only if the request failed
   154 000000F0 FFCE                <1>     dec esi
   155 000000F2 75C3                <1>     jnz .fbRequest1 ;Try the request again!
   156                              <1> ;Request failed thrice, critical error call
   157 000000F4 F9                  <1>     stc
   158 000000F5 E9F0FFFFFF          <1>     jmp .fbExitBad  ;Abort
   159                              <1>     
   160                              <1> findLRUBuffer: 
   161                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   162                              <1> ; in rbx
   163                              <1> ;Input: Nothing
   164                              <1> ;Output: rbx = Pointer to the buffer hdr to use
   165 000000FA 52                  <1>     push rdx
   166 000000FB 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
   167 00000102 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   168 00000106 7436                <1>     je .flbExit 
   169 00000108 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   170 0000010F 742D                <1>     je .flbExit
   171                              <1> .flbWalk:
   172 00000111 4889DA              <1>     mov rdx, rbx    ;Save a ptr to the previous buffer header
   173 00000114 488B1A              <1>     mov rbx, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   174 00000117 807B08FF            <1>     cmp byte [rbx + bufferHdr.driveNumber], -1
   175 0000011B 7423                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   176 0000011D 48813BFFFFFFFF      <1>     cmp qword [rbx + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   177 00000124 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   178 00000126 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   179                              <1> .flbHeadLink:
   180 0000012D 488B15(8A000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   181 00000134 48891D(8A000000)    <1>     mov qword [bufHeadPtr], rbx    ;Sysvars to point to new buffer
   182 0000013B 488913              <1>     mov qword [rbx + bufferHdr.nextBufPtr], rdx
   183                              <1> .flbExit:
   184 0000013E 5A                  <1>     pop rdx
   185 0000013F C3                  <1>     ret
   186                              <1> .flbFreeLink:
   187 00000140 51                  <1>     push rcx
   188 00000141 488B0B              <1>     mov rcx, qword [rbx + bufferHdr.nextBufPtr]
   189 00000144 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rbx
   190 00000147 59                  <1>     pop rcx
   191 00000148 EBE3                <1>     jmp short .flbHeadLink
   192                              <1> 
   193                              <1> findDirtyBufferForDrive:
   194                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   195                              <1> ;Input: dl = Drive number
   196                              <1> ;Output: rbx = Pointer to dirty buffer for drive letter if exists or -1 if not
   197 0000014A 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
   198                              <1> .fdbfdCheckBuffer:
   199 00000151 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   200 00000154 7507                <1>     jne .fdbfdGotoNextBuffer
   201 00000156 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   202 0000015A 7401                <1>     jz .fdbfdGotoNextBuffer ;Bit not set, goto next buffer
   203                              <1> .fdbfdExit:
   204 0000015C C3                  <1>     ret
   205                              <1> .fdbfdGotoNextBuffer:
   206 0000015D 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   207 00000160 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   208 00000167 74F3                <1>     je .fdbfdExit
   209 00000169 EBE6                <1>     jmp short .fdbfdCheckBuffer
   210                              <1> 
   211                              <1> findSectorInBuffer:
   212                              <1> ;Finds the Buffer for a sector
   213                              <1> ;If the sector is not in a buffer, returns with a -1
   214                              <1> ;Input: rax = Sector number
   215                              <1> ;        dl = Drive number
   216                              <1> ;Output: rbx = Buffer hdr pointer or -1
   217 0000016B 488B1D(8A000000)    <1>     mov rbx, qword [bufHeadPtr]
   218                              <1> .fsiCheckBuffer:
   219 00000172 385308              <1>     cmp byte [rbx + bufferHdr.driveNumber], dl
   220 00000175 7507                <1>     jne .fsiGotoNextBuffer
   221 00000177 4839430A            <1>     cmp qword [rbx + bufferHdr.bufferLBA], rax
   222 0000017B 7501                <1>     jne .fsiGotoNextBuffer
   223                              <1> .fsiExit:
   224 0000017D C3                  <1>     ret
   225                              <1> .fsiGotoNextBuffer:
   226 0000017E 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   227 00000181 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit
   228 00000188 74F3                <1>     je .fsiExit
   229 0000018A EBE6                <1>     jmp short .fsiCheckBuffer
    15                                  %include "./Source/Kernel/fat.asm"
    16                              <1> ;-----------------------------------:
    17                              <1> ;       File System routines        :
    18                              <1> ;-----------------------------------:
    19                              <1> name2Clust:
    20                              <1> ;Converts a file name to a first cluster number
    21                              <1> ;Entry : rbx = Points to ASCIIZ string to parse for a Cluster number
    22                              <1> ;Exit : rax = Cluster number or -1 if file not found
    23                              <1> ;Three cases:
    24                              <1> ;1) Start with a letter and a : => Full path and Drive specified
    25                              <1> ;2) Start with \ => Current Drive and relative path from Current Dir
    26                              <1> ;3) Else => File name in Current Dir
    27 0000018C 56                  <1>     push rsi
    28 0000018D 57                  <1>     push rdi
    29 0000018E 51                  <1>     push rcx
    30 0000018F 52                  <1>     push rdx
    31 00000190 4889DF              <1>     mov rdi, rbx    ;Save string ptr in rdi
    32 00000193 807F013A            <1>     cmp byte [rdi + 1], ":" ;Check it is a colon for full path
    33 00000197 743A                <1>     je .fullPath
    34 00000199 803F5C              <1>     cmp byte [rdi], "\"
    35 0000019C 7435                <1>     je .relPath
    36                              <1>     ;Else search the current dir for an entry
    37 0000019E 480FB605(F2000000)  <1>     movzx rax, byte [currentDrv]   ;Get current drive
    38 000001A6 488D1D(92000000)    <1>     lea rbx, cdsHeadPtr ;Point to cds array
    39 000001AD 48B95B000000000000- <1>     mov rcx, cds_size   
    39 000001B6 00                  <1>
    40 000001B7 31D2                <1>     xor edx, edx
    41 000001B9 F7E1                <1>     mul ecx 
    42 000001BB 4801CB              <1>     add rbx, rcx    ;Move rbx to the right offset in the array
    43 000001BE 8B434D              <1>     mov eax, dword [rbx + cds.dStartCluster]    ;Get start cluster
    44 000001C1 488B7345            <1>     mov rsi, qword [rbx + cds.qDPBPtr]  ;Get dpb ptr in rsi
    45 000001C5 85C0                <1>     test eax, eax
    46 000001C7 7505                <1>     jnz .localFileNoRoot
    47                              <1>     ;Here, we deal with Root Directories
    48 000001C9 E869000000          <1>     call getFATtype ;rsi points to dpb
    49                              <1>     ;if ecx = 2, then FAT 32 and must treat differently
    50                              <1> .localFileNoRoot:
    51 000001CE E886000000          <1>     call clust2FATEntry ;Get the first sector of the directory in eax
    52                              <1> .relPath:
    53                              <1> .fullPath:
    54                              <1> .exit:
    55 000001D3 5A                  <1>     pop rdx
    56 000001D4 59                  <1>     pop rcx
    57 000001D5 5F                  <1>     pop rdi
    58 000001D6 5E                  <1>     pop rsi
    59 000001D7 C3                  <1>     ret
    60                              <1> 
    61                              <1> searchDirectorySectorForEntry:
    62                              <1> ;Proc that searches the sector for the string 
    63                              <1> ; UP UNTIL the NULL char or the path separator
    64                              <1> ;If a . is found in file name, skip it
    65                              <1> ;If a sector entry is found to start with 0, return fail
    66                              <1> ;Entry: rdx = Path Section ptr (point to first A/N char)
    67                              <1> ;       rbx = Sector buffer pointer
    68                              <1> ;       rsi = DPB pointer
    69                              <1> ;Exit: CF=NC => Found, CF=CY => Not found
    70                              <1> ;       If CF=CY read char pointed to by rbx.
    71                              <1> ;       If this char is 0, then end of directory reached!
    72 000001D8 50                  <1>     push rax
    73 000001D9 51                  <1>     push rcx
    74                              <1>     ;cl has number of entries per sector
    75 000001DA 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
    76 000001DD 80E905              <1>     sub cl, 5   ;5 is the number of bytes per dir entry shift
    77 000001E0 B801000000          <1>     mov eax, 1
    78 000001E5 D3E0                <1>     shl eax, cl ;eax has number of directory entries in sector
    79                              <1>     ;Now search each entry for name
    80                              <1>     ;Use ecx as counter for each entry
    81 000001E7 89C1                <1>     mov ecx, eax
    82                              <1> .searchDir:
    83                              <1>     ;Do string compare here, search for / or \ or 0 to exit
    84 000001E9 52                  <1>     push rdx    ;Push the name pointer 
    85 000001EA 53                  <1>     push rbx    ;Push sector pointer
    86                              <1> .searchLoop:
    87 000001EB 8A02                <1>     mov al, byte [rdx] ;Get char in ASCIIZ buffer
    88 000001ED 3C2E                <1>     cmp al, "." ;Verify if name separator or directory entry
    89 000001EF 7423                <1>     je .dotCase
    90 000001F1 3C05                <1>     cmp al, 05h ;Special Case
    91 000001F3 741B                <1>     je .specialCase
    92 000001F5 3C2F                <1>     cmp al, "/" ;Name Found
    93 000001F7 7439                <1>     je .nameFound
    94 000001F9 3C5C                <1>     cmp al, "\" ;Name Found
    95 000001FB 7435                <1>     je .nameFound
    96 000001FD 3C00                <1>     cmp al, 0   ;End of ASCIIZ string!
    97 000001FF 7431                <1>     je .nameFound
    98                              <1> .specRet:
    99 00000201 3A03                <1>     cmp al, byte [rbx]  ;Compare to char in sector buffer
   100 00000203 7517                <1>     jne .nameNotFound
   101 00000205 48FFC3              <1>     inc rbx
   102                              <1> .skipChar:
   103 00000208 48FFC2              <1>     inc rdx
   104 0000020B E9DBFFFFFF          <1>     jmp .searchLoop
   105                              <1> .specialCase:
   106 00000210 B0E5                <1>     mov al, 0E5h
   107 00000212 EBED                <1>     jmp short .specRet
   108                              <1> .dotCase:
   109                              <1> ;Check if next char is geq than 'A'. If yes, path separator
   110 00000214 807A0141            <1>     cmp byte [rdx + 1], 'A'
   111 00000218 7CE7                <1>     jnge .specRet
   112 0000021A EBEC                <1>     jmp short .skipChar
   113                              <1> .nameNotFound:
   114 0000021C 5B                  <1>     pop rbx
   115 0000021D 5A                  <1>     pop rdx
   116 0000021E 803B00              <1>     cmp byte [rbx], 0   ;Are we at the end of the Directory?
   117 00000221 740B                <1>     jz .exitNotOK   ;Exit early, end of directory
   118 00000223 4881C320000000      <1>     add rbx, 20h    ;Goto next sector entry
   119 0000022A FFC9                <1>     dec ecx
   120 0000022C 75BB                <1>     jnz .searchDir
   121                              <1> .exitNotOK:
   122 0000022E F9                  <1>     stc
   123                              <1> .exitOk:
   124 0000022F 59                  <1>     pop rcx
   125 00000230 58                  <1>     pop rax
   126 00000231 C3                  <1>     ret
   127                              <1> .nameFound:
   128 00000232 5B                  <1>     pop rbx
   129 00000233 5A                  <1>     pop rdx
   130 00000234 F8                  <1>     clc
   131 00000235 EBF8                <1>     jmp short .exitOk
   132                              <1> getFATtype:
   133                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
   134                              <1> ;Entry: rsi = DPB to ascertain FAT
   135                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
   136 00000237 53                  <1>     push rbx
   137 00000238 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   138 0000023B B901000000          <1>     mov ecx, 1  ;FAT 16 marker
   139 00000240 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   140 00000246 730F                <1>     jae .exit
   141 00000248 FFC9                <1>     dec ecx     ;FAT 12 marker
   142 0000024A 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   143 00000250 7205                <1>     jb .exit
   144 00000252 B902000000          <1>     mov ecx, 2  ;Must be FAT 32 otherwise
   145                              <1> .exit:
   146 00000257 5B                  <1>     pop rbx
   147 00000258 C3                  <1>     ret
   148                              <1> 
   149                              <1> clust2FATEntry:
   150                              <1> ;Converts a cluster number to a offset in the FAT
   151                              <1> ;Entry:  rsi points to the DPB for the transacting device
   152                              <1> ;        eax = Cluster number to look for
   153                              <1> ;Exit:   eax = Sector on disk of FAT 
   154                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
   155                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
   156 00000259 53                  <1>     push rbx
   157 0000025A 8B5E0E              <1>     mov ebx, dword [rsi + dpb.dClusterCount]
   158 0000025D 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
   159 00000263 731E                <1>     jae .fat32
   160 00000265 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
   161 0000026B 7209                <1>     jb .fat12
   162                              <1> ;FAT16
   163 0000026D D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
   164 0000026F 6801000000          <1>     push qword 1
   165 00000274 EB15                <1>     jmp short .common
   166                              <1> .fat12:
   167 00000276 89C1                <1>     mov ecx, eax    ;ecx = eax
   168 00000278 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
   169 0000027A 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
   170 0000027C 6800000000          <1>     push qword 0
   171 00000281 EB08                <1>     jmp short .common
   172                              <1> .fat32:
   173 00000283 6802000000          <1>     push qword 2
   174 00000288 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
   175                              <1> .common:
   176                              <1> ;eax has the FAToffset
   177 0000028B 8A4E02              <1>     mov cl, byte [rsi + dpb.bBytesPerSectorShift]
   178 0000028E BA01000000          <1>     mov edx, 1
   179 00000293 D3E2                <1>     shl edx, cl    ;Turn edx to number of bytes per sector
   180 00000295 89D1                <1>     mov ecx, edx
   181 00000297 31D2                <1>     xor edx, edx    ;edx = 0
   182 00000299 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
   183 0000029B 0FB75E05            <1>     movzx ebx, word [rsi + dpb.wFAToffset]   ;Add the offset to the first FAT
   184 0000029F 01D8                <1>     add eax, ebx
   185 000002A1 59                  <1>     pop rcx ;Pop the FAT type back into rcx
   186 000002A2 5B                  <1>     pop rbx
   187 000002A3 C3                  <1>     ret
   188                              <1> getStartSectorOfCluster:
   189                              <1> ;Input: eax = Cluster Number
   190                              <1> ;       r9 = dpb pointer
   191                              <1> ;Output: eax = Starting Sector number for cluster
   192                              <1> ;Gives the data sector we are at in the current cluster
   193                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
   194 000002A4 51                  <1>     push rcx
   195 000002A5 2D02000000          <1>     sub eax, 2
   196 000002AA 418A4904            <1>     mov cl, byte [r9 + dpb.bSectorsPerClusterShift]
   197 000002AE D3E0                <1>     shl eax, cl
   198 000002B0 4103410A            <1>     add eax, [r9 + dpb.dClusterHeapOffset]
   199                              <1>     ;eax now has the first sector of the current cluster
   200 000002B4 59                  <1>     pop rcx
   201 000002B5 C3                  <1>     ret
   202                              <1> getNextSectorOfFile:
   203                              <1> ;This function will read the next sector for a file into a buffer.
   204                              <1> ;If the next sector to be read lives in the next cluster, it will update
   205                              <1> ; the file handle of the file being read/written to the new cluster
   206                              <1> ;
   207                              <1> ;Input: r8 = sft pointer
   208                              <1> ;       r9 = dpb pointer
   209                              <1> ;Output:
   210                              <1> ;       rbx = Pointer to buffer data
   211                              <1> ;       CF = NC, buffer OK to read
   212                              <1> ;       CF = CY, buffer not ok, something went wrong
   213                              <1> ;           ZF = ZE(1), Data not flushed to disk
   214                              <1> ;           ZF = NZ(0), Data no read from disk
   215                              <1>     ;Read next sector. If at last sector in cluster, walk map, get
   216                              <1>     ; next cluster and read first sector 
   217 000002B6 50                  <1>     push rax
   218 000002B7 51                  <1>     push rcx
   219 000002B8 52                  <1>     push rdx
   220 000002B9 56                  <1>     push rsi
   221 000002BA 57                  <1>     push rdi
   222                              <1>     ;Check if we need to go to next cluster
   223 000002BB 66418B401F          <1>     mov ax, word [r8 + sft.wRelSect]    ;Upper byte is ALWAYS 0
   224 000002C0 413A4103            <1>     cmp al, byte [r9 + dpb.bMaxSectorInCluster]
   225 000002C4 745F                <1>     je .gotoNextCluster
   226                              <1>     ;Goto next sector
   227 000002C6 6641FF401F          <1>     inc word [r8 + sft.wRelSect]    ;Goto next sector in cluster
   228                              <1> .getSector:
   229 000002CB 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get cluster number
   230 000002CF E8D0FFFFFF          <1>     call getStartSectorOfCluster
   231 000002D4 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Get relative sector number
   232                              <1>     ;eax now has the correct sector in the cluster
   233 000002D9 01D8                <1>     add eax, ebx    
   234                              <1>     ;Read the sector into a buffer
   235                              <1>     ;The sector read here is either DATA or DOS
   236 000002DB 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   237 000002DF 488D3D1CFDFFFF      <1>     lea rdi, dosBIOSName    ;Check if the file being read is the BIOS
   238 000002E6 B90B000000          <1>     mov ecx, 11             ;File name length
   239 000002EB F3A6                <1>     repe cmpsb
   240 000002ED 742D                <1>     je .OSFile
   241 000002EF 498D7026            <1>     lea rsi, qword [r8 + sft.sFileName]
   242 000002F3 488D3D14FDFFFF      <1>     lea rdi, dosKernName
   243 000002FA B90B000000          <1>     mov ecx, 11             ;File name length
   244 000002FF F3A6                <1>     repe cmpsb
   245 00000301 7419                <1>     je .OSFile
   246                              <1>     ;Not an OS file, dataBuffer
   247 00000303 B108                <1>     mov cl, dataBuffer
   248                              <1> .getSectorRead:
   249 00000305 4C89CE              <1>     mov rsi, r9
   250 00000308 E80EFDFFFF          <1>     call readBuffer
   251 0000030D 7211                <1>     jc .getSectorFailed
   252 0000030F 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   253                              <1> .getSectorExit:
   254 00000316 5F                  <1>     pop rdi
   255 00000317 5E                  <1>     pop rsi
   256 00000318 5A                  <1>     pop rdx
   257 00000319 59                  <1>     pop rcx
   258 0000031A 58                  <1>     pop rax
   259 0000031B C3                  <1>     ret
   260                              <1> .OSFile:
   261 0000031C B101                <1>     mov cl, dosBuffer
   262 0000031E EBE5                <1>     jmp short .getSectorRead
   263                              <1> .getSectorFailed:
   264                              <1>     ;CF = CY => Something went wrong!
   265                              <1>     ;   Set the Zero flag for data not flushed to disk
   266                              <1>     ;   Clear Zero flag for data not read from disk
   267 00000320 84ED                <1>     test ch, ch ;This sets the zero flag correctly, but mangles CF
   268 00000322 F9                  <1>     stc ;Set the carry flag!
   269 00000323 EBF1                <1>     jmp short .getSectorExit
   270                              <1> 
   271                              <1> .gotoNextCluster:
   272                              <1>     ;Read FAT, find next cluster in cluster map, update SFT entries
   273 00000325 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr] ;Get the current cluster
   274 00000329 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi, eax has cluster number
   275 0000032C E828FFFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   276 00000331 410FB75905          <1>     movzx ebx, word [r9 + dpb.wFAToffset]
   277 00000336 01D8                <1>     add eax, ebx    ;Add the FAT offset to the sector
   278 00000338 B102                <1>     mov cl, fatBuffer
   279 0000033A E8DCFCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   280 0000033F 72DF                <1>     jc .getSectorFailed
   281                              <1>     ;Check if FAT 12, 16, 32
   282 00000341 4885FF              <1>     test rdi, rdi
   283 00000344 7429                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   284 00000346 48F7C701000000      <1>     test rdi, 1
   285 0000034D 7407                <1>     jz .goToNextClusterCommonFat32
   286                              <1>     ;Here we handle FAT16
   287 0000034F 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   288 00000354 EB09                <1>     jmp short .goToNextClusterCommon
   289                              <1> .goToNextClusterCommonFat32:
   290 00000356 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   291 0000035A 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   292                              <1> .goToNextClusterCommon:
   293 0000035F 41894039            <1>     mov dword [r8 + sft.dAbsClusr], eax ;Save new cluster number
   294 00000363 6641C7401F0000      <1>     mov word [r8 + sft.wRelSect], 0 ;First sector in next cluster
   295 0000036A E95CFFFFFF          <1>     jmp .getSector
   296                              <1> .gotoNextClusterFat12:
   297                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   298                              <1> ;eax has the sector of the FAT, offset into the sector is in edx
   299 0000036F 4889DF              <1>     mov rdi, rbx    ;Save previous buffer header in rdi
   300 00000372 FFC0                <1>     inc eax ;Get next sector
   301 00000374 E8A2FCFFFF          <1>     call readBuffer ;Buffer Header in ebx
   302 00000379 72A5                <1>     jc .getSectorFailed
   303                              <1>     ;rdi has first buffer header, rbx has second buffer header
   304                              <1>     ;rdx has offset into first header for entry
   305 0000037B 41F7403901000000    <1>     test dword [r8 + sft.dAbsClusr], 1  ;Check if cluster is odd
   306 00000383 7429                <1>     jz .gotoNextClusterFat12Even
   307                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   308 00000385 B801000000          <1>     mov eax, 1
   309 0000038A 418A4802            <1>     mov cl, byte [r8 + dpb.bBytesPerSectorShift]
   310 0000038E D3E0                <1>     shl eax, cl
   311 00000390 29D0                <1>     sub eax, edx
   312 00000392 FFC8                <1>     dec eax ;If edx = BytesPerSector - 1 then it crosses, else no
   313 00000394 750E                <1>     jnz .gotoNextClusterFat12NoCross
   314                              <1>     ;Boundary cross, build entry properly
   315 00000396 31C0                <1>     xor eax, eax
   316 00000398 8A441720            <1>     mov al, byte [rdi + bufferHdr.dataarea + rdx]
   317 0000039C 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   318 0000039F C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   319 000003A2 EBBB                <1>     jmp short .goToNextClusterCommon
   320                              <1> .gotoNextClusterFat12NoCross:
   321 000003A4 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   322 000003A9 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   323 000003AC EBB1                <1>     jmp short .goToNextClusterCommon
   324                              <1> .gotoNextClusterFat12Even:
   325                              <1>     ;Here the cluster is even and can't cross a sector boundary
   326 000003AE 0FB7441720          <1>     movzx eax, word [rdi + bufferHdr.dataarea + rdx]    ;Read the entry
   327 000003B3 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   328 000003B8 EBA5                <1>     jmp short .goToNextClusterCommon
   329                              <1> ;---------------------------------------------------:
   330                              <1> ;                   KERNEL FUNCTIONS                :
   331                              <1> ;---------------------------------------------------:
   332                              <1> makeDIR:           ;ah = 39h
   333                              <1> removeDIR:         ;ah = 3Ah
   334                              <1> changeCurrentDIR:  ;ah = 3Bh, changes directory for current drive
   335                              <1> getCurrentDIR:     ;ah = 47h
   336                              <1> getSetFileDateTime:;ah = 57h
   337                              <1> trueName:          ;ah = 60h, get fully qualified name
   338 000003BA C3                  <1>     ret
    16                                  %include "./Source/Kernel/charFunctions.asm"
    17                              <1> ;Dos default char functions live here
    18                              <1> 
    19                              <1> stdinReadEcho:     ;ah = 01h
    20                              <1> ;Return char that has been read and echoed in al
    21 000003BB 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    22 000003C2 488D0566000000      <1>     lea rax, .stdinReadEchoBuffer
    23 000003C9 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    24 000003CC C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    25 000003D0 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    26 000003D6 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    27 000003DA C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    28 000003E1 FF1515110000        <1>     call qword [conHdr + drvHdr.strPtr]
    29 000003E7 FF1517110000        <1>     call qword [conHdr + drvHdr.intPtr]
    30 000003ED 803D3B00000000      <1>     cmp byte [.stdinReadEchoBuffer], 00h
    31 000003F4 7432                <1>     jz .stdireexit
    32 000003F6 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    33 000003FD 488D052B000000      <1>     lea rax, .stdinReadEchoBuffer
    34 00000404 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    35 00000407 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    36 0000040B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    37 00000411 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    38 00000415 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    39 0000041C FF15DA100000        <1>     call qword [conHdr + drvHdr.strPtr]
    40 00000422 FF15DC100000        <1>     call qword [conHdr + drvHdr.intPtr]
    41                              <1> .stdireexit:
    42 00000428 8A0501000000        <1>     mov al, byte [.stdinReadEchoBuffer]
    43 0000042E C3                  <1>     ret
    44 0000042F 00                  <1> .stdinReadEchoBuffer    db 0
    45                              <1> stdoutWrite:       ;ah = 02h
    46                              <1> ;Bspace is regular cursor left, does not insert a blank
    47 00000430 881533000000        <1>     mov byte [.stdoutWriteBuffer], dl
    48 00000436 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    49 0000043D 488D1525000000      <1>     lea rdx, .stdoutWriteBuffer
    50 00000444 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    51 00000447 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    52 0000044B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    53 00000451 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    54 00000455 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    55 0000045C FF159A100000        <1>     call qword [conHdr + drvHdr.strPtr]
    56 00000462 FF159C100000        <1>     call qword [conHdr + drvHdr.intPtr]
    57 00000468 C3                  <1>     ret
    58 00000469 00                  <1> .stdoutWriteBuffer db 0
    59                              <1> stdauxRead:        ;ah = 03h
    60                              <1> stdauxWrite:       ;ah = 04h
    61                              <1> stdprnWrite:       ;ah = 05h
    62                              <1> directCONIO:       ;ah = 06h
    63                              <1> waitDirectInNoEcho:;ah = 07h
    64                              <1> ;Return char in al
    65 0000046A 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    66 00000471 488D052B000000      <1>     lea rax, .function7buffer
    67 00000478 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    68 0000047B C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], 04h   ;Read a byte
    69 0000047F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    70 00000485 4889430E            <1>     mov qword [rbx + ioReqPkt.bufptr], rax
    71 00000489 C7431601000000      <1>     mov dword [rbx + ioReqPkt.tfrlen], 01
    72 00000490 FF1566100000        <1>     call qword [conHdr + drvHdr.strPtr]
    73 00000496 FF1568100000        <1>     call qword [conHdr + drvHdr.intPtr]
    74 0000049C 8A0501000000        <1>     mov al, byte [.function7buffer]
    75 000004A2 C3                  <1>     ret
    76 000004A3 00                  <1> .function7buffer    db 0
    77                              <1> waitStdinNoEcho:   ;ah = 08h
    78 000004A4 C3                  <1>     ret
    79                              <1> printString:       ;ah = 09h
    80 000004A5 31C9                <1>     xor ecx, ecx    ;Clear char counter
    81 000004A7 B824000000          <1>     mov eax, "$"    ;Terminating char
    82 000004AC 4889D7              <1>     mov rdi, rdx    ;Set up for scasb
    83                              <1> .ps0:   ;Search for $ to get count of chars
    84 000004AF AE                  <1>     scasb
    85 000004B0 7404                <1>     je .ps1
    86 000004B2 FFC1                <1>     inc ecx
    87 000004B4 EBF9                <1>     jmp short .ps0
    88                              <1> .ps1:   ;Use handle 
    89 000004B6 488D1D(0C000000)    <1>     lea rbx, charReqHdr ;Get the address of this request block
    90 000004BD C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
    91 000004C0 C6430208            <1>     mov byte [rbx + ioReqPkt.cmdcde], 08h   ;Write a byte
    92 000004C4 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0 ;Zero status word
    93 000004CA 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
    94 000004CE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
    95 000004D1 FF1525100000        <1>     call qword [conHdr + drvHdr.strPtr]
    96 000004D7 FF1527100000        <1>     call qword [conHdr + drvHdr.intPtr]
    97                              <1> 
    98 000004DD 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
    99 000004E4 8A03                <1>     mov al, byte [rbx+callerFrame.rax]      ;Gets al to preserve it
   100 000004E6 C3                  <1>     ret
   101                              <1> buffStdinInput:    ;ah = 0Ah
   102                              <1> checkStdinStatus:  ;ah = 0Bh
   103                              <1> clearbuffDoFunc:   ;ah = 0Ch
    17                                  %include "./Source/Kernel/fcbFunctions.asm"
    18                              <1> openFileFCB:       ;ah = 0Fh
    19                              <1> closeFileFCB:      ;ah = 10h
    20                              <1> findFirstFileFCB:  ;ah = 11h
    21                              <1> findNextFileFCB:   ;ah = 12h
    22                              <1> deleteFileFCB:     ;ah = 13h
    23                              <1> sequentialReadFCB: ;ah = 14h
    24                              <1> sequentialWriteFCB:;ah = 15h
    25                              <1> createFileFCB:     ;ah = 16h
    26                              <1> renameFileFCB:     ;ah = 17h
    27 000004E7 C3                  <1>     ret
    28                              <1> setDTA:            ;ah = 1Ah
    29                              <1> ;Called with:
    30                              <1> ;   rdx = Pointer to the new default DTA
    31 000004E8 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
    32 000004EF 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
    33 000004F3 488915(D0000000)    <1>     mov qword [currentDTA], rdx
    34 000004FA C3                  <1>     ret
    35                              <1> randomReadFCB:     ;ah = 21h
    36                              <1> randomWriteFCB:    ;ah = 22h
    37                              <1> getFileSizeFCB:    ;ah = 23h
    38                              <1> setRelRecordFCB:   ;ah = 24h
    39                              <1> randBlockReadFCB:  ;ah = 27h
    40                              <1> randBlockWriteFCB: ;ah = 28h
    41                              <1> parseFilenameFCB:  ;ah = 29h
    42 000004FB C3                  <1>     ret
    43                              <1> getDTA:            ;ah = 2Fh
    44 000004FC 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
    45 00000503 488B1D(D0000000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
    46 0000050A 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
    47 0000050E C3                  <1>     ret
    18                                  %include "./Source/Kernel/handleFunctions.asm"
    19                              <1> ;-----------------------------------:
    20                              <1> ;    File Handle Kernel routines    :
    21                              <1> ;-----------------------------------:
    22                              <1> 
    23                              <1> createFileHdl:     ;ah = 3Ch, handle function
    24                              <1> openFileHdl:       ;ah = 3Dh, handle function
    25                              <1> closeFileHdl:      ;ah = 3Eh, handle function
    26 0000050F C3                  <1>     ret
    27                              <1> readFileHdl:       ;ah = 3Fh, handle function
    28 00000510 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
    29 00000517 E83F000000          <1>     call getSFTPtr
    30 0000051C 722B                <1>     jc .rfhErrorHandle  ;Function can only fail for bad file handle
    31                              <1> ;Here rdi points to the correct SFT 
    32 0000051E 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    33 00000522 A802                <1>     test al, RWAccess  ;Check r/w permission
    34 00000524 7504                <1>     jnz .rfh2   ;Bit set, proceed
    35 00000526 84C0                <1>     test al, al  ;Check read access (it is 0)
    36 00000528 751F                <1>     jnz .rfhNoPermission    ;If not zero then it is write only permission
    37                              <1> .rfh2:
    38                              <1>     ;So now read the number of bytes from the data buffers
    39 0000052A 4889FB              <1>     mov rbx, rdi    ;Move SFT pointer into rbx
    40 0000052D F6430520            <1>     test byte [rbx + sft.wDeviceInfo], devBinary
    41 00000531 7409                <1>     jz .rfhASCII    ;If not set, read in ASCII
    42 00000533 E870000000          <1>     call readBinaryBytesFromFile
    43 00000538 720F                <1>     jc .rfCriticalError
    44 0000053A EB07                <1>     jmp short .rfhExitOK
    45                              <1> .rfhASCII:
    46 0000053C E866000000          <1>     call readASCIIBytesFromFile
    47 00000541 7206                <1>     jc .rfCriticalError
    48                              <1> .rfhExitOK:
    49 00000543 88C8                <1>     mov al, cl  ;Get low byte in cl
    50 00000545 894D00              <1>     mov dword [rbp + callerFrame.rax], ecx  ;Save number of bytes transf.
    51 00000548 C3                  <1>     ret
    52                              <1> .rfCriticalError:
    53                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    54                              <1> .rfhErrorHandle:
    55                              <1>     ;Fail due to bad file handle provided
    56                              <1> .rfhNoPermission:
    57                              <1>     ;Fail due to bad permissions
    58                              <1> writeFileHdl:      ;ah = 40h, handle function
    59 00000549 E80D000000          <1>     call getSFTPtr
    60 0000054E 720A                <1>     jc .wfhErrorHandle  ;Function can only fail for bad file handle
    61 00000550 668B4702            <1>     mov ax, word [rdi + sft.wOpenMode]  ;Get open mode
    62 00000554 66A90300            <1>     test ax, 3
    63 00000558 7400                <1>     jz .wfhNoPermission ;Bad permissions! No r/w or w permissions
    64                              <1> .wfCriticalError:
    65                              <1>     ;Fail due to driver error. Invoke Int 44h if set to in SFT
    66                              <1> .wfhErrorHandle:
    67                              <1>     ;Fail due to bad file handle provided
    68                              <1> .wfhNoPermission:
    69                              <1>     ;Fail due to bad permissions
    70                              <1> 
    71                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
    72                              <1> movFileReadPtr:    ;ah = 42h, handle function, LSEEK
    73                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
    74                              <1> ioctrl:            ;ah = 44h, handle function
    75                              <1> duplicateHandle:   ;ah = 45h, handle function
    76                              <1> forceDuplicateHdl: ;ah = 46h, handle function
    77                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
    78                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
    79                              <1> renameFile:        ;ah = 56h
    80                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
    81                              <1> createNewFile:     ;ah = 5Bh
    82                              <1> lockUnlockFile:    ;ah = 5Ch
    83                              <1> setHandleCount:    ;ah = 67h
    84                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
    85 0000055A C3                  <1>     ret
    86                              <1> ;-----------------------------------:
    87                              <1> ;        File Handle routines       :
    88                              <1> ;-----------------------------------:
    89                              <1> getSFTPtr:
    90                              <1> ;Gets the SFT pointer for a given file handle from the calling application
    91                              <1> ;On entry:
    92                              <1> ;   bl = File handle
    93                              <1> ;On exit:
    94                              <1> ;   rsi = currentPSP
    95                              <1> ;   rdi = SFT pointer
    96                              <1> ;   rax, rbx trashed
    97 0000055B 488B35(D8000000)    <1>     mov rsi, qword [currentPSP]
    98 00000562 480FB6DB            <1>     movzx rbx, bl
    99 00000566 8A5C1E2A            <1>     mov bl, byte [rsi + psp.jobFileTbl + rbx]   ;Use jft entry to get sft num
   100 0000056A 31C0                <1>     xor eax, eax
   101 0000056C 488B3D(70000000)    <1>     mov rdi, qword [sftHeadPtr]
   102                              <1> .gsp0:
   103 00000573 66034708            <1>     add ax, word [rdi + sfth.wNumFiles]
   104 00000577 38D8                <1>     cmp al, bl  ;Check if the file header block contains the entry
   105 00000579 760E                <1>     jbe .gsp1   ;IF bl is below or equal to al then it does
   106 0000057B 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of list
   107 00000582 7421                <1>     je .gspFail   ;If we have a number greater than the last entry, fail
   108 00000584 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Walk the chain
   109 00000587 EBEA                <1>     jmp short .gsp0 ;Search again
   110                              <1> .gsp1: 
   111                              <1>     ;Now point to the right entry
   112 00000589 28D8                <1>     sub al, bl  ;Subtract the number from the total so far to get offset
   113 0000058B 0FB6C0              <1>     movzx eax, al
   114 0000058E 4881C70A000000      <1>     add rdi, sfth_size  ;Point to first file in table
   115 00000595 84C0                <1>     test al, al ;Check if rdi points to the first file in this block
   116 00000597 740B                <1>     jz .gsp12   ;Skip walking down the sft blocks
   117                              <1> .gsp11:
   118 00000599 4881C73D000000      <1>     add rdi, sft_size
   119 000005A0 FEC8                <1>     dec al
   120 000005A2 75F5                <1>     jnz .gsp11  ;Keep adding one until al is zero
   121                              <1> .gsp12:
   122 000005A4 C3                  <1>     ret
   123                              <1> .gspFail:
   124 000005A5 F9                  <1>     stc
   125 000005A6 C3                  <1>     ret
   126                              <1> 
   127                              <1> readASCIIBytesFromFile:
   128 000005A7 C3                  <1>     ret
   129                              <1> readBinaryBytesFromFile:
   130                              <1> ;Reads a byte from a SFT entry, does not translate it. 
   131                              <1> ;Read or RW permissions are checked at the INT 41h level
   132                              <1> ;Entry: rbp = Pointer to the caller stack
   133                              <1> ;       rbx = SFT entry pointer
   134                              <1> ;       On stack:
   135                              <1> ;           rdx = Address of the data buffer to read to
   136                              <1> ;           ecx = Number of bytes to read
   137                              <1> ;Exit: If CF = NC : All ok!
   138                              <1> ;       rbx = SFT entry pointer
   139                              <1> ;       ecx = Number of chars read/written
   140                              <1> ;      If CF = CY : Error!
   141                              <1> ;       rbx = SFT entry pointer
   142                              <1> ;       al = Error code to ret if user returns fail from int 44h or no int 44h
   143                              <1> 
   144 000005A8 66F743058000        <1>     test word [rbx + sft.wDeviceInfo], devCharDev
   145 000005AE 755C                <1>     jnz .readBinaryBytesFromCharDevice
   146                              <1> .readBinaryBytesFromHardFile:
   147                              <1> ;Disk files are accessed from here
   148                              <1> ;Use the sector buffers if the data is already buffered,
   149                              <1> ; else use the dpb to fill a sector buffer
   150 000005B0 53                  <1>     push rbx
   151 000005B1 4989D8              <1>     mov r8, rbx                     ;Use r8 as sft pointer
   152 000005B4 4D8B4807            <1>     mov r9, qword [r8 + sft.qPtr]   ;Use r9 as dpb pointer
   153                              <1>     ;First compute the number of bytes to read for the current sector
   154                              <1>     ;Compute how many bytes in a sector
   155 000005B8 418A4902            <1>     mov cl, byte [r9 + dpb.bBytesPerSectorShift]
   156 000005BC B801000000          <1>     mov eax, 1
   157 000005C1 D3E0                <1>     shl eax, cl
   158 000005C3 89C1                <1>     mov ecx, eax    ;ecx has bytes per sector
   159 000005C5 488B4510            <1>     mov rax, qword [rbp + callerFrame.rcx]  ;Get total number of bytes
   160 000005C9 31D2                <1>     xor edx, edx
   161 000005CB 48895510            <1>     mov qword [rbp + callerFrame.rcx], rdx  ;Zero this field
   162 000005CF F7F1                <1>     div ecx ;Divide by number of bytes per sector
   163 000005D1 87CA                <1>     xchg ecx, edx    ;Get "in current sector remainder of bytes" in ecx
   164                              <1>                      ;and bytes per sector in edx
   165 000005D3 418B4039            <1>     mov eax, dword [r8 + sft.dAbsClusr]  ;Get cluster number
   166 000005D7 E8C8FCFFFF          <1>     call getStartSectorOfCluster
   167 000005DC 410FB7581F          <1>     movzx ebx, word [r8 + sft.wRelSect] ;Add the offset into the cluster
   168 000005E1 01D8                <1>     add eax, ebx    ;eax now has the sector number
   169 000005E3 4C89CE              <1>     mov rsi, r9 ;Move dpb pointer into rsi
   170 000005E6 4831FF              <1>     xor rdi, rdi
   171 000005E9 89CF                <1>     mov edi, ecx    ;Save in current sector remainder of bytes in edi
   172 000005EB B108                <1>     mov cl, dataBuffer
   173 000005ED E829FAFFFF          <1>     call readBuffer ;Read the data
   174 000005F2 7218                <1>     jc .readBinaryBytesFromHardFileError
   175 000005F4 4881C320000000      <1>     add rbx, bufferHdr.dataarea
   176 000005FB 4889DE              <1>     mov rsi, rbx
   177 000005FE 4889F9              <1>     mov rcx, rdi    ;Get the number of bytes to read in this sector to rbx
   178 00000601 488B7D18            <1>     mov rdi, qword [rbp + callerFrame.rdx]  ;Point to destination
   179 00000605 48014D10            <1>     add qword [rbp + callerFrame.rcx], rcx
   180 00000609 F3A4                <1>     rep movsb   ;Move the bytes from this sector
   181                              <1> 
   182 0000060B 5B                  <1>     pop rbx
   183                              <1> .readBinaryBytesFromHardFileError:
   184                              <1> 
   185                              <1> .readBinaryBytesFromCharDevice:
   186                              <1> ;Devices are accessed from here
   187 0000060C 488B6B07            <1>     mov rbp, qword [rbx + sft.qPtr] ;Get device driver header pointer
   188 00000610 53                  <1>     push rbx
   189 00000611 488D1D(0C000000)    <1>     lea rbx, charReqHdr
   190 00000618 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   191 0000061B C6430204            <1>     mov byte [rbx + ioReqPkt.cmdcde], drvREAD
   192 0000061F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   193 00000625 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   194 00000629 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   195                              <1> 
   196 0000062C FF550A              <1>     call qword [rbp + drvHdr.strPtr]
   197 0000062F FF5512              <1>     call qword [rbp + drvHdr.intPtr]
   198 00000632 8B4316              <1>     mov eax, dword [rbx + ioReqPkt.tfrlen] ;Get number of bytes read
   199 00000635 66F743030080        <1>     test word [rbx + ioReqPkt.status], 8000h    ;Test the error bit is set
   200 0000063B 5B                  <1>     pop rbx
   201 0000063C 7400                <1>     jz .readBinaryBytesExitGood  ;Error bit not set, all good!
   202                              <1> .readBinaryBytesExitGood:
   203 0000063E C3                  <1>     ret
   204                              <1> 
    19                                  %include "./Source/Kernel/memoryFunctions.asm"
    20                              <1> ;Memory related functions
    21                              <1> 
    22                              <1> ;-----------------------------------:
    23                              <1> ;  Memory related Kernel routines   :
    24                              <1> ;-----------------------------------:
    25                              <1> allocateMemory:    ;ah = 48h
    26                              <1> freeMemory:        ;ah = 49h
    27                              <1> reallocMemory:     ;ah = 4Ah
    28                              <1> getsetMallocStrat: ;ah = 58h
    29 0000063F C3                  <1>     ret
    30                              <1> ;-----------------------------------:
    31                              <1> ;      Memory related routines      :
    32                              <1> ;-----------------------------------:
    33                              <1> verifyIntegrityOfMCBChain:
    34 00000640 488B1D(60000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
    35                              <1> .ok:
    36 00000647 803B4D              <1>     cmp byte [rbx + mcb.marker], 'M'
    37 0000064A 7406                <1>     je .ok1
    38 0000064C 803B5A              <1>     cmp byte [rbx + mcb.marker], "Z"    ;End of the chain?
    39 0000064F 7509                <1>     jne .sysHalt    ;It was not M or Z, fail violently
    40                              <1> .exit:
    41 00000651 C3                  <1>     ret ;We have reached the end of the chain, return all good!
    42                              <1> .ok1:
    43 00000652 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
    44 00000655 4801C3              <1>     add rbx, rax
    45 00000658 EBED                <1>     jmp short .ok
    46                              <1> .sysHalt:
    47                              <1> ;Only arrive here if the integrity of the system is not verified
    48                              <1> ;Lock the system
    49 0000065A 488D1D0E000000      <1>     lea rbx, .sysHltString
    50 00000661 B409                <1>     mov ah, 09h
    51 00000663 CD41                <1>     int 41h
    52 00000665 FA                  <1>     cli ;Halt interrupts
    53 00000666 B0FF                <1>     mov al, 0FFh    ;Mask IRQ lines 
    54 00000668 E6A1                <1>     out 0A1h, al
    55 0000066A E621                <1>     out 021h, al
    56 0000066C F4                  <1>     hlt             ;Halt the system
    57 0000066D EBFB                <1>     jmp short $ - 3 ;Go back far enough to capture the hlt
    58 0000066F 4D656D6F727920616C- <1> .sysHltString db "Memory allocation error",0Dh,0Ah,
    58 00000678 6C6F636174696F6E20- <1>
    58 00000681 6572726F720D0A      <1>
    59 00000688 43616E6E6F74206C6F- <1>               db "Cannot load COMMAND, system halted$"
    59 00000691 616420434F4D4D414E- <1>
    59 0000069A 442C2073797374656D- <1>
    59 000006A3 2068616C74656424    <1>
    20                                  %include "./Source/Kernel/dateTimeFunctions.asm"
    21                              <1> ;Major kernel date time functions and subroutines
    22                              <1> 
    23                              <1> getDate:           ;ah = 2Ah
    24                              <1> setDate:           ;ah = 2Bh
    25                              <1> getTime:           ;ah = 2Ch
    26                              <1> setTime:           ;ah = 2Dh
    27 000006AB C3                  <1>     ret
    21                                  %include "./Source/Kernel/localisation.asm"
    22                              <1> ;Localisation based functions live here
    23                              <1> 
    24                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
    25                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    26                              <1> getExtLocalInfo:   ;ah = 65h, Get Extended Country Info
    27                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage, reserved
    28 000006AC C3                  <1>     ret
    22                                  %include "./Source/Kernel/dosKernel.asm"
    23                              <1> ;-----------------------------------:
    24                              <1> ;       Misc System routines        :
    25                              <1> ;-----------------------------------:
    26                              <1> criticalDOSError:
    27                              <1> ;Will swap stacks and enter int 44h safely and handle passing the right data 
    28                              <1> ; to the critical error handler.
    29                              <1> ; Called with ax, di and rsi set as required by Int 44h (caller decides)
    30                              <1> ;               AH = Critical Error Bitfield
    31                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    32                              <1> ;               Bit 6 - Reserved
    33                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    34                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    35                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    36                              <1> ;               Bits [2-1] = Affected Disk Error
    37                              <1> ;                     0 0   DOS area
    38                              <1> ;                     0 1   FAT area
    39                              <1> ;                     1 0   Directory area
    40                              <1> ;                     1 1   Data area
    41                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    42                              <1> ;               AL  = Failing drive number if AH[7] = 0
    43                              <1> ;               DIL = Error code for errorMsg
    44                              <1> ;               RSI = EA of Device Header for which device the error occured
    45                              <1> ;Return:
    46                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    47                              <1> ;                  = 1 - Retry the Operation    (Retry)
    48                              <1> ;                  = 2 - Terminate the Program  (Abort)
    49                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    50                              <1> ; Return response from int 44h in al
    51 000006AD FA                  <1>     cli ;Disable Interrupts
    52 000006AE C605(C8000000)01    <1>     mov byte [critErrFlag], 1   ;Set flag for critical error
    53 000006B5 488925(F5000000)    <1>     mov qword [xInt44hRSP], rsp
    54 000006BC 488B25(09010000)    <1>     mov rsp, qword [oldRSP] ;Get the old RSP value
    55 000006C3 CD44                <1>     int 44h ;Call critical error handler
    56 000006C5 488B25(F5000000)    <1>     mov rsp, qword [xInt44hRSP] ;Return to the stack of the function that failed
    57 000006CC C605(C8000000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
    58 000006D3 FB                  <1>     sti ;Reenable Interrupts
    59 000006D4 C3                  <1>     ret
    60                              <1> 
    61                              <1> findDPB:
    62                              <1> ;Finds the DPB for a given drive
    63                              <1> ;Input:  dl = Drive number (0=A, 1=B etc...)
    64                              <1> ;Output: al = 00, rbp = Pointer to the DPB
    65                              <1> ;        al = -1, Failed, no DPB for device, rbx destroyed
    66 000006D5 488B1D(68000000)    <1>     mov rbx, qword [dpbHeadPtr]
    67                              <1> .fd1:
    68 000006DC 30C0                <1>     xor al, al
    69 000006DE 385500              <1>     cmp byte [rbp + dpb.bDriveNumber], dl
    70 000006E1 740F                <1>     je .fd2
    71 000006E3 488B6D24            <1>     mov rbp, qword [rbp + dpb.qNextDPBPtr]
    72 000006E7 B0FF                <1>     mov al, -1
    73 000006E9 4881FDFFFFFFFF      <1>     cmp rbp, -1 ;If rbx followed last item in list, no DPB exists for dl
    74 000006F0 75EA                <1>     jne .fd1
    75                              <1> .fd2:
    76 000006F2 C3                  <1>     ret
    77                              <1> ;-----------------------------------:
    78                              <1> ;        Interrupt routines         :
    79                              <1> ;-----------------------------------:
    80                              <1> terminateProcess:   ;Int 40h
    81 000006F3 48CF                <1>     iretq
    82                              <1> terminateHandler:   ;Int 42h
    83                              <1> ctrlCHandler:       ;Int 43h
    84 000006F5 48CF                <1>     iretq
    85                              <1> absDiskWrite:       ;Int 46h
    86                              <1> ;al = Drive number
    87                              <1> ;rbx = Memory Buffer address to read from
    88                              <1> ;ecx = Number of sectors to write
    89                              <1> ;rdx = Start LBA to write to
    90 000006F7 50                  <1>     push rax
    91 000006F8 53                  <1>     push rbx
    92 000006F9 52                  <1>     push rdx
    93 000006FA 55                  <1>     push rbp
    94 000006FB B408                <1>     mov ah, drvWRITE
    95 000006FD 0225(F4000000)      <1>     add ah, byte [verifyFlag]   ;Change to Write/Verify if set
    96 00000703 EB06                <1>     jmp short absDiskReadWriteCommon
    97                              <1> absDiskRead:        ;Int 45h
    98                              <1> ;al = Drive number
    99                              <1> ;rbx = Memory Buffer address to write to
   100                              <1> ;ecx = Number of sectors to read
   101                              <1> ;rdx = Start LBA to read from
   102 00000705 50                  <1>     push rax
   103 00000706 53                  <1>     push rbx
   104 00000707 52                  <1>     push rdx
   105 00000708 55                  <1>     push rbp
   106 00000709 B404                <1>     mov ah, drvREAD
   107                              <1> absDiskReadWriteCommon:
   108                              <1> ;Entered with the appropriate function number in ah
   109 0000070B 52                  <1>     push rdx    ;Save start LBA
   110 0000070C 50                  <1>     push rax
   111 0000070D 88C2                <1>     mov dl, al
   112 0000070F E8C1FFFFFF          <1>     call findDPB   ;Get dpb ptr in rbp
   113 00000714 58                  <1>     pop rax
   114 00000715 5A                  <1>     pop rdx
   115                              <1> 
   116 00000716 C605(36000000)2A    <1>     mov byte [diskReqHdr + ioReqPkt.hdrlen], ioReqPkt_size
   117 0000071D 8805(37000000)      <1>     mov byte [diskReqHdr + ioReqPkt.unitnm], al
   118 00000723 8825(38000000)      <1>     mov byte [diskReqHdr + ioReqPkt.cmdcde], ah
   119 00000729 66C705(39000000)00- <1>     mov word [diskReqHdr + ioReqPkt.status], 0
   119 00000731 00                  <1>
   120 00000732 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   121 00000735 8805(43000000)      <1>     mov byte [diskReqHdr + ioReqPkt.medesc], al
   122 0000073B 48891D(44000000)    <1>     mov qword [diskReqHdr + ioReqPkt.bufptr], rbx
   123 00000742 488915(50000000)    <1>     mov qword [diskReqHdr + ioReqPkt.strtsc], rdx
   124 00000749 890D(4C000000)      <1>     mov dword [diskReqHdr + ioReqPkt.tfrlen], ecx
   125 0000074F 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Get driver pointer
   126                              <1> 
   127 00000753 488D1D(36000000)    <1>     lea rbx, diskReqHdr
   128 0000075A FF520A              <1>     call qword [rdx + drvHdr.strPtr]  ;Call with ptr to request block in rbx
   129 0000075D FF5212              <1>     call qword [rdx + drvHdr.intPtr]
   130 00000760 5D                  <1>     pop rbp
   131 00000761 5A                  <1>     pop rdx
   132 00000762 5B                  <1>     pop rbx
   133 00000763 58                  <1>     pop rax
   134 00000764 66F705(39000000)00- <1>     test word [diskReqHdr + ioReqPkt.status], 8000h
   134 0000076C 80                  <1>
   135 0000076D 7402                <1>     je .absDiskError
   136 0000076F F8                  <1>     clc
   137 00000770 C3                  <1>     ret
   138                              <1> .absDiskError:
   139 00000771 8A05(39000000)      <1>     mov al, byte [diskReqHdr + ioReqPkt.status] ;Get low byte into al
   140 00000777 B480                <1>     mov ah, 80h ;Attachment failure
   141 00000779 3C0C                <1>     cmp al, 0Ch ;Gen error
   142 0000077B 741A                <1>     je .absExit
   143 0000077D B440                <1>     mov ah, 40h ;Seek error
   144 0000077F 3C06                <1>     cmp al, 06h
   145 00000781 7414                <1>     je .absExit
   146 00000783 B408                <1>     mov ah, 08h ;Bad CRC
   147 00000785 3C04                <1>     cmp al, 04h
   148 00000787 740E                <1>     je .absExit
   149 00000789 B404                <1>     mov ah, 04h ;Sector not found
   150 0000078B 3C08                <1>     cmp al, 08h
   151 0000078D 7408                <1>     je .absExit
   152 0000078F 30E4                <1>     xor ah, ah  ;Write Protect Violation
   153 00000791 84C0                <1>     test al, al
   154 00000793 7402                <1>     je .absExit
   155 00000795 B402                <1>     mov ah, 02h ;Other Error
   156                              <1> .absExit:
   157 00000797 F9                  <1>     stc
   158 00000798 C3                  <1>     ret
   159                              <1> 
   160                              <1> terminateResident:  ;Int 47h
   161                              <1> inDosHandler:       ;Int 48h
   162                              <1> ;Called when DOS idle
   163 00000799 48CF                <1>     iretq
   164                              <1> fastOutput:         ;Int 49h
   165                              <1> ;Called with char to transfer in al
   166 0000079B 50                  <1>     push rax
   167 0000079C B40E                <1>     mov ah, 0Eh
   168 0000079E CD30                <1>     int 30h
   169 000007A0 58                  <1>     pop rax
   170 000007A1 48CF                <1>     iretq
   171                              <1> passCommand:        ;Int 4Eh, hooked by COMMAND.COM
   172 000007A3 48CF                <1>     iretq
   173                              <1> multiplex:          ;Int 4Fh, kept as iretq for now
   174 000007A5 48CF                <1>     iretq
   175                              <1> ;-----------------------------------:
   176                              <1> ;        Main Kernel routines       :
   177                              <1> ;-----------------------------------:
   178                              <1> functionDispatch:   ;Int 41h Main function dispatcher
   179                              <1> ;ah = Function number, all other registers have various meanings
   180 000007A7 FA                  <1>     cli ;Halt external interrupts
   181 000007A8 FC                  <1>     cld ;Ensure all string ops occur in the right direction
   182 000007A9 80FC6A              <1>     cmp ah, kernelDispatchTableL/8    ;Number of functions
   183 000007AC 0F871D010000        <1>     ja .fdExitBad
   184                              <1>     ;Cherry pick functions
   185 000007B2 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
   186 000007B5 722C                <1>     jb .fsbegin   ;If below skip these checks
   187 000007B7 0F8447050000        <1>     je ctrlBreakCheck
   188 000007BD 80FC64              <1>     cmp ah, 64h
   189 000007C0 0F8448070000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 41h spiel
   190 000007C6 771B                <1>     ja .fsbegin   ;If above, do usual Int41 entry
   191 000007C8 80FC51              <1>     cmp ah, 51h
   192 000007CB 0F84ED050000        <1>     je getCurrProcessID    ;This and below are exactly the same
   193 000007D1 80FC62              <1>     cmp ah, 62h
   194 000007D4 0F8421070000        <1>     je getPSPaddr          ;Calls the above function
   195 000007DA 80FC50              <1>     cmp ah, 50h
   196 000007DD 0F84D3050000        <1>     je setCurrProcessID
   197                              <1> .fsbegin:
   198                              <1>     pushDOS ;Push the usual prologue registers
   263 000007E3 4151                <2>  push r9
   264 000007E5 4150                <2>  push r8
   265 000007E7 55                  <2>  push rbp
   266 000007E8 57                  <2>  push rdi
   267 000007E9 56                  <2>  push rsi
   268 000007EA 52                  <2>  push rdx
   269 000007EB 51                  <2>  push rcx
   270 000007EC 53                  <2>  push rbx
   271 000007ED 50                  <2>  push rax
   199 000007EE 488B05(09010000)    <1>     mov rax, qword [oldRSP]
   200 000007F5 488905(01010000)    <1>     mov qword [oldoldRSP], rax
   201 000007FC FE05(C9000000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
   202 00000802 488925(09010000)    <1>     mov qword [oldRSP], rsp
   203                              <1> ;Here, we want to save oldRSP in the callers PSP
   204 00000809 803D(C9000000)01    <1>     cmp byte [inDOS], 1 ;Check how many times we are in DOS
   205 00000810 750B                <1>     jne .fsb1   ;If this is first entry, save rsp in callers PSP
   206 00000812 488B05(D8000000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
   207 00000819 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
   208                              <1> .fsb1:
   209 0000081D 58                  <1>     pop rax     ;Get old rax back
   210 0000081E 50                  <1>     push rax    ;and push it back onto the stack
   211 0000081F 488D25(4C070000)    <1>     lea rsp, critStakTop
   212 00000826 FB                  <1>     sti         ;Reenable interrupts
   213                              <1> 
   214 00000827 C605(00010000)01    <1>     mov byte [int48Flag], 1 ;Make it ok to trigger Int 48h
   215                              <1> 
   216 0000082E 48891D(11010000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
   217 00000835 0FB6DC              <1>     movzx ebx, ah   ;Move the function number bl zero extended to rbx
   218 00000838 C1E303              <1>     shl ebx, 3      ;Multiply the function number by 8 for offset into table
   219 0000083B 50                  <1>     push rax        ;Push rax onto the stack
   220 0000083C 488D05CC060000      <1>     lea rax, qword [kernelDispatchTable]
   221 00000843 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
   222 00000846 58                  <1>     pop rax
   223 00000847 488B1B              <1>     mov rbx, qword [rbx]    ;Get the address from the dispatch table
   224                              <1> 
   225 0000084A 84E4                <1>     test ah, ah     ;Simple Terminate function?
   226 0000084C 741C                <1>     jz .fddiskOp
   227 0000084E 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
   228 00000851 7443                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
   229 00000853 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
   230 00000856 7712                <1>     ja .fddiskOp
   231                              <1> ;Char operations here
   232 00000858 F605(C8000000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
   233 0000085F 7535                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
   234 00000861 488D25(8C0D0000)    <1>     lea rsp, IOStakTop          ;Otherwise, switch to IO stack
   235 00000868 EB2C                <1>     jmp short .fdGoToFunction
   236                              <1> .fddiskOp:
   237                              <1>     ;Disk operations go here
   238                              <1>     ;Clear up error info
   239 0000086A C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
   240 00000871 C605(C8000000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
   241 00000878 C605(CA000000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
   242                              <1> 
   243 0000087F C605(00010000)00    <1>     mov byte [int48Flag], 0     ;Turn off the ability to trigger Int 48h
   244 00000886 488D25(CC130000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   245 0000088D F605(F3000000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   246 00000894 7400                <1>     jz .fdGoToFunction
   247                              <1> ; HANDLE CTRL+BREAK HERE!
   248                              <1> .fdGoToFunction:
   249 00000896 48871D(11010000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   250                              <1>     ;Potentially point rbp to caller reg frame for easy access of registers 
   251                              <1>     ;
   252                              <1>     ;IF YOU USE RAX AND DONT NEED A RETURN VALUE IN AL, 
   253                              <1>     ;ENSURE YOU READ AL FROM THE STACK FRAME BEFORE RETURNING TO PRESERVE AL!!!
   254                              <1>     ;
   255 0000089D FF15(11010000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   256                              <1> .fdExit:
   257 000008A3 FA                  <1>     cli     ;Redisable interrupts
   258                              <1>     ;???
   259 000008A4 FE0D(C9000000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   260 000008AA 488B25(09010000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   261 000008B1 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   262 000008B4 488B05(01010000)    <1>     mov rax, qword [oldoldRSP]
   263 000008BB 488905(09010000)    <1>     mov qword [oldRSP], rax
   264                              <1>     popDOS  ;Pop the frame
   275 000008C2 58                  <2>  pop rax
   276 000008C3 5B                  <2>  pop rbx
   277 000008C4 59                  <2>  pop rcx
   278 000008C5 5A                  <2>  pop rdx
   279 000008C6 5E                  <2>  pop rsi
   280 000008C7 5F                  <2>  pop rdi
   281 000008C8 5D                  <2>  pop rbp
   282 000008C9 4158                <2>  pop r8
   283 000008CB 4159                <2>  pop r9
   265 000008CD 48CF                <1>     iretq
   266                              <1> .fdExitBad:
   267 000008CF B400                <1>     mov ah, 0
   268 000008D1 48CF                <1>     iretq
   269                              <1> 
   270                              <1> ;========================================:
   271                              <1> ;            Kernel Functions            :
   272                              <1> ;========================================:
   273                              <1> simpleTerminate:   ;ah = 00h
   274 000008D3 C3                  <1>     ret
   275                              <1> diskReset:         ;ah = 0Dh
   276                              <1> ;Flush all dirty buffers to disk
   277 000008D4 488B2D(8A000000)    <1>     mov rbp, qword [bufHeadPtr]
   278                              <1> .drCheckBuffer:
   279 000008DB F6450940            <1>     test byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   280 000008DF 7407                <1>     jz .drGotoNextBuffer
   281                              <1> .drFlushBuffer:
   282 000008E1 E8C1F7FFFF          <1>     call flushBuffer    ;Called with rbp = buffer header
   283 000008E6 720E                <1>     jc .drError
   284                              <1> .drGotoNextBuffer:
   285 000008E8 488B6D00            <1>     mov rbp, qword [rbp + bufferHdr.nextBufPtr]
   286 000008EC 4881FDFFFFFFFF      <1>     cmp rbp, -1     ;If rbp points to -1, exit
   287 000008F3 75E6                <1>     jne .drCheckBuffer
   288 000008F5 C3                  <1>     ret
   289                              <1> .drError:
   290                              <1> ;Abort/Retry/Ignore
   291                              <1> ;Abort returns to DOS, 
   292                              <1> ;Retry retries the write on the buffer, 
   293                              <1> ;Ignore marks the buffer as clean and proceeds as normal
   294 000008F6 8A4509              <1>     mov al, byte [rbp + bufferHdr.bufferFlags]
   295 000008F9 240F                <1>     and al, 0Fh ;Clear the upper nybble
   296 000008FB B431                <1>     mov ah, 31h ;Disk Error, Ignore,Retry and Write operation
   297 000008FD 3C01                <1>     cmp al, dosBuffer
   298 000008FF 740F                <1>     je .drErrorMain
   299 00000901 80C402              <1>     add ah, 2
   300 00000904 3C02                <1>     cmp al, fatBuffer
   301 00000906 7408                <1>     je .drErrorMain
   302 00000908 80C402              <1>     add ah, 2
   303 0000090B 3C04                <1>     cmp al, dirBuffer
   304 0000090D 80C402              <1>     add ah, 2
   305                              <1> .drErrorMain:
   306 00000910 8A4508              <1>     mov al, byte [rbp + bufferHdr.driveNumber]
   307 00000913 488B7517            <1>     mov rsi, qword [rbp + bufferHdr.driveDPBPtr]
   308 00000917 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   309 0000091B 668B3D(39000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]    ;Disk error occured!
   310 00000922 6681E7FF00          <1>     and di, 0FFh    ;Only bottom byte
   311 00000927 66893D(CC000000)    <1>     mov word [errorExt], di     ;Save driver error code
   312 0000092E 668105(CC000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   312 00000936 00                  <1>
   313 00000937 8805(CA000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   314 0000093D C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   315 00000944 C605(CF000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   316 0000094B C605(CE000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   317 00000952 E856FDFFFF          <1>     call criticalDOSError       ;Critical error handler
   318 00000957 84C0                <1>     test al, al ;Ignore the troublesome buffer and mark it as free
   319 00000959 7406                <1>     jz .drIgnore
   320 0000095B 3C01                <1>     cmp al, 1   ;Retry flushing the buffer
   321 0000095D 7482                <1>     je .drFlushBuffer
   322 0000095F CD43                <1>     int 43h     ;Abort and fail both abort through int 43h
   323                              <1> .drIgnore:
   324 00000961 C64508FF            <1>     mov byte [rbp + bufferHdr.driveNumber], -1  ;Mark buffer as free
   325 00000965 E97EFFFFFF          <1>     jmp .drGotoNextBuffer
   326                              <1> 
   327                              <1> selectDisk:        ;ah = 0Eh
   328                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   329 0000096A 8A05(0B000000)      <1>     mov al, byte [numLogDrv]        ;Value 1 based
   330 00000970 8A1D(9A000000)      <1>     mov bl, byte [lastdrvNum]       ;Value 1 based
   331 00000976 FEC8                <1>     dec al
   332 00000978 FECB                <1>     dec bl
   333 0000097A 38C3                <1>     cmp bl, al
   334 0000097C 0F47C3              <1>     cmova eax, ebx    ;If bl > al, move bl to al
   335 0000097F 38C2                <1>     cmp dl, al  ;If dl is bigger than al
   336 00000981 7707                <1>     ja .error
   337 00000983 8815(F2000000)      <1>     mov byte [currentDrv], dl   ;Only save dl if it is a valid number
   338 00000989 C3                  <1>     ret ;al = lastdrv as retcode
   339                              <1> .error:
   340 0000098A 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   341 00000991 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   342 00000999 B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   343 0000099E 668905(CC000000)    <1>     mov word [errorExt], ax     
   344 000009A5 C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   345 000009AC C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   346 000009B3 C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   347 000009BA C3                  <1>     ret
   348                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   349 000009BB 8A05(F2000000)      <1>     mov al, byte [currentDrv]
   350 000009C1 C3                  <1>     ret
   351                              <1> FATinfoDefault:    ;ah = 1Bh
   352 000009C2 30D2                <1>     xor dl, dl
   353                              <1> FATinfoDevice:     ;ah = 1Ch
   354                              <1> ;Return in:
   355                              <1> ;   al = Number of sectors per cluster
   356                              <1> ;   edx = Number of clusters
   357                              <1> ;   cx =  Size of a clsuter
   358 000009C4 84D2                <1>     test dl, dl
   359 000009C6 7408                <1>     jz .fidSkipdefault
   360 000009C8 8A15(F2000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   361 000009CE EB02                <1>     jmp short .fidMain
   362                              <1> .fidSkipdefault:
   363 000009D0 FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   364                              <1> .fidMain:
   365                              <1> ;Walk the dpb chain manually
   366 000009D2 E8FEFCFFFF          <1>     call findDPB    ;Get in rbp the dpb pointer for drive dl
   367 000009D7 84C0                <1>     test al, al
   368 000009D9 7431                <1>     jz .fidDPBFound
   369                              <1> ;Else, we at an error.
   370                              <1> ;Simply return with CY set and error code in al with extended error info
   371 000009DB 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   372 000009E2 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set the CY flag
   373 000009EA B80F000000          <1>     mov eax, 15                 ;Invalid drive error
   374 000009EF 668905(CC000000)    <1>     mov word [errorExt], ax     
   375 000009F6 C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   376 000009FD C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   377 00000A04 C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   378 00000A0B C3                  <1>     ret
   379                              <1> .fidDPBFound:
   380 00000A0C 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   381 00000A0F FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   382 00000A11 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   383 00000A14 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   384 00000A17 BB01000000          <1>     mov ebx, 1
   385 00000A1C D3E3                <1>     shl ebx, cl
   386 00000A1E 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   387 00000A20 488D5D22            <1>     lea rbx, qword [rbp + dpb.bMediaDescriptor]
   388 00000A24 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   389 00000A2B 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   390 00000A2F 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   391 00000A33 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   392 00000A37 C3                  <1>     ret
   393                              <1> ;===============================
   394                              <1> setIntVector:      ;ah = 25h
   395                              <1> ;Called with:
   396                              <1> ;   rdx = Pointer to interrupt handler
   397                              <1> ;   al = Interrupt number
   398 00000A38 89C5                <1>     mov ebp, eax ;al has interrupt number which we need to save
   399 00000A3A 81E5FF000000        <1>     and ebp, 0FFh   ;Zero everything but the bottom byte
   400                              <1> ;First call to get default BIOS segement selector and attribute word
   401 00000A40 88C3                <1>     mov bl, al  ;Set interrupt number 
   402 00000A42 B807F00000          <1>     mov eax, 0F007h ;Get the descriptor
   403 00000A47 CD35                <1>     int 35h
   404 00000A49 89C6                <1>     mov esi, eax    ;Move segment selector info to esi
   405 00000A4B 89E9                <1>     mov ecx, ebp    ;Get the interrupt number into cl
   406                              <1> ;dx preserves the attribute word
   407 00000A4D 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   408 00000A54 488B5D18            <1>     mov rbx, qword [rbp + callerFrame.rdx]  ;Pointer passed in rdx
   409 00000A58 B808F00000          <1>     mov eax, 0F008h ;Set descriptor
   410 00000A5D CD35                <1>     int 35h
   411                              <1> 
   412 00000A5F 8A4500              <1>     mov al, byte [rbp + callerFrame.rax]    ;Preserve low byte of rax
   413 00000A62 C3                  <1>     ret
   414                              <1> createNewPSP:      ;ah = 26h
   415 00000A63 C3                  <1>     ret
   416                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   417 00000A64 8805(F4000000)      <1>     mov byte [verifyFlag], al
   418 00000A6A 8025(F4000000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   419 00000A71 C3                  <1>     ret
   420                              <1> getDOSversion:     ;ah = 30h
   421 00000A72 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   422 00000A79 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   423 00000A7B 886209              <1>     mov byte [rdx + callerFrame.rbx + 1], ah    ;Clear bh 
   424 00000A7E 668B057BF5FFFF      <1>     mov ax, word [dosMajor] ;Major and minor version in al,ah resp.
   425 00000A85 668902              <1>     mov word [rdx + callerFrame.rax], ax    ;Save ax
   426 00000A88 C3                  <1>     ret
   427                              <1> terminateStayRes:  ;ah = 31h
   428 00000A89 C3                  <1>     ret
   429                              <1> ;-------------------------------------------
   430                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply calls int 41h ah = 32h with dl = 0
   431 00000A8A 30D2                <1>     xor dl, dl
   432                              <1> getDeviceDPBptr:   ;ah = 32h
   433                              <1> ;On entry: dl = Drive number
   434                              <1> ;On exit: rbx = DPB pointer
   435 00000A8C 84D2                <1>     test dl, dl
   436 00000A8E 7508                <1>     jnz .gddpskipdefault
   437 00000A90 8A15(F2000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   438 00000A96 EB02                <1>     jmp short .gddpcommon
   439                              <1> .gddpskipdefault:
   440                              <1>     ;Decrement the drive letter since 0 = Default, 1 = A etc...
   441 00000A98 FECA                <1>     dec dl
   442                              <1> .gddpcommon:
   443 00000A9A E836FCFFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   444 00000A9F 84C0                <1>     test al, al
   445 00000AA1 741F                <1>     jz .gddpMediaCheck
   446                              <1> ;Put in here error info
   447 00000AA3 66C705(CC000000)0F- <1>     mov word [errorExt], 15 ;Invalid drive spec
   447 00000AAB 00                  <1>
   448 00000AAC C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Block device driver
   449 00000AB3 C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   450 00000ABA C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after intervention
   451 00000AC1 C3                  <1>     ret ;Return. al = -1
   452                              <1> .gddpMediaCheck:
   453                              <1> ;Media Check Section
   454 00000AC2 C605(36000000)17    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   455 00000AC9 8815(37000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.unitnm], dl
   456 00000ACF C605(38000000)01    <1>     mov byte [diskReqHdr + mediaCheckReqPkt.cmdcde], drvMEDCHK
   457 00000AD6 66C705(39000000)00- <1>     mov word [diskReqHdr + mediaCheckReqPkt.status], 0
   457 00000ADE 00                  <1>
   458 00000ADF 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   459 00000AE2 8805(43000000)      <1>     mov byte [diskReqHdr + mediaCheckReqPkt.medesc], al
   460 00000AE8 88D0                <1>     mov al, dl  ;Save device number in al
   461 00000AEA 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr]
   462 00000AEE 488D1D(36000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   463 00000AF5 FF520A              <1>     call [rdx + drvHdr.strPtr]
   464 00000AF8 FF5212              <1>     call [rdx + drvHdr.intPtr]
   465 00000AFB 66F705(39000000)00- <1>     test word [diskReqHdr + mediaCheckReqPkt.status], 8000h
   465 00000B03 80                  <1>
   466 00000B04 0F85EA000000        <1>     jnz .gddpError
   467 00000B0A 88C2                <1>     mov dl, al
   468 00000B0C 803D(44000000)01    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 1 ;Certified no change
   469 00000B13 0F84B0000000        <1>     je .gddpretdbp
   470 00000B19 803D(44000000)00    <1>     cmp byte [diskReqHdr + mediaCheckReqPkt.medret], 0
   471 00000B20 7512                <1>     jne .gddpBuildBPB   ;This means Media changed declared
   472 00000B22 E823F6FFFF          <1>     call findDirtyBufferForDrive
   473 00000B27 48F7C3FFFFFFFF      <1>     test rbx, -1    ;This is the case if no dirty buffers for drive
   474 00000B2E 0F8595000000        <1>     jne .gddpretdbp ;If there is a dirty buffer for the drive, dont build bpb
   475                              <1> .gddpBuildBPB:
   476                              <1> ;BPB Build Section, only here if need a new bpb, i.e. sure of a new device
   477 00000B34 E8C1F5FFFF          <1>     call findLRUBuffer  ;Get lru buffer pointer in rbx
   478 00000B39 3A5308              <1>     cmp dl, byte [rbx + bufferHdr.driveNumber]  ;Does buffer belong to old drv?
   479 00000B3C 7414                <1>     je .gddpBuildBPBInvalidateBuffer    ;Yes, immediately invalidate data
   480                              <1>     ;If no, flush the data to disk.
   481                              <1> .gddpBuildBPBFlush:
   482 00000B3E 4889EE              <1>     mov rsi, rbp    ;Save rbp as pointer to old dl drive dpb
   483 00000B41 4889DD              <1>     mov rbp, rbx    ;Get buffer header pointer in rbp
   484 00000B44 E85EF5FFFF          <1>     call flushBuffer    ;Flush the buffer to disk, rbx preserved
   485 00000B49 4889F5              <1>     mov rbp, rsi    ;Return old drive dpb pointer to rbp
   486 00000B4C 0F820F010000        <1>     jc .gddpErrorType2  ;rbx points to buffer header
   487                              <1> .gddpBuildBPBInvalidateBuffer:
   488                              <1>     ;Write new buffer header
   489 00000B52 885308              <1>     mov byte [rbx + bufferHdr.driveNumber], dl
   490 00000B55 C6430908            <1>     mov byte [rbx + bufferHdr.bufferFlags], dataBuffer
   491 00000B59 48C7430A00000000    <1>     mov qword [rbx + bufferHdr.bufferLBA], 0
   492 00000B61 C6431201            <1>     mov byte [rbx + bufferHdr.bufFATcopy], 1
   493 00000B65 C7431300000000      <1>     mov dword [rbx + bufferHdr.bufFATsize], 0
   494 00000B6C 48896B17            <1>     mov qword [rbx + bufferHdr.driveDPBPtr], rbp
   495 00000B70 488D5B20            <1>     lea rbx, qword [rbx + bufferHdr.dataarea]
   496                              <1>     ;Build BPB request
   497 00000B74 C605(36000000)1E    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   498 00000B7B 8815(37000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.unitnm], dl
   499 00000B81 C605(38000000)02    <1>     mov byte [diskReqHdr + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   500 00000B88 66C705(39000000)00- <1>     mov word [diskReqHdr + bpbBuildReqPkt.status], 0 
   500 00000B90 00                  <1>
   501 00000B91 8A4522              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   502 00000B94 8805(43000000)      <1>     mov byte [diskReqHdr + bpbBuildReqPkt.medesc], al
   503 00000B9A 48891D(44000000)    <1>     mov qword [diskReqHdr + bpbBuildReqPkt.bufptr], rbx ;Put lru pointer in rbx
   504 00000BA1 488B551A            <1>     mov rdx, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   505 00000BA5 488D1D(36000000)    <1>     lea rbx, diskReqHdr ;rbx needs to point to diskReqHdr
   506 00000BAC FF520A              <1>     call [rdx + drvHdr.strPtr]
   507 00000BAF FF5212              <1>     call [rdx + drvHdr.intPtr]
   508 00000BB2 66F705(39000000)00- <1>     test word [diskReqHdr + bpbBuildReqPkt.status], 8000h
   508 00000BBA 80                  <1>
   509 00000BBB 7537                <1>     jnz .gddpError
   510 00000BBD 488B35(4C000000)    <1>     mov rsi, qword [diskReqHdr + bpbBuildReqPkt.bpbptr]
   511                              <1>     ;rbp points to dpb so we good to go
   512                              <1>     ;Call int 41h ah=53h Build DPB without reentering Int 41h
   513                              <1>     ;Since this function doesnt modify the caller stack, it is safe to do so
   514 00000BC4 E81B020000          <1>     call createDPB 
   515                              <1> .gddpretdbp: 
   516 00000BC9 C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Clear access flag
   517 00000BCD 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   518 00000BD4 48896A08            <1>     mov qword [rdx + callerFrame.rbx], rbp  ;Here, all paths have rbp as dpbptr
   519 00000BD8 30C0                <1>     xor al, al  ;Set al = 0 to indicate rbx=dpb pointer
   520 00000BDA C3                  <1>     ret
   521                              <1> .gddpretdpbFail:
   522 00000BDB 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   523 00000BE2 48814A5801000000    <1>     or qword [rdx + callerFrame.flags], 1   ;Set CF=CY
   524 00000BEA 66C705(CC000000)53- <1>     mov word [errorExt], 83 ;Fail on INT 44h error code
   524 00000BF2 00                  <1>
   525 00000BF3 C3                  <1>     ret
   526                              <1> .gddpError:
   527                              <1> ;Abort, Retry, Ignore are the only acceptible responses
   528                              <1> ;Entered with rbp = dpb for failing drive
   529                              <1> ;             rdx = driver header that caused fault
   530 00000BF4 4889D6              <1>     mov rsi, rdx    ;rdx points to driver header in both cases
   531 00000BF7 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   532 00000BFE 8A4318              <1>     mov al, byte [rbx + callerFrame.rdx]    ;Get low byte = dl = Drive number
   533 00000C01 88C2                <1>     mov dl, al  ;Save in dl
   534 00000C03 84C0                <1>     test al, al
   535 00000C05 7508                <1>     jnz .gddpE0
   536 00000C07 8A05(F2000000)      <1>     mov al, byte [currentDrv]
   537 00000C0D EB02                <1>     jmp short .gddpE1
   538                              <1> .gddpE0:
   539 00000C0F FEC8                <1>     dec al
   540                              <1> .gddpE1:
   541 00000C11 B436                <1>     mov ah, 36h ;Read operation, data area, abort/retry/ignore, disk error
   542 00000C13 668B3D(39000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   543 00000C1A 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   544 00000C1F 66893D(CC000000)    <1>     mov word [errorExt], di     ;Save driver error code
   545 00000C26 668105(CC000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   545 00000C2E 00                  <1>
   546 00000C2F 8805(CA000000)      <1>     mov byte [errorDrv], al     ;Save the drive on which the error occured
   547 00000C35 C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   548 00000C3C C605(CF000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad BPB or other) code
   549 00000C43 C605(CE000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   550 00000C4A E85EFAFFFF          <1>     call criticalDOSError   ;Critical error handler
   551 00000C4F 84C0                <1>     test al, al
   552 00000C51 0F8472FFFFFF        <1>     jz .gddpretdbp  ;Ignore error, return, rbp has old dpb pointer
   553 00000C57 3C01                <1>     cmp al, 1
   554 00000C59 0F842DFEFFFF        <1>     je getDeviceDPBptr ;Reenter the function, dl has drive code
   555 00000C5F CD43                <1>     int 43h ;Else, restart DOS
   556                              <1> .gddpErrorType2:
   557                              <1> ;Error flushing the old buffer
   558                              <1> ;   rbx = Buffer header for data transfer
   559 00000C61 B439                <1>     mov ah, 39h ;Write operation, abort/retry/ignore/fail, disk error
   560 00000C63 807B0901            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dosBuffer
   561 00000C67 7414                <1>     je .gddpErrorType2main
   562 00000C69 80CC02              <1>     or ah, 2h   ;Set bit 1
   563 00000C6C 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   564 00000C70 740B                <1>     je .gddpErrorType2main
   565 00000C72 B43D                <1>     mov ah, 3Dh ;Set bit 2, clear bit 1
   566 00000C74 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   567 00000C78 7403                <1>     je .gddpErrorType2main
   568 00000C7A 80CC02              <1>     or ah, 2h   ;Set bit 2 and 1
   569                              <1> .gddpErrorType2main:    
   570 00000C7D 668B3D(39000000)    <1>     mov di, word [diskReqHdr + drvReqHdr.status]   ;Get low byte of status
   571 00000C84 6681E7FF00          <1>     and di, 0FFh    ;Save lo byte only
   572 00000C89 66893D(CC000000)    <1>     mov word [errorExt], di     ;Save driver error code
   573 00000C90 668105(CC000000)13- <1>     add word [errorExt], 13h    ;Add offset to driver error codes
   573 00000C98 00                  <1>
   574 00000C99 8A4308              <1>     mov al, byte [rbx + bufferHdr.driveNumber]
   575 00000C9C 8805(CA000000)      <1>     mov byte [errorDrv], al
   576 00000CA2 C605(CB000000)02    <1>     mov byte [errorLocus], 2    ;Error in Block Device Request code
   577 00000CA9 C605(CF000000)0B    <1>     mov byte [errorClass], 11   ;Media error occured (bad disk write) code
   578 00000CB0 C605(CE000000)01    <1>     mov byte [errorAction], 1   ;Retry request code
   579 00000CB7 488B7317            <1>     mov rsi, qword [rbx + bufferHdr.driveDPBPtr]
   580 00000CBB 488B761A            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get device driver header in rsi
   581 00000CBF E8E9F9FFFF          <1>     call criticalDOSError   ;Critical error handler
   582 00000CC4 807B0902            <1>     cmp byte [rbx + bufferHdr.bufferFlags], fatBuffer
   583 00000CC8 7420                <1>     je .gddpErrorType2FatDir
   584 00000CCA 807B0904            <1>     cmp byte [rbx + bufferHdr.bufferFlags], dirBuffer
   585 00000CCE 741A                <1>     je .gddpErrorType2FatDir
   586 00000CD0 84C0                <1>     test al, al
   587 00000CD2 0F847AFEFFFF        <1>     jz .gddpBuildBPBInvalidateBuffer ;Ignore error, invalidate data
   588 00000CD8 3C01                <1>     cmp al, 1
   589 00000CDA 0F845EFEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   590 00000CE0 3C03                <1>     cmp al, 3
   591 00000CE2 0F84F3FEFFFF        <1>     je .gddpretdpbFail
   592 00000CE8 CD43                <1>     int 43h ;al = 2, means just abort
   593                              <1> .gddpErrorType2FatDir:
   594 00000CEA 84C0                <1>     test al, al ;Ignore converted to fail
   595 00000CEC 0F84E9FEFFFF        <1>     jz .gddpretdpbFail
   596 00000CF2 3C01                <1>     cmp al, 1
   597 00000CF4 0F8444FEFFFF        <1>     je .gddpBuildBPBFlush   ;Retry flush, rbx has buffer pointer
   598 00000CFA 3C03                <1>     cmp al, 3
   599 00000CFC 0F84D9FEFFFF        <1>     je .gddpretdpbFail
   600 00000D02 CD43                <1>     int 43h ;al = 2, means just abort
   601                              <1> ;-------------------------------------------
   602                              <1> 
   603                              <1> ctrlBreakCheck:    ;ah = 33h
   604 00000D04 84C0                <1>     test al, al
   605 00000D06 7406                <1>     jz .cbcget  ;Get the state
   606 00000D08 8815(F3000000)      <1>     mov byte [breakFlag], dl    ;Set the state
   607                              <1> .cbcget:
   608 00000D0E 8A15(F3000000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   609 00000D14 C3                  <1>     ret
   610                              <1> getInDOSflagPtr:   ;ah = 34h
   611 00000D15 488D15(C9000000)    <1>     lea rdx, inDOS
   612 00000D1C 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   613 00000D23 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;save ptr in rbx
   614 00000D27 C3                  <1>     ret
   615                              <1> getIntVector:      ;ah = 35h
   616                              <1> ;Called with:
   617                              <1> ;   al = Interrupt Number
   618                              <1> ;Returns:
   619                              <1> ;   rbx = Pointer to interrupt handler
   620 00000D28 88C3                <1>     mov bl, al  ;Get the interrupt vector number into bl
   621 00000D2A B807F00000          <1>     mov eax, 0F007h
   622 00000D2F CD35                <1>     int 35h
   623 00000D31 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   624 00000D38 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx  ;Save pointer in rbx
   625 00000D3C 8A02                <1>     mov al, byte [rdx + callerFrame.rax]    ;Get the low byte in al
   626 00000D3E C3                  <1>     ret
   627                              <1> getDiskFreeSpace:  ;ah = 36h
   628 00000D3F 84D2                <1>     test dl, dl
   629 00000D41 7408                <1>     jz .gdfsSkipdefault
   630 00000D43 8A15(F2000000)      <1>     mov dl, byte [currentDrv]   ;Get current drive code, 0 = A, 1 = B etc...
   631 00000D49 EB02                <1>     jmp short .gdfsMain
   632                              <1> .gdfsSkipdefault:
   633 00000D4B FECA                <1>     dec dl ;Decrement the drive letter since 0 = Default, 1 = A etc...
   634                              <1> .gdfsMain:
   635 00000D4D E883F9FFFF          <1>     call findDPB ;Get in rbp the dpb pointer for drive dl
   636 00000D52 84C0                <1>     test al, al
   637 00000D54 7434                <1>     jz .gdfsDPBFound
   638                              <1> ;Else, we at an error.
   639                              <1> ;Simply return with CY set and error code in al with extended error info
   640 00000D56 66C705(CC000000)0F- <1>     mov word [errorExt], 15     ;Invalid drive error
   640 00000D5E 00                  <1>
   641 00000D5F C605(CB000000)01    <1>     mov byte [errorLocus], 1    ;Not appropriate
   642 00000D66 C605(CF000000)08    <1>     mov byte [errorClass], 8    ;Drive not found
   643 00000D6D C605(CE000000)07    <1>     mov byte [errorAction], 7   ;Retry after user intervention
   644 00000D74 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   645 00000D7B 66C74500FFFF        <1>     mov word [rbp + callerFrame.rax], -1    ;Set ax=FFFFh
   646 00000D81 48814D5801000000    <1>     or qword [rbp + callerFrame.flags], 1   ;Set CF=CY
   647 00000D89 C3                  <1>     ret
   648                              <1> .gdfsDPBFound:
   649 00000D8A 8A4503              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
   650 00000D8D FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
   651 00000D8F 8B550E              <1>     mov edx, dword [rbp + dpb.dClusterCount]
   652 00000D92 8A4D02              <1>     mov cl, byte [rbp + dpb.bBytesPerSectorShift]
   653 00000D95 BB01000000          <1>     mov ebx, 1
   654 00000D9A D3E3                <1>     shl ebx, cl
   655 00000D9C 89D9                <1>     mov ecx, ebx    ;Save the value in ecx
   656 00000D9E 8B5D30              <1>     mov ebx, dword [rbp + dpb.dNumberOfFreeClusters]    ;Ger # free clusters
   657 00000DA1 488B2D(09010000)    <1>     mov rbp, qword [oldRSP]
   658 00000DA8 48895518            <1>     mov qword [rbp + callerFrame.rdx], rdx
   659 00000DAC 66894D10            <1>     mov word [rbp + callerFrame.rcx], cx
   660 00000DB0 48895D08            <1>     mov qword [rbp + callerFrame.rbx], rbx
   661 00000DB4 C3                  <1>     ret
   662                              <1> 
   663                              <1> loadExecChild:     ;ah = 4Bh, EXEC
   664                              <1> terminateClean:    ;ah = 4Ch, EXIT
   665                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   666 00000DB5 C3                  <1>     ret
   667                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   668 00000DB6 48891D(D8000000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   669 00000DBD C3                  <1>     ret
   670                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   671 00000DBE 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   672 00000DC5 488B15(D8000000)    <1>     mov rdx, qword [currentPSP]
   673 00000DCC 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx   ;Set the caller pointer
   674 00000DD0 C3                  <1>     ret 
   675                              <1> getSysVarsPtr:     ;ah = 52h
   676 00000DD1 488D15(68000000)    <1>     lea rdx, sysVarsPtr
   677 00000DD8 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   678 00000DDF 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx
   679 00000DE3 C3                  <1>     ret
   680                              <1> createDPB:         ;ah = 53h, generates a DPB from a given BPB
   681                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   682                              <1> ;This is done so that the other fields of the DPB can be recycled
   683                              <1> ;Input: rsi = ptr to the BPB
   684                              <1> ;       rbp = ptr to the DPB
   685                              <1> ;bMediaDescriptor
   686 00000DE4 8A4615              <1>     mov al, byte [rsi + bpb.media]
   687 00000DE7 884522              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   688                              <1> ;bAccessFlag
   689 00000DEA C64523FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Not accessed
   690                              <1> ;dFirstFreeCluster
   691 00000DEE C7452C00000000      <1>     mov dword [rbp + dpb.dFirstFreeCluster], 0  ;Start searching from start
   692                              <1> ;dNumberOfFreeClusters
   693 00000DF5 C74530FFFFFFFF      <1>     mov dword [rbp + dpb.dNumberOfFreeClusters], -1 ;Unknown
   694                              <1> ;bBytesPerSectorShift
   695 00000DFC 668B460B            <1>     mov ax, word [rsi + bpb.bytsPerSec]
   696 00000E00 B107                <1>     mov cl, 7   ;Start with 128 byte sectors (not supported, min 512)
   697 00000E02 66D3E8              <1>     shr ax, cl  ;Shift down
   698                              <1> .cd0:
   699 00000E05 66D1E8              <1>     shr ax, 1
   700 00000E08 7404                <1>     jz .cd1
   701 00000E0A FEC1                <1>     inc cl
   702 00000E0C EBF7                <1>     jmp short .cd0
   703                              <1> .cd1:
   704 00000E0E 884D02              <1>     mov byte [rbp + dpb.bBytesPerSectorShift], cl
   705                              <1> ;bMaxSectorInCluster
   706 00000E11 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   707 00000E14 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   708 00000E16 884503              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   709                              <1> ;bSectorsPerClusterShift
   710 00000E19 FEC0                <1>     inc al
   711 00000E1B 30C9                <1>     xor cl, cl
   712                              <1> .cd2:
   713 00000E1D D0E8                <1>     shr al, 1
   714 00000E1F 7404                <1>     jz .cd3
   715 00000E21 FEC1                <1>     inc cl
   716 00000E23 EBF8                <1>     jmp short .cd2
   717                              <1> .cd3:
   718 00000E25 884D04              <1>     mov byte [rbp + dpb.bSectorsPerClusterShift], cl
   719                              <1> ;wFAToffset, number of reserved sectors in partition
   720 00000E28 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   721 00000E2C 66894505            <1>     mov word [rbp + dpb.wFAToffset], ax
   722                              <1> ;bNumberOfFATs
   723 00000E30 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   724 00000E33 884507              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   725                              <1> ;wNumberRootDirSectors
   726 00000E36 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   727 00000E3A C1E005              <1>     shl eax, 5  ;Multiply by 32
   728 00000E3D 0FB74E0B            <1>     movzx ecx, word [rsi + bpb.bytsPerSec]
   729 00000E41 FFC9                <1>     dec ecx
   730 00000E43 01C8                <1>     add eax, ecx
   731 00000E45 31D2                <1>     xor edx, edx    ;Clear for divide
   732 00000E47 F7F1                <1>     div ecx ;Divide 0:eax by ecx, (e)ax has number of clusters
   733 00000E49 66894508            <1>     mov word [rbp + dpb.wNumberRootDirSectors], ax  ;0 for FAT32
   734                              <1> ;dFATlength, get the FAT length
   735 00000E4D 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   736 00000E51 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   737 00000E54 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   738 00000E56 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   739 00000E59 894512              <1>     mov dword [rbp + dpb.dFATlength], eax
   740                              <1> ;Complex cases below...
   741                              <1> ;dClusterHeapOffset, start sector of the data area
   742 00000E5C 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   743 00000E60 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   744 00000E63 85C0                <1>     test eax, eax
   745 00000E65 0F44C3              <1>     cmovz eax, ebx
   746                              <1> ;eax = FATsz
   747 00000E68 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   748 00000E6C 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   749 00000E6F 85DB                <1>     test ebx, ebx
   750 00000E71 0F44D9              <1>     cmovz ebx, ecx 
   751                              <1> ;ebx = TotSec
   752 00000E74 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   753 00000E77 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   754                              <1> .cd4:
   755 00000E79 01C2                <1>     add edx, eax
   756 00000E7B FEC9                <1>     dec cl
   757 00000E7D 75FA                <1>     jnz .cd4
   758 00000E7F 89D0                <1>     mov eax, edx    ;Store product in eax
   759 00000E81 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   760 00000E85 01D0                <1>     add eax, edx
   761 00000E87 0FB75508            <1>     movzx edx, word [rbp + dpb.wNumberRootDirSectors]
   762 00000E8B 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   763                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   764                              <1>     ;aka eax = Start sector of the data area in volume
   765 00000E8D 89450A              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   766                              <1> ;dClusterCount
   767 00000E90 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   768 00000E92 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   769 00000E94 31D2                <1>     xor edx, edx
   770 00000E96 BB01000000          <1>     mov ebx, 1
   771 00000E9B 8A4D04              <1>     mov cl, byte [rbp + dpb.bSectorsPerClusterShift]
   772 00000E9E D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   773 00000EA0 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   774 00000EA2 FFC0                <1>     inc eax ;Maximum valid cluster value is eax + 1
   775 00000EA4 89450E              <1>     mov dword [rbp + dpb.dClusterCount], eax    ;eax = Cluster count
   776                              <1> ;dFirstUnitOfRootDir
   777 00000EA7 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   778 00000EAC 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   779 00000EAF 7709                <1>     ja .cd5
   780                              <1>     ;Else, we need to find the first sector of the root directory
   781                              <1>     ;Get the start sector of data area in volume 
   782                              <1>     ; and sub the number of sectors in the root directory
   783 00000EB1 8B450A              <1>     mov eax, dword [rbp + dpb.dClusterHeapOffset]
   784 00000EB4 0FB75D08            <1>     movzx ebx, word [rbp + dpb.wNumberRootDirSectors]
   785 00000EB8 29D8                <1>     sub eax, ebx    ;eax now has start sector of root dir
   786                              <1> .cd5:
   787 00000EBA 894516              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   788                              <1> ;Exit epilogue
   789 00000EBD 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   790 00000EC4 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   791 00000EC6 C3                  <1>     ret
   792                              <1> getVerifySetting:  ;ah = 54h
   793 00000EC7 8A05(F4000000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   794 00000ECD C3                  <1>     ret
   795                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
   796 00000ECE C3                  <1>     ret
   797                              <1> getExtendedError:  ;ah = 59h
   798 00000ECF 488B15(09010000)    <1>     mov rdx, qword [oldRSP]
   799 00000ED6 668B05(CC000000)    <1>     mov ax, word [errorExt]
   800 00000EDD 8A2D(CB000000)      <1>     mov ch, byte [errorLocus]
   801 00000EE3 8A3D(CF000000)      <1>     mov bh, byte [errorClass]
   802 00000EE9 8A1D(CE000000)      <1>     mov bl, byte [errorAction]
   803 00000EEF 668902              <1>     mov word [rdx + callerFrame.rax], ax
   804 00000EF2 66895A08            <1>     mov word [rdx + callerFrame.rbx], bx
   805 00000EF6 886A11              <1>     mov byte [rdx + callerFrame.rcx + 1], ch
   806 00000EF9 C3                  <1>     ret
   807                              <1> getCritErrorInfo:  ;ah = 5Dh
   808                              <1> networkServices:   ;ah = 5Eh, do nothing
   809                              <1> networkRedirection:;ah = 5Fh, do nothing
   810 00000EFA C3                  <1>     ret
   811                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   812 00000EFB 488B1D(09010000)    <1>     mov rbx, qword [oldRSP]
   813 00000F02 488B15(D8000000)    <1>     mov rdx, qword [currentPSP]
   814 00000F09 48895308            <1>     mov qword [rbx + callerFrame.rbx], rdx  ;Save the current psp in rbx
   815 00000F0D C3                  <1>     ret
   816                              <1>                     ;ah = 63h, reserved
   817                              <1> setDriverLookahead:;ah = 64h, reserved
   818                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   819                              <1> return:
   820 00000F0E C3                  <1>     ret
   821                              <1> 
   822                              <1> kernelDispatchTable:
   823 00000F0F [D308000000000000]  <1>     dq simpleTerminate     ;AH = 00H, PROCESS MANAGEMENT
   824 00000F17 [BB03000000000000]  <1>     dq stdinReadEcho       ;AH = 01H, CHAR IO
   825 00000F1F [3004000000000000]  <1>     dq stdoutWrite         ;AH = 02H, CHAR IO
   826 00000F27 [6A04000000000000]  <1>     dq stdauxRead          ;AH = 03H, CHAR IO
   827 00000F2F [6A04000000000000]  <1>     dq stdauxWrite         ;AH = 04H, CHAR IO
   828 00000F37 [6A04000000000000]  <1>     dq stdprnWrite         ;AH = 05H, CHAR IO
   829 00000F3F [6A04000000000000]  <1>     dq directCONIO         ;AH = 06H, CHAR IO
   830 00000F47 [6A04000000000000]  <1>     dq waitDirectInNoEcho  ;AH = 07H, CHAR IO
   831 00000F4F [A404000000000000]  <1>     dq waitStdinNoEcho     ;AH = 08H, CHAR IO
   832 00000F57 [A504000000000000]  <1>     dq printString         ;AH = 09H, CHAR IO
   833 00000F5F [E704000000000000]  <1>     dq buffStdinInput      ;AH = 0AH, CHAR IO
   834 00000F67 [E704000000000000]  <1>     dq checkStdinStatus    ;AH = 0BH, CHAR IO
   835 00000F6F [E704000000000000]  <1>     dq clearbuffDoFunc     ;AH = 0CH, CHAR IO
   836 00000F77 [D408000000000000]  <1>     dq diskReset           ;AH = 0DH, DISK MANAGEMENT
   837 00000F7F [6A09000000000000]  <1>     dq selectDisk          ;AH = 0EH, DISK MANAGEMENT
   838 00000F87 [E704000000000000]  <1>     dq openFileFCB         ;AH = 0FH, FILE OPERATION       FCB
   839 00000F8F [E704000000000000]  <1>     dq closeFileFCB        ;AH = 10H, FILE OPERATION       FCB
   840 00000F97 [E704000000000000]  <1>     dq findFirstFileFCB    ;AH = 11H, FILE OPERATION       FCB
   841 00000F9F [E704000000000000]  <1>     dq findNextFileFCB     ;AH = 12H, FILE OPERATION       FCB
   842 00000FA7 [E704000000000000]  <1>     dq deleteFileFCB       ;AH = 13H, FILE OPERATION       FCB
   843 00000FAF [E704000000000000]  <1>     dq sequentialReadFCB   ;AH = 14H, RECORD OPERATION     FCB
   844 00000FB7 [E704000000000000]  <1>     dq sequentialWriteFCB  ;AH = 15H, RECORD OPERTAION     FCB
   845 00000FBF [E704000000000000]  <1>     dq createFileFCB       ;AH = 16H, FILE OPERATION       FCB
   846 00000FC7 [E704000000000000]  <1>     dq renameFileFCB       ;AH = 17H, FILE OPERATION       FCB
   847 00000FCF [0E0F000000000000]  <1>     dq return              ;AH = 18H, RESERVED
   848 00000FD7 [BB09000000000000]  <1>     dq getCurrentDisk      ;AH = 19H, DISK MANAGEMENT
   849 00000FDF [E804000000000000]  <1>     dq setDTA              ;AH = 1AH, RECORD OPERATION     F/H
   850 00000FE7 [C209000000000000]  <1>     dq FATinfoDefault      ;AH = 1BH, DISK MANAGEMENT
   851 00000FEF [C409000000000000]  <1>     dq FATinfoDevice       ;AH = 1CH, DISK MANAGEMENT
   852 00000FF7 [0E0F000000000000]  <1>     dq return              ;AH = 1DH, RESERVED
   853 00000FFF [0E0F000000000000]  <1>     dq return              ;AH = 1EH, RESERVED
   854 00001007 [8A0A000000000000]  <1>     dq getCurrentDPBptr    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
   855 0000100F [0E0F000000000000]  <1>     dq return              ;AH = 20H, RESERVED
   856 00001017 [FB04000000000000]  <1>     dq randomReadFCB       ;AH = 21H, RECORD OPERATION     FCB
   857 0000101F [FB04000000000000]  <1>     dq randomWriteFCB      ;AH = 22H, RECORD OPERATION     FCB
   858 00001027 [FB04000000000000]  <1>     dq getFileSizeFCB      ;AH = 23H, FILE OPERATION       FCB
   859 0000102F [FB04000000000000]  <1>     dq setRelRecordFCB     ;AH = 24H, RECORD OPERATION     FCB
   860 00001037 [380A000000000000]  <1>     dq setIntVector        ;AH = 25H, MISC. SYS. FUNCTION
   861 0000103F [630A000000000000]  <1>     dq createNewPSP        ;AH = 26H, PROCESS MANAGEMENT
   862 00001047 [FB04000000000000]  <1>     dq randBlockReadFCB    ;AH = 27H, RECORD OPERATION     FCB
   863 0000104F [FB04000000000000]  <1>     dq randBlockWriteFCB   ;AH = 28H, RECORD OPERATION     FCB
   864 00001057 [FB04000000000000]  <1>     dq parseFilenameFCB    ;AH = 29H, FILE OPERATION       FCB
   865 0000105F [AB06000000000000]  <1>     dq getDate             ;AH = 2AH, TIME AND DATE
   866 00001067 [AB06000000000000]  <1>     dq setDate             ;AH = 2BH, TIME AND DATE
   867 0000106F [AB06000000000000]  <1>     dq getTime             ;AH = 2CH, TIME AND DATE
   868 00001077 [AB06000000000000]  <1>     dq setTime             ;AH = 2DH, TIME AND DATE
   869 0000107F [640A000000000000]  <1>     dq setResetVerify      ;AH = 2EH, DISK MANAGEMENT
   870 00001087 [FC04000000000000]  <1>     dq getDTA              ;AH = 2FH, RECORD OPERATION     F/H
   871 0000108F [720A000000000000]  <1>     dq getDOSversion       ;AH = 30H, MISC. SYS. FUNCTION
   872 00001097 [890A000000000000]  <1>     dq terminateStayRes    ;AH = 31H, PROCESS MANAGEMENT
   873 0000109F [8C0A000000000000]  <1>     dq getDeviceDPBptr     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
   874 000010A7 [040D000000000000]  <1>     dq ctrlBreakCheck      ;AH = 33H, MISC. SYS. FUNCTION
   875 000010AF [150D000000000000]  <1>     dq getInDOSflagPtr     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
   876 000010B7 [280D000000000000]  <1>     dq getIntVector        ;AH = 35H, MISC. SYS. FUNCTION
   877 000010BF [3F0D000000000000]  <1>     dq getDiskFreeSpace    ;AH = 36H, DISK MANAGEMENT
   878 000010C7 [AC06000000000000]  <1>     dq getsetSwitchChar    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
   879 000010CF [AC06000000000000]  <1>     dq getsetCountryInfo   ;AH = 38H, MISC. SYS. FUNCTION
   880 000010D7 [BA03000000000000]  <1>     dq makeDIR             ;AH = 39H, DIRECTORY OPERATION
   881 000010DF [BA03000000000000]  <1>     dq removeDIR           ;AH = 3AH, DIRECTORY OPERATION
   882 000010E7 [BA03000000000000]  <1>     dq changeCurrentDIR    ;AH = 3BH, DIRECTORY OPERATION
   883 000010EF [0F05000000000000]  <1>     dq createFileHdl       ;AH = 3CH, FILE OPERATION       HANDLE
   884 000010F7 [0F05000000000000]  <1>     dq openFileHdl         ;AH = 3DH, FILE OPERATION       HANDLE
   885 000010FF [0F05000000000000]  <1>     dq closeFileHdl        ;AH = 3EH, FILE OPERATION       HANDLE
   886 00001107 [1005000000000000]  <1>     dq readFileHdl         ;AH = 3FH, RECORD OPERATION     HANDLE
   887 0000110F [4905000000000000]  <1>     dq writeFileHdl        ;AH = 40H, RECORD OPERATION     HANDLE
   888 00001117 [5A05000000000000]  <1>     dq deleteFileHdl       ;AH = 41H, FILE OPERATION       HANDLE
   889 0000111F [5A05000000000000]  <1>     dq movFileReadPtr      ;AH = 42H, RECORD OPERATION     HANDLE
   890 00001127 [5A05000000000000]  <1>     dq changeFileModeHdl   ;AH = 43H, FILE OPERATION       HANDLE
   891 0000112F [5A05000000000000]  <1>     dq ioctrl              ;AH = 44H, MISC. SYS. FUNCTION
   892 00001137 [5A05000000000000]  <1>     dq duplicateHandle     ;AH = 45H, FILE OPERATION       HANDLE
   893 0000113F [5A05000000000000]  <1>     dq forceDuplicateHdl   ;AH = 46H, FILE OPERATION       HANDLE
   894 00001147 [BA03000000000000]  <1>     dq getCurrentDIR       ;AH = 47H, DIRECTORY OPERATION
   895 0000114F [3F06000000000000]  <1>     dq allocateMemory      ;AH = 48H, MEMORY MANAGEMENT
   896 00001157 [3F06000000000000]  <1>     dq freeMemory          ;AH = 49H, MEMORY MANAGEMENT
   897 0000115F [3F06000000000000]  <1>     dq reallocMemory       ;AH = 4AH, MEMORY MANAGEMENT
   898 00001167 [B50D000000000000]  <1>     dq loadExecChild       ;AH = 4BH, PROCESS MANAGEMENT
   899 0000116F [B50D000000000000]  <1>     dq terminateClean      ;AH = 4CH, PROCESS MANAGEMENT
   900 00001177 [B50D000000000000]  <1>     dq getRetCodeChild     ;AH = 4DH, PROCESS MANAGEMENT
   901 0000117F [5A05000000000000]  <1>     dq findFirstFileHdl    ;AH = 4EH, FILE OPERATION       HANDLE
   902 00001187 [5A05000000000000]  <1>     dq findNextFileHdl     ;AH = 4FH, FILE OPERATION       HANDLE
   903 0000118F [B60D000000000000]  <1>     dq setCurrProcessID    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
   904 00001197 [BE0D000000000000]  <1>     dq getCurrProcessID    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
   905 0000119F [D10D000000000000]  <1>     dq getSysVarsPtr       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
   906 000011A7 [E40D000000000000]  <1>     dq createDPB           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
   907 000011AF [C70E000000000000]  <1>     dq getVerifySetting    ;AH = 54H, DISK MANAGEMENT
   908 000011B7 [CE0E000000000000]  <1>     dq createPSP           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
   909 000011BF [5A05000000000000]  <1>     dq renameFile          ;AH = 56H, FILE OPERATION       HANDLE
   910 000011C7 [BA03000000000000]  <1>     dq getSetFileDateTime  ;AH = 57H, FILE OPERATION       HANDLE
   911 000011CF [3F06000000000000]  <1>     dq getsetMallocStrat   ;AH = 58H, MEMORY MANAGEMENT
   912 000011D7 [CF0E000000000000]  <1>     dq getExtendedError    ;AH = 59H, MISC. SYS. FUNCTION
   913 000011DF [5A05000000000000]  <1>     dq createUniqueFile    ;AH = 5AH, FILE OPERATION       HANDLE
   914 000011E7 [5A05000000000000]  <1>     dq createNewFile       ;AH = 5BH, FILE OPERATION       HANDLE
   915 000011EF [5A05000000000000]  <1>     dq lockUnlockFile      ;AH = 5CH, RECORD OPERATION     HANDLE
   916 000011F7 [FA0E000000000000]  <1>     dq getCritErrorInfo    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
   917 000011FF [FA0E000000000000]  <1>     dq networkServices     ;AH = 5EH, RESERVED NETWORK FUNCTION
   918 00001207 [FA0E000000000000]  <1>     dq networkRedirection  ;AH = 5FH, RESERVED NETWORK FUNCTION
   919 0000120F [BA03000000000000]  <1>     dq trueName            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   920 00001217 [0E0F000000000000]  <1>     dq return              ;AH = 61H, RESERVED
   921 0000121F [FB0E000000000000]  <1>     dq getPSPaddr          ;AH = 62H, PROCESS MANAGEMENT
   922 00001227 [0E0F000000000000]  <1>     dq return              ;AH = 63H, RESERVED
   923 0000122F [0E0F000000000000]  <1>     dq setDriverLookahead  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   924 00001237 [AC06000000000000]  <1>     dq getExtLocalInfo     ;AH = 65H, MISC. SYS. FUNCTION
   925 0000123F [AC06000000000000]  <1>     dq getsetGlobalCP      ;AH = 66H, MISC. SYS. FUNCTION
   926 00001247 [5A05000000000000]  <1>     dq setHandleCount      ;AH = 67H, FILE OPERAITON       F/H
   927 0000124F [5A05000000000000]  <1>     dq commitFile          ;AH = 68H, FILE OPERATION       HANDLE
   928 00001257 [0E0F000000000000]  <1>     dq getsetDiskSerial    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   929                              <1> kernelDispatchTableL  equ $ - kernelDispatchTable 
    23                                  %include "./Source/Misc/int44h.asm"
    24                              <1> critErrorHandler:   ;Int 44h
    25                              <1> ;User Stack in usage here, must be swapped to before this is called
    26                              <1> ;Entered with:  
    27                              <1> ;               AH = Critical Error Bitfield
    28                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
    29                              <1> ;               Bit 6 - Reserved
    30                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
    31                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
    32                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
    33                              <1> ;               Bits [2-1] = Affected Disk Error
    34                              <1> ;                     0 0   DOS area
    35                              <1> ;                     0 1   FAT area
    36                              <1> ;                     1 0   Directory area
    37                              <1> ;                     1 1   Data area
    38                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
    39                              <1> ;               AL  = Failing drive number if AH[7] = 0
    40                              <1> ;               DIL = Error code for errorMsg
    41                              <1> ;               RSI = EA of Device Header for which device the error occured
    42                              <1> ;Return:
    43                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
    44                              <1> ;                  = 1 - Retry the Operation    (Retry)
    45                              <1> ;                  = 2 - Terminate the Program  (Abort)
    46                              <1> ;                  = 3 - Fail the DOS call      (Fail)
    47 0000125F 53                  <1>     push rbx
    48 00001260 51                  <1>     push rcx
    49 00001261 52                  <1>     push rdx
    50 00001262 57                  <1>     push rdi
    51 00001263 56                  <1>     push rsi
    52 00001264 FC                  <1>     cld         ;Make String ops go forward
    53                              <1> 
    54 00001265 6689C3              <1>     mov bx, ax  ;Save ah in bh and al in bl (if needed)
    55 00001268 488D155E020000      <1>     lea rdx, qword [.crlf]
    56 0000126F B409                <1>     mov ah, 09h ;Print String
    57 00001271 CD41                <1>     int 41h     ;Call DOS to print CRLF part of message
    58                              <1> 
    59 00001273 81E7FF000000        <1>     and edi, 00FFh   ;Zero the upper bytes of DI just in case
    60 00001279 B90C000000          <1>     mov ecx, 0Ch
    61 0000127E 39CF                <1>     cmp edi, ecx  ;Check if the error number is erroniously above Gen Error
    62 00001280 0F47F9              <1>     cmova edi, ecx  ;If it is, move Gen Error into edi
    63 00001283 480FB7FF            <1>     movzx rdi, di
    64 00001287 4889FA              <1>     mov rdx, rdi    ;Copy error code
    65 0000128A 48C1E704            <1>     shl rdi, 4  ;Multiply by 16
    66 0000128E 48D1E2              <1>     shl rdx, 1  ;Multiply by 2
    67 00001291 4801D7              <1>     add rdi, rdx    ;Add the resultant multiplications
    68 00001294 488D1523010000      <1>     lea rdx, qword [.errorMsgTable]
    69 0000129B 488D143A            <1>     lea rdx, qword [rdx+rdi]   ;Load EA to rdx
    70 0000129F B409                <1>     mov ah, 09h ;Print String
    71 000012A1 CD41                <1>     int 41h     ;Call DOS to print first part of message
    72                              <1> 
    73 000012A3 488D1505020000      <1>     lea rdx, qword [.readmsg]
    74 000012AA 488D3D0D020000      <1>     lea rdi, qword [.writemsg]
    75 000012B1 F6C701              <1>     test bh, 1  ;Bit 0 is set if write operation
    76 000012B4 480F45D7            <1>     cmovnz rdx, rdi ;Move the correct r/w part of the message to rdx
    77 000012B8 B409                <1>     mov ah, 09h ;Print String
    78 000012BA CD41                <1>     int 41h     ;Call DOS to print error reading/writing portion
    79                              <1> 
    80 000012BC F6C780              <1>     test bh, 80h    ;Test bit 7 for char/Disk assertation
    81 000012BF 0F85DF000000        <1>     jnz .charError
    82                              <1> ;Disk error continues here
    83 000012C5 488D15DC010000      <1>     lea rdx, qword [.drive] ;Drive message
    84 000012CC B409                <1>     mov ah, 09h
    85 000012CE CD41                <1>     int 41h
    86 000012D0 88DA                <1>     mov dl, bl  ;Get zero based drive number into dl
    87 000012D2 80C241              <1>     add dl, "A" ;Add ASCII code
    88 000012D5 B402                <1>     mov ah, 02h ;Print char in dl
    89 000012D7 CD41                <1>     int 41h
    90                              <1> .userInput:
    91 000012D9 488D15ED010000      <1>     lea rdx, qword [.crlf]  ;Print new line
    92 000012E0 B409                <1>     mov ah, 09h
    93 000012E2 CD41                <1>     int 41h
    94                              <1> ;Abort, Retry, Ignore, Fail is word order
    95                              <1> ;Last message gets a ?, otherwise a comma followed by a 20h (space)
    96                              <1> .userAbort:
    97                              <1> ;Abort is always an option
    98 000012E4 488D15E5010000      <1>     lea rdx, qword [.abortmsg]
    99 000012EB B409                <1>     mov ah, 09h
   100 000012ED CD41                <1>     int 41h ;Call DOS to prompt user for ABORT option
   101                              <1> .userRetry:
   102 000012EF F6C710              <1>     test bh, 10h  ;Bit 4 is retry bit
   103 000012F2 7416                <1>     jz .userIgnore    ;If clear, dont print message
   104 000012F4 488D15ED010000      <1>     lea rdx, qword [.betweenMsg]
   105 000012FB B409                <1>     mov ah, 09h
   106 000012FD CD41                <1>     int 41h
   107 000012FF 488D15D7010000      <1>     lea rdx, qword [.retrymsg]
   108 00001306 B409                <1>     mov ah, 09h
   109 00001308 CD41                <1>     int 41h
   110                              <1> .userIgnore:
   111 0000130A F6C720              <1>     test bh, 20h    ;Bit 5 is ignore bit
   112 0000130D 7416                <1>     jz .userFail
   113 0000130F 488D15D2010000      <1>     lea rdx, qword [.betweenMsg]
   114 00001316 B409                <1>     mov ah, 09h
   115 00001318 CD41                <1>     int 41h
   116 0000131A 488D15B5010000      <1>     lea rdx, qword [.ignoremsg]
   117 00001321 B409                <1>     mov ah, 09h
   118 00001323 CD41                <1>     int 41h
   119                              <1> .userFail:
   120 00001325 F6C708              <1>     test bh, 08h    ;Bit 3 is Fail bit
   121 00001328 7416                <1>     jz .userMsgEnd
   122 0000132A 488D15B7010000      <1>     lea rdx, qword [.betweenMsg]
   123 00001331 B409                <1>     mov ah, 09h
   124 00001333 CD41                <1>     int 41h
   125 00001335 488D15A7010000      <1>     lea rdx, qword [.failmsg]
   126 0000133C B409                <1>     mov ah, 09h
   127 0000133E CD41                <1>     int 41h
   128                              <1> .userMsgEnd:
   129 00001340 488D15A4010000      <1>     lea rdx, qword [.endMsg]
   130 00001347 B409                <1>     mov ah, 09h
   131 00001349 CD41                <1>     int 41h
   132                              <1> ;Get user input now 
   133 0000134B 31C9                <1>     xor ecx, ecx  ;4 Possible Responses
   134 0000134D 488D3D9A010000      <1>     lea rdi, qword [.responses] ;Go to start of string
   135 00001354 B401                <1>     mov ah, 01h ;STDIN without Console Echo
   136 00001356 CD41                <1>     int 41h ;Get char in al
   137 00001358 3C61                <1>     cmp al, "a" ;Chack if lowercase
   138 0000135A 7202                <1>     jb .uip1    ;If the value is below, ignore subtraction
   139 0000135C 2C20                <1>     sub al, "a"-"A"  ;Turn the char into uppercase
   140                              <1> .uip1:
   141 0000135E AE                  <1>     scasb   ;Compare char to list, offset gives return code
   142 0000135F 740F                <1>     je .validInput  ;If they are equal, ecx has return code
   143 00001361 FFC1                <1>     inc ecx
   144 00001363 81F904000000        <1>     cmp ecx, 4
   145 00001369 75F3                <1>     jne .uip1
   146 0000136B E969FFFFFF          <1>     jmp .userInput ;If valid char not found, keep waiting 
   147                              <1> .validInput:
   148 00001370 88C8                <1>     mov al, cl  ;Move the offset into .responses into al
   149                              <1> ;Now check if the input is permitted
   150 00001372 3C02                <1>     cmp al, 2   ;Check if abort, abort always permitted
   151 00001374 7427                <1>     je .cehExit
   152 00001376 84C0                <1>     test al, al ;Check if 0 => Ignore
   153 00001378 740F                <1>     je .viIgnore
   154 0000137A 3C01                <1>     cmp al, 1   ;Check if 1 => Retry
   155 0000137C 7416                <1>     je .viRetry
   156                              <1> .viFail:    ;Fallthrough for fail (al = 3)
   157 0000137E F6C708              <1>     test bh, 8  ;Bit 3 is Fail bit
   158 00001381 0F8452FFFFFF        <1>     jz .userInput  ;If bit 3 is zero, prompt and get input again
   159 00001387 EB14                <1>     jmp short .cehExit
   160                              <1> .viIgnore:
   161 00001389 F6C720              <1>     test bh, 20h    ;Bit 5 is Ignore bit
   162 0000138C 0F8447FFFFFF        <1>     jz .userInput
   163 00001392 EB09                <1>     jmp short .cehExit
   164                              <1> .viRetry:
   165 00001394 F6C710              <1>     test bh, 10h    ;Bit 4 is Retry bit
   166 00001397 0F843CFFFFFF        <1>     jz .userInput
   167                              <1> .cehExit:
   168 0000139D 5E                  <1>     pop rsi
   169 0000139E 5F                  <1>     pop rdi
   170 0000139F 5A                  <1>     pop rdx
   171 000013A0 59                  <1>     pop rcx
   172 000013A1 5B                  <1>     pop rbx
   173 000013A2 48CF                <1>     iretq
   174                              <1> .charError:
   175 000013A4 B908000000          <1>     mov ecx, 8  ;8 chars in device name
   176 000013A9 4881C61A000000      <1>     add rsi, drvHdr.drvNam  ;Get the address of the Drive name
   177                              <1> .ce1:
   178 000013B0 AC                  <1>     lodsb   ;Get a string char into al and inc rsi
   179 000013B1 88C2                <1>     mov dl, al  ;Move char into dl
   180 000013B3 B402                <1>     mov ah, 02h
   181 000013B5 CD41                <1>     int 41h ;Print char
   182 000013B7 E2F7                <1>     loop .ce1   ;Keep looping until all 8 char device chars have been printed
   183 000013B9 E91BFFFFFF          <1>     jmp .userInput
   184                              <1> 
   185                              <1> .errorMsgTable: ;Each table entry is 18 chars long
   186 000013BE 57726974652050726F- <1>             db "Write Protect $   "       ;Error 0
   186 000013C7 746563742024202020  <1>
   187 000013D0 556E6B6E6F776E2055- <1>             db "Unknown Unit $    "       ;Error 1
   187 000013D9 6E6974202420202020  <1>
   188 000013E2 4E6F74205265616479- <1>             db "Not Ready $       "       ;Error 2
   188 000013EB 202420202020202020  <1>
   189 000013F4 556E6B6E6F776E2043- <1>             db "Unknown Command $ "       ;Error 3
   189 000013FD 6F6D6D616E64202420  <1>
   190 00001406 446174612024202020- <1>             db "Data $            "       ;Error 4
   190 0000140F 202020202020202020  <1>
   191 00001418 426164205265717565- <1>             db "Bad Request $     "       ;Error 5
   191 00001421 737420242020202020  <1>
   192 0000142A 5365656B2024202020- <1>             db "Seek $            "       ;Error 6
   192 00001433 202020202020202020  <1>
   193 0000143C 556E6B6E6F776E204D- <1>             db "Unknown Media $   "       ;Error 7
   193 00001445 656469612024202020  <1>
   194 0000144E 536563746F72204E6F- <1>             db "Sector Not Found $"       ;Error 8
   194 00001457 7420466F756E642024  <1>
   195 00001460 4F7574204F66205061- <1>             db "Out Of Paper $    "       ;Error 9
   195 00001469 706572202420202020  <1>
   196 00001472 577269746520466175- <1>             db "Write Fault $     "       ;Error A
   196 0000147B 6C7420242020202020  <1>
   197 00001484 52656164204661756C- <1>             db "Read Fault $      "       ;Error B
   197 0000148D 742024202020202020  <1>
   198 00001496 47656E6572616C2046- <1>             db "General Failure $ "       ;Error C
   198 0000149F 61696C757265202420  <1>
   199                              <1> 
   200 000014A8 64726976652024      <1> .drive      db "drive $"
   201 000014AF 6572726F7220726561- <1> .readmsg    db "error reading $"
   201 000014B8 64696E672024        <1>
   202 000014BE 6572726F7220777269- <1> .writemsg   db "error writing $"
   202 000014C7 74696E672024        <1>
   203 000014CD 0A0D24              <1> .crlf       db 0Ah, 0Dh, "$"
   204 000014D0 41626F727424        <1> .abortmsg   db "Abort$" 
   205 000014D6 49676E6F726524      <1> .ignoremsg  db "Ignore$"
   206 000014DD 526574727924        <1> .retrymsg   db "Retry$"
   207 000014E3 4661696C24          <1> .failmsg    db "Fail$"
   208 000014E8 2C2024              <1> .betweenMsg db ", $"
   209 000014EB 3F2024              <1> .endMsg     db "? $"
   210 000014EE 49524146            <1> .responses  db "IRAF"   ;Abort Retry Ignore Fail
    24                                  %include "./Source/Drivers/drvData.asm"
    25                              <1> ;-----------------------------------:
    26                              <1> ;          Driver routines          :
    27                              <1> ;-----------------------------------:
    28                              <1> drivers:
    29                              <1> conHdr:
    30 000014F2 [1415000000000000]  <1>     dq auxHdr
    31 000014FA 1308                <1>     dw 0813h
    32 000014FC [9216000000000000]  <1>     dq commonStrat
    33 00001504 [A116000000000000]  <1>     dq conDriver
    34 0000150C 434F4E2020202020    <1>     db "CON     "
    35                              <1> auxHdr:
    36 00001514 [3615000000000000]  <1>     dq prnHdr
    37 0000151C 0080                <1>     dw 08000h
    38 0000151E [9216000000000000]  <1>     dq commonStrat
    39 00001526 [6619000000000000]  <1>     dq com1Intr
    40 0000152E 4155582020202020    <1>     db "AUX     "
    41                              <1> prnHdr:
    42 00001536 [5815000000000000]  <1>     dq clkHdr
    43 0000153E 40A0                <1>     dw 0A040h
    44 00001540 [9A16000000000000]  <1>     dq nulStrat
    45 00001548 [A016000000000000]  <1>     dq nulIntr
    46 00001550 50524E2020202020    <1>     db "PRN     "
    47                              <1> clkHdr:
    48 00001558 [7A15000000000000]  <1>     dq msdHdr
    49 00001560 0880                <1>     dw 08008h
    50 00001562 [9216000000000000]  <1>     dq commonStrat
    51 0000156A [D917000000000000]  <1>     dq clkDriver
    52 00001572 434C4F434B242020    <1>     db "CLOCK$  "
    53                              <1> msdHdr:
    54 0000157A [9C15000000000000]  <1>     dq com1Hdr
    55 00001582 0008                <1>     dw 00800h   ;Once Generic IO implemented, change to 00840h
    56 00001584 [9216000000000000]  <1>     dq commonStrat
    57 0000158C [0B1B000000000000]  <1>     dq msdDriver
    58 00001594 0000000000000000    <1>     db 0,0,0,0,0,0,0,0
    59                              <1> com1Hdr:
    60 0000159C [BE15000000000000]  <1>     dq com2Hdr
    61 000015A4 0080                <1>     dw 08000h
    62 000015A6 [9216000000000000]  <1>     dq commonStrat
    63 000015AE [6619000000000000]  <1>     dq com1Intr
    64 000015B6 434F4D3120202020    <1>     db "COM1    "
    65                              <1> com2Hdr:
    66 000015BE [E015000000000000]  <1>     dq com3Hdr
    67 000015C6 0080                <1>     dw 08000h
    68 000015C8 [9216000000000000]  <1>     dq commonStrat
    69 000015D0 [6F19000000000000]  <1>     dq com2Intr
    70 000015D8 434F4D3220202020    <1>     db "COM2    "
    71                              <1> com3Hdr:
    72 000015E0 [0216000000000000]  <1>     dq com4Hdr
    73 000015E8 0080                <1>     dw 08000h
    74 000015EA [9216000000000000]  <1>     dq commonStrat
    75 000015F2 [7819000000000000]  <1>     dq com3Intr
    76 000015FA 434F4D3320202020    <1>     db "COM3    "
    77                              <1> com4Hdr:
    78 00001602 [2416000000000000]  <1>     dq lpt1Hdr
    79 0000160A 0080                <1>     dw 08000h
    80 0000160C [9216000000000000]  <1>     dq commonStrat
    81 00001614 [8119000000000000]  <1>     dq com4Intr
    82 0000161C 434F4D3420202020    <1>     db "COM4    "
    83                              <1> lpt1Hdr:
    84 00001624 [4616000000000000]  <1>     dq lpt2Hdr
    85 0000162C 40A0                <1>     dw 0A040h
    86 0000162E [9A16000000000000]  <1>     dq nulStrat
    87 00001636 [A016000000000000]  <1>     dq nulIntr
    88 0000163E 4C50543120202020    <1>     db "LPT1    "
    89                              <1> lpt2Hdr:
    90 00001646 [6816000000000000]  <1>     dq lpt3Hdr
    91 0000164E 40A0                <1>     dw 0A040h
    92 00001650 [9A16000000000000]  <1>     dq nulStrat
    93 00001658 [A016000000000000]  <1>     dq nulIntr
    94 00001660 4C50543220202020    <1>     db "LPT2    "
    95                              <1> lpt3Hdr:
    96 00001668 FFFFFFFFFFFFFFFF    <1>     dq -1
    97 00001670 40A0                <1>     dw 0A040h
    98 00001672 [9A16000000000000]  <1>     dq nulStrat
    99 0000167A [A016000000000000]  <1>     dq nulIntr
   100 00001682 4C50543320202020    <1>     dq "LPT3    "
   101 0000168A 0000000000000000    <1> reqHdrPtr  dq 0    ;Where the default device drivers store the ReqPtr
    25                                  %include "./Source/Drivers/charDrv.asm"
    26                              <1> commonStrat:
    27                              <1> ;DOS calls this function with rbx=Ptr to request header
    28 00001692 48891DF1FFFFFF      <1>     mov qword [reqHdrPtr], rbx
    29 00001699 C3                  <1>     ret
    30                              <1> nulStrat:
    31 0000169A 66C743030001        <1>     mov word [rbx + drvReqHdr.status], 0100h    ;Set done bit directly
    32                              <1> nulIntr:
    33 000016A0 C3                  <1>     ret
    34                              <1> conDriver:
    35 000016A1 50                  <1>     push rax
    36 000016A2 53                  <1>     push rbx
    37 000016A3 488B1DE0FFFFFF      <1>     mov rbx, qword [reqHdrPtr]
    38 000016AA B003                <1>     mov al, 03h ;Unknown Command
    39 000016AC 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    40 000016B0 7735                <1>     ja .conWriteErrorCode ;If yes, error!
    41                              <1> 
    42 000016B2 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
    43 000016B5 3C04                <1>     cmp al, 4
    44 000016B7 743D                <1>     jz .conRead
    45 000016B9 3C05                <1>     cmp al, 5
    46 000016BB 747F                <1>     jz .conNondestructiveRead
    47 000016BD 3C06                <1>     cmp al, 6
    48 000016BF 0F84A8000000        <1>     jz .conInputStatus
    49 000016C5 3C07                <1>     cmp al, 7
    50 000016C7 0F84B0000000        <1>     jz .conFlushInputBuffers
    51 000016CD 3C08                <1>     cmp al, 8
    52 000016CF 0F84CA000000        <1>     jz .conWrite
    53 000016D5 3C09                <1>     cmp al, 9
    54 000016D7 0F84C2000000        <1>     jz .conWrite
    55 000016DD 3C0A                <1>     cmp al, 0Ah
    56 000016DF 0F84E3000000        <1>     jz .conOutputStatus
    57 000016E5 EB06                <1>     jmp short .conExit  ;All other valid functions return done
    58                              <1> .conWriteErrorCode:     ;Jump to with al=Standard Error code
    59 000016E7 B480                <1>     mov ah, 80h ;Set error bit
    60 000016E9 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
    61                              <1> .conExit:
    62 000016ED 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
    63 000016F3 5B                  <1>     pop rbx
    64 000016F4 58                  <1>     pop rax
    65 000016F5 C3                  <1>     ret
    66                              <1> .conRead:    ;Function 4
    67 000016F6 B005                <1>     mov al, 05h ;Bad request structure length?
    68 000016F8 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
    69 000016FB 75EA                <1>     jne .conWriteErrorCode
    70                              <1> 
    71 000016FD 57                  <1>     push rdi
    72 000016FE 51                  <1>     push rcx
    73 000016FF 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
    74 00001703 31C9                <1>     xor ecx, ecx    ;Zero the char counter
    75                              <1> .cre1:
    76 00001705 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
    77 00001708 741C                <1>     je .cre2
    78 0000170A 803DC700000000      <1>     cmp byte [.conBuf], 0   ;Does the buffer contain a zero?
    79 00001711 751A                <1>     jnz .cre3   ;No, get the buffer value
    80 00001713 31C0                <1>     xor eax, eax
    81 00001715 CD36                <1>     int 36h
    82                              <1> .cre11:
    83 00001717 AA                  <1>     stosb
    84 00001718 84C0                <1>     test al, al ;Was the ascii code 0?
    85 0000171A 7506                <1>     jnz .cre12  ;No, skip storing scancode
    86 0000171C 8825B6000000        <1>     mov byte [.conBuf], ah  ;Save scancode
    87                              <1> .cre12:
    88 00001722 FFC1                <1>     inc ecx ;Inc chars stored in buffer
    89 00001724 EBDF                <1>     jmp short .cre1
    90                              <1> .cre2:
    91 00001726 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
    92 00001729 59                  <1>     pop rcx
    93 0000172A 5F                  <1>     pop rdi
    94 0000172B EBC0                <1>     jmp short .conExit
    95                              <1> .cre3:
    96 0000172D 8A05A5000000        <1>     mov al, byte [.conBuf]  ;Get the buffer value
    97 00001733 C6059E00000000      <1>     mov byte [.conBuf], 0   ;Reset the buffer value
    98 0000173A EBDB                <1>     jmp short .cre11
    99                              <1> 
   100                              <1> .conNondestructiveRead:  ;Function 5
   101 0000173C B005                <1>     mov al, 05h ;Bad request structure length?
   102 0000173E 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   103 00001741 75A4                <1>     jne .conWriteErrorCode
   104 00001743 803D8E00000000      <1>     cmp byte [.conBuf], 0
   105 0000174A 7519                <1>     jnz .cnr2
   106 0000174C B401                <1>     mov ah, 01h     ;Get key if exists
   107 0000174E CD36                <1>     int 36h
   108 00001750 7408                <1>     jz .cnr1        ;If zero clear => no key, go forwards
   109                              <1>     ;Keystroke available
   110                              <1> .cnr0:
   111 00001752 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Move char in al
   112 00001755 E993FFFFFF          <1>     jmp .conExit
   113                              <1> .cnr1: ;No keystroke available
   114 0000175A 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 0200h   ;Set busy bit
   115 00001760 E988FFFFFF          <1>     jmp .conExit
   116                              <1> .cnr2:
   117 00001765 8A056D000000        <1>     mov al, byte [.conBuf]  ;Copy scancode but dont reset it
   118 0000176B EBE5                <1>     jmp short .cnr0   ;Keystroke is available clearly
   119                              <1> 
   120                              <1> .conInputStatus:         ;Function 6
   121 0000176D B005                <1>     mov al, 05h ;Bad request structure length?
   122 0000176F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   123 00001772 0F856FFFFFFF        <1>     jne .conWriteErrorCode
   124 00001778 E970FFFFFF          <1>     jmp .conExit ;Exit, device ready
   125                              <1> 
   126                              <1> .conFlushInputBuffers:   ;Function 7
   127 0000177D B005                <1>     mov al, 05h ;Bad request structure length?
   128 0000177F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   129 00001782 0F855FFFFFFF        <1>     jne .conWriteErrorCode
   130 00001788 C6054900000000      <1>     mov byte [.conBuf], 0   ;Clear buffer
   131                              <1> .cfib0:
   132 0000178F B401                <1>     mov ah, 01      ;Get buffer status
   133 00001791 CD36                <1>     int 36h
   134 00001793 0F8454FFFFFF        <1>     jz .conExit     ;If zero clear => no more keys to read
   135 00001799 30E4                <1>     xor ah, ah
   136 0000179B CD36                <1>     int 36h ;Read key to flush from buffer
   137 0000179D EBF0                <1>     jmp short .cfib0
   138                              <1> 
   139                              <1> .conWrite:   ;Function 8 and 9
   140 0000179F B005                <1>     mov al, 05h ;Bad request structure length?
   141 000017A1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   142 000017A4 0F853DFFFFFF        <1>     jne .conWriteErrorCode
   143                              <1> 
   144 000017AA 56                  <1>     push rsi
   145 000017AB 51                  <1>     push rcx
   146 000017AC 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   147 000017B0 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   148                              <1> .cw1: 
   149 000017B2 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   150 000017B5 7407                <1>     je .cw2
   151 000017B7 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   152 000017B8 CD49                <1>     int 49h ;Fast print char
   153 000017BA FFC1                <1>     inc ecx
   154 000017BC EBF4                <1>     jmp short .cw1 ;keep printing until all chars printed
   155                              <1> .cw2:
   156 000017BE 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   157 000017C1 59                  <1>     pop rcx
   158 000017C2 5E                  <1>     pop rsi
   159 000017C3 E925FFFFFF          <1>     jmp .conExit
   160                              <1> .conOutputStatus:   ;Function 0Ah
   161 000017C8 B005                <1>     mov al, 05h ;Bad request structure length?
   162 000017CA 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   163 000017CD 0F8514FFFFFF        <1>     jne .conWriteErrorCode
   164 000017D3 E915FFFFFF          <1>     jmp .conExit
   165                              <1> 
   166 000017D8 00                  <1> .conBuf db 0    ;Single byte buffer
   167                              <1> clkDriver:
   168 000017D9 50                  <1>     push rax
   169 000017DA 53                  <1>     push rbx
   170 000017DB 51                  <1>     push rcx
   171 000017DC 52                  <1>     push rdx
   172 000017DD 56                  <1>     push rsi
   173 000017DE 55                  <1>     push rbp
   174 000017DF 488B1DA4FEFFFF      <1>     mov rbx, qword [reqHdrPtr]
   175 000017E6 B003                <1>     mov al, 03h ;Unknown Command
   176 000017E8 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   177 000017EC 772B                <1>     ja .clkWriteErrorCode ;If yes, error!
   178                              <1> 
   179 000017EE 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   180 000017F1 3C04                <1>     cmp al, 04h
   181 000017F3 7437                <1>     jz .clkRead
   182 000017F5 3C06                <1>     cmp al, 06h
   183 000017F7 0F8494000000        <1>     jz .clkInputStatus
   184 000017FD 3C07                <1>     cmp al, 07h
   185 000017FF 0F8498000000        <1>     jz .clkFlushInputBuffers
   186 00001805 3C08                <1>     cmp al, 08h
   187 00001807 0F84A0000000        <1>     jz .clkWrite
   188 0000180D 3C09                <1>     cmp al, 09h
   189 0000180F 0F8498000000        <1>     jz .clkWrite
   190 00001815 EB08                <1>     jmp short .clkExit  ;All other valid functions return done immediately!
   191                              <1> .clkNotFunctioning:
   192 00001817 B002                <1>     mov al, 02h ;Device not ready error
   193                              <1> .clkWriteErrorCode:
   194 00001819 B480                <1>     mov ah, 80h ;Set error bit
   195 0000181B 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   196                              <1> .clkExit:
   197 0000181F 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Merge done bit
   198 00001825 5D                  <1>     pop rbp
   199 00001826 5E                  <1>     pop rsi
   200 00001827 5A                  <1>     pop rdx
   201 00001828 59                  <1>     pop rcx
   202 00001829 5B                  <1>     pop rbx
   203 0000182A 58                  <1>     pop rax
   204 0000182B C3                  <1>     ret
   205                              <1> 
   206                              <1> .clkRead:           ;Function 4
   207 0000182C B005                <1>     mov al, 05h ;Bad request structure length?
   208 0000182E 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   209 00001831 75E6                <1>     jne .clkWriteErrorCode
   210                              <1> 
   211 00001833 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   212 00001836 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   213 0000183A 668B05FE000000      <1>     mov ax, word [.clkDate] ;Get the clock date
   214 00001841 66894500            <1>     mov word [rbp + clkStruc.dateWord], ax
   215 00001845 30E4                <1>     xor ah, ah
   216 00001847 CD3A                <1>     int 3Ah         ;Read the system timer
   217 00001849 84C0                <1>     test al, al     ;Check to see if midnight has passed?
   218 0000184B 740D                <1>     jz .clkr1       ;Nope, now just time 
   219 0000184D 30E4                <1>     xor ah, ah
   220                              <1>     ;This works as al should keep count of the # of days passed since last read
   221 0000184F 66014500            <1>     add word [rbp + clkStruc.dateWord], ax
   222 00001853 660105E5000000      <1>     add word [.clkDate], ax ;Add to internal date counter too
   223                              <1> .clkr1:
   224 0000185A 884D03              <1>     mov byte [rbp + clkStruc.hours], cl   ;Save hours
   225 0000185D 0FB7D2              <1>     movzx edx, dx
   226 00001860 89D3                <1>     mov ebx, edx  ;Save the minutes/seconds/hseconds count
   227 00001862 89D0                <1>     mov eax, edx
   228 00001864 31D2                <1>     xor edx, edx
   229 00001866 89D8                <1>     mov eax, ebx
   230 00001868 B944040000          <1>     mov ecx, 1092   
   231 0000186D F7F1                <1>     div ecx
   232 0000186F 884502              <1>     mov byte [rbp + clkStruc.minutes], al
   233 00001872 89D0                <1>     mov eax, edx    ;Get remainder in eax
   234 00001874 678D0480            <1>     lea eax, dword [eax + 4*eax]    ;Multiply by 5
   235 00001878 31D2                <1>     xor edx, edx
   236 0000187A B95B000000          <1>     mov ecx, 91 ;5*18.2
   237 0000187F F7F1                <1>     div ecx
   238 00001881 884505              <1>     mov byte [rbp + clkStruc.seconds], al
   239 00001884 89D0                <1>     mov eax, edx    ;Get remainder in eax
   240                              <1>     ;lea eax, dword [eax + 4*eax]
   241                              <1>     ;add eax, edx    ;Essentially multiply by 6
   242 00001886 884504              <1>     mov byte [rbp + clkStruc.hseconds], al
   243 00001889 4889F3              <1>     mov rbx, rsi    ;Return the packet pointer back to rbx
   244 0000188C E98EFFFFFF          <1>     jmp .clkExit
   245                              <1> 
   246                              <1> .clkInputStatus:    ;Function 6
   247                              <1> ;Always return ready
   248 00001891 B005                <1>     mov al, 05h ;Bad request structure length?
   249 00001893 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   250 00001896 7581                <1>     jne .clkWriteErrorCode
   251 00001898 E982FFFFFF          <1>     jmp .clkExit
   252                              <1> .clkFlushInputBuffers:  ;Function 7
   253                              <1> ;Always return done immediately
   254 0000189D B005                <1>     mov al, 05h ;Bad request structure length?
   255 0000189F 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   256 000018A2 0F8571FFFFFF        <1>     jne .clkWriteErrorCode
   257 000018A8 E972FFFFFF          <1>     jmp .clkExit
   258                              <1> 
   259                              <1> .clkWrite:          ;Functions 8 and 9
   260 000018AD B005                <1>     mov al, 05h ;Bad request structure length?
   261 000018AF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   262 000018B2 0F8561FFFFFF        <1>     jne .clkWriteErrorCode
   263                              <1> 
   264 000018B8 4889DE              <1>     mov rsi, rbx    ;Save rbx temporarily in rsi
   265 000018BB 488B6B0E            <1>     mov rbp, qword [rbx + ioReqPkt.bufptr]    ;Save the clock struc ptr in rbp
   266 000018BF 668B4500            <1>     mov ax, word [rbp + clkStruc.dateWord]    ;Get date word
   267 000018C3 66890575000000      <1>     mov word [.clkDate], ax ;Save date internally
   268                              <1> 
   269 000018CA 31DB                <1>     xor ebx, ebx    ;Clear temporary lo count register
   270 000018CC 0FB64504            <1>     movzx eax, byte [rbp + clkStruc.hseconds]
   271 000018D0 B105                <1>     mov cl, 5
   272 000018D2 F6F1                <1>     div cl          ;Divide al by 5
   273 000018D4 30E4                <1>     xor ah, ah      ;Remove the remainder
   274 000018D6 01C3                <1>     add ebx, eax    ;Add the hseconds to final value
   275                              <1> ;Using the decimal part of this formula for the low count
   276                              <1> ;LoCount = (Minutes * 1092.38) + (Seconds * 18.21) + (Hundreths * .182)
   277 000018D8 8A4505              <1>     mov al, byte [rbp + clkStruc.seconds]
   278 000018DB B912000000          <1>     mov ecx, 18
   279 000018E0 F7E1                <1>     mul ecx  
   280 000018E2 01C3                <1>     add ebx, eax
   281                              <1> 
   282 000018E4 31D2                <1>     xor edx, edx
   283 000018E6 0FB64502            <1>     movzx eax, byte [rbp + clkStruc.minutes]
   284 000018EA B944040000          <1>     mov ecx, 1092
   285 000018EF F7E1                <1>     mul ecx
   286 000018F1 01C3                <1>     add ebx, eax
   287 000018F3 89DA                <1>     mov edx, ebx    ;edx now has low count
   288 000018F5 0FB64D03            <1>     movzx ecx, byte [rbp + clkStruc.hours]
   289 000018F9 B401                <1>     mov ah, 01h     ;Set the system time
   290 000018FB CD3A                <1>     int 3Ah
   291                              <1> 
   292 000018FD 4889F3              <1>     mov rbx, rsi
   293 00001900 E91AFFFFFF          <1>     jmp .clkExit
   294                              <1> 
   295                              <1> .clkBCDtoHex:
   296                              <1> ;Converts a BCD value to a Hex byte
   297                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   298 00001905 51                  <1>     push rcx
   299 00001906 0FB6C0              <1>     movzx eax, al   ;Zero extend
   300 00001909 89C1                <1>     mov ecx, eax    ;Save al in ecx
   301 0000190B 250F000000          <1>     and eax, 0Fh    ;Get lower nybble
   302 00001910 81E1F0000000        <1>     and ecx, 0F0h   ;Get upper nybble
   303 00001916 C1E904              <1>     shr ecx, 4      ;Shift upper nybble value down
   304                              <1> .cbth0:
   305 00001919 050A000000          <1>     add eax, 10
   306 0000191E E2F9                <1>     loop .cbth0
   307 00001920 59                  <1>     pop rcx
   308 00001921 C3                  <1>     ret
   309                              <1> 
   310                              <1> .clkHexToBCD:
   311                              <1> ;Converts a Hex byte into two BCD digits
   312                              <1> ;Takes input in al, returns in al (zero-ed upper seven bytes)
   313 00001922 51                  <1>     push rcx
   314 00001923 0FB6C0              <1>     movzx eax, al   ;Zero extend
   315 00001926 31C9                <1>     xor ecx, ecx
   316                              <1> .chtb0:
   317 00001928 3D0A000000          <1>     cmp eax, 10
   318 0000192D 7209                <1>     jb .chtb1
   319 0000192F 2D0A000000          <1>     sub eax, 10
   320 00001934 FFC1                <1>     inc ecx
   321 00001936 EBF0                <1>     jmp short .chtb0
   322                              <1> .chtb1:
   323 00001938 C1E104              <1>     shl ecx, 4  ;Move to upper nybble
   324 0000193B 08C8                <1>     or al, cl   ;Move upper nybble into al upper nybble
   325 0000193D 59                  <1>     pop rcx
   326 0000193E C3                  <1>     ret
   327 0000193F 0000                <1> .clkDate    dw 0    ;Number of days since 01/01/1980
   328                              <1> ;When counting the number of days, first compute the number of years since
   329                              <1> ; 1980 and your year. 
   330                              <1> ;Then, using the table below, find the number of leap years between 1980
   331                              <1> ; and (YourYear - 1). 
   332                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
   333                              <1> ; days since 01/01/1980 and 01/01/YourYear.
   334                              <1> ;Use the months table to get the number of days in a normal month as leap 
   335                              <1> ; years are added using the previous comment.
   336                              <1> ;Finally check if the date is after 28th Feb. If it is, check if your year is 
   337                              <1> ; a leap year using the table. If it is, add an extra day.
   338                              <1> .clkLeapYears:
   339 00001941 0004080C1014181C20- <1>     db 00, 04, 08, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 
   339 0000194A 24282C30            <1>
   340 0000194E 34383C4044484C5054- <1>     db 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96
   340 00001957 585C60              <1>
   341                              <1> .clkMonths:
   342 0000195A 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
   342 00001963 1F1E1F              <1>
   343                              <1> ;COM Driver headers and main interrupt strat
   344                              <1> com1Intr:
   345 00001966 C6059D01000000      <1>     mov byte [comIntr.comDevice], 0
   346 0000196D EB19                <1>     jmp short comIntr
   347                              <1> com2Intr:
   348 0000196F C6059401000001      <1>     mov byte [comIntr.comDevice], 1
   349 00001976 EB10                <1>     jmp short comIntr
   350                              <1> com3Intr:
   351 00001978 C6058B01000002      <1>     mov byte [comIntr.comDevice], 2
   352 0000197F EB07                <1>     jmp short comIntr
   353                              <1> com4Intr:
   354 00001981 C6058201000003      <1>     mov byte [comIntr.comDevice], 3
   355                              <1> comIntr:
   356 00001988 50                  <1>     push rax
   357 00001989 53                  <1>     push rbx
   358 0000198A 51                  <1>     push rcx
   359 0000198B 52                  <1>     push rdx
   360 0000198C 56                  <1>     push rsi
   361 0000198D 57                  <1>     push rdi
   362 0000198E 488B1DF5FCFFFF      <1>     mov rbx, qword [reqHdrPtr]
   363 00001995 B003                <1>     mov al, 03h ;Unknown Command
   364 00001997 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
   365 0000199B 7756                <1>     ja .comWriteErrorCode ;If yes, error!
   366                              <1> 
   367 0000199D 8A4302              <1>     mov al, byte [rbx + drvReqHdr.cmdcde]
   368 000019A0 3C04                <1>     cmp al, 4   ;Read Character(s)
   369 000019A2 7462                <1>     jz .comRead
   370 000019A4 3C05                <1>     cmp al, 5   ;Non-destructive read, acts like fast read 1 char if available
   371 000019A6 0F849B000000        <1>     jz .comNondestructiveRead   
   372 000019AC 3C06                <1>     cmp al, 6   ;Read Input Status, always return with Busy bit = 0
   373 000019AE 0F8484000000        <1>     jz .comReadInputStatus
   374 000019B4 3C07                <1>     cmp al, 7   ;Flush read buffers, return done
   375 000019B6 0F84B9000000        <1>     jz .comFlushInputBuffers
   376 000019BC 3C08                <1>     cmp al, 8
   377 000019BE 0F84DB000000        <1>     jz .comWrite
   378 000019C4 3C09                <1>     cmp al, 9
   379 000019C6 0F84D3000000        <1>     jz .comWrite
   380 000019CC 3C0A                <1>     cmp al, 0Ah
   381 000019CE 0F8400010000        <1>     jz .comOutputStatus ;Return Clear to send bit inverted for busy bit
   382 000019D4 EB23                <1>     jmp short .comExit  ;All other valid functions should return done
   383                              <1> .comErrorNoCount:
   384 000019D6 B002                <1>     mov al, 02h ;Unknown device
   385 000019D8 EB19                <1>     jmp short .comWriteErrorCode
   386                              <1> .comReadError:
   387 000019DA BA0B000000          <1>     mov edx, 0Bh
   388                              <1> .comWriteError:
   389 000019DF BA0A000000          <1>     mov edx, 0Ah
   390                              <1> .comError:
   391 000019E4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx ;Store actual transferred chars
   392 000019E7 B902000000          <1>     mov ecx, 02h    ;Unknown device
   393 000019EC 3CFE                <1>     cmp al, 0FEh    ;Invalid COM port
   394 000019EE 0F44D1              <1>     cmove edx, ecx  ;Only move unknown device error code if invalid COM port
   395 000019F1 88D0                <1>     mov al, dl      ;Move dl to al to store error code
   396                              <1> .comWriteErrorCode:    ;Jump to with al=Standard Error code
   397 000019F3 B480                <1>     mov ah, 80h ;Set error bit
   398 000019F5 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   399                              <1> .comExit:
   400 000019F9 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h    ;Merge done bit
   401 000019FF 5F                  <1>     pop rdi
   402 00001A00 5E                  <1>     pop rsi
   403 00001A01 5A                  <1>     pop rdx
   404 00001A02 59                  <1>     pop rcx
   405 00001A03 5B                  <1>     pop rbx
   406 00001A04 58                  <1>     pop rax
   407 00001A05 C3                  <1>     ret
   408                              <1> 
   409                              <1> .comRead:
   410 00001A06 B005                <1>     mov al, 05h ;Bad request structure length?
   411 00001A08 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   412 00001A0B 75E6                <1>     jne .comWriteErrorCode
   413                              <1> 
   414 00001A0D 488B7B0E            <1>     mov rdi, qword [rbx + ioReqPkt.bufptr]  ;Point rdi to caller buffer
   415 00001A11 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   416                              <1> .cr1:
   417 00001A13 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   418 00001A16 741B                <1>     je .cre2
   419                              <1> .cr11:  ;Blocking wait, could be an infinite loop. Imitate basic DOS driver
   420 00001A18 B802000000          <1>     mov eax, 02h    ;Recieve 
   421 00001A1D 8A15E7000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   422 00001A23 6698                <1>     cbw     ;Zero extend to upper byte
   423 00001A25 CD34                <1>     int 34h ;Recieve Char
   424 00001A27 72BB                <1>     jc .comError
   425 00001A29 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, keep waiting
   426 00001A2C 74EA                <1>     je .cr11
   427 00001A2E AA                  <1>     stosb   ;Store char in al into buffer and inc rdi
   428 00001A2F FFC1                <1>     inc ecx
   429 00001A31 EBE0                <1>     jmp short .cr1
   430                              <1> .cre2:
   431 00001A33 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   432 00001A36 EBC1                <1>     jmp short .comExit
   433                              <1> 
   434                              <1> .comReadInputStatus:
   435 00001A38 B005                <1>     mov al, 05h ;Bad request structure length?
   436 00001A3A 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   437 00001A3D 75B4                <1>     jne .comWriteErrorCode
   438 00001A3F 66C743030000        <1>     mov word [rbx + statusReqPkt.status], 0 ;Chars ready to read status
   439 00001A45 EBB2                <1>     jmp short .comExit
   440                              <1> 
   441                              <1> .comNondestructiveRead:
   442                              <1> ;Acts like a "read one character if there is one" function
   443 00001A47 B005                <1>     mov al, 05h ;Bad request structure length?
   444 00001A49 803B0E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], nonDestInNoWaitReqPkt_size
   445 00001A4C 75A5                <1>     jne .comWriteErrorCode
   446                              <1> .cndr1:
   447 00001A4E B802000000          <1>     mov eax, 02h    ;Recieve 
   448 00001A53 8A15B1000000        <1>     mov dl, byte [.comDevice]    ;Get transacting com device
   449 00001A59 6698                <1>     cbw     ;Zero extend to upper byte
   450 00001A5B CD34                <1>     int 34h ;Recieve Char
   451 00001A5D 0F8273FFFFFF        <1>     jc .comErrorNoCount ;Dont save a char transfer number
   452 00001A63 80FC80              <1>     cmp ah, 80h ;Did a "timeout" occur? If so, return with busy = 1
   453 00001A66 7405                <1>     je .cndr2
   454 00001A68 88430D              <1>     mov byte [rbx + nonDestInNoWaitReqPkt.retbyt], al   ;Get next char
   455 00001A6B EB8C                <1>     jmp short .comExit
   456                              <1> .cndr2:
   457 00001A6D 66C743030002        <1>     mov word [rbx + nonDestInNoWaitReqPkt.status], 200h ;Busy bit set
   458 00001A73 EB84                <1>     jmp short .comExit
   459                              <1> 
   460                              <1> .comFlushInputBuffers:
   461 00001A75 B005                <1>     mov al, 05h ;Bad request structure length?
   462 00001A77 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], flushReqPkt_size
   463 00001A7A 0F8573FFFFFF        <1>     jne .comWriteErrorCode
   464                              <1> .cfib0:
   465 00001A80 8A1584000000        <1>     mov dl, byte [.comDevice]
   466 00001A86 6698                <1>     cbw
   467 00001A88 B802000000          <1>     mov eax, 02h    ;Recieve
   468 00001A8D CD34                <1>     int 34h
   469 00001A8F 0F8241FFFFFF        <1>     jc .comErrorNoCount
   470 00001A95 80FC80              <1>     cmp ah, 80h ;Keep looping until ah = 80h (no more chars in buffer)
   471 00001A98 75E6                <1>     jne .cfib0
   472 00001A9A E95AFFFFFF          <1>     jmp .comExit
   473                              <1> 
   474                              <1> .comWrite:
   475 00001A9F B005                <1>     mov al, 05h ;Bad request structure length?
   476 00001AA1 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   477 00001AA4 0F8549FFFFFF        <1>     jne .comWriteErrorCode
   478                              <1> 
   479 00001AAA 488B730E            <1>     mov rsi, qword [rbx + ioReqPkt.bufptr] ;Point rsi to caller buffer 
   480 00001AAE 31C9                <1>     xor ecx, ecx    ;Zero the char counter
   481                              <1> .cw1: 
   482 00001AB0 3B4B16              <1>     cmp ecx, dword [rbx + ioReqPkt.tfrlen]
   483 00001AB3 7417                <1>     je .cw2
   484 00001AB5 AC                  <1>     lodsb   ;Get char into al, and inc rsi
   485 00001AB6 B401                <1>     mov ah, 01h ;Move function number into ah
   486 00001AB8 8A154C000000        <1>     mov dl, byte [.comDevice]
   487 00001ABE 6698                <1>     cbw     ;Zero extend to upper byte
   488 00001AC0 CD34                <1>     int 34h ;Transmit char
   489 00001AC2 0F821CFFFFFF        <1>     jc .comError
   490 00001AC8 FFC1                <1>     inc ecx
   491 00001ACA EBE4                <1>     jmp short .cw1 ;keep printing until all chars printed
   492                              <1> .cw2:
   493 00001ACC 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx  ;Move num of transferred chars
   494 00001ACF E925FFFFFF          <1>     jmp .comExit
   495                              <1> 
   496                              <1> .comOutputStatus:
   497                              <1> ;Read MODEM status
   498 00001AD4 B005                <1>     mov al, 05h ;Bad request structure length?
   499 00001AD6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], statusReqPkt_size
   500 00001AD9 0F8514FFFFFF        <1>     jne .comWriteErrorCode
   501                              <1> 
   502 00001ADF 8A1525000000        <1>     mov dl, byte [.comDevice]
   503 00001AE5 6698                <1>     cbw     ;Zero extend to upper byte
   504 00001AE7 B403                <1>     mov ah, 03h     ;Get status
   505 00001AE9 CD34                <1>     int 34h
   506 00001AEB 0F82E5FEFFFF        <1>     jc .comErrorNoCount
   507 00001AF1 2510000000          <1>     and eax, 10h ;Isolate bit 4 of al, clear to set, and clear all other bits
   508 00001AF6 C1E005              <1>     shl eax, 5   ;Shift it up to bit 9 (busy bit in status word) 
   509 00001AF9 F7D0                <1>     not eax      ;Bitwise inversion
   510 00001AFB 2500020000          <1>     and eax, 200h   ;Isolate bit 9
   511 00001B00 6689441B03          <1>     mov word [rbx + rbx + drvReqHdr.status], ax  ;Add the busy bit
   512 00001B05 E9EFFEFFFF          <1>     jmp .comExit
   513 00001B0A 00                  <1> .comDevice   db 0
    26                                  %include "./Source/Drivers/diskDrv.asm"
    27                              <1> msdDriver:
    28 00001B0B 50                  <1>     push rax
    29 00001B0C 53                  <1>     push rbx
    30 00001B0D 51                  <1>     push rcx
    31 00001B0E 52                  <1>     push rdx
    32 00001B0F 56                  <1>     push rsi
    33 00001B10 57                  <1>     push rdi
    34 00001B11 55                  <1>     push rbp
    35 00001B12 4150                <1>     push r8
    36 00001B14 488B1D6FFBFFFF      <1>     mov rbx, qword [reqHdrPtr]  ;Get the ptr to the req header in rbx
    37 00001B1B 807B0218            <1>     cmp byte [rbx + drvReqHdr.cmdcde], 24 ; Command code bigger than 24?
    38 00001B1F B003                <1>     mov al, drvBadCmd
    39 00001B21 0F87BE000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    40 00001B27 B001                <1>     mov al, drvBadUnit 
    41 00001B29 807B0105            <1>     cmp byte [rbx + drvReqHdr.unitnm], 05h  ;Unit greater than 5 is invalid
    42 00001B2D 0F87B2000000        <1>     ja .msdWriteErrorCode ;If yes, error!
    43 00001B33 488D354E030000      <1>     lea rsi, .msdBPBTbl  ;Point to the BPB pointer table
    44 00001B3A 0FB64301            <1>     movzx eax, byte [rbx + drvReqHdr.unitnm]
    45 00001B3E C1E003              <1>     shl eax, 3  ;Multiply by 8 to get pointer to pointer to bpb
    46 00001B41 488B2C06            <1>     mov rbp, qword [rsi + rax]    ;Get pointer to bpb in rbp
    47 00001B45 0FB64302            <1>     movzx eax, byte [rbx + drvReqHdr.cmdcde]   ;Get command code in al
    48 00001B49 D1E0                <1>     shl eax, 1  ;Multiply by 2 since each entry is a word in size
    49 00001B4B 488D0D9A000000      <1>     lea rcx, .msdTable
    50 00001B52 0FB70401            <1>     movzx eax, word [rcx + rax] ;Get distance from table base
    51 00001B56 85C0                <1>     test eax, eax   ;Is the distance 0, i.e. function not implemented?
    52 00001B58 7405                <1>     jz .msdDriverExit ;Valid function number but not for MSD, exits with done!
    53 00001B5A 4801C8              <1>     add rax, rcx    ;Else, add table address to the distance from the table
    54 00001B5D FFD0                <1>     call rax ;Goto function, rbp = devBPBPtr, rbx = reqBlkPtr
    55                              <1> .msdDriverExit:
    56 00001B5F 66814B030001        <1>     or word [rbx + drvReqHdr.status], 0100h ;Set done bit
    57 00001B65 4158                <1>     pop r8
    58 00001B67 5D                  <1>     pop rbp
    59 00001B68 5F                  <1>     pop rdi
    60 00001B69 5E                  <1>     pop rsi
    61 00001B6A 5A                  <1>     pop rdx
    62 00001B6B 59                  <1>     pop rcx
    63 00001B6C 5B                  <1>     pop rbx
    64 00001B6D 58                  <1>     pop rax
    65 00001B6E C3                  <1>     ret
    66                              <1> 
    67                              <1> .msdIOError:  ;In Read and Write errors, rdi points to the dev struc
    68 00001B6F 4889FB              <1>     mov rbx, rdi
    69 00001B72 0FB6C0              <1>     movzx eax, al   ;Number of IO-ed sectors in last request
    70 00001B75 01C6                <1>     add esi, eax    ;esi Keeps sector count across transfers
    71 00001B77 897316              <1>     mov dword [rbx + ioReqPkt.tfrlen], esi ;Save number of IO-ed sectors
    72                              <1> ;Now fall through to general error
    73                              <1> .msdGenDiskError:   ;DISK DRIVER ERROR HANDLER
    74 00001B7A B401                <1>     mov ah, 01h
    75 00001B7C CD33                <1>     int 33h ;Read status of last operation
    76 00001B7E 80FC80              <1>     cmp ah, 80h ;Timeout/Media Not Ready response (device not present)
    77 00001B81 B002                <1>     mov al, 02h ;Give device not ready error (sensibly I think)
    78 00001B83 7460                <1>     je .msdWriteErrorCode 
    79 00001B85 B00C                <1>     mov al, 0Ch ;Preliminary General Error Faults
    80 00001B87 80FCFF              <1>     cmp ah, -1  ;Sense operation failed
    81 00001B8A 7459                <1>     je .msdWriteErrorCode 
    82 00001B8C 80FC20              <1>     cmp ah, 20h ;Gen. ctrlr. failure. Consider new error code to halt system.
    83 00001B8F 7454                <1>     je .msdWriteErrorCode
    84                              <1> ;Device Not Ready
    85 00001B91 B002                <1>     mov al, 02h  ;Device not ready code
    86 00001B93 4138C0              <1>     cmp r8b, al  ;SCSI Not ready commands start with 2
    87 00001B96 744D                <1>     je .msdWriteErrorCode
    88 00001B98 49C1E808            <1>     shr r8, 8       ;Remove Sense Key
    89 00001B9C 410FB7C8            <1>     movzx ecx, r8w  ;Get ASC and ASCQ in cl and ch bzw.
    90                              <1> ;Write Protected
    91 00001BA0 30C0                <1>     xor al, al
    92 00001BA2 6681F92700          <1>     cmp cx, 0027h   ;Write protected error
    93 00001BA7 743C                <1>     je .msdWriteErrorCode
    94                              <1> ;CRC Error
    95 00001BA9 B004                <1>     mov al, 04h     ;CRC error code
    96 00001BAB 6681F90803          <1>     cmp cx, 0308h   ;LU comms CRC error (UDMA/32)
    97 00001BB0 7433                <1>     je .msdWriteErrorCode
    98 00001BB2 6681F91000          <1>     cmp cx, 0010h   ;ID CRC or ECC error
    99 00001BB7 742C                <1>     je .msdWriteErrorCode
   100 00001BB9 6681F94701          <1>     cmp cx, 0147h   ;Data phase CRC error detected
   101 00001BBE 7425                <1>     je .msdWriteErrorCode
   102                              <1> ;Seek Error
   103 00001BC0 B006                <1>     mov al, 06h     ;Seek error code
   104 00001BC2 80F902              <1>     cmp cl, 02h     ;No Seek Complete
   105 00001BC5 741E                <1>     je .msdWriteErrorCode
   106                              <1> ;Unknown Hardware Media (Shouldn't happen with Flash Drives)
   107                              <1> ;This error should only be called if BPB not recognised for Flash Drives
   108 00001BC7 B007                <1>     mov al, 07h
   109 00001BC9 80F930              <1>     cmp cl, 30h   ;All issues with media returns unknown media
   110 00001BCC 7417                <1>     je .msdWriteErrorCode
   111                              <1> ;Sector Not Found
   112 00001BCE B008                <1>     mov al, 08h     ;Sector not found code
   113 00001BD0 80F921              <1>     cmp cl, 21h     ;Illegal Request - Invalid LBA
   114 00001BD3 7410                <1>     je .msdWriteErrorCode
   115                              <1> ;Write faults
   116 00001BD5 B00A                <1>     mov al, 0Ah     ;Write fault
   117 00001BD7 80F90C              <1>     cmp cl, 0Ch     ;Write Error ASC code
   118 00001BDA 7409                <1>     je .msdWriteErrorCode
   119                              <1> ;Read faults
   120 00001BDC B00B                <1>     mov al, 0Bh     ;Read fault
   121 00001BDE 80F911              <1>     cmp cl, 11h     ;Read error
   122 00001BE1 7402                <1>     je .msdWriteErrorCode
   123                              <1> ;General Errors
   124 00001BE3 B00C                <1>     mov al, 0Ch     ;Everything else is general error
   125                              <1> .msdWriteErrorCode:    ;Jump to with al=Standard Error code
   126 00001BE5 B480                <1>     mov ah, 80h ;Set error bit
   127 00001BE7 66894303            <1>     mov word [rbx + drvReqHdr.status], ax
   128 00001BEB C3                  <1>     ret ;Return to set done bit
   129                              <1> .msdTable:
   130 00001BEC 0000                <1>     dw 0                            ;Function 0
   131 00001BEE 3200                <1>     dw .msdMedChk - .msdTable       ;Function 1
   132 00001BF0 9100                <1>     dw .msdBuildBPB - .msdTable     ;Function 2
   133 00001BF2 0501                <1>     dw .msdIOCTLRead - .msdTable    ;Function 3
   134 00001BF4 1101                <1>     dw .msdRead - .msdTable         ;Function 4
   135 00001BF6 0000                <1>     dw 0                            ;Function 5
   136 00001BF8 0000                <1>     dw 0                            ;Function 6
   137 00001BFA 0000                <1>     dw 0                            ;Function 7
   138 00001BFC 4901                <1>     dw .msdWrite - .msdTable        ;Function 8
   139 00001BFE 8101                <1>     dw .msdWriteVerify - .msdTable  ;Function 9
   140 00001C00 0000                <1>     dw 0                            ;Function 10
   141 00001C02 0000                <1>     dw 0                            ;Function 11
   142 00001C04 C601                <1>     dw .msdIOCTLWrite - .msdTable   ;Function 12
   143 00001C06 D201                <1>     dw .msdDevOpen - .msdTable      ;Function 13
   144 00001C08 ED01                <1>     dw .msdDevClose - .msdTable     ;Function 14
   145 00001C0A 0802                <1>     dw .msdRemovableMedia - .msdTable   ;Function 15
   146 00001C0C 0000                <1>     dw 0                            ;Function 16
   147 00001C0E 0000                <1>     dw 0                            ;Function 17
   148 00001C10 0000                <1>     dw 0                            ;Function 18
   149 00001C12 3302                <1>     dw .msdGenericIOCTL - .msdTable ;Function 19
   150 00001C14 0000                <1>     dw 0                            ;Function 20
   151 00001C16 0000                <1>     dw 0                            ;Function 21
   152 00001C18 0000                <1>     dw 0                            ;Function 22
   153 00001C1A 3F02                <1>     dw .msdGetLogicalDev - .msdTable    ;Function 23
   154 00001C1C 5402                <1>     dw .msdSetLogicalDev - .msdTable    ;Function 24
   155                              <1> 
   156                              <1> ;All functions have the request packet ptr in rbx and the bpb pointer in rbp
   157                              <1> .msdMedChk:          ;Function 1
   158 00001C1E B005                <1>     mov al, 05h ;Bad request structure length
   159 00001C20 803B17              <1>     cmp byte [rbx + drvReqHdr.hdrlen], mediaCheckReqPkt_size
   160 00001C23 75C0                <1>     jne .msdWriteErrorCode
   161                              <1> 
   162 00001C25 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   163 00001C2A 488D0D4D020000      <1>     lea rcx, .msdBIOSmap
   164 00001C31 8A1401              <1>     mov dl, byte [rcx + rax]    ;Translate unitnum to BIOS num
   165 00001C34 F6C280              <1>     test dl, 80h    ;If it is a fixed disk, no change!
   166 00001C37 753F                <1>     jnz .mmcNoChange
   167                              <1> ;Now we do a BIOS changeline check. If it returns 80h or 86h then check med desc
   168 00001C39 B416                <1>     mov ah, 16h 
   169 00001C3B CD33                <1>     int 33h
   170 00001C3D 0F8237FFFFFF        <1>     jc .msdGenDiskError
   171 00001C43 80FC80              <1>     cmp ah, 80h
   172 00001C46 740E                <1>     je .mmcNoChangeLine
   173 00001C48 80FC86              <1>     cmp ah, 86h
   174 00001C4B 7409                <1>     je .mmcNoChangeLine
   175 00001C4D 84E4                <1>     test ah, ah ;No change?
   176 00001C4F 7427                <1>     jz .mmcNoChange
   177 00001C51 F6C401              <1>     test ah, 1  ;Neither 80h or 86h have bit 0 set
   178 00001C54 750D                <1>     jnz .mmcChange
   179                              <1> ;If nothing, fall through and test manually, should never happen though
   180                              <1> .mmcNoChangeLine:
   181                              <1> ;Now we test Media Descriptor
   182 00001C56 480FB64301          <1>     movzx rax, byte [rbx + mediaCheckReqPkt.unitnm]
   183 00001C5B 8A530D              <1>     mov dl, byte [rbx + mediaCheckReqPkt.medesc]    ;Media descriptor
   184 00001C5E 385515              <1>     cmp byte [rbp + bpb32.media], dl    ;Compare media descriptor bytes
   185 00001C61 7410                <1>     je .mmcUnsure
   186                              <1> .mmcChange:
   187 00001C63 C6430EFF            <1>     mov byte [rbx + mediaCheckReqPkt.medret], -1
   188 00001C67 488D0506020000      <1>     lea rax, .msdDefLabel          ;Temp, ret def label
   189 00001C6E 4889430F            <1>     mov qword [rbx + mediaCheckReqPkt.desptr], rax 
   190                              <1>     ;Check here if there were any open handles on the device when it was changed
   191 00001C72 C3                  <1>     ret
   192                              <1> .mmcUnsure:
   193 00001C73 C6430E00            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 0
   194 00001C77 C3                  <1>     ret
   195                              <1> .mmcNoChange:
   196 00001C78 C6430E01            <1>     mov byte [rbx + mediaCheckReqPkt.medret], 1
   197 00001C7C C3                  <1>     ret
   198                              <1> 
   199                              <1> 
   200                              <1> .msdBuildBPB:        ;Function 2
   201 00001C7D B005                <1>     mov al, 05h ;Bad request structure length
   202 00001C7F 803B1E              <1>     cmp byte [rbx + drvReqHdr.hdrlen], bpbBuildReqPkt_size
   203 00001C82 0F855DFFFFFF        <1>     jne .msdWriteErrorCode
   204                              <1> 
   205 00001C88 4889DE              <1>     mov rsi, rbx
   206 00001C8B 480FB64601          <1>     movzx rax, byte [rsi + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   207 00001C90 488D0DE7010000      <1>     lea rcx, .msdBIOSmap
   208 00001C97 8A1401              <1>     mov dl, byte [rcx + rax]  ;Get translated BIOS number for req
   209 00001C9A 488B5E0E            <1>     mov rbx, qword [rsi + bpbBuildReqPkt.bufptr]    ;Transfer buffer
   210 00001C9E 31C9                <1>     xor ecx, ecx    ;Read Sector 0...
   211 00001CA0 034D1C              <1>     add ecx, dword [rbp + bpb32.hiddSec]    ;Of selected volume!
   212 00001CA3 B801820000          <1>     mov eax, 8201h  ;LBA Read 1 sector
   213 00001CA8 CD33                <1>     int 33h
   214 00001CAA 0F82CAFEFFFF        <1>     jc .msdGenDiskError
   215                              <1> ;Check Media Descriptor, must be F0h or F8h-FFh or unknown media
   216 00001CB0 807B15F0            <1>     cmp byte [rbx + bpb.media], 0F0h    ;3.5" FDD standard
   217 00001CB4 7418                <1>     je .mbbpb0
   218 00001CB6 807B15F8            <1>     cmp byte [rbx + bpb.media], 0F8h    ;FDD/Large Media Standard
   219 00001CBA 7412                <1>     je .mbbpb0
   220 00001CBC 807B15F9            <1>     cmp byte [rbx + bpb.media], 0F9h    ;5.25" & 720K 3.5" Media Standard
   221 00001CC0 740C                <1>     je .mbbpb0
   222 00001CC2 807B15FC            <1>     cmp byte [rbx + bpb.media], 0FCh    ;Very Obsolete Media Standards
   223 00001CC6 B007                <1>     mov al, 07h ;Unknown media error code
   224 00001CC8 0F8217FFFFFF        <1>     jb .msdWriteErrorCode
   225                              <1> .mbbpb0:
   226 00001CCE 4887DE              <1>     xchg rbx, rsi    ;Transf Buf(rbx) <-> ReqHdr(rsi)
   227 00001CD1 480FB64301          <1>     movzx rax, byte [rbx + bpbBuildReqPkt.unitnm]  ;Get unit number into rax
   228 00001CD6 488D3DAB010000      <1>     lea rdi, .msdBPBTbl
   229 00001CDD 488B3CC7            <1>     mov rdi, qword [rdi + 8*rax] ;Get pointer to pointer to buffer
   230 00001CE1 488B3F              <1>     mov rdi, qword [rdi] ;Dereference to get pointer to buffer 
   231 00001CE4 48897B16            <1>     mov qword [rbx + bpbBuildReqPkt.bpbptr], rdi ;rdi -> final bpb resting place
   232 00001CE8 B90F000000          <1>     mov ecx, bpbEx_size/8
   233 00001CED F348A5              <1>     rep movsq   ;Move the BPB data into the right space
   234 00001CF0 C3                  <1>     ret
   235                              <1> .msdIOCTLRead:       ;Function 3, returns done
   236 00001CF1 B005                <1>     mov al, drvBadDrvReq
   237 00001CF3 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   238 00001CF6 0F85E9FEFFFF        <1>     jne .msdWriteErrorCode
   239 00001CFC C3                  <1>     ret
   240                              <1> .msdRead:            ;Function 4
   241                              <1> ;Will read one sector at a time.
   242 00001CFD B005                <1>     mov al, 05h ;Bad request structure length
   243 00001CFF 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   244 00001D02 0F85DDFEFFFF        <1>     jne .msdWriteErrorCode
   245                              <1> 
   246 00001D08 4889DF              <1>     mov rdi, rbx
   247 00001D0B 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   248                              <1> .msdr0:
   249 00001D0D B682                <1>     mov dh, 82h ;LBA Read Sectors
   250 00001D0F E841010000          <1>     call .msdBlkIOCommon
   251 00001D14 0F8255FEFFFF        <1>     jc .msdIOError
   252 00001D1A 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   253 00001D22 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   254 00001D2A FFC6                <1>     inc esi
   255 00001D2C 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   256 00001D2F 75DC                <1>     jne .msdr0
   257 00001D31 4889FB              <1>     mov rbx, rdi
   258 00001D34 C3                  <1>     ret
   259                              <1> .msdWrite:           ;Function 8
   260                              <1> ;Will write one sector at a time.
   261 00001D35 B005                <1>     mov al, 05h ;Bad request structure length
   262 00001D37 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   263 00001D3A 0F85A5FEFFFF        <1>     jne .msdWriteErrorCode
   264                              <1> 
   265 00001D40 4889DF              <1>     mov rdi, rbx
   266 00001D43 31F6                <1>     xor esi, esi  ;Set sector read counter to zero
   267                              <1> .msdw0:
   268 00001D45 B683                <1>     mov dh, 83h ;LBA Write Sectors
   269 00001D47 E809010000          <1>     call .msdBlkIOCommon
   270 00001D4C 0F821DFEFFFF        <1>     jc .msdIOError
   271 00001D52 4881471A00020000    <1>     add qword [rdi + ioReqPkt.strtsc], 200h  ;Add one sector
   272 00001D5A 4881470E00020000    <1>     add qword [rdi + ioReqPkt.bufptr], 200h  ;Add one sector
   273 00001D62 FFC6                <1>     inc esi
   274 00001D64 3B7716              <1>     cmp esi, dword [rdi + ioReqPkt.tfrlen]
   275 00001D67 75DC                <1>     jne .msdw0
   276 00001D69 4889FB              <1>     mov rbx, rdi
   277 00001D6C C3                  <1>     ret
   278                              <1> .msdWriteVerify:     ;Function 9, writes sectors then verifies them
   279                              <1> ;Will write one sector at a time and then verify it.
   280 00001D6D B005                <1>     mov al, 05h ;Bad request structure length
   281 00001D6F 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   282 00001D72 0F856DFEFFFF        <1>     jne .msdWriteErrorCode
   283                              <1> 
   284 00001D78 4889DF              <1>     mov rdi, rbx
   285 00001D7B 31F6                <1>     xor esi, esi  ;Set counter to zero
   286                              <1> .msdwv0:
   287 00001D7D B683                <1>     mov dh, 83h ;LBA Write Sectors
   288 00001D7F E8D1000000          <1>     call .msdBlkIOCommon
   289 00001D84 0F82E5FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   290 00001D8A B684                <1>     mov dh, 84h ;LBA Verify Sectors
   291 00001D8C E8C4000000          <1>     call .msdBlkIOCommon
   292 00001D91 0F82D8FDFFFF        <1>     jc .msdIOError    ;Error handler needs to add to esi the value in al
   293 00001D97 4881451A00020000    <1>     add qword [rbp + ioReqPkt.strtsc], 200h  ;Add one sector
   294 00001D9F 4881450E00020000    <1>     add qword [rbp + ioReqPkt.bufptr], 200h  ;Add one sector
   295 00001DA7 FFC6                <1>     inc esi
   296 00001DA9 3B7516              <1>     cmp esi, dword [rbp + ioReqPkt.tfrlen]
   297 00001DAC 75CF                <1>     jne .msdwv0
   298 00001DAE 4889FB              <1>     mov rbx, rdi
   299 00001DB1 C3                  <1>     ret
   300                              <1> .msdIOCTLWrite:      ;Function 12, returns done
   301 00001DB2 B005                <1>     mov al, drvBadDrvReq
   302 00001DB4 803B2A              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioReqPkt_size
   303 00001DB7 0F8528FEFFFF        <1>     jne .msdWriteErrorCode
   304                              <1> 
   305 00001DBD C3                  <1>     ret
   306                              <1> .msdDevOpen:         ;Function 13
   307 00001DBE B005                <1>     mov al, drvBadDrvReq
   308 00001DC0 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], openReqPkt_size
   309 00001DC3 0F851CFEFFFF        <1>     jne .msdWriteErrorCode
   310                              <1> 
   311 00001DC9 480FB64301          <1>     movzx rax, byte [rbx + openReqPkt.unitnm]
   312 00001DCE 488D0DAE000000      <1>     lea rcx, .msdHdlCnt
   313 00001DD5 FE0401              <1>     inc byte [rcx + rax]  ;Inc handle cnt for given unit
   314 00001DD8 C3                  <1>     ret
   315                              <1> .msdDevClose:        ;Function 14
   316 00001DD9 B005                <1>     mov al, drvBadDrvReq
   317 00001DDB 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], closeReqPkt_size
   318 00001DDE 0F8501FEFFFF        <1>     jne .msdWriteErrorCode
   319                              <1> 
   320 00001DE4 480FB64301          <1>     movzx rax, byte [rbx + closeReqPkt.unitnm]
   321 00001DE9 488D0D93000000      <1>     lea rcx, .msdHdlCnt
   322 00001DF0 FE0C01              <1>     dec byte [rcx + rax]  ;Dec handle cnt for given unit
   323 00001DF3 C3                  <1>     ret
   324                              <1> .msdRemovableMedia:  ;Function 15
   325 00001DF4 B005                <1>     mov al, drvBadDrvReq
   326 00001DF6 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], remMediaReqPkt_size
   327 00001DF9 0F85E6FDFFFF        <1>     jne .msdWriteErrorCode
   328                              <1> 
   329 00001DFF 480FB64301          <1>     movzx rax, byte [rbx + remMediaReqPkt.unitnm]
   330 00001E04 488D0D73000000      <1>     lea rcx, .msdBIOSmap
   331 00001E0B 8A0401              <1>     mov al, byte [rcx + rax]    ;Get BIOS number
   332 00001E0E B900020000          <1>     mov ecx, 0200h  ;Busy bit set
   333 00001E13 31D2                <1>     xor edx, edx    ;Busy bit clear
   334 00001E15 A880                <1>     test al, 80h
   335 00001E17 0F44CA              <1>     cmovz ecx, edx
   336 00001E1A 66894B03            <1>     mov word [rbx + remMediaReqPkt.status], cx ;Set Busy bit if removable
   337 00001E1E C3                  <1>     ret
   338                              <1> .msdGenericIOCTL:    ;Function 19
   339 00001E1F B005                <1>     mov al, drvBadDrvReq
   340 00001E21 803B27              <1>     cmp byte [rbx + drvReqHdr.hdrlen], ioctlReqPkt_size
   341 00001E24 0F85BBFDFFFF        <1>     jne .msdWriteErrorCode
   342                              <1> 
   343 00001E2A C3                  <1>     ret
   344                              <1> .msdGetLogicalDev:   ;Function 23
   345 00001E2B B005                <1>     mov al, drvBadDrvReq
   346 00001E2D 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], getDevReqPkt_size
   347 00001E30 0F85AFFDFFFF        <1>     jne .msdWriteErrorCode
   348                              <1> 
   349 00001E36 8A0541000000        <1>     mov al, byte [.msdCurDev]
   350 00001E3C 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   351 00001E3F C3                  <1>     ret
   352                              <1> .msdSetLogicalDev:   ;Function 24
   353 00001E40 B005                <1>     mov al, drvBadDrvReq
   354 00001E42 803B0D              <1>     cmp byte [rbx + drvReqHdr.hdrlen], setDevReqPkt_size
   355 00001E45 0F859AFDFFFF        <1>     jne .msdWriteErrorCode
   356                              <1> 
   357 00001E4B 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]
   358 00001E4E 880529000000        <1>     mov byte [.msdCurDev], al
   359 00001E54 C3                  <1>     ret
   360                              <1> 
   361                              <1> .msdBlkIOCommon:  ;Does block IO
   362                              <1> ;Called with rdi containing old rbx value and ah with function number
   363                              <1> ;rbp points to bpb
   364                              <1> ;Error handled by caller
   365                              <1> ;Sector count handled by caller
   366                              <1> ;Called with dh = BIOS function number
   367 00001E55 480FB64701          <1>     movzx rax, byte [rdi + ioReqPkt.unitnm]
   368 00001E5A 8A90[7E1E0000]      <1>     mov dl, byte [.msdBIOSmap + rax]  ;Get translated BIOS number for req in dl
   369 00001E60 31C9                <1>     xor ecx, ecx
   370 00001E62 8B4D1C              <1>     mov ecx, dword [rbp + bpb32.hiddSec]  ;Goto start of volume
   371 00001E65 48034F1A            <1>     add rcx, qword [rdi + ioReqPkt.strtsc]  ;Get sector in volume
   372 00001E69 488B5F0E            <1>     mov rbx, qword [rdi + ioReqPkt.bufptr]  ;Get Memory Buffer
   373 00001E6D 88F4                <1>     mov ah, dh
   374 00001E6F B001                <1>     mov al, 01h ;Do one sector at a time 
   375 00001E71 CD33                <1>     int 33h
   376 00001E73 C3                  <1>     ret
   377                              <1> 
   378 00001E74 4E4F204E414D452000  <1> .msdDefLabel db "NO NAME ",0 ;Default volume label
   379                              <1> ;LASTDRIVE default is 5
   380                              <1> ;This driver can only handle a maximum of 5 drives. Any more and 
   381                              <1> ; more MSD drivers must be loaded from CONFIG.SYS
   382 00001E7D 00                  <1> .msdCurDev   db 0  ;Dev to be used by the driver saved here! (usually 1-1)
   383                              <1> ; Except when single drive in use, in which case Drive A and B refer to device 0
   384 00001E7E FFFFFFFFFF          <1> .msdBIOSmap  db 5 dup (0FFh) ;Translates DOS drive number to BIOS number
   385 00001E83 0000000000          <1> .msdHdlCnt   db 5 dup (0)    ;Keeps a count of open handles to drive N
   386 00001E88 000000000000000000- <1> .msdBPBTbl   dq 5 dup (0)    ;BPB pointer table to be returned
   386 00001E91 000000000000000000- <1>
   386 00001E9A 000000000000000000- <1>
   386 00001EA3 000000000000000000- <1>
   386 00001EAC 00000000            <1>
   387 00001EB0 000000000000000000- <1> .msdBPBblks  db 5*bpbEx_size dup (0) ;Max 5 bpb records of exFAT bpb size
   387 00001EB9 000000000000000000- <1>
   387 00001EC2 000000000000000000- <1>
   387 00001ECB 000000000000000000- <1>
   387 00001ED4 000000000000000000- <1>
   387 00001EDD 000000000000000000- <1>
   387 00001EE6 000000000000000000- <1>
   387 00001EEF 000000000000000000- <1>
   387 00001EF8 000000000000000000- <1>
   387 00001F01 000000000000000000- <1>
   387 00001F0A 000000000000000000- <1>
   387 00001F13 000000000000000000- <1>
   387 00001F1C 000000000000000000- <1>
   387 00001F25 000000000000000000- <1>
   387 00001F2E 000000000000000000- <1>
   387 00001F37 000000000000000000- <1>
   387 00001F40 000000000000000000- <1>
   387 00001F49 000000000000000000- <1>
   387 00001F52 000000000000000000- <1>
   387 00001F5B 000000000000000000- <1>
   387 00001F64 000000000000000000- <1>
   387 00001F6D 000000000000000000- <1>
   387 00001F76 000000000000000000- <1>
   387 00001F7F 000000000000000000- <1>
   387 00001F88 000000000000000000- <1>
   387 00001F91 000000000000000000- <1>
   387 00001F9A 000000000000000000- <1>
   387 00001FA3 000000000000000000- <1>
   387 00001FAC 000000000000000000- <1>
   387 00001FB5 000000000000000000- <1>
   387 00001FBE 000000000000000000- <1>
   387 00001FC7 000000000000000000- <1>
   387 00001FD0 000000000000000000- <1>
   387 00001FD9 000000000000000000- <1>
   387 00001FE2 000000000000000000- <1>
   387 00001FEB 000000000000000000- <1>
   387 00001FF4 000000000000000000- <1>
   387 00001FFD 000000000000000000- <1>
   387 00002006 000000000000000000- <1>
   387 0000200F 000000000000000000- <1>
   387 00002018 000000000000000000- <1>
   387 00002021 000000000000000000- <1>
   387 0000202A 000000000000000000- <1>
   387 00002033 000000000000000000- <1>
   387 0000203C 000000000000000000- <1>
   387 00002045 000000000000000000- <1>
   387 0000204E 000000000000000000- <1>
   387 00002057 000000000000000000- <1>
   387 00002060 000000000000000000- <1>
   387 00002069 000000000000000000- <1>
   387 00002072 000000000000000000- <1>
   387 0000207B 000000000000000000- <1>
   387 00002084 000000000000000000- <1>
   387 0000208D 000000000000000000- <1>
   387 00002096 000000000000000000- <1>
   387 0000209F 000000000000000000- <1>
   387 000020A8 000000000000000000- <1>
   387 000020B1 000000000000000000- <1>
   387 000020BA 000000000000000000- <1>
   387 000020C3 000000000000000000- <1>
   387 000020CC 000000000000000000- <1>
   387 000020D5 000000000000000000- <1>
   387 000020DE 000000000000000000- <1>
   387 000020E7 000000000000000000- <1>
   387 000020F0 000000000000000000- <1>
   387 000020F9 000000000000000000- <1>
   387 00002102 000000000000        <1>
   388                              <1> 
   389                              <1> endptr equ $
    27                                  Segment dynamicDataArea nobits valign=1 vfollows=resSeg
    28                                  %include "./Source/BSS/dosDynaDataArea.asm"
    29                              <1> ;Create SFT header and corresponding array of five default sft entries
    30 00000000 <res Ah>            <1> firstSftHeader  resb sfth_size
    31 0000000A <res 3Dh>           <1> firstSft        resb sft_size
    32 00000047 <res 3Dh>           <1> secondSft       resb sft_size
    33 00000084 <res 3Dh>           <1> thirdSft        resb sft_size
    34 000000C1 <res 3Dh>           <1> fourthSft       resb sft_size
    35 000000FE <res 3Dh>           <1> fifthSft        resb sft_size
    36                              <1> 
    37                              <1> ;Create DPB chain of first 5 available DPB slots
    38                              <1> ;The bottom three DPB's are jettisonable if the devices dont exist!
    39 0000013B <res 34h>           <1> firstDPB        resb dpb_size
    40 0000016F <res 34h>           <1> secondDPB       resb dpb_size
    41                              <1> DOSENDPTR:   ;Points to the end of the initially reserved DOS area
    42                              <1> ;Always jettison this space
    43 000001A3 <res 34h>           <1> thirdDPB        resb dpb_size
    44 000001D7 <res 34h>           <1> fourthDPB       resb dpb_size
    45 0000020B <res 34h>           <1> fifthDPB        resb dpb_size 
    46                              <1> 
    47                              <1> ;Create a one drive CDS to keep track of drive A's current dir
    48                              <1> ;Replace once CONFGI.SYS has been read
    49 0000023F <res 5Bh>           <1> initCDS         resb cds_size 
    50                              <1> 
    51                              <1> 
    52 0000029A <res 20h>           <1> tmpBufHdr       resb bufferHdr_size
    53 000002BA <res 1000h>         <1> msdTempBuffer   resb 4096    ;Reserve one (MAX) sectors' worth of space
    54                              <1> ;This buffer is used as a temp read buffer by the MSDdriver directly (no header)
    55                              <1> dynamicDataAreaLength equ $
